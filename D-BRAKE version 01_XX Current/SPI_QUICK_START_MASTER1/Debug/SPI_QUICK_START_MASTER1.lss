
SPI_QUICK_START_MASTER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000156a4  00003100  00003100  00003100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000187a4  000187a4  000187a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000474  20000000  000187ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003530  20000474  00018c20  00020474  2**2
                  ALLOC
  4 .stack        00004004  200039a4  0001c150  00020474  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00055fa8  00000000  00000000  000204f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007194  00000000  00000000  0007649f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000080c9  00000000  00000000  0007d633  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001730  00000000  00000000  000856fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014a8  00000000  00000000  00086e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f64e  00000000  00000000  000882d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026042  00000000  00000000  000a7922  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000691df  00000000  00000000  000cd964  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000054e4  00000000  00000000  00136b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003100 <_sfixed>:
    3100:	200079a8 	.word	0x200079a8
    3104:	000143e1 	.word	0x000143e1
    3108:	00014465 	.word	0x00014465
    310c:	000143b9 	.word	0x000143b9
	...
    312c:	0001446d 	.word	0x0001446d
	...
    3138:	0001446d 	.word	0x0001446d
    313c:	0001446d 	.word	0x0001446d
    3140:	0001446d 	.word	0x0001446d
    3144:	0001446d 	.word	0x0001446d
    3148:	0001446d 	.word	0x0001446d
    314c:	0001446d 	.word	0x0001446d
    3150:	000042dd 	.word	0x000042dd
    3154:	0001446d 	.word	0x0001446d
    3158:	0001446d 	.word	0x0001446d
    315c:	00012ab9 	.word	0x00012ab9
    3160:	00012acd 	.word	0x00012acd
    3164:	00012ae1 	.word	0x00012ae1
    3168:	00012af5 	.word	0x00012af5
    316c:	00012b09 	.word	0x00012b09
    3170:	00012b1d 	.word	0x00012b1d
    3174:	000057c9 	.word	0x000057c9
    3178:	000057dd 	.word	0x000057dd
    317c:	000057f1 	.word	0x000057f1
    3180:	00005805 	.word	0x00005805
    3184:	00005819 	.word	0x00005819
    3188:	0000582d 	.word	0x0000582d
    318c:	00005841 	.word	0x00005841
    3190:	00005855 	.word	0x00005855
    3194:	00003c5d 	.word	0x00003c5d
    3198:	0001446d 	.word	0x0001446d
    319c:	0001446d 	.word	0x0001446d
    31a0:	0001446d 	.word	0x0001446d

000031a4 <__do_global_dtors_aux>:
    31a4:	b510      	push	{r4, lr}
    31a6:	4c06      	ldr	r4, [pc, #24]	; (31c0 <__do_global_dtors_aux+0x1c>)
    31a8:	7823      	ldrb	r3, [r4, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d107      	bne.n	31be <__do_global_dtors_aux+0x1a>
    31ae:	4b05      	ldr	r3, [pc, #20]	; (31c4 <__do_global_dtors_aux+0x20>)
    31b0:	2b00      	cmp	r3, #0
    31b2:	d002      	beq.n	31ba <__do_global_dtors_aux+0x16>
    31b4:	4804      	ldr	r0, [pc, #16]	; (31c8 <__do_global_dtors_aux+0x24>)
    31b6:	e000      	b.n	31ba <__do_global_dtors_aux+0x16>
    31b8:	bf00      	nop
    31ba:	2301      	movs	r3, #1
    31bc:	7023      	strb	r3, [r4, #0]
    31be:	bd10      	pop	{r4, pc}
    31c0:	20000474 	.word	0x20000474
    31c4:	00000000 	.word	0x00000000
    31c8:	000187ac 	.word	0x000187ac

000031cc <frame_dummy>:
    31cc:	b508      	push	{r3, lr}
    31ce:	4b08      	ldr	r3, [pc, #32]	; (31f0 <frame_dummy+0x24>)
    31d0:	2b00      	cmp	r3, #0
    31d2:	d003      	beq.n	31dc <frame_dummy+0x10>
    31d4:	4807      	ldr	r0, [pc, #28]	; (31f4 <frame_dummy+0x28>)
    31d6:	4908      	ldr	r1, [pc, #32]	; (31f8 <frame_dummy+0x2c>)
    31d8:	e000      	b.n	31dc <frame_dummy+0x10>
    31da:	bf00      	nop
    31dc:	4807      	ldr	r0, [pc, #28]	; (31fc <frame_dummy+0x30>)
    31de:	6803      	ldr	r3, [r0, #0]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d003      	beq.n	31ec <frame_dummy+0x20>
    31e4:	4b06      	ldr	r3, [pc, #24]	; (3200 <frame_dummy+0x34>)
    31e6:	2b00      	cmp	r3, #0
    31e8:	d000      	beq.n	31ec <frame_dummy+0x20>
    31ea:	4798      	blx	r3
    31ec:	bd08      	pop	{r3, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00000000 	.word	0x00000000
    31f4:	000187ac 	.word	0x000187ac
    31f8:	20000478 	.word	0x20000478
    31fc:	000187ac 	.word	0x000187ac
    3200:	00000000 	.word	0x00000000

00003204 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3204:	b580      	push	{r7, lr}
    3206:	b082      	sub	sp, #8
    3208:	af00      	add	r7, sp, #0
    320a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	2200      	movs	r2, #0
    3210:	701a      	strb	r2, [r3, #0]
}
    3212:	46bd      	mov	sp, r7
    3214:	b002      	add	sp, #8
    3216:	bd80      	pop	{r7, pc}

00003218 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	1c02      	adds	r2, r0, #0
    3220:	6039      	str	r1, [r7, #0]
    3222:	1dfb      	adds	r3, r7, #7
    3224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3226:	1dfb      	adds	r3, r7, #7
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b01      	cmp	r3, #1
    322c:	d00a      	beq.n	3244 <system_apb_clock_set_mask+0x2c>
    322e:	2b02      	cmp	r3, #2
    3230:	d00f      	beq.n	3252 <system_apb_clock_set_mask+0x3a>
    3232:	2b00      	cmp	r3, #0
    3234:	d114      	bne.n	3260 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <system_apb_clock_set_mask+0x58>)
    3238:	4a0d      	ldr	r2, [pc, #52]	; (3270 <system_apb_clock_set_mask+0x58>)
    323a:	6991      	ldr	r1, [r2, #24]
    323c:	683a      	ldr	r2, [r7, #0]
    323e:	430a      	orrs	r2, r1
    3240:	619a      	str	r2, [r3, #24]
			break;
    3242:	e00f      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3244:	4b0a      	ldr	r3, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3246:	4a0a      	ldr	r2, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3248:	69d1      	ldr	r1, [r2, #28]
    324a:	683a      	ldr	r2, [r7, #0]
    324c:	430a      	orrs	r2, r1
    324e:	61da      	str	r2, [r3, #28]
			break;
    3250:	e008      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3252:	4b07      	ldr	r3, [pc, #28]	; (3270 <system_apb_clock_set_mask+0x58>)
    3254:	4a06      	ldr	r2, [pc, #24]	; (3270 <system_apb_clock_set_mask+0x58>)
    3256:	6a11      	ldr	r1, [r2, #32]
    3258:	683a      	ldr	r2, [r7, #0]
    325a:	430a      	orrs	r2, r1
    325c:	621a      	str	r2, [r3, #32]
			break;
    325e:	e001      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3260:	2317      	movs	r3, #23
    3262:	e000      	b.n	3266 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3264:	2300      	movs	r3, #0
}
    3266:	1c18      	adds	r0, r3, #0
    3268:	46bd      	mov	sp, r7
    326a:	b002      	add	sp, #8
    326c:	bd80      	pop	{r7, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	40000400 	.word	0x40000400

00003274 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3274:	b580      	push	{r7, lr}
    3276:	b082      	sub	sp, #8
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	2280      	movs	r2, #128	; 0x80
    3280:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2200      	movs	r2, #0
    3286:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	2201      	movs	r2, #1
    328c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2200      	movs	r2, #0
    3292:	70da      	strb	r2, [r3, #3]
}
    3294:	46bd      	mov	sp, r7
    3296:	b002      	add	sp, #8
    3298:	bd80      	pop	{r7, pc}
    329a:	46c0      	nop			; (mov r8, r8)

0000329c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	1c02      	adds	r2, r0, #0
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    32a8:	1dfb      	adds	r3, r7, #7
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <system_voltage_reference_enable+0x1a>
    32b0:	2b01      	cmp	r3, #1
    32b2:	d007      	beq.n	32c4 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    32b4:	e00d      	b.n	32d2 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    32b6:	4b08      	ldr	r3, [pc, #32]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32bc:	2102      	movs	r1, #2
    32be:	430a      	orrs	r2, r1
    32c0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32c2:	e006      	b.n	32d2 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    32c4:	4b04      	ldr	r3, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c6:	4a04      	ldr	r2, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32ca:	2104      	movs	r1, #4
    32cc:	430a      	orrs	r2, r1
    32ce:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32d0:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    32d2:	46bd      	mov	sp, r7
    32d4:	b002      	add	sp, #8
    32d6:	bd80      	pop	{r7, pc}
    32d8:	40000800 	.word	0x40000800

000032dc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32ea:	68fb      	ldr	r3, [r7, #12]
    32ec:	7e5b      	ldrb	r3, [r3, #25]
    32ee:	b2db      	uxtb	r3, r3
    32f0:	b2db      	uxtb	r3, r3
    32f2:	b25b      	sxtb	r3, r3
    32f4:	2b00      	cmp	r3, #0
    32f6:	da01      	bge.n	32fc <adc_is_syncing+0x20>
		return true;
    32f8:	2301      	movs	r3, #1
    32fa:	e000      	b.n	32fe <adc_is_syncing+0x22>
	}

	return false;
    32fc:	2300      	movs	r3, #0
}
    32fe:	1c18      	adds	r0, r3, #0
    3300:	46bd      	mov	sp, r7
    3302:	b004      	add	sp, #16
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)

00003308 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    3308:	b580      	push	{r7, lr}
    330a:	b082      	sub	sp, #8
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	2200      	movs	r2, #0
    3314:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	2200      	movs	r2, #0
    331a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2200      	movs	r2, #0
    3320:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	2200      	movs	r2, #0
    3326:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	2200      	movs	r2, #0
    332c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2200      	movs	r2, #0
    3332:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2200      	movs	r2, #0
    3338:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	2200      	movs	r2, #0
    333e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	2200      	movs	r2, #0
    3344:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	22c0      	movs	r2, #192	; 0xc0
    334a:	0152      	lsls	r2, r2, #5
    334c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	2200      	movs	r2, #0
    3352:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	2200      	movs	r2, #0
    335e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	2200      	movs	r2, #0
    3364:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	2200      	movs	r2, #0
    336a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    336c:	687a      	ldr	r2, [r7, #4]
    336e:	232a      	movs	r3, #42	; 0x2a
    3370:	2100      	movs	r1, #0
    3372:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	2200      	movs	r2, #0
    3378:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	2200      	movs	r2, #0
    337e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    3380:	687a      	ldr	r2, [r7, #4]
    3382:	2324      	movs	r3, #36	; 0x24
    3384:	2100      	movs	r1, #0
    3386:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	2200      	movs	r2, #0
    338c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	2200      	movs	r2, #0
    3392:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	2200      	movs	r2, #0
    3398:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    339a:	687a      	ldr	r2, [r7, #4]
    339c:	232b      	movs	r3, #43	; 0x2b
    339e:	2100      	movs	r1, #0
    33a0:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
    33a2:	687a      	ldr	r2, [r7, #4]
    33a4:	232c      	movs	r3, #44	; 0x2c
    33a6:	2100      	movs	r1, #0
    33a8:	54d1      	strb	r1, [r2, r3]
}
    33aa:	46bd      	mov	sp, r7
    33ac:	b002      	add	sp, #8
    33ae:	bd80      	pop	{r7, pc}

000033b0 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b098      	sub	sp, #96	; 0x60
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    33b8:	1c3a      	adds	r2, r7, #0
    33ba:	320c      	adds	r2, #12
    33bc:	4b15      	ldr	r3, [pc, #84]	; (3414 <_adc_configure_ain_pin+0x64>)
    33be:	1c11      	adds	r1, r2, #0
    33c0:	1c1a      	adds	r2, r3, #0
    33c2:	2350      	movs	r3, #80	; 0x50
    33c4:	1c08      	adds	r0, r1, #0
    33c6:	1c11      	adds	r1, r2, #0
    33c8:	1c1a      	adds	r2, r3, #0
    33ca:	4b13      	ldr	r3, [pc, #76]	; (3418 <_adc_configure_ain_pin+0x68>)
    33cc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    33ce:	4b13      	ldr	r3, [pc, #76]	; (341c <_adc_configure_ain_pin+0x6c>)
    33d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	2b13      	cmp	r3, #19
    33d6:	d81a      	bhi.n	340e <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    33d8:	1c3b      	adds	r3, r7, #0
    33da:	330c      	adds	r3, #12
    33dc:	687a      	ldr	r2, [r7, #4]
    33de:	0092      	lsls	r2, r2, #2
    33e0:	58d3      	ldr	r3, [r2, r3]
    33e2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    33e4:	1c3b      	adds	r3, r7, #0
    33e6:	3308      	adds	r3, #8
    33e8:	1c18      	adds	r0, r3, #0
    33ea:	4b0d      	ldr	r3, [pc, #52]	; (3420 <_adc_configure_ain_pin+0x70>)
    33ec:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    33ee:	1c3b      	adds	r3, r7, #0
    33f0:	3308      	adds	r3, #8
    33f2:	2200      	movs	r2, #0
    33f4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    33f6:	1c3b      	adds	r3, r7, #0
    33f8:	3308      	adds	r3, #8
    33fa:	2201      	movs	r2, #1
    33fc:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    33fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3400:	b2da      	uxtb	r2, r3
    3402:	1c3b      	adds	r3, r7, #0
    3404:	3308      	adds	r3, #8
    3406:	1c10      	adds	r0, r2, #0
    3408:	1c19      	adds	r1, r3, #0
    340a:	4b06      	ldr	r3, [pc, #24]	; (3424 <_adc_configure_ain_pin+0x74>)
    340c:	4798      	blx	r3
	}
}
    340e:	46bd      	mov	sp, r7
    3410:	b018      	add	sp, #96	; 0x60
    3412:	bd80      	pop	{r7, pc}
    3414:	000180d4 	.word	0x000180d4
    3418:	00017e9d 	.word	0x00017e9d
    341c:	0000ffff 	.word	0x0000ffff
    3420:	00003275 	.word	0x00003275
    3424:	00014361 	.word	0x00014361

00003428 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    3428:	b5b0      	push	{r4, r5, r7, lr}
    342a:	b088      	sub	sp, #32
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    3432:	1c3b      	adds	r3, r7, #0
    3434:	331f      	adds	r3, #31
    3436:	2200      	movs	r2, #0
    3438:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    343a:	2310      	movs	r3, #16
    343c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    343e:	1c3b      	adds	r3, r7, #0
    3440:	3317      	adds	r3, #23
    3442:	2200      	movs	r2, #0
    3444:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
    3446:	4bcc      	ldr	r3, [pc, #816]	; (3778 <_adc_set_config+0x350>)
    3448:	681a      	ldr	r2, [r3, #0]
    344a:	23f0      	movs	r3, #240	; 0xf0
    344c:	021b      	lsls	r3, r3, #8
    344e:	4013      	ands	r3, r2
    3450:	0b1a      	lsrs	r2, r3, #12
    3452:	1c3b      	adds	r3, r7, #0
    3454:	3313      	adds	r3, #19
    3456:	701a      	strb	r2, [r3, #0]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	60fb      	str	r3, [r7, #12]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    345e:	1c3b      	adds	r3, r7, #0
    3460:	3308      	adds	r3, #8
    3462:	1c18      	adds	r0, r3, #0
    3464:	4bc5      	ldr	r3, [pc, #788]	; (377c <_adc_set_config+0x354>)
    3466:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	781a      	ldrb	r2, [r3, #0]
    346c:	1c3b      	adds	r3, r7, #0
    346e:	3308      	adds	r3, #8
    3470:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    3472:	1c3b      	adds	r3, r7, #0
    3474:	3308      	adds	r3, #8
    3476:	2017      	movs	r0, #23
    3478:	1c19      	adds	r1, r3, #0
    347a:	4bc1      	ldr	r3, [pc, #772]	; (3780 <_adc_set_config+0x358>)
    347c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    347e:	2017      	movs	r0, #23
    3480:	4bc0      	ldr	r3, [pc, #768]	; (3784 <_adc_set_config+0x35c>)
    3482:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    3484:	683a      	ldr	r2, [r7, #0]
    3486:	232c      	movs	r3, #44	; 0x2c
    3488:	5cd3      	ldrb	r3, [r2, r3]
    348a:	2b00      	cmp	r3, #0
    348c:	d040      	beq.n	3510 <_adc_set_config+0xe8>
		uint8_t offset = config->pin_scan.offset_start_scan;
    348e:	1c3b      	adds	r3, r7, #0
    3490:	3316      	adds	r3, #22
    3492:	6839      	ldr	r1, [r7, #0]
    3494:	222b      	movs	r2, #43	; 0x2b
    3496:	5c8a      	ldrb	r2, [r1, r2]
    3498:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    349a:	683b      	ldr	r3, [r7, #0]
    349c:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    349e:	1c3b      	adds	r3, r7, #0
    34a0:	3315      	adds	r3, #21
    34a2:	1c3a      	adds	r2, r7, #0
    34a4:	3216      	adds	r2, #22
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	188a      	adds	r2, r1, r2
    34aa:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    34ac:	683a      	ldr	r2, [r7, #0]
    34ae:	232c      	movs	r3, #44	; 0x2c
    34b0:	5cd1      	ldrb	r1, [r2, r3]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    34b2:	1c3b      	adds	r3, r7, #0
    34b4:	330b      	adds	r3, #11
    34b6:	1c3a      	adds	r2, r7, #0
    34b8:	3215      	adds	r2, #21
    34ba:	7812      	ldrb	r2, [r2, #0]
    34bc:	188a      	adds	r2, r1, r2
    34be:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34c0:	e018      	b.n	34f4 <_adc_set_config+0xcc>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    34c2:	1c3b      	adds	r3, r7, #0
    34c4:	3316      	adds	r3, #22
    34c6:	781a      	ldrb	r2, [r3, #0]
    34c8:	230f      	movs	r3, #15
    34ca:	401a      	ands	r2, r3
    34cc:	683b      	ldr	r3, [r7, #0]
    34ce:	7b1b      	ldrb	r3, [r3, #12]
    34d0:	18d3      	adds	r3, r2, r3
    34d2:	1c18      	adds	r0, r3, #0
    34d4:	4bac      	ldr	r3, [pc, #688]	; (3788 <_adc_set_config+0x360>)
    34d6:	4798      	blx	r3
			start_pin++;
    34d8:	1c3b      	adds	r3, r7, #0
    34da:	3315      	adds	r3, #21
    34dc:	781a      	ldrb	r2, [r3, #0]
    34de:	1c3b      	adds	r3, r7, #0
    34e0:	3315      	adds	r3, #21
    34e2:	3201      	adds	r2, #1
    34e4:	701a      	strb	r2, [r3, #0]
			offset++;
    34e6:	1c3b      	adds	r3, r7, #0
    34e8:	3316      	adds	r3, #22
    34ea:	781a      	ldrb	r2, [r3, #0]
    34ec:	1c3b      	adds	r3, r7, #0
    34ee:	3316      	adds	r3, #22
    34f0:	3201      	adds	r2, #1
    34f2:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34f4:	1c3a      	adds	r2, r7, #0
    34f6:	3215      	adds	r2, #21
    34f8:	1c3b      	adds	r3, r7, #0
    34fa:	330b      	adds	r3, #11
    34fc:	7812      	ldrb	r2, [r2, #0]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	429a      	cmp	r2, r3
    3502:	d3de      	bcc.n	34c2 <_adc_set_config+0x9a>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	89db      	ldrh	r3, [r3, #14]
    3508:	1c18      	adds	r0, r3, #0
    350a:	4b9f      	ldr	r3, [pc, #636]	; (3788 <_adc_set_config+0x360>)
    350c:	4798      	blx	r3
    350e:	e009      	b.n	3524 <_adc_set_config+0xfc>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	7b1b      	ldrb	r3, [r3, #12]
    3514:	1c18      	adds	r0, r3, #0
    3516:	4b9c      	ldr	r3, [pc, #624]	; (3788 <_adc_set_config+0x360>)
    3518:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    351a:	683b      	ldr	r3, [r7, #0]
    351c:	89db      	ldrh	r3, [r3, #14]
    351e:	1c18      	adds	r0, r3, #0
    3520:	4b99      	ldr	r3, [pc, #612]	; (3788 <_adc_set_config+0x360>)
    3522:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    3524:	683b      	ldr	r3, [r7, #0]
    3526:	7d5b      	ldrb	r3, [r3, #21]
    3528:	009b      	lsls	r3, r3, #2
    352a:	b2da      	uxtb	r2, r3
    352c:	68fb      	ldr	r3, [r7, #12]
    352e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    3530:	683b      	ldr	r3, [r7, #0]
    3532:	7d9b      	ldrb	r3, [r3, #22]
    3534:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    3536:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    353c:	b2db      	uxtb	r3, r3
    353e:	4313      	orrs	r3, r2
    3540:	b2db      	uxtb	r3, r3
    3542:	b2da      	uxtb	r2, r3
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    3548:	683b      	ldr	r3, [r7, #0]
    354a:	791b      	ldrb	r3, [r3, #4]
    354c:	2b34      	cmp	r3, #52	; 0x34
    354e:	d85a      	bhi.n	3606 <_adc_set_config+0x1de>
    3550:	009a      	lsls	r2, r3, #2
    3552:	4b8e      	ldr	r3, [pc, #568]	; (378c <_adc_set_config+0x364>)
    3554:	18d3      	adds	r3, r2, r3
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    355a:	1c3b      	adds	r3, r7, #0
    355c:	331f      	adds	r3, #31
    355e:	683a      	ldr	r2, [r7, #0]
    3560:	7c52      	ldrb	r2, [r2, #17]
    3562:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    3564:	1c3b      	adds	r3, r7, #0
    3566:	3317      	adds	r3, #23
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	7c12      	ldrb	r2, [r2, #16]
    356c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    356e:	2310      	movs	r3, #16
    3570:	61bb      	str	r3, [r7, #24]
		break;
    3572:	e04a      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    3574:	1c3b      	adds	r3, r7, #0
    3576:	331f      	adds	r3, #31
    3578:	2201      	movs	r2, #1
    357a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    357c:	1c3b      	adds	r3, r7, #0
    357e:	3317      	adds	r3, #23
    3580:	2202      	movs	r2, #2
    3582:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    3584:	2310      	movs	r3, #16
    3586:	61bb      	str	r3, [r7, #24]
		break;
    3588:	e03f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    358a:	1c3b      	adds	r3, r7, #0
    358c:	331f      	adds	r3, #31
    358e:	2202      	movs	r2, #2
    3590:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    3592:	1c3b      	adds	r3, r7, #0
    3594:	3317      	adds	r3, #23
    3596:	2204      	movs	r2, #4
    3598:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    359a:	2310      	movs	r3, #16
    359c:	61bb      	str	r3, [r7, #24]
		break;
    359e:	e034      	b.n	360a <_adc_set_config+0x1e2>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
    35a0:	1c3b      	adds	r3, r7, #0
    35a2:	3313      	adds	r3, #19
    35a4:	781b      	ldrb	r3, [r3, #0]
    35a6:	2b02      	cmp	r3, #2
    35a8:	d804      	bhi.n	35b4 <_adc_set_config+0x18c>
			adjres = ADC_DIVIDE_RESULT_8;
    35aa:	1c3b      	adds	r3, r7, #0
    35ac:	331f      	adds	r3, #31
    35ae:	2203      	movs	r2, #3
    35b0:	701a      	strb	r2, [r3, #0]
    35b2:	e003      	b.n	35bc <_adc_set_config+0x194>
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
    35b4:	1c3b      	adds	r3, r7, #0
    35b6:	331f      	adds	r3, #31
    35b8:	2201      	movs	r2, #1
    35ba:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    35bc:	1c3b      	adds	r3, r7, #0
    35be:	3317      	adds	r3, #23
    35c0:	2206      	movs	r2, #6
    35c2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35c4:	2310      	movs	r3, #16
    35c6:	61bb      	str	r3, [r7, #24]
		break;
    35c8:	e01f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
    35ca:	1c3b      	adds	r3, r7, #0
    35cc:	3313      	adds	r3, #19
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b02      	cmp	r3, #2
    35d2:	d804      	bhi.n	35de <_adc_set_config+0x1b6>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
    35d4:	1c3b      	adds	r3, r7, #0
    35d6:	331f      	adds	r3, #31
    35d8:	2204      	movs	r2, #4
    35da:	701a      	strb	r2, [r3, #0]
    35dc:	e003      	b.n	35e6 <_adc_set_config+0x1be>
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
    35de:	1c3b      	adds	r3, r7, #0
    35e0:	331f      	adds	r3, #31
    35e2:	2200      	movs	r2, #0
    35e4:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    35e6:	1c3b      	adds	r3, r7, #0
    35e8:	3317      	adds	r3, #23
    35ea:	2208      	movs	r2, #8
    35ec:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35ee:	2310      	movs	r3, #16
    35f0:	61bb      	str	r3, [r7, #24]
		break;
    35f2:	e00a      	b.n	360a <_adc_set_config+0x1e2>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    35f4:	2330      	movs	r3, #48	; 0x30
    35f6:	61bb      	str	r3, [r7, #24]
		break;
    35f8:	e007      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    35fa:	2320      	movs	r3, #32
    35fc:	61bb      	str	r3, [r7, #24]
		break;
    35fe:	e004      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    3600:	2300      	movs	r3, #0
    3602:	61bb      	str	r3, [r7, #24]
		break;
    3604:	e001      	b.n	360a <_adc_set_config+0x1e2>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    3606:	2317      	movs	r3, #23
    3608:	e1a9      	b.n	395e <_adc_set_config+0x536>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    360a:	1c3b      	adds	r3, r7, #0
    360c:	331f      	adds	r3, #31
    360e:	781b      	ldrb	r3, [r3, #0]
    3610:	011b      	lsls	r3, r3, #4
    3612:	b2da      	uxtb	r2, r3
    3614:	2370      	movs	r3, #112	; 0x70
    3616:	4013      	ands	r3, r2
    3618:	b2da      	uxtb	r2, r3
    361a:	1c3b      	adds	r3, r7, #0
    361c:	3317      	adds	r3, #23
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	4313      	orrs	r3, r2
    3622:	b2da      	uxtb	r2, r3
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    3628:	683b      	ldr	r3, [r7, #0]
    362a:	7ddb      	ldrb	r3, [r3, #23]
    362c:	2b3f      	cmp	r3, #63	; 0x3f
    362e:	d901      	bls.n	3634 <_adc_set_config+0x20c>
		return STATUS_ERR_INVALID_ARG;
    3630:	2317      	movs	r3, #23
    3632:	e194      	b.n	395e <_adc_set_config+0x536>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	1c18      	adds	r0, r3, #0
    3642:	4b53      	ldr	r3, [pc, #332]	; (3790 <_adc_set_config+0x368>)
    3644:	4798      	blx	r3
    3646:	1c03      	adds	r3, r0, #0
    3648:	2b00      	cmp	r3, #0
    364a:	d1f8      	bne.n	363e <_adc_set_config+0x216>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    364c:	683b      	ldr	r3, [r7, #0]
    364e:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3650:	69bb      	ldr	r3, [r7, #24]
    3652:	b29b      	uxth	r3, r3
    3654:	4313      	orrs	r3, r2
    3656:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    3658:	6839      	ldr	r1, [r7, #0]
    365a:	2324      	movs	r3, #36	; 0x24
    365c:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    365e:	00db      	lsls	r3, r3, #3
    3660:	b29b      	uxth	r3, r3
    3662:	4313      	orrs	r3, r2
    3664:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    3666:	683b      	ldr	r3, [r7, #0]
    3668:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    366a:	009b      	lsls	r3, r3, #2
    366c:	b29b      	uxth	r3, r3
    366e:	4313      	orrs	r3, r2
    3670:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3676:	18db      	adds	r3, r3, r3
    3678:	b29b      	uxth	r3, r3
    367a:	4313      	orrs	r3, r2
    367c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    367e:	683b      	ldr	r3, [r7, #0]
    3680:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3682:	4313      	orrs	r3, r2
    3684:	b29a      	uxth	r2, r3
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    368a:	683b      	ldr	r3, [r7, #0]
    368c:	7e1b      	ldrb	r3, [r3, #24]
    368e:	2b00      	cmp	r3, #0
    3690:	d100      	bne.n	3694 <_adc_set_config+0x26c>
    3692:	e0bf      	b.n	3814 <_adc_set_config+0x3ec>
		switch (resolution) {
    3694:	69bb      	ldr	r3, [r7, #24]
    3696:	2b10      	cmp	r3, #16
    3698:	d100      	bne.n	369c <_adc_set_config+0x274>
    369a:	e094      	b.n	37c6 <_adc_set_config+0x39e>
    369c:	d802      	bhi.n	36a4 <_adc_set_config+0x27c>
    369e:	2b00      	cmp	r3, #0
    36a0:	d04f      	beq.n	3742 <_adc_set_config+0x31a>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36a2:	e0b7      	b.n	3814 <_adc_set_config+0x3ec>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
    36a4:	2b20      	cmp	r3, #32
    36a6:	d025      	beq.n	36f4 <_adc_set_config+0x2cc>
    36a8:	2b30      	cmp	r3, #48	; 0x30
    36aa:	d000      	beq.n	36ae <_adc_set_config+0x286>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36ac:	e0b2      	b.n	3814 <_adc_set_config+0x3ec>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	7cdb      	ldrb	r3, [r3, #19]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d013      	beq.n	36de <_adc_set_config+0x2b6>
					(config->window.window_lower_value > 127 ||
    36b6:	683b      	ldr	r3, [r7, #0]
    36b8:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ba:	2b7f      	cmp	r3, #127	; 0x7f
    36bc:	dc0d      	bgt.n	36da <_adc_set_config+0x2b2>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    36c2:	1c1a      	adds	r2, r3, #0
    36c4:	3280      	adds	r2, #128	; 0x80
    36c6:	db08      	blt.n	36da <_adc_set_config+0x2b2>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36c8:	683b      	ldr	r3, [r7, #0]
    36ca:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36cc:	2b7f      	cmp	r3, #127	; 0x7f
    36ce:	dc04      	bgt.n	36da <_adc_set_config+0x2b2>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36d4:	1c1a      	adds	r2, r3, #0
    36d6:	3280      	adds	r2, #128	; 0x80
    36d8:	da01      	bge.n	36de <_adc_set_config+0x2b6>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36da:	2317      	movs	r3, #23
    36dc:	e13f      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 255 ||
    36de:	683b      	ldr	r3, [r7, #0]
    36e0:	69db      	ldr	r3, [r3, #28]
    36e2:	2bff      	cmp	r3, #255	; 0xff
    36e4:	dc03      	bgt.n	36ee <_adc_set_config+0x2c6>
					config->window.window_upper_value > 255){
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    36ea:	2bff      	cmp	r3, #255	; 0xff
    36ec:	dd01      	ble.n	36f2 <_adc_set_config+0x2ca>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36ee:	2317      	movs	r3, #23
    36f0:	e135      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    36f2:	e08f      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    36f4:	683b      	ldr	r3, [r7, #0]
    36f6:	7cdb      	ldrb	r3, [r3, #19]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d015      	beq.n	3728 <_adc_set_config+0x300>
					(config->window.window_lower_value > 511 ||
    36fc:	683b      	ldr	r3, [r7, #0]
    36fe:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    3700:	4b24      	ldr	r3, [pc, #144]	; (3794 <_adc_set_config+0x36c>)
    3702:	429a      	cmp	r2, r3
    3704:	dc0e      	bgt.n	3724 <_adc_set_config+0x2fc>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    370a:	4b23      	ldr	r3, [pc, #140]	; (3798 <_adc_set_config+0x370>)
    370c:	429a      	cmp	r2, r3
    370e:	db09      	blt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    3710:	683b      	ldr	r3, [r7, #0]
    3712:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3714:	4b1f      	ldr	r3, [pc, #124]	; (3794 <_adc_set_config+0x36c>)
    3716:	429a      	cmp	r2, r3
    3718:	dc04      	bgt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
    371a:	683b      	ldr	r3, [r7, #0]
    371c:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    371e:	4b1f      	ldr	r3, [pc, #124]	; (379c <_adc_set_config+0x374>)
    3720:	429a      	cmp	r2, r3
    3722:	db01      	blt.n	3728 <_adc_set_config+0x300>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3724:	2317      	movs	r3, #23
    3726:	e11a      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 1023 ||
    3728:	683b      	ldr	r3, [r7, #0]
    372a:	69da      	ldr	r2, [r3, #28]
    372c:	4b1c      	ldr	r3, [pc, #112]	; (37a0 <_adc_set_config+0x378>)
    372e:	429a      	cmp	r2, r3
    3730:	dc04      	bgt.n	373c <_adc_set_config+0x314>
					config->window.window_upper_value > 1023){
    3732:	683b      	ldr	r3, [r7, #0]
    3734:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    3736:	4b1a      	ldr	r3, [pc, #104]	; (37a0 <_adc_set_config+0x378>)
    3738:	429a      	cmp	r2, r3
    373a:	dd01      	ble.n	3740 <_adc_set_config+0x318>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    373c:	2317      	movs	r3, #23
    373e:	e10e      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3740:	e068      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	7cdb      	ldrb	r3, [r3, #19]
    3746:	2b00      	cmp	r3, #0
    3748:	d030      	beq.n	37ac <_adc_set_config+0x384>
					(config->window.window_lower_value > 2047 ||
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    374e:	4b15      	ldr	r3, [pc, #84]	; (37a4 <_adc_set_config+0x37c>)
    3750:	429a      	cmp	r2, r3
    3752:	dc0e      	bgt.n	3772 <_adc_set_config+0x34a>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    3758:	4b13      	ldr	r3, [pc, #76]	; (37a8 <_adc_set_config+0x380>)
    375a:	429a      	cmp	r2, r3
    375c:	db09      	blt.n	3772 <_adc_set_config+0x34a>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3762:	4b10      	ldr	r3, [pc, #64]	; (37a4 <_adc_set_config+0x37c>)
    3764:	429a      	cmp	r2, r3
    3766:	dc04      	bgt.n	3772 <_adc_set_config+0x34a>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    376c:	4b0e      	ldr	r3, [pc, #56]	; (37a8 <_adc_set_config+0x380>)
    376e:	429a      	cmp	r2, r3
    3770:	da1c      	bge.n	37ac <_adc_set_config+0x384>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3772:	2317      	movs	r3, #23
    3774:	e0f3      	b.n	395e <_adc_set_config+0x536>
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	41002018 	.word	0x41002018
    377c:	00003205 	.word	0x00003205
    3780:	00014041 	.word	0x00014041
    3784:	00014081 	.word	0x00014081
    3788:	000033b1 	.word	0x000033b1
    378c:	00018124 	.word	0x00018124
    3790:	000032dd 	.word	0x000032dd
    3794:	000001ff 	.word	0x000001ff
    3798:	fffffe00 	.word	0xfffffe00
    379c:	fffffe01 	.word	0xfffffe01
    37a0:	000003ff 	.word	0x000003ff
    37a4:	000007ff 	.word	0x000007ff
    37a8:	fffff800 	.word	0xfffff800
			} else if (config->window.window_lower_value > 4095 ||
    37ac:	683b      	ldr	r3, [r7, #0]
    37ae:	69da      	ldr	r2, [r3, #28]
    37b0:	4b6d      	ldr	r3, [pc, #436]	; (3968 <_adc_set_config+0x540>)
    37b2:	429a      	cmp	r2, r3
    37b4:	dc04      	bgt.n	37c0 <_adc_set_config+0x398>
					config->window.window_upper_value > 4095){
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    37ba:	4b6b      	ldr	r3, [pc, #428]	; (3968 <_adc_set_config+0x540>)
    37bc:	429a      	cmp	r2, r3
    37be:	dd01      	ble.n	37c4 <_adc_set_config+0x39c>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37c0:	2317      	movs	r3, #23
    37c2:	e0cc      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    37c4:	e026      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37c6:	683b      	ldr	r3, [r7, #0]
    37c8:	7cdb      	ldrb	r3, [r3, #19]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d015      	beq.n	37fa <_adc_set_config+0x3d2>
					(config->window.window_lower_value > 32767 ||
    37ce:	683b      	ldr	r3, [r7, #0]
    37d0:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37d2:	4b66      	ldr	r3, [pc, #408]	; (396c <_adc_set_config+0x544>)
    37d4:	429a      	cmp	r2, r3
    37d6:	dc0e      	bgt.n	37f6 <_adc_set_config+0x3ce>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    37dc:	4b64      	ldr	r3, [pc, #400]	; (3970 <_adc_set_config+0x548>)
    37de:	429a      	cmp	r2, r3
    37e0:	db09      	blt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37e6:	4b61      	ldr	r3, [pc, #388]	; (396c <_adc_set_config+0x544>)
    37e8:	429a      	cmp	r2, r3
    37ea:	dc04      	bgt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    37ec:	683b      	ldr	r3, [r7, #0]
    37ee:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37f0:	4b5f      	ldr	r3, [pc, #380]	; (3970 <_adc_set_config+0x548>)
    37f2:	429a      	cmp	r2, r3
    37f4:	da01      	bge.n	37fa <_adc_set_config+0x3d2>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37f6:	2317      	movs	r3, #23
    37f8:	e0b1      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 65535 ||
    37fa:	683b      	ldr	r3, [r7, #0]
    37fc:	69da      	ldr	r2, [r3, #28]
    37fe:	4b5d      	ldr	r3, [pc, #372]	; (3974 <_adc_set_config+0x54c>)
    3800:	429a      	cmp	r2, r3
    3802:	dc04      	bgt.n	380e <_adc_set_config+0x3e6>
					config->window.window_upper_value > 65535){
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    3808:	4b5a      	ldr	r3, [pc, #360]	; (3974 <_adc_set_config+0x54c>)
    380a:	429a      	cmp	r2, r3
    380c:	dd01      	ble.n	3812 <_adc_set_config+0x3ea>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    380e:	2317      	movs	r3, #23
    3810:	e0a5      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3812:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    3814:	46c0      	nop			; (mov r8, r8)
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	1c18      	adds	r0, r3, #0
    381a:	4b57      	ldr	r3, [pc, #348]	; (3978 <_adc_set_config+0x550>)
    381c:	4798      	blx	r3
    381e:	1c03      	adds	r3, r0, #0
    3820:	2b00      	cmp	r3, #0
    3822:	d1f8      	bne.n	3816 <_adc_set_config+0x3ee>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	7e1a      	ldrb	r2, [r3, #24]
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    382c:	46c0      	nop			; (mov r8, r8)
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	1c18      	adds	r0, r3, #0
    3832:	4b51      	ldr	r3, [pc, #324]	; (3978 <_adc_set_config+0x550>)
    3834:	4798      	blx	r3
    3836:	1c03      	adds	r3, r0, #0
    3838:	2b00      	cmp	r3, #0
    383a:	d1f8      	bne.n	382e <_adc_set_config+0x406>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    383c:	683b      	ldr	r3, [r7, #0]
    383e:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    3840:	b29a      	uxth	r2, r3
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	1c18      	adds	r0, r3, #0
    384c:	4b4a      	ldr	r3, [pc, #296]	; (3978 <_adc_set_config+0x550>)
    384e:	4798      	blx	r3
    3850:	1c03      	adds	r3, r0, #0
    3852:	2b00      	cmp	r3, #0
    3854:	d1f8      	bne.n	3848 <_adc_set_config+0x420>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    3856:	683b      	ldr	r3, [r7, #0]
    3858:	6a1b      	ldr	r3, [r3, #32]
    385a:	b29a      	uxth	r2, r3
    385c:	68fb      	ldr	r3, [r7, #12]
    385e:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    3860:	1c3b      	adds	r3, r7, #0
    3862:	3314      	adds	r3, #20
    3864:	6839      	ldr	r1, [r7, #0]
    3866:	222c      	movs	r2, #44	; 0x2c
    3868:	5c8a      	ldrb	r2, [r1, r2]
    386a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    386c:	1c3b      	adds	r3, r7, #0
    386e:	3314      	adds	r3, #20
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d006      	beq.n	3884 <_adc_set_config+0x45c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    3876:	1c3b      	adds	r3, r7, #0
    3878:	3314      	adds	r3, #20
    387a:	781a      	ldrb	r2, [r3, #0]
    387c:	1c3b      	adds	r3, r7, #0
    387e:	3314      	adds	r3, #20
    3880:	3a01      	subs	r2, #1
    3882:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3884:	1c3b      	adds	r3, r7, #0
    3886:	3314      	adds	r3, #20
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	2b0f      	cmp	r3, #15
    388c:	d804      	bhi.n	3898 <_adc_set_config+0x470>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    388e:	683a      	ldr	r2, [r7, #0]
    3890:	232b      	movs	r3, #43	; 0x2b
    3892:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3894:	2b0f      	cmp	r3, #15
    3896:	d901      	bls.n	389c <_adc_set_config+0x474>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    3898:	2317      	movs	r3, #23
    389a:	e060      	b.n	395e <_adc_set_config+0x536>
	}

	while (adc_is_syncing(module_inst)) {
    389c:	46c0      	nop			; (mov r8, r8)
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	1c18      	adds	r0, r3, #0
    38a2:	4b35      	ldr	r3, [pc, #212]	; (3978 <_adc_set_config+0x550>)
    38a4:	4798      	blx	r3
    38a6:	1c03      	adds	r3, r0, #0
    38a8:	2b00      	cmp	r3, #0
    38aa:	d1f8      	bne.n	389e <_adc_set_config+0x476>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    38b0:	6839      	ldr	r1, [r7, #0]
    38b2:	232b      	movs	r3, #43	; 0x2b
    38b4:	5ccb      	ldrb	r3, [r1, r3]
    38b6:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38b8:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38ba:	1c3b      	adds	r3, r7, #0
    38bc:	3314      	adds	r3, #20
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    38c2:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38c4:	683b      	ldr	r3, [r7, #0]
    38c6:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38c8:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
    38ca:	683b      	ldr	r3, [r7, #0]
    38cc:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38ce:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    38d0:	68fb      	ldr	r3, [r7, #12]
    38d2:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    38d4:	683a      	ldr	r2, [r7, #0]
    38d6:	232a      	movs	r3, #42	; 0x2a
    38d8:	5cd2      	ldrb	r2, [r2, r3]
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    38de:	68fb      	ldr	r3, [r7, #12]
    38e0:	220f      	movs	r2, #15
    38e2:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    38e4:	683a      	ldr	r2, [r7, #0]
    38e6:	2324      	movs	r3, #36	; 0x24
    38e8:	5cd3      	ldrb	r3, [r2, r3]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d01d      	beq.n	392a <_adc_set_config+0x502>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    38ee:	683b      	ldr	r3, [r7, #0]
    38f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    38f2:	4b1d      	ldr	r3, [pc, #116]	; (3968 <_adc_set_config+0x540>)
    38f4:	429a      	cmp	r2, r3
    38f6:	d901      	bls.n	38fc <_adc_set_config+0x4d4>
			return STATUS_ERR_INVALID_ARG;
    38f8:	2317      	movs	r3, #23
    38fa:	e030      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    3900:	68fb      	ldr	r3, [r7, #12]
    3902:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3904:	683b      	ldr	r3, [r7, #0]
    3906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3908:	b21a      	sxth	r2, r3
    390a:	4b1c      	ldr	r3, [pc, #112]	; (397c <_adc_set_config+0x554>)
    390c:	429a      	cmp	r2, r3
    390e:	dc05      	bgt.n	391c <_adc_set_config+0x4f4>
				config->correction.offset_correction < -2048) {
    3910:	683b      	ldr	r3, [r7, #0]
    3912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3914:	b21a      	sxth	r2, r3
    3916:	4b1a      	ldr	r3, [pc, #104]	; (3980 <_adc_set_config+0x558>)
    3918:	429a      	cmp	r2, r3
    391a:	da01      	bge.n	3920 <_adc_set_config+0x4f8>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    391c:	2317      	movs	r3, #23
    391e:	e01e      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3924:	b29a      	uxth	r2, r3
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    392a:	4b16      	ldr	r3, [pc, #88]	; (3984 <_adc_set_config+0x55c>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    3930:	b29b      	uxth	r3, r3
    3932:	021b      	lsls	r3, r3, #8
    3934:	b29a      	uxth	r2, r3
    3936:	23e0      	movs	r3, #224	; 0xe0
    3938:	00db      	lsls	r3, r3, #3
    393a:	4013      	ands	r3, r2
    393c:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <_adc_set_config+0x560>)
    3940:	681a      	ldr	r2, [r3, #0]
    3942:	685b      	ldr	r3, [r3, #4]
    3944:	0158      	lsls	r0, r3, #5
    3946:	0ed4      	lsrs	r4, r2, #27
    3948:	4304      	orrs	r4, r0
    394a:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    394c:	b2a2      	uxth	r2, r4
    394e:	23ff      	movs	r3, #255	; 0xff
    3950:	4013      	ands	r3, r2
    3952:	b29b      	uxth	r3, r3
    3954:	430b      	orrs	r3, r1
    3956:	b29a      	uxth	r2, r3
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    395c:	2300      	movs	r3, #0
}
    395e:	1c18      	adds	r0, r3, #0
    3960:	46bd      	mov	sp, r7
    3962:	b008      	add	sp, #32
    3964:	bdb0      	pop	{r4, r5, r7, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	00000fff 	.word	0x00000fff
    396c:	00007fff 	.word	0x00007fff
    3970:	ffff8000 	.word	0xffff8000
    3974:	0000ffff 	.word	0x0000ffff
    3978:	000032dd 	.word	0x000032dd
    397c:	000007ff 	.word	0x000007ff
    3980:	fffff800 	.word	0xfffff800
    3984:	00806024 	.word	0x00806024
    3988:	00806020 	.word	0x00806020

0000398c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    398c:	b580      	push	{r7, lr}
    398e:	b086      	sub	sp, #24
    3990:	af00      	add	r7, sp, #0
    3992:	60f8      	str	r0, [r7, #12]
    3994:	60b9      	str	r1, [r7, #8]
    3996:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	68ba      	ldr	r2, [r7, #8]
    399c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    399e:	2380      	movs	r3, #128	; 0x80
    39a0:	025b      	lsls	r3, r3, #9
    39a2:	2002      	movs	r0, #2
    39a4:	1c19      	adds	r1, r3, #0
    39a6:	4b32      	ldr	r3, [pc, #200]	; (3a70 <adc_init+0xe4>)
    39a8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    39aa:	68bb      	ldr	r3, [r7, #8]
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	b2db      	uxtb	r3, r3
    39b0:	1c1a      	adds	r2, r3, #0
    39b2:	2301      	movs	r3, #1
    39b4:	4013      	ands	r3, r2
    39b6:	d001      	beq.n	39bc <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    39b8:	2305      	movs	r3, #5
    39ba:	e055      	b.n	3a68 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    39bc:	68bb      	ldr	r3, [r7, #8]
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	b2db      	uxtb	r3, r3
    39c2:	1c1a      	adds	r2, r3, #0
    39c4:	2302      	movs	r3, #2
    39c6:	4013      	ands	r3, r2
    39c8:	d001      	beq.n	39ce <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    39ca:	231c      	movs	r3, #28
    39cc:	e04c      	b.n	3a68 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	785a      	ldrb	r2, [r3, #1]
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	791b      	ldrb	r3, [r3, #4]
    39da:	2b00      	cmp	r3, #0
    39dc:	d102      	bne.n	39e4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    39de:	2001      	movs	r0, #1
    39e0:	4b24      	ldr	r3, [pc, #144]	; (3a74 <adc_init+0xe8>)
    39e2:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39e4:	1c3b      	adds	r3, r7, #0
    39e6:	3317      	adds	r3, #23
    39e8:	2200      	movs	r2, #0
    39ea:	701a      	strb	r2, [r3, #0]
    39ec:	e00e      	b.n	3a0c <adc_init+0x80>
		module_inst->callback[i] = NULL;
    39ee:	1c3b      	adds	r3, r7, #0
    39f0:	3317      	adds	r3, #23
    39f2:	781a      	ldrb	r2, [r3, #0]
    39f4:	68fb      	ldr	r3, [r7, #12]
    39f6:	3202      	adds	r2, #2
    39f8:	0092      	lsls	r2, r2, #2
    39fa:	2100      	movs	r1, #0
    39fc:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39fe:	1c3b      	adds	r3, r7, #0
    3a00:	3317      	adds	r3, #23
    3a02:	781a      	ldrb	r2, [r3, #0]
    3a04:	1c3b      	adds	r3, r7, #0
    3a06:	3317      	adds	r3, #23
    3a08:	3201      	adds	r2, #1
    3a0a:	701a      	strb	r2, [r3, #0]
    3a0c:	1c3b      	adds	r3, r7, #0
    3a0e:	3317      	adds	r3, #23
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	2b02      	cmp	r3, #2
    3a14:	d9eb      	bls.n	39ee <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	2200      	movs	r2, #0
    3a1a:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    3a1c:	68fb      	ldr	r3, [r7, #12]
    3a1e:	2200      	movs	r2, #0
    3a20:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    3a22:	68fb      	ldr	r3, [r7, #12]
    3a24:	2200      	movs	r2, #0
    3a26:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	2200      	movs	r2, #0
    3a2c:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    3a2e:	4b12      	ldr	r3, [pc, #72]	; (3a78 <adc_init+0xec>)
    3a30:	68fa      	ldr	r2, [r7, #12]
    3a32:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a34:	687a      	ldr	r2, [r7, #4]
    3a36:	232a      	movs	r3, #42	; 0x2a
    3a38:	5cd3      	ldrb	r3, [r2, r3]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d10a      	bne.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	7d1b      	ldrb	r3, [r3, #20]
    3a42:	2201      	movs	r2, #1
    3a44:	4053      	eors	r3, r2
    3a46:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d003      	beq.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	2201      	movs	r2, #1
    3a50:	775a      	strb	r2, [r3, #29]
    3a52:	e002      	b.n	3a5a <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	2200      	movs	r2, #0
    3a58:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    3a5a:	68fa      	ldr	r2, [r7, #12]
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	1c10      	adds	r0, r2, #0
    3a60:	1c19      	adds	r1, r3, #0
    3a62:	4b06      	ldr	r3, [pc, #24]	; (3a7c <adc_init+0xf0>)
    3a64:	4798      	blx	r3
    3a66:	1c03      	adds	r3, r0, #0
}
    3a68:	1c18      	adds	r0, r3, #0
    3a6a:	46bd      	mov	sp, r7
    3a6c:	b006      	add	sp, #24
    3a6e:	bd80      	pop	{r7, pc}
    3a70:	00003219 	.word	0x00003219
    3a74:	0000329d 	.word	0x0000329d
    3a78:	20000540 	.word	0x20000540
    3a7c:	00003429 	.word	0x00003429

00003a80 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	7e5b      	ldrb	r3, [r3, #25]
    3a92:	b2db      	uxtb	r3, r3
    3a94:	b2db      	uxtb	r3, r3
    3a96:	b25b      	sxtb	r3, r3
    3a98:	2b00      	cmp	r3, #0
    3a9a:	da01      	bge.n	3aa0 <adc_is_syncing+0x20>
		return true;
    3a9c:	2301      	movs	r3, #1
    3a9e:	e000      	b.n	3aa2 <adc_is_syncing+0x22>
	}

	return false;
    3aa0:	2300      	movs	r3, #0
}
    3aa2:	1c18      	adds	r0, r3, #0
    3aa4:	46bd      	mov	sp, r7
    3aa6:	b004      	add	sp, #16
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)

00003aac <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b084      	sub	sp, #16
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	1c18      	adds	r0, r3, #0
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <adc_start_conversion+0x44>)
    3ac2:	4798      	blx	r3
    3ac4:	1c03      	adds	r3, r0, #0
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d1f8      	bne.n	3abc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	7b1b      	ldrb	r3, [r3, #12]
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2202      	movs	r2, #2
    3ad2:	4313      	orrs	r3, r2
    3ad4:	b2da      	uxtb	r2, r3
    3ad6:	68fb      	ldr	r3, [r7, #12]
    3ad8:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	1c18      	adds	r0, r3, #0
    3ae0:	4b03      	ldr	r3, [pc, #12]	; (3af0 <adc_start_conversion+0x44>)
    3ae2:	4798      	blx	r3
    3ae4:	1c03      	adds	r3, r0, #0
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d1f8      	bne.n	3adc <adc_start_conversion+0x30>
		/* Wait for synchronization */
	}
}
    3aea:	46bd      	mov	sp, r7
    3aec:	b004      	add	sp, #16
    3aee:	bd80      	pop	{r7, pc}
    3af0:	00003a81 	.word	0x00003a81

00003af4 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b084      	sub	sp, #16
    3af8:	af00      	add	r7, sp, #0
    3afa:	6078      	str	r0, [r7, #4]
    3afc:	1c0a      	adds	r2, r1, #0
    3afe:	1cfb      	adds	r3, r7, #3
    3b00:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    3b08:	68fb      	ldr	r3, [r7, #12]
    3b0a:	1cfa      	adds	r2, r7, #3
    3b0c:	7812      	ldrb	r2, [r2, #0]
    3b0e:	75da      	strb	r2, [r3, #23]
}
    3b10:	46bd      	mov	sp, r7
    3b12:	b004      	add	sp, #16
    3b14:	bd80      	pop	{r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)

00003b18 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b084      	sub	sp, #16
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
    3b20:	1c0a      	adds	r2, r1, #0
    3b22:	1cfb      	adds	r3, r7, #3
    3b24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	1cfa      	adds	r2, r7, #3
    3b30:	7812      	ldrb	r2, [r2, #0]
    3b32:	759a      	strb	r2, [r3, #22]
}
    3b34:	46bd      	mov	sp, r7
    3b36:	b004      	add	sp, #16
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)

00003b3c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    3b3c:	b580      	push	{r7, lr}
    3b3e:	b084      	sub	sp, #16
    3b40:	af00      	add	r7, sp, #0
    3b42:	1c02      	adds	r2, r0, #0
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	781a      	ldrb	r2, [r3, #0]
    3b4c:	4b40      	ldr	r3, [pc, #256]	; (3c50 <_adc_interrupt_handler+0x114>)
    3b4e:	0092      	lsls	r2, r2, #2
    3b50:	58d3      	ldr	r3, [r2, r3]
    3b52:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    3b54:	68fb      	ldr	r3, [r7, #12]
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	7e1b      	ldrb	r3, [r3, #24]
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    3b5e:	68ba      	ldr	r2, [r7, #8]
    3b60:	2301      	movs	r3, #1
    3b62:	4013      	ands	r3, r2
    3b64:	d03e      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	7edb      	ldrb	r3, [r3, #27]
    3b6a:	1c1a      	adds	r2, r3, #0
    3b6c:	2301      	movs	r3, #1
    3b6e:	4013      	ands	r3, r2
    3b70:	d038      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	7e9b      	ldrb	r3, [r3, #26]
    3b76:	1c1a      	adds	r2, r3, #0
    3b78:	2301      	movs	r3, #1
    3b7a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b7c:	d032      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	2201      	movs	r2, #1
    3b84:	761a      	strb	r2, [r3, #24]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3b86:	68fb      	ldr	r3, [r7, #12]
    3b88:	695b      	ldr	r3, [r3, #20]
    3b8a:	1c99      	adds	r1, r3, #2
    3b8c:	68fa      	ldr	r2, [r7, #12]
    3b8e:	6151      	str	r1, [r2, #20]
    3b90:	68fa      	ldr	r2, [r7, #12]
    3b92:	6812      	ldr	r2, [r2, #0]
    3b94:	8b52      	ldrh	r2, [r2, #26]
    3b96:	b292      	uxth	r2, r2
    3b98:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	8b1b      	ldrh	r3, [r3, #24]
    3b9e:	b29b      	uxth	r3, r3
    3ba0:	3b01      	subs	r3, #1
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	68fa      	ldr	r2, [r7, #12]
    3ba6:	1c19      	adds	r1, r3, #0
    3ba8:	8311      	strh	r1, [r2, #24]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d008      	beq.n	3bc0 <_adc_interrupt_handler+0x84>
				if (module->software_trigger == true) {
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	7f5b      	ldrb	r3, [r3, #29]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d016      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
					adc_start_conversion(module);
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	1c18      	adds	r0, r3, #0
    3bba:	4b26      	ldr	r3, [pc, #152]	; (3c54 <_adc_interrupt_handler+0x118>)
    3bbc:	4798      	blx	r3
    3bbe:	e011      	b.n	3be4 <_adc_interrupt_handler+0xa8>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	7f1b      	ldrb	r3, [r3, #28]
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	2b05      	cmp	r3, #5
    3bc8:	d10c      	bne.n	3be4 <_adc_interrupt_handler+0xa8>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	2200      	movs	r2, #0
    3bce:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	1c18      	adds	r0, r3, #0
    3bd4:	2101      	movs	r1, #1
    3bd6:	4b20      	ldr	r3, [pc, #128]	; (3c58 <_adc_interrupt_handler+0x11c>)
    3bd8:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	689b      	ldr	r3, [r3, #8]
    3bde:	68fa      	ldr	r2, [r7, #12]
    3be0:	1c10      	adds	r0, r2, #0
    3be2:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3be4:	68ba      	ldr	r2, [r7, #8]
    3be6:	2304      	movs	r3, #4
    3be8:	4013      	ands	r3, r2
    3bea:	d014      	beq.n	3c16 <_adc_interrupt_handler+0xda>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2204      	movs	r2, #4
    3bf2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	7edb      	ldrb	r3, [r3, #27]
    3bf8:	1c1a      	adds	r2, r3, #0
    3bfa:	2302      	movs	r3, #2
    3bfc:	4013      	ands	r3, r2
    3bfe:	d00a      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	7e9b      	ldrb	r3, [r3, #26]
    3c04:	1c1a      	adds	r2, r3, #0
    3c06:	2302      	movs	r3, #2
    3c08:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3c0a:	d004      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3c0c:	68fb      	ldr	r3, [r7, #12]
    3c0e:	68db      	ldr	r3, [r3, #12]
    3c10:	68fa      	ldr	r2, [r7, #12]
    3c12:	1c10      	adds	r0, r2, #0
    3c14:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3c16:	68ba      	ldr	r2, [r7, #8]
    3c18:	2302      	movs	r3, #2
    3c1a:	4013      	ands	r3, r2
    3c1c:	d014      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3c1e:	68fb      	ldr	r3, [r7, #12]
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	2202      	movs	r2, #2
    3c24:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	7edb      	ldrb	r3, [r3, #27]
    3c2a:	1c1a      	adds	r2, r3, #0
    3c2c:	2304      	movs	r3, #4
    3c2e:	4013      	ands	r3, r2
    3c30:	d00a      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	7e9b      	ldrb	r3, [r3, #26]
    3c36:	1c1a      	adds	r2, r3, #0
    3c38:	2304      	movs	r3, #4
    3c3a:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c3c:	d004      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3c3e:	68fb      	ldr	r3, [r7, #12]
    3c40:	691b      	ldr	r3, [r3, #16]
    3c42:	68fa      	ldr	r2, [r7, #12]
    3c44:	1c10      	adds	r0, r2, #0
    3c46:	4798      	blx	r3
		}
	}
}
    3c48:	46bd      	mov	sp, r7
    3c4a:	b004      	add	sp, #16
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	20000540 	.word	0x20000540
    3c54:	00003aad 	.word	0x00003aad
    3c58:	00003b19 	.word	0x00003b19

00003c5c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3c60:	2000      	movs	r0, #0
    3c62:	4b02      	ldr	r3, [pc, #8]	; (3c6c <ADC_Handler+0x10>)
    3c64:	4798      	blx	r3
}
    3c66:	46bd      	mov	sp, r7
    3c68:	bd80      	pop	{r7, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	00003b3d 	.word	0x00003b3d

00003c70 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b084      	sub	sp, #16
    3c74:	af00      	add	r7, sp, #0
    3c76:	60f8      	str	r0, [r7, #12]
    3c78:	60b9      	str	r1, [r7, #8]
    3c7a:	1dfb      	adds	r3, r7, #7
    3c7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3c7e:	1dfb      	adds	r3, r7, #7
    3c80:	781a      	ldrb	r2, [r3, #0]
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	3202      	adds	r2, #2
    3c86:	0092      	lsls	r2, r2, #2
    3c88:	68b9      	ldr	r1, [r7, #8]
    3c8a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    3c8c:	68fb      	ldr	r3, [r7, #12]
    3c8e:	7e9b      	ldrb	r3, [r3, #26]
    3c90:	b2da      	uxtb	r2, r3
    3c92:	1dfb      	adds	r3, r7, #7
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2101      	movs	r1, #1
    3c98:	1c08      	adds	r0, r1, #0
    3c9a:	4098      	lsls	r0, r3
    3c9c:	1c03      	adds	r3, r0, #0
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	4313      	orrs	r3, r2
    3ca2:	b2db      	uxtb	r3, r3
    3ca4:	b2da      	uxtb	r2, r3
    3ca6:	68fb      	ldr	r3, [r7, #12]
    3ca8:	769a      	strb	r2, [r3, #26]
}
    3caa:	46bd      	mov	sp, r7
    3cac:	b004      	add	sp, #16
    3cae:	bd80      	pop	{r7, pc}

00003cb0 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	1dbb      	adds	r3, r7, #6
    3cbc:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	8b1b      	ldrh	r3, [r3, #24]
    3cc2:	b29b      	uxth	r3, r3
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d104      	bne.n	3cd2 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    3cc8:	68fb      	ldr	r3, [r7, #12]
    3cca:	7f1b      	ldrb	r3, [r3, #28]
    3ccc:	b2db      	uxtb	r3, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cce:	2b05      	cmp	r3, #5
    3cd0:	d101      	bne.n	3cd6 <adc_read_buffer_job+0x26>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    3cd2:	2305      	movs	r3, #5
    3cd4:	e017      	b.n	3d06 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    3cd6:	68fb      	ldr	r3, [r7, #12]
    3cd8:	2205      	movs	r2, #5
    3cda:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	1dba      	adds	r2, r7, #6
    3ce0:	8812      	ldrh	r2, [r2, #0]
    3ce2:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    3ce4:	68fb      	ldr	r3, [r7, #12]
    3ce6:	68ba      	ldr	r2, [r7, #8]
    3ce8:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	1c18      	adds	r0, r3, #0
    3cee:	2101      	movs	r1, #1
    3cf0:	4b07      	ldr	r3, [pc, #28]	; (3d10 <adc_read_buffer_job+0x60>)
    3cf2:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    3cf4:	68fb      	ldr	r3, [r7, #12]
    3cf6:	7f5b      	ldrb	r3, [r3, #29]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d003      	beq.n	3d04 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    3cfc:	68fb      	ldr	r3, [r7, #12]
    3cfe:	1c18      	adds	r0, r3, #0
    3d00:	4b04      	ldr	r3, [pc, #16]	; (3d14 <adc_read_buffer_job+0x64>)
    3d02:	4798      	blx	r3
	}

	return STATUS_OK;
    3d04:	2300      	movs	r3, #0
}
    3d06:	1c18      	adds	r0, r3, #0
    3d08:	46bd      	mov	sp, r7
    3d0a:	b004      	add	sp, #16
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	00003af5 	.word	0x00003af5
    3d14:	00003aad 	.word	0x00003aad

00003d18 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	b084      	sub	sp, #16
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	1c02      	adds	r2, r0, #0
    3d20:	6039      	str	r1, [r7, #0]
    3d22:	1dfb      	adds	r3, r7, #7
    3d24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    3d26:	2300      	movs	r3, #0
    3d28:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    3d2a:	4b2b      	ldr	r3, [pc, #172]	; (3dd8 <bod_set_config+0xc0>)
    3d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3d2e:	2302      	movs	r3, #2
    3d30:	4013      	ands	r3, r2
    3d32:	d005      	beq.n	3d40 <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    3d34:	4b28      	ldr	r3, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d36:	4a28      	ldr	r2, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
    3d3a:	2102      	movs	r1, #2
    3d3c:	438a      	bics	r2, r1
    3d3e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d40:	683b      	ldr	r3, [r7, #0]
    3d42:	881b      	ldrh	r3, [r3, #0]
    3d44:	1c1a      	adds	r2, r3, #0
    3d46:	683b      	ldr	r3, [r7, #0]
    3d48:	791b      	ldrb	r3, [r3, #4]
    3d4a:	431a      	orrs	r2, r3
			(uint32_t)conf->mode;
    3d4c:	683b      	ldr	r3, [r7, #0]
    3d4e:	885b      	ldrh	r3, [r3, #2]
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d50:	4313      	orrs	r3, r2
    3d52:	68fa      	ldr	r2, [r7, #12]
    3d54:	4313      	orrs	r3, r2
    3d56:	60fb      	str	r3, [r7, #12]
			(uint32_t)conf->mode;

	if (conf->mode == BOD_MODE_SAMPLED) {
    3d58:	683b      	ldr	r3, [r7, #0]
    3d5a:	885a      	ldrh	r2, [r3, #2]
    3d5c:	2380      	movs	r3, #128	; 0x80
    3d5e:	005b      	lsls	r3, r3, #1
    3d60:	429a      	cmp	r2, r3
    3d62:	d104      	bne.n	3d6e <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	0092      	lsls	r2, r2, #2
    3d6a:	4313      	orrs	r3, r2
    3d6c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	799b      	ldrb	r3, [r3, #6]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d003      	beq.n	3d7e <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	2204      	movs	r2, #4
    3d7a:	4313      	orrs	r3, r2
    3d7c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    3d7e:	683b      	ldr	r3, [r7, #0]
    3d80:	79db      	ldrb	r3, [r3, #7]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d003      	beq.n	3d8e <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	2240      	movs	r2, #64	; 0x40
    3d8a:	4313      	orrs	r3, r2
    3d8c:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    3d8e:	1dfb      	adds	r3, r7, #7
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d11a      	bne.n	3dcc <bod_set_config+0xb4>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    3d96:	683b      	ldr	r3, [r7, #0]
    3d98:	795b      	ldrb	r3, [r3, #5]
    3d9a:	2b3f      	cmp	r3, #63	; 0x3f
    3d9c:	d901      	bls.n	3da2 <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    3d9e:	2317      	movs	r3, #23
    3da0:	e015      	b.n	3dce <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    3da2:	4b0d      	ldr	r3, [pc, #52]	; (3dd8 <bod_set_config+0xc0>)
    3da4:	683a      	ldr	r2, [r7, #0]
    3da6:	7952      	ldrb	r2, [r2, #5]
    3da8:	0412      	lsls	r2, r2, #16
    3daa:	1c11      	adds	r1, r2, #0
    3dac:	22fc      	movs	r2, #252	; 0xfc
    3dae:	0392      	lsls	r2, r2, #14
    3db0:	4011      	ands	r1, r2
    3db2:	68fa      	ldr	r2, [r7, #12]
    3db4:	430a      	orrs	r2, r1
    3db6:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    3db8:	46c0      	nop			; (mov r8, r8)
    3dba:	4b07      	ldr	r3, [pc, #28]	; (3dd8 <bod_set_config+0xc0>)
    3dbc:	68da      	ldr	r2, [r3, #12]
    3dbe:	2380      	movs	r3, #128	; 0x80
    3dc0:	011b      	lsls	r3, r3, #4
    3dc2:	4013      	ands	r3, r2
    3dc4:	d0f9      	beq.n	3dba <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    3dc6:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3dc8:	2300      	movs	r3, #0
    3dca:	e000      	b.n	3dce <bod_set_config+0xb6>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    3dcc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3dce:	1c18      	adds	r0, r3, #0
    3dd0:	46bd      	mov	sp, r7
    3dd2:	b004      	add	sp, #16
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	40000800 	.word	0x40000800

00003ddc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b082      	sub	sp, #8
    3de0:	af00      	add	r7, sp, #0
    3de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	2280      	movs	r2, #128	; 0x80
    3de8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	2200      	movs	r2, #0
    3dee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	2201      	movs	r2, #1
    3df4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	2200      	movs	r2, #0
    3dfa:	70da      	strb	r2, [r3, #3]
}
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b002      	add	sp, #8
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)

00003e04 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b084      	sub	sp, #16
    3e08:	af00      	add	r7, sp, #0
    3e0a:	1c02      	adds	r2, r0, #0
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3e10:	1c3b      	adds	r3, r7, #0
    3e12:	330f      	adds	r3, #15
    3e14:	1dfa      	adds	r2, r7, #7
    3e16:	7812      	ldrb	r2, [r2, #0]
    3e18:	0952      	lsrs	r2, r2, #5
    3e1a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3e1c:	1c3b      	adds	r3, r7, #0
    3e1e:	330f      	adds	r3, #15
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d10b      	bne.n	3e3e <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e26:	4b08      	ldr	r3, [pc, #32]	; (3e48 <_extint_get_eic_from_channel+0x44>)
    3e28:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3e2a:	1c3b      	adds	r3, r7, #0
    3e2c:	330f      	adds	r3, #15
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	2210      	movs	r2, #16
    3e34:	19d2      	adds	r2, r2, r7
    3e36:	18d3      	adds	r3, r2, r3
    3e38:	3b08      	subs	r3, #8
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	e000      	b.n	3e40 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    3e3e:	2300      	movs	r3, #0
	}
}
    3e40:	1c18      	adds	r0, r3, #0
    3e42:	46bd      	mov	sp, r7
    3e44:	b004      	add	sp, #16
    3e46:	bd80      	pop	{r7, pc}
    3e48:	40001800 	.word	0x40001800

00003e4c <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e52:	4b0f      	ldr	r3, [pc, #60]	; (3e90 <extint_is_syncing+0x44>)
    3e54:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e56:	2300      	movs	r3, #0
    3e58:	607b      	str	r3, [r7, #4]
    3e5a:	e011      	b.n	3e80 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	009b      	lsls	r3, r3, #2
    3e60:	2208      	movs	r2, #8
    3e62:	19d2      	adds	r2, r2, r7
    3e64:	18d3      	adds	r3, r2, r3
    3e66:	3b08      	subs	r3, #8
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	785b      	ldrb	r3, [r3, #1]
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	b25b      	sxtb	r3, r3
    3e72:	2b00      	cmp	r3, #0
    3e74:	da01      	bge.n	3e7a <extint_is_syncing+0x2e>
			return true;
    3e76:	2301      	movs	r3, #1
    3e78:	e006      	b.n	3e88 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	3301      	adds	r3, #1
    3e7e:	607b      	str	r3, [r7, #4]
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d0ea      	beq.n	3e5c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    3e86:	2300      	movs	r3, #0
}
    3e88:	1c18      	adds	r0, r3, #0
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	40001800 	.word	0x40001800

00003e94 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2200      	movs	r2, #0
    3ea0:	701a      	strb	r2, [r3, #0]
}
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b002      	add	sp, #8
    3ea6:	bd80      	pop	{r7, pc}

00003ea8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	1c02      	adds	r2, r0, #0
    3eb0:	6039      	str	r1, [r7, #0]
    3eb2:	1dfb      	adds	r3, r7, #7
    3eb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3eb6:	1dfb      	adds	r3, r7, #7
    3eb8:	781b      	ldrb	r3, [r3, #0]
    3eba:	2b01      	cmp	r3, #1
    3ebc:	d00a      	beq.n	3ed4 <system_apb_clock_set_mask+0x2c>
    3ebe:	2b02      	cmp	r3, #2
    3ec0:	d00f      	beq.n	3ee2 <system_apb_clock_set_mask+0x3a>
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d114      	bne.n	3ef0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ec6:	4b0e      	ldr	r3, [pc, #56]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ec8:	4a0d      	ldr	r2, [pc, #52]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3eca:	6991      	ldr	r1, [r2, #24]
    3ecc:	683a      	ldr	r2, [r7, #0]
    3ece:	430a      	orrs	r2, r1
    3ed0:	619a      	str	r2, [r3, #24]
			break;
    3ed2:	e00f      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3ed4:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed6:	4a0a      	ldr	r2, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed8:	69d1      	ldr	r1, [r2, #28]
    3eda:	683a      	ldr	r2, [r7, #0]
    3edc:	430a      	orrs	r2, r1
    3ede:	61da      	str	r2, [r3, #28]
			break;
    3ee0:	e008      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3ee2:	4b07      	ldr	r3, [pc, #28]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee4:	4a06      	ldr	r2, [pc, #24]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee6:	6a11      	ldr	r1, [r2, #32]
    3ee8:	683a      	ldr	r2, [r7, #0]
    3eea:	430a      	orrs	r2, r1
    3eec:	621a      	str	r2, [r3, #32]
			break;
    3eee:	e001      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3ef0:	2317      	movs	r3, #23
    3ef2:	e000      	b.n	3ef6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3ef4:	2300      	movs	r3, #0
}
    3ef6:	1c18      	adds	r0, r3, #0
    3ef8:	46bd      	mov	sp, r7
    3efa:	b002      	add	sp, #8
    3efc:	bd80      	pop	{r7, pc}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	40000400 	.word	0x40000400

00003f04 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	1c02      	adds	r2, r0, #0
    3f0c:	1dfb      	adds	r3, r7, #7
    3f0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f10:	4b06      	ldr	r3, [pc, #24]	; (3f2c <system_interrupt_enable+0x28>)
    3f12:	1dfa      	adds	r2, r7, #7
    3f14:	7812      	ldrb	r2, [r2, #0]
    3f16:	1c11      	adds	r1, r2, #0
    3f18:	221f      	movs	r2, #31
    3f1a:	400a      	ands	r2, r1
    3f1c:	2101      	movs	r1, #1
    3f1e:	1c08      	adds	r0, r1, #0
    3f20:	4090      	lsls	r0, r2
    3f22:	1c02      	adds	r2, r0, #0
    3f24:	601a      	str	r2, [r3, #0]
}
    3f26:	46bd      	mov	sp, r7
    3f28:	b002      	add	sp, #8
    3f2a:	bd80      	pop	{r7, pc}
    3f2c:	e000e100 	.word	0xe000e100

00003f30 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b084      	sub	sp, #16
    3f34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3f36:	4b2c      	ldr	r3, [pc, #176]	; (3fe8 <_system_extint_init+0xb8>)
    3f38:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3f3a:	2000      	movs	r0, #0
    3f3c:	2140      	movs	r1, #64	; 0x40
    3f3e:	4b2b      	ldr	r3, [pc, #172]	; (3fec <_system_extint_init+0xbc>)
    3f40:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3f42:	1c3b      	adds	r3, r7, #0
    3f44:	1c18      	adds	r0, r3, #0
    3f46:	4b2a      	ldr	r3, [pc, #168]	; (3ff0 <_system_extint_init+0xc0>)
    3f48:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3f4a:	1c3b      	adds	r3, r7, #0
    3f4c:	2200      	movs	r2, #0
    3f4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3f50:	1c3b      	adds	r3, r7, #0
    3f52:	2003      	movs	r0, #3
    3f54:	1c19      	adds	r1, r3, #0
    3f56:	4b27      	ldr	r3, [pc, #156]	; (3ff4 <_system_extint_init+0xc4>)
    3f58:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3f5a:	2003      	movs	r0, #3
    3f5c:	4b26      	ldr	r3, [pc, #152]	; (3ff8 <_system_extint_init+0xc8>)
    3f5e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f60:	2300      	movs	r3, #0
    3f62:	60fb      	str	r3, [r7, #12]
    3f64:	e016      	b.n	3f94 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3f66:	68fb      	ldr	r3, [r7, #12]
    3f68:	009b      	lsls	r3, r3, #2
    3f6a:	2110      	movs	r1, #16
    3f6c:	19c9      	adds	r1, r1, r7
    3f6e:	18cb      	adds	r3, r1, r3
    3f70:	3b0c      	subs	r3, #12
    3f72:	681a      	ldr	r2, [r3, #0]
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	009b      	lsls	r3, r3, #2
    3f78:	2110      	movs	r1, #16
    3f7a:	19c9      	adds	r1, r1, r7
    3f7c:	18cb      	adds	r3, r1, r3
    3f7e:	3b0c      	subs	r3, #12
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	b2db      	uxtb	r3, r3
    3f86:	2101      	movs	r1, #1
    3f88:	430b      	orrs	r3, r1
    3f8a:	b2db      	uxtb	r3, r3
    3f8c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	3301      	adds	r3, #1
    3f92:	60fb      	str	r3, [r7, #12]
    3f94:	68fb      	ldr	r3, [r7, #12]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d0e5      	beq.n	3f66 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	4b17      	ldr	r3, [pc, #92]	; (3ffc <_system_extint_init+0xcc>)
    3f9e:	4798      	blx	r3
    3fa0:	1c03      	adds	r3, r0, #0
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d1fa      	bne.n	3f9c <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fa6:	1c3b      	adds	r3, r7, #0
    3fa8:	330b      	adds	r3, #11
    3faa:	2200      	movs	r2, #0
    3fac:	701a      	strb	r2, [r3, #0]
    3fae:	e00d      	b.n	3fcc <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    3fb0:	1c3b      	adds	r3, r7, #0
    3fb2:	330b      	adds	r3, #11
    3fb4:	781a      	ldrb	r2, [r3, #0]
    3fb6:	4b12      	ldr	r3, [pc, #72]	; (4000 <__stack_size__>)
    3fb8:	0092      	lsls	r2, r2, #2
    3fba:	2100      	movs	r1, #0
    3fbc:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fbe:	1c3b      	adds	r3, r7, #0
    3fc0:	330b      	adds	r3, #11
    3fc2:	781a      	ldrb	r2, [r3, #0]
    3fc4:	1c3b      	adds	r3, r7, #0
    3fc6:	330b      	adds	r3, #11
    3fc8:	3201      	adds	r2, #1
    3fca:	701a      	strb	r2, [r3, #0]
    3fcc:	1c3b      	adds	r3, r7, #0
    3fce:	330b      	adds	r3, #11
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2b0f      	cmp	r3, #15
    3fd4:	d9ec      	bls.n	3fb0 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3fd6:	2004      	movs	r0, #4
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <__stack_size__+0x4>)
    3fda:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3fdc:	4b0a      	ldr	r3, [pc, #40]	; (4008 <__stack_size__+0x8>)
    3fde:	4798      	blx	r3
}
    3fe0:	46bd      	mov	sp, r7
    3fe2:	b004      	add	sp, #16
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	40001800 	.word	0x40001800
    3fec:	00003ea9 	.word	0x00003ea9
    3ff0:	00003e95 	.word	0x00003e95
    3ff4:	00014041 	.word	0x00014041
    3ff8:	00014081 	.word	0x00014081
    3ffc:	00003e4d 	.word	0x00003e4d
    4000:	20000544 	.word	0x20000544
    4004:	00003f05 	.word	0x00003f05
    4008:	0000400d 	.word	0x0000400d

0000400c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4012:	4b14      	ldr	r3, [pc, #80]	; (4064 <_extint_enable+0x58>)
    4014:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4016:	2300      	movs	r3, #0
    4018:	607b      	str	r3, [r7, #4]
    401a:	e016      	b.n	404a <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	009b      	lsls	r3, r3, #2
    4020:	2108      	movs	r1, #8
    4022:	19c9      	adds	r1, r1, r7
    4024:	18cb      	adds	r3, r1, r3
    4026:	3b08      	subs	r3, #8
    4028:	681a      	ldr	r2, [r3, #0]
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	009b      	lsls	r3, r3, #2
    402e:	2108      	movs	r1, #8
    4030:	19c9      	adds	r1, r1, r7
    4032:	18cb      	adds	r3, r1, r3
    4034:	3b08      	subs	r3, #8
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	b2db      	uxtb	r3, r3
    403c:	2102      	movs	r1, #2
    403e:	430b      	orrs	r3, r1
    4040:	b2db      	uxtb	r3, r3
    4042:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	3301      	adds	r3, #1
    4048:	607b      	str	r3, [r7, #4]
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	2b00      	cmp	r3, #0
    404e:	d0e5      	beq.n	401c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <_extint_enable+0x5c>)
    4054:	4798      	blx	r3
    4056:	1c03      	adds	r3, r0, #0
    4058:	2b00      	cmp	r3, #0
    405a:	d1fa      	bne.n	4052 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    405c:	46bd      	mov	sp, r7
    405e:	b002      	add	sp, #8
    4060:	bd80      	pop	{r7, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	40001800 	.word	0x40001800
    4068:	00003e4d 	.word	0x00003e4d

0000406c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    406c:	b590      	push	{r4, r7, lr}
    406e:	b087      	sub	sp, #28
    4070:	af00      	add	r7, sp, #0
    4072:	1c02      	adds	r2, r0, #0
    4074:	6039      	str	r1, [r7, #0]
    4076:	1dfb      	adds	r3, r7, #7
    4078:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    407a:	1c3b      	adds	r3, r7, #0
    407c:	3308      	adds	r3, #8
    407e:	1c18      	adds	r0, r3, #0
    4080:	4b37      	ldr	r3, [pc, #220]	; (4160 <extint_chan_set_config+0xf4>)
    4082:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4084:	683b      	ldr	r3, [r7, #0]
    4086:	685b      	ldr	r3, [r3, #4]
    4088:	b2da      	uxtb	r2, r3
    408a:	1c3b      	adds	r3, r7, #0
    408c:	3308      	adds	r3, #8
    408e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4090:	1c3b      	adds	r3, r7, #0
    4092:	3308      	adds	r3, #8
    4094:	2200      	movs	r2, #0
    4096:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	7a1a      	ldrb	r2, [r3, #8]
    409c:	1c3b      	adds	r3, r7, #0
    409e:	3308      	adds	r3, #8
    40a0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	b2da      	uxtb	r2, r3
    40a8:	1c3b      	adds	r3, r7, #0
    40aa:	3308      	adds	r3, #8
    40ac:	1c10      	adds	r0, r2, #0
    40ae:	1c19      	adds	r1, r3, #0
    40b0:	4b2c      	ldr	r3, [pc, #176]	; (4164 <extint_chan_set_config+0xf8>)
    40b2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	1c18      	adds	r0, r3, #0
    40ba:	4b2b      	ldr	r3, [pc, #172]	; (4168 <extint_chan_set_config+0xfc>)
    40bc:	4798      	blx	r3
    40be:	1c03      	adds	r3, r0, #0
    40c0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	781a      	ldrb	r2, [r3, #0]
    40c6:	2307      	movs	r3, #7
    40c8:	4013      	ands	r3, r2
    40ca:	009b      	lsls	r3, r3, #2
    40cc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	7adb      	ldrb	r3, [r3, #11]
    40d2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    40d4:	683b      	ldr	r3, [r7, #0]
    40d6:	7a9b      	ldrb	r3, [r3, #10]
    40d8:	2b00      	cmp	r3, #0
    40da:	d003      	beq.n	40e4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    40dc:	697b      	ldr	r3, [r7, #20]
    40de:	2208      	movs	r2, #8
    40e0:	4313      	orrs	r3, r2
    40e2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    40e4:	1dfb      	adds	r3, r7, #7
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	08db      	lsrs	r3, r3, #3
    40ea:	b2db      	uxtb	r3, r3
    40ec:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    40ee:	1dfb      	adds	r3, r7, #7
    40f0:	781b      	ldrb	r3, [r3, #0]
    40f2:	08db      	lsrs	r3, r3, #3
    40f4:	b2db      	uxtb	r3, r3
    40f6:	1c19      	adds	r1, r3, #0
    40f8:	693b      	ldr	r3, [r7, #16]
    40fa:	3106      	adds	r1, #6
    40fc:	0089      	lsls	r1, r1, #2
    40fe:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4100:	68f9      	ldr	r1, [r7, #12]
    4102:	200f      	movs	r0, #15
    4104:	1c04      	adds	r4, r0, #0
    4106:	408c      	lsls	r4, r1
    4108:	1c21      	adds	r1, r4, #0
    410a:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    410c:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	6978      	ldr	r0, [r7, #20]
    4112:	1c04      	adds	r4, r0, #0
    4114:	409c      	lsls	r4, r3
    4116:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4118:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    411a:	693b      	ldr	r3, [r7, #16]
    411c:	3206      	adds	r2, #6
    411e:	0092      	lsls	r2, r2, #2
    4120:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4122:	683b      	ldr	r3, [r7, #0]
    4124:	7a5b      	ldrb	r3, [r3, #9]
    4126:	2b00      	cmp	r3, #0
    4128:	d00b      	beq.n	4142 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    412a:	693b      	ldr	r3, [r7, #16]
    412c:	695a      	ldr	r2, [r3, #20]
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2101      	movs	r1, #1
    4134:	1c08      	adds	r0, r1, #0
    4136:	4098      	lsls	r0, r3
    4138:	1c03      	adds	r3, r0, #0
    413a:	431a      	orrs	r2, r3
    413c:	693b      	ldr	r3, [r7, #16]
    413e:	615a      	str	r2, [r3, #20]
    4140:	e00b      	b.n	415a <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4142:	693b      	ldr	r3, [r7, #16]
    4144:	695b      	ldr	r3, [r3, #20]
    4146:	1dfa      	adds	r2, r7, #7
    4148:	7812      	ldrb	r2, [r2, #0]
    414a:	2101      	movs	r1, #1
    414c:	1c0c      	adds	r4, r1, #0
    414e:	4094      	lsls	r4, r2
    4150:	1c22      	adds	r2, r4, #0
    4152:	43d2      	mvns	r2, r2
    4154:	401a      	ands	r2, r3
    4156:	693b      	ldr	r3, [r7, #16]
    4158:	615a      	str	r2, [r3, #20]
	}
}
    415a:	46bd      	mov	sp, r7
    415c:	b007      	add	sp, #28
    415e:	bd90      	pop	{r4, r7, pc}
    4160:	00003ddd 	.word	0x00003ddd
    4164:	00014361 	.word	0x00014361
    4168:	00003e05 	.word	0x00003e05

0000416c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    416c:	b580      	push	{r7, lr}
    416e:	b084      	sub	sp, #16
    4170:	af00      	add	r7, sp, #0
    4172:	1c02      	adds	r2, r0, #0
    4174:	1dfb      	adds	r3, r7, #7
    4176:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4178:	1c3b      	adds	r3, r7, #0
    417a:	330f      	adds	r3, #15
    417c:	1dfa      	adds	r2, r7, #7
    417e:	7812      	ldrb	r2, [r2, #0]
    4180:	0952      	lsrs	r2, r2, #5
    4182:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4184:	1c3b      	adds	r3, r7, #0
    4186:	330f      	adds	r3, #15
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	d10b      	bne.n	41a6 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    418e:	4b08      	ldr	r3, [pc, #32]	; (41b0 <_extint_get_eic_from_channel+0x44>)
    4190:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4192:	1c3b      	adds	r3, r7, #0
    4194:	330f      	adds	r3, #15
    4196:	781b      	ldrb	r3, [r3, #0]
    4198:	009b      	lsls	r3, r3, #2
    419a:	2210      	movs	r2, #16
    419c:	19d2      	adds	r2, r2, r7
    419e:	18d3      	adds	r3, r2, r3
    41a0:	3b08      	subs	r3, #8
    41a2:	681b      	ldr	r3, [r3, #0]
    41a4:	e000      	b.n	41a8 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    41a6:	2300      	movs	r3, #0
	}
}
    41a8:	1c18      	adds	r0, r3, #0
    41aa:	46bd      	mov	sp, r7
    41ac:	b004      	add	sp, #16
    41ae:	bd80      	pop	{r7, pc}
    41b0:	40001800 	.word	0x40001800

000041b4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b084      	sub	sp, #16
    41b8:	af00      	add	r7, sp, #0
    41ba:	1c02      	adds	r2, r0, #0
    41bc:	1dfb      	adds	r3, r7, #7
    41be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	1c18      	adds	r0, r3, #0
    41c6:	4b0c      	ldr	r3, [pc, #48]	; (41f8 <extint_chan_is_detected+0x44>)
    41c8:	4798      	blx	r3
    41ca:	1c03      	adds	r3, r0, #0
    41cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    41ce:	1dfb      	adds	r3, r7, #7
    41d0:	781a      	ldrb	r2, [r3, #0]
    41d2:	231f      	movs	r3, #31
    41d4:	4013      	ands	r3, r2
    41d6:	2201      	movs	r2, #1
    41d8:	1c11      	adds	r1, r2, #0
    41da:	4099      	lsls	r1, r3
    41dc:	1c0b      	adds	r3, r1, #0
    41de:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	691b      	ldr	r3, [r3, #16]
    41e4:	68ba      	ldr	r2, [r7, #8]
    41e6:	4013      	ands	r3, r2
    41e8:	1e5a      	subs	r2, r3, #1
    41ea:	4193      	sbcs	r3, r2
    41ec:	b2db      	uxtb	r3, r3
}
    41ee:	1c18      	adds	r0, r3, #0
    41f0:	46bd      	mov	sp, r7
    41f2:	b004      	add	sp, #16
    41f4:	bd80      	pop	{r7, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	0000416d 	.word	0x0000416d

000041fc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b084      	sub	sp, #16
    4200:	af00      	add	r7, sp, #0
    4202:	1c02      	adds	r2, r0, #0
    4204:	1dfb      	adds	r3, r7, #7
    4206:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4208:	1dfb      	adds	r3, r7, #7
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	1c18      	adds	r0, r3, #0
    420e:	4b09      	ldr	r3, [pc, #36]	; (4234 <extint_chan_clear_detected+0x38>)
    4210:	4798      	blx	r3
    4212:	1c03      	adds	r3, r0, #0
    4214:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4216:	1dfb      	adds	r3, r7, #7
    4218:	781a      	ldrb	r2, [r3, #0]
    421a:	231f      	movs	r3, #31
    421c:	4013      	ands	r3, r2
    421e:	2201      	movs	r2, #1
    4220:	1c11      	adds	r1, r2, #0
    4222:	4099      	lsls	r1, r3
    4224:	1c0b      	adds	r3, r1, #0
    4226:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	68ba      	ldr	r2, [r7, #8]
    422c:	611a      	str	r2, [r3, #16]
}
    422e:	46bd      	mov	sp, r7
    4230:	b004      	add	sp, #16
    4232:	bd80      	pop	{r7, pc}
    4234:	0000416d 	.word	0x0000416d

00004238 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	1cfb      	adds	r3, r7, #3
    4242:	7019      	strb	r1, [r3, #0]
    4244:	1cbb      	adds	r3, r7, #2
    4246:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4248:	1cbb      	adds	r3, r7, #2
    424a:	781b      	ldrb	r3, [r3, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4250:	2317      	movs	r3, #23
    4252:	e019      	b.n	4288 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4254:	1cfb      	adds	r3, r7, #3
    4256:	781a      	ldrb	r2, [r3, #0]
    4258:	4b0d      	ldr	r3, [pc, #52]	; (4290 <extint_register_callback+0x58>)
    425a:	0092      	lsls	r2, r2, #2
    425c:	58d3      	ldr	r3, [r2, r3]
    425e:	2b00      	cmp	r3, #0
    4260:	d107      	bne.n	4272 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4262:	1cfb      	adds	r3, r7, #3
    4264:	781a      	ldrb	r2, [r3, #0]
    4266:	4b0a      	ldr	r3, [pc, #40]	; (4290 <extint_register_callback+0x58>)
    4268:	0092      	lsls	r2, r2, #2
    426a:	6879      	ldr	r1, [r7, #4]
    426c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    426e:	2300      	movs	r3, #0
    4270:	e00a      	b.n	4288 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4272:	1cfb      	adds	r3, r7, #3
    4274:	781a      	ldrb	r2, [r3, #0]
    4276:	4b06      	ldr	r3, [pc, #24]	; (4290 <extint_register_callback+0x58>)
    4278:	0092      	lsls	r2, r2, #2
    427a:	58d2      	ldr	r2, [r2, r3]
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	429a      	cmp	r2, r3
    4280:	d101      	bne.n	4286 <extint_register_callback+0x4e>
		return STATUS_OK;
    4282:	2300      	movs	r3, #0
    4284:	e000      	b.n	4288 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4286:	231d      	movs	r3, #29
}
    4288:	1c18      	adds	r0, r3, #0
    428a:	46bd      	mov	sp, r7
    428c:	b002      	add	sp, #8
    428e:	bd80      	pop	{r7, pc}
    4290:	20000544 	.word	0x20000544

00004294 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied.
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4294:	b580      	push	{r7, lr}
    4296:	b084      	sub	sp, #16
    4298:	af00      	add	r7, sp, #0
    429a:	1c0a      	adds	r2, r1, #0
    429c:	1dfb      	adds	r3, r7, #7
    429e:	1c01      	adds	r1, r0, #0
    42a0:	7019      	strb	r1, [r3, #0]
    42a2:	1dbb      	adds	r3, r7, #6
    42a4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    42a6:	1dbb      	adds	r3, r7, #6
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d10e      	bne.n	42cc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    42ae:	1dfb      	adds	r3, r7, #7
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	1c18      	adds	r0, r3, #0
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <extint_chan_enable_callback+0x44>)
    42b6:	4798      	blx	r3
    42b8:	1c03      	adds	r3, r0, #0
    42ba:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	2201      	movs	r2, #1
    42c2:	409a      	lsls	r2, r3
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    42c8:	2300      	movs	r3, #0
    42ca:	e000      	b.n	42ce <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    42cc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    42ce:	1c18      	adds	r0, r3, #0
    42d0:	46bd      	mov	sp, r7
    42d2:	b004      	add	sp, #16
    42d4:	bd80      	pop	{r7, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	0000416d 	.word	0x0000416d

000042dc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    42dc:	b580      	push	{r7, lr}
    42de:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    42e0:	4b15      	ldr	r3, [pc, #84]	; (4338 <EIC_Handler+0x5c>)
    42e2:	2200      	movs	r2, #0
    42e4:	701a      	strb	r2, [r3, #0]
    42e6:	e021      	b.n	432c <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    42e8:	4b13      	ldr	r3, [pc, #76]	; (4338 <EIC_Handler+0x5c>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	1c18      	adds	r0, r3, #0
    42ee:	4b13      	ldr	r3, [pc, #76]	; (433c <EIC_Handler+0x60>)
    42f0:	4798      	blx	r3
    42f2:	1c03      	adds	r3, r0, #0
    42f4:	2b00      	cmp	r3, #0
    42f6:	d013      	beq.n	4320 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    42f8:	4b0f      	ldr	r3, [pc, #60]	; (4338 <EIC_Handler+0x5c>)
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	1c18      	adds	r0, r3, #0
    42fe:	4b10      	ldr	r3, [pc, #64]	; (4340 <EIC_Handler+0x64>)
    4300:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4302:	4b0d      	ldr	r3, [pc, #52]	; (4338 <EIC_Handler+0x5c>)
    4304:	781b      	ldrb	r3, [r3, #0]
    4306:	1c1a      	adds	r2, r3, #0
    4308:	4b0e      	ldr	r3, [pc, #56]	; (4344 <EIC_Handler+0x68>)
    430a:	0092      	lsls	r2, r2, #2
    430c:	58d3      	ldr	r3, [r2, r3]
    430e:	2b00      	cmp	r3, #0
    4310:	d006      	beq.n	4320 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4312:	4b09      	ldr	r3, [pc, #36]	; (4338 <EIC_Handler+0x5c>)
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	1c1a      	adds	r2, r3, #0
    4318:	4b0a      	ldr	r3, [pc, #40]	; (4344 <EIC_Handler+0x68>)
    431a:	0092      	lsls	r2, r2, #2
    431c:	58d3      	ldr	r3, [r2, r3]
    431e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4320:	4b05      	ldr	r3, [pc, #20]	; (4338 <EIC_Handler+0x5c>)
    4322:	781b      	ldrb	r3, [r3, #0]
    4324:	3301      	adds	r3, #1
    4326:	b2da      	uxtb	r2, r3
    4328:	4b03      	ldr	r3, [pc, #12]	; (4338 <EIC_Handler+0x5c>)
    432a:	701a      	strb	r2, [r3, #0]
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <EIC_Handler+0x5c>)
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	2b0f      	cmp	r3, #15
    4332:	d9d9      	bls.n	42e8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}
    4338:	20000584 	.word	0x20000584
    433c:	000041b5 	.word	0x000041b5
    4340:	000041fd 	.word	0x000041fd
    4344:	20000544 	.word	0x20000544

00004348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    434e:	4b07      	ldr	r3, [pc, #28]	; (436c <nvm_is_ready+0x24>)
    4350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	7d1b      	ldrb	r3, [r3, #20]
    4356:	b2db      	uxtb	r3, r3
    4358:	1c1a      	adds	r2, r3, #0
    435a:	2301      	movs	r3, #1
    435c:	4013      	ands	r3, r2
    435e:	1e5a      	subs	r2, r3, #1
    4360:	4193      	sbcs	r3, r2
    4362:	b2db      	uxtb	r3, r3
}
    4364:	1c18      	adds	r0, r3, #0
    4366:	46bd      	mov	sp, r7
    4368:	b002      	add	sp, #8
    436a:	bd80      	pop	{r7, pc}
    436c:	41004000 	.word	0x41004000

00004370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4370:	b580      	push	{r7, lr}
    4372:	b082      	sub	sp, #8
    4374:	af00      	add	r7, sp, #0
    4376:	1c02      	adds	r2, r0, #0
    4378:	6039      	str	r1, [r7, #0]
    437a:	1dfb      	adds	r3, r7, #7
    437c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    437e:	1dfb      	adds	r3, r7, #7
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	2b01      	cmp	r3, #1
    4384:	d00a      	beq.n	439c <system_apb_clock_set_mask+0x2c>
    4386:	2b02      	cmp	r3, #2
    4388:	d00f      	beq.n	43aa <system_apb_clock_set_mask+0x3a>
    438a:	2b00      	cmp	r3, #0
    438c:	d114      	bne.n	43b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    438e:	4b0e      	ldr	r3, [pc, #56]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4390:	4a0d      	ldr	r2, [pc, #52]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4392:	6991      	ldr	r1, [r2, #24]
    4394:	683a      	ldr	r2, [r7, #0]
    4396:	430a      	orrs	r2, r1
    4398:	619a      	str	r2, [r3, #24]
			break;
    439a:	e00f      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    439c:	4b0a      	ldr	r3, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    439e:	4a0a      	ldr	r2, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43a0:	69d1      	ldr	r1, [r2, #28]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	430a      	orrs	r2, r1
    43a6:	61da      	str	r2, [r3, #28]
			break;
    43a8:	e008      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    43aa:	4b07      	ldr	r3, [pc, #28]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ac:	4a06      	ldr	r2, [pc, #24]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ae:	6a11      	ldr	r1, [r2, #32]
    43b0:	683a      	ldr	r2, [r7, #0]
    43b2:	430a      	orrs	r2, r1
    43b4:	621a      	str	r2, [r3, #32]
			break;
    43b6:	e001      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    43b8:	2317      	movs	r3, #23
    43ba:	e000      	b.n	43be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    43bc:	2300      	movs	r3, #0
}
    43be:	1c18      	adds	r0, r3, #0
    43c0:	46bd      	mov	sp, r7
    43c2:	b002      	add	sp, #8
    43c4:	bd80      	pop	{r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	40000400 	.word	0x40000400

000043cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    43d4:	4b33      	ldr	r3, [pc, #204]	; (44a4 <nvm_set_config+0xd8>)
    43d6:	60fb      	str	r3, [r7, #12]
#if (SAML21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    43d8:	2001      	movs	r0, #1
    43da:	2104      	movs	r1, #4
    43dc:	4b32      	ldr	r3, [pc, #200]	; (44a8 <nvm_set_config+0xdc>)
    43de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	8b1b      	ldrh	r3, [r3, #24]
    43e4:	b29b      	uxth	r3, r3
    43e6:	2220      	movs	r2, #32
    43e8:	32ff      	adds	r2, #255	; 0xff
    43ea:	4313      	orrs	r3, r2
    43ec:	b29a      	uxth	r2, r3
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    43f2:	4b2e      	ldr	r3, [pc, #184]	; (44ac <nvm_set_config+0xe0>)
    43f4:	4798      	blx	r3
    43f6:	1c03      	adds	r3, r0, #0
    43f8:	2201      	movs	r2, #1
    43fa:	4053      	eors	r3, r2
    43fc:	b2db      	uxtb	r3, r3
    43fe:	2b00      	cmp	r3, #0
    4400:	d001      	beq.n	4406 <nvm_set_config+0x3a>
		return STATUS_BUSY;
    4402:	2305      	movs	r3, #5
    4404:	e049      	b.n	449a <nvm_set_config+0xce>
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	021b      	lsls	r3, r3, #8
    440c:	1c1a      	adds	r2, r3, #0
    440e:	23c0      	movs	r3, #192	; 0xc0
    4410:	009b      	lsls	r3, r3, #2
    4412:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	785b      	ldrb	r3, [r3, #1]
    4418:	01db      	lsls	r3, r3, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    441a:	1c19      	adds	r1, r3, #0
    441c:	23ff      	movs	r3, #255	; 0xff
    441e:	400b      	ands	r3, r1
    4420:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	789b      	ldrb	r3, [r3, #2]
    4426:	005b      	lsls	r3, r3, #1
    4428:	1c19      	adds	r1, r3, #0
    442a:	231e      	movs	r3, #30
    442c:	400b      	ands	r3, r1
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    442e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	78db      	ldrb	r3, [r3, #3]
    4434:	1c19      	adds	r1, r3, #0
    4436:	2301      	movs	r3, #1
    4438:	400b      	ands	r3, r1
    443a:	049b      	lsls	r3, r3, #18

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    443c:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	791b      	ldrb	r3, [r3, #4]
    4442:	041b      	lsls	r3, r3, #16
    4444:	1c19      	adds	r1, r3, #0
    4446:	23c0      	movs	r3, #192	; 0xc0
    4448:	029b      	lsls	r3, r3, #10
    444a:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    444c:	431a      	orrs	r2, r3
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	605a      	str	r2, [r3, #4]
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	689b      	ldr	r3, [r3, #8]
    4456:	0c1b      	lsrs	r3, r3, #16
    4458:	1c1a      	adds	r2, r3, #0
    445a:	2307      	movs	r3, #7
    445c:	4013      	ands	r3, r2
    445e:	b2db      	uxtb	r3, r3
    4460:	2208      	movs	r2, #8
    4462:	1c11      	adds	r1, r2, #0
    4464:	4099      	lsls	r1, r3
    4466:	1c0b      	adds	r3, r1, #0
    4468:	b29a      	uxth	r2, r3
    446a:	4b11      	ldr	r3, [pc, #68]	; (44b0 <nvm_set_config+0xe4>)
    446c:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	689b      	ldr	r3, [r3, #8]
    4472:	2200      	movs	r2, #0
    4474:	4393      	bics	r3, r2
    4476:	b29a      	uxth	r2, r3
    4478:	4b0d      	ldr	r3, [pc, #52]	; (44b0 <nvm_set_config+0xe4>)
    447a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	785a      	ldrb	r2, [r3, #1]
    4480:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <nvm_set_config+0xe4>)
    4482:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	8b1b      	ldrh	r3, [r3, #24]
    4488:	b29b      	uxth	r3, r3
    448a:	1c1a      	adds	r2, r3, #0
    448c:	2380      	movs	r3, #128	; 0x80
    448e:	005b      	lsls	r3, r3, #1
    4490:	4013      	ands	r3, r2
    4492:	d001      	beq.n	4498 <nvm_set_config+0xcc>
		return STATUS_ERR_IO;
    4494:	2310      	movs	r3, #16
    4496:	e000      	b.n	449a <nvm_set_config+0xce>
	}

	return STATUS_OK;
    4498:	2300      	movs	r3, #0
}
    449a:	1c18      	adds	r0, r3, #0
    449c:	46bd      	mov	sp, r7
    449e:	b004      	add	sp, #16
    44a0:	bd80      	pop	{r7, pc}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	41004000 	.word	0x41004000
    44a8:	00004371 	.word	0x00004371
    44ac:	00004349 	.word	0x00004349
    44b0:	20000490 	.word	0x20000490

000044b4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b086      	sub	sp, #24
    44b8:	af00      	add	r7, sp, #0
    44ba:	60b9      	str	r1, [r7, #8]
    44bc:	607a      	str	r2, [r7, #4]
    44be:	1c3b      	adds	r3, r7, #0
    44c0:	330f      	adds	r3, #15
    44c2:	1c02      	adds	r2, r0, #0
    44c4:	701a      	strb	r2, [r3, #0]
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)){
    44c6:	4b32      	ldr	r3, [pc, #200]	; (4590 <nvm_execute_command+0xdc>)
    44c8:	881b      	ldrh	r3, [r3, #0]
    44ca:	4a31      	ldr	r2, [pc, #196]	; (4590 <nvm_execute_command+0xdc>)
    44cc:	8852      	ldrh	r2, [r2, #2]
    44ce:	435a      	muls	r2, r3
    44d0:	68bb      	ldr	r3, [r7, #8]
    44d2:	429a      	cmp	r2, r3
    44d4:	d201      	bcs.n	44da <nvm_execute_command+0x26>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    44d6:	2318      	movs	r3, #24
    44d8:	e056      	b.n	4588 <nvm_execute_command+0xd4>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    44da:	4b2e      	ldr	r3, [pc, #184]	; (4594 <nvm_execute_command+0xe0>)
    44dc:	617b      	str	r3, [r7, #20]

	/* turn off cache before issuing flash commands */
	temp = nvm_module->CTRLB.reg;
    44de:	697b      	ldr	r3, [r7, #20]
    44e0:	685b      	ldr	r3, [r3, #4]
    44e2:	613b      	str	r3, [r7, #16]
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
    44e4:	693b      	ldr	r3, [r7, #16]
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	02d2      	lsls	r2, r2, #11
    44ea:	431a      	orrs	r2, r3
    44ec:	697b      	ldr	r3, [r7, #20]
    44ee:	605a      	str	r2, [r3, #4]

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    44f0:	697b      	ldr	r3, [r7, #20]
    44f2:	8b1b      	ldrh	r3, [r3, #24]
    44f4:	b29b      	uxth	r3, r3
    44f6:	2220      	movs	r2, #32
    44f8:	32ff      	adds	r2, #255	; 0xff
    44fa:	4313      	orrs	r3, r2
    44fc:	b29a      	uxth	r2, r3
    44fe:	697b      	ldr	r3, [r7, #20]
    4500:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4502:	4b25      	ldr	r3, [pc, #148]	; (4598 <nvm_execute_command+0xe4>)
    4504:	4798      	blx	r3
    4506:	1c03      	adds	r3, r0, #0
    4508:	2201      	movs	r2, #1
    450a:	4053      	eors	r3, r2
    450c:	b2db      	uxtb	r3, r3
    450e:	2b00      	cmp	r3, #0
    4510:	d001      	beq.n	4516 <nvm_execute_command+0x62>
		return STATUS_BUSY;
    4512:	2305      	movs	r3, #5
    4514:	e038      	b.n	4588 <nvm_execute_command+0xd4>
	}

	switch (command) {
    4516:	1c3b      	adds	r3, r7, #0
    4518:	330f      	adds	r3, #15
    451a:	781b      	ldrb	r3, [r3, #0]
    451c:	2b45      	cmp	r3, #69	; 0x45
    451e:	d81a      	bhi.n	4556 <nvm_execute_command+0xa2>
    4520:	009a      	lsls	r2, r3, #2
    4522:	4b1e      	ldr	r3, [pc, #120]	; (459c <nvm_execute_command+0xe8>)
    4524:	18d3      	adds	r3, r2, r3
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    452a:	697b      	ldr	r3, [r7, #20]
    452c:	8b1b      	ldrh	r3, [r3, #24]
    452e:	b29b      	uxth	r3, r3
    4530:	1c1a      	adds	r2, r3, #0
    4532:	2380      	movs	r3, #128	; 0x80
    4534:	005b      	lsls	r3, r3, #1
    4536:	4013      	ands	r3, r2
    4538:	d001      	beq.n	453e <nvm_execute_command+0x8a>
				return STATUS_ERR_IO;
    453a:	2310      	movs	r3, #16
    453c:	e024      	b.n	4588 <nvm_execute_command+0xd4>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	089b      	lsrs	r3, r3, #2
    4542:	005a      	lsls	r2, r3, #1
    4544:	697b      	ldr	r3, [r7, #20]
    4546:	61da      	str	r2, [r3, #28]
			break;
    4548:	e008      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    454a:	68bb      	ldr	r3, [r7, #8]
    454c:	089b      	lsrs	r3, r3, #2
    454e:	005a      	lsls	r2, r3, #1
    4550:	697b      	ldr	r3, [r7, #20]
    4552:	61da      	str	r2, [r3, #28]
			break;
    4554:	e002      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
    4556:	2317      	movs	r3, #23
    4558:	e016      	b.n	4588 <nvm_execute_command+0xd4>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
    455a:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    455c:	1c3b      	adds	r3, r7, #0
    455e:	330f      	adds	r3, #15
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	b29b      	uxth	r3, r3
    4564:	4a0e      	ldr	r2, [pc, #56]	; (45a0 <nvm_execute_command+0xec>)
    4566:	4313      	orrs	r3, r2
    4568:	b29a      	uxth	r2, r3
    456a:	697b      	ldr	r3, [r7, #20]
    456c:	801a      	strh	r2, [r3, #0]

	/* Wait for the nvm controller to become ready */
	while (!nvm_is_ready()) {
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	4b09      	ldr	r3, [pc, #36]	; (4598 <nvm_execute_command+0xe4>)
    4572:	4798      	blx	r3
    4574:	1c03      	adds	r3, r0, #0
    4576:	2201      	movs	r2, #1
    4578:	4053      	eors	r3, r2
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d1f7      	bne.n	4570 <nvm_execute_command+0xbc>
	}

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;
    4580:	697b      	ldr	r3, [r7, #20]
    4582:	693a      	ldr	r2, [r7, #16]
    4584:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4586:	2300      	movs	r3, #0
}
    4588:	1c18      	adds	r0, r3, #0
    458a:	46bd      	mov	sp, r7
    458c:	b006      	add	sp, #24
    458e:	bd80      	pop	{r7, pc}
    4590:	20000490 	.word	0x20000490
    4594:	41004000 	.word	0x41004000
    4598:	00004349 	.word	0x00004349
    459c:	000181f8 	.word	0x000181f8
    45a0:	ffffa500 	.word	0xffffa500

000045a4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b088      	sub	sp, #32
    45a8:	af00      	add	r7, sp, #0
    45aa:	60f8      	str	r0, [r7, #12]
    45ac:	60b9      	str	r1, [r7, #8]
    45ae:	1dbb      	adds	r3, r7, #6
    45b0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    45b2:	4b46      	ldr	r3, [pc, #280]	; (46cc <nvm_write_buffer+0x128>)
    45b4:	881b      	ldrh	r3, [r3, #0]
    45b6:	4a45      	ldr	r2, [pc, #276]	; (46cc <nvm_write_buffer+0x128>)
    45b8:	8852      	ldrh	r2, [r2, #2]
    45ba:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	429a      	cmp	r2, r3
    45c0:	d201      	bcs.n	45c6 <nvm_write_buffer+0x22>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    45c2:	2318      	movs	r3, #24
    45c4:	e07d      	b.n	46c2 <nvm_write_buffer+0x11e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    45c6:	4b41      	ldr	r3, [pc, #260]	; (46cc <nvm_write_buffer+0x128>)
    45c8:	881b      	ldrh	r3, [r3, #0]
    45ca:	3b01      	subs	r3, #1
    45cc:	68fa      	ldr	r2, [r7, #12]
    45ce:	4013      	ands	r3, r2
    45d0:	d001      	beq.n	45d6 <nvm_write_buffer+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    45d2:	2318      	movs	r3, #24
    45d4:	e075      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
    45d6:	4b3d      	ldr	r3, [pc, #244]	; (46cc <nvm_write_buffer+0x128>)
    45d8:	881b      	ldrh	r3, [r3, #0]
    45da:	1dba      	adds	r2, r7, #6
    45dc:	8812      	ldrh	r2, [r2, #0]
    45de:	429a      	cmp	r2, r3
    45e0:	d901      	bls.n	45e6 <nvm_write_buffer+0x42>
		return STATUS_ERR_INVALID_ARG;
    45e2:	2317      	movs	r3, #23
    45e4:	e06d      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    45e6:	4b3a      	ldr	r3, [pc, #232]	; (46d0 <nvm_write_buffer+0x12c>)
    45e8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    45ea:	4b3a      	ldr	r3, [pc, #232]	; (46d4 <nvm_write_buffer+0x130>)
    45ec:	4798      	blx	r3
    45ee:	1c03      	adds	r3, r0, #0
    45f0:	2201      	movs	r2, #1
    45f2:	4053      	eors	r3, r2
    45f4:	b2db      	uxtb	r3, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	d001      	beq.n	45fe <nvm_write_buffer+0x5a>
		return STATUS_BUSY;
    45fa:	2305      	movs	r3, #5
    45fc:	e061      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    45fe:	697b      	ldr	r3, [r7, #20]
    4600:	4a35      	ldr	r2, [pc, #212]	; (46d8 <nvm_write_buffer+0x134>)
    4602:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    4604:	46c0      	nop			; (mov r8, r8)
    4606:	4b33      	ldr	r3, [pc, #204]	; (46d4 <nvm_write_buffer+0x130>)
    4608:	4798      	blx	r3
    460a:	1c03      	adds	r3, r0, #0
    460c:	2201      	movs	r2, #1
    460e:	4053      	eors	r3, r2
    4610:	b2db      	uxtb	r3, r3
    4612:	2b00      	cmp	r3, #0
    4614:	d1f7      	bne.n	4606 <nvm_write_buffer+0x62>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4616:	697b      	ldr	r3, [r7, #20]
    4618:	8b1b      	ldrh	r3, [r3, #24]
    461a:	b29b      	uxth	r3, r3
    461c:	2220      	movs	r2, #32
    461e:	32ff      	adds	r2, #255	; 0xff
    4620:	4313      	orrs	r3, r2
    4622:	b29a      	uxth	r2, r3
    4624:	697b      	ldr	r3, [r7, #20]
    4626:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    4628:	68fb      	ldr	r3, [r7, #12]
    462a:	085b      	lsrs	r3, r3, #1
    462c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    462e:	1c3b      	adds	r3, r7, #0
    4630:	331a      	adds	r3, #26
    4632:	2200      	movs	r2, #0
    4634:	801a      	strh	r2, [r3, #0]
    4636:	e030      	b.n	469a <nvm_write_buffer+0xf6>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    4638:	1c3b      	adds	r3, r7, #0
    463a:	331a      	adds	r3, #26
    463c:	881b      	ldrh	r3, [r3, #0]
    463e:	68ba      	ldr	r2, [r7, #8]
    4640:	18d3      	adds	r3, r2, r3
    4642:	781a      	ldrb	r2, [r3, #0]
    4644:	1c3b      	adds	r3, r7, #0
    4646:	3318      	adds	r3, #24
    4648:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    464a:	1c3b      	adds	r3, r7, #0
    464c:	331a      	adds	r3, #26
    464e:	881a      	ldrh	r2, [r3, #0]
    4650:	1dbb      	adds	r3, r7, #6
    4652:	881b      	ldrh	r3, [r3, #0]
    4654:	3b01      	subs	r3, #1
    4656:	429a      	cmp	r2, r3
    4658:	da10      	bge.n	467c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    465a:	1c3b      	adds	r3, r7, #0
    465c:	331a      	adds	r3, #26
    465e:	881b      	ldrh	r3, [r3, #0]
    4660:	3301      	adds	r3, #1
    4662:	68ba      	ldr	r2, [r7, #8]
    4664:	18d3      	adds	r3, r2, r3
    4666:	781b      	ldrb	r3, [r3, #0]
    4668:	021b      	lsls	r3, r3, #8
    466a:	b29a      	uxth	r2, r3
    466c:	1c3b      	adds	r3, r7, #0
    466e:	3318      	adds	r3, #24
    4670:	881b      	ldrh	r3, [r3, #0]
    4672:	4313      	orrs	r3, r2
    4674:	b29a      	uxth	r2, r3
    4676:	1c3b      	adds	r3, r7, #0
    4678:	3318      	adds	r3, #24
    467a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    467c:	69fb      	ldr	r3, [r7, #28]
    467e:	1c5a      	adds	r2, r3, #1
    4680:	61fa      	str	r2, [r7, #28]
    4682:	005b      	lsls	r3, r3, #1
    4684:	1c3a      	adds	r2, r7, #0
    4686:	3218      	adds	r2, #24
    4688:	8812      	ldrh	r2, [r2, #0]
    468a:	801a      	strh	r2, [r3, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    468c:	1c3b      	adds	r3, r7, #0
    468e:	331a      	adds	r3, #26
    4690:	1c3a      	adds	r2, r7, #0
    4692:	321a      	adds	r2, #26
    4694:	8812      	ldrh	r2, [r2, #0]
    4696:	3202      	adds	r2, #2
    4698:	801a      	strh	r2, [r3, #0]
    469a:	1c3a      	adds	r2, r7, #0
    469c:	321a      	adds	r2, #26
    469e:	1dbb      	adds	r3, r7, #6
    46a0:	8812      	ldrh	r2, [r2, #0]
    46a2:	881b      	ldrh	r3, [r3, #0]
    46a4:	429a      	cmp	r2, r3
    46a6:	d3c7      	bcc.n	4638 <nvm_write_buffer+0x94>
		NVM_MEMORY[nvm_address++] = data;
	}

	/* Perform a manual NVM write when the length of data to be programmed is
	 * less than page size */
	if (length < NVMCTRL_PAGE_SIZE) {
    46a8:	1dbb      	adds	r3, r7, #6
    46aa:	881b      	ldrh	r3, [r3, #0]
    46ac:	2b3f      	cmp	r3, #63	; 0x3f
    46ae:	d807      	bhi.n	46c0 <nvm_write_buffer+0x11c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ? 
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	2004      	movs	r0, #4
    46b4:	1c19      	adds	r1, r3, #0
    46b6:	2200      	movs	r2, #0
    46b8:	4b08      	ldr	r3, [pc, #32]	; (46dc <nvm_write_buffer+0x138>)
    46ba:	4798      	blx	r3
    46bc:	1c03      	adds	r3, r0, #0
    46be:	e000      	b.n	46c2 <nvm_write_buffer+0x11e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    46c0:	2300      	movs	r3, #0
}
    46c2:	1c18      	adds	r0, r3, #0
    46c4:	46bd      	mov	sp, r7
    46c6:	b008      	add	sp, #32
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	20000490 	.word	0x20000490
    46d0:	41004000 	.word	0x41004000
    46d4:	00004349 	.word	0x00004349
    46d8:	ffffa544 	.word	0xffffa544
    46dc:	000044b5 	.word	0x000044b5

000046e0 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    46e0:	b580      	push	{r7, lr}
    46e2:	b084      	sub	sp, #16
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    46e8:	4b1a      	ldr	r3, [pc, #104]	; (4754 <nvm_erase_row+0x74>)
    46ea:	881b      	ldrh	r3, [r3, #0]
    46ec:	4a19      	ldr	r2, [pc, #100]	; (4754 <nvm_erase_row+0x74>)
    46ee:	8852      	ldrh	r2, [r2, #2]
    46f0:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	429a      	cmp	r2, r3
    46f6:	d201      	bcs.n	46fc <nvm_erase_row+0x1c>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    46f8:	2318      	movs	r3, #24
    46fa:	e026      	b.n	474a <nvm_erase_row+0x6a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    46fc:	4b15      	ldr	r3, [pc, #84]	; (4754 <nvm_erase_row+0x74>)
    46fe:	881b      	ldrh	r3, [r3, #0]
    4700:	009b      	lsls	r3, r3, #2
    4702:	3b01      	subs	r3, #1
    4704:	687a      	ldr	r2, [r7, #4]
    4706:	4013      	ands	r3, r2
    4708:	d001      	beq.n	470e <nvm_erase_row+0x2e>
		return STATUS_ERR_BAD_ADDRESS;
    470a:	2318      	movs	r3, #24
    470c:	e01d      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    470e:	4b12      	ldr	r3, [pc, #72]	; (4758 <nvm_erase_row+0x78>)
    4710:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4712:	4b12      	ldr	r3, [pc, #72]	; (475c <nvm_erase_row+0x7c>)
    4714:	4798      	blx	r3
    4716:	1c03      	adds	r3, r0, #0
    4718:	2201      	movs	r2, #1
    471a:	4053      	eors	r3, r2
    471c:	b2db      	uxtb	r3, r3
    471e:	2b00      	cmp	r3, #0
    4720:	d001      	beq.n	4726 <nvm_erase_row+0x46>
		return STATUS_BUSY;
    4722:	2305      	movs	r3, #5
    4724:	e011      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	8b1b      	ldrh	r3, [r3, #24]
    472a:	b29b      	uxth	r3, r3
    472c:	2220      	movs	r2, #32
    472e:	32ff      	adds	r2, #255	; 0xff
    4730:	4313      	orrs	r3, r2
    4732:	b29a      	uxth	r2, r3
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	089b      	lsrs	r3, r3, #2
    473c:	005a      	lsls	r2, r3, #1
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ? 
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4742:	68fb      	ldr	r3, [r7, #12]
    4744:	4a06      	ldr	r2, [pc, #24]	; (4760 <nvm_erase_row+0x80>)
    4746:	801a      	strh	r2, [r3, #0]
#endif
	return STATUS_OK;
    4748:	2300      	movs	r3, #0
}
    474a:	1c18      	adds	r0, r3, #0
    474c:	46bd      	mov	sp, r7
    474e:	b004      	add	sp, #16
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	20000490 	.word	0x20000490
    4758:	41004000 	.word	0x41004000
    475c:	00004349 	.word	0x00004349
    4760:	ffffa502 	.word	0xffffa502

00004764 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4764:	b580      	push	{r7, lr}
    4766:	b082      	sub	sp, #8
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	2200      	movs	r2, #0
    4770:	701a      	strb	r2, [r3, #0]
}
    4772:	46bd      	mov	sp, r7
    4774:	b002      	add	sp, #8
    4776:	bd80      	pop	{r7, pc}

00004778 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4778:	b580      	push	{r7, lr}
    477a:	b082      	sub	sp, #8
    477c:	af00      	add	r7, sp, #0
    477e:	1c02      	adds	r2, r0, #0
    4780:	6039      	str	r1, [r7, #0]
    4782:	1dfb      	adds	r3, r7, #7
    4784:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4786:	1dfb      	adds	r3, r7, #7
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	2b01      	cmp	r3, #1
    478c:	d00a      	beq.n	47a4 <system_apb_clock_set_mask+0x2c>
    478e:	2b02      	cmp	r3, #2
    4790:	d00f      	beq.n	47b2 <system_apb_clock_set_mask+0x3a>
    4792:	2b00      	cmp	r3, #0
    4794:	d114      	bne.n	47c0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4796:	4b0e      	ldr	r3, [pc, #56]	; (47d0 <system_apb_clock_set_mask+0x58>)
    4798:	4a0d      	ldr	r2, [pc, #52]	; (47d0 <system_apb_clock_set_mask+0x58>)
    479a:	6991      	ldr	r1, [r2, #24]
    479c:	683a      	ldr	r2, [r7, #0]
    479e:	430a      	orrs	r2, r1
    47a0:	619a      	str	r2, [r3, #24]
			break;
    47a2:	e00f      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    47a4:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a6:	4a0a      	ldr	r2, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a8:	69d1      	ldr	r1, [r2, #28]
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	430a      	orrs	r2, r1
    47ae:	61da      	str	r2, [r3, #28]
			break;
    47b0:	e008      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    47b2:	4b07      	ldr	r3, [pc, #28]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b4:	4a06      	ldr	r2, [pc, #24]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b6:	6a11      	ldr	r1, [r2, #32]
    47b8:	683a      	ldr	r2, [r7, #0]
    47ba:	430a      	orrs	r2, r1
    47bc:	621a      	str	r2, [r3, #32]
			break;
    47be:	e001      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    47c0:	2317      	movs	r3, #23
    47c2:	e000      	b.n	47c6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    47c4:	2300      	movs	r3, #0
}
    47c6:	1c18      	adds	r0, r3, #0
    47c8:	46bd      	mov	sp, r7
    47ca:	b002      	add	sp, #8
    47cc:	bd80      	pop	{r7, pc}
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	40000400 	.word	0x40000400

000047d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b082      	sub	sp, #8
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	2280      	movs	r2, #128	; 0x80
    47e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	2200      	movs	r2, #0
    47e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	2201      	movs	r2, #1
    47ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	2200      	movs	r2, #0
    47f2:	70da      	strb	r2, [r3, #3]
}
    47f4:	46bd      	mov	sp, r7
    47f6:	b002      	add	sp, #8
    47f8:	bd80      	pop	{r7, pc}
    47fa:	46c0      	nop			; (mov r8, r8)

000047fc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4800:	4b05      	ldr	r3, [pc, #20]	; (4818 <system_is_debugger_present+0x1c>)
    4802:	789b      	ldrb	r3, [r3, #2]
    4804:	b2db      	uxtb	r3, r3
    4806:	1c1a      	adds	r2, r3, #0
    4808:	2302      	movs	r3, #2
    480a:	4013      	ands	r3, r2
    480c:	1e5a      	subs	r2, r3, #1
    480e:	4193      	sbcs	r3, r2
    4810:	b2db      	uxtb	r3, r3
}
    4812:	1c18      	adds	r0, r3, #0
    4814:	46bd      	mov	sp, r7
    4816:	bd80      	pop	{r7, pc}
    4818:	41002000 	.word	0x41002000

0000481c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    481c:	b580      	push	{r7, lr}
    481e:	b084      	sub	sp, #16
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	8a1b      	ldrh	r3, [r3, #16]
    482e:	b29b      	uxth	r3, r3
    4830:	1c1a      	adds	r2, r3, #0
    4832:	2380      	movs	r3, #128	; 0x80
    4834:	021b      	lsls	r3, r3, #8
    4836:	4013      	ands	r3, r2
    4838:	1e5a      	subs	r2, r3, #1
    483a:	4193      	sbcs	r3, r2
    483c:	b2db      	uxtb	r3, r3
#endif
}
    483e:	1c18      	adds	r0, r3, #0
    4840:	46bd      	mov	sp, r7
    4842:	b004      	add	sp, #16
    4844:	bd80      	pop	{r7, pc}
    4846:	46c0      	nop			; (mov r8, r8)

00004848 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4848:	b580      	push	{r7, lr}
    484a:	b082      	sub	sp, #8
    484c:	af00      	add	r7, sp, #0
    484e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4850:	46c0      	nop			; (mov r8, r8)
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	1c18      	adds	r0, r3, #0
    4856:	4b04      	ldr	r3, [pc, #16]	; (4868 <_usart_wait_for_sync+0x20>)
    4858:	4798      	blx	r3
    485a:	1c03      	adds	r3, r0, #0
    485c:	2b00      	cmp	r3, #0
    485e:	d1f8      	bne.n	4852 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4860:	46bd      	mov	sp, r7
    4862:	b002      	add	sp, #8
    4864:	bd80      	pop	{r7, pc}
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	0000481d 	.word	0x0000481d

0000486c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    486c:	b5b0      	push	{r4, r5, r7, lr}
    486e:	b08c      	sub	sp, #48	; 0x30
    4870:	af02      	add	r7, sp, #8
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	681b      	ldr	r3, [r3, #0]
    487a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	1c18      	adds	r0, r3, #0
    4882:	4b6d      	ldr	r3, [pc, #436]	; (4a38 <_usart_set_config+0x1cc>)
    4884:	4798      	blx	r3
    4886:	1c03      	adds	r3, r0, #0
    4888:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    488a:	697b      	ldr	r3, [r7, #20]
    488c:	330d      	adds	r3, #13
    488e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4890:	2300      	movs	r3, #0
    4892:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4894:	2300      	movs	r3, #0
    4896:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    4898:	1c3b      	adds	r3, r7, #0
    489a:	330c      	adds	r3, #12
    489c:	2200      	movs	r2, #0
    489e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48a0:	1c3b      	adds	r3, r7, #0
    48a2:	330f      	adds	r3, #15
    48a4:	2200      	movs	r2, #0
    48a6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48a8:	1c3b      	adds	r3, r7, #0
    48aa:	330e      	adds	r3, #14
    48ac:	2210      	movs	r2, #16
    48ae:	701a      	strb	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b0:	683b      	ldr	r3, [r7, #0]
    48b2:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b8:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	7d9b      	ldrb	r3, [r3, #22]
    48be:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48c0:	4313      	orrs	r3, r2
    48c2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    48c4:	1c3b      	adds	r3, r7, #0
    48c6:	331f      	adds	r3, #31
    48c8:	2200      	movs	r2, #0
    48ca:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	685b      	ldr	r3, [r3, #4]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d01f      	beq.n	4914 <_usart_set_config+0xa8>
    48d4:	2280      	movs	r2, #128	; 0x80
    48d6:	0552      	lsls	r2, r2, #21
    48d8:	4293      	cmp	r3, r2
    48da:	d14c      	bne.n	4976 <_usart_set_config+0x10a>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    48dc:	683b      	ldr	r3, [r7, #0]
    48de:	7ddb      	ldrb	r3, [r3, #23]
    48e0:	2201      	movs	r2, #1
    48e2:	4053      	eors	r3, r2
    48e4:	b2db      	uxtb	r3, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	d013      	beq.n	4912 <_usart_set_config+0xa6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    48ea:	683b      	ldr	r3, [r7, #0]
    48ec:	691d      	ldr	r5, [r3, #16]
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	b2db      	uxtb	r3, r3
    48f2:	1c18      	adds	r0, r3, #0
    48f4:	4b51      	ldr	r3, [pc, #324]	; (4a3c <_usart_set_config+0x1d0>)
    48f6:	4798      	blx	r3
    48f8:	1c02      	adds	r2, r0, #0
    48fa:	1c3c      	adds	r4, r7, #0
    48fc:	341f      	adds	r4, #31
    48fe:	1c3b      	adds	r3, r7, #0
    4900:	330c      	adds	r3, #12
    4902:	1c28      	adds	r0, r5, #0
    4904:	1c11      	adds	r1, r2, #0
    4906:	1c1a      	adds	r2, r3, #0
    4908:	4b4d      	ldr	r3, [pc, #308]	; (4a40 <_usart_set_config+0x1d4>)
    490a:	4798      	blx	r3
    490c:	1c03      	adds	r3, r0, #0
    490e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4910:	e031      	b.n	4976 <_usart_set_config+0x10a>
    4912:	e030      	b.n	4976 <_usart_set_config+0x10a>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4914:	683b      	ldr	r3, [r7, #0]
    4916:	7ddb      	ldrb	r3, [r3, #23]
    4918:	2b00      	cmp	r3, #0
    491a:	d013      	beq.n	4944 <_usart_set_config+0xd8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	6918      	ldr	r0, [r3, #16]
    4920:	683b      	ldr	r3, [r7, #0]
    4922:	6999      	ldr	r1, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    4924:	1c3c      	adds	r4, r7, #0
    4926:	341f      	adds	r4, #31
    4928:	1c3a      	adds	r2, r7, #0
    492a:	320c      	adds	r2, #12
    492c:	1c3b      	adds	r3, r7, #0
    492e:	330f      	adds	r3, #15
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	1c3d      	adds	r5, r7, #0
    4934:	350e      	adds	r5, #14
    4936:	782d      	ldrb	r5, [r5, #0]
    4938:	9500      	str	r5, [sp, #0]
    493a:	4d42      	ldr	r5, [pc, #264]	; (4a44 <_usart_set_config+0x1d8>)
    493c:	47a8      	blx	r5
    493e:	1c03      	adds	r3, r0, #0
    4940:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4942:	e017      	b.n	4974 <_usart_set_config+0x108>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4944:	683b      	ldr	r3, [r7, #0]
    4946:	691d      	ldr	r5, [r3, #16]
    4948:	693b      	ldr	r3, [r7, #16]
    494a:	b2db      	uxtb	r3, r3
    494c:	1c18      	adds	r0, r3, #0
    494e:	4b3b      	ldr	r3, [pc, #236]	; (4a3c <_usart_set_config+0x1d0>)
    4950:	4798      	blx	r3
    4952:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4954:	1c3c      	adds	r4, r7, #0
    4956:	341f      	adds	r4, #31
    4958:	1c3a      	adds	r2, r7, #0
    495a:	320c      	adds	r2, #12
    495c:	1c3b      	adds	r3, r7, #0
    495e:	330f      	adds	r3, #15
    4960:	781b      	ldrb	r3, [r3, #0]
    4962:	1c38      	adds	r0, r7, #0
    4964:	300e      	adds	r0, #14
    4966:	7800      	ldrb	r0, [r0, #0]
    4968:	9000      	str	r0, [sp, #0]
    496a:	1c28      	adds	r0, r5, #0
    496c:	4d35      	ldr	r5, [pc, #212]	; (4a44 <_usart_set_config+0x1d8>)
    496e:	47a8      	blx	r5
    4970:	1c03      	adds	r3, r0, #0
    4972:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4974:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4976:	1c3b      	adds	r3, r7, #0
    4978:	331f      	adds	r3, #31
    497a:	781b      	ldrb	r3, [r3, #0]
    497c:	2b00      	cmp	r3, #0
    497e:	d003      	beq.n	4988 <_usart_set_config+0x11c>
		/* Abort */
		return status_code;
    4980:	1c3b      	adds	r3, r7, #0
    4982:	331f      	adds	r3, #31
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	e052      	b.n	4a2e <_usart_set_config+0x1c2>
		usart_hw->RXPL.reg = config->receive_pulse_length;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	1c18      	adds	r0, r3, #0
    498c:	4b2e      	ldr	r3, [pc, #184]	; (4a48 <_usart_set_config+0x1dc>)
    498e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4990:	1c3b      	adds	r3, r7, #0
    4992:	330c      	adds	r3, #12
    4994:	881a      	ldrh	r2, [r3, #0]
    4996:	69bb      	ldr	r3, [r7, #24]
    4998:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	685b      	ldr	r3, [r3, #4]
    499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    49a0:	4313      	orrs	r3, r2
    49a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	7ddb      	ldrb	r3, [r3, #23]
    49a8:	2201      	movs	r2, #1
    49aa:	4053      	eors	r3, r2
    49ac:	b2db      	uxtb	r3, r3
    49ae:	2b00      	cmp	r3, #0
    49b0:	d003      	beq.n	49ba <_usart_set_config+0x14e>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    49b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b4:	2204      	movs	r2, #4
    49b6:	4313      	orrs	r3, r2
    49b8:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	7a9a      	ldrb	r2, [r3, #10]
    49be:	683b      	ldr	r3, [r7, #0]
    49c0:	7adb      	ldrb	r3, [r3, #11]
    49c2:	4313      	orrs	r3, r2
    49c4:	b2db      	uxtb	r3, r3
    49c6:	1c1a      	adds	r2, r3, #0
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    49c8:	683b      	ldr	r3, [r7, #0]
    49ca:	7d1b      	ldrb	r3, [r3, #20]
    49cc:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ce:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    49d0:	683b      	ldr	r3, [r7, #0]
    49d2:	7d5b      	ldrb	r3, [r3, #21]
    49d4:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49d6:	4313      	orrs	r3, r2
    49d8:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    49da:	683b      	ldr	r3, [r7, #0]
    49dc:	891b      	ldrh	r3, [r3, #8]
    49de:	2bff      	cmp	r3, #255	; 0xff
    49e0:	d009      	beq.n	49f6 <_usart_set_config+0x18a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    49e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49e4:	2280      	movs	r2, #128	; 0x80
    49e6:	0452      	lsls	r2, r2, #17
    49e8:	4313      	orrs	r3, r2
    49ea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
		ctrlb |= config->parity;
    49ec:	683b      	ldr	r3, [r7, #0]
    49ee:	891b      	ldrh	r3, [r3, #8]
    49f0:	6a3a      	ldr	r2, [r7, #32]
    49f2:	4313      	orrs	r3, r2
    49f4:	623b      	str	r3, [r7, #32]
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    49f6:	683b      	ldr	r3, [r7, #0]
    49f8:	7f1b      	ldrb	r3, [r3, #28]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d104      	bne.n	4a08 <_usart_set_config+0x19c>
    49fe:	4b13      	ldr	r3, [pc, #76]	; (4a4c <_usart_set_config+0x1e0>)
    4a00:	4798      	blx	r3
    4a02:	1c03      	adds	r3, r0, #0
    4a04:	2b00      	cmp	r3, #0
    4a06:	d003      	beq.n	4a10 <_usart_set_config+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a0a:	2280      	movs	r2, #128	; 0x80
    4a0c:	4313      	orrs	r3, r2
    4a0e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	1c18      	adds	r0, r3, #0
    4a14:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <_usart_set_config+0x1dc>)
    4a16:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4a18:	69bb      	ldr	r3, [r7, #24]
    4a1a:	6a3a      	ldr	r2, [r7, #32]
    4a1c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	1c18      	adds	r0, r3, #0
    4a22:	4b09      	ldr	r3, [pc, #36]	; (4a48 <_usart_set_config+0x1dc>)
    4a24:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4a26:	69bb      	ldr	r3, [r7, #24]
    4a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a2a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4a2c:	2300      	movs	r3, #0
}
    4a2e:	1c18      	adds	r0, r3, #0
    4a30:	46bd      	mov	sp, r7
    4a32:	b00a      	add	sp, #40	; 0x28
    4a34:	bdb0      	pop	{r4, r5, r7, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	000129ad 	.word	0x000129ad
    4a3c:	000141a1 	.word	0x000141a1
    4a40:	0001253d 	.word	0x0001253d
    4a44:	000125a1 	.word	0x000125a1
    4a48:	00004849 	.word	0x00004849
    4a4c:	000047fd 	.word	0x000047fd

00004a50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4a50:	b590      	push	{r4, r7, lr}
    4a52:	b093      	sub	sp, #76	; 0x4c
    4a54:	af00      	add	r7, sp, #0
    4a56:	60f8      	str	r0, [r7, #12]
    4a58:	60b9      	str	r1, [r7, #8]
    4a5a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4a5c:	1c3b      	adds	r3, r7, #0
    4a5e:	333b      	adds	r3, #59	; 0x3b
    4a60:	2200      	movs	r2, #0
    4a62:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	68ba      	ldr	r2, [r7, #8]
    4a68:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	1c18      	adds	r0, r3, #0
    4a76:	4b7f      	ldr	r3, [pc, #508]	; (4c74 <usart_init+0x224>)
    4a78:	4798      	blx	r3
    4a7a:	1c03      	adds	r3, r0, #0
    4a7c:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a80:	3302      	adds	r3, #2
    4a82:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a86:	330d      	adds	r3, #13
    4a88:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a8c:	681a      	ldr	r2, [r3, #0]
    4a8e:	2301      	movs	r3, #1
    4a90:	4013      	ands	r3, r2
    4a92:	d001      	beq.n	4a98 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4a94:	2305      	movs	r3, #5
    4a96:	e0e9      	b.n	4c6c <usart_init+0x21c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a9a:	681a      	ldr	r2, [r3, #0]
    4a9c:	2302      	movs	r3, #2
    4a9e:	4013      	ands	r3, r2
    4aa0:	d001      	beq.n	4aa6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4aa2:	231c      	movs	r3, #28
    4aa4:	e0e2      	b.n	4c6c <usart_init+0x21c>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4aa8:	2201      	movs	r2, #1
    4aaa:	1c11      	adds	r1, r2, #0
    4aac:	4099      	lsls	r1, r3
    4aae:	1c0b      	adds	r3, r1, #0
    4ab0:	2002      	movs	r0, #2
    4ab2:	1c19      	adds	r1, r3, #0
    4ab4:	4b70      	ldr	r3, [pc, #448]	; (4c78 <usart_init+0x228>)
    4ab6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4ab8:	1c3b      	adds	r3, r7, #0
    4aba:	3324      	adds	r3, #36	; 0x24
    4abc:	1c18      	adds	r0, r3, #0
    4abe:	4b6f      	ldr	r3, [pc, #444]	; (4c7c <usart_init+0x22c>)
    4ac0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	7f5a      	ldrb	r2, [r3, #29]
    4ac6:	1c3b      	adds	r3, r7, #0
    4ac8:	3324      	adds	r3, #36	; 0x24
    4aca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ace:	b2da      	uxtb	r2, r3
    4ad0:	1c3b      	adds	r3, r7, #0
    4ad2:	3324      	adds	r3, #36	; 0x24
    4ad4:	1c10      	adds	r0, r2, #0
    4ad6:	1c19      	adds	r1, r3, #0
    4ad8:	4b69      	ldr	r3, [pc, #420]	; (4c80 <usart_init+0x230>)
    4ada:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ade:	b2db      	uxtb	r3, r3
    4ae0:	1c18      	adds	r0, r3, #0
    4ae2:	4b68      	ldr	r3, [pc, #416]	; (4c84 <usart_init+0x234>)
    4ae4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	7f5b      	ldrb	r3, [r3, #29]
    4aea:	1c18      	adds	r0, r3, #0
    4aec:	2100      	movs	r1, #0
    4aee:	4b66      	ldr	r3, [pc, #408]	; (4c88 <usart_init+0x238>)
    4af0:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	7ada      	ldrb	r2, [r3, #11]
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	7d1a      	ldrb	r2, [r3, #20]
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	7d5a      	ldrb	r2, [r3, #21]
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	71da      	strb	r2, [r3, #7]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4b0a:	1c3c      	adds	r4, r7, #0
    4b0c:	343b      	adds	r4, #59	; 0x3b
    4b0e:	68fa      	ldr	r2, [r7, #12]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	1c10      	adds	r0, r2, #0
    4b14:	1c19      	adds	r1, r3, #0
    4b16:	4b5d      	ldr	r3, [pc, #372]	; (4c8c <usart_init+0x23c>)
    4b18:	4798      	blx	r3
    4b1a:	1c03      	adds	r3, r0, #0
    4b1c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4b1e:	1c3b      	adds	r3, r7, #0
    4b20:	333b      	adds	r3, #59	; 0x3b
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d003      	beq.n	4b30 <usart_init+0xe0>
		return status_code;
    4b28:	1c3b      	adds	r3, r7, #0
    4b2a:	333b      	adds	r3, #59	; 0x3b
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	e09d      	b.n	4c6c <usart_init+0x21c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4b30:	1c3b      	adds	r3, r7, #0
    4b32:	3320      	adds	r3, #32
    4b34:	1c18      	adds	r0, r3, #0
    4b36:	4b56      	ldr	r3, [pc, #344]	; (4c90 <usart_init+0x240>)
    4b38:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b3a:	1c3b      	adds	r3, r7, #0
    4b3c:	3320      	adds	r3, #32
    4b3e:	2200      	movs	r2, #0
    4b40:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b42:	1c3b      	adds	r3, r7, #0
    4b44:	3320      	adds	r3, #32
    4b46:	2200      	movs	r2, #0
    4b48:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4b4a:	687b      	ldr	r3, [r7, #4]
    4b4c:	6a1a      	ldr	r2, [r3, #32]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b4e:	1c3b      	adds	r3, r7, #0
    4b50:	3310      	adds	r3, #16
    4b52:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b58:	1c3b      	adds	r3, r7, #0
    4b5a:	3310      	adds	r3, #16
    4b5c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b62:	1c3b      	adds	r3, r7, #0
    4b64:	3310      	adds	r3, #16
    4b66:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b6c:	1c3b      	adds	r3, r7, #0
    4b6e:	3310      	adds	r3, #16
    4b70:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4b72:	1c3b      	adds	r3, r7, #0
    4b74:	3347      	adds	r3, #71	; 0x47
    4b76:	2200      	movs	r2, #0
    4b78:	701a      	strb	r2, [r3, #0]
    4b7a:	e02c      	b.n	4bd6 <usart_init+0x186>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b7c:	1c3b      	adds	r3, r7, #0
    4b7e:	3347      	adds	r3, #71	; 0x47
    4b80:	781a      	ldrb	r2, [r3, #0]
    4b82:	1c3b      	adds	r3, r7, #0
    4b84:	3310      	adds	r3, #16
    4b86:	0092      	lsls	r2, r2, #2
    4b88:	58d3      	ldr	r3, [r2, r3]
    4b8a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d109      	bne.n	4ba6 <usart_init+0x156>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4b92:	68ba      	ldr	r2, [r7, #8]
    4b94:	1c3b      	adds	r3, r7, #0
    4b96:	3347      	adds	r3, #71	; 0x47
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	1c10      	adds	r0, r2, #0
    4b9c:	1c19      	adds	r1, r3, #0
    4b9e:	4b3d      	ldr	r3, [pc, #244]	; (4c94 <usart_init+0x244>)
    4ba0:	4798      	blx	r3
    4ba2:	1c03      	adds	r3, r0, #0
    4ba4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ba8:	3301      	adds	r3, #1
    4baa:	d00d      	beq.n	4bc8 <usart_init+0x178>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	1c3b      	adds	r3, r7, #0
    4bb2:	3320      	adds	r3, #32
    4bb4:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bb8:	0c1b      	lsrs	r3, r3, #16
    4bba:	b2da      	uxtb	r2, r3
    4bbc:	1c3b      	adds	r3, r7, #0
    4bbe:	3320      	adds	r3, #32
    4bc0:	1c10      	adds	r0, r2, #0
    4bc2:	1c19      	adds	r1, r3, #0
    4bc4:	4b34      	ldr	r3, [pc, #208]	; (4c98 <usart_init+0x248>)
    4bc6:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4bc8:	1c3b      	adds	r3, r7, #0
    4bca:	3347      	adds	r3, #71	; 0x47
    4bcc:	781a      	ldrb	r2, [r3, #0]
    4bce:	1c3b      	adds	r3, r7, #0
    4bd0:	3347      	adds	r3, #71	; 0x47
    4bd2:	3201      	adds	r2, #1
    4bd4:	701a      	strb	r2, [r3, #0]
    4bd6:	1c3b      	adds	r3, r7, #0
    4bd8:	3347      	adds	r3, #71	; 0x47
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	2b03      	cmp	r3, #3
    4bde:	d9cd      	bls.n	4b7c <usart_init+0x12c>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4be0:	2300      	movs	r3, #0
    4be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    4be4:	e008      	b.n	4bf8 <usart_init+0x1a8>
		module->callback[i]            = NULL;
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4bea:	3202      	adds	r2, #2
    4bec:	0092      	lsls	r2, r2, #2
    4bee:	2100      	movs	r1, #0
    4bf0:	50d1      	str	r1, [r2, r3]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bf4:	3301      	adds	r3, #1
    4bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    4bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d9f3      	bls.n	4be6 <usart_init+0x196>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	2200      	movs	r2, #0
    4c02:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	2200      	movs	r2, #0
    4c08:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	2200      	movs	r2, #0
    4c0e:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	2200      	movs	r2, #0
    4c14:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	2320      	movs	r3, #32
    4c1a:	2100      	movs	r1, #0
    4c1c:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    4c1e:	68fa      	ldr	r2, [r7, #12]
    4c20:	2321      	movs	r3, #33	; 0x21
    4c22:	2100      	movs	r1, #0
    4c24:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    4c26:	68fa      	ldr	r2, [r7, #12]
    4c28:	2322      	movs	r3, #34	; 0x22
    4c2a:	2100      	movs	r1, #0
    4c2c:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    4c2e:	68fa      	ldr	r2, [r7, #12]
    4c30:	2323      	movs	r3, #35	; 0x23
    4c32:	2100      	movs	r1, #0
    4c34:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	1c3c      	adds	r4, r7, #0
    4c3c:	3427      	adds	r4, #39	; 0x27
    4c3e:	1c18      	adds	r0, r3, #0
    4c40:	4b0c      	ldr	r3, [pc, #48]	; (4c74 <usart_init+0x224>)
    4c42:	4798      	blx	r3
    4c44:	1c03      	adds	r3, r0, #0
    4c46:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4c48:	1c3b      	adds	r3, r7, #0
    4c4a:	3327      	adds	r3, #39	; 0x27
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4b13      	ldr	r3, [pc, #76]	; (4c9c <usart_init+0x24c>)
    4c50:	1c10      	adds	r0, r2, #0
    4c52:	1c19      	adds	r1, r3, #0
    4c54:	4b12      	ldr	r3, [pc, #72]	; (4ca0 <usart_init+0x250>)
    4c56:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4c58:	1c3b      	adds	r3, r7, #0
    4c5a:	3327      	adds	r3, #39	; 0x27
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	4b11      	ldr	r3, [pc, #68]	; (4ca4 <usart_init+0x254>)
    4c60:	0092      	lsls	r2, r2, #2
    4c62:	68f9      	ldr	r1, [r7, #12]
    4c64:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4c66:	1c3b      	adds	r3, r7, #0
    4c68:	333b      	adds	r3, #59	; 0x3b
    4c6a:	781b      	ldrb	r3, [r3, #0]
}
    4c6c:	1c18      	adds	r0, r3, #0
    4c6e:	46bd      	mov	sp, r7
    4c70:	b013      	add	sp, #76	; 0x4c
    4c72:	bd90      	pop	{r4, r7, pc}
    4c74:	000129ad 	.word	0x000129ad
    4c78:	00004779 	.word	0x00004779
    4c7c:	00004765 	.word	0x00004765
    4c80:	00014041 	.word	0x00014041
    4c84:	00014081 	.word	0x00014081
    4c88:	00012751 	.word	0x00012751
    4c8c:	0000486d 	.word	0x0000486d
    4c90:	000047d5 	.word	0x000047d5
    4c94:	000127dd 	.word	0x000127dd
    4c98:	00014361 	.word	0x00014361
    4c9c:	00004e89 	.word	0x00004e89
    4ca0:	000129f9 	.word	0x000129f9
    4ca4:	2000398c 	.word	0x2000398c

00004ca8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b084      	sub	sp, #16
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	681b      	ldr	r3, [r3, #0]
    4cb4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	8a1b      	ldrh	r3, [r3, #16]
    4cba:	b29b      	uxth	r3, r3
    4cbc:	1c1a      	adds	r2, r3, #0
    4cbe:	2380      	movs	r3, #128	; 0x80
    4cc0:	021b      	lsls	r3, r3, #8
    4cc2:	4013      	ands	r3, r2
    4cc4:	1e5a      	subs	r2, r3, #1
    4cc6:	4193      	sbcs	r3, r2
    4cc8:	b2db      	uxtb	r3, r3
#endif
}
    4cca:	1c18      	adds	r0, r3, #0
    4ccc:	46bd      	mov	sp, r7
    4cce:	b004      	add	sp, #16
    4cd0:	bd80      	pop	{r7, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4cdc:	46c0      	nop			; (mov r8, r8)
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	1c18      	adds	r0, r3, #0
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <_usart_wait_for_sync+0x20>)
    4ce4:	4798      	blx	r3
    4ce6:	1c03      	adds	r3, r0, #0
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d1f8      	bne.n	4cde <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4cec:	46bd      	mov	sp, r7
    4cee:	b002      	add	sp, #8
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	00004ca9 	.word	0x00004ca9

00004cf8 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b086      	sub	sp, #24
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	60f8      	str	r0, [r7, #12]
    4d00:	60b9      	str	r1, [r7, #8]
    4d02:	1dbb      	adds	r3, r7, #6
    4d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d06:	68fb      	ldr	r3, [r7, #12]
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	617b      	str	r3, [r7, #20]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    4d0c:	68fb      	ldr	r3, [r7, #12]
    4d0e:	1dba      	adds	r2, r7, #6
    4d10:	8812      	ldrh	r2, [r2, #0]
    4d12:	83da      	strh	r2, [r3, #30]
	module->tx_buffer_ptr              = tx_data;
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	68ba      	ldr	r2, [r7, #8]
    4d18:	619a      	str	r2, [r3, #24]
	module->tx_status                  = STATUS_BUSY;
    4d1a:	68fa      	ldr	r2, [r7, #12]
    4d1c:	2323      	movs	r3, #35	; 0x23
    4d1e:	2105      	movs	r1, #5
    4d20:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    4d22:	697b      	ldr	r3, [r7, #20]
    4d24:	2201      	movs	r2, #1
    4d26:	735a      	strb	r2, [r3, #13]
}
    4d28:	46bd      	mov	sp, r7
    4d2a:	b006      	add	sp, #24
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)

00004d30 <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b086      	sub	sp, #24
    4d34:	af00      	add	r7, sp, #0
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	60b9      	str	r1, [r7, #8]
    4d3a:	1dbb      	adds	r3, r7, #6
    4d3c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	1dba      	adds	r2, r7, #6
    4d48:	8812      	ldrh	r2, [r2, #0]
    4d4a:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr              = rx_data;
    4d4c:	68fb      	ldr	r3, [r7, #12]
    4d4e:	68ba      	ldr	r2, [r7, #8]
    4d50:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
    4d52:	68fa      	ldr	r2, [r7, #12]
    4d54:	2322      	movs	r3, #34	; 0x22
    4d56:	2105      	movs	r1, #5
    4d58:	54d1      	strb	r1, [r2, r3]
	//EMH 
	module->rxBufferCount = 0; 
    4d5a:	68fb      	ldr	r3, [r7, #12]
    4d5c:	2200      	movs	r2, #0
    4d5e:	84da      	strh	r2, [r3, #38]	; 0x26
	module->rxBufferPreviousByte = 0; 
    4d60:	68fa      	ldr	r2, [r7, #12]
    4d62:	232e      	movs	r3, #46	; 0x2e
    4d64:	2100      	movs	r1, #0
    4d66:	54d1      	strb	r1, [r2, r3]
	module->rxBufferBase = rx_data;
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	68ba      	ldr	r2, [r7, #8]
    4d6c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rxBufferMaxLength = length; 
    4d6e:	68fb      	ldr	r3, [r7, #12]
    4d70:	1dba      	adds	r2, r7, #6
    4d72:	8812      	ldrh	r2, [r2, #0]
    4d74:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->rxGotStartByte = 0; 
    4d76:	68fa      	ldr	r2, [r7, #12]
    4d78:	2324      	movs	r3, #36	; 0x24
    4d7a:	2100      	movs	r1, #0
    4d7c:	54d1      	strb	r1, [r2, r3]
	
	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4d7e:	697b      	ldr	r3, [r7, #20]
    4d80:	2204      	movs	r2, #4
    4d82:	735a      	strb	r2, [r3, #13]
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif
}
    4d84:	46bd      	mov	sp, r7
    4d86:	b006      	add	sp, #24
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	46c0      	nop			; (mov r8, r8)

00004d8c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b084      	sub	sp, #16
    4d90:	af00      	add	r7, sp, #0
    4d92:	60f8      	str	r0, [r7, #12]
    4d94:	60b9      	str	r1, [r7, #8]
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4d9a:	1dfb      	adds	r3, r7, #7
    4d9c:	781a      	ldrb	r2, [r3, #0]
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	3202      	adds	r2, #2
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	68b9      	ldr	r1, [r7, #8]
    4da6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4da8:	68fa      	ldr	r2, [r7, #12]
    4daa:	2320      	movs	r3, #32
    4dac:	5cd3      	ldrb	r3, [r2, r3]
    4dae:	b2da      	uxtb	r2, r3
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	2101      	movs	r1, #1
    4db6:	1c08      	adds	r0, r1, #0
    4db8:	4098      	lsls	r0, r3
    4dba:	1c03      	adds	r3, r0, #0
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	4313      	orrs	r3, r2
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	b2d9      	uxtb	r1, r3
    4dc4:	68fa      	ldr	r2, [r7, #12]
    4dc6:	2320      	movs	r3, #32
    4dc8:	54d1      	strb	r1, [r2, r3]
}
    4dca:	46bd      	mov	sp, r7
    4dcc:	b004      	add	sp, #16
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b084      	sub	sp, #16
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	60f8      	str	r0, [r7, #12]
    4dd8:	60b9      	str	r1, [r7, #8]
    4dda:	1dbb      	adds	r3, r7, #6
    4ddc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    4dde:	1dbb      	adds	r3, r7, #6
    4de0:	881b      	ldrh	r3, [r3, #0]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d101      	bne.n	4dea <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4de6:	2317      	movs	r3, #23
    4de8:	e019      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    4dea:	68fb      	ldr	r3, [r7, #12]
    4dec:	8bdb      	ldrh	r3, [r3, #30]
    4dee:	b29b      	uxth	r3, r3
    4df0:	2b00      	cmp	r3, #0
    4df2:	d001      	beq.n	4df8 <usart_write_buffer_job+0x28>
		return STATUS_BUSY;
    4df4:	2305      	movs	r3, #5
    4df6:	e012      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	79db      	ldrb	r3, [r3, #7]
    4dfc:	2201      	movs	r2, #1
    4dfe:	4053      	eors	r3, r2
    4e00:	b2db      	uxtb	r3, r3
    4e02:	2b00      	cmp	r3, #0
    4e04:	d001      	beq.n	4e0a <usart_write_buffer_job+0x3a>
		return STATUS_ERR_DENIED;
    4e06:	231c      	movs	r3, #28
    4e08:	e009      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    4e0a:	68f9      	ldr	r1, [r7, #12]
    4e0c:	68ba      	ldr	r2, [r7, #8]
    4e0e:	1dbb      	adds	r3, r7, #6
    4e10:	881b      	ldrh	r3, [r3, #0]
    4e12:	1c08      	adds	r0, r1, #0
    4e14:	1c11      	adds	r1, r2, #0
    4e16:	1c1a      	adds	r2, r3, #0
    4e18:	4b03      	ldr	r3, [pc, #12]	; (4e28 <usart_write_buffer_job+0x58>)
    4e1a:	4798      	blx	r3

	return STATUS_OK;
    4e1c:	2300      	movs	r3, #0
}
    4e1e:	1c18      	adds	r0, r3, #0
    4e20:	46bd      	mov	sp, r7
    4e22:	b004      	add	sp, #16
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	00004cf9 	.word	0x00004cf9

00004e2c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	60f8      	str	r0, [r7, #12]
    4e34:	60b9      	str	r1, [r7, #8]
    4e36:	1dbb      	adds	r3, r7, #6
    4e38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    4e3a:	1dbb      	adds	r3, r7, #6
    4e3c:	881b      	ldrh	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d101      	bne.n	4e46 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4e42:	2317      	movs	r3, #23
    4e44:	e019      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4e46:	68fb      	ldr	r3, [r7, #12]
    4e48:	799b      	ldrb	r3, [r3, #6]
    4e4a:	2201      	movs	r2, #1
    4e4c:	4053      	eors	r3, r2
    4e4e:	b2db      	uxtb	r3, r3
    4e50:	2b00      	cmp	r3, #0
    4e52:	d001      	beq.n	4e58 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    4e54:	231c      	movs	r3, #28
    4e56:	e010      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	8b9b      	ldrh	r3, [r3, #28]
    4e5c:	b29b      	uxth	r3, r3
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d001      	beq.n	4e66 <usart_read_buffer_job+0x3a>
		return STATUS_BUSY;
    4e62:	2305      	movs	r3, #5
    4e64:	e009      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    4e66:	68f9      	ldr	r1, [r7, #12]
    4e68:	68ba      	ldr	r2, [r7, #8]
    4e6a:	1dbb      	adds	r3, r7, #6
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	1c08      	adds	r0, r1, #0
    4e70:	1c11      	adds	r1, r2, #0
    4e72:	1c1a      	adds	r2, r3, #0
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <usart_read_buffer_job+0x58>)
    4e76:	4798      	blx	r3

	return STATUS_OK;
    4e78:	2300      	movs	r3, #0
}
    4e7a:	1c18      	adds	r0, r3, #0
    4e7c:	46bd      	mov	sp, r7
    4e7e:	b004      	add	sp, #16
    4e80:	bd80      	pop	{r7, pc}
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	00004d31 	.word	0x00004d31

00004e88 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b088      	sub	sp, #32
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	1c02      	adds	r2, r0, #0
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    4e94:	1dfb      	adds	r3, r7, #7
    4e96:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4e98:	4bc4      	ldr	r3, [pc, #784]	; (51ac <_usart_interrupt_handler+0x324>)
    4e9a:	0092      	lsls	r2, r2, #2
    4e9c:	58d3      	ldr	r3, [r2, r3]
    4e9e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4ea0:	69bb      	ldr	r3, [r7, #24]
    4ea2:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    4ea4:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4ea6:	69bb      	ldr	r3, [r7, #24]
    4ea8:	1c18      	adds	r0, r3, #0
    4eaa:	4bc1      	ldr	r3, [pc, #772]	; (51b0 <_usart_interrupt_handler+0x328>)
    4eac:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4eae:	697b      	ldr	r3, [r7, #20]
    4eb0:	7b9b      	ldrb	r3, [r3, #14]
    4eb2:	b2da      	uxtb	r2, r3
    4eb4:	1c3b      	adds	r3, r7, #0
    4eb6:	3312      	adds	r3, #18
    4eb8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    4eba:	697b      	ldr	r3, [r7, #20]
    4ebc:	7b5b      	ldrb	r3, [r3, #13]
    4ebe:	b2db      	uxtb	r3, r3
    4ec0:	1c1a      	adds	r2, r3, #0
    4ec2:	1c3b      	adds	r3, r7, #0
    4ec4:	3312      	adds	r3, #18
    4ec6:	1c39      	adds	r1, r7, #0
    4ec8:	3112      	adds	r1, #18
    4eca:	8809      	ldrh	r1, [r1, #0]
    4ecc:	400a      	ands	r2, r1
    4ece:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4ed0:	69ba      	ldr	r2, [r7, #24]
    4ed2:	2320      	movs	r3, #32
    4ed4:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    4ed6:	69b9      	ldr	r1, [r7, #24]
    4ed8:	2221      	movs	r2, #33	; 0x21
    4eda:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4edc:	4013      	ands	r3, r2
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	1c3b      	adds	r3, r7, #0
    4ee2:	3310      	adds	r3, #16
    4ee4:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4ee6:	1c3b      	adds	r3, r7, #0
    4ee8:	3312      	adds	r3, #18
    4eea:	881a      	ldrh	r2, [r3, #0]
    4eec:	2301      	movs	r3, #1
    4eee:	4013      	ands	r3, r2
    4ef0:	d044      	beq.n	4f7c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4ef2:	69bb      	ldr	r3, [r7, #24]
    4ef4:	8bdb      	ldrh	r3, [r3, #30]
    4ef6:	b29b      	uxth	r3, r3
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d03c      	beq.n	4f76 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4efc:	69bb      	ldr	r3, [r7, #24]
    4efe:	699b      	ldr	r3, [r3, #24]
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2da      	uxtb	r2, r3
    4f04:	1c3b      	adds	r3, r7, #0
    4f06:	331e      	adds	r3, #30
    4f08:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4f0a:	69bb      	ldr	r3, [r7, #24]
    4f0c:	699b      	ldr	r3, [r3, #24]
    4f0e:	1c5a      	adds	r2, r3, #1
    4f10:	69bb      	ldr	r3, [r7, #24]
    4f12:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4f14:	69bb      	ldr	r3, [r7, #24]
    4f16:	795b      	ldrb	r3, [r3, #5]
    4f18:	2b01      	cmp	r3, #1
    4f1a:	d112      	bne.n	4f42 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4f1c:	69bb      	ldr	r3, [r7, #24]
    4f1e:	699b      	ldr	r3, [r3, #24]
    4f20:	781b      	ldrb	r3, [r3, #0]
    4f22:	b2db      	uxtb	r3, r3
    4f24:	021b      	lsls	r3, r3, #8
    4f26:	b29a      	uxth	r2, r3
    4f28:	1c3b      	adds	r3, r7, #0
    4f2a:	331e      	adds	r3, #30
    4f2c:	881b      	ldrh	r3, [r3, #0]
    4f2e:	4313      	orrs	r3, r2
    4f30:	b29a      	uxth	r2, r3
    4f32:	1c3b      	adds	r3, r7, #0
    4f34:	331e      	adds	r3, #30
    4f36:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4f38:	69bb      	ldr	r3, [r7, #24]
    4f3a:	699b      	ldr	r3, [r3, #24]
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	69bb      	ldr	r3, [r7, #24]
    4f40:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4f42:	1c3b      	adds	r3, r7, #0
    4f44:	331e      	adds	r3, #30
    4f46:	881b      	ldrh	r3, [r3, #0]
    4f48:	05db      	lsls	r3, r3, #23
    4f4a:	0ddb      	lsrs	r3, r3, #23
    4f4c:	b29a      	uxth	r2, r3
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    4f52:	69bb      	ldr	r3, [r7, #24]
    4f54:	8bdb      	ldrh	r3, [r3, #30]
    4f56:	b29b      	uxth	r3, r3
    4f58:	3b01      	subs	r3, #1
    4f5a:	b29b      	uxth	r3, r3
    4f5c:	69ba      	ldr	r2, [r7, #24]
    4f5e:	1c19      	adds	r1, r3, #0
    4f60:	83d1      	strh	r1, [r2, #30]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d106      	bne.n	4f74 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f66:	697b      	ldr	r3, [r7, #20]
    4f68:	2201      	movs	r2, #1
    4f6a:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4f6c:	697b      	ldr	r3, [r7, #20]
    4f6e:	2202      	movs	r2, #2
    4f70:	735a      	strb	r2, [r3, #13]
    4f72:	e003      	b.n	4f7c <_usart_interrupt_handler+0xf4>
    4f74:	e002      	b.n	4f7c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f76:	697b      	ldr	r3, [r7, #20]
    4f78:	2201      	movs	r2, #1
    4f7a:	731a      	strb	r2, [r3, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4f7c:	1c3b      	adds	r3, r7, #0
    4f7e:	3312      	adds	r3, #18
    4f80:	881a      	ldrh	r2, [r3, #0]
    4f82:	2302      	movs	r3, #2
    4f84:	4013      	ands	r3, r2
    4f86:	d011      	beq.n	4fac <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	2202      	movs	r2, #2
    4f8c:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
    4f8e:	69ba      	ldr	r2, [r7, #24]
    4f90:	2323      	movs	r3, #35	; 0x23
    4f92:	2100      	movs	r1, #0
    4f94:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4f96:	1c3b      	adds	r3, r7, #0
    4f98:	3310      	adds	r3, #16
    4f9a:	881a      	ldrh	r2, [r3, #0]
    4f9c:	2301      	movs	r3, #1
    4f9e:	4013      	ands	r3, r2
    4fa0:	d004      	beq.n	4fac <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4fa2:	69bb      	ldr	r3, [r7, #24]
    4fa4:	689b      	ldr	r3, [r3, #8]
    4fa6:	69ba      	ldr	r2, [r7, #24]
    4fa8:	1c10      	adds	r0, r2, #0
    4faa:	4798      	blx	r3
	 * there's more data to receive */
	}
	//------------------------------------------------------
	// RECEIVE INTERRUPT OF THE USART. 
	//------------------------------------------------------
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) 
    4fac:	1c3b      	adds	r3, r7, #0
    4fae:	3312      	adds	r3, #18
    4fb0:	881a      	ldrh	r2, [r3, #0]
    4fb2:	2304      	movs	r3, #4
    4fb4:	4013      	ands	r3, r2
    4fb6:	d100      	bne.n	4fba <_usart_interrupt_handler+0x132>
    4fb8:	e0ff      	b.n	51ba <_usart_interrupt_handler+0x332>
	{
		if (module->remaining_rx_buffer_length) 
    4fba:	69bb      	ldr	r3, [r7, #24]
    4fbc:	8b9b      	ldrh	r3, [r3, #28]
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d100      	bne.n	4fc6 <_usart_interrupt_handler+0x13e>
    4fc4:	e0f6      	b.n	51b4 <_usart_interrupt_handler+0x32c>
		{
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4fc6:	697b      	ldr	r3, [r7, #20]
    4fc8:	8a1b      	ldrh	r3, [r3, #16]
    4fca:	b29b      	uxth	r3, r3
    4fcc:	b2d9      	uxtb	r1, r3
    4fce:	1c3b      	adds	r3, r7, #0
    4fd0:	330f      	adds	r3, #15
    4fd2:	2207      	movs	r2, #7
    4fd4:	400a      	ands	r2, r1
    4fd6:	701a      	strb	r2, [r3, #0]
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    4fd8:	1c3b      	adds	r3, r7, #0
    4fda:	330f      	adds	r3, #15
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d044      	beq.n	506c <_usart_interrupt_handler+0x1e4>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4fe2:	1c3b      	adds	r3, r7, #0
    4fe4:	330f      	adds	r3, #15
    4fe6:	781a      	ldrb	r2, [r3, #0]
    4fe8:	2302      	movs	r3, #2
    4fea:	4013      	ands	r3, r2
    4fec:	d00c      	beq.n	5008 <_usart_interrupt_handler+0x180>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4fee:	69ba      	ldr	r2, [r7, #24]
    4ff0:	2322      	movs	r3, #34	; 0x22
    4ff2:	211a      	movs	r1, #26
    4ff4:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    4ff6:	697b      	ldr	r3, [r7, #20]
    4ff8:	8a1b      	ldrh	r3, [r3, #16]
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	2202      	movs	r2, #2
    4ffe:	4313      	orrs	r3, r2
    5000:	b29a      	uxth	r2, r3
    5002:	697b      	ldr	r3, [r7, #20]
    5004:	821a      	strh	r2, [r3, #16]
    5006:	e024      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5008:	1c3b      	adds	r3, r7, #0
    500a:	330f      	adds	r3, #15
    500c:	781a      	ldrb	r2, [r3, #0]
    500e:	2304      	movs	r3, #4
    5010:	4013      	ands	r3, r2
    5012:	d00c      	beq.n	502e <_usart_interrupt_handler+0x1a6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5014:	69ba      	ldr	r2, [r7, #24]
    5016:	2322      	movs	r3, #34	; 0x22
    5018:	211e      	movs	r1, #30
    501a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    501c:	697b      	ldr	r3, [r7, #20]
    501e:	8a1b      	ldrh	r3, [r3, #16]
    5020:	b29b      	uxth	r3, r3
    5022:	2204      	movs	r2, #4
    5024:	4313      	orrs	r3, r2
    5026:	b29a      	uxth	r2, r3
    5028:	697b      	ldr	r3, [r7, #20]
    502a:	821a      	strh	r2, [r3, #16]
    502c:	e011      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    502e:	1c3b      	adds	r3, r7, #0
    5030:	330f      	adds	r3, #15
    5032:	781a      	ldrb	r2, [r3, #0]
    5034:	2301      	movs	r3, #1
    5036:	4013      	ands	r3, r2
    5038:	d00b      	beq.n	5052 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    503a:	69ba      	ldr	r2, [r7, #24]
    503c:	2322      	movs	r3, #34	; 0x22
    503e:	2113      	movs	r1, #19
    5040:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5042:	697b      	ldr	r3, [r7, #20]
    5044:	8a1b      	ldrh	r3, [r3, #16]
    5046:	b29b      	uxth	r3, r3
    5048:	2201      	movs	r2, #1
    504a:	4313      	orrs	r3, r2
    504c:	b29a      	uxth	r2, r3
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	821a      	strh	r2, [r3, #16]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5052:	1c3b      	adds	r3, r7, #0
    5054:	3310      	adds	r3, #16
    5056:	881a      	ldrh	r2, [r3, #0]
    5058:	2304      	movs	r3, #4
    505a:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    505c:	d100      	bne.n	5060 <_usart_interrupt_handler+0x1d8>
    505e:	e0ac      	b.n	51ba <_usart_interrupt_handler+0x332>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5060:	69bb      	ldr	r3, [r7, #24]
    5062:	691b      	ldr	r3, [r3, #16]
    5064:	69ba      	ldr	r2, [r7, #24]
    5066:	1c10      	adds	r0, r2, #0
    5068:	4798      	blx	r3
    506a:	e0a6      	b.n	51ba <_usart_interrupt_handler+0x332>
			else 
			{

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    506c:	697b      	ldr	r3, [r7, #20]
    506e:	8b1b      	ldrh	r3, [r3, #24]
    5070:	b29a      	uxth	r2, r3
    5072:	1c3b      	adds	r3, r7, #0
    5074:	330c      	adds	r3, #12
    5076:	05d2      	lsls	r2, r2, #23
    5078:	0dd2      	lsrs	r2, r2, #23
    507a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    507c:	69bb      	ldr	r3, [r7, #24]
    507e:	695b      	ldr	r3, [r3, #20]
    5080:	1c3a      	adds	r2, r7, #0
    5082:	320c      	adds	r2, #12
    5084:	8812      	ldrh	r2, [r2, #0]
    5086:	b2d2      	uxtb	r2, r2
    5088:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    508a:	69bb      	ldr	r3, [r7, #24]
    508c:	695b      	ldr	r3, [r3, #20]
    508e:	1c5a      	adds	r2, r3, #1
    5090:	69bb      	ldr	r3, [r7, #24]
    5092:	615a      	str	r2, [r3, #20]
				module->rxBufferCount++;
    5094:	69bb      	ldr	r3, [r7, #24]
    5096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    5098:	b29b      	uxth	r3, r3
    509a:	3301      	adds	r3, #1
    509c:	b29a      	uxth	r2, r3
    509e:	69bb      	ldr	r3, [r7, #24]
    50a0:	84da      	strh	r2, [r3, #38]	; 0x26

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) 
    50a2:	69bb      	ldr	r3, [r7, #24]
    50a4:	8b9b      	ldrh	r3, [r3, #28]
    50a6:	b29b      	uxth	r3, r3
    50a8:	3b01      	subs	r3, #1
    50aa:	b29b      	uxth	r3, r3
    50ac:	69ba      	ldr	r2, [r7, #24]
    50ae:	1c19      	adds	r1, r3, #0
    50b0:	8391      	strh	r1, [r2, #28]
    50b2:	2b00      	cmp	r3, #0
    50b4:	d113      	bne.n	50de <_usart_interrupt_handler+0x256>
				{
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    50b6:	697b      	ldr	r3, [r7, #20]
    50b8:	2204      	movs	r2, #4
    50ba:	731a      	strb	r2, [r3, #12]
					module->rx_status = STATUS_OK;
    50bc:	69ba      	ldr	r2, [r7, #24]
    50be:	2322      	movs	r3, #34	; 0x22
    50c0:	2100      	movs	r1, #0
    50c2:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
    50c4:	1c3b      	adds	r3, r7, #0
    50c6:	3310      	adds	r3, #16
    50c8:	881a      	ldrh	r2, [r3, #0]
    50ca:	2302      	movs	r3, #2
    50cc:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    50ce:	d100      	bne.n	50d2 <_usart_interrupt_handler+0x24a>
    50d0:	e06b      	b.n	51aa <_usart_interrupt_handler+0x322>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
					{
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    50d2:	69bb      	ldr	r3, [r7, #24]
    50d4:	68db      	ldr	r3, [r3, #12]
    50d6:	69ba      	ldr	r2, [r7, #24]
    50d8:	1c10      	adds	r0, r2, #0
    50da:	4798      	blx	r3
    50dc:	e06d      	b.n	51ba <_usart_interrupt_handler+0x332>
					}
				}
				else
				{
					
					switch (module->rxBufferCount)
    50de:	69bb      	ldr	r3, [r7, #24]
    50e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    50e2:	b29b      	uxth	r3, r3
    50e4:	2b02      	cmp	r3, #2
    50e6:	d00e      	beq.n	5106 <_usart_interrupt_handler+0x27e>
    50e8:	2b03      	cmp	r3, #3
    50ea:	d027      	beq.n	513c <_usart_interrupt_handler+0x2b4>
    50ec:	2b01      	cmp	r3, #1
    50ee:	d154      	bne.n	519a <_usart_interrupt_handler+0x312>
					{
						case 1:
						{
							if (received_data == '#')
    50f0:	1c3b      	adds	r3, r7, #0
    50f2:	330c      	adds	r3, #12
    50f4:	881b      	ldrh	r3, [r3, #0]
    50f6:	2b23      	cmp	r3, #35	; 0x23
    50f8:	d104      	bne.n	5104 <_usart_interrupt_handler+0x27c>
							{
								module->rxGotStartByte = 1; 
    50fa:	69ba      	ldr	r2, [r7, #24]
    50fc:	2324      	movs	r3, #36	; 0x24
    50fe:	2101      	movs	r1, #1
    5100:	54d1      	strb	r1, [r2, r3]
							}
							break;
    5102:	e04a      	b.n	519a <_usart_interrupt_handler+0x312>
    5104:	e049      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 2:
						{	
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    5106:	69ba      	ldr	r2, [r7, #24]
    5108:	2324      	movs	r3, #36	; 0x24
    510a:	5cd3      	ldrb	r3, [r2, r3]
    510c:	b2db      	uxtb	r3, r3
    510e:	2b00      	cmp	r3, #0
    5110:	d009      	beq.n	5126 <_usart_interrupt_handler+0x29e>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
    5112:	1c3b      	adds	r3, r7, #0
    5114:	330c      	adds	r3, #12
    5116:	881b      	ldrh	r3, [r3, #0]
    5118:	021b      	lsls	r3, r3, #8
    511a:	b29b      	uxth	r3, r3
    511c:	3302      	adds	r3, #2
    511e:	b29a      	uxth	r2, r3
    5120:	69bb      	ldr	r3, [r7, #24]
    5122:	839a      	strh	r2, [r3, #28]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5124:	e039      	b.n	519a <_usart_interrupt_handler+0x312>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5126:	69bb      	ldr	r3, [r7, #24]
    5128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    512a:	69bb      	ldr	r3, [r7, #24]
    512c:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    512e:	69bb      	ldr	r3, [r7, #24]
    5130:	2200      	movs	r2, #0
    5132:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5134:	69bb      	ldr	r3, [r7, #24]
    5136:	2203      	movs	r2, #3
    5138:	839a      	strh	r2, [r3, #28]
							}							
							break;
    513a:	e02e      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 3:
						{
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    513c:	69ba      	ldr	r2, [r7, #24]
    513e:	2324      	movs	r3, #36	; 0x24
    5140:	5cd3      	ldrb	r3, [r2, r3]
    5142:	b2db      	uxtb	r3, r3
    5144:	2b00      	cmp	r3, #0
    5146:	d01c      	beq.n	5182 <_usart_interrupt_handler+0x2fa>
							{
								 
								 module->remaining_rx_buffer_length += (received_data);
    5148:	69bb      	ldr	r3, [r7, #24]
    514a:	8b9b      	ldrh	r3, [r3, #28]
    514c:	b29a      	uxth	r2, r3
    514e:	1c3b      	adds	r3, r7, #0
    5150:	330c      	adds	r3, #12
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	18d3      	adds	r3, r2, r3
    5156:	b29a      	uxth	r2, r3
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	839a      	strh	r2, [r3, #28]
								 module->remaining_rx_buffer_length -= 4;
    515c:	69bb      	ldr	r3, [r7, #24]
    515e:	8b9b      	ldrh	r3, [r3, #28]
    5160:	b29b      	uxth	r3, r3
    5162:	3b04      	subs	r3, #4
    5164:	b29a      	uxth	r2, r3
    5166:	69bb      	ldr	r3, [r7, #24]
    5168:	839a      	strh	r2, [r3, #28]
								 if (module->remaining_rx_buffer_length > MAX_GENERAL_BUFFER)
    516a:	69bb      	ldr	r3, [r7, #24]
    516c:	8b9b      	ldrh	r3, [r3, #28]
    516e:	b29a      	uxth	r2, r3
    5170:	2382      	movs	r3, #130	; 0x82
    5172:	00db      	lsls	r3, r3, #3
    5174:	429a      	cmp	r2, r3
    5176:	d90f      	bls.n	5198 <_usart_interrupt_handler+0x310>
								 {
									module->rxGotStartByte = 0;  
    5178:	69ba      	ldr	r2, [r7, #24]
    517a:	2324      	movs	r3, #36	; 0x24
    517c:	2100      	movs	r1, #0
    517e:	54d1      	strb	r1, [r2, r3]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5180:	e00a      	b.n	5198 <_usart_interrupt_handler+0x310>
									module->rxGotStartByte = 0;  
								 }
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5182:	69bb      	ldr	r3, [r7, #24]
    5184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5186:	69bb      	ldr	r3, [r7, #24]
    5188:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    518a:	69bb      	ldr	r3, [r7, #24]
    518c:	2200      	movs	r2, #0
    518e:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5190:	69bb      	ldr	r3, [r7, #24]
    5192:	2203      	movs	r2, #3
    5194:	839a      	strh	r2, [r3, #28]
							}							
							break;
    5196:	e7ff      	b.n	5198 <_usart_interrupt_handler+0x310>
    5198:	46c0      	nop			; (mov r8, r8)
						}
					}
					
					module->rxBufferPreviousByte = received_data;
    519a:	1c3b      	adds	r3, r7, #0
    519c:	330c      	adds	r3, #12
    519e:	881b      	ldrh	r3, [r3, #0]
    51a0:	b2d9      	uxtb	r1, r3
    51a2:	69ba      	ldr	r2, [r7, #24]
    51a4:	232e      	movs	r3, #46	; 0x2e
    51a6:	54d1      	strb	r1, [r2, r3]
    51a8:	e007      	b.n	51ba <_usart_interrupt_handler+0x332>
    51aa:	e006      	b.n	51ba <_usart_interrupt_handler+0x332>
    51ac:	2000398c 	.word	0x2000398c
    51b0:	00004cd5 	.word	0x00004cd5
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    51b4:	697b      	ldr	r3, [r7, #20]
    51b6:	2204      	movs	r2, #4
    51b8:	731a      	strb	r2, [r3, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    51ba:	46bd      	mov	sp, r7
    51bc:	b008      	add	sp, #32
    51be:	bd80      	pop	{r7, pc}

000051c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	2200      	movs	r2, #0
    51cc:	701a      	strb	r2, [r3, #0]
}
    51ce:	46bd      	mov	sp, r7
    51d0:	b002      	add	sp, #8
    51d2:	bd80      	pop	{r7, pc}

000051d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b082      	sub	sp, #8
    51d8:	af00      	add	r7, sp, #0
    51da:	1c02      	adds	r2, r0, #0
    51dc:	6039      	str	r1, [r7, #0]
    51de:	1dfb      	adds	r3, r7, #7
    51e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51e2:	1dfb      	adds	r3, r7, #7
    51e4:	781b      	ldrb	r3, [r3, #0]
    51e6:	2b01      	cmp	r3, #1
    51e8:	d00a      	beq.n	5200 <system_apb_clock_set_mask+0x2c>
    51ea:	2b02      	cmp	r3, #2
    51ec:	d00f      	beq.n	520e <system_apb_clock_set_mask+0x3a>
    51ee:	2b00      	cmp	r3, #0
    51f0:	d114      	bne.n	521c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    51f2:	4b0e      	ldr	r3, [pc, #56]	; (522c <system_apb_clock_set_mask+0x58>)
    51f4:	4a0d      	ldr	r2, [pc, #52]	; (522c <system_apb_clock_set_mask+0x58>)
    51f6:	6991      	ldr	r1, [r2, #24]
    51f8:	683a      	ldr	r2, [r7, #0]
    51fa:	430a      	orrs	r2, r1
    51fc:	619a      	str	r2, [r3, #24]
			break;
    51fe:	e00f      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5200:	4b0a      	ldr	r3, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5202:	4a0a      	ldr	r2, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5204:	69d1      	ldr	r1, [r2, #28]
    5206:	683a      	ldr	r2, [r7, #0]
    5208:	430a      	orrs	r2, r1
    520a:	61da      	str	r2, [r3, #28]
			break;
    520c:	e008      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <system_apb_clock_set_mask+0x58>)
    5210:	4a06      	ldr	r2, [pc, #24]	; (522c <system_apb_clock_set_mask+0x58>)
    5212:	6a11      	ldr	r1, [r2, #32]
    5214:	683a      	ldr	r2, [r7, #0]
    5216:	430a      	orrs	r2, r1
    5218:	621a      	str	r2, [r3, #32]
			break;
    521a:	e001      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    521c:	2317      	movs	r3, #23
    521e:	e000      	b.n	5222 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5220:	2300      	movs	r3, #0
}
    5222:	1c18      	adds	r0, r3, #0
    5224:	46bd      	mov	sp, r7
    5226:	b002      	add	sp, #8
    5228:	bd80      	pop	{r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	40000400 	.word	0x40000400

00005230 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5230:	b580      	push	{r7, lr}
    5232:	b082      	sub	sp, #8
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	2280      	movs	r2, #128	; 0x80
    523c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	2200      	movs	r2, #0
    5242:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	2201      	movs	r2, #1
    5248:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	2200      	movs	r2, #0
    524e:	70da      	strb	r2, [r3, #3]
}
    5250:	46bd      	mov	sp, r7
    5252:	b002      	add	sp, #8
    5254:	bd80      	pop	{r7, pc}
    5256:	46c0      	nop			; (mov r8, r8)

00005258 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5258:	b580      	push	{r7, lr}
    525a:	b084      	sub	sp, #16
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	7bdb      	ldrb	r3, [r3, #15]
    526a:	b2db      	uxtb	r3, r3
    526c:	1c1a      	adds	r2, r3, #0
    526e:	2380      	movs	r3, #128	; 0x80
    5270:	4013      	ands	r3, r2
    5272:	1e5a      	subs	r2, r3, #1
    5274:	4193      	sbcs	r3, r2
    5276:	b2db      	uxtb	r3, r3
}
    5278:	1c18      	adds	r0, r3, #0
    527a:	46bd      	mov	sp, r7
    527c:	b004      	add	sp, #16
    527e:	bd80      	pop	{r7, pc}

00005280 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5280:	b590      	push	{r4, r7, lr}
    5282:	b08d      	sub	sp, #52	; 0x34
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5288:	1c3b      	adds	r3, r7, #0
    528a:	330c      	adds	r3, #12
    528c:	4a0f      	ldr	r2, [pc, #60]	; (52cc <_tc_get_inst_index+0x4c>)
    528e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5290:	c313      	stmia	r3!, {r0, r1, r4}
    5292:	ca13      	ldmia	r2!, {r0, r1, r4}
    5294:	c313      	stmia	r3!, {r0, r1, r4}
    5296:	ca03      	ldmia	r2!, {r0, r1}
    5298:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    529a:	2300      	movs	r3, #0
    529c:	62fb      	str	r3, [r7, #44]	; 0x2c
    529e:	e00d      	b.n	52bc <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    52a0:	1c3b      	adds	r3, r7, #0
    52a2:	330c      	adds	r3, #12
    52a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    52a6:	0092      	lsls	r2, r2, #2
    52a8:	58d2      	ldr	r2, [r2, r3]
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	429a      	cmp	r2, r3
    52ae:	d102      	bne.n	52b6 <_tc_get_inst_index+0x36>
			return i;
    52b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b2:	b2db      	uxtb	r3, r3
    52b4:	e006      	b.n	52c4 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    52b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b8:	3301      	adds	r3, #1
    52ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    52bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52be:	2b07      	cmp	r3, #7
    52c0:	d9ee      	bls.n	52a0 <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    52c2:	2300      	movs	r3, #0
}
    52c4:	1c18      	adds	r0, r3, #0
    52c6:	46bd      	mov	sp, r7
    52c8:	b00d      	add	sp, #52	; 0x34
    52ca:	bd90      	pop	{r4, r7, pc}
    52cc:	00018310 	.word	0x00018310

000052d0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    52d0:	b590      	push	{r4, r7, lr}
    52d2:	b08f      	sub	sp, #60	; 0x3c
    52d4:	af00      	add	r7, sp, #0
    52d6:	60f8      	str	r0, [r7, #12]
    52d8:	60b9      	str	r1, [r7, #8]
    52da:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    52dc:	1c3b      	adds	r3, r7, #0
    52de:	3336      	adds	r3, #54	; 0x36
    52e0:	2200      	movs	r2, #0
    52e2:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    52e4:	1c3b      	adds	r3, r7, #0
    52e6:	3335      	adds	r3, #53	; 0x35
    52e8:	2200      	movs	r2, #0
    52ea:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    52ec:	1c3b      	adds	r3, r7, #0
    52ee:	3334      	adds	r3, #52	; 0x34
    52f0:	2200      	movs	r2, #0
    52f2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    52f4:	1c3c      	adds	r4, r7, #0
    52f6:	3431      	adds	r4, #49	; 0x31
    52f8:	68bb      	ldr	r3, [r7, #8]
    52fa:	1c18      	adds	r0, r3, #0
    52fc:	4bc4      	ldr	r3, [pc, #784]	; (5610 <tc_init+0x340>)
    52fe:	4798      	blx	r3
    5300:	1c03      	adds	r3, r0, #0
    5302:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5304:	1c3a      	adds	r2, r7, #0
    5306:	3228      	adds	r2, #40	; 0x28
    5308:	4bc2      	ldr	r3, [pc, #776]	; (5614 <tc_init+0x344>)
    530a:	1c11      	adds	r1, r2, #0
    530c:	1c1a      	adds	r2, r3, #0
    530e:	2308      	movs	r3, #8
    5310:	1c08      	adds	r0, r1, #0
    5312:	1c11      	adds	r1, r2, #0
    5314:	1c1a      	adds	r2, r3, #0
    5316:	4bc0      	ldr	r3, [pc, #768]	; (5618 <tc_init+0x348>)
    5318:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    531a:	1c3a      	adds	r2, r7, #0
    531c:	3218      	adds	r2, #24
    531e:	4bbf      	ldr	r3, [pc, #764]	; (561c <tc_init+0x34c>)
    5320:	1c11      	adds	r1, r2, #0
    5322:	1c1a      	adds	r2, r3, #0
    5324:	2310      	movs	r3, #16
    5326:	1c08      	adds	r0, r1, #0
    5328:	1c11      	adds	r1, r2, #0
    532a:	1c1a      	adds	r2, r3, #0
    532c:	4bba      	ldr	r3, [pc, #744]	; (5618 <tc_init+0x348>)
    532e:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5330:	1c3b      	adds	r3, r7, #0
    5332:	3333      	adds	r3, #51	; 0x33
    5334:	2200      	movs	r2, #0
    5336:	701a      	strb	r2, [r3, #0]
    5338:	e00e      	b.n	5358 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    533a:	1c3b      	adds	r3, r7, #0
    533c:	3333      	adds	r3, #51	; 0x33
    533e:	781a      	ldrb	r2, [r3, #0]
    5340:	68fb      	ldr	r3, [r7, #12]
    5342:	3202      	adds	r2, #2
    5344:	0092      	lsls	r2, r2, #2
    5346:	2100      	movs	r1, #0
    5348:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    534a:	1c3b      	adds	r3, r7, #0
    534c:	3333      	adds	r3, #51	; 0x33
    534e:	781a      	ldrb	r2, [r3, #0]
    5350:	1c3b      	adds	r3, r7, #0
    5352:	3333      	adds	r3, #51	; 0x33
    5354:	3201      	adds	r2, #1
    5356:	701a      	strb	r2, [r3, #0]
    5358:	1c3b      	adds	r3, r7, #0
    535a:	3333      	adds	r3, #51	; 0x33
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	2b03      	cmp	r3, #3
    5360:	d9eb      	bls.n	533a <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	2200      	movs	r2, #0
    5366:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	2200      	movs	r2, #0
    536c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    536e:	1c3b      	adds	r3, r7, #0
    5370:	3331      	adds	r3, #49	; 0x31
    5372:	781a      	ldrb	r2, [r3, #0]
    5374:	4baa      	ldr	r3, [pc, #680]	; (5620 <tc_init+0x350>)
    5376:	0092      	lsls	r2, r2, #2
    5378:	68f9      	ldr	r1, [r7, #12]
    537a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    537c:	68fb      	ldr	r3, [r7, #12]
    537e:	68ba      	ldr	r2, [r7, #8]
    5380:	601a      	str	r2, [r3, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	789b      	ldrb	r3, [r3, #2]
    5386:	2b08      	cmp	r3, #8
    5388:	d107      	bne.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    538a:	1c3b      	adds	r3, r7, #0
    538c:	3331      	adds	r3, #49	; 0x31
    538e:	781a      	ldrb	r2, [r3, #0]
    5390:	2301      	movs	r3, #1
    5392:	4013      	ands	r3, r2

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5394:	d001      	beq.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5396:	2317      	movs	r3, #23
    5398:	e1d5      	b.n	5746 <tc_init+0x476>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	789a      	ldrb	r2, [r3, #2]
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    53a2:	68bb      	ldr	r3, [r7, #8]
    53a4:	881b      	ldrh	r3, [r3, #0]
    53a6:	b29b      	uxth	r3, r3
    53a8:	1c1a      	adds	r2, r3, #0
    53aa:	2301      	movs	r3, #1
    53ac:	4013      	ands	r3, r2
    53ae:	d001      	beq.n	53b4 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    53b0:	2305      	movs	r3, #5
    53b2:	e1c8      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    53b4:	68bb      	ldr	r3, [r7, #8]
    53b6:	7bdb      	ldrb	r3, [r3, #15]
    53b8:	b2db      	uxtb	r3, r3
    53ba:	1c1a      	adds	r2, r3, #0
    53bc:	2310      	movs	r3, #16
    53be:	4013      	ands	r3, r2
    53c0:	d001      	beq.n	53c6 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    53c2:	231c      	movs	r3, #28
    53c4:	e1bf      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    53c6:	68bb      	ldr	r3, [r7, #8]
    53c8:	881b      	ldrh	r3, [r3, #0]
    53ca:	b29b      	uxth	r3, r3
    53cc:	1c1a      	adds	r2, r3, #0
    53ce:	2302      	movs	r3, #2
    53d0:	4013      	ands	r3, r2
    53d2:	d001      	beq.n	53d8 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    53d4:	231c      	movs	r3, #28
    53d6:	e1b6      	b.n	5746 <tc_init+0x476>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	7c1b      	ldrb	r3, [r3, #16]
    53dc:	2b00      	cmp	r3, #0
    53de:	d017      	beq.n	5410 <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    53e0:	1c3b      	adds	r3, r7, #0
    53e2:	3314      	adds	r3, #20
    53e4:	1c18      	adds	r0, r3, #0
    53e6:	4b8f      	ldr	r3, [pc, #572]	; (5624 <tc_init+0x354>)
    53e8:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	699b      	ldr	r3, [r3, #24]
    53ee:	b2da      	uxtb	r2, r3
    53f0:	1c3b      	adds	r3, r7, #0
    53f2:	3314      	adds	r3, #20
    53f4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	3314      	adds	r3, #20
    53fa:	2201      	movs	r2, #1
    53fc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    5402:	b2da      	uxtb	r2, r3
    5404:	1c3b      	adds	r3, r7, #0
    5406:	3314      	adds	r3, #20
    5408:	1c10      	adds	r0, r2, #0
    540a:	1c19      	adds	r1, r3, #0
    540c:	4b86      	ldr	r3, [pc, #536]	; (5628 <tc_init+0x358>)
    540e:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	7f1b      	ldrb	r3, [r3, #28]
    5414:	2b00      	cmp	r3, #0
    5416:	d017      	beq.n	5448 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    5418:	1c3b      	adds	r3, r7, #0
    541a:	3314      	adds	r3, #20
    541c:	1c18      	adds	r0, r3, #0
    541e:	4b81      	ldr	r3, [pc, #516]	; (5624 <tc_init+0x354>)
    5420:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5426:	b2da      	uxtb	r2, r3
    5428:	1c3b      	adds	r3, r7, #0
    542a:	3314      	adds	r3, #20
    542c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    542e:	1c3b      	adds	r3, r7, #0
    5430:	3314      	adds	r3, #20
    5432:	2201      	movs	r2, #1
    5434:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    543a:	b2da      	uxtb	r2, r3
    543c:	1c3b      	adds	r3, r7, #0
    543e:	3314      	adds	r3, #20
    5440:	1c10      	adds	r0, r2, #0
    5442:	1c19      	adds	r1, r3, #0
    5444:	4b78      	ldr	r3, [pc, #480]	; (5628 <tc_init+0x358>)
    5446:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    5448:	1c3b      	adds	r3, r7, #0
    544a:	3331      	adds	r3, #49	; 0x31
    544c:	781a      	ldrb	r2, [r3, #0]
    544e:	1c3b      	adds	r3, r7, #0
    5450:	3318      	adds	r3, #24
    5452:	0052      	lsls	r2, r2, #1
    5454:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5456:	2002      	movs	r0, #2
    5458:	1c19      	adds	r1, r3, #0
    545a:	4b74      	ldr	r3, [pc, #464]	; (562c <tc_init+0x35c>)
    545c:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	789b      	ldrb	r3, [r3, #2]
    5462:	2b08      	cmp	r3, #8
    5464:	d10b      	bne.n	547e <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    5466:	1c3b      	adds	r3, r7, #0
    5468:	3331      	adds	r3, #49	; 0x31
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	1c5a      	adds	r2, r3, #1
    546e:	1c3b      	adds	r3, r7, #0
    5470:	3318      	adds	r3, #24
    5472:	0052      	lsls	r2, r2, #1
    5474:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5476:	2002      	movs	r0, #2
    5478:	1c19      	adds	r1, r3, #0
    547a:	4b6c      	ldr	r3, [pc, #432]	; (562c <tc_init+0x35c>)
    547c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    547e:	1c3b      	adds	r3, r7, #0
    5480:	3310      	adds	r3, #16
    5482:	1c18      	adds	r0, r3, #0
    5484:	4b6a      	ldr	r3, [pc, #424]	; (5630 <tc_init+0x360>)
    5486:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	781a      	ldrb	r2, [r3, #0]
    548c:	1c3b      	adds	r3, r7, #0
    548e:	3310      	adds	r3, #16
    5490:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5492:	1c3b      	adds	r3, r7, #0
    5494:	3331      	adds	r3, #49	; 0x31
    5496:	781b      	ldrb	r3, [r3, #0]
    5498:	1c3a      	adds	r2, r7, #0
    549a:	3228      	adds	r2, #40	; 0x28
    549c:	5cd2      	ldrb	r2, [r2, r3]
    549e:	1c3b      	adds	r3, r7, #0
    54a0:	3310      	adds	r3, #16
    54a2:	1c10      	adds	r0, r2, #0
    54a4:	1c19      	adds	r1, r3, #0
    54a6:	4b63      	ldr	r3, [pc, #396]	; (5634 <tc_init+0x364>)
    54a8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    54aa:	1c3b      	adds	r3, r7, #0
    54ac:	3331      	adds	r3, #49	; 0x31
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	1c3a      	adds	r2, r7, #0
    54b2:	3228      	adds	r2, #40	; 0x28
    54b4:	5cd3      	ldrb	r3, [r2, r3]
    54b6:	1c18      	adds	r0, r3, #0
    54b8:	4b5f      	ldr	r3, [pc, #380]	; (5638 <tc_init+0x368>)
    54ba:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54c4:	4313      	orrs	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54ce:	4313      	orrs	r3, r2
    54d0:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54d6:	1c3b      	adds	r3, r7, #0
    54d8:	3336      	adds	r3, #54	; 0x36
    54da:	430a      	orrs	r2, r1
    54dc:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	785b      	ldrb	r3, [r3, #1]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d009      	beq.n	54fa <tc_init+0x22a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    54e6:	1c3b      	adds	r3, r7, #0
    54e8:	3336      	adds	r3, #54	; 0x36
    54ea:	1c3a      	adds	r2, r7, #0
    54ec:	3236      	adds	r2, #54	; 0x36
    54ee:	8812      	ldrh	r2, [r2, #0]
    54f0:	2180      	movs	r1, #128	; 0x80
    54f2:	0109      	lsls	r1, r1, #4
    54f4:	430a      	orrs	r2, r1
    54f6:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    54f8:	e7ff      	b.n	54fa <tc_init+0x22a>
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	68fb      	ldr	r3, [r7, #12]
    54fe:	1c18      	adds	r0, r3, #0
    5500:	4b4e      	ldr	r3, [pc, #312]	; (563c <tc_init+0x36c>)
    5502:	4798      	blx	r3
    5504:	1c03      	adds	r3, r0, #0
    5506:	2b00      	cmp	r3, #0
    5508:	d1f8      	bne.n	54fc <tc_init+0x22c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    550a:	68bb      	ldr	r3, [r7, #8]
    550c:	1c3a      	adds	r2, r7, #0
    550e:	3236      	adds	r2, #54	; 0x36
    5510:	8812      	ldrh	r2, [r2, #0]
    5512:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	7b5b      	ldrb	r3, [r3, #13]
    5518:	2b00      	cmp	r3, #0
    551a:	d003      	beq.n	5524 <tc_init+0x254>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    551c:	1c3b      	adds	r3, r7, #0
    551e:	3335      	adds	r3, #53	; 0x35
    5520:	2204      	movs	r2, #4
    5522:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	7b9b      	ldrb	r3, [r3, #14]
    5528:	2b00      	cmp	r3, #0
    552a:	d008      	beq.n	553e <tc_init+0x26e>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    552c:	1c3b      	adds	r3, r7, #0
    552e:	3335      	adds	r3, #53	; 0x35
    5530:	1c3a      	adds	r2, r7, #0
    5532:	3235      	adds	r2, #53	; 0x35
    5534:	7812      	ldrb	r2, [r2, #0]
    5536:	2101      	movs	r1, #1
    5538:	430a      	orrs	r2, r1
    553a:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    553c:	e7ff      	b.n	553e <tc_init+0x26e>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	1c18      	adds	r0, r3, #0
    5544:	4b3d      	ldr	r3, [pc, #244]	; (563c <tc_init+0x36c>)
    5546:	4798      	blx	r3
    5548:	1c03      	adds	r3, r0, #0
    554a:	2b00      	cmp	r3, #0
    554c:	d1f8      	bne.n	5540 <tc_init+0x270>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	22ff      	movs	r2, #255	; 0xff
    5552:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5554:	1c3b      	adds	r3, r7, #0
    5556:	3335      	adds	r3, #53	; 0x35
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d00c      	beq.n	5578 <tc_init+0x2a8>
		while (tc_is_syncing(module_inst)) {
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	1c18      	adds	r0, r3, #0
    5564:	4b35      	ldr	r3, [pc, #212]	; (563c <tc_init+0x36c>)
    5566:	4798      	blx	r3
    5568:	1c03      	adds	r3, r0, #0
    556a:	2b00      	cmp	r3, #0
    556c:	d1f8      	bne.n	5560 <tc_init+0x290>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	1c3a      	adds	r2, r7, #0
    5572:	3235      	adds	r2, #53	; 0x35
    5574:	7812      	ldrb	r2, [r2, #0]
    5576:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5578:	1c3b      	adds	r3, r7, #0
    557a:	3334      	adds	r3, #52	; 0x34
    557c:	687a      	ldr	r2, [r7, #4]
    557e:	7a92      	ldrb	r2, [r2, #10]
    5580:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5582:	1c3b      	adds	r3, r7, #0
    5584:	3332      	adds	r3, #50	; 0x32
    5586:	2200      	movs	r2, #0
    5588:	701a      	strb	r2, [r3, #0]
    558a:	e01d      	b.n	55c8 <tc_init+0x2f8>
		if (config->enable_capture_on_channel[i] == true) {
    558c:	1c3b      	adds	r3, r7, #0
    558e:	3332      	adds	r3, #50	; 0x32
    5590:	781b      	ldrb	r3, [r3, #0]
    5592:	687a      	ldr	r2, [r7, #4]
    5594:	18d3      	adds	r3, r2, r3
    5596:	7adb      	ldrb	r3, [r3, #11]
    5598:	2b00      	cmp	r3, #0
    559a:	d00e      	beq.n	55ba <tc_init+0x2ea>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    559c:	1c3b      	adds	r3, r7, #0
    559e:	3332      	adds	r3, #50	; 0x32
    55a0:	781b      	ldrb	r3, [r3, #0]
    55a2:	2210      	movs	r2, #16
    55a4:	1c11      	adds	r1, r2, #0
    55a6:	4099      	lsls	r1, r3
    55a8:	1c0b      	adds	r3, r1, #0
    55aa:	b2d9      	uxtb	r1, r3
    55ac:	1c3b      	adds	r3, r7, #0
    55ae:	3334      	adds	r3, #52	; 0x34
    55b0:	1c3a      	adds	r2, r7, #0
    55b2:	3234      	adds	r2, #52	; 0x34
    55b4:	7812      	ldrb	r2, [r2, #0]
    55b6:	430a      	orrs	r2, r1
    55b8:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    55ba:	1c3b      	adds	r3, r7, #0
    55bc:	3332      	adds	r3, #50	; 0x32
    55be:	781a      	ldrb	r2, [r3, #0]
    55c0:	1c3b      	adds	r3, r7, #0
    55c2:	3332      	adds	r3, #50	; 0x32
    55c4:	3201      	adds	r2, #1
    55c6:	701a      	strb	r2, [r3, #0]
    55c8:	1c3b      	adds	r3, r7, #0
    55ca:	3332      	adds	r3, #50	; 0x32
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b01      	cmp	r3, #1
    55d0:	d9dc      	bls.n	558c <tc_init+0x2bc>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	68fb      	ldr	r3, [r7, #12]
    55d6:	1c18      	adds	r0, r3, #0
    55d8:	4b18      	ldr	r3, [pc, #96]	; (563c <tc_init+0x36c>)
    55da:	4798      	blx	r3
    55dc:	1c03      	adds	r3, r0, #0
    55de:	2b00      	cmp	r3, #0
    55e0:	d1f8      	bne.n	55d4 <tc_init+0x304>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    55e2:	68bb      	ldr	r3, [r7, #8]
    55e4:	1c3a      	adds	r2, r7, #0
    55e6:	3234      	adds	r2, #52	; 0x34
    55e8:	7812      	ldrb	r2, [r2, #0]
    55ea:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55ec:	46c0      	nop			; (mov r8, r8)
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	1c18      	adds	r0, r3, #0
    55f2:	4b12      	ldr	r3, [pc, #72]	; (563c <tc_init+0x36c>)
    55f4:	4798      	blx	r3
    55f6:	1c03      	adds	r3, r0, #0
    55f8:	2b00      	cmp	r3, #0
    55fa:	d1f8      	bne.n	55ee <tc_init+0x31e>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	791b      	ldrb	r3, [r3, #4]
    5600:	2b04      	cmp	r3, #4
    5602:	d01d      	beq.n	5640 <tc_init+0x370>
    5604:	2b08      	cmp	r3, #8
    5606:	d100      	bne.n	560a <tc_init+0x33a>
    5608:	e076      	b.n	56f8 <tc_init+0x428>
    560a:	2b00      	cmp	r3, #0
    560c:	d04e      	beq.n	56ac <tc_init+0x3dc>
    560e:	e099      	b.n	5744 <tc_init+0x474>
    5610:	00005281 	.word	0x00005281
    5614:	00018330 	.word	0x00018330
    5618:	00017e9d 	.word	0x00017e9d
    561c:	00018338 	.word	0x00018338
    5620:	20000588 	.word	0x20000588
    5624:	00005231 	.word	0x00005231
    5628:	00014361 	.word	0x00014361
    562c:	000051d5 	.word	0x000051d5
    5630:	000051c1 	.word	0x000051c1
    5634:	00014041 	.word	0x00014041
    5638:	00014081 	.word	0x00014081
    563c:	00005259 	.word	0x00005259
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5640:	46c0      	nop			; (mov r8, r8)
    5642:	68fb      	ldr	r3, [r7, #12]
    5644:	1c18      	adds	r0, r3, #0
    5646:	4b42      	ldr	r3, [pc, #264]	; (5750 <tc_init+0x480>)
    5648:	4798      	blx	r3
    564a:	1c03      	adds	r3, r0, #0
    564c:	2b00      	cmp	r3, #0
    564e:	d1f8      	bne.n	5642 <tc_init+0x372>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5650:	687a      	ldr	r2, [r7, #4]
    5652:	2328      	movs	r3, #40	; 0x28
    5654:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    5656:	68bb      	ldr	r3, [r7, #8]
    5658:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	1c18      	adds	r0, r3, #0
    5660:	4b3b      	ldr	r3, [pc, #236]	; (5750 <tc_init+0x480>)
    5662:	4798      	blx	r3
    5664:	1c03      	adds	r3, r0, #0
    5666:	2b00      	cmp	r3, #0
    5668:	d1f8      	bne.n	565c <tc_init+0x38c>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    566a:	687a      	ldr	r2, [r7, #4]
    566c:	2329      	movs	r3, #41	; 0x29
    566e:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    5670:	68bb      	ldr	r3, [r7, #8]
    5672:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    5674:	46c0      	nop			; (mov r8, r8)
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	1c18      	adds	r0, r3, #0
    567a:	4b35      	ldr	r3, [pc, #212]	; (5750 <tc_init+0x480>)
    567c:	4798      	blx	r3
    567e:	1c03      	adds	r3, r0, #0
    5680:	2b00      	cmp	r3, #0
    5682:	d1f8      	bne.n	5676 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5684:	687a      	ldr	r2, [r7, #4]
    5686:	232a      	movs	r3, #42	; 0x2a
    5688:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    568a:	68bb      	ldr	r3, [r7, #8]
    568c:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	1c18      	adds	r0, r3, #0
    5694:	4b2e      	ldr	r3, [pc, #184]	; (5750 <tc_init+0x480>)
    5696:	4798      	blx	r3
    5698:	1c03      	adds	r3, r0, #0
    569a:	2b00      	cmp	r3, #0
    569c:	d1f8      	bne.n	5690 <tc_init+0x3c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    569e:	687a      	ldr	r2, [r7, #4]
    56a0:	232b      	movs	r3, #43	; 0x2b
    56a2:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    56a4:	68bb      	ldr	r3, [r7, #8]
    56a6:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    56a8:	2300      	movs	r3, #0
    56aa:	e04c      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    56ac:	46c0      	nop			; (mov r8, r8)
    56ae:	68fb      	ldr	r3, [r7, #12]
    56b0:	1c18      	adds	r0, r3, #0
    56b2:	4b27      	ldr	r3, [pc, #156]	; (5750 <tc_init+0x480>)
    56b4:	4798      	blx	r3
    56b6:	1c03      	adds	r3, r0, #0
    56b8:	2b00      	cmp	r3, #0
    56ba:	d1f8      	bne.n	56ae <tc_init+0x3de>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    56c0:	68bb      	ldr	r3, [r7, #8]
    56c2:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    56c4:	46c0      	nop			; (mov r8, r8)
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	1c18      	adds	r0, r3, #0
    56ca:	4b21      	ldr	r3, [pc, #132]	; (5750 <tc_init+0x480>)
    56cc:	4798      	blx	r3
    56ce:	1c03      	adds	r3, r0, #0
    56d0:	2b00      	cmp	r3, #0
    56d2:	d1f8      	bne.n	56c6 <tc_init+0x3f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    56d8:	68bb      	ldr	r3, [r7, #8]
    56da:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    56dc:	46c0      	nop			; (mov r8, r8)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	1c18      	adds	r0, r3, #0
    56e2:	4b1b      	ldr	r3, [pc, #108]	; (5750 <tc_init+0x480>)
    56e4:	4798      	blx	r3
    56e6:	1c03      	adds	r3, r0, #0
    56e8:	2b00      	cmp	r3, #0
    56ea:	d1f8      	bne.n	56de <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    56f0:	68bb      	ldr	r3, [r7, #8]
    56f2:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    56f4:	2300      	movs	r3, #0
    56f6:	e026      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	1c18      	adds	r0, r3, #0
    56fe:	4b14      	ldr	r3, [pc, #80]	; (5750 <tc_init+0x480>)
    5700:	4798      	blx	r3
    5702:	1c03      	adds	r3, r0, #0
    5704:	2b00      	cmp	r3, #0
    5706:	d1f8      	bne.n	56fa <tc_init+0x42a>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    570c:	68bb      	ldr	r3, [r7, #8]
    570e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5710:	46c0      	nop			; (mov r8, r8)
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	1c18      	adds	r0, r3, #0
    5716:	4b0e      	ldr	r3, [pc, #56]	; (5750 <tc_init+0x480>)
    5718:	4798      	blx	r3
    571a:	1c03      	adds	r3, r0, #0
    571c:	2b00      	cmp	r3, #0
    571e:	d1f8      	bne.n	5712 <tc_init+0x442>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    5724:	68bb      	ldr	r3, [r7, #8]
    5726:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    5728:	46c0      	nop			; (mov r8, r8)
    572a:	68fb      	ldr	r3, [r7, #12]
    572c:	1c18      	adds	r0, r3, #0
    572e:	4b08      	ldr	r3, [pc, #32]	; (5750 <tc_init+0x480>)
    5730:	4798      	blx	r3
    5732:	1c03      	adds	r3, r0, #0
    5734:	2b00      	cmp	r3, #0
    5736:	d1f8      	bne.n	572a <tc_init+0x45a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    5740:	2300      	movs	r3, #0
    5742:	e000      	b.n	5746 <tc_init+0x476>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5744:	2317      	movs	r3, #23
}
    5746:	1c18      	adds	r0, r3, #0
    5748:	46bd      	mov	sp, r7
    574a:	b00f      	add	sp, #60	; 0x3c
    574c:	bd90      	pop	{r4, r7, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	00005259 	.word	0x00005259

00005754 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	60f8      	str	r0, [r7, #12]
    575c:	60b9      	str	r1, [r7, #8]
    575e:	1dfb      	adds	r3, r7, #7
    5760:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5762:	1dfb      	adds	r3, r7, #7
    5764:	781a      	ldrb	r2, [r3, #0]
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	3202      	adds	r2, #2
    576a:	0092      	lsls	r2, r2, #2
    576c:	68b9      	ldr	r1, [r7, #8]
    576e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5770:	1dfb      	adds	r3, r7, #7
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b02      	cmp	r3, #2
    5776:	d107      	bne.n	5788 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5778:	68fb      	ldr	r3, [r7, #12]
    577a:	7e1b      	ldrb	r3, [r3, #24]
    577c:	2210      	movs	r2, #16
    577e:	4313      	orrs	r3, r2
    5780:	b2da      	uxtb	r2, r3
    5782:	68fb      	ldr	r3, [r7, #12]
    5784:	761a      	strb	r2, [r3, #24]
    5786:	e01a      	b.n	57be <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    5788:	1dfb      	adds	r3, r7, #7
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	2b03      	cmp	r3, #3
    578e:	d107      	bne.n	57a0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	7e1b      	ldrb	r3, [r3, #24]
    5794:	2220      	movs	r2, #32
    5796:	4313      	orrs	r3, r2
    5798:	b2da      	uxtb	r2, r3
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	761a      	strb	r2, [r3, #24]
    579e:	e00e      	b.n	57be <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    57a0:	68fb      	ldr	r3, [r7, #12]
    57a2:	7e1b      	ldrb	r3, [r3, #24]
    57a4:	b2da      	uxtb	r2, r3
    57a6:	1dfb      	adds	r3, r7, #7
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	2101      	movs	r1, #1
    57ac:	1c08      	adds	r0, r1, #0
    57ae:	4098      	lsls	r0, r3
    57b0:	1c03      	adds	r3, r0, #0
    57b2:	b2db      	uxtb	r3, r3
    57b4:	4313      	orrs	r3, r2
    57b6:	b2db      	uxtb	r3, r3
    57b8:	b2da      	uxtb	r2, r3
    57ba:	68fb      	ldr	r3, [r7, #12]
    57bc:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    57be:	2300      	movs	r3, #0
}
    57c0:	1c18      	adds	r0, r3, #0
    57c2:	46bd      	mov	sp, r7
    57c4:	b004      	add	sp, #16
    57c6:	bd80      	pop	{r7, pc}

000057c8 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    57c8:	b580      	push	{r7, lr}
    57ca:	af00      	add	r7, sp, #0
    57cc:	2000      	movs	r0, #0
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <TC0_Handler+0x10>)
    57d0:	4798      	blx	r3
    57d2:	46bd      	mov	sp, r7
    57d4:	bd80      	pop	{r7, pc}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	00005869 	.word	0x00005869

000057dc <TC1_Handler>:
    57dc:	b580      	push	{r7, lr}
    57de:	af00      	add	r7, sp, #0
    57e0:	2001      	movs	r0, #1
    57e2:	4b02      	ldr	r3, [pc, #8]	; (57ec <TC1_Handler+0x10>)
    57e4:	4798      	blx	r3
    57e6:	46bd      	mov	sp, r7
    57e8:	bd80      	pop	{r7, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	00005869 	.word	0x00005869

000057f0 <TC2_Handler>:
    57f0:	b580      	push	{r7, lr}
    57f2:	af00      	add	r7, sp, #0
    57f4:	2002      	movs	r0, #2
    57f6:	4b02      	ldr	r3, [pc, #8]	; (5800 <TC2_Handler+0x10>)
    57f8:	4798      	blx	r3
    57fa:	46bd      	mov	sp, r7
    57fc:	bd80      	pop	{r7, pc}
    57fe:	46c0      	nop			; (mov r8, r8)
    5800:	00005869 	.word	0x00005869

00005804 <TC3_Handler>:
    5804:	b580      	push	{r7, lr}
    5806:	af00      	add	r7, sp, #0
    5808:	2003      	movs	r0, #3
    580a:	4b02      	ldr	r3, [pc, #8]	; (5814 <TC3_Handler+0x10>)
    580c:	4798      	blx	r3
    580e:	46bd      	mov	sp, r7
    5810:	bd80      	pop	{r7, pc}
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	00005869 	.word	0x00005869

00005818 <TC4_Handler>:
    5818:	b580      	push	{r7, lr}
    581a:	af00      	add	r7, sp, #0
    581c:	2004      	movs	r0, #4
    581e:	4b02      	ldr	r3, [pc, #8]	; (5828 <TC4_Handler+0x10>)
    5820:	4798      	blx	r3
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	00005869 	.word	0x00005869

0000582c <TC5_Handler>:
    582c:	b580      	push	{r7, lr}
    582e:	af00      	add	r7, sp, #0
    5830:	2005      	movs	r0, #5
    5832:	4b02      	ldr	r3, [pc, #8]	; (583c <TC5_Handler+0x10>)
    5834:	4798      	blx	r3
    5836:	46bd      	mov	sp, r7
    5838:	bd80      	pop	{r7, pc}
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	00005869 	.word	0x00005869

00005840 <TC6_Handler>:
    5840:	b580      	push	{r7, lr}
    5842:	af00      	add	r7, sp, #0
    5844:	2006      	movs	r0, #6
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <TC6_Handler+0x10>)
    5848:	4798      	blx	r3
    584a:	46bd      	mov	sp, r7
    584c:	bd80      	pop	{r7, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	00005869 	.word	0x00005869

00005854 <TC7_Handler>:
    5854:	b580      	push	{r7, lr}
    5856:	af00      	add	r7, sp, #0
    5858:	2007      	movs	r0, #7
    585a:	4b02      	ldr	r3, [pc, #8]	; (5864 <TC7_Handler+0x10>)
    585c:	4798      	blx	r3
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	00005869 	.word	0x00005869

00005868 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5868:	b580      	push	{r7, lr}
    586a:	b084      	sub	sp, #16
    586c:	af00      	add	r7, sp, #0
    586e:	1c02      	adds	r2, r0, #0
    5870:	1dfb      	adds	r3, r7, #7
    5872:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    5874:	1dfb      	adds	r3, r7, #7
    5876:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5878:	4b28      	ldr	r3, [pc, #160]	; (591c <_tc_interrupt_handler+0xb4>)
    587a:	0092      	lsls	r2, r2, #2
    587c:	58d3      	ldr	r3, [r2, r3]
    587e:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	7b9b      	ldrb	r3, [r3, #14]
    5886:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    588c:	4013      	ands	r3, r2
    588e:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5894:	1c3b      	adds	r3, r7, #0
    5896:	330b      	adds	r3, #11
    5898:	400a      	ands	r2, r1
    589a:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    589c:	1c3b      	adds	r3, r7, #0
    589e:	330b      	adds	r3, #11
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	2301      	movs	r3, #1
    58a4:	4013      	ands	r3, r2
    58a6:	d008      	beq.n	58ba <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	689b      	ldr	r3, [r3, #8]
    58ac:	68fa      	ldr	r2, [r7, #12]
    58ae:	1c10      	adds	r0, r2, #0
    58b0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	2201      	movs	r2, #1
    58b8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    58ba:	1c3b      	adds	r3, r7, #0
    58bc:	330b      	adds	r3, #11
    58be:	781a      	ldrb	r2, [r3, #0]
    58c0:	2302      	movs	r3, #2
    58c2:	4013      	ands	r3, r2
    58c4:	d008      	beq.n	58d8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	68db      	ldr	r3, [r3, #12]
    58ca:	68fa      	ldr	r2, [r7, #12]
    58cc:	1c10      	adds	r0, r2, #0
    58ce:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	2202      	movs	r2, #2
    58d6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    58d8:	1c3b      	adds	r3, r7, #0
    58da:	330b      	adds	r3, #11
    58dc:	781a      	ldrb	r2, [r3, #0]
    58de:	2310      	movs	r3, #16
    58e0:	4013      	ands	r3, r2
    58e2:	d008      	beq.n	58f6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	691b      	ldr	r3, [r3, #16]
    58e8:	68fa      	ldr	r2, [r7, #12]
    58ea:	1c10      	adds	r0, r2, #0
    58ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	2210      	movs	r2, #16
    58f4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    58f6:	1c3b      	adds	r3, r7, #0
    58f8:	330b      	adds	r3, #11
    58fa:	781a      	ldrb	r2, [r3, #0]
    58fc:	2320      	movs	r3, #32
    58fe:	4013      	ands	r3, r2
    5900:	d008      	beq.n	5914 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5902:	68fb      	ldr	r3, [r7, #12]
    5904:	695b      	ldr	r3, [r3, #20]
    5906:	68fa      	ldr	r2, [r7, #12]
    5908:	1c10      	adds	r0, r2, #0
    590a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	2220      	movs	r2, #32
    5912:	739a      	strb	r2, [r3, #14]
	}
}
    5914:	46bd      	mov	sp, r7
    5916:	b004      	add	sp, #16
    5918:	bd80      	pop	{r7, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	20000588 	.word	0x20000588

00005920 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5920:	b580      	push	{r7, lr}
    5922:	b082      	sub	sp, #8
    5924:	af00      	add	r7, sp, #0
    5926:	1c02      	adds	r2, r0, #0
    5928:	6039      	str	r1, [r7, #0]
    592a:	1dfb      	adds	r3, r7, #7
    592c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    592e:	1dfb      	adds	r3, r7, #7
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2b01      	cmp	r3, #1
    5934:	d00a      	beq.n	594c <system_apb_clock_set_mask+0x2c>
    5936:	2b02      	cmp	r3, #2
    5938:	d00f      	beq.n	595a <system_apb_clock_set_mask+0x3a>
    593a:	2b00      	cmp	r3, #0
    593c:	d114      	bne.n	5968 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    593e:	4b0e      	ldr	r3, [pc, #56]	; (5978 <system_apb_clock_set_mask+0x58>)
    5940:	4a0d      	ldr	r2, [pc, #52]	; (5978 <system_apb_clock_set_mask+0x58>)
    5942:	6991      	ldr	r1, [r2, #24]
    5944:	683a      	ldr	r2, [r7, #0]
    5946:	430a      	orrs	r2, r1
    5948:	619a      	str	r2, [r3, #24]
			break;
    594a:	e00f      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    594c:	4b0a      	ldr	r3, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    594e:	4a0a      	ldr	r2, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    5950:	69d1      	ldr	r1, [r2, #28]
    5952:	683a      	ldr	r2, [r7, #0]
    5954:	430a      	orrs	r2, r1
    5956:	61da      	str	r2, [r3, #28]
			break;
    5958:	e008      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    595a:	4b07      	ldr	r3, [pc, #28]	; (5978 <system_apb_clock_set_mask+0x58>)
    595c:	4a06      	ldr	r2, [pc, #24]	; (5978 <system_apb_clock_set_mask+0x58>)
    595e:	6a11      	ldr	r1, [r2, #32]
    5960:	683a      	ldr	r2, [r7, #0]
    5962:	430a      	orrs	r2, r1
    5964:	621a      	str	r2, [r3, #32]
			break;
    5966:	e001      	b.n	596c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5968:	2317      	movs	r3, #23
    596a:	e000      	b.n	596e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    596c:	2300      	movs	r3, #0
}
    596e:	1c18      	adds	r0, r3, #0
    5970:	46bd      	mov	sp, r7
    5972:	b002      	add	sp, #8
    5974:	bd80      	pop	{r7, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	40000400 	.word	0x40000400

0000597c <wdt_is_syncing>:
 *
 * \retval true If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    597c:	b580      	push	{r7, lr}
    597e:	b082      	sub	sp, #8
    5980:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5982:	4b08      	ldr	r3, [pc, #32]	; (59a4 <wdt_is_syncing+0x28>)
    5984:	607b      	str	r3, [r7, #4]

#if (SAML21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	79db      	ldrb	r3, [r3, #7]
    598a:	b2db      	uxtb	r3, r3
    598c:	b2db      	uxtb	r3, r3
    598e:	b25b      	sxtb	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	da01      	bge.n	5998 <wdt_is_syncing+0x1c>
#endif
		return true;
    5994:	2301      	movs	r3, #1
    5996:	e000      	b.n	599a <wdt_is_syncing+0x1e>
	}

	return false;
    5998:	2300      	movs	r3, #0
}
    599a:	1c18      	adds	r0, r3, #0
    599c:	46bd      	mov	sp, r7
    599e:	b002      	add	sp, #8
    59a0:	bd80      	pop	{r7, pc}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	40001000 	.word	0x40001000

000059a8 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    59ae:	4b07      	ldr	r3, [pc, #28]	; (59cc <wdt_is_locked+0x24>)
    59b0:	607b      	str	r3, [r7, #4]

#if (SAML21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	781b      	ldrb	r3, [r3, #0]
    59b6:	b2db      	uxtb	r3, r3
    59b8:	1c1a      	adds	r2, r3, #0
    59ba:	2380      	movs	r3, #128	; 0x80
    59bc:	4013      	ands	r3, r2
    59be:	1e5a      	subs	r2, r3, #1
    59c0:	4193      	sbcs	r3, r2
    59c2:	b2db      	uxtb	r3, r3
#endif
}
    59c4:	1c18      	adds	r0, r3, #0
    59c6:	46bd      	mov	sp, r7
    59c8:	b002      	add	sp, #8
    59ca:	bd80      	pop	{r7, pc}
    59cc:	40001000 	.word	0x40001000

000059d0 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b086      	sub	sp, #24
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    59d8:	4b56      	ldr	r3, [pc, #344]	; (5b34 <wdt_set_config+0x164>)
    59da:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    59dc:	2000      	movs	r0, #0
    59de:	2110      	movs	r1, #16
    59e0:	4b55      	ldr	r3, [pc, #340]	; (5b38 <wdt_set_config+0x168>)
    59e2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    59e4:	4b55      	ldr	r3, [pc, #340]	; (5b3c <wdt_set_config+0x16c>)
    59e6:	4798      	blx	r3
    59e8:	1c03      	adds	r3, r0, #0
    59ea:	2b00      	cmp	r3, #0
    59ec:	d001      	beq.n	59f2 <wdt_set_config+0x22>
		return STATUS_ERR_IO;
    59ee:	2310      	movs	r3, #16
    59f0:	e09c      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	78db      	ldrb	r3, [r3, #3]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d101      	bne.n	59fe <wdt_set_config+0x2e>
		return STATUS_ERR_INVALID_ARG;
    59fa:	2317      	movs	r3, #23
    59fc:	e096      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	78da      	ldrb	r2, [r3, #3]
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	791b      	ldrb	r3, [r3, #4]
    5a06:	429a      	cmp	r2, r3
    5a08:	d305      	bcc.n	5a16 <wdt_set_config+0x46>
			(config->timeout_period < config->early_warning_period)) {
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	78da      	ldrb	r2, [r3, #3]
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    5a12:	429a      	cmp	r2, r3
    5a14:	d201      	bcs.n	5a1a <wdt_set_config+0x4a>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
    5a16:	2317      	movs	r3, #23
    5a18:	e088      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    5a1a:	693b      	ldr	r3, [r7, #16]
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	b2db      	uxtb	r3, r3
    5a20:	2202      	movs	r2, #2
    5a22:	4393      	bics	r3, r2
    5a24:	b2da      	uxtb	r2, r3
    5a26:	693b      	ldr	r3, [r7, #16]
    5a28:	701a      	strb	r2, [r3, #0]

	if(config->enable == false) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	785b      	ldrb	r3, [r3, #1]
    5a2e:	2201      	movs	r2, #1
    5a30:	4053      	eors	r3, r2
    5a32:	b2db      	uxtb	r3, r3
    5a34:	2b00      	cmp	r3, #0
    5a36:	d001      	beq.n	5a3c <wdt_set_config+0x6c>
		return STATUS_OK;
    5a38:	2300      	movs	r3, #0
    5a3a:	e077      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	789a      	ldrb	r2, [r3, #2]
    5a40:	1c3b      	adds	r3, r7, #0
    5a42:	330c      	adds	r3, #12
    5a44:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    5a46:	1c3b      	adds	r3, r7, #0
    5a48:	330c      	adds	r3, #12
    5a4a:	2001      	movs	r0, #1
    5a4c:	1c19      	adds	r1, r3, #0
    5a4e:	4b3c      	ldr	r3, [pc, #240]	; (5b40 <wdt_set_config+0x170>)
    5a50:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    5a52:	2001      	movs	r0, #1
    5a54:	4b3b      	ldr	r3, [pc, #236]	; (5b44 <wdt_set_config+0x174>)
    5a56:	4798      	blx	r3
	if (config->always_on) {
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	d003      	beq.n	5a68 <wdt_set_config+0x98>
		system_gclk_chan_lock(WDT_GCLK_ID);
    5a60:	2001      	movs	r0, #1
    5a62:	4b39      	ldr	r3, [pc, #228]	; (5b48 <wdt_set_config+0x178>)
    5a64:	4798      	blx	r3
	}

	while (wdt_is_syncing()) {
    5a66:	e7ff      	b.n	5a68 <wdt_set_config+0x98>
    5a68:	46c0      	nop			; (mov r8, r8)
    5a6a:	4b38      	ldr	r3, [pc, #224]	; (5b4c <wdt_set_config+0x17c>)
    5a6c:	4798      	blx	r3
    5a6e:	1c03      	adds	r3, r0, #0
    5a70:	2b00      	cmp	r3, #0
    5a72:	d1fa      	bne.n	5a6a <wdt_set_config+0x9a>
		/* Wait for all hardware modules to complete synchronization */
	}

	uint32_t new_config = 0;
    5a74:	2300      	movs	r3, #0
    5a76:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	78db      	ldrb	r3, [r3, #3]
    5a7c:	3b01      	subs	r3, #1
    5a7e:	697a      	ldr	r2, [r7, #20]
    5a80:	4313      	orrs	r3, r2
    5a82:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	791b      	ldrb	r3, [r3, #4]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d00f      	beq.n	5aac <wdt_set_config+0xdc>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    5a8c:	693b      	ldr	r3, [r7, #16]
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	b2db      	uxtb	r3, r3
    5a92:	2204      	movs	r2, #4
    5a94:	4313      	orrs	r3, r2
    5a96:	b2da      	uxtb	r2, r3
    5a98:	693b      	ldr	r3, [r7, #16]
    5a9a:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	791b      	ldrb	r3, [r3, #4]
    5aa0:	3b01      	subs	r3, #1
    5aa2:	011b      	lsls	r3, r3, #4
    5aa4:	697a      	ldr	r2, [r7, #20]
    5aa6:	4313      	orrs	r3, r2
    5aa8:	617b      	str	r3, [r7, #20]
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
	}

	while (wdt_is_syncing()) {
    5aaa:	e007      	b.n	5abc <wdt_set_config+0xec>

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    5aac:	693b      	ldr	r3, [r7, #16]
    5aae:	781b      	ldrb	r3, [r3, #0]
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	2204      	movs	r2, #4
    5ab4:	4393      	bics	r3, r2
    5ab6:	b2da      	uxtb	r2, r3
    5ab8:	693b      	ldr	r3, [r7, #16]
    5aba:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    5abc:	46c0      	nop			; (mov r8, r8)
    5abe:	4b23      	ldr	r3, [pc, #140]	; (5b4c <wdt_set_config+0x17c>)
    5ac0:	4798      	blx	r3
    5ac2:	1c03      	adds	r3, r0, #0
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d1fa      	bne.n	5abe <wdt_set_config+0xee>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    5ac8:	697b      	ldr	r3, [r7, #20]
    5aca:	b2da      	uxtb	r2, r3
    5acc:	693b      	ldr	r3, [r7, #16]
    5ace:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	795b      	ldrb	r3, [r3, #5]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d00c      	beq.n	5af2 <wdt_set_config+0x122>
		while (wdt_is_syncing()) {
    5ad8:	46c0      	nop			; (mov r8, r8)
    5ada:	4b1c      	ldr	r3, [pc, #112]	; (5b4c <wdt_set_config+0x17c>)
    5adc:	4798      	blx	r3
    5ade:	1c03      	adds	r3, r0, #0
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d1fa      	bne.n	5ada <wdt_set_config+0x10a>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	795b      	ldrb	r3, [r3, #5]
    5ae8:	3b01      	subs	r3, #1
    5aea:	b2da      	uxtb	r2, r3
    5aec:	693b      	ldr	r3, [r7, #16]
    5aee:	709a      	strb	r2, [r3, #2]
	}

	while (wdt_is_syncing()) {
    5af0:	e7ff      	b.n	5af2 <wdt_set_config+0x122>
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	4b15      	ldr	r3, [pc, #84]	; (5b4c <wdt_set_config+0x17c>)
    5af6:	4798      	blx	r3
    5af8:	1c03      	adds	r3, r0, #0
    5afa:	2b00      	cmp	r3, #0
    5afc:	d1fa      	bne.n	5af4 <wdt_set_config+0x124>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	781b      	ldrb	r3, [r3, #0]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d009      	beq.n	5b1a <wdt_set_config+0x14a>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    5b06:	693b      	ldr	r3, [r7, #16]
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	b2db      	uxtb	r3, r3
    5b0c:	2280      	movs	r2, #128	; 0x80
    5b0e:	4252      	negs	r2, r2
    5b10:	4313      	orrs	r3, r2
    5b12:	b2da      	uxtb	r2, r3
    5b14:	693b      	ldr	r3, [r7, #16]
    5b16:	701a      	strb	r2, [r3, #0]
    5b18:	e007      	b.n	5b2a <wdt_set_config+0x15a>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    5b1a:	693b      	ldr	r3, [r7, #16]
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	b2db      	uxtb	r3, r3
    5b20:	2202      	movs	r2, #2
    5b22:	4313      	orrs	r3, r2
    5b24:	b2da      	uxtb	r2, r3
    5b26:	693b      	ldr	r3, [r7, #16]
    5b28:	701a      	strb	r2, [r3, #0]
	}

	return STATUS_OK;
    5b2a:	2300      	movs	r3, #0
}
    5b2c:	1c18      	adds	r0, r3, #0
    5b2e:	46bd      	mov	sp, r7
    5b30:	b006      	add	sp, #24
    5b32:	bd80      	pop	{r7, pc}
    5b34:	40001000 	.word	0x40001000
    5b38:	00005921 	.word	0x00005921
    5b3c:	000059a9 	.word	0x000059a9
    5b40:	00014041 	.word	0x00014041
    5b44:	00014081 	.word	0x00014081
    5b48:	0001415d 	.word	0x0001415d
    5b4c:	0000597d 	.word	0x0000597d

00005b50 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    5b50:	b580      	push	{r7, lr}
    5b52:	b082      	sub	sp, #8
    5b54:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5b56:	4b07      	ldr	r3, [pc, #28]	; (5b74 <wdt_reset_count+0x24>)
    5b58:	607b      	str	r3, [r7, #4]

	while (wdt_is_syncing()) {
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	4b06      	ldr	r3, [pc, #24]	; (5b78 <wdt_reset_count+0x28>)
    5b5e:	4798      	blx	r3
    5b60:	1c03      	adds	r3, r0, #0
    5b62:	2b00      	cmp	r3, #0
    5b64:	d1fa      	bne.n	5b5c <wdt_reset_count+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	22a5      	movs	r2, #165	; 0xa5
    5b6a:	721a      	strb	r2, [r3, #8]
}
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b002      	add	sp, #8
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	40001000 	.word	0x40001000
    5b78:	0000597d 	.word	0x0000597d

00005b7c <AccelProvideDecisions>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideDecisions(int16_t value, uint8_t direction,int16_t baseline)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b086      	sub	sp, #24
    5b80:	af00      	add	r7, sp, #0
    5b82:	1dbb      	adds	r3, r7, #6
    5b84:	8018      	strh	r0, [r3, #0]
    5b86:	1d7b      	adds	r3, r7, #5
    5b88:	7019      	strb	r1, [r3, #0]
    5b8a:	1cbb      	adds	r3, r7, #2
    5b8c:	801a      	strh	r2, [r3, #0]
	uint8_t status,i,done; 
	status = 0;
    5b8e:	1c3b      	adds	r3, r7, #0
    5b90:	3317      	adds	r3, #23
    5b92:	2200      	movs	r2, #0
    5b94:	701a      	strb	r2, [r3, #0]
	int32_t temp,temp2;
	uint8_t gainin;

	gainin = table0.Item.MaxForce;
    5b96:	1c3b      	adds	r3, r7, #0
    5b98:	3314      	adds	r3, #20
    5b9a:	4a35      	ldr	r2, [pc, #212]	; (5c70 <AccelProvideDecisions+0xf4>)
    5b9c:	7892      	ldrb	r2, [r2, #2]
    5b9e:	701a      	strb	r2, [r3, #0]
	if (xDecisionBufferFill != 0)
    5ba0:	4b34      	ldr	r3, [pc, #208]	; (5c74 <AccelProvideDecisions+0xf8>)
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d05c      	beq.n	5c62 <AccelProvideDecisions+0xe6>
	{
		done = 0;
    5ba8:	1c3b      	adds	r3, r7, #0
    5baa:	3315      	adds	r3, #21
    5bac:	2200      	movs	r2, #0
    5bae:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5bb0:	1c3b      	adds	r3, r7, #0
    5bb2:	3316      	adds	r3, #22
    5bb4:	2200      	movs	r2, #0
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	e045      	b.n	5c46 <AccelProvideDecisions+0xca>
		{
			temp = xDecisionBuffer[i] - baseline;
    5bba:	1c3b      	adds	r3, r7, #0
    5bbc:	3316      	adds	r3, #22
    5bbe:	781a      	ldrb	r2, [r3, #0]
    5bc0:	4b2d      	ldr	r3, [pc, #180]	; (5c78 <AccelProvideDecisions+0xfc>)
    5bc2:	0052      	lsls	r2, r2, #1
    5bc4:	5ad3      	ldrh	r3, [r2, r3]
    5bc6:	b21a      	sxth	r2, r3
    5bc8:	1cbb      	adds	r3, r7, #2
    5bca:	2100      	movs	r1, #0
    5bcc:	5e5b      	ldrsh	r3, [r3, r1]
    5bce:	1ad3      	subs	r3, r2, r3
    5bd0:	613b      	str	r3, [r7, #16]
			temp2 = gainin*10;
    5bd2:	1c3b      	adds	r3, r7, #0
    5bd4:	3314      	adds	r3, #20
    5bd6:	781a      	ldrb	r2, [r3, #0]
    5bd8:	1c13      	adds	r3, r2, #0
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	189b      	adds	r3, r3, r2
    5bde:	005b      	lsls	r3, r3, #1
    5be0:	60fb      	str	r3, [r7, #12]
			temp2 = temp2/5; 
    5be2:	68fa      	ldr	r2, [r7, #12]
    5be4:	4b25      	ldr	r3, [pc, #148]	; (5c7c <AccelProvideDecisions+0x100>)
    5be6:	1c10      	adds	r0, r2, #0
    5be8:	2105      	movs	r1, #5
    5bea:	4798      	blx	r3
    5bec:	1c03      	adds	r3, r0, #0
    5bee:	60fb      	str	r3, [r7, #12]
			temp = temp * temp2;
    5bf0:	693b      	ldr	r3, [r7, #16]
    5bf2:	68fa      	ldr	r2, [r7, #12]
    5bf4:	4353      	muls	r3, r2
    5bf6:	613b      	str	r3, [r7, #16]
			temp = temp/10; 
    5bf8:	693a      	ldr	r2, [r7, #16]
    5bfa:	4b20      	ldr	r3, [pc, #128]	; (5c7c <AccelProvideDecisions+0x100>)
    5bfc:	1c10      	adds	r0, r2, #0
    5bfe:	210a      	movs	r1, #10
    5c00:	4798      	blx	r3
    5c02:	1c03      	adds	r3, r0, #0
    5c04:	613b      	str	r3, [r7, #16]
			if (direction == DECISION_GREATER)
    5c06:	1d7b      	adds	r3, r7, #5
    5c08:	781b      	ldrb	r3, [r3, #0]
    5c0a:	2b01      	cmp	r3, #1
    5c0c:	d10a      	bne.n	5c24 <AccelProvideDecisions+0xa8>
			{
				if (temp <value)
    5c0e:	1dbb      	adds	r3, r7, #6
    5c10:	2100      	movs	r1, #0
    5c12:	5e5a      	ldrsh	r2, [r3, r1]
    5c14:	693b      	ldr	r3, [r7, #16]
    5c16:	429a      	cmp	r2, r3
    5c18:	dd0e      	ble.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c1a:	1c3b      	adds	r3, r7, #0
    5c1c:	3315      	adds	r3, #21
    5c1e:	2201      	movs	r2, #1
    5c20:	701a      	strb	r2, [r3, #0]
    5c22:	e009      	b.n	5c38 <AccelProvideDecisions+0xbc>
				}
			}
			else
			{
				if (temp >value)
    5c24:	1dbb      	adds	r3, r7, #6
    5c26:	2100      	movs	r1, #0
    5c28:	5e5a      	ldrsh	r2, [r3, r1]
    5c2a:	693b      	ldr	r3, [r7, #16]
    5c2c:	429a      	cmp	r2, r3
    5c2e:	da03      	bge.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c30:	1c3b      	adds	r3, r7, #0
    5c32:	3315      	adds	r3, #21
    5c34:	2201      	movs	r2, #1
    5c36:	701a      	strb	r2, [r3, #0]

	gainin = table0.Item.MaxForce;
	if (xDecisionBufferFill != 0)
	{
		done = 0;
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5c38:	1c3b      	adds	r3, r7, #0
    5c3a:	3316      	adds	r3, #22
    5c3c:	781a      	ldrb	r2, [r3, #0]
    5c3e:	1c3b      	adds	r3, r7, #0
    5c40:	3316      	adds	r3, #22
    5c42:	3201      	adds	r2, #1
    5c44:	701a      	strb	r2, [r3, #0]
    5c46:	1c3b      	adds	r3, r7, #0
    5c48:	3316      	adds	r3, #22
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	2b04      	cmp	r3, #4
    5c4e:	d9b4      	bls.n	5bba <AccelProvideDecisions+0x3e>
				{
					done = 1; 
				}				
			}
		}
		if (done == 0)
    5c50:	1c3b      	adds	r3, r7, #0
    5c52:	3315      	adds	r3, #21
    5c54:	781b      	ldrb	r3, [r3, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d103      	bne.n	5c62 <AccelProvideDecisions+0xe6>
		{
			status = 1;
    5c5a:	1c3b      	adds	r3, r7, #0
    5c5c:	3317      	adds	r3, #23
    5c5e:	2201      	movs	r2, #1
    5c60:	701a      	strb	r2, [r3, #0]
		*y = positionYaverage;
		*z = positionZaverage;
		status = 1; 
	}
*/	
	return status; 
    5c62:	1c3b      	adds	r3, r7, #0
    5c64:	3317      	adds	r3, #23
    5c66:	781b      	ldrb	r3, [r3, #0]
}
    5c68:	1c18      	adds	r0, r3, #0
    5c6a:	46bd      	mov	sp, r7
    5c6c:	b006      	add	sp, #24
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	20002fb8 	.word	0x20002fb8
    5c74:	20000618 	.word	0x20000618
    5c78:	20000608 	.word	0x20000608
    5c7c:	00015875 	.word	0x00015875

00005c80 <AccelProvideReadingChange>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReadingChange(uint16_t *x, uint16_t *y, uint16_t *z,uint8_t *change)
{
    5c80:	b580      	push	{r7, lr}
    5c82:	b086      	sub	sp, #24
    5c84:	af00      	add	r7, sp, #0
    5c86:	60f8      	str	r0, [r7, #12]
    5c88:	60b9      	str	r1, [r7, #8]
    5c8a:	607a      	str	r2, [r7, #4]
    5c8c:	603b      	str	r3, [r7, #0]
	uint8_t status; 
	status = 0;
    5c8e:	1c3b      	adds	r3, r7, #0
    5c90:	3317      	adds	r3, #23
    5c92:	2200      	movs	r2, #0
    5c94:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5c96:	4b14      	ldr	r3, [pc, #80]	; (5ce8 <AccelProvideReadingChange+0x68>)
    5c98:	781b      	ldrb	r3, [r3, #0]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d01c      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
	{
		*x = positionXaverage;
    5c9e:	4b13      	ldr	r3, [pc, #76]	; (5cec <AccelProvideReadingChange+0x6c>)
    5ca0:	881b      	ldrh	r3, [r3, #0]
    5ca2:	b29a      	uxth	r2, r3
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5ca8:	4b11      	ldr	r3, [pc, #68]	; (5cf0 <AccelProvideReadingChange+0x70>)
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	b29a      	uxth	r2, r3
    5cae:	68bb      	ldr	r3, [r7, #8]
    5cb0:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5cb2:	4b10      	ldr	r3, [pc, #64]	; (5cf4 <AccelProvideReadingChange+0x74>)
    5cb4:	881b      	ldrh	r3, [r3, #0]
    5cb6:	b29a      	uxth	r2, r3
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5cbc:	1c3b      	adds	r3, r7, #0
    5cbe:	3317      	adds	r3, #23
    5cc0:	2201      	movs	r2, #1
    5cc2:	701a      	strb	r2, [r3, #0]
		if (accelerometerChange!=0)
    5cc4:	4b0c      	ldr	r3, [pc, #48]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cc6:	781b      	ldrb	r3, [r3, #0]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d005      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
		{
			accelerometerChange = 0; 
    5ccc:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cce:	2200      	movs	r2, #0
    5cd0:	701a      	strb	r2, [r3, #0]
			*change = 1; 
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	2201      	movs	r2, #1
    5cd6:	701a      	strb	r2, [r3, #0]
		}
	}
	return status; 
    5cd8:	1c3b      	adds	r3, r7, #0
    5cda:	3317      	adds	r3, #23
    5cdc:	781b      	ldrb	r3, [r3, #0]
} 
    5cde:	1c18      	adds	r0, r3, #0
    5ce0:	46bd      	mov	sp, r7
    5ce2:	b006      	add	sp, #24
    5ce4:	bd80      	pop	{r7, pc}
    5ce6:	46c0      	nop			; (mov r8, r8)
    5ce8:	200005da 	.word	0x200005da
    5cec:	2000049e 	.word	0x2000049e
    5cf0:	200004a0 	.word	0x200004a0
    5cf4:	200004a2 	.word	0x200004a2
    5cf8:	20000646 	.word	0x20000646

00005cfc <AccelProvideReading>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReading(uint16_t *x, uint16_t *y, uint16_t *z)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b086      	sub	sp, #24
    5d00:	af00      	add	r7, sp, #0
    5d02:	60f8      	str	r0, [r7, #12]
    5d04:	60b9      	str	r1, [r7, #8]
    5d06:	607a      	str	r2, [r7, #4]
	uint8_t status; 
	status = 0;
    5d08:	1c3b      	adds	r3, r7, #0
    5d0a:	3317      	adds	r3, #23
    5d0c:	2200      	movs	r2, #0
    5d0e:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5d10:	4b0e      	ldr	r3, [pc, #56]	; (5d4c <AccelProvideReading+0x50>)
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d012      	beq.n	5d3e <AccelProvideReading+0x42>
	{
		*x = positionXaverage;
    5d18:	4b0d      	ldr	r3, [pc, #52]	; (5d50 <AccelProvideReading+0x54>)
    5d1a:	881b      	ldrh	r3, [r3, #0]
    5d1c:	b29a      	uxth	r2, r3
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5d22:	4b0c      	ldr	r3, [pc, #48]	; (5d54 <AccelProvideReading+0x58>)
    5d24:	881b      	ldrh	r3, [r3, #0]
    5d26:	b29a      	uxth	r2, r3
    5d28:	68bb      	ldr	r3, [r7, #8]
    5d2a:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5d2c:	4b0a      	ldr	r3, [pc, #40]	; (5d58 <AccelProvideReading+0x5c>)
    5d2e:	881b      	ldrh	r3, [r3, #0]
    5d30:	b29a      	uxth	r2, r3
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5d36:	1c3b      	adds	r3, r7, #0
    5d38:	3317      	adds	r3, #23
    5d3a:	2201      	movs	r2, #1
    5d3c:	701a      	strb	r2, [r3, #0]
	}
	return status; 
    5d3e:	1c3b      	adds	r3, r7, #0
    5d40:	3317      	adds	r3, #23
    5d42:	781b      	ldrb	r3, [r3, #0]
}
    5d44:	1c18      	adds	r0, r3, #0
    5d46:	46bd      	mov	sp, r7
    5d48:	b006      	add	sp, #24
    5d4a:	bd80      	pop	{r7, pc}
    5d4c:	200005da 	.word	0x200005da
    5d50:	2000049e 	.word	0x2000049e
    5d54:	200004a0 	.word	0x200004a0
    5d58:	200004a2 	.word	0x200004a2

00005d5c <AccelRead>:
// FUNCTION:   AccelRead
//------------------------------------------------------------------------------
// This function Read a byte from the accelerometer. 
//==============================================================================
uint8_t AccelRead(uint8_t address)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	b084      	sub	sp, #16
    5d60:	af00      	add	r7, sp, #0
    5d62:	1c02      	adds	r2, r0, #0
    5d64:	1dfb      	adds	r3, r7, #7
    5d66:	701a      	strb	r2, [r3, #0]
	{
		value = tempBuffer[0]; 
	}
#endif 
#if BRAKEBOARD
	value = 0;
    5d68:	1c3b      	adds	r3, r7, #0
    5d6a:	330f      	adds	r3, #15
    5d6c:	2200      	movs	r2, #0
    5d6e:	701a      	strb	r2, [r3, #0]
	tempBuffer[0] = 0;
    5d70:	1c3b      	adds	r3, r7, #0
    5d72:	330c      	adds	r3, #12
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
	if (I2CAccelBufferRead(tempBuffer,address,1)!= 0)
    5d78:	1c3a      	adds	r2, r7, #0
    5d7a:	320c      	adds	r2, #12
    5d7c:	1dfb      	adds	r3, r7, #7
    5d7e:	781b      	ldrb	r3, [r3, #0]
    5d80:	1c10      	adds	r0, r2, #0
    5d82:	1c19      	adds	r1, r3, #0
    5d84:	2201      	movs	r2, #1
    5d86:	4b09      	ldr	r3, [pc, #36]	; (5dac <AccelRead+0x50>)
    5d88:	4798      	blx	r3
    5d8a:	1c03      	adds	r3, r0, #0
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d005      	beq.n	5d9c <AccelRead+0x40>
	{
		value = tempBuffer[0];
    5d90:	1c3b      	adds	r3, r7, #0
    5d92:	330f      	adds	r3, #15
    5d94:	1c3a      	adds	r2, r7, #0
    5d96:	320c      	adds	r2, #12
    5d98:	7812      	ldrb	r2, [r2, #0]
    5d9a:	701a      	strb	r2, [r3, #0]
	}
#endif
	return value;
    5d9c:	1c3b      	adds	r3, r7, #0
    5d9e:	330f      	adds	r3, #15
    5da0:	781b      	ldrb	r3, [r3, #0]
} 
    5da2:	1c18      	adds	r0, r3, #0
    5da4:	46bd      	mov	sp, r7
    5da6:	b004      	add	sp, #16
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	0000c365 	.word	0x0000c365

00005db0 <AccelWrite>:
// FUNCTION:   AccelWrite
//------------------------------------------------------------------------------
// This function will write a byte to the accelerometer
//==============================================================================
void AccelWrite(uint8_t address, uint8_t data)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b084      	sub	sp, #16
    5db4:	af00      	add	r7, sp, #0
    5db6:	1c0a      	adds	r2, r1, #0
    5db8:	1dfb      	adds	r3, r7, #7
    5dba:	1c01      	adds	r1, r0, #0
    5dbc:	7019      	strb	r1, [r3, #0]
    5dbe:	1dbb      	adds	r3, r7, #6
    5dc0:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[3];
 	tempBuffer[0] = data;
    5dc2:	1c3b      	adds	r3, r7, #0
    5dc4:	330c      	adds	r3, #12
    5dc6:	1dba      	adds	r2, r7, #6
    5dc8:	7812      	ldrb	r2, [r2, #0]
    5dca:	701a      	strb	r2, [r3, #0]
 	if (SPIAInOut(address,tempBuffer,1)!= 0)
 	{
 	}
#endif
#if BRAKEBOARD
	if (I2CAccelBufferWrite(tempBuffer,address,1)!= 0)
    5dcc:	1c3a      	adds	r2, r7, #0
    5dce:	320c      	adds	r2, #12
    5dd0:	1dfb      	adds	r3, r7, #7
    5dd2:	781b      	ldrb	r3, [r3, #0]
    5dd4:	1c10      	adds	r0, r2, #0
    5dd6:	1c19      	adds	r1, r3, #0
    5dd8:	2201      	movs	r2, #1
    5dda:	4b02      	ldr	r3, [pc, #8]	; (5de4 <AccelWrite+0x34>)
    5ddc:	4798      	blx	r3
	{
		
	}
#endif	 
}
    5dde:	46bd      	mov	sp, r7
    5de0:	b004      	add	sp, #16
    5de2:	bd80      	pop	{r7, pc}
    5de4:	0000c4e5 	.word	0x0000c4e5

00005de8 <AccelInit>:
// FUNCTION:   AccelIinit
//------------------------------------------------------------------------------
// This function will Initialize the accelerometer
//==============================================================================
uint8_t AccelInit(void)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
//  GPIO_Init(GPIOC, &GPIO_InitStructure);
 
  //------------------------------------------------
  // Turn on the sensor and Enable X, Y, and Z
  //------------------------------------------------
  AccelWrite(MEMS_CTRL_REG1, ( 0x90 | MEMS_Z_ENABLE
    5dee:	2020      	movs	r0, #32
    5df0:	2197      	movs	r1, #151	; 0x97
    5df2:	4b2c      	ldr	r3, [pc, #176]	; (5ea4 <AccelInit+0xbc>)
    5df4:	4798      	blx	r3
                                       | MEMS_Y_ENABLE | MEMS_X_ENABLE ));
  //-----------------------------------------
  // Set up the Interrupt pin configuration(s)
//  AccelWrite(MEMS_CTRL_REG3, ( MEMS_ICFG_FF_WU ));
	AccelWrite(0x23, ( 0x08 )); 
    5df6:	2023      	movs	r0, #35	; 0x23
    5df8:	2108      	movs	r1, #8
    5dfa:	4b2a      	ldr	r3, [pc, #168]	; (5ea4 <AccelInit+0xbc>)
    5dfc:	4798      	blx	r3
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5dfe:	1dfb      	adds	r3, r7, #7
    5e00:	2200      	movs	r2, #0
    5e02:	701a      	strb	r2, [r3, #0]
    5e04:	e016      	b.n	5e34 <AccelInit+0x4c>
	{
		xPositionBuffer[i]=0;
    5e06:	1dfb      	adds	r3, r7, #7
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	4b27      	ldr	r3, [pc, #156]	; (5ea8 <AccelInit+0xc0>)
    5e0c:	0052      	lsls	r2, r2, #1
    5e0e:	2100      	movs	r1, #0
    5e10:	52d1      	strh	r1, [r2, r3]
		yPositionBuffer[i]=0;
    5e12:	1dfb      	adds	r3, r7, #7
    5e14:	781a      	ldrb	r2, [r3, #0]
    5e16:	4b25      	ldr	r3, [pc, #148]	; (5eac <AccelInit+0xc4>)
    5e18:	0052      	lsls	r2, r2, #1
    5e1a:	2100      	movs	r1, #0
    5e1c:	52d1      	strh	r1, [r2, r3]
		zPositionBuffer[i]=0;
    5e1e:	1dfb      	adds	r3, r7, #7
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	4b23      	ldr	r3, [pc, #140]	; (5eb0 <AccelInit+0xc8>)
    5e24:	0052      	lsls	r2, r2, #1
    5e26:	2100      	movs	r1, #0
    5e28:	52d1      	strh	r1, [r2, r3]
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5e2a:	1dfb      	adds	r3, r7, #7
    5e2c:	781a      	ldrb	r2, [r3, #0]
    5e2e:	1dfb      	adds	r3, r7, #7
    5e30:	3201      	adds	r2, #1
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	1dfb      	adds	r3, r7, #7
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	2b13      	cmp	r3, #19
    5e3a:	d9e4      	bls.n	5e06 <AccelInit+0x1e>
	{
		xPositionBuffer[i]=0;
		yPositionBuffer[i]=0;
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
    5e3c:	4b1d      	ldr	r3, [pc, #116]	; (5eb4 <AccelInit+0xcc>)
    5e3e:	2200      	movs	r2, #0
    5e40:	701a      	strb	r2, [r3, #0]
	acceleromterFirstFill=0;
    5e42:	4b1d      	ldr	r3, [pc, #116]	; (5eb8 <AccelInit+0xd0>)
    5e44:	2200      	movs	r2, #0
    5e46:	701a      	strb	r2, [r3, #0]
	accelerometerChange=0;
    5e48:	4b1c      	ldr	r3, [pc, #112]	; (5ebc <AccelInit+0xd4>)
    5e4a:	2200      	movs	r2, #0
    5e4c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e4e:	1dfb      	adds	r3, r7, #7
    5e50:	2200      	movs	r2, #0
    5e52:	701a      	strb	r2, [r3, #0]
    5e54:	e007      	b.n	5e66 <AccelInit+0x7e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
    5e56:	4b1a      	ldr	r3, [pc, #104]	; (5ec0 <AccelInit+0xd8>)
    5e58:	2200      	movs	r2, #0
    5e5a:	815a      	strh	r2, [r3, #10]
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
	acceleromterFirstFill=0;
	accelerometerChange=0;
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e5c:	1dfb      	adds	r3, r7, #7
    5e5e:	781a      	ldrb	r2, [r3, #0]
    5e60:	1dfb      	adds	r3, r7, #7
    5e62:	3201      	adds	r2, #1
    5e64:	701a      	strb	r2, [r3, #0]
    5e66:	1dfb      	adds	r3, r7, #7
    5e68:	781b      	ldrb	r3, [r3, #0]
    5e6a:	2b04      	cmp	r3, #4
    5e6c:	d9f3      	bls.n	5e56 <AccelInit+0x6e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
	}
	xDecisionBufferOffset=0;
    5e6e:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <AccelInit+0xdc>)
    5e70:	2200      	movs	r2, #0
    5e72:	701a      	strb	r2, [r3, #0]
	xDecisionBufferFill=0; 	
    5e74:	4b14      	ldr	r3, [pc, #80]	; (5ec8 <AccelInit+0xe0>)
    5e76:	2200      	movs	r2, #0
    5e78:	701a      	strb	r2, [r3, #0]
  //---------------------------------
  // Clear the interrupt latch
 // AccelRead(MEMS_FF_WU_SRC);    // Only use if int latched
 	AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,0); 
    5e7a:	2004      	movs	r0, #4
    5e7c:	2101      	movs	r1, #1
    5e7e:	2200      	movs	r2, #0
    5e80:	4b12      	ldr	r3, [pc, #72]	; (5ecc <AccelInit+0xe4>)
    5e82:	4798      	blx	r3
	if (AccelWhoAmI()== 0x33)
    5e84:	4b12      	ldr	r3, [pc, #72]	; (5ed0 <AccelInit+0xe8>)
    5e86:	4798      	blx	r3
    5e88:	1c03      	adds	r3, r0, #0
    5e8a:	2b33      	cmp	r3, #51	; 0x33
    5e8c:	d104      	bne.n	5e98 <AccelInit+0xb0>
	{
		AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,1);		
    5e8e:	2004      	movs	r0, #4
    5e90:	2101      	movs	r1, #1
    5e92:	2201      	movs	r2, #1
    5e94:	4b0d      	ldr	r3, [pc, #52]	; (5ecc <AccelInit+0xe4>)
    5e96:	4798      	blx	r3
	}
   return 1;
    5e98:	2301      	movs	r3, #1
}
    5e9a:	1c18      	adds	r0, r3, #0
    5e9c:	46bd      	mov	sp, r7
    5e9e:	b002      	add	sp, #8
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	00005db1 	.word	0x00005db1
    5ea8:	200005ac 	.word	0x200005ac
    5eac:	200005dc 	.word	0x200005dc
    5eb0:	2000061c 	.word	0x2000061c
    5eb4:	20000612 	.word	0x20000612
    5eb8:	200005da 	.word	0x200005da
    5ebc:	20000646 	.word	0x20000646
    5ec0:	20000608 	.word	0x20000608
    5ec4:	20000604 	.word	0x20000604
    5ec8:	20000618 	.word	0x20000618
    5ecc:	0000f635 	.word	0x0000f635
    5ed0:	0000618d 	.word	0x0000618d

00005ed4 <AccelProcess>:
// FUNCTION:   AccelProcess
//------------------------------------------------------------------------------
// This function will Process accelerometer data
//==============================================================================
void AccelProcess(void)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b084      	sub	sp, #16
    5ed8:	af00      	add	r7, sp, #0
	uint16_t itemp,itemp2; 
	int32_t ltemp; 
	uint8_t i; 
  // Is new 3-axis accelerometer data is available?
  
  if(AccelDataAvailable())
    5eda:	4b96      	ldr	r3, [pc, #600]	; (6134 <AccelProcess+0x260>)
    5edc:	4798      	blx	r3
    5ede:	1c03      	adds	r3, r0, #0
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d100      	bne.n	5ee6 <AccelProcess+0x12>
    5ee4:	e11c      	b.n	6120 <AccelProcess+0x24c>
    //------------------------------
    // Get movement
    //------------------------------
    //----------------------------------------
    // Store instantaneous accelerometer measurements in averaging Array
	itemp = AccelRead(MEMS_OUT_X_H);
    5ee6:	2029      	movs	r0, #41	; 0x29
    5ee8:	4b93      	ldr	r3, [pc, #588]	; (6138 <AccelProcess+0x264>)
    5eea:	4798      	blx	r3
    5eec:	1c03      	adds	r3, r0, #0
    5eee:	1c1a      	adds	r2, r3, #0
    5ef0:	1c3b      	adds	r3, r7, #0
    5ef2:	330c      	adds	r3, #12
    5ef4:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_X_L);
    5ef6:	2028      	movs	r0, #40	; 0x28
    5ef8:	4b8f      	ldr	r3, [pc, #572]	; (6138 <AccelProcess+0x264>)
    5efa:	4798      	blx	r3
    5efc:	1c03      	adds	r3, r0, #0
    5efe:	1c1a      	adds	r2, r3, #0
    5f00:	1c3b      	adds	r3, r7, #0
    5f02:	330a      	adds	r3, #10
    5f04:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f06:	1c3b      	adds	r3, r7, #0
    5f08:	330c      	adds	r3, #12
    5f0a:	1c3a      	adds	r2, r7, #0
    5f0c:	320c      	adds	r2, #12
    5f0e:	8812      	ldrh	r2, [r2, #0]
    5f10:	0212      	lsls	r2, r2, #8
    5f12:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    5f14:	1c3b      	adds	r3, r7, #0
    5f16:	330c      	adds	r3, #12
    5f18:	1c39      	adds	r1, r7, #0
    5f1a:	310c      	adds	r1, #12
    5f1c:	1c3a      	adds	r2, r7, #0
    5f1e:	320a      	adds	r2, #10
    5f20:	8809      	ldrh	r1, [r1, #0]
    5f22:	8812      	ldrh	r2, [r2, #0]
    5f24:	430a      	orrs	r2, r1
    5f26:	801a      	strh	r2, [r3, #0]
	position_x  = itemp;
    5f28:	1c3b      	adds	r3, r7, #0
    5f2a:	330c      	adds	r3, #12
    5f2c:	881a      	ldrh	r2, [r3, #0]
    5f2e:	4b83      	ldr	r3, [pc, #524]	; (613c <AccelProcess+0x268>)
    5f30:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Y_H);
    5f32:	202b      	movs	r0, #43	; 0x2b
    5f34:	4b80      	ldr	r3, [pc, #512]	; (6138 <AccelProcess+0x264>)
    5f36:	4798      	blx	r3
    5f38:	1c03      	adds	r3, r0, #0
    5f3a:	1c1a      	adds	r2, r3, #0
    5f3c:	1c3b      	adds	r3, r7, #0
    5f3e:	330c      	adds	r3, #12
    5f40:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Y_L);
    5f42:	202a      	movs	r0, #42	; 0x2a
    5f44:	4b7c      	ldr	r3, [pc, #496]	; (6138 <AccelProcess+0x264>)
    5f46:	4798      	blx	r3
    5f48:	1c03      	adds	r3, r0, #0
    5f4a:	1c1a      	adds	r2, r3, #0
    5f4c:	1c3b      	adds	r3, r7, #0
    5f4e:	330a      	adds	r3, #10
    5f50:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f52:	1c3b      	adds	r3, r7, #0
    5f54:	330c      	adds	r3, #12
    5f56:	1c3a      	adds	r2, r7, #0
    5f58:	320c      	adds	r2, #12
    5f5a:	8812      	ldrh	r2, [r2, #0]
    5f5c:	0212      	lsls	r2, r2, #8
    5f5e:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	
    5f60:	1c3b      	adds	r3, r7, #0
    5f62:	330c      	adds	r3, #12
    5f64:	1c39      	adds	r1, r7, #0
    5f66:	310c      	adds	r1, #12
    5f68:	1c3a      	adds	r2, r7, #0
    5f6a:	320a      	adds	r2, #10
    5f6c:	8809      	ldrh	r1, [r1, #0]
    5f6e:	8812      	ldrh	r2, [r2, #0]
    5f70:	430a      	orrs	r2, r1
    5f72:	801a      	strh	r2, [r3, #0]
	position_y  = itemp;
    5f74:	1c3b      	adds	r3, r7, #0
    5f76:	330c      	adds	r3, #12
    5f78:	881a      	ldrh	r2, [r3, #0]
    5f7a:	4b71      	ldr	r3, [pc, #452]	; (6140 <AccelProcess+0x26c>)
    5f7c:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Z_H);
    5f7e:	202d      	movs	r0, #45	; 0x2d
    5f80:	4b6d      	ldr	r3, [pc, #436]	; (6138 <AccelProcess+0x264>)
    5f82:	4798      	blx	r3
    5f84:	1c03      	adds	r3, r0, #0
    5f86:	1c1a      	adds	r2, r3, #0
    5f88:	1c3b      	adds	r3, r7, #0
    5f8a:	330c      	adds	r3, #12
    5f8c:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Z_L);
    5f8e:	202c      	movs	r0, #44	; 0x2c
    5f90:	4b69      	ldr	r3, [pc, #420]	; (6138 <AccelProcess+0x264>)
    5f92:	4798      	blx	r3
    5f94:	1c03      	adds	r3, r0, #0
    5f96:	1c1a      	adds	r2, r3, #0
    5f98:	1c3b      	adds	r3, r7, #0
    5f9a:	330a      	adds	r3, #10
    5f9c:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f9e:	1c3b      	adds	r3, r7, #0
    5fa0:	330c      	adds	r3, #12
    5fa2:	1c3a      	adds	r2, r7, #0
    5fa4:	320c      	adds	r2, #12
    5fa6:	8812      	ldrh	r2, [r2, #0]
    5fa8:	0212      	lsls	r2, r2, #8
    5faa:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	 
    5fac:	1c3b      	adds	r3, r7, #0
    5fae:	330c      	adds	r3, #12
    5fb0:	1c39      	adds	r1, r7, #0
    5fb2:	310c      	adds	r1, #12
    5fb4:	1c3a      	adds	r2, r7, #0
    5fb6:	320a      	adds	r2, #10
    5fb8:	8809      	ldrh	r1, [r1, #0]
    5fba:	8812      	ldrh	r2, [r2, #0]
    5fbc:	430a      	orrs	r2, r1
    5fbe:	801a      	strh	r2, [r3, #0]
	position_z  = itemp;
    5fc0:	1c3b      	adds	r3, r7, #0
    5fc2:	330c      	adds	r3, #12
    5fc4:	881a      	ldrh	r2, [r3, #0]
    5fc6:	4b5f      	ldr	r3, [pc, #380]	; (6144 <AccelProcess+0x270>)
    5fc8:	801a      	strh	r2, [r3, #0]
 
	//--------------------------
	// place in buffer 
 	xPositionBuffer[accelerometerOffset]=position_x;
    5fca:	4b5f      	ldr	r3, [pc, #380]	; (6148 <AccelProcess+0x274>)
    5fcc:	781b      	ldrb	r3, [r3, #0]
    5fce:	1c1a      	adds	r2, r3, #0
    5fd0:	4b5a      	ldr	r3, [pc, #360]	; (613c <AccelProcess+0x268>)
    5fd2:	8819      	ldrh	r1, [r3, #0]
    5fd4:	4b5d      	ldr	r3, [pc, #372]	; (614c <AccelProcess+0x278>)
    5fd6:	0052      	lsls	r2, r2, #1
    5fd8:	52d1      	strh	r1, [r2, r3]
	yPositionBuffer[accelerometerOffset]=position_y;
    5fda:	4b5b      	ldr	r3, [pc, #364]	; (6148 <AccelProcess+0x274>)
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	1c1a      	adds	r2, r3, #0
    5fe0:	4b57      	ldr	r3, [pc, #348]	; (6140 <AccelProcess+0x26c>)
    5fe2:	8819      	ldrh	r1, [r3, #0]
    5fe4:	4b5a      	ldr	r3, [pc, #360]	; (6150 <AccelProcess+0x27c>)
    5fe6:	0052      	lsls	r2, r2, #1
    5fe8:	52d1      	strh	r1, [r2, r3]
	zPositionBuffer[accelerometerOffset]=position_z;
    5fea:	4b57      	ldr	r3, [pc, #348]	; (6148 <AccelProcess+0x274>)
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	1c1a      	adds	r2, r3, #0
    5ff0:	4b54      	ldr	r3, [pc, #336]	; (6144 <AccelProcess+0x270>)
    5ff2:	8819      	ldrh	r1, [r3, #0]
    5ff4:	4b57      	ldr	r3, [pc, #348]	; (6154 <AccelProcess+0x280>)
    5ff6:	0052      	lsls	r2, r2, #1
    5ff8:	52d1      	strh	r1, [r2, r3]
	accelerometerOffset++;
    5ffa:	4b53      	ldr	r3, [pc, #332]	; (6148 <AccelProcess+0x274>)
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	3301      	adds	r3, #1
    6000:	b2da      	uxtb	r2, r3
    6002:	4b51      	ldr	r3, [pc, #324]	; (6148 <AccelProcess+0x274>)
    6004:	701a      	strb	r2, [r3, #0]
	if (accelerometerOffset >= MAX_ACCELEROMETER_BUFFER)
    6006:	4b50      	ldr	r3, [pc, #320]	; (6148 <AccelProcess+0x274>)
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	2b13      	cmp	r3, #19
    600c:	d96c      	bls.n	60e8 <AccelProcess+0x214>
	{
	
		accelerometerOffset=0;
    600e:	4b4e      	ldr	r3, [pc, #312]	; (6148 <AccelProcess+0x274>)
    6010:	2200      	movs	r2, #0
    6012:	701a      	strb	r2, [r3, #0]
		acceleromterFirstFill=1; 
    6014:	4b50      	ldr	r3, [pc, #320]	; (6158 <AccelProcess+0x284>)
    6016:	2201      	movs	r2, #1
    6018:	701a      	strb	r2, [r3, #0]
		accelerometerChange = 1; 
    601a:	4b50      	ldr	r3, [pc, #320]	; (615c <AccelProcess+0x288>)
    601c:	2201      	movs	r2, #1
    601e:	701a      	strb	r2, [r3, #0]
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
    6020:	4b4f      	ldr	r3, [pc, #316]	; (6160 <AccelProcess+0x28c>)
    6022:	2200      	movs	r2, #0
    6024:	601a      	str	r2, [r3, #0]
    6026:	4b4e      	ldr	r3, [pc, #312]	; (6160 <AccelProcess+0x28c>)
    6028:	681a      	ldr	r2, [r3, #0]
    602a:	4b4e      	ldr	r3, [pc, #312]	; (6164 <AccelProcess+0x290>)
    602c:	601a      	str	r2, [r3, #0]
    602e:	4b4d      	ldr	r3, [pc, #308]	; (6164 <AccelProcess+0x290>)
    6030:	681a      	ldr	r2, [r3, #0]
    6032:	4b4d      	ldr	r3, [pc, #308]	; (6168 <AccelProcess+0x294>)
    6034:	601a      	str	r2, [r3, #0]
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6036:	1c3b      	adds	r3, r7, #0
    6038:	330f      	adds	r3, #15
    603a:	2200      	movs	r2, #0
    603c:	701a      	strb	r2, [r3, #0]
    603e:	e02a      	b.n	6096 <AccelProcess+0x1c2>
		{
		  sumx += xPositionBuffer[i];
    6040:	1c3b      	adds	r3, r7, #0
    6042:	330f      	adds	r3, #15
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	4b41      	ldr	r3, [pc, #260]	; (614c <AccelProcess+0x278>)
    6048:	0052      	lsls	r2, r2, #1
    604a:	5ad3      	ldrh	r3, [r2, r3]
    604c:	b21a      	sxth	r2, r3
    604e:	4b46      	ldr	r3, [pc, #280]	; (6168 <AccelProcess+0x294>)
    6050:	681b      	ldr	r3, [r3, #0]
    6052:	18d2      	adds	r2, r2, r3
    6054:	4b44      	ldr	r3, [pc, #272]	; (6168 <AccelProcess+0x294>)
    6056:	601a      	str	r2, [r3, #0]
		  sumy += yPositionBuffer[i];
    6058:	1c3b      	adds	r3, r7, #0
    605a:	330f      	adds	r3, #15
    605c:	781a      	ldrb	r2, [r3, #0]
    605e:	4b3c      	ldr	r3, [pc, #240]	; (6150 <AccelProcess+0x27c>)
    6060:	0052      	lsls	r2, r2, #1
    6062:	5ad3      	ldrh	r3, [r2, r3]
    6064:	b21a      	sxth	r2, r3
    6066:	4b3f      	ldr	r3, [pc, #252]	; (6164 <AccelProcess+0x290>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	18d2      	adds	r2, r2, r3
    606c:	4b3d      	ldr	r3, [pc, #244]	; (6164 <AccelProcess+0x290>)
    606e:	601a      	str	r2, [r3, #0]
		  sumz += zPositionBuffer[i];
    6070:	1c3b      	adds	r3, r7, #0
    6072:	330f      	adds	r3, #15
    6074:	781a      	ldrb	r2, [r3, #0]
    6076:	4b37      	ldr	r3, [pc, #220]	; (6154 <AccelProcess+0x280>)
    6078:	0052      	lsls	r2, r2, #1
    607a:	5ad3      	ldrh	r3, [r2, r3]
    607c:	b21a      	sxth	r2, r3
    607e:	4b38      	ldr	r3, [pc, #224]	; (6160 <AccelProcess+0x28c>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	18d2      	adds	r2, r2, r3
    6084:	4b36      	ldr	r3, [pc, #216]	; (6160 <AccelProcess+0x28c>)
    6086:	601a      	str	r2, [r3, #0]
		acceleromterFirstFill=1; 
		accelerometerChange = 1; 
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6088:	1c3b      	adds	r3, r7, #0
    608a:	330f      	adds	r3, #15
    608c:	781a      	ldrb	r2, [r3, #0]
    608e:	1c3b      	adds	r3, r7, #0
    6090:	330f      	adds	r3, #15
    6092:	3201      	adds	r2, #1
    6094:	701a      	strb	r2, [r3, #0]
    6096:	1c3b      	adds	r3, r7, #0
    6098:	330f      	adds	r3, #15
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	2b13      	cmp	r3, #19
    609e:	d9cf      	bls.n	6040 <AccelProcess+0x16c>
		{
		  sumx += xPositionBuffer[i];
		  sumy += yPositionBuffer[i];
		  sumz += zPositionBuffer[i];
		}
		ltemp = sumx/MAX_ACCELEROMETER_BUFFER;
    60a0:	4b31      	ldr	r3, [pc, #196]	; (6168 <AccelProcess+0x294>)
    60a2:	681a      	ldr	r2, [r3, #0]
    60a4:	4b31      	ldr	r3, [pc, #196]	; (616c <AccelProcess+0x298>)
    60a6:	1c10      	adds	r0, r2, #0
    60a8:	2114      	movs	r1, #20
    60aa:	4798      	blx	r3
    60ac:	1c03      	adds	r3, r0, #0
    60ae:	607b      	str	r3, [r7, #4]
		positionXaverage = ltemp;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	b29a      	uxth	r2, r3
    60b4:	4b2e      	ldr	r3, [pc, #184]	; (6170 <AccelProcess+0x29c>)
    60b6:	801a      	strh	r2, [r3, #0]
		ltemp = sumy/MAX_ACCELEROMETER_BUFFER;
    60b8:	4b2a      	ldr	r3, [pc, #168]	; (6164 <AccelProcess+0x290>)
    60ba:	681a      	ldr	r2, [r3, #0]
    60bc:	4b2b      	ldr	r3, [pc, #172]	; (616c <AccelProcess+0x298>)
    60be:	1c10      	adds	r0, r2, #0
    60c0:	2114      	movs	r1, #20
    60c2:	4798      	blx	r3
    60c4:	1c03      	adds	r3, r0, #0
    60c6:	607b      	str	r3, [r7, #4]
		positionYaverage = ltemp;	
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	b29a      	uxth	r2, r3
    60cc:	4b29      	ldr	r3, [pc, #164]	; (6174 <AccelProcess+0x2a0>)
    60ce:	801a      	strh	r2, [r3, #0]
		ltemp = sumz/MAX_ACCELEROMETER_BUFFER;
    60d0:	4b23      	ldr	r3, [pc, #140]	; (6160 <AccelProcess+0x28c>)
    60d2:	681a      	ldr	r2, [r3, #0]
    60d4:	4b25      	ldr	r3, [pc, #148]	; (616c <AccelProcess+0x298>)
    60d6:	1c10      	adds	r0, r2, #0
    60d8:	2114      	movs	r1, #20
    60da:	4798      	blx	r3
    60dc:	1c03      	adds	r3, r0, #0
    60de:	607b      	str	r3, [r7, #4]
		positionZaverage = ltemp;	
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	b29a      	uxth	r2, r3
    60e4:	4b24      	ldr	r3, [pc, #144]	; (6178 <AccelProcess+0x2a4>)
    60e6:	801a      	strh	r2, [r3, #0]
	}
	//-----------------fill decision buffer
	if (accelerometerOffset == 0)
    60e8:	4b17      	ldr	r3, [pc, #92]	; (6148 <AccelProcess+0x274>)
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d117      	bne.n	6120 <AccelProcess+0x24c>
	{
		xDecisionBuffer[xDecisionBufferOffset] = positionXaverage;
    60f0:	4b22      	ldr	r3, [pc, #136]	; (617c <AccelProcess+0x2a8>)
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	1c1a      	adds	r2, r3, #0
    60f6:	4b1e      	ldr	r3, [pc, #120]	; (6170 <AccelProcess+0x29c>)
    60f8:	8819      	ldrh	r1, [r3, #0]
    60fa:	4b21      	ldr	r3, [pc, #132]	; (6180 <AccelProcess+0x2ac>)
    60fc:	0052      	lsls	r2, r2, #1
    60fe:	52d1      	strh	r1, [r2, r3]
		xDecisionBufferOffset++;
    6100:	4b1e      	ldr	r3, [pc, #120]	; (617c <AccelProcess+0x2a8>)
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	3301      	adds	r3, #1
    6106:	b2da      	uxtb	r2, r3
    6108:	4b1c      	ldr	r3, [pc, #112]	; (617c <AccelProcess+0x2a8>)
    610a:	701a      	strb	r2, [r3, #0]
		if (xDecisionBufferOffset >= MAX_DECISION_BUFFER)
    610c:	4b1b      	ldr	r3, [pc, #108]	; (617c <AccelProcess+0x2a8>)
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b04      	cmp	r3, #4
    6112:	d905      	bls.n	6120 <AccelProcess+0x24c>
		{
			xDecisionBufferOffset = 0; 
    6114:	4b19      	ldr	r3, [pc, #100]	; (617c <AccelProcess+0x2a8>)
    6116:	2200      	movs	r2, #0
    6118:	701a      	strb	r2, [r3, #0]
			xDecisionBufferFill=1; 	
    611a:	4b1a      	ldr	r3, [pc, #104]	; (6184 <AccelProcess+0x2b0>)
    611c:	2201      	movs	r2, #1
    611e:	701a      	strb	r2, [r3, #0]
		}
	}
  }
#if BRAKEBOARD  
  if (accelerometerChange != 0)
    6120:	4b0e      	ldr	r3, [pc, #56]	; (615c <AccelProcess+0x288>)
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	d001      	beq.n	612c <AccelProcess+0x258>
  {
	MotorBuildGetAcc();
    6128:	4b17      	ldr	r3, [pc, #92]	; (6188 <AccelProcess+0x2b4>)
    612a:	4798      	blx	r3
  }
#endif  
}
    612c:	46bd      	mov	sp, r7
    612e:	b004      	add	sp, #16
    6130:	bd80      	pop	{r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	000061b1 	.word	0x000061b1
    6138:	00005d5d 	.word	0x00005d5d
    613c:	20000498 	.word	0x20000498
    6140:	2000049a 	.word	0x2000049a
    6144:	2000049c 	.word	0x2000049c
    6148:	20000612 	.word	0x20000612
    614c:	200005ac 	.word	0x200005ac
    6150:	200005dc 	.word	0x200005dc
    6154:	2000061c 	.word	0x2000061c
    6158:	200005da 	.word	0x200005da
    615c:	20000646 	.word	0x20000646
    6160:	200005a8 	.word	0x200005a8
    6164:	200005d4 	.word	0x200005d4
    6168:	20000614 	.word	0x20000614
    616c:	00015875 	.word	0x00015875
    6170:	2000049e 	.word	0x2000049e
    6174:	200004a0 	.word	0x200004a0
    6178:	200004a2 	.word	0x200004a2
    617c:	20000604 	.word	0x20000604
    6180:	20000608 	.word	0x20000608
    6184:	20000618 	.word	0x20000618
    6188:	00008f5d 	.word	0x00008f5d

0000618c <AccelWhoAmI>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function will get the 
//============================================================================== 
uint8_t AccelWhoAmI(void)
{
    618c:	b590      	push	{r4, r7, lr}
    618e:	b083      	sub	sp, #12
    6190:	af00      	add	r7, sp, #0
  uint8_t x;
  //-------------------------
  // Get the Status Register
  //-------------------------
  x = AccelRead(0x0f);
    6192:	1dfc      	adds	r4, r7, #7
    6194:	200f      	movs	r0, #15
    6196:	4b05      	ldr	r3, [pc, #20]	; (61ac <AccelWhoAmI+0x20>)
    6198:	4798      	blx	r3
    619a:	1c03      	adds	r3, r0, #0
    619c:	7023      	strb	r3, [r4, #0]

  return x;
    619e:	1dfb      	adds	r3, r7, #7
    61a0:	781b      	ldrb	r3, [r3, #0]
}
    61a2:	1c18      	adds	r0, r3, #0
    61a4:	46bd      	mov	sp, r7
    61a6:	b003      	add	sp, #12
    61a8:	bd90      	pop	{r4, r7, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	00005d5d 	.word	0x00005d5d

000061b0 <AccelDataAvailable>:
//------------------------------------------------------------------------------
// This function handles Check for Accelerometer data. Returns TRUE if data is 
// available (for all 3 axis), FALSE otherwise
//============================================================================== 
uint8_t AccelDataAvailable(void)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	af00      	add	r7, sp, #0
  { 
    return 1;
  }
  return 0;
*/
	return 1;   
    61b4:	2301      	movs	r3, #1
}
    61b6:	1c18      	adds	r0, r3, #0
    61b8:	46bd      	mov	sp, r7
    61ba:	bd80      	pop	{r7, pc}

000061bc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b084      	sub	sp, #16
    61c0:	af00      	add	r7, sp, #0
    61c2:	1c02      	adds	r2, r0, #0
    61c4:	1dfb      	adds	r3, r7, #7
    61c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    61c8:	1c3b      	adds	r3, r7, #0
    61ca:	330f      	adds	r3, #15
    61cc:	1dfa      	adds	r2, r7, #7
    61ce:	7812      	ldrb	r2, [r2, #0]
    61d0:	09d2      	lsrs	r2, r2, #7
    61d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    61d4:	1c3b      	adds	r3, r7, #0
    61d6:	330e      	adds	r3, #14
    61d8:	1dfa      	adds	r2, r7, #7
    61da:	7812      	ldrb	r2, [r2, #0]
    61dc:	0952      	lsrs	r2, r2, #5
    61de:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    61e0:	4b0d      	ldr	r3, [pc, #52]	; (6218 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    61e2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    61e4:	1c3b      	adds	r3, r7, #0
    61e6:	330f      	adds	r3, #15
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d10e      	bne.n	620c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    61ee:	1c3b      	adds	r3, r7, #0
    61f0:	330f      	adds	r3, #15
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	009b      	lsls	r3, r3, #2
    61f6:	2210      	movs	r2, #16
    61f8:	19d2      	adds	r2, r2, r7
    61fa:	18d3      	adds	r3, r2, r3
    61fc:	3b08      	subs	r3, #8
    61fe:	681a      	ldr	r2, [r3, #0]
    6200:	1c3b      	adds	r3, r7, #0
    6202:	330e      	adds	r3, #14
    6204:	781b      	ldrb	r3, [r3, #0]
    6206:	01db      	lsls	r3, r3, #7
    6208:	18d3      	adds	r3, r2, r3
    620a:	e000      	b.n	620e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    620c:	2300      	movs	r3, #0
	}
}
    620e:	1c18      	adds	r0, r3, #0
    6210:	46bd      	mov	sp, r7
    6212:	b004      	add	sp, #16
    6214:	bd80      	pop	{r7, pc}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	41004400 	.word	0x41004400

0000621c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	1c02      	adds	r2, r0, #0
    6224:	1dfb      	adds	r3, r7, #7
    6226:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6228:	1dfb      	adds	r3, r7, #7
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	1c18      	adds	r0, r3, #0
    622e:	4b03      	ldr	r3, [pc, #12]	; (623c <port_get_group_from_gpio_pin+0x20>)
    6230:	4798      	blx	r3
    6232:	1c03      	adds	r3, r0, #0
}
    6234:	1c18      	adds	r0, r3, #0
    6236:	46bd      	mov	sp, r7
    6238:	b002      	add	sp, #8
    623a:	bd80      	pop	{r7, pc}
    623c:	000061bd 	.word	0x000061bd

00006240 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6240:	b580      	push	{r7, lr}
    6242:	b082      	sub	sp, #8
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	2200      	movs	r2, #0
    624c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	2201      	movs	r2, #1
    6252:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2200      	movs	r2, #0
    6258:	709a      	strb	r2, [r3, #2]
}
    625a:	46bd      	mov	sp, r7
    625c:	b002      	add	sp, #8
    625e:	bd80      	pop	{r7, pc}

00006260 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6260:	b580      	push	{r7, lr}
    6262:	b084      	sub	sp, #16
    6264:	af00      	add	r7, sp, #0
    6266:	1c0a      	adds	r2, r1, #0
    6268:	1dfb      	adds	r3, r7, #7
    626a:	1c01      	adds	r1, r0, #0
    626c:	7019      	strb	r1, [r3, #0]
    626e:	1dbb      	adds	r3, r7, #6
    6270:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6272:	1dfb      	adds	r3, r7, #7
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	1c18      	adds	r0, r3, #0
    6278:	4b0d      	ldr	r3, [pc, #52]	; (62b0 <port_pin_set_output_level+0x50>)
    627a:	4798      	blx	r3
    627c:	1c03      	adds	r3, r0, #0
    627e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6280:	1dfb      	adds	r3, r7, #7
    6282:	781a      	ldrb	r2, [r3, #0]
    6284:	231f      	movs	r3, #31
    6286:	4013      	ands	r3, r2
    6288:	2201      	movs	r2, #1
    628a:	1c11      	adds	r1, r2, #0
    628c:	4099      	lsls	r1, r3
    628e:	1c0b      	adds	r3, r1, #0
    6290:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6292:	1dbb      	adds	r3, r7, #6
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	2b00      	cmp	r3, #0
    6298:	d003      	beq.n	62a2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	68ba      	ldr	r2, [r7, #8]
    629e:	619a      	str	r2, [r3, #24]
    62a0:	e002      	b.n	62a8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	615a      	str	r2, [r3, #20]
	}
}
    62a8:	46bd      	mov	sp, r7
    62aa:	b004      	add	sp, #16
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	0000621d 	.word	0x0000621d

000062b4 <BlockingTimer>:
// FUNCTION: BlockingTimer
//------------------------------------------------------------------------------
//  
//==============================================================================
void BlockingTimer(uint16_t count)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c02      	adds	r2, r0, #0
    62bc:	1dbb      	adds	r3, r7, #6
    62be:	801a      	strh	r2, [r3, #0]
	blockingTime = count; 
    62c0:	4b05      	ldr	r3, [pc, #20]	; (62d8 <BlockingTimer+0x24>)
    62c2:	1dba      	adds	r2, r7, #6
    62c4:	8812      	ldrh	r2, [r2, #0]
    62c6:	801a      	strh	r2, [r3, #0]
	while (blockingTime >0);
    62c8:	46c0      	nop			; (mov r8, r8)
    62ca:	4b03      	ldr	r3, [pc, #12]	; (62d8 <BlockingTimer+0x24>)
    62cc:	881b      	ldrh	r3, [r3, #0]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d1fb      	bne.n	62ca <BlockingTimer+0x16>
}
    62d2:	46bd      	mov	sp, r7
    62d4:	b002      	add	sp, #8
    62d6:	bd80      	pop	{r7, pc}
    62d8:	200036fc 	.word	0x200036fc

000062dc <BluetoothWakeUp>:
// FUNCTION: BluetoothWakeUp
//------------------------------------------------------------------------------
//  
//==============================================================================
uint8_t BluetoothWakeUp(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b082      	sub	sp, #8
    62e0:	af00      	add	r7, sp, #0
 
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);	
    62e2:	1d3b      	adds	r3, r7, #4
    62e4:	1c18      	adds	r0, r3, #0
    62e6:	4b1b      	ldr	r3, [pc, #108]	; (6354 <BluetoothWakeUp+0x78>)
    62e8:	4798      	blx	r3
 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62ea:	1d3b      	adds	r3, r7, #4
    62ec:	2201      	movs	r2, #1
    62ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    62f0:	1d3b      	adds	r3, r7, #4
    62f2:	2009      	movs	r0, #9
    62f4:	1c19      	adds	r1, r3, #0
    62f6:	4b18      	ldr	r3, [pc, #96]	; (6358 <BluetoothWakeUp+0x7c>)
    62f8:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    62fa:	2009      	movs	r0, #9
    62fc:	2100      	movs	r1, #0
    62fe:	4b17      	ldr	r3, [pc, #92]	; (635c <BluetoothWakeUp+0x80>)
    6300:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    6302:	1d3b      	adds	r3, r7, #4
    6304:	2008      	movs	r0, #8
    6306:	1c19      	adds	r1, r3, #0
    6308:	4b13      	ldr	r3, [pc, #76]	; (6358 <BluetoothWakeUp+0x7c>)
    630a:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);   
    630c:	2008      	movs	r0, #8
    630e:	2101      	movs	r1, #1
    6310:	4b12      	ldr	r3, [pc, #72]	; (635c <BluetoothWakeUp+0x80>)
    6312:	4798      	blx	r3
	BlockingTimer(40);
    6314:	2028      	movs	r0, #40	; 0x28
    6316:	4b12      	ldr	r3, [pc, #72]	; (6360 <BluetoothWakeUp+0x84>)
    6318:	4798      	blx	r3
	 
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    631a:	2009      	movs	r0, #9
    631c:	2101      	movs	r1, #1
    631e:	4b0f      	ldr	r3, [pc, #60]	; (635c <BluetoothWakeUp+0x80>)
    6320:	4798      	blx	r3
	BlockingTimer(40);
    6322:	2028      	movs	r0, #40	; 0x28
    6324:	4b0e      	ldr	r3, [pc, #56]	; (6360 <BluetoothWakeUp+0x84>)
    6326:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    6328:	2008      	movs	r0, #8
    632a:	2101      	movs	r1, #1
    632c:	4b0b      	ldr	r3, [pc, #44]	; (635c <BluetoothWakeUp+0x80>)
    632e:	4798      	blx	r3
	BlockingTimer(20);
    6330:	2014      	movs	r0, #20
    6332:	4b0b      	ldr	r3, [pc, #44]	; (6360 <BluetoothWakeUp+0x84>)
    6334:	4798      	blx	r3
	bluetoothAwake = 1; 
    6336:	4b0b      	ldr	r3, [pc, #44]	; (6364 <BluetoothWakeUp+0x88>)
    6338:	2201      	movs	r2, #1
    633a:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_SOLID;
    633c:	4b0a      	ldr	r3, [pc, #40]	; (6368 <BluetoothWakeUp+0x8c>)
    633e:	2201      	movs	r2, #1
    6340:	701a      	strb	r2, [r3, #0]
	brakeBiLED = BRAKEBILED_GREENSOLID;
    6342:	4b0a      	ldr	r3, [pc, #40]	; (636c <BluetoothWakeUp+0x90>)
    6344:	2200      	movs	r2, #0
    6346:	701a      	strb	r2, [r3, #0]
	
//while(1)
//{	
	BTReceive();
    6348:	4b09      	ldr	r3, [pc, #36]	; (6370 <BluetoothWakeUp+0x94>)
    634a:	4798      	blx	r3
//    receiveIntercharTimeout = FALSE;        
//    while ((response_received == FALSE)&&(rx_timeout == FALSE)&&(receiveIntercharTimeout == FALSE));   
//}
	 
	
}
    634c:	1c18      	adds	r0, r3, #0
    634e:	46bd      	mov	sp, r7
    6350:	b002      	add	sp, #8
    6352:	bd80      	pop	{r7, pc}
    6354:	00006241 	.word	0x00006241
    6358:	00011dbd 	.word	0x00011dbd
    635c:	00006261 	.word	0x00006261
    6360:	000062b5 	.word	0x000062b5
    6364:	200004a4 	.word	0x200004a4
    6368:	20002eb6 	.word	0x20002eb6
    636c:	20002ee8 	.word	0x20002ee8
    6370:	0000e299 	.word	0x0000e299

00006374 <BluetoothSleep>:
// FUNCTION: BluetoothSleep
//------------------------------------------------------------------------------
//
//==============================================================================
uint8_t BluetoothSleep(void)
{
    6374:	b580      	push	{r7, lr}
    6376:	b082      	sub	sp, #8
    6378:	af00      	add	r7, sp, #0
	
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    637a:	1d3b      	adds	r3, r7, #4
    637c:	1c18      	adds	r0, r3, #0
    637e:	4b13      	ldr	r3, [pc, #76]	; (63cc <BluetoothSleep+0x58>)
    6380:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6382:	1d3b      	adds	r3, r7, #4
    6384:	2201      	movs	r2, #1
    6386:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    6388:	1d3b      	adds	r3, r7, #4
    638a:	2009      	movs	r0, #9
    638c:	1c19      	adds	r1, r3, #0
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <BluetoothSleep+0x5c>)
    6390:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    6392:	2009      	movs	r0, #9
    6394:	2100      	movs	r1, #0
    6396:	4b0f      	ldr	r3, [pc, #60]	; (63d4 <BluetoothSleep+0x60>)
    6398:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    639a:	1d3b      	adds	r3, r7, #4
    639c:	2008      	movs	r0, #8
    639e:	1c19      	adds	r1, r3, #0
    63a0:	4b0b      	ldr	r3, [pc, #44]	; (63d0 <BluetoothSleep+0x5c>)
    63a2:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    63a4:	2008      	movs	r0, #8
    63a6:	2101      	movs	r1, #1
    63a8:	4b0a      	ldr	r3, [pc, #40]	; (63d4 <BluetoothSleep+0x60>)
    63aa:	4798      	blx	r3
	BlockingTimer(40);
    63ac:	2028      	movs	r0, #40	; 0x28
    63ae:	4b0a      	ldr	r3, [pc, #40]	; (63d8 <BluetoothSleep+0x64>)
    63b0:	4798      	blx	r3
	
	bluetoothAwake = 0;
    63b2:	4b0a      	ldr	r3, [pc, #40]	; (63dc <BluetoothSleep+0x68>)
    63b4:	2200      	movs	r2, #0
    63b6:	701a      	strb	r2, [r3, #0]
	 brakeBlueLED = BRAKEBLUELED_OFF;
    63b8:	4b09      	ldr	r3, [pc, #36]	; (63e0 <BluetoothSleep+0x6c>)
    63ba:	2202      	movs	r2, #2
    63bc:	701a      	strb	r2, [r3, #0]
	 brakeBiLED = BRAKEBILED_OFF;
    63be:	4b09      	ldr	r3, [pc, #36]	; (63e4 <BluetoothSleep+0x70>)
    63c0:	2202      	movs	r2, #2
    63c2:	701a      	strb	r2, [r3, #0]
}	
    63c4:	1c18      	adds	r0, r3, #0
    63c6:	46bd      	mov	sp, r7
    63c8:	b002      	add	sp, #8
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00006241 	.word	0x00006241
    63d0:	00011dbd 	.word	0x00011dbd
    63d4:	00006261 	.word	0x00006261
    63d8:	000062b5 	.word	0x000062b5
    63dc:	200004a4 	.word	0x200004a4
    63e0:	20002eb6 	.word	0x20002eb6
    63e4:	20002ee8 	.word	0x20002ee8

000063e8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b082      	sub	sp, #8
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	2200      	movs	r2, #0
    63f4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	2200      	movs	r2, #0
    63fa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	2201      	movs	r2, #1
    6400:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	2201      	movs	r2, #1
    6406:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	2200      	movs	r2, #0
    640c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2202      	movs	r2, #2
    6412:	72da      	strb	r2, [r3, #11]
}
    6414:	46bd      	mov	sp, r7
    6416:	b002      	add	sp, #8
    6418:	bd80      	pop	{r7, pc}
    641a:	46c0      	nop			; (mov r8, r8)

0000641c <MotorFindEncoderMatch>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t MotorFindEncoderMatch(uint16_t matchCurrent)
{
    641c:	b580      	push	{r7, lr}
    641e:	b084      	sub	sp, #16
    6420:	af00      	add	r7, sp, #0
    6422:	1c02      	adds	r2, r0, #0
    6424:	1dbb      	adds	r3, r7, #6
    6426:	801a      	strh	r2, [r3, #0]
	uint16_t countBack,i,newOffset; 
	uint8_t done; 
	
	countBack = 0; 
    6428:	1c3b      	adds	r3, r7, #0
    642a:	330e      	adds	r3, #14
    642c:	2200      	movs	r2, #0
    642e:	801a      	strh	r2, [r3, #0]
	//----------------------------
	// go back from encoderTableOffset and look for first current 
	// less than matchCurrent. 
	// record the encoder count match. 
	//------------------------------
	done = 0;
    6430:	1c3b      	adds	r3, r7, #0
    6432:	3309      	adds	r3, #9
    6434:	2200      	movs	r2, #0
    6436:	701a      	strb	r2, [r3, #0]
	newOffset = encoderTableOffset; 
    6438:	1c3b      	adds	r3, r7, #0
    643a:	330a      	adds	r3, #10
    643c:	4a42      	ldr	r2, [pc, #264]	; (6548 <MotorFindEncoderMatch+0x12c>)
    643e:	8812      	ldrh	r2, [r2, #0]
    6440:	801a      	strh	r2, [r3, #0]
	if (newOffset >0)
    6442:	1c3b      	adds	r3, r7, #0
    6444:	330a      	adds	r3, #10
    6446:	881b      	ldrh	r3, [r3, #0]
    6448:	2b00      	cmp	r3, #0
    644a:	d007      	beq.n	645c <MotorFindEncoderMatch+0x40>
	{
		newOffset--;
    644c:	1c3b      	adds	r3, r7, #0
    644e:	330a      	adds	r3, #10
    6450:	881a      	ldrh	r2, [r3, #0]
    6452:	1c3b      	adds	r3, r7, #0
    6454:	330a      	adds	r3, #10
    6456:	3a01      	subs	r2, #1
    6458:	801a      	strh	r2, [r3, #0]
    645a:	e004      	b.n	6466 <MotorFindEncoderMatch+0x4a>
	}
	else
	{
		newOffset = MAX_BUILDTABLE; 
    645c:	1c3b      	adds	r3, r7, #0
    645e:	330a      	adds	r3, #10
    6460:	2280      	movs	r2, #128	; 0x80
    6462:	00d2      	lsls	r2, r2, #3
    6464:	801a      	strh	r2, [r3, #0]
	}
	i = 0; 
    6466:	1c3b      	adds	r3, r7, #0
    6468:	330c      	adds	r3, #12
    646a:	2200      	movs	r2, #0
    646c:	801a      	strh	r2, [r3, #0]
	if (encoderFillOffset > MAX_BUILDTABLE)
    646e:	4b37      	ldr	r3, [pc, #220]	; (654c <MotorFindEncoderMatch+0x130>)
    6470:	881a      	ldrh	r2, [r3, #0]
    6472:	2380      	movs	r3, #128	; 0x80
    6474:	00db      	lsls	r3, r3, #3
    6476:	429a      	cmp	r2, r3
    6478:	d904      	bls.n	6484 <MotorFindEncoderMatch+0x68>
	{
		encoderFillOffset = MAX_BUILDTABLE;
    647a:	4b34      	ldr	r3, [pc, #208]	; (654c <MotorFindEncoderMatch+0x130>)
    647c:	2280      	movs	r2, #128	; 0x80
    647e:	00d2      	lsls	r2, r2, #3
    6480:	801a      	strh	r2, [r3, #0]
	}
	while ((done==0) && (i<encoderFillOffset))
    6482:	e04d      	b.n	6520 <MotorFindEncoderMatch+0x104>
    6484:	e04c      	b.n	6520 <MotorFindEncoderMatch+0x104>
	{
		if (encoderTable.Current[newOffset] < matchCurrent)
    6486:	1c3b      	adds	r3, r7, #0
    6488:	330a      	adds	r3, #10
    648a:	881a      	ldrh	r2, [r3, #0]
    648c:	4b30      	ldr	r3, [pc, #192]	; (6550 <MotorFindEncoderMatch+0x134>)
    648e:	0052      	lsls	r2, r2, #1
    6490:	5ad3      	ldrh	r3, [r2, r3]
    6492:	1dba      	adds	r2, r7, #6
    6494:	8812      	ldrh	r2, [r2, #0]
    6496:	429a      	cmp	r2, r3
    6498:	d916      	bls.n	64c8 <MotorFindEncoderMatch+0xac>
		{
			done = 1; 
    649a:	1c3b      	adds	r3, r7, #0
    649c:	3309      	adds	r3, #9
    649e:	2201      	movs	r2, #1
    64a0:	701a      	strb	r2, [r3, #0]
    64a2:	1c3b      	adds	r3, r7, #0
    64a4:	330e      	adds	r3, #14
    64a6:	1c3a      	adds	r2, r7, #0
    64a8:	320e      	adds	r2, #14
    64aa:	8812      	ldrh	r2, [r2, #0]
    64ac:	801a      	strh	r2, [r3, #0]
    64ae:	1c3b      	adds	r3, r7, #0
    64b0:	330c      	adds	r3, #12
    64b2:	1c3a      	adds	r2, r7, #0
    64b4:	320c      	adds	r2, #12
    64b6:	8812      	ldrh	r2, [r2, #0]
    64b8:	801a      	strh	r2, [r3, #0]
    64ba:	1c3b      	adds	r3, r7, #0
    64bc:	330a      	adds	r3, #10
    64be:	1c3a      	adds	r2, r7, #0
    64c0:	320a      	adds	r2, #10
    64c2:	8812      	ldrh	r2, [r2, #0]
    64c4:	801a      	strh	r2, [r3, #0]
    64c6:	e02b      	b.n	6520 <MotorFindEncoderMatch+0x104>
		}
		else
		{
			i++;
    64c8:	1c3b      	adds	r3, r7, #0
    64ca:	330c      	adds	r3, #12
    64cc:	881a      	ldrh	r2, [r3, #0]
    64ce:	1c3b      	adds	r3, r7, #0
    64d0:	330c      	adds	r3, #12
    64d2:	3201      	adds	r2, #1
    64d4:	801a      	strh	r2, [r3, #0]
			countBack++;
    64d6:	1c3b      	adds	r3, r7, #0
    64d8:	330e      	adds	r3, #14
    64da:	881a      	ldrh	r2, [r3, #0]
    64dc:	1c3b      	adds	r3, r7, #0
    64de:	330e      	adds	r3, #14
    64e0:	3201      	adds	r2, #1
    64e2:	801a      	strh	r2, [r3, #0]
			if (newOffset >0)
    64e4:	1c3b      	adds	r3, r7, #0
    64e6:	330a      	adds	r3, #10
    64e8:	881b      	ldrh	r3, [r3, #0]
    64ea:	2b00      	cmp	r3, #0
    64ec:	d00d      	beq.n	650a <MotorFindEncoderMatch+0xee>
			{
				newOffset--;
    64ee:	1c3b      	adds	r3, r7, #0
    64f0:	330a      	adds	r3, #10
    64f2:	881a      	ldrh	r2, [r3, #0]
    64f4:	1c3b      	adds	r3, r7, #0
    64f6:	330a      	adds	r3, #10
    64f8:	3a01      	subs	r2, #1
    64fa:	801a      	strh	r2, [r3, #0]
    64fc:	1c3b      	adds	r3, r7, #0
    64fe:	3309      	adds	r3, #9
    6500:	1c3a      	adds	r2, r7, #0
    6502:	3209      	adds	r2, #9
    6504:	7812      	ldrb	r2, [r2, #0]
    6506:	701a      	strb	r2, [r3, #0]
    6508:	e00a      	b.n	6520 <MotorFindEncoderMatch+0x104>
			}
			else
			{
				newOffset = MAX_BUILDTABLE; 
    650a:	1c3b      	adds	r3, r7, #0
    650c:	330a      	adds	r3, #10
    650e:	2280      	movs	r2, #128	; 0x80
    6510:	00d2      	lsls	r2, r2, #3
    6512:	801a      	strh	r2, [r3, #0]
    6514:	1c3b      	adds	r3, r7, #0
    6516:	3309      	adds	r3, #9
    6518:	1c3a      	adds	r2, r7, #0
    651a:	3209      	adds	r2, #9
    651c:	7812      	ldrb	r2, [r2, #0]
    651e:	701a      	strb	r2, [r3, #0]
	i = 0; 
	if (encoderFillOffset > MAX_BUILDTABLE)
	{
		encoderFillOffset = MAX_BUILDTABLE;
	}
	while ((done==0) && (i<encoderFillOffset))
    6520:	1c3b      	adds	r3, r7, #0
    6522:	3309      	adds	r3, #9
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	2b00      	cmp	r3, #0
    6528:	d106      	bne.n	6538 <MotorFindEncoderMatch+0x11c>
    652a:	4b08      	ldr	r3, [pc, #32]	; (654c <MotorFindEncoderMatch+0x130>)
    652c:	881b      	ldrh	r3, [r3, #0]
    652e:	1c3a      	adds	r2, r7, #0
    6530:	320c      	adds	r2, #12
    6532:	8812      	ldrh	r2, [r2, #0]
    6534:	429a      	cmp	r2, r3
    6536:	d3a6      	bcc.n	6486 <MotorFindEncoderMatch+0x6a>
			{
				newOffset = MAX_BUILDTABLE; 
			}			
		}
	}
	return countBack; 
    6538:	1c3b      	adds	r3, r7, #0
    653a:	330e      	adds	r3, #14
    653c:	881b      	ldrh	r3, [r3, #0]
}
    653e:	1c18      	adds	r0, r3, #0
    6540:	46bd      	mov	sp, r7
    6542:	b004      	add	sp, #16
    6544:	bd80      	pop	{r7, pc}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	20001e9e 	.word	0x20001e9e
    654c:	200004a6 	.word	0x200004a6
    6550:	20001ea0 	.word	0x20001ea0

00006554 <ConfigureEncoder>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 void ConfigureEncoder(void)
 {
    6554:	b580      	push	{r7, lr}
    6556:	b084      	sub	sp, #16
    6558:	af00      	add	r7, sp, #0
	 struct extint_chan_conf config_extint_chan;
	 extint_chan_get_config_defaults(&config_extint_chan);
    655a:	1d3b      	adds	r3, r7, #4
    655c:	1c18      	adds	r0, r3, #0
    655e:	4b0b      	ldr	r3, [pc, #44]	; (658c <ConfigureEncoder+0x38>)
    6560:	4798      	blx	r3
	 config_extint_chan.gpio_pin = PIN_PB11A_EIC_EXTINT11;
    6562:	1d3b      	adds	r3, r7, #4
    6564:	222b      	movs	r2, #43	; 0x2b
    6566:	601a      	str	r2, [r3, #0]
	 config_extint_chan.gpio_pin_mux = MUX_PB11A_EIC_EXTINT11;
    6568:	1d3b      	adds	r3, r7, #4
    656a:	2200      	movs	r2, #0
    656c:	605a      	str	r2, [r3, #4]
	 config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    656e:	1d3b      	adds	r3, r7, #4
    6570:	2200      	movs	r2, #0
    6572:	721a      	strb	r2, [r3, #8]
	 config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6574:	1d3b      	adds	r3, r7, #4
    6576:	2203      	movs	r2, #3
    6578:	72da      	strb	r2, [r3, #11]
	 extint_chan_set_config(11, &config_extint_chan);
    657a:	1d3b      	adds	r3, r7, #4
    657c:	200b      	movs	r0, #11
    657e:	1c19      	adds	r1, r3, #0
    6580:	4b03      	ldr	r3, [pc, #12]	; (6590 <ConfigureEncoder+0x3c>)
    6582:	4798      	blx	r3
 }
    6584:	46bd      	mov	sp, r7
    6586:	b004      	add	sp, #16
    6588:	bd80      	pop	{r7, pc}
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	000063e9 	.word	0x000063e9
    6590:	0000406d 	.word	0x0000406d

00006594 <ConfigureEncoderCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureEncoderCallbacks(void)
{
    6594:	b580      	push	{r7, lr}
    6596:	af00      	add	r7, sp, #0
	extint_register_callback(EncoderCallback,11,EXTINT_CALLBACK_TYPE_DETECT);
    6598:	4b05      	ldr	r3, [pc, #20]	; (65b0 <ConfigureEncoderCallbacks+0x1c>)
    659a:	1c18      	adds	r0, r3, #0
    659c:	210b      	movs	r1, #11
    659e:	2200      	movs	r2, #0
    65a0:	4b04      	ldr	r3, [pc, #16]	; (65b4 <ConfigureEncoderCallbacks+0x20>)
    65a2:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    65a4:	200b      	movs	r0, #11
    65a6:	2100      	movs	r1, #0
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <ConfigureEncoderCallbacks+0x24>)
    65aa:	4798      	blx	r3
} 
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	000065bd 	.word	0x000065bd
    65b4:	00004239 	.word	0x00004239
    65b8:	00004295 	.word	0x00004295

000065bc <EncoderCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void EncoderCallback(void)
{
    65bc:	b598      	push	{r3, r4, r7, lr}
    65be:	af00      	add	r7, sp, #0
	encoderCount++;
    65c0:	4b2d      	ldr	r3, [pc, #180]	; (6678 <EncoderCallback+0xbc>)
    65c2:	881b      	ldrh	r3, [r3, #0]
    65c4:	3301      	adds	r3, #1
    65c6:	b29a      	uxth	r2, r3
    65c8:	4b2b      	ldr	r3, [pc, #172]	; (6678 <EncoderCallback+0xbc>)
    65ca:	801a      	strh	r2, [r3, #0]
	if (action == EXTENDING)
    65cc:	4b2b      	ldr	r3, [pc, #172]	; (667c <EncoderCallback+0xc0>)
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	2b01      	cmp	r3, #1
    65d2:	d124      	bne.n	661e <EncoderCallback+0x62>
	{
		if (encoderTableOffset >= MAX_BUILDTABLE)
    65d4:	4b2a      	ldr	r3, [pc, #168]	; (6680 <EncoderCallback+0xc4>)
    65d6:	881a      	ldrh	r2, [r3, #0]
    65d8:	4b2a      	ldr	r3, [pc, #168]	; (6684 <EncoderCallback+0xc8>)
    65da:	429a      	cmp	r2, r3
    65dc:	d905      	bls.n	65ea <EncoderCallback+0x2e>
		{
			encoderTableOffset = 0;
    65de:	4b28      	ldr	r3, [pc, #160]	; (6680 <EncoderCallback+0xc4>)
    65e0:	2200      	movs	r2, #0
    65e2:	801a      	strh	r2, [r3, #0]
			encoderFlip = 1; 
    65e4:	4b28      	ldr	r3, [pc, #160]	; (6688 <EncoderCallback+0xcc>)
    65e6:	2201      	movs	r2, #1
    65e8:	701a      	strb	r2, [r3, #0]
		}
		encoderTable.Current[encoderTableOffset] = ADCGetReading(ADC_INPUT_CURRENT);
    65ea:	4b25      	ldr	r3, [pc, #148]	; (6680 <EncoderCallback+0xc4>)
    65ec:	881b      	ldrh	r3, [r3, #0]
    65ee:	1c1c      	adds	r4, r3, #0
    65f0:	2001      	movs	r0, #1
    65f2:	4b26      	ldr	r3, [pc, #152]	; (668c <EncoderCallback+0xd0>)
    65f4:	4798      	blx	r3
    65f6:	1c03      	adds	r3, r0, #0
    65f8:	1c19      	adds	r1, r3, #0
    65fa:	4b25      	ldr	r3, [pc, #148]	; (6690 <EncoderCallback+0xd4>)
    65fc:	0062      	lsls	r2, r4, #1
    65fe:	52d1      	strh	r1, [r2, r3]
		encoderTable.EncoderCount[encoderTableOffset++] = encoderCount;
    6600:	4b1f      	ldr	r3, [pc, #124]	; (6680 <EncoderCallback+0xc4>)
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	1c5a      	adds	r2, r3, #1
    6606:	b291      	uxth	r1, r2
    6608:	4a1d      	ldr	r2, [pc, #116]	; (6680 <EncoderCallback+0xc4>)
    660a:	8011      	strh	r1, [r2, #0]
    660c:	1c1a      	adds	r2, r3, #0
    660e:	4b1a      	ldr	r3, [pc, #104]	; (6678 <EncoderCallback+0xbc>)
    6610:	8819      	ldrh	r1, [r3, #0]
    6612:	4b1f      	ldr	r3, [pc, #124]	; (6690 <EncoderCallback+0xd4>)
    6614:	2080      	movs	r0, #128	; 0x80
    6616:	00c0      	lsls	r0, r0, #3
    6618:	1812      	adds	r2, r2, r0
    661a:	0052      	lsls	r2, r2, #1
    661c:	52d1      	strh	r1, [r2, r3]
	}
	if (action == EXTENDING_BY_ENCODER)
    661e:	4b17      	ldr	r3, [pc, #92]	; (667c <EncoderCallback+0xc0>)
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	2b04      	cmp	r3, #4
    6624:	d110      	bne.n	6648 <EncoderCallback+0x8c>
	{
		if (encoderCountBack >0)
    6626:	4b1b      	ldr	r3, [pc, #108]	; (6694 <EncoderCallback+0xd8>)
    6628:	881b      	ldrh	r3, [r3, #0]
    662a:	2b00      	cmp	r3, #0
    662c:	d00c      	beq.n	6648 <EncoderCallback+0x8c>
		{
			encoderCountBack--;
    662e:	4b19      	ldr	r3, [pc, #100]	; (6694 <EncoderCallback+0xd8>)
    6630:	881b      	ldrh	r3, [r3, #0]
    6632:	3b01      	subs	r3, #1
    6634:	b29a      	uxth	r2, r3
    6636:	4b17      	ldr	r3, [pc, #92]	; (6694 <EncoderCallback+0xd8>)
    6638:	801a      	strh	r2, [r3, #0]
			if (encoderCountBack == 0)
    663a:	4b16      	ldr	r3, [pc, #88]	; (6694 <EncoderCallback+0xd8>)
    663c:	881b      	ldrh	r3, [r3, #0]
    663e:	2b00      	cmp	r3, #0
    6640:	d102      	bne.n	6648 <EncoderCallback+0x8c>
			{
				MotorOff(0);
    6642:	2000      	movs	r0, #0
    6644:	4b14      	ldr	r3, [pc, #80]	; (6698 <EncoderCallback+0xdc>)
    6646:	4798      	blx	r3
			}
		}
	}	
	if (action == RETRACTING_BY_ENCODER)
    6648:	4b0c      	ldr	r3, [pc, #48]	; (667c <EncoderCallback+0xc0>)
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	2b03      	cmp	r3, #3
    664e:	d110      	bne.n	6672 <EncoderCallback+0xb6>
	{
		if (encoderCountBack >0)
    6650:	4b10      	ldr	r3, [pc, #64]	; (6694 <EncoderCallback+0xd8>)
    6652:	881b      	ldrh	r3, [r3, #0]
    6654:	2b00      	cmp	r3, #0
    6656:	d00c      	beq.n	6672 <EncoderCallback+0xb6>
		{
			encoderCountBack--;
    6658:	4b0e      	ldr	r3, [pc, #56]	; (6694 <EncoderCallback+0xd8>)
    665a:	881b      	ldrh	r3, [r3, #0]
    665c:	3b01      	subs	r3, #1
    665e:	b29a      	uxth	r2, r3
    6660:	4b0c      	ldr	r3, [pc, #48]	; (6694 <EncoderCallback+0xd8>)
    6662:	801a      	strh	r2, [r3, #0]
			if (encoderCountBack == 0)
    6664:	4b0b      	ldr	r3, [pc, #44]	; (6694 <EncoderCallback+0xd8>)
    6666:	881b      	ldrh	r3, [r3, #0]
    6668:	2b00      	cmp	r3, #0
    666a:	d102      	bne.n	6672 <EncoderCallback+0xb6>
			{
				MotorOff(0);
    666c:	2000      	movs	r0, #0
    666e:	4b0a      	ldr	r3, [pc, #40]	; (6698 <EncoderCallback+0xdc>)
    6670:	4798      	blx	r3
			}
		}
	}	
}
    6672:	46bd      	mov	sp, r7
    6674:	bd98      	pop	{r3, r4, r7, pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	200004a8 	.word	0x200004a8
    667c:	200004ae 	.word	0x200004ae
    6680:	20001e9e 	.word	0x20001e9e
    6684:	000003ff 	.word	0x000003ff
    6688:	200004aa 	.word	0x200004aa
    668c:	0000b4b5 	.word	0x0000b4b5
    6690:	20001ea0 	.word	0x20001ea0
    6694:	20002ee2 	.word	0x20002ee2
    6698:	00009b75 	.word	0x00009b75

0000669c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    669c:	b580      	push	{r7, lr}
    669e:	b084      	sub	sp, #16
    66a0:	af00      	add	r7, sp, #0
    66a2:	1c02      	adds	r2, r0, #0
    66a4:	1dfb      	adds	r3, r7, #7
    66a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    66a8:	1c3b      	adds	r3, r7, #0
    66aa:	330f      	adds	r3, #15
    66ac:	1dfa      	adds	r2, r7, #7
    66ae:	7812      	ldrb	r2, [r2, #0]
    66b0:	09d2      	lsrs	r2, r2, #7
    66b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    66b4:	1c3b      	adds	r3, r7, #0
    66b6:	330e      	adds	r3, #14
    66b8:	1dfa      	adds	r2, r7, #7
    66ba:	7812      	ldrb	r2, [r2, #0]
    66bc:	0952      	lsrs	r2, r2, #5
    66be:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    66c0:	4b0d      	ldr	r3, [pc, #52]	; (66f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    66c2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    66c4:	1c3b      	adds	r3, r7, #0
    66c6:	330f      	adds	r3, #15
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d10e      	bne.n	66ec <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    66ce:	1c3b      	adds	r3, r7, #0
    66d0:	330f      	adds	r3, #15
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	009b      	lsls	r3, r3, #2
    66d6:	2210      	movs	r2, #16
    66d8:	19d2      	adds	r2, r2, r7
    66da:	18d3      	adds	r3, r2, r3
    66dc:	3b08      	subs	r3, #8
    66de:	681a      	ldr	r2, [r3, #0]
    66e0:	1c3b      	adds	r3, r7, #0
    66e2:	330e      	adds	r3, #14
    66e4:	781b      	ldrb	r3, [r3, #0]
    66e6:	01db      	lsls	r3, r3, #7
    66e8:	18d3      	adds	r3, r2, r3
    66ea:	e000      	b.n	66ee <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    66ec:	2300      	movs	r3, #0
	}
}
    66ee:	1c18      	adds	r0, r3, #0
    66f0:	46bd      	mov	sp, r7
    66f2:	b004      	add	sp, #16
    66f4:	bd80      	pop	{r7, pc}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	41004400 	.word	0x41004400

000066fc <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    6700:	4b03      	ldr	r3, [pc, #12]	; (6710 <system_interrupt_enable_global+0x14>)
    6702:	2201      	movs	r2, #1
    6704:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    6706:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    670a:	b662      	cpsie	i
}
    670c:	46bd      	mov	sp, r7
    670e:	bd80      	pop	{r7, pc}
    6710:	20000044 	.word	0x20000044

00006714 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6714:	b580      	push	{r7, lr}
    6716:	b082      	sub	sp, #8
    6718:	af00      	add	r7, sp, #0
    671a:	1c02      	adds	r2, r0, #0
    671c:	1dfb      	adds	r3, r7, #7
    671e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6720:	1dfb      	adds	r3, r7, #7
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	1c18      	adds	r0, r3, #0
    6726:	4b03      	ldr	r3, [pc, #12]	; (6734 <port_get_group_from_gpio_pin+0x20>)
    6728:	4798      	blx	r3
    672a:	1c03      	adds	r3, r0, #0
}
    672c:	1c18      	adds	r0, r3, #0
    672e:	46bd      	mov	sp, r7
    6730:	b002      	add	sp, #8
    6732:	bd80      	pop	{r7, pc}
    6734:	0000669d 	.word	0x0000669d

00006738 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6738:	b580      	push	{r7, lr}
    673a:	b082      	sub	sp, #8
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	2200      	movs	r2, #0
    6744:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	2201      	movs	r2, #1
    674a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	2200      	movs	r2, #0
    6750:	709a      	strb	r2, [r3, #2]
}
    6752:	46bd      	mov	sp, r7
    6754:	b002      	add	sp, #8
    6756:	bd80      	pop	{r7, pc}

00006758 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    6758:	b580      	push	{r7, lr}
    675a:	b084      	sub	sp, #16
    675c:	af00      	add	r7, sp, #0
    675e:	1c02      	adds	r2, r0, #0
    6760:	1dfb      	adds	r3, r7, #7
    6762:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6764:	1dfb      	adds	r3, r7, #7
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	1c18      	adds	r0, r3, #0
    676a:	4b0c      	ldr	r3, [pc, #48]	; (679c <port_pin_get_input_level+0x44>)
    676c:	4798      	blx	r3
    676e:	1c03      	adds	r3, r0, #0
    6770:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6772:	1dfb      	adds	r3, r7, #7
    6774:	781a      	ldrb	r2, [r3, #0]
    6776:	231f      	movs	r3, #31
    6778:	4013      	ands	r3, r2
    677a:	2201      	movs	r2, #1
    677c:	1c11      	adds	r1, r2, #0
    677e:	4099      	lsls	r1, r3
    6780:	1c0b      	adds	r3, r1, #0
    6782:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    6784:	68fb      	ldr	r3, [r7, #12]
    6786:	6a1b      	ldr	r3, [r3, #32]
    6788:	68ba      	ldr	r2, [r7, #8]
    678a:	4013      	ands	r3, r2
    678c:	1e5a      	subs	r2, r3, #1
    678e:	4193      	sbcs	r3, r2
    6790:	b2db      	uxtb	r3, r3
}
    6792:	1c18      	adds	r0, r3, #0
    6794:	46bd      	mov	sp, r7
    6796:	b004      	add	sp, #16
    6798:	bd80      	pop	{r7, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	00006715 	.word	0x00006715

000067a0 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    67a0:	b580      	push	{r7, lr}
    67a2:	b084      	sub	sp, #16
    67a4:	af00      	add	r7, sp, #0
    67a6:	1c0a      	adds	r2, r1, #0
    67a8:	1dfb      	adds	r3, r7, #7
    67aa:	1c01      	adds	r1, r0, #0
    67ac:	7019      	strb	r1, [r3, #0]
    67ae:	1dbb      	adds	r3, r7, #6
    67b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    67b2:	1dfb      	adds	r3, r7, #7
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	1c18      	adds	r0, r3, #0
    67b8:	4b0d      	ldr	r3, [pc, #52]	; (67f0 <port_pin_set_output_level+0x50>)
    67ba:	4798      	blx	r3
    67bc:	1c03      	adds	r3, r0, #0
    67be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    67c0:	1dfb      	adds	r3, r7, #7
    67c2:	781a      	ldrb	r2, [r3, #0]
    67c4:	231f      	movs	r3, #31
    67c6:	4013      	ands	r3, r2
    67c8:	2201      	movs	r2, #1
    67ca:	1c11      	adds	r1, r2, #0
    67cc:	4099      	lsls	r1, r3
    67ce:	1c0b      	adds	r3, r1, #0
    67d0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    67d2:	1dbb      	adds	r3, r7, #6
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d003      	beq.n	67e2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    67da:	68fb      	ldr	r3, [r7, #12]
    67dc:	68ba      	ldr	r2, [r7, #8]
    67de:	619a      	str	r2, [r3, #24]
    67e0:	e002      	b.n	67e8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    67e2:	68fb      	ldr	r3, [r7, #12]
    67e4:	68ba      	ldr	r2, [r7, #8]
    67e6:	615a      	str	r2, [r3, #20]
	}
}
    67e8:	46bd      	mov	sp, r7
    67ea:	b004      	add	sp, #16
    67ec:	bd80      	pop	{r7, pc}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	00006715 	.word	0x00006715

000067f4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	2200      	movs	r2, #0
    6800:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    6802:	687b      	ldr	r3, [r7, #4]
    6804:	2200      	movs	r2, #0
    6806:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	2201      	movs	r2, #1
    680c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	2201      	movs	r2, #1
    6812:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	2200      	movs	r2, #0
    6818:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	2202      	movs	r2, #2
    681e:	72da      	strb	r2, [r3, #11]
}
    6820:	46bd      	mov	sp, r7
    6822:	b002      	add	sp, #8
    6824:	bd80      	pop	{r7, pc}
    6826:	46c0      	nop			; (mov r8, r8)

00006828 <BrakeHoldOff>:
// ---------------------------GLOBAL FUNCTIONS ----------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
uint16_t testValue = 0; 

void BrakeHoldOff(uint16_t howLong)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	1c02      	adds	r2, r0, #0
    6830:	1dbb      	adds	r3, r7, #6
    6832:	801a      	strh	r2, [r3, #0]
	brakeHoldOffTime = howLong; 
    6834:	4b05      	ldr	r3, [pc, #20]	; (684c <BrakeHoldOff+0x24>)
    6836:	1dba      	adds	r2, r7, #6
    6838:	8812      	ldrh	r2, [r2, #0]
    683a:	801a      	strh	r2, [r3, #0]
	while (brakeHoldOffTime >0)
    683c:	46c0      	nop			; (mov r8, r8)
    683e:	4b03      	ldr	r3, [pc, #12]	; (684c <BrakeHoldOff+0x24>)
    6840:	881b      	ldrh	r3, [r3, #0]
    6842:	2b00      	cmp	r3, #0
    6844:	d1fb      	bne.n	683e <BrakeHoldOff+0x16>
	{
		
	}	
}
    6846:	46bd      	mov	sp, r7
    6848:	b002      	add	sp, #8
    684a:	bd80      	pop	{r7, pc}
    684c:	200036c0 	.word	0x200036c0

00006850 <LoadCell>:


uint16_t LoadCell(uint8_t whichState)
{
    6850:	b590      	push	{r4, r7, lr}
    6852:	b085      	sub	sp, #20
    6854:	af00      	add	r7, sp, #0
    6856:	1c02      	adds	r2, r0, #0
    6858:	1dfb      	adds	r3, r7, #7
    685a:	701a      	strb	r2, [r3, #0]
	uint16_t value,itemp; 
	value = 0; 
    685c:	1c3b      	adds	r3, r7, #0
    685e:	330e      	adds	r3, #14
    6860:	2200      	movs	r2, #0
    6862:	801a      	strh	r2, [r3, #0]
	
	itemp = ADCGetReading(ADC_INPUT_FSR);	
    6864:	1c3c      	adds	r4, r7, #0
    6866:	340c      	adds	r4, #12
    6868:	2002      	movs	r0, #2
    686a:	4b21      	ldr	r3, [pc, #132]	; (68f0 <LoadCell+0xa0>)
    686c:	4798      	blx	r3
    686e:	1c03      	adds	r3, r0, #0
    6870:	8023      	strh	r3, [r4, #0]
	if ((loadState != whichState)||(itemp<0x60))
    6872:	4b20      	ldr	r3, [pc, #128]	; (68f4 <LoadCell+0xa4>)
    6874:	781b      	ldrb	r3, [r3, #0]
    6876:	1dfa      	adds	r2, r7, #7
    6878:	7812      	ldrb	r2, [r2, #0]
    687a:	429a      	cmp	r2, r3
    687c:	d104      	bne.n	6888 <LoadCell+0x38>
    687e:	1c3b      	adds	r3, r7, #0
    6880:	330c      	adds	r3, #12
    6882:	881b      	ldrh	r3, [r3, #0]
    6884:	2b5f      	cmp	r3, #95	; 0x5f
    6886:	d821      	bhi.n	68cc <LoadCell+0x7c>
	{
		//----------------------
		// start the time to average over. 
		switch (whichState)
    6888:	1dfb      	adds	r3, r7, #7
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	2b09      	cmp	r3, #9
    688e:	d014      	beq.n	68ba <LoadCell+0x6a>
    6890:	dc02      	bgt.n	6898 <LoadCell+0x48>
    6892:	2b04      	cmp	r3, #4
    6894:	d005      	beq.n	68a2 <LoadCell+0x52>
    6896:	e015      	b.n	68c4 <LoadCell+0x74>
    6898:	2b0b      	cmp	r3, #11
    689a:	d00a      	beq.n	68b2 <LoadCell+0x62>
    689c:	2b22      	cmp	r3, #34	; 0x22
    689e:	d004      	beq.n	68aa <LoadCell+0x5a>
    68a0:	e010      	b.n	68c4 <LoadCell+0x74>
		{
			case BRAKESTATE_WAITONSETUP:
			{
				loadTime = 100;
    68a2:	4b15      	ldr	r3, [pc, #84]	; (68f8 <LoadCell+0xa8>)
    68a4:	2264      	movs	r2, #100	; 0x64
    68a6:	801a      	strh	r2, [r3, #0]
				break;
    68a8:	e00c      	b.n	68c4 <LoadCell+0x74>
			}	
			case BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP:
			{
				loadTime = 100;
    68aa:	4b13      	ldr	r3, [pc, #76]	; (68f8 <LoadCell+0xa8>)
    68ac:	2264      	movs	r2, #100	; 0x64
    68ae:	801a      	strh	r2, [r3, #0]
				break;
    68b0:	e008      	b.n	68c4 <LoadCell+0x74>
			}	
			case BRAKESTATE_HOLDOFF_ACTIVE:
			{
				loadTime = 100;
    68b2:	4b11      	ldr	r3, [pc, #68]	; (68f8 <LoadCell+0xa8>)
    68b4:	2264      	movs	r2, #100	; 0x64
    68b6:	801a      	strh	r2, [r3, #0]
				break;
    68b8:	e004      	b.n	68c4 <LoadCell+0x74>
			}				
			case BRAKESTATE_ACTIVE:
			{
				loadTime = 500;  //01_28  was 100 
    68ba:	4b0f      	ldr	r3, [pc, #60]	; (68f8 <LoadCell+0xa8>)
    68bc:	22fa      	movs	r2, #250	; 0xfa
    68be:	0052      	lsls	r2, r2, #1
    68c0:	801a      	strh	r2, [r3, #0]
				break;
    68c2:	46c0      	nop			; (mov r8, r8)
			}							
		}
		loadState = whichState; 
    68c4:	4b0b      	ldr	r3, [pc, #44]	; (68f4 <LoadCell+0xa4>)
    68c6:	1dfa      	adds	r2, r7, #7
    68c8:	7812      	ldrb	r2, [r2, #0]
    68ca:	701a      	strb	r2, [r3, #0]
	}
	if (loadTime == 0)
    68cc:	4b0a      	ldr	r3, [pc, #40]	; (68f8 <LoadCell+0xa8>)
    68ce:	881b      	ldrh	r3, [r3, #0]
    68d0:	2b00      	cmp	r3, #0
    68d2:	d105      	bne.n	68e0 <LoadCell+0x90>
	{
		value = itemp;
    68d4:	1c3b      	adds	r3, r7, #0
    68d6:	330e      	adds	r3, #14
    68d8:	1c3a      	adds	r2, r7, #0
    68da:	320c      	adds	r2, #12
    68dc:	8812      	ldrh	r2, [r2, #0]
    68de:	801a      	strh	r2, [r3, #0]
	}
	return value;
    68e0:	1c3b      	adds	r3, r7, #0
    68e2:	330e      	adds	r3, #14
    68e4:	881b      	ldrh	r3, [r3, #0]
}
    68e6:	1c18      	adds	r0, r3, #0
    68e8:	46bd      	mov	sp, r7
    68ea:	b005      	add	sp, #20
    68ec:	bd90      	pop	{r4, r7, pc}
    68ee:	46c0      	nop			; (mov r8, r8)
    68f0:	0000b4b5 	.word	0x0000b4b5
    68f4:	200004b3 	.word	0x200004b3
    68f8:	200004b4 	.word	0x200004b4

000068fc <BrakeInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeInit(void)
{
    68fc:	b580      	push	{r7, lr}
    68fe:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6900:	4b12      	ldr	r3, [pc, #72]	; (694c <BrakeInit+0x50>)
    6902:	2202      	movs	r2, #2
    6904:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    6906:	4b12      	ldr	r3, [pc, #72]	; (6950 <BrakeInit+0x54>)
    6908:	2202      	movs	r2, #2
    690a:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF; 
    690c:	4b11      	ldr	r3, [pc, #68]	; (6954 <BrakeInit+0x58>)
    690e:	2201      	movs	r2, #1
    6910:	701a      	strb	r2, [r3, #0]
	brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    6912:	4b11      	ldr	r3, [pc, #68]	; (6958 <BrakeInit+0x5c>)
    6914:	791b      	ldrb	r3, [r3, #4]
    6916:	2204      	movs	r2, #4
    6918:	4313      	orrs	r3, r2
    691a:	b2da      	uxtb	r2, r3
    691c:	4b0e      	ldr	r3, [pc, #56]	; (6958 <BrakeInit+0x5c>)
    691e:	711a      	strb	r2, [r3, #4]
	brakeState = BRAKESTATE_POWERINGUP; 
    6920:	4b0e      	ldr	r3, [pc, #56]	; (695c <BrakeInit+0x60>)
    6922:	2202      	movs	r2, #2
    6924:	701a      	strb	r2, [r3, #0]
	table0.Item.MaxForce = 5; 
    6926:	4b0e      	ldr	r3, [pc, #56]	; (6960 <BrakeInit+0x64>)
    6928:	2205      	movs	r2, #5
    692a:	709a      	strb	r2, [r3, #2]
	BrakeBoardStateMachineTask();	
    692c:	4b0d      	ldr	r3, [pc, #52]	; (6964 <BrakeInit+0x68>)
    692e:	4798      	blx	r3
	gPrime = 0; 
    6930:	4b0d      	ldr	r3, [pc, #52]	; (6968 <BrakeInit+0x6c>)
    6932:	2200      	movs	r2, #0
    6934:	801a      	strh	r2, [r3, #0]
	//------------------------
//V01_11	poweredUp = 1;
//V01_11	brakeState = BRAKESTATE_RESET;
	poweredUp = 0;
    6936:	4b0d      	ldr	r3, [pc, #52]	; (696c <BrakeInit+0x70>)
    6938:	2200      	movs	r2, #0
    693a:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_POWERINGUP;	
    693c:	4b07      	ldr	r3, [pc, #28]	; (695c <BrakeInit+0x60>)
    693e:	2202      	movs	r2, #2
    6940:	701a      	strb	r2, [r3, #0]
	
	BrakeBoardStateMachineTask();	
    6942:	4b08      	ldr	r3, [pc, #32]	; (6964 <BrakeInit+0x68>)
    6944:	4798      	blx	r3
}
    6946:	46bd      	mov	sp, r7
    6948:	bd80      	pop	{r7, pc}
    694a:	46c0      	nop			; (mov r8, r8)
    694c:	20002ee8 	.word	0x20002ee8
    6950:	20002eb6 	.word	0x20002eb6
    6954:	20002eb0 	.word	0x20002eb0
    6958:	20003694 	.word	0x20003694
    695c:	20002ebf 	.word	0x20002ebf
    6960:	20002fb8 	.word	0x20002fb8
    6964:	00006ef5 	.word	0x00006ef5
    6968:	20002ee6 	.word	0x20002ee6
    696c:	200036b5 	.word	0x200036b5

00006970 <BrakeEnterIdleSleepMode>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeEnterIdleSleepMode(void)
{
    6970:	b580      	push	{r7, lr}
    6972:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6974:	4b06      	ldr	r3, [pc, #24]	; (6990 <BrakeEnterIdleSleepMode+0x20>)
    6976:	2202      	movs	r2, #2
    6978:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    697a:	4b06      	ldr	r3, [pc, #24]	; (6994 <BrakeEnterIdleSleepMode+0x24>)
    697c:	2202      	movs	r2, #2
    697e:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF;
    6980:	4b05      	ldr	r3, [pc, #20]	; (6998 <BrakeEnterIdleSleepMode+0x28>)
    6982:	2201      	movs	r2, #1
    6984:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_IDLESLEEP;
    6986:	4b05      	ldr	r3, [pc, #20]	; (699c <BrakeEnterIdleSleepMode+0x2c>)
    6988:	2201      	movs	r2, #1
    698a:	701a      	strb	r2, [r3, #0]
 
	
}
    698c:	46bd      	mov	sp, r7
    698e:	bd80      	pop	{r7, pc}
    6990:	20002ee8 	.word	0x20002ee8
    6994:	20002eb6 	.word	0x20002eb6
    6998:	20002eb0 	.word	0x20002eb0
    699c:	20002ebf 	.word	0x20002ebf

000069a0 <BrakeActuatorControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint8_t BrakeActuatorControl(uint8_t which)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b084      	sub	sp, #16
    69a4:	af00      	add	r7, sp, #0
    69a6:	1c02      	adds	r2, r0, #0
    69a8:	1dfb      	adds	r3, r7, #7
    69aa:	701a      	strb	r2, [r3, #0]
	uint8_t status; 
	status = BRAKE_GOOD; 
    69ac:	1c3b      	adds	r3, r7, #0
    69ae:	330f      	adds	r3, #15
    69b0:	2201      	movs	r2, #1
    69b2:	701a      	strb	r2, [r3, #0]
	switch (which)
    69b4:	1dfb      	adds	r3, r7, #7
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	2b01      	cmp	r3, #1
    69ba:	d03d      	beq.n	6a38 <BrakeActuatorControl+0x98>
    69bc:	dc02      	bgt.n	69c4 <BrakeActuatorControl+0x24>
    69be:	2b00      	cmp	r3, #0
    69c0:	d006      	beq.n	69d0 <BrakeActuatorControl+0x30>
    69c2:	e0af      	b.n	6b24 <BrakeActuatorControl+0x184>
    69c4:	2b02      	cmp	r3, #2
    69c6:	d066      	beq.n	6a96 <BrakeActuatorControl+0xf6>
    69c8:	2b03      	cmp	r3, #3
    69ca:	d100      	bne.n	69ce <BrakeActuatorControl+0x2e>
    69cc:	e07b      	b.n	6ac6 <BrakeActuatorControl+0x126>
    69ce:	e0a9      	b.n	6b24 <BrakeActuatorControl+0x184>
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
    69d0:	4b65      	ldr	r3, [pc, #404]	; (6b68 <BrakeActuatorControl+0x1c8>)
    69d2:	781b      	ldrb	r3, [r3, #0]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d026      	beq.n	6a26 <BrakeActuatorControl+0x86>
    69d8:	4b64      	ldr	r3, [pc, #400]	; (6b6c <BrakeActuatorControl+0x1cc>)
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	2b01      	cmp	r3, #1
    69de:	d122      	bne.n	6a26 <BrakeActuatorControl+0x86>
			{	 
				if (encoderCount == 0)
    69e0:	4b63      	ldr	r3, [pc, #396]	; (6b70 <BrakeActuatorControl+0x1d0>)
    69e2:	881b      	ldrh	r3, [r3, #0]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d10b      	bne.n	6a00 <BrakeActuatorControl+0x60>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    69e8:	4b62      	ldr	r3, [pc, #392]	; (6b74 <BrakeActuatorControl+0x1d4>)
    69ea:	789b      	ldrb	r3, [r3, #2]
    69ec:	2240      	movs	r2, #64	; 0x40
    69ee:	4313      	orrs	r3, r2
    69f0:	b2da      	uxtb	r2, r3
    69f2:	4b60      	ldr	r3, [pc, #384]	; (6b74 <BrakeActuatorControl+0x1d4>)
    69f4:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    69f6:	1c3b      	adds	r3, r7, #0
    69f8:	330f      	adds	r3, #15
    69fa:	2200      	movs	r2, #0
    69fc:	701a      	strb	r2, [r3, #0]
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
			{	 
				if (encoderCount == 0)
    69fe:	e01a      	b.n	6a36 <BrakeActuatorControl+0x96>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEOFFFAIL;
    6a00:	4b5c      	ldr	r3, [pc, #368]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a02:	789b      	ldrb	r3, [r3, #2]
    6a04:	2204      	movs	r2, #4
    6a06:	4313      	orrs	r3, r2
    6a08:	b2da      	uxtb	r2, r3
    6a0a:	4b5a      	ldr	r3, [pc, #360]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a0c:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6a0e:	4b59      	ldr	r3, [pc, #356]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a10:	789b      	ldrb	r3, [r3, #2]
    6a12:	2240      	movs	r2, #64	; 0x40
    6a14:	4393      	bics	r3, r2
    6a16:	b2da      	uxtb	r2, r3
    6a18:	4b56      	ldr	r3, [pc, #344]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a1a:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR; 
    6a1c:	1c3b      	adds	r3, r7, #0
    6a1e:	330f      	adds	r3, #15
    6a20:	2200      	movs	r2, #0
    6a22:	701a      	strb	r2, [r3, #0]
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
			{	 
				if (encoderCount == 0)
    6a24:	e007      	b.n	6a36 <BrakeActuatorControl+0x96>
					status = BRAKE_ERROR; 
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEOFFFAIL;
    6a26:	4b53      	ldr	r3, [pc, #332]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a28:	789b      	ldrb	r3, [r3, #2]
    6a2a:	2204      	movs	r2, #4
    6a2c:	4393      	bics	r3, r2
    6a2e:	b2da      	uxtb	r2, r3
    6a30:	4b50      	ldr	r3, [pc, #320]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a32:	709a      	strb	r2, [r3, #2]
			}
			break;
    6a34:	e076      	b.n	6b24 <BrakeActuatorControl+0x184>
    6a36:	e075      	b.n	6b24 <BrakeActuatorControl+0x184>
		}
		case BRAKE_AWAY:
		{
			if (flimitState != 0)
    6a38:	4b4f      	ldr	r3, [pc, #316]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d022      	beq.n	6a86 <BrakeActuatorControl+0xe6>
			{
				if (encoderCount == 0)
    6a40:	4b4b      	ldr	r3, [pc, #300]	; (6b70 <BrakeActuatorControl+0x1d0>)
    6a42:	881b      	ldrh	r3, [r3, #0]
    6a44:	2b00      	cmp	r3, #0
    6a46:	d10b      	bne.n	6a60 <BrakeActuatorControl+0xc0>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    6a48:	4b4a      	ldr	r3, [pc, #296]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a4a:	789b      	ldrb	r3, [r3, #2]
    6a4c:	2240      	movs	r2, #64	; 0x40
    6a4e:	4313      	orrs	r3, r2
    6a50:	b2da      	uxtb	r2, r3
    6a52:	4b48      	ldr	r3, [pc, #288]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a54:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    6a56:	1c3b      	adds	r3, r7, #0
    6a58:	330f      	adds	r3, #15
    6a5a:	2200      	movs	r2, #0
    6a5c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    6a5e:	e061      	b.n	6b24 <BrakeActuatorControl+0x184>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDOFFFAIL;
    6a60:	4b44      	ldr	r3, [pc, #272]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a62:	789b      	ldrb	r3, [r3, #2]
    6a64:	2208      	movs	r2, #8
    6a66:	4313      	orrs	r3, r2
    6a68:	b2da      	uxtb	r2, r3
    6a6a:	4b42      	ldr	r3, [pc, #264]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a6c:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6a6e:	4b41      	ldr	r3, [pc, #260]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a70:	789b      	ldrb	r3, [r3, #2]
    6a72:	2240      	movs	r2, #64	; 0x40
    6a74:	4393      	bics	r3, r2
    6a76:	b2da      	uxtb	r2, r3
    6a78:	4b3e      	ldr	r3, [pc, #248]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a7a:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    6a7c:	1c3b      	adds	r3, r7, #0
    6a7e:	330f      	adds	r3, #15
    6a80:	2200      	movs	r2, #0
    6a82:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    6a84:	e04e      	b.n	6b24 <BrakeActuatorControl+0x184>
					status = BRAKE_ERROR;
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
    6a86:	4b3b      	ldr	r3, [pc, #236]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a88:	789b      	ldrb	r3, [r3, #2]
    6a8a:	2208      	movs	r2, #8
    6a8c:	4393      	bics	r3, r2
    6a8e:	b2da      	uxtb	r2, r3
    6a90:	4b38      	ldr	r3, [pc, #224]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a92:	709a      	strb	r2, [r3, #2]
			}
			break;
    6a94:	e046      	b.n	6b24 <BrakeActuatorControl+0x184>
		}		
		case BRAKE_RUN:
		{
			if (encoderCount == 0)
    6a96:	4b36      	ldr	r3, [pc, #216]	; (6b70 <BrakeActuatorControl+0x1d0>)
    6a98:	881b      	ldrh	r3, [r3, #0]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d10b      	bne.n	6ab6 <BrakeActuatorControl+0x116>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    6a9e:	4b35      	ldr	r3, [pc, #212]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6aa0:	789b      	ldrb	r3, [r3, #2]
    6aa2:	2240      	movs	r2, #64	; 0x40
    6aa4:	4313      	orrs	r3, r2
    6aa6:	b2da      	uxtb	r2, r3
    6aa8:	4b32      	ldr	r3, [pc, #200]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6aaa:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6aac:	1c3b      	adds	r3, r7, #0
    6aae:	330f      	adds	r3, #15
    6ab0:	2200      	movs	r2, #0
    6ab2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
			}
			break;
    6ab4:	e036      	b.n	6b24 <BrakeActuatorControl+0x184>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6ab6:	4b2f      	ldr	r3, [pc, #188]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ab8:	789b      	ldrb	r3, [r3, #2]
    6aba:	2240      	movs	r2, #64	; 0x40
    6abc:	4393      	bics	r3, r2
    6abe:	b2da      	uxtb	r2, r3
    6ac0:	4b2c      	ldr	r3, [pc, #176]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ac2:	709a      	strb	r2, [r3, #2]
			}
			break;
    6ac4:	e02e      	b.n	6b24 <BrakeActuatorControl+0x184>
		}		
		case BRAKE_MIDDLESTOP:
		{
			if (flimitState == 0)
    6ac6:	4b2c      	ldr	r3, [pc, #176]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	2b00      	cmp	r3, #0
    6acc:	d10b      	bne.n	6ae6 <BrakeActuatorControl+0x146>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDONFAIL;
    6ace:	4b29      	ldr	r3, [pc, #164]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ad0:	789b      	ldrb	r3, [r3, #2]
    6ad2:	2202      	movs	r2, #2
    6ad4:	4313      	orrs	r3, r2
    6ad6:	b2da      	uxtb	r2, r3
    6ad8:	4b26      	ldr	r3, [pc, #152]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ada:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6adc:	1c3b      	adds	r3, r7, #0
    6ade:	330f      	adds	r3, #15
    6ae0:	2200      	movs	r2, #0
    6ae2:	701a      	strb	r2, [r3, #0]
    6ae4:	e006      	b.n	6af4 <BrakeActuatorControl+0x154>
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDONFAIL;
    6ae6:	4b23      	ldr	r3, [pc, #140]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ae8:	789b      	ldrb	r3, [r3, #2]
    6aea:	2202      	movs	r2, #2
    6aec:	4393      	bics	r3, r2
    6aee:	b2da      	uxtb	r2, r3
    6af0:	4b20      	ldr	r3, [pc, #128]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6af2:	709a      	strb	r2, [r3, #2]
			}
			if (hlimitState == 0)
    6af4:	4b1c      	ldr	r3, [pc, #112]	; (6b68 <BrakeActuatorControl+0x1c8>)
    6af6:	781b      	ldrb	r3, [r3, #0]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d10b      	bne.n	6b14 <BrakeActuatorControl+0x174>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
    6afc:	4b1d      	ldr	r3, [pc, #116]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6afe:	789b      	ldrb	r3, [r3, #2]
    6b00:	2201      	movs	r2, #1
    6b02:	4313      	orrs	r3, r2
    6b04:	b2da      	uxtb	r2, r3
    6b06:	4b1b      	ldr	r3, [pc, #108]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b08:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6b0a:	1c3b      	adds	r3, r7, #0
    6b0c:	330f      	adds	r3, #15
    6b0e:	2200      	movs	r2, #0
    6b10:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
			}			
			break;
    6b12:	e006      	b.n	6b22 <BrakeActuatorControl+0x182>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
    6b14:	4b17      	ldr	r3, [pc, #92]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b16:	789b      	ldrb	r3, [r3, #2]
    6b18:	2201      	movs	r2, #1
    6b1a:	4393      	bics	r3, r2
    6b1c:	b2da      	uxtb	r2, r3
    6b1e:	4b15      	ldr	r3, [pc, #84]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b20:	709a      	strb	r2, [r3, #2]
			}			
			break;
    6b22:	46c0      	nop			; (mov r8, r8)
		}		
	}
	if ((flimitState == 0)&&(hlimitState ==0))
    6b24:	4b14      	ldr	r3, [pc, #80]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d10f      	bne.n	6b4c <BrakeActuatorControl+0x1ac>
    6b2c:	4b0e      	ldr	r3, [pc, #56]	; (6b68 <BrakeActuatorControl+0x1c8>)
    6b2e:	781b      	ldrb	r3, [r3, #0]
    6b30:	2b00      	cmp	r3, #0
    6b32:	d10b      	bne.n	6b4c <BrakeActuatorControl+0x1ac>
	{
		brakeStatus.ActuatorStatus |= ACTUATORSTATUS_BOTHLIMITSACTIVE;	
    6b34:	4b0f      	ldr	r3, [pc, #60]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b36:	789b      	ldrb	r3, [r3, #2]
    6b38:	2220      	movs	r2, #32
    6b3a:	4313      	orrs	r3, r2
    6b3c:	b2da      	uxtb	r2, r3
    6b3e:	4b0d      	ldr	r3, [pc, #52]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b40:	709a      	strb	r2, [r3, #2]
		status = BRAKE_ERROR;
    6b42:	1c3b      	adds	r3, r7, #0
    6b44:	330f      	adds	r3, #15
    6b46:	2200      	movs	r2, #0
    6b48:	701a      	strb	r2, [r3, #0]
    6b4a:	e006      	b.n	6b5a <BrakeActuatorControl+0x1ba>
	}
	else
	{
		brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_BOTHLIMITSACTIVE;
    6b4c:	4b09      	ldr	r3, [pc, #36]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b4e:	789b      	ldrb	r3, [r3, #2]
    6b50:	2220      	movs	r2, #32
    6b52:	4393      	bics	r3, r2
    6b54:	b2da      	uxtb	r2, r3
    6b56:	4b07      	ldr	r3, [pc, #28]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b58:	709a      	strb	r2, [r3, #2]
	}
	return status; 
    6b5a:	1c3b      	adds	r3, r7, #0
    6b5c:	330f      	adds	r3, #15
    6b5e:	781b      	ldrb	r3, [r3, #0]
}
    6b60:	1c18      	adds	r0, r3, #0
    6b62:	46bd      	mov	sp, r7
    6b64:	b004      	add	sp, #16
    6b66:	bd80      	pop	{r7, pc}
    6b68:	20003068 	.word	0x20003068
    6b6c:	20000001 	.word	0x20000001
    6b70:	200004a8 	.word	0x200004a8
    6b74:	20003694 	.word	0x20003694
    6b78:	20003072 	.word	0x20003072

00006b7c <BrakeLEDControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeLEDControl(void)
{
    6b7c:	b580      	push	{r7, lr}
    6b7e:	af00      	add	r7, sp, #0
	//--------------------------------
	// what should the bi color LED be doing?
	// 1. flash red for the following errors: 
	//    a. brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;	
	if (poweredUp != 0)
    6b80:	4b58      	ldr	r3, [pc, #352]	; (6ce4 <BrakeLEDControl+0x168>)
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d100      	bne.n	6b8a <BrakeLEDControl+0xe>
    6b88:	e0aa      	b.n	6ce0 <BrakeLEDControl+0x164>
	{
	switch (brakeState)
    6b8a:	4b57      	ldr	r3, [pc, #348]	; (6ce8 <BrakeLEDControl+0x16c>)
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2b24      	cmp	r3, #36	; 0x24
    6b90:	d900      	bls.n	6b94 <BrakeLEDControl+0x18>
    6b92:	e0a5      	b.n	6ce0 <BrakeLEDControl+0x164>
    6b94:	009a      	lsls	r2, r3, #2
    6b96:	4b55      	ldr	r3, [pc, #340]	; (6cec <BrakeLEDControl+0x170>)
    6b98:	18d3      	adds	r3, r2, r3
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	469f      	mov	pc, r3
		case BRAKESTATE_POWEREDUP0:		
		case BRAKESTATE_POWEREDUP:
		case BRAKESTATE_IDLESLEEP:
		{
			//leds are off 
			brakeBiLED = BRAKEBILED_OFF;
    6b9e:	4b54      	ldr	r3, [pc, #336]	; (6cf0 <BrakeLEDControl+0x174>)
    6ba0:	2202      	movs	r2, #2
    6ba2:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF; 
    6ba4:	4b53      	ldr	r3, [pc, #332]	; (6cf4 <BrakeLEDControl+0x178>)
    6ba6:	2202      	movs	r2, #2
    6ba8:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6baa:	4b53      	ldr	r3, [pc, #332]	; (6cf8 <BrakeLEDControl+0x17c>)
    6bac:	2201      	movs	r2, #1
    6bae:	701a      	strb	r2, [r3, #0]
			break; 
    6bb0:	e096      	b.n	6ce0 <BrakeLEDControl+0x164>
		}
		case BRAKESTATE_RESET:
		case BRAKESTATE_PRESETUP:
		case BRAKESTATE_PRESETUP0:
		{
			brakeBiLED = BRAKEBILED_OFF;
    6bb2:	4b4f      	ldr	r3, [pc, #316]	; (6cf0 <BrakeLEDControl+0x174>)
    6bb4:	2202      	movs	r2, #2
    6bb6:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6bb8:	4b4e      	ldr	r3, [pc, #312]	; (6cf4 <BrakeLEDControl+0x178>)
    6bba:	2203      	movs	r2, #3
    6bbc:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6bbe:	4b4e      	ldr	r3, [pc, #312]	; (6cf8 <BrakeLEDControl+0x17c>)
    6bc0:	2201      	movs	r2, #1
    6bc2:	701a      	strb	r2, [r3, #0]
			break;
    6bc4:	e08c      	b.n	6ce0 <BrakeLEDControl+0x164>
		}		
		case BRAKESTATE_WAITONSETUPLOADCELL:
		{
			//v01_57
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6bc6:	4b4d      	ldr	r3, [pc, #308]	; (6cfc <BrakeLEDControl+0x180>)
    6bc8:	791b      	ldrb	r3, [r3, #4]
    6bca:	1c1a      	adds	r2, r3, #0
    6bcc:	2308      	movs	r3, #8
    6bce:	4013      	ands	r3, r2
    6bd0:	d009      	beq.n	6be6 <BrakeLEDControl+0x6a>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6bd2:	4b47      	ldr	r3, [pc, #284]	; (6cf0 <BrakeLEDControl+0x174>)
    6bd4:	2204      	movs	r2, #4
    6bd6:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_OFF;
    6bd8:	4b46      	ldr	r3, [pc, #280]	; (6cf4 <BrakeLEDControl+0x178>)
    6bda:	2202      	movs	r2, #2
    6bdc:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6bde:	4b46      	ldr	r3, [pc, #280]	; (6cf8 <BrakeLEDControl+0x17c>)
    6be0:	2201      	movs	r2, #1
    6be2:	701a      	strb	r2, [r3, #0]
			{			
				brakeBiLED = BRAKEBILED_REDSOLID;
				brakeBlueLED = BRAKEBLUELED_SOLID;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			break;
    6be4:	e07c      	b.n	6ce0 <BrakeLEDControl+0x164>
				brakeBlueLED = BRAKEBLUELED_OFF;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			else
			{			
				brakeBiLED = BRAKEBILED_REDSOLID;
    6be6:	4b42      	ldr	r3, [pc, #264]	; (6cf0 <BrakeLEDControl+0x174>)
    6be8:	2208      	movs	r2, #8
    6bea:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_SOLID;
    6bec:	4b41      	ldr	r3, [pc, #260]	; (6cf4 <BrakeLEDControl+0x178>)
    6bee:	2201      	movs	r2, #1
    6bf0:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6bf2:	4b41      	ldr	r3, [pc, #260]	; (6cf8 <BrakeLEDControl+0x17c>)
    6bf4:	2201      	movs	r2, #1
    6bf6:	701a      	strb	r2, [r3, #0]
			}
			break;
    6bf8:	e072      	b.n	6ce0 <BrakeLEDControl+0x164>
		case BRAKESTATE_ERROR_FINAL:
		case BRAKESTATE_ERRORLOAD:
		case BRAKESTATE_ERRORLOADWAIT:
		case BRAKESTATE_ERROR_VOLTAGE_ACTIVE:					
		{
			brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6bfa:	4b3d      	ldr	r3, [pc, #244]	; (6cf0 <BrakeLEDControl+0x174>)
    6bfc:	2204      	movs	r2, #4
    6bfe:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF;
    6c00:	4b3c      	ldr	r3, [pc, #240]	; (6cf4 <BrakeLEDControl+0x178>)
    6c02:	2202      	movs	r2, #2
    6c04:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6c06:	4b3c      	ldr	r3, [pc, #240]	; (6cf8 <BrakeLEDControl+0x17c>)
    6c08:	2201      	movs	r2, #1
    6c0a:	701a      	strb	r2, [r3, #0]
			break;
    6c0c:	e068      	b.n	6ce0 <BrakeLEDControl+0x164>
		}				
		case BRAKESTATE_ERROR:
		{
			brakeBiLED = BRAKEBILED_REDFLASH;
    6c0e:	4b38      	ldr	r3, [pc, #224]	; (6cf0 <BrakeLEDControl+0x174>)
    6c10:	2203      	movs	r2, #3
    6c12:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF;
    6c14:	4b37      	ldr	r3, [pc, #220]	; (6cf4 <BrakeLEDControl+0x178>)
    6c16:	2202      	movs	r2, #2
    6c18:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6c1a:	4b37      	ldr	r3, [pc, #220]	; (6cf8 <BrakeLEDControl+0x17c>)
    6c1c:	2201      	movs	r2, #1
    6c1e:	701a      	strb	r2, [r3, #0]
			break;
    6c20:	e05e      	b.n	6ce0 <BrakeLEDControl+0x164>
		}		
		case BRAKESTATE_SETUP:
		case BRAKESTATE_SETUPACTIVE:
		{
			//v01_57
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6c22:	4b36      	ldr	r3, [pc, #216]	; (6cfc <BrakeLEDControl+0x180>)
    6c24:	791b      	ldrb	r3, [r3, #4]
    6c26:	1c1a      	adds	r2, r3, #0
    6c28:	2308      	movs	r3, #8
    6c2a:	4013      	ands	r3, r2
    6c2c:	d009      	beq.n	6c42 <BrakeLEDControl+0xc6>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6c2e:	4b30      	ldr	r3, [pc, #192]	; (6cf0 <BrakeLEDControl+0x174>)
    6c30:	2204      	movs	r2, #4
    6c32:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_OFF;
    6c34:	4b2f      	ldr	r3, [pc, #188]	; (6cf4 <BrakeLEDControl+0x178>)
    6c36:	2202      	movs	r2, #2
    6c38:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6c3a:	4b2f      	ldr	r3, [pc, #188]	; (6cf8 <BrakeLEDControl+0x17c>)
    6c3c:	2201      	movs	r2, #1
    6c3e:	701a      	strb	r2, [r3, #0]
			{
				brakeBiLED = BRAKEBILED_OFF;
				brakeBlueLED = BRAKEBLUELED_ALTGREEN;
				brakeRedLED = BRAKEREDLED_OFF; 			
			}
			break;
    6c40:	e04e      	b.n	6ce0 <BrakeLEDControl+0x164>
				brakeBlueLED = BRAKEBLUELED_OFF;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			else
			{
				brakeBiLED = BRAKEBILED_OFF;
    6c42:	4b2b      	ldr	r3, [pc, #172]	; (6cf0 <BrakeLEDControl+0x174>)
    6c44:	2202      	movs	r2, #2
    6c46:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6c48:	4b2a      	ldr	r3, [pc, #168]	; (6cf4 <BrakeLEDControl+0x178>)
    6c4a:	2203      	movs	r2, #3
    6c4c:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF; 			
    6c4e:	4b2a      	ldr	r3, [pc, #168]	; (6cf8 <BrakeLEDControl+0x17c>)
    6c50:	2201      	movs	r2, #1
    6c52:	701a      	strb	r2, [r3, #0]
			}
			break;
    6c54:	e044      	b.n	6ce0 <BrakeLEDControl+0x164>
		}		
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_ACTIVELOAD:
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{
			brakeBiLED = BRAKEBILED_GREENSOLID;
    6c56:	4b26      	ldr	r3, [pc, #152]	; (6cf0 <BrakeLEDControl+0x174>)
    6c58:	2200      	movs	r2, #0
    6c5a:	701a      	strb	r2, [r3, #0]
			if (((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)||
    6c5c:	4b27      	ldr	r3, [pc, #156]	; (6cfc <BrakeLEDControl+0x180>)
    6c5e:	791b      	ldrb	r3, [r3, #4]
    6c60:	1c1a      	adds	r2, r3, #0
    6c62:	2308      	movs	r3, #8
    6c64:	4013      	ands	r3, r2
    6c66:	d105      	bne.n	6c74 <BrakeLEDControl+0xf8>
			    ((brakeStatus.BrakeState & BRAKESTATE_ERRORLOADSET)!=0))
    6c68:	4b24      	ldr	r3, [pc, #144]	; (6cfc <BrakeLEDControl+0x180>)
    6c6a:	791b      	ldrb	r3, [r3, #4]
    6c6c:	b2db      	uxtb	r3, r3
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_ACTIVELOAD:
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{
			brakeBiLED = BRAKEBILED_GREENSOLID;
			if (((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)||
    6c6e:	b25b      	sxtb	r3, r3
    6c70:	2b00      	cmp	r3, #0
    6c72:	da03      	bge.n	6c7c <BrakeLEDControl+0x100>
			    ((brakeStatus.BrakeState & BRAKESTATE_ERRORLOADSET)!=0))
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6c74:	4b1e      	ldr	r3, [pc, #120]	; (6cf0 <BrakeLEDControl+0x174>)
    6c76:	2204      	movs	r2, #4
    6c78:	701a      	strb	r2, [r3, #0]
    6c7a:	e01c      	b.n	6cb6 <BrakeLEDControl+0x13a>
			}
			else
			{
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6c7c:	4b1f      	ldr	r3, [pc, #124]	; (6cfc <BrakeLEDControl+0x180>)
    6c7e:	791b      	ldrb	r3, [r3, #4]
    6c80:	1c1a      	adds	r2, r3, #0
    6c82:	2308      	movs	r3, #8
    6c84:	4013      	ands	r3, r2
    6c86:	d00d      	beq.n	6ca4 <BrakeLEDControl+0x128>
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6c88:	4b1c      	ldr	r3, [pc, #112]	; (6cfc <BrakeLEDControl+0x180>)
    6c8a:	791b      	ldrb	r3, [r3, #4]
    6c8c:	1c1a      	adds	r2, r3, #0
    6c8e:	2301      	movs	r3, #1
    6c90:	4013      	ands	r3, r2
    6c92:	d003      	beq.n	6c9c <BrakeLEDControl+0x120>
					{
						brakeBiLED = BRAKEBILED_YELLOWFLICKER;
    6c94:	4b16      	ldr	r3, [pc, #88]	; (6cf0 <BrakeLEDControl+0x174>)
    6c96:	2207      	movs	r2, #7
    6c98:	701a      	strb	r2, [r3, #0]
    6c9a:	e00c      	b.n	6cb6 <BrakeLEDControl+0x13a>
					}
					else	
					{			
						brakeBiLED = BRAKEBILED_YELLOWSOLID;
    6c9c:	4b14      	ldr	r3, [pc, #80]	; (6cf0 <BrakeLEDControl+0x174>)
    6c9e:	2206      	movs	r2, #6
    6ca0:	701a      	strb	r2, [r3, #0]
    6ca2:	e008      	b.n	6cb6 <BrakeLEDControl+0x13a>
					}
				}
				else
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6ca4:	4b15      	ldr	r3, [pc, #84]	; (6cfc <BrakeLEDControl+0x180>)
    6ca6:	791b      	ldrb	r3, [r3, #4]
    6ca8:	1c1a      	adds	r2, r3, #0
    6caa:	2301      	movs	r3, #1
    6cac:	4013      	ands	r3, r2
    6cae:	d002      	beq.n	6cb6 <BrakeLEDControl+0x13a>
					{
//V01_11				brakeBiLED = BRAKEBILED_GREENFLICKER;
						brakeBiLED = BRAKEBILED_GREENSOLID;						
    6cb0:	4b0f      	ldr	r3, [pc, #60]	; (6cf0 <BrakeLEDControl+0x174>)
    6cb2:	2200      	movs	r2, #0
    6cb4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			brakeBlueLED = BRAKEBLUELED_OFF;	
    6cb6:	4b0f      	ldr	r3, [pc, #60]	; (6cf4 <BrakeLEDControl+0x178>)
    6cb8:	2202      	movs	r2, #2
    6cba:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 					
    6cbc:	4b0e      	ldr	r3, [pc, #56]	; (6cf8 <BrakeLEDControl+0x17c>)
    6cbe:	2201      	movs	r2, #1
    6cc0:	701a      	strb	r2, [r3, #0]
			break;
    6cc2:	e00d      	b.n	6ce0 <BrakeLEDControl+0x164>
		case BRAKESTATE_ACTIVE_EXTEND:
		case BRAKESTATE_ACTIVE_RETRACT:
		case BRAKESTATE_ACTIVE_HOLD:
		case BRAKESTATE_END_RETRACT:
		{
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6cc4:	4b0b      	ldr	r3, [pc, #44]	; (6cf4 <BrakeLEDControl+0x178>)
    6cc6:	2201      	movs	r2, #1
    6cc8:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6cca:	4b0b      	ldr	r3, [pc, #44]	; (6cf8 <BrakeLEDControl+0x17c>)
    6ccc:	2201      	movs	r2, #1
    6cce:	701a      	strb	r2, [r3, #0]
			break;
    6cd0:	e006      	b.n	6ce0 <BrakeLEDControl+0x164>
		}		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			brakeRedLED = BRAKEREDLED_SOLID;
    6cd2:	4b09      	ldr	r3, [pc, #36]	; (6cf8 <BrakeLEDControl+0x17c>)
    6cd4:	2202      	movs	r2, #2
    6cd6:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6cd8:	4b06      	ldr	r3, [pc, #24]	; (6cf4 <BrakeLEDControl+0x178>)
    6cda:	2201      	movs	r2, #1
    6cdc:	701a      	strb	r2, [r3, #0]
			break;
    6cde:	46c0      	nop			; (mov r8, r8)
		} 
	}
	}
}
    6ce0:	46bd      	mov	sp, r7
    6ce2:	bd80      	pop	{r7, pc}
    6ce4:	200036b5 	.word	0x200036b5
    6ce8:	20002ebf 	.word	0x20002ebf
    6cec:	00018348 	.word	0x00018348
    6cf0:	20002ee8 	.word	0x20002ee8
    6cf4:	20002eb6 	.word	0x20002eb6
    6cf8:	20002eb0 	.word	0x20002eb0
    6cfc:	20003694 	.word	0x20003694

00006d00 <BrakeSupervisorytask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeSupervisorytask(void)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	af00      	add	r7, sp, #0
	port_pin_set_output_level(PIN_PB22, TRUE); //CLK_FIX
}
#endif	
	//--------------------------------
	// check voltages
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
    6d04:	2000      	movs	r0, #0
    6d06:	4b69      	ldr	r3, [pc, #420]	; (6eac <BrakeSupervisorytask+0x1ac>)
    6d08:	4798      	blx	r3
    6d0a:	1c03      	adds	r3, r0, #0
    6d0c:	1c1a      	adds	r2, r3, #0
    6d0e:	4b68      	ldr	r3, [pc, #416]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6d10:	801a      	strh	r2, [r3, #0]
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
    6d12:	2003      	movs	r0, #3
    6d14:	4b65      	ldr	r3, [pc, #404]	; (6eac <BrakeSupervisorytask+0x1ac>)
    6d16:	4798      	blx	r3
    6d18:	1c03      	adds	r3, r0, #0
    6d1a:	1c1a      	adds	r2, r3, #0
    6d1c:	4b65      	ldr	r3, [pc, #404]	; (6eb4 <BrakeSupervisorytask+0x1b4>)
    6d1e:	801a      	strh	r2, [r3, #0]
	UsartSendData(currentvalue);
    6d20:	4b63      	ldr	r3, [pc, #396]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6d22:	881b      	ldrh	r3, [r3, #0]
    6d24:	1c18      	adds	r0, r3, #0
    6d26:	4b64      	ldr	r3, [pc, #400]	; (6eb8 <BrakeSupervisorytask+0x1b8>)
    6d28:	4798      	blx	r3
	if (currentvalue< ADC_INPUTVOLTAGE_ERROR)  //ADC_INPUTVOLTAGE_8)
    6d2a:	4b61      	ldr	r3, [pc, #388]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6d2c:	881a      	ldrh	r2, [r3, #0]
    6d2e:	4b63      	ldr	r3, [pc, #396]	; (6ebc <BrakeSupervisorytask+0x1bc>)
    6d30:	429a      	cmp	r2, r3
    6d32:	d829      	bhi.n	6d88 <BrakeSupervisorytask+0x88>
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
    6d34:	4b62      	ldr	r3, [pc, #392]	; (6ec0 <BrakeSupervisorytask+0x1c0>)
    6d36:	881b      	ldrh	r3, [r3, #0]
    6d38:	2b31      	cmp	r3, #49	; 0x31
    6d3a:	d928      	bls.n	6d8e <BrakeSupervisorytask+0x8e>
		((brakeState == BRAKESTATE_PRESETUP0)||
    6d3c:	4b61      	ldr	r3, [pc, #388]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d3e:	781b      	ldrb	r3, [r3, #0]
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
	UsartSendData(currentvalue);
	if (currentvalue< ADC_INPUTVOLTAGE_ERROR)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
    6d40:	2b1c      	cmp	r3, #28
    6d42:	d013      	beq.n	6d6c <BrakeSupervisorytask+0x6c>
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
    6d44:	4b5f      	ldr	r3, [pc, #380]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d46:	781b      	ldrb	r3, [r3, #0]
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
	UsartSendData(currentvalue);
	if (currentvalue< ADC_INPUTVOLTAGE_ERROR)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
    6d48:	2b04      	cmp	r3, #4
    6d4a:	d00f      	beq.n	6d6c <BrakeSupervisorytask+0x6c>
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
    6d4c:	4b5d      	ldr	r3, [pc, #372]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d4e:	781b      	ldrb	r3, [r3, #0]
	UsartSendData(currentvalue);
	if (currentvalue< ADC_INPUTVOLTAGE_ERROR)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
    6d50:	2b03      	cmp	r3, #3
    6d52:	d00b      	beq.n	6d6c <BrakeSupervisorytask+0x6c>
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
    6d54:	4b5b      	ldr	r3, [pc, #364]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d56:	781b      	ldrb	r3, [r3, #0]
	if (currentvalue< ADC_INPUTVOLTAGE_ERROR)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
    6d58:	2b02      	cmp	r3, #2
    6d5a:	d007      	beq.n	6d6c <BrakeSupervisorytask+0x6c>
		(brakeState == BRAKESTATE_POWERINGUP)||
		(brakeState == BRAKESTATE_POWEREDUP)||
    6d5c:	4b59      	ldr	r3, [pc, #356]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d5e:	781b      	ldrb	r3, [r3, #0]
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
    6d60:	2b06      	cmp	r3, #6
    6d62:	d003      	beq.n	6d6c <BrakeSupervisorytask+0x6c>
		(brakeState == BRAKESTATE_POWEREDUP)||
		(brakeState == BRAKESTATE_POWEREDUP0)))
    6d64:	4b57      	ldr	r3, [pc, #348]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6d66:	781b      	ldrb	r3, [r3, #0]
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
		(brakeState == BRAKESTATE_POWEREDUP)||
    6d68:	2b1b      	cmp	r3, #27
    6d6a:	d110      	bne.n	6d8e <BrakeSupervisorytask+0x8e>
		(brakeState == BRAKESTATE_POWEREDUP0)))
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    6d6c:	4b56      	ldr	r3, [pc, #344]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6d6e:	791b      	ldrb	r3, [r3, #4]
    6d70:	1c1a      	adds	r2, r3, #0
    6d72:	2308      	movs	r3, #8
    6d74:	4013      	ands	r3, r2
    6d76:	d10a      	bne.n	6d8e <BrakeSupervisorytask+0x8e>
			{
				brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;
    6d78:	4b53      	ldr	r3, [pc, #332]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6d7a:	791b      	ldrb	r3, [r3, #4]
    6d7c:	2208      	movs	r2, #8
    6d7e:	4313      	orrs	r3, r2
    6d80:	b2da      	uxtb	r2, r3
    6d82:	4b51      	ldr	r3, [pc, #324]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6d84:	711a      	strb	r2, [r3, #4]
    6d86:	e002      	b.n	6d8e <BrakeSupervisorytask+0x8e>
			}
		}	
	}
	else
	{	
		fastVoltageBadTime = 0; 	
    6d88:	4b4d      	ldr	r3, [pc, #308]	; (6ec0 <BrakeSupervisorytask+0x1c0>)
    6d8a:	2200      	movs	r2, #0
    6d8c:	801a      	strh	r2, [r3, #0]
	}
	
	if (currentvalue< ADC_INPUTVOLTAGE_ERRORSTART)
    6d8e:	4b48      	ldr	r3, [pc, #288]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6d90:	881a      	ldrh	r2, [r3, #0]
    6d92:	4b4e      	ldr	r3, [pc, #312]	; (6ecc <BrakeSupervisorytask+0x1cc>)
    6d94:	429a      	cmp	r2, r3
    6d96:	d811      	bhi.n	6dbc <BrakeSupervisorytask+0xbc>
	{
		if (voltageBadTime >= VOLTAGE_BAD_TIME)
    6d98:	4b4d      	ldr	r3, [pc, #308]	; (6ed0 <BrakeSupervisorytask+0x1d0>)
    6d9a:	881b      	ldrh	r3, [r3, #0]
    6d9c:	2b04      	cmp	r3, #4
    6d9e:	d936      	bls.n	6e0e <BrakeSupervisorytask+0x10e>
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    6da0:	4b49      	ldr	r3, [pc, #292]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6da2:	791b      	ldrb	r3, [r3, #4]
    6da4:	1c1a      	adds	r2, r3, #0
    6da6:	2308      	movs	r3, #8
    6da8:	4013      	ands	r3, r2
    6daa:	d130      	bne.n	6e0e <BrakeSupervisorytask+0x10e>
			{
				brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;
    6dac:	4b46      	ldr	r3, [pc, #280]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6dae:	791b      	ldrb	r3, [r3, #4]
    6db0:	2208      	movs	r2, #8
    6db2:	4313      	orrs	r3, r2
    6db4:	b2da      	uxtb	r2, r3
    6db6:	4b44      	ldr	r3, [pc, #272]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6db8:	711a      	strb	r2, [r3, #4]
    6dba:	e028      	b.n	6e0e <BrakeSupervisorytask+0x10e>
			}
		}
	}
	else
	{
		if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6dbc:	4b42      	ldr	r3, [pc, #264]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6dbe:	791b      	ldrb	r3, [r3, #4]
    6dc0:	1c1a      	adds	r2, r3, #0
    6dc2:	2308      	movs	r3, #8
    6dc4:	4013      	ands	r3, r2
    6dc6:	d01c      	beq.n	6e02 <BrakeSupervisorytask+0x102>
		{
//			if ((currentvalue> ADC_INPUTVOLTAGE_8PT5)&&
			if ((currentvalue> ADC_INPUTVOLTAGE_RECOVER)&&			
    6dc8:	4b39      	ldr	r3, [pc, #228]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6dca:	881a      	ldrh	r2, [r3, #0]
    6dcc:	4b41      	ldr	r3, [pc, #260]	; (6ed4 <BrakeSupervisorytask+0x1d4>)
    6dce:	429a      	cmp	r2, r3
    6dd0:	d917      	bls.n	6e02 <BrakeSupervisorytask+0x102>
			   ((supercapValue > 0x800)||(brakeState == BRAKESTATE_IDLESLEEP)))
    6dd2:	4b38      	ldr	r3, [pc, #224]	; (6eb4 <BrakeSupervisorytask+0x1b4>)
    6dd4:	881a      	ldrh	r2, [r3, #0]
	else
	{
		if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
		{
//			if ((currentvalue> ADC_INPUTVOLTAGE_8PT5)&&
			if ((currentvalue> ADC_INPUTVOLTAGE_RECOVER)&&			
    6dd6:	2380      	movs	r3, #128	; 0x80
    6dd8:	011b      	lsls	r3, r3, #4
    6dda:	429a      	cmp	r2, r3
    6ddc:	d803      	bhi.n	6de6 <BrakeSupervisorytask+0xe6>
			   ((supercapValue > 0x800)||(brakeState == BRAKESTATE_IDLESLEEP)))
    6dde:	4b39      	ldr	r3, [pc, #228]	; (6ec4 <BrakeSupervisorytask+0x1c4>)
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	2b01      	cmp	r3, #1
    6de4:	d10d      	bne.n	6e02 <BrakeSupervisorytask+0x102>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_INPUTVOLTAGEBAD;	
    6de6:	4b38      	ldr	r3, [pc, #224]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6de8:	791b      	ldrb	r3, [r3, #4]
    6dea:	2208      	movs	r2, #8
    6dec:	4393      	bics	r3, r2
    6dee:	b2da      	uxtb	r2, r3
    6df0:	4b35      	ldr	r3, [pc, #212]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6df2:	711a      	strb	r2, [r3, #4]
				brakeStatus.BrakeState &= ~BRAKESTATE_LOWSUPERCAP;	
    6df4:	4b34      	ldr	r3, [pc, #208]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6df6:	791b      	ldrb	r3, [r3, #4]
    6df8:	2220      	movs	r2, #32
    6dfa:	4393      	bics	r3, r2
    6dfc:	b2da      	uxtb	r2, r3
    6dfe:	4b32      	ldr	r3, [pc, #200]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6e00:	711a      	strb	r2, [r3, #4]
			}
		}
		voltageBadTime = 0; 
    6e02:	4b33      	ldr	r3, [pc, #204]	; (6ed0 <BrakeSupervisorytask+0x1d0>)
    6e04:	2200      	movs	r2, #0
    6e06:	801a      	strh	r2, [r3, #0]
		fastVoltageBadTime = 0; 
    6e08:	4b2d      	ldr	r3, [pc, #180]	; (6ec0 <BrakeSupervisorytask+0x1c0>)
    6e0a:	2200      	movs	r2, #0
    6e0c:	801a      	strh	r2, [r3, #0]
	}
	//-----------------------------------------
	// if voltage is over 10.5 volts and board is turned on - 
	// enable the super cap. 
	if (currentvalue> ADC_INPUTVOLTAGE_10PT5)
    6e0e:	4b28      	ldr	r3, [pc, #160]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6e10:	881a      	ldrh	r2, [r3, #0]
    6e12:	4b31      	ldr	r3, [pc, #196]	; (6ed8 <BrakeSupervisorytask+0x1d8>)
    6e14:	429a      	cmp	r2, r3
    6e16:	d91d      	bls.n	6e54 <BrakeSupervisorytask+0x154>
	{	
		//----------------boc //01_38_#2
		if (chargingSupercap == 0)
    6e18:	4b30      	ldr	r3, [pc, #192]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e1a:	781b      	ldrb	r3, [r3, #0]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d10c      	bne.n	6e3a <BrakeSupervisorytask+0x13a>
		{
			if (supercapValue < SUPERCAP_17V)
    6e20:	4b24      	ldr	r3, [pc, #144]	; (6eb4 <BrakeSupervisorytask+0x1b4>)
    6e22:	881a      	ldrh	r2, [r3, #0]
    6e24:	4b2e      	ldr	r3, [pc, #184]	; (6ee0 <BrakeSupervisorytask+0x1e0>)
    6e26:	429a      	cmp	r2, r3
    6e28:	d830      	bhi.n	6e8c <BrakeSupervisorytask+0x18c>
			{
				port_pin_set_output_level(SUPERCAPEN, true);  
    6e2a:	2025      	movs	r0, #37	; 0x25
    6e2c:	2101      	movs	r1, #1
    6e2e:	4b2d      	ldr	r3, [pc, #180]	; (6ee4 <BrakeSupervisorytask+0x1e4>)
    6e30:	4798      	blx	r3
				chargingSupercap = 1;   
    6e32:	4b2a      	ldr	r3, [pc, #168]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e34:	2201      	movs	r2, #1
    6e36:	701a      	strb	r2, [r3, #0]
    6e38:	e028      	b.n	6e8c <BrakeSupervisorytask+0x18c>
			}
		}
		else
		{
			if (supercapValue > SUPERCAP_17PT5)
    6e3a:	4b1e      	ldr	r3, [pc, #120]	; (6eb4 <BrakeSupervisorytask+0x1b4>)
    6e3c:	881a      	ldrh	r2, [r3, #0]
    6e3e:	4b2a      	ldr	r3, [pc, #168]	; (6ee8 <BrakeSupervisorytask+0x1e8>)
    6e40:	429a      	cmp	r2, r3
    6e42:	d923      	bls.n	6e8c <BrakeSupervisorytask+0x18c>
			{
				port_pin_set_output_level(SUPERCAPEN, false);
    6e44:	2025      	movs	r0, #37	; 0x25
    6e46:	2100      	movs	r1, #0
    6e48:	4b26      	ldr	r3, [pc, #152]	; (6ee4 <BrakeSupervisorytask+0x1e4>)
    6e4a:	4798      	blx	r3
				chargingSupercap = 0;   
    6e4c:	4b23      	ldr	r3, [pc, #140]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e4e:	2200      	movs	r2, #0
    6e50:	701a      	strb	r2, [r3, #0]
    6e52:	e01b      	b.n	6e8c <BrakeSupervisorytask+0x18c>
			}		
		}
	}
	else
	{
		if (currentvalue< ADC_INPUTVOLTAGE_10PT2)
    6e54:	4b16      	ldr	r3, [pc, #88]	; (6eb0 <BrakeSupervisorytask+0x1b0>)
    6e56:	881a      	ldrh	r2, [r3, #0]
    6e58:	4b24      	ldr	r3, [pc, #144]	; (6eec <BrakeSupervisorytask+0x1ec>)
    6e5a:	429a      	cmp	r2, r3
    6e5c:	d816      	bhi.n	6e8c <BrakeSupervisorytask+0x18c>
		{
			if (chargingSupercap != 0)
    6e5e:	4b1f      	ldr	r3, [pc, #124]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e60:	781b      	ldrb	r3, [r3, #0]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d006      	beq.n	6e74 <BrakeSupervisorytask+0x174>
			{				
				port_pin_set_output_level(SUPERCAPEN, false);
    6e66:	2025      	movs	r0, #37	; 0x25
    6e68:	2100      	movs	r1, #0
    6e6a:	4b1e      	ldr	r3, [pc, #120]	; (6ee4 <BrakeSupervisorytask+0x1e4>)
    6e6c:	4798      	blx	r3
				chargingSupercap = 0;
    6e6e:	4b1b      	ldr	r3, [pc, #108]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e70:	2200      	movs	r2, #0
    6e72:	701a      	strb	r2, [r3, #0]
			}
			if (supercapValue < 0x0400)
    6e74:	4b0f      	ldr	r3, [pc, #60]	; (6eb4 <BrakeSupervisorytask+0x1b4>)
    6e76:	881a      	ldrh	r2, [r3, #0]
    6e78:	4b1d      	ldr	r3, [pc, #116]	; (6ef0 <BrakeSupervisorytask+0x1f0>)
    6e7a:	429a      	cmp	r2, r3
    6e7c:	d806      	bhi.n	6e8c <BrakeSupervisorytask+0x18c>
			{
				brakeStatus.BrakeState |= BRAKESTATE_LOWSUPERCAP;					
    6e7e:	4b12      	ldr	r3, [pc, #72]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6e80:	791b      	ldrb	r3, [r3, #4]
    6e82:	2220      	movs	r2, #32
    6e84:	4313      	orrs	r3, r2
    6e86:	b2da      	uxtb	r2, r3
    6e88:	4b0f      	ldr	r3, [pc, #60]	; (6ec8 <BrakeSupervisorytask+0x1c8>)
    6e8a:	711a      	strb	r2, [r3, #4]
			}				
		}
	}
	if (chargingSupercap == 0)
    6e8c:	4b13      	ldr	r3, [pc, #76]	; (6edc <BrakeSupervisorytask+0x1dc>)
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	2b00      	cmp	r3, #0
    6e92:	d104      	bne.n	6e9e <BrakeSupervisorytask+0x19e>
	{
		port_pin_set_output_level(SUPERCAPEN, false);  		
    6e94:	2025      	movs	r0, #37	; 0x25
    6e96:	2100      	movs	r1, #0
    6e98:	4b12      	ldr	r3, [pc, #72]	; (6ee4 <BrakeSupervisorytask+0x1e4>)
    6e9a:	4798      	blx	r3
    6e9c:	e003      	b.n	6ea6 <BrakeSupervisorytask+0x1a6>
	}
	else
	{
		port_pin_set_output_level(SUPERCAPEN, true);  		
    6e9e:	2025      	movs	r0, #37	; 0x25
    6ea0:	2101      	movs	r1, #1
    6ea2:	4b10      	ldr	r3, [pc, #64]	; (6ee4 <BrakeSupervisorytask+0x1e4>)
    6ea4:	4798      	blx	r3
	}		
}
    6ea6:	46bd      	mov	sp, r7
    6ea8:	bd80      	pop	{r7, pc}
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	0000b4b5 	.word	0x0000b4b5
    6eb0:	20002ed0 	.word	0x20002ed0
    6eb4:	200004ac 	.word	0x200004ac
    6eb8:	0000d65d 	.word	0x0000d65d
    6ebc:	000003a1 	.word	0x000003a1
    6ec0:	20002ed6 	.word	0x20002ed6
    6ec4:	20002ebf 	.word	0x20002ebf
    6ec8:	20003694 	.word	0x20003694
    6ecc:	00000524 	.word	0x00000524
    6ed0:	20002ed8 	.word	0x20002ed8
    6ed4:	000003ef 	.word	0x000003ef
    6ed8:	0000065b 	.word	0x0000065b
    6edc:	200004ab 	.word	0x200004ab
    6ee0:	00000a36 	.word	0x00000a36
    6ee4:	000067a1 	.word	0x000067a1
    6ee8:	00000a82 	.word	0x00000a82
    6eec:	0000062c 	.word	0x0000062c
    6ef0:	000003ff 	.word	0x000003ff

00006ef4 <BrakeBoardStateMachineTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeBoardStateMachineTask(void)
{
    6ef4:	b590      	push	{r4, r7, lr}
    6ef6:	b085      	sub	sp, #20
    6ef8:	af00      	add	r7, sp, #0
	// check that encoder count is changing. 
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
    6efa:	4bd1      	ldr	r3, [pc, #836]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    6efc:	781b      	ldrb	r3, [r3, #0]
    6efe:	2b01      	cmp	r3, #1
    6f00:	d00b      	beq.n	6f1a <BrakeBoardStateMachineTask+0x26>
    6f02:	4bcf      	ldr	r3, [pc, #828]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    6f04:	781b      	ldrb	r3, [r3, #0]
    6f06:	2b03      	cmp	r3, #3
    6f08:	d007      	beq.n	6f1a <BrakeBoardStateMachineTask+0x26>
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6f0a:	4bcd      	ldr	r3, [pc, #820]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    6f0c:	781b      	ldrb	r3, [r3, #0]
	// check that encoder count is changing. 
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
    6f0e:	2b02      	cmp	r3, #2
    6f10:	d003      	beq.n	6f1a <BrakeBoardStateMachineTask+0x26>
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6f12:	4bcb      	ldr	r3, [pc, #812]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	2b04      	cmp	r3, #4
    6f18:	d12d      	bne.n	6f76 <BrakeBoardStateMachineTask+0x82>
		 (brakeState !=BRAKESTATE_ERROR_FINAL ))
    6f1a:	4bca      	ldr	r3, [pc, #808]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6f1c:	781b      	ldrb	r3, [r3, #0]
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6f1e:	2b18      	cmp	r3, #24
    6f20:	d029      	beq.n	6f76 <BrakeBoardStateMachineTask+0x82>
	{
		if (encoderCount == 0)
	    {
	//		brakeState = BRAKESTATE_ERROR_FINAL;
		}
		if (prevEncoderCount != encoderCount)
    6f22:	4bc9      	ldr	r3, [pc, #804]	; (7248 <BrakeBoardStateMachineTask+0x354>)
    6f24:	881a      	ldrh	r2, [r3, #0]
    6f26:	4bc9      	ldr	r3, [pc, #804]	; (724c <BrakeBoardStateMachineTask+0x358>)
    6f28:	881b      	ldrh	r3, [r3, #0]
    6f2a:	429a      	cmp	r2, r3
    6f2c:	d003      	beq.n	6f36 <BrakeBoardStateMachineTask+0x42>
		{
			actionEncoderSample = 0; 
    6f2e:	4bc8      	ldr	r3, [pc, #800]	; (7250 <BrakeBoardStateMachineTask+0x35c>)
    6f30:	2200      	movs	r2, #0
    6f32:	701a      	strb	r2, [r3, #0]
    6f34:	e01b      	b.n	6f6e <BrakeBoardStateMachineTask+0x7a>
		}
		else
		{	
			actionEncoderSample++;	
    6f36:	4bc6      	ldr	r3, [pc, #792]	; (7250 <BrakeBoardStateMachineTask+0x35c>)
    6f38:	781b      	ldrb	r3, [r3, #0]
    6f3a:	3301      	adds	r3, #1
    6f3c:	b2da      	uxtb	r2, r3
    6f3e:	4bc4      	ldr	r3, [pc, #784]	; (7250 <BrakeBoardStateMachineTask+0x35c>)
    6f40:	701a      	strb	r2, [r3, #0]
			if (actionEncoderSample >120) //20)  //0)
    6f42:	4bc3      	ldr	r3, [pc, #780]	; (7250 <BrakeBoardStateMachineTask+0x35c>)
    6f44:	781b      	ldrb	r3, [r3, #0]
    6f46:	2b78      	cmp	r3, #120	; 0x78
    6f48:	d911      	bls.n	6f6e <BrakeBoardStateMachineTask+0x7a>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    6f4a:	4bbe      	ldr	r3, [pc, #760]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6f4c:	2207      	movs	r2, #7
    6f4e:	701a      	strb	r2, [r3, #0]
 				brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;
    6f50:	4bc0      	ldr	r3, [pc, #768]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6f52:	791b      	ldrb	r3, [r3, #4]
    6f54:	2204      	movs	r2, #4
    6f56:	4313      	orrs	r3, r2
    6f58:	b2da      	uxtb	r2, r3
    6f5a:	4bbe      	ldr	r3, [pc, #760]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6f5c:	711a      	strb	r2, [r3, #4]
 				brakeStatus.BrakeState |= BRAKESTATE_ERRORLOADSET;					
    6f5e:	4bbd      	ldr	r3, [pc, #756]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6f60:	791b      	ldrb	r3, [r3, #4]
    6f62:	2280      	movs	r2, #128	; 0x80
    6f64:	4252      	negs	r2, r2
    6f66:	4313      	orrs	r3, r2
    6f68:	b2da      	uxtb	r2, r3
    6f6a:	4bba      	ldr	r3, [pc, #744]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6f6c:	711a      	strb	r2, [r3, #4]
			}
		}
		prevEncoderCount = encoderCount;  
    6f6e:	4bb7      	ldr	r3, [pc, #732]	; (724c <BrakeBoardStateMachineTask+0x358>)
    6f70:	881a      	ldrh	r2, [r3, #0]
    6f72:	4bb5      	ldr	r3, [pc, #724]	; (7248 <BrakeBoardStateMachineTask+0x354>)
    6f74:	801a      	strh	r2, [r3, #0]
	}
//---- eoc 01_38_#3 
	
//	table0.Item.MaxForce = 5;  //hard coded for testing
	done = 0;
    6f76:	1c3b      	adds	r3, r7, #0
    6f78:	330e      	adds	r3, #14
    6f7a:	2200      	movs	r2, #0
    6f7c:	701a      	strb	r2, [r3, #0]
	button = ButtonChanged();
    6f7e:	1c3c      	adds	r4, r7, #0
    6f80:	3409      	adds	r4, #9
    6f82:	4bb5      	ldr	r3, [pc, #724]	; (7258 <BrakeBoardStateMachineTask+0x364>)
    6f84:	4798      	blx	r3
    6f86:	1c03      	adds	r3, r0, #0
    6f88:	7023      	strb	r3, [r4, #0]
//	BrakeSupervisorytask();
	if (breakawayRing_pressed == 1)
    6f8a:	4bb4      	ldr	r3, [pc, #720]	; (725c <BrakeBoardStateMachineTask+0x368>)
    6f8c:	881b      	ldrh	r3, [r3, #0]
    6f8e:	b21b      	sxth	r3, r3
    6f90:	2b01      	cmp	r3, #1
    6f92:	d107      	bne.n	6fa4 <BrakeBoardStateMachineTask+0xb0>
	{
		brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYREADY;
    6f94:	4baf      	ldr	r3, [pc, #700]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6f96:	791b      	ldrb	r3, [r3, #4]
    6f98:	2240      	movs	r2, #64	; 0x40
    6f9a:	4313      	orrs	r3, r2
    6f9c:	b2da      	uxtb	r2, r3
    6f9e:	4bad      	ldr	r3, [pc, #692]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6fa0:	711a      	strb	r2, [r3, #4]
    6fa2:	e006      	b.n	6fb2 <BrakeBoardStateMachineTask+0xbe>
	}
	else
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYREADY;
    6fa4:	4bab      	ldr	r3, [pc, #684]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6fa6:	791b      	ldrb	r3, [r3, #4]
    6fa8:	2240      	movs	r2, #64	; 0x40
    6faa:	4393      	bics	r3, r2
    6fac:	b2da      	uxtb	r2, r3
    6fae:	4ba9      	ldr	r3, [pc, #676]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6fb0:	711a      	strb	r2, [r3, #4]
	}	

	
	switch(brakeState)
    6fb2:	4ba4      	ldr	r3, [pc, #656]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	2b24      	cmp	r3, #36	; 0x24
    6fb8:	d901      	bls.n	6fbe <BrakeBoardStateMachineTask+0xca>
    6fba:	f001 fe3b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    6fbe:	009a      	lsls	r2, r3, #2
    6fc0:	4ba7      	ldr	r3, [pc, #668]	; (7260 <BrakeBoardStateMachineTask+0x36c>)
    6fc2:	18d3      	adds	r3, r2, r3
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	469f      	mov	pc, r3
// powered up and power is added. This is REALLY A FIRST TIME board has any 
// power on it and the supercaps are just going to get charged. 
//-------------------------------		
		case BRAKESTATE_POWERINGUP:
		{
			MotorOff(1);
    6fc8:	2001      	movs	r0, #1
    6fca:	4ba6      	ldr	r3, [pc, #664]	; (7264 <BrakeBoardStateMachineTask+0x370>)
    6fcc:	4798      	blx	r3
			brakeState = BRAKESTATE_POWEREDUP;
    6fce:	4b9d      	ldr	r3, [pc, #628]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6fd0:	2206      	movs	r2, #6
    6fd2:	701a      	strb	r2, [r3, #0]
			encoderCountBack =0;
    6fd4:	4ba4      	ldr	r3, [pc, #656]	; (7268 <BrakeBoardStateMachineTask+0x374>)
    6fd6:	2200      	movs	r2, #0
    6fd8:	801a      	strh	r2, [r3, #0]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6fda:	4b9e      	ldr	r3, [pc, #632]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    6fdc:	791b      	ldrb	r3, [r3, #4]
    6fde:	1c1a      	adds	r2, r3, #0
    6fe0:	2308      	movs	r3, #8
    6fe2:	4013      	ands	r3, r2
    6fe4:	d003      	beq.n	6fee <BrakeBoardStateMachineTask+0xfa>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    6fe6:	4b97      	ldr	r3, [pc, #604]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6fe8:	2207      	movs	r2, #7
    6fea:	701a      	strb	r2, [r3, #0]
    6fec:	e018      	b.n	7020 <BrakeBoardStateMachineTask+0x12c>
			}	
			else
			{		
				if (hlimitState != 0)
    6fee:	4b9f      	ldr	r3, [pc, #636]	; (726c <BrakeBoardStateMachineTask+0x378>)
    6ff0:	781b      	ldrb	r3, [r3, #0]
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d014      	beq.n	7020 <BrakeBoardStateMachineTask+0x12c>
				{
					brakeState = BRAKESTATE_POWEREDUP0;
    6ff6:	4b93      	ldr	r3, [pc, #588]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    6ff8:	221b      	movs	r2, #27
    6ffa:	701a      	strb	r2, [r3, #0]
					MotorCW();
    6ffc:	4b9c      	ldr	r3, [pc, #624]	; (7270 <BrakeBoardStateMachineTask+0x37c>)
    6ffe:	4798      	blx	r3
					brakeSupTime = 20;  //3 seconds to EXTEND
    7000:	4b9c      	ldr	r3, [pc, #624]	; (7274 <BrakeBoardStateMachineTask+0x380>)
    7002:	2214      	movs	r2, #20
    7004:	801a      	strh	r2, [r3, #0]
					//----- boc 1_23 ---- control by encode counts 
					encoderCountBack = ENCODER_EXTEND_STARTCOUNT; 
    7006:	4b98      	ldr	r3, [pc, #608]	; (7268 <BrakeBoardStateMachineTask+0x374>)
    7008:	22af      	movs	r2, #175	; 0xaf
    700a:	801a      	strh	r2, [r3, #0]
					action = EXTENDING_BY_ENCODER; 
    700c:	4b8c      	ldr	r3, [pc, #560]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    700e:	2204      	movs	r2, #4
    7010:	701a      	strb	r2, [r3, #0]
					//----- eoc 1_23 
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7012:	4b99      	ldr	r3, [pc, #612]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    7014:	781b      	ldrb	r3, [r3, #0]
    7016:	2202      	movs	r2, #2
    7018:	4393      	bics	r3, r2
    701a:	b2da      	uxtb	r2, r3
    701c:	4b96      	ldr	r3, [pc, #600]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    701e:	701a      	strb	r2, [r3, #0]
				}
			}
			brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
    7020:	4b8c      	ldr	r3, [pc, #560]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    7022:	791a      	ldrb	r2, [r3, #4]
    7024:	2328      	movs	r3, #40	; 0x28
    7026:	4013      	ands	r3, r2
    7028:	b2da      	uxtb	r2, r3
    702a:	4b8a      	ldr	r3, [pc, #552]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    702c:	711a      	strb	r2, [r3, #4]
			break;
    702e:	f001 fe01 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
//v00_20 added the POWEREDUP0 state to handle a short extension first		
		case BRAKESTATE_POWEREDUP0:
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7032:	4b88      	ldr	r3, [pc, #544]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    7034:	791b      	ldrb	r3, [r3, #4]
    7036:	1c1a      	adds	r2, r3, #0
    7038:	2308      	movs	r3, #8
    703a:	4013      	ands	r3, r2
    703c:	d004      	beq.n	7048 <BrakeBoardStateMachineTask+0x154>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    703e:	4b81      	ldr	r3, [pc, #516]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    7040:	2207      	movs	r2, #7
    7042:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 150;  //15 seconds to retract
					brakeChange &= ~BRAKECHANGE_SUPTIME;
				}
				brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
			}
			break;
    7044:	f001 fdf6 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
			}
			else
			{		
				if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack ==0))
    7048:	4b8b      	ldr	r3, [pc, #556]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    704a:	781b      	ldrb	r3, [r3, #0]
    704c:	1c1a      	adds	r2, r3, #0
    704e:	2302      	movs	r3, #2
    7050:	4013      	ands	r3, r2
    7052:	d103      	bne.n	705c <BrakeBoardStateMachineTask+0x168>
    7054:	4b84      	ldr	r3, [pc, #528]	; (7268 <BrakeBoardStateMachineTask+0x374>)
    7056:	881b      	ldrh	r3, [r3, #0]
    7058:	2b00      	cmp	r3, #0
    705a:	d111      	bne.n	7080 <BrakeBoardStateMachineTask+0x18c>
				{
					MotorOff(1);
    705c:	2001      	movs	r0, #1
    705e:	4b81      	ldr	r3, [pc, #516]	; (7264 <BrakeBoardStateMachineTask+0x370>)
    7060:	4798      	blx	r3
					brakeState = BRAKESTATE_POWEREDUP;
    7062:	4b78      	ldr	r3, [pc, #480]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    7064:	2206      	movs	r2, #6
    7066:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    7068:	4b84      	ldr	r3, [pc, #528]	; (727c <BrakeBoardStateMachineTask+0x388>)
    706a:	4798      	blx	r3
					brakeSupTime = 150;  //15 seconds to retract
    706c:	4b81      	ldr	r3, [pc, #516]	; (7274 <BrakeBoardStateMachineTask+0x380>)
    706e:	2296      	movs	r2, #150	; 0x96
    7070:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7072:	4b81      	ldr	r3, [pc, #516]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	2202      	movs	r2, #2
    7078:	4393      	bics	r3, r2
    707a:	b2da      	uxtb	r2, r3
    707c:	4b7e      	ldr	r3, [pc, #504]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    707e:	701a      	strb	r2, [r3, #0]
				}
				brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
    7080:	4b74      	ldr	r3, [pc, #464]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    7082:	791a      	ldrb	r2, [r3, #4]
    7084:	2328      	movs	r3, #40	; 0x28
    7086:	4013      	ands	r3, r2
    7088:	b2da      	uxtb	r2, r3
    708a:	4b72      	ldr	r3, [pc, #456]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    708c:	711a      	strb	r2, [r3, #4]
			}
			break;
    708e:	f001 fdd1 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7092:	4b79      	ldr	r3, [pc, #484]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	1c1a      	adds	r2, r3, #0
    7098:	2302      	movs	r3, #2
    709a:	4013      	ands	r3, r2
    709c:	d107      	bne.n	70ae <BrakeBoardStateMachineTask+0x1ba>
			((hlimitState ==0)||(homeLimit == HOME_IN))) //V01_26
    709e:	4b73      	ldr	r3, [pc, #460]	; (726c <BrakeBoardStateMachineTask+0x378>)
    70a0:	781b      	ldrb	r3, [r3, #0]
			}
			break;
		}		
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    70a2:	2b00      	cmp	r3, #0
    70a4:	d003      	beq.n	70ae <BrakeBoardStateMachineTask+0x1ba>
			((hlimitState ==0)||(homeLimit == HOME_IN))) //V01_26
    70a6:	4b76      	ldr	r3, [pc, #472]	; (7280 <BrakeBoardStateMachineTask+0x38c>)
    70a8:	781b      	ldrb	r3, [r3, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d116      	bne.n	70dc <BrakeBoardStateMachineTask+0x1e8>
			{
				MotorOff(1);
    70ae:	2001      	movs	r0, #1
    70b0:	4b6c      	ldr	r3, [pc, #432]	; (7264 <BrakeBoardStateMachineTask+0x370>)
    70b2:	4798      	blx	r3
				brakeSupTime = 0;
    70b4:	4b6f      	ldr	r3, [pc, #444]	; (7274 <BrakeBoardStateMachineTask+0x380>)
    70b6:	2200      	movs	r2, #0
    70b8:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    70ba:	4b6f      	ldr	r3, [pc, #444]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	2202      	movs	r2, #2
    70c0:	4393      	bics	r3, r2
    70c2:	b2da      	uxtb	r2, r3
    70c4:	4b6c      	ldr	r3, [pc, #432]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    70c6:	701a      	strb	r2, [r3, #0]
				BrakeActuatorControl(BRAKE_HOME);
    70c8:	2000      	movs	r0, #0
    70ca:	4b6e      	ldr	r3, [pc, #440]	; (7284 <BrakeBoardStateMachineTask+0x390>)
    70cc:	4798      	blx	r3
				brakeState = BRAKESTATE_IDLESLEEP;
    70ce:	4b5d      	ldr	r3, [pc, #372]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    70d0:	2201      	movs	r2, #1
    70d2:	701a      	strb	r2, [r3, #0]
				BrakeEnterIdleSleepMode();
    70d4:	4b6c      	ldr	r3, [pc, #432]	; (7288 <BrakeBoardStateMachineTask+0x394>)
    70d6:	4798      	blx	r3
			}
			break;
    70d8:	f001 fdac 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    70dc:	f001 fdaa 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
//------------------------------------
// POWER ON KEY HAS BEEN PRESSED. 
//------------------------------------		
		case BRAKESTATE_RESET:
		{
			motorAccBaseline = 0; 
    70e0:	4b6a      	ldr	r3, [pc, #424]	; (728c <BrakeBoardStateMachineTask+0x398>)
    70e2:	2200      	movs	r2, #0
    70e4:	701a      	strb	r2, [r3, #0]
			thresholdmet = 0; 
    70e6:	4b6a      	ldr	r3, [pc, #424]	; (7290 <BrakeBoardStateMachineTask+0x39c>)
    70e8:	2200      	movs	r2, #0
    70ea:	701a      	strb	r2, [r3, #0]
			breakawayHoldTimer = 0; 
    70ec:	4b69      	ldr	r3, [pc, #420]	; (7294 <BrakeBoardStateMachineTask+0x3a0>)
    70ee:	2200      	movs	r2, #0
    70f0:	801a      	strh	r2, [r3, #0]
			brakeState = BRAKESTATE_PRESETUP;
    70f2:	4b54      	ldr	r3, [pc, #336]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    70f4:	2203      	movs	r2, #3
    70f6:	701a      	strb	r2, [r3, #0]
#if TESTWITHOUTSETUP
#else		
			brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    70f8:	4b56      	ldr	r3, [pc, #344]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    70fa:	791b      	ldrb	r3, [r3, #4]
    70fc:	2204      	movs	r2, #4
    70fe:	4313      	orrs	r3, r2
    7100:	b2da      	uxtb	r2, r3
    7102:	4b54      	ldr	r3, [pc, #336]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    7104:	711a      	strb	r2, [r3, #4]
#endif			
//			system_interrupt_disable_global();
			wdt_reset_count();
    7106:	4b64      	ldr	r3, [pc, #400]	; (7298 <BrakeBoardStateMachineTask+0x3a4>)
    7108:	4798      	blx	r3
			//-----ADC--------------
			ADCInit();
    710a:	4b64      	ldr	r3, [pc, #400]	; (729c <BrakeBoardStateMachineTask+0x3a8>)
    710c:	4798      	blx	r3
			wdt_reset_count();
    710e:	4b62      	ldr	r3, [pc, #392]	; (7298 <BrakeBoardStateMachineTask+0x3a4>)
    7110:	4798      	blx	r3
			//---------------LORA/FSK radio
			//---------------------
			// SET FCC stuff up
			setTXContinuous = 0;
    7112:	4b63      	ldr	r3, [pc, #396]	; (72a0 <BrakeBoardStateMachineTask+0x3ac>)
    7114:	2200      	movs	r2, #0
    7116:	701a      	strb	r2, [r3, #0]
			setCW = 0;
    7118:	4b62      	ldr	r3, [pc, #392]	; (72a4 <BrakeBoardStateMachineTask+0x3b0>)
    711a:	2200      	movs	r2, #0
    711c:	701a      	strb	r2, [r3, #0]
			setRXContinuous = 0;
    711e:	4b62      	ldr	r3, [pc, #392]	; (72a8 <BrakeBoardStateMachineTask+0x3b4>)
    7120:	2200      	movs	r2, #0
    7122:	701a      	strb	r2, [r3, #0]
			for (i=0;i<10;i++)
    7124:	1c3b      	adds	r3, r7, #0
    7126:	330f      	adds	r3, #15
    7128:	2200      	movs	r2, #0
    712a:	701a      	strb	r2, [r3, #0]
    712c:	e006      	b.n	713c <BrakeBoardStateMachineTask+0x248>
    712e:	1c3b      	adds	r3, r7, #0
    7130:	330f      	adds	r3, #15
    7132:	781a      	ldrb	r2, [r3, #0]
    7134:	1c3b      	adds	r3, r7, #0
    7136:	330f      	adds	r3, #15
    7138:	3201      	adds	r2, #1
    713a:	701a      	strb	r2, [r3, #0]
    713c:	1c3b      	adds	r3, r7, #0
    713e:	330f      	adds	r3, #15
    7140:	781b      	ldrb	r3, [r3, #0]
    7142:	2b09      	cmp	r3, #9
    7144:	d9f3      	bls.n	712e <BrakeBoardStateMachineTask+0x23a>
			{
//				FCCSample();
			}
			if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    7146:	4b59      	ldr	r3, [pc, #356]	; (72ac <BrakeBoardStateMachineTask+0x3b8>)
    7148:	881b      	ldrh	r3, [r3, #0]
    714a:	2b00      	cmp	r3, #0
    714c:	d00a      	beq.n	7164 <BrakeBoardStateMachineTask+0x270>
    714e:	4b58      	ldr	r3, [pc, #352]	; (72b0 <BrakeBoardStateMachineTask+0x3bc>)
    7150:	881b      	ldrh	r3, [r3, #0]
    7152:	2b00      	cmp	r3, #0
    7154:	d106      	bne.n	7164 <BrakeBoardStateMachineTask+0x270>
    7156:	4b57      	ldr	r3, [pc, #348]	; (72b4 <BrakeBoardStateMachineTask+0x3c0>)
    7158:	881b      	ldrh	r3, [r3, #0]
    715a:	2b00      	cmp	r3, #0
    715c:	d102      	bne.n	7164 <BrakeBoardStateMachineTask+0x270>
			{
				setTXContinuous = 1;
    715e:	4b50      	ldr	r3, [pc, #320]	; (72a0 <BrakeBoardStateMachineTask+0x3ac>)
    7160:	2201      	movs	r2, #1
    7162:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    7164:	4b51      	ldr	r3, [pc, #324]	; (72ac <BrakeBoardStateMachineTask+0x3b8>)
    7166:	881b      	ldrh	r3, [r3, #0]
    7168:	2b00      	cmp	r3, #0
    716a:	d10a      	bne.n	7182 <BrakeBoardStateMachineTask+0x28e>
    716c:	4b50      	ldr	r3, [pc, #320]	; (72b0 <BrakeBoardStateMachineTask+0x3bc>)
    716e:	881b      	ldrh	r3, [r3, #0]
    7170:	2b00      	cmp	r3, #0
    7172:	d006      	beq.n	7182 <BrakeBoardStateMachineTask+0x28e>
    7174:	4b4f      	ldr	r3, [pc, #316]	; (72b4 <BrakeBoardStateMachineTask+0x3c0>)
    7176:	881b      	ldrh	r3, [r3, #0]
    7178:	2b00      	cmp	r3, #0
    717a:	d102      	bne.n	7182 <BrakeBoardStateMachineTask+0x28e>
			{
				setRXContinuous = 1;
    717c:	4b4a      	ldr	r3, [pc, #296]	; (72a8 <BrakeBoardStateMachineTask+0x3b4>)
    717e:	2201      	movs	r2, #1
    7180:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    7182:	4b4a      	ldr	r3, [pc, #296]	; (72ac <BrakeBoardStateMachineTask+0x3b8>)
    7184:	881b      	ldrh	r3, [r3, #0]
    7186:	2b00      	cmp	r3, #0
    7188:	d10a      	bne.n	71a0 <BrakeBoardStateMachineTask+0x2ac>
    718a:	4b49      	ldr	r3, [pc, #292]	; (72b0 <BrakeBoardStateMachineTask+0x3bc>)
    718c:	881b      	ldrh	r3, [r3, #0]
    718e:	2b00      	cmp	r3, #0
    7190:	d106      	bne.n	71a0 <BrakeBoardStateMachineTask+0x2ac>
    7192:	4b48      	ldr	r3, [pc, #288]	; (72b4 <BrakeBoardStateMachineTask+0x3c0>)
    7194:	881b      	ldrh	r3, [r3, #0]
    7196:	2b00      	cmp	r3, #0
    7198:	d002      	beq.n	71a0 <BrakeBoardStateMachineTask+0x2ac>
			{
				setCW = 1;
    719a:	4b42      	ldr	r3, [pc, #264]	; (72a4 <BrakeBoardStateMachineTask+0x3b0>)
    719c:	2201      	movs	r2, #1
    719e:	701a      	strb	r2, [r3, #0]
			}			
			whichRadio = WHICHRADIO_LORA; 
    71a0:	4b45      	ldr	r3, [pc, #276]	; (72b8 <BrakeBoardStateMachineTask+0x3c4>)
    71a2:	2299      	movs	r2, #153	; 0x99
    71a4:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE; 
    71a6:	4b45      	ldr	r3, [pc, #276]	; (72bc <BrakeBoardStateMachineTask+0x3c8>)
    71a8:	2200      	movs	r2, #0
    71aa:	701a      	strb	r2, [r3, #0]
			CommInit();
    71ac:	4b44      	ldr	r3, [pc, #272]	; (72c0 <BrakeBoardStateMachineTask+0x3cc>)
    71ae:	4798      	blx	r3
			wdt_reset_count();
    71b0:	4b39      	ldr	r3, [pc, #228]	; (7298 <BrakeBoardStateMachineTask+0x3a4>)
    71b2:	4798      	blx	r3

			system_interrupt_enable_global();
    71b4:	4b43      	ldr	r3, [pc, #268]	; (72c4 <BrakeBoardStateMachineTask+0x3d0>)
    71b6:	4798      	blx	r3
			ADCStart();
    71b8:	4b43      	ldr	r3, [pc, #268]	; (72c8 <BrakeBoardStateMachineTask+0x3d4>)
    71ba:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    71bc:	1c3b      	adds	r3, r7, #0
    71be:	330f      	adds	r3, #15
    71c0:	2200      	movs	r2, #0
    71c2:	701a      	strb	r2, [r3, #0]
    71c4:	e008      	b.n	71d8 <BrakeBoardStateMachineTask+0x2e4>
			{
				ButtonSample();
    71c6:	4b41      	ldr	r3, [pc, #260]	; (72cc <BrakeBoardStateMachineTask+0x3d8>)
    71c8:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    71ca:	1c3b      	adds	r3, r7, #0
    71cc:	330f      	adds	r3, #15
    71ce:	781a      	ldrb	r2, [r3, #0]
    71d0:	1c3b      	adds	r3, r7, #0
    71d2:	330f      	adds	r3, #15
    71d4:	3201      	adds	r2, #1
    71d6:	701a      	strb	r2, [r3, #0]
    71d8:	1c3b      	adds	r3, r7, #0
    71da:	330f      	adds	r3, #15
    71dc:	781b      	ldrb	r3, [r3, #0]
    71de:	2b07      	cmp	r3, #7
    71e0:	d9f1      	bls.n	71c6 <BrakeBoardStateMachineTask+0x2d2>
			{
				ButtonSample();
			}
			
//--- V01_20 added short extend for new setup		
			MotorOff(1);
    71e2:	2001      	movs	r0, #1
    71e4:	4b1f      	ldr	r3, [pc, #124]	; (7264 <BrakeBoardStateMachineTask+0x370>)
    71e6:	4798      	blx	r3
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    71e8:	4b1a      	ldr	r3, [pc, #104]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    71ea:	791b      	ldrb	r3, [r3, #4]
    71ec:	1c1a      	adds	r2, r3, #0
    71ee:	2308      	movs	r3, #8
    71f0:	4013      	ands	r3, r2
    71f2:	d004      	beq.n	71fe <BrakeBoardStateMachineTask+0x30a>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    71f4:	4b13      	ldr	r3, [pc, #76]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    71f6:	2207      	movs	r2, #7
    71f8:	701a      	strb	r2, [r3, #0]
				encoderCountBack = ENCODER_EXTEND_STARTCOUNT;
				action = EXTENDING_BY_ENCODER;
				//----- eoc 1_23				
				brakeChange &= ~BRAKECHANGE_SUPTIME;
			}
			break;
    71fa:	f001 fd1b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
			}	
			else
			{
				brakeState = BRAKESTATE_PRESETUP0;
    71fe:	4b11      	ldr	r3, [pc, #68]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    7200:	221c      	movs	r2, #28
    7202:	701a      	strb	r2, [r3, #0]
				MotorCW();
    7204:	4b1a      	ldr	r3, [pc, #104]	; (7270 <BrakeBoardStateMachineTask+0x37c>)
    7206:	4798      	blx	r3
				brakeSupTime = 20;  //3 seconds to EXTEND
    7208:	4b1a      	ldr	r3, [pc, #104]	; (7274 <BrakeBoardStateMachineTask+0x380>)
    720a:	2214      	movs	r2, #20
    720c:	801a      	strh	r2, [r3, #0]
				//----- boc 1_23 ---- control by encode counts
				encoderCountBack = ENCODER_EXTEND_STARTCOUNT;
    720e:	4b16      	ldr	r3, [pc, #88]	; (7268 <BrakeBoardStateMachineTask+0x374>)
    7210:	22af      	movs	r2, #175	; 0xaf
    7212:	801a      	strh	r2, [r3, #0]
				action = EXTENDING_BY_ENCODER;
    7214:	4b0a      	ldr	r3, [pc, #40]	; (7240 <BrakeBoardStateMachineTask+0x34c>)
    7216:	2204      	movs	r2, #4
    7218:	701a      	strb	r2, [r3, #0]
				//----- eoc 1_23				
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    721a:	4b17      	ldr	r3, [pc, #92]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	2202      	movs	r2, #2
    7220:	4393      	bics	r3, r2
    7222:	b2da      	uxtb	r2, r3
    7224:	4b14      	ldr	r3, [pc, #80]	; (7278 <BrakeBoardStateMachineTask+0x384>)
    7226:	701a      	strb	r2, [r3, #0]
			}
			break;
    7228:	f001 fd04 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
//----- V01_20 below state added 		
		case BRAKESTATE_PRESETUP0:
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    722c:	4b09      	ldr	r3, [pc, #36]	; (7254 <BrakeBoardStateMachineTask+0x360>)
    722e:	791b      	ldrb	r3, [r3, #4]
    7230:	1c1a      	adds	r2, r3, #0
    7232:	2308      	movs	r3, #8
    7234:	4013      	ands	r3, r2
    7236:	d04b      	beq.n	72d0 <BrakeBoardStateMachineTask+0x3dc>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    7238:	4b02      	ldr	r3, [pc, #8]	; (7244 <BrakeBoardStateMachineTask+0x350>)
    723a:	2207      	movs	r2, #7
    723c:	701a      	strb	r2, [r3, #0]
    723e:	e065      	b.n	730c <BrakeBoardStateMachineTask+0x418>
    7240:	200004ae 	.word	0x200004ae
    7244:	20002ebf 	.word	0x20002ebf
    7248:	20002ec6 	.word	0x20002ec6
    724c:	200004a8 	.word	0x200004a8
    7250:	20002ebe 	.word	0x20002ebe
    7254:	20003694 	.word	0x20003694
    7258:	0000bc75 	.word	0x0000bc75
    725c:	2000306a 	.word	0x2000306a
    7260:	000183dc 	.word	0x000183dc
    7264:	00009b75 	.word	0x00009b75
    7268:	20002ee2 	.word	0x20002ee2
    726c:	20003068 	.word	0x20003068
    7270:	00009d45 	.word	0x00009d45
    7274:	200036c4 	.word	0x200036c4
    7278:	20002eee 	.word	0x20002eee
    727c:	00009c89 	.word	0x00009c89
    7280:	20000001 	.word	0x20000001
    7284:	000069a1 	.word	0x000069a1
    7288:	00006971 	.word	0x00006971
    728c:	20002ece 	.word	0x20002ece
    7290:	200004b2 	.word	0x200004b2
    7294:	20002ef2 	.word	0x20002ef2
    7298:	00005b51 	.word	0x00005b51
    729c:	0000b935 	.word	0x0000b935
    72a0:	20003693 	.word	0x20003693
    72a4:	20003690 	.word	0x20003690
    72a8:	20003691 	.word	0x20003691
    72ac:	200004c4 	.word	0x200004c4
    72b0:	200004c6 	.word	0x200004c6
    72b4:	200004c8 	.word	0x200004c8
    72b8:	200036d2 	.word	0x200036d2
    72bc:	200004ba 	.word	0x200004ba
    72c0:	0000f4fd 	.word	0x0000f4fd
    72c4:	000066fd 	.word	0x000066fd
    72c8:	0000b9c9 	.word	0x0000b9c9
    72cc:	0000bc99 	.word	0x0000bc99
			}
			else
			{
				if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack==0))
    72d0:	4bcf      	ldr	r3, [pc, #828]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    72d2:	781b      	ldrb	r3, [r3, #0]
    72d4:	1c1a      	adds	r2, r3, #0
    72d6:	2302      	movs	r3, #2
    72d8:	4013      	ands	r3, r2
    72da:	d103      	bne.n	72e4 <BrakeBoardStateMachineTask+0x3f0>
    72dc:	4bcd      	ldr	r3, [pc, #820]	; (7614 <BrakeBoardStateMachineTask+0x720>)
    72de:	881b      	ldrh	r3, [r3, #0]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d113      	bne.n	730c <BrakeBoardStateMachineTask+0x418>
				{
					MotorOff(1);				
    72e4:	2001      	movs	r0, #1
    72e6:	4bcc      	ldr	r3, [pc, #816]	; (7618 <BrakeBoardStateMachineTask+0x724>)
    72e8:	4798      	blx	r3
					brakeState = BRAKESTATE_PRESETUP;
    72ea:	4bcc      	ldr	r3, [pc, #816]	; (761c <BrakeBoardStateMachineTask+0x728>)
    72ec:	2203      	movs	r2, #3
    72ee:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    72f0:	4bcb      	ldr	r3, [pc, #812]	; (7620 <BrakeBoardStateMachineTask+0x72c>)
    72f2:	4798      	blx	r3
					brakeSupTime = 150;  //5 seconds to retract
    72f4:	4bcb      	ldr	r3, [pc, #812]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    72f6:	2296      	movs	r2, #150	; 0x96
    72f8:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    72fa:	4bc5      	ldr	r3, [pc, #788]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	2202      	movs	r2, #2
    7300:	4393      	bics	r3, r2
    7302:	b2da      	uxtb	r2, r3
    7304:	4bc2      	ldr	r3, [pc, #776]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7306:	701a      	strb	r2, [r3, #0]
				}
			}
			break;			
    7308:	f001 fc94 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    730c:	f001 fc92 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_PRESETUP:
		{

			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7310:	4bbf      	ldr	r3, [pc, #764]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	1c1a      	adds	r2, r3, #0
    7316:	2302      	movs	r3, #2
    7318:	4013      	ands	r3, r2
    731a:	d107      	bne.n	732c <BrakeBoardStateMachineTask+0x438>
			((hlimitState ==0)||(homeLimit == HOME_IN)))  //V01_26
    731c:	4bc2      	ldr	r3, [pc, #776]	; (7628 <BrakeBoardStateMachineTask+0x734>)
    731e:	781b      	ldrb	r3, [r3, #0]
			break;			
		}
		case BRAKESTATE_PRESETUP:
		{

			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7320:	2b00      	cmp	r3, #0
    7322:	d003      	beq.n	732c <BrakeBoardStateMachineTask+0x438>
			((hlimitState ==0)||(homeLimit == HOME_IN)))  //V01_26
    7324:	4bc1      	ldr	r3, [pc, #772]	; (762c <BrakeBoardStateMachineTask+0x738>)
    7326:	781b      	ldrb	r3, [r3, #0]
    7328:	2b00      	cmp	r3, #0
    732a:	d13b      	bne.n	73a4 <BrakeBoardStateMachineTask+0x4b0>
			{
				MotorOff(1);
    732c:	2001      	movs	r0, #1
    732e:	4bba      	ldr	r3, [pc, #744]	; (7618 <BrakeBoardStateMachineTask+0x724>)
    7330:	4798      	blx	r3
				brakeSupTime = 0;
    7332:	4bbc      	ldr	r3, [pc, #752]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    7334:	2200      	movs	r2, #0
    7336:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7338:	4bb5      	ldr	r3, [pc, #724]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	2202      	movs	r2, #2
    733e:	4393      	bics	r3, r2
    7340:	b2da      	uxtb	r2, r3
    7342:	4bb3      	ldr	r3, [pc, #716]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7344:	701a      	strb	r2, [r3, #0]
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7346:	4bba      	ldr	r3, [pc, #744]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    7348:	791b      	ldrb	r3, [r3, #4]
    734a:	1c1a      	adds	r2, r3, #0
    734c:	2308      	movs	r3, #8
    734e:	4013      	ands	r3, r2
    7350:	d003      	beq.n	735a <BrakeBoardStateMachineTask+0x466>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    7352:	4bb2      	ldr	r3, [pc, #712]	; (761c <BrakeBoardStateMachineTask+0x728>)
    7354:	2207      	movs	r2, #7
    7356:	701a      	strb	r2, [r3, #0]
    7358:	e024      	b.n	73a4 <BrakeBoardStateMachineTask+0x4b0>
				}
				else
				{				
					if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    735a:	2000      	movs	r0, #0
    735c:	4bb5      	ldr	r3, [pc, #724]	; (7634 <BrakeBoardStateMachineTask+0x740>)
    735e:	4798      	blx	r3
    7360:	1c03      	adds	r3, r0, #0
    7362:	2b00      	cmp	r3, #0
    7364:	d103      	bne.n	736e <BrakeBoardStateMachineTask+0x47a>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    7366:	4bad      	ldr	r3, [pc, #692]	; (761c <BrakeBoardStateMachineTask+0x728>)
    7368:	2207      	movs	r2, #7
    736a:	701a      	strb	r2, [r3, #0]
    736c:	e01a      	b.n	73a4 <BrakeBoardStateMachineTask+0x4b0>
					}
					else
					{
						if ((brakeStatus.BrakeState & BRAKESTATE_NOTSETUP)== 0)
    736e:	4bb0      	ldr	r3, [pc, #704]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    7370:	791b      	ldrb	r3, [r3, #4]
    7372:	1c1a      	adds	r2, r3, #0
    7374:	2304      	movs	r3, #4
    7376:	4013      	ands	r3, r2
    7378:	d10f      	bne.n	739a <BrakeBoardStateMachineTask+0x4a6>
						{
							MotorNeedNewBaseline();
    737a:	4baf      	ldr	r3, [pc, #700]	; (7638 <BrakeBoardStateMachineTask+0x744>)
    737c:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;	
    737e:	4ba9      	ldr	r3, [pc, #676]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    7380:	2264      	movs	r2, #100	; 0x64
    7382:	801a      	strh	r2, [r3, #0]
							brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7384:	4ba5      	ldr	r3, [pc, #660]	; (761c <BrakeBoardStateMachineTask+0x728>)
    7386:	220b      	movs	r2, #11
    7388:	701a      	strb	r2, [r3, #0]
							brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    738a:	4ba9      	ldr	r3, [pc, #676]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    738c:	791b      	ldrb	r3, [r3, #4]
    738e:	2204      	movs	r2, #4
    7390:	4393      	bics	r3, r2
    7392:	b2da      	uxtb	r2, r3
    7394:	4ba6      	ldr	r3, [pc, #664]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    7396:	711a      	strb	r2, [r3, #4]
    7398:	e004      	b.n	73a4 <BrakeBoardStateMachineTask+0x4b0>
						}
						else
						{
							brakeState = BRAKESTATE_WAITONSETUP;
    739a:	4ba0      	ldr	r3, [pc, #640]	; (761c <BrakeBoardStateMachineTask+0x728>)
    739c:	2204      	movs	r2, #4
    739e:	701a      	strb	r2, [r3, #0]
						}	 		
					}
				}
			}
			break;
    73a0:	f001 fc48 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    73a4:	f001 fc46 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		case BRAKESTATE_WAITONSETUP:
		case BRAKESTATE_WAITONSETUPLOADCELL:		
		{
			//----- boc V01_23 check for force on pedal before setup
//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
			itemp3 = LoadCell(BRAKESTATE_WAITONSETUP);
    73a8:	1dbc      	adds	r4, r7, #6
    73aa:	2004      	movs	r0, #4
    73ac:	4ba3      	ldr	r3, [pc, #652]	; (763c <BrakeBoardStateMachineTask+0x748>)
    73ae:	4798      	blx	r3
    73b0:	1c03      	adds	r3, r0, #0
    73b2:	8023      	strh	r3, [r4, #0]
			if (itemp3>0x60)								
    73b4:	1dbb      	adds	r3, r7, #6
    73b6:	881b      	ldrh	r3, [r3, #0]
    73b8:	2b60      	cmp	r3, #96	; 0x60
    73ba:	d903      	bls.n	73c4 <BrakeBoardStateMachineTask+0x4d0>
			{
				brakeState = BRAKESTATE_WAITONSETUPLOADCELL;
    73bc:	4b97      	ldr	r3, [pc, #604]	; (761c <BrakeBoardStateMachineTask+0x728>)
    73be:	221d      	movs	r2, #29
    73c0:	701a      	strb	r2, [r3, #0]
    73c2:	e02d      	b.n	7420 <BrakeBoardStateMachineTask+0x52c>
			}	
			else
			//---- eoc V01_23 
			{
				//v01_56 add to check if input voltage is present. 
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    73c4:	4b9a      	ldr	r3, [pc, #616]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    73c6:	791b      	ldrb	r3, [r3, #4]
    73c8:	1c1a      	adds	r2, r3, #0
    73ca:	2308      	movs	r3, #8
    73cc:	4013      	ands	r3, r2
    73ce:	d127      	bne.n	7420 <BrakeBoardStateMachineTask+0x52c>
				{
					brakeState = BRAKESTATE_WAITONSETUP;
    73d0:	4b92      	ldr	r3, [pc, #584]	; (761c <BrakeBoardStateMachineTask+0x728>)
    73d2:	2204      	movs	r2, #4
    73d4:	701a      	strb	r2, [r3, #0]
					if (setup_pressed != 0)
    73d6:	4b9a      	ldr	r3, [pc, #616]	; (7640 <BrakeBoardStateMachineTask+0x74c>)
    73d8:	881b      	ldrh	r3, [r3, #0]
    73da:	2b00      	cmp	r3, #0
    73dc:	d020      	beq.n	7420 <BrakeBoardStateMachineTask+0x52c>
					{
						brakeState = BRAKESTATE_SETUPACTIVE;
    73de:	4b8f      	ldr	r3, [pc, #572]	; (761c <BrakeBoardStateMachineTask+0x728>)
    73e0:	2205      	movs	r2, #5
    73e2:	701a      	strb	r2, [r3, #0]
						brakeSetupExtend = 0;
    73e4:	4b97      	ldr	r3, [pc, #604]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    73e6:	2200      	movs	r2, #0
    73e8:	801a      	strh	r2, [r3, #0]
						maxCurrentRead = 0;
    73ea:	4b97      	ldr	r3, [pc, #604]	; (7648 <BrakeBoardStateMachineTask+0x754>)
    73ec:	2200      	movs	r2, #0
    73ee:	801a      	strh	r2, [r3, #0]
						maxFSRRead = 0; //V01_41 
    73f0:	4b96      	ldr	r3, [pc, #600]	; (764c <BrakeBoardStateMachineTask+0x758>)
    73f2:	2200      	movs	r2, #0
    73f4:	801a      	strh	r2, [r3, #0]
						setupExtendTriggered = 0;
    73f6:	4b96      	ldr	r3, [pc, #600]	; (7650 <BrakeBoardStateMachineTask+0x75c>)
    73f8:	2200      	movs	r2, #0
    73fa:	701a      	strb	r2, [r3, #0]
						if (flimitState != 0)
    73fc:	4b95      	ldr	r3, [pc, #596]	; (7654 <BrakeBoardStateMachineTask+0x760>)
    73fe:	781b      	ldrb	r3, [r3, #0]
    7400:	2b00      	cmp	r3, #0
    7402:	d00d      	beq.n	7420 <BrakeBoardStateMachineTask+0x52c>
						{
							MotorCW();
    7404:	4b94      	ldr	r3, [pc, #592]	; (7658 <BrakeBoardStateMachineTask+0x764>)
    7406:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;   
    7408:	4b86      	ldr	r3, [pc, #536]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    740a:	2264      	movs	r2, #100	; 0x64
    740c:	801a      	strh	r2, [r3, #0]
							brakeChange &= ~BRAKECHANGE_SUPTIME;
    740e:	4b80      	ldr	r3, [pc, #512]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	2202      	movs	r2, #2
    7414:	4393      	bics	r3, r2
    7416:	b2da      	uxtb	r2, r3
    7418:	4b7d      	ldr	r3, [pc, #500]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    741a:	701a      	strb	r2, [r3, #0]
						}
					}
				}		
			} 
			break;
    741c:	f001 fc0a 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7420:	f001 fc08 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
// ACTIVE SETUP STATES
// - SETUP key has been pressed and now doing the setup. The first EXTEND CW has 
// been started from the WAITONSETUP state. 		
		case BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND:
		{
						if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7424:	4b82      	ldr	r3, [pc, #520]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    7426:	791b      	ldrb	r3, [r3, #4]
    7428:	1c1a      	adds	r2, r3, #0
    742a:	2308      	movs	r3, #8
    742c:	4013      	ands	r3, r2
    742e:	d003      	beq.n	7438 <BrakeBoardStateMachineTask+0x544>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    7430:	4b7a      	ldr	r3, [pc, #488]	; (761c <BrakeBoardStateMachineTask+0x728>)
    7432:	2207      	movs	r2, #7
    7434:	701a      	strb	r2, [r3, #0]
    7436:	e01f      	b.n	7478 <BrakeBoardStateMachineTask+0x584>
			}	
			else
			{	
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0) 
    7438:	4b75      	ldr	r3, [pc, #468]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    743a:	781b      	ldrb	r3, [r3, #0]
    743c:	1c1a      	adds	r2, r3, #0
    743e:	2302      	movs	r3, #2
    7440:	4013      	ands	r3, r2
    7442:	d019      	beq.n	7478 <BrakeBoardStateMachineTask+0x584>
				{
				 
					brakeSupTime = 0;
    7444:	4b77      	ldr	r3, [pc, #476]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    7446:	2200      	movs	r2, #0
    7448:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;		
    744a:	4b71      	ldr	r3, [pc, #452]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	2202      	movs	r2, #2
    7450:	4393      	bics	r3, r2
    7452:	b2da      	uxtb	r2, r3
    7454:	4b6e      	ldr	r3, [pc, #440]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7456:	701a      	strb	r2, [r3, #0]
					brakeSetupExtend++;
    7458:	4b7a      	ldr	r3, [pc, #488]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    745a:	881b      	ldrh	r3, [r3, #0]
    745c:	3301      	adds	r3, #1
    745e:	b29a      	uxth	r2, r3
    7460:	4b78      	ldr	r3, [pc, #480]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    7462:	801a      	strh	r2, [r3, #0]
					MotorCCW();
    7464:	4b6e      	ldr	r3, [pc, #440]	; (7620 <BrakeBoardStateMachineTask+0x72c>)
    7466:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;  	
    7468:	4b6e      	ldr	r3, [pc, #440]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    746a:	2264      	movs	r2, #100	; 0x64
    746c:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_SETUPACTIVE;
    746e:	4b6b      	ldr	r3, [pc, #428]	; (761c <BrakeBoardStateMachineTask+0x728>)
    7470:	2205      	movs	r2, #5
    7472:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    7474:	f001 fbde 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7478:	f001 fbdc 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT:
		{
						if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    747c:	4b6c      	ldr	r3, [pc, #432]	; (7630 <BrakeBoardStateMachineTask+0x73c>)
    747e:	791b      	ldrb	r3, [r3, #4]
    7480:	1c1a      	adds	r2, r3, #0
    7482:	2308      	movs	r3, #8
    7484:	4013      	ands	r3, r2
    7486:	d003      	beq.n	7490 <BrakeBoardStateMachineTask+0x59c>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    7488:	4b64      	ldr	r3, [pc, #400]	; (761c <BrakeBoardStateMachineTask+0x728>)
    748a:	2207      	movs	r2, #7
    748c:	701a      	strb	r2, [r3, #0]
    748e:	e01f      	b.n	74d0 <BrakeBoardStateMachineTask+0x5dc>
			}			
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7490:	4b5f      	ldr	r3, [pc, #380]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	1c1a      	adds	r2, r3, #0
    7496:	2302      	movs	r3, #2
    7498:	4013      	ands	r3, r2
    749a:	d019      	beq.n	74d0 <BrakeBoardStateMachineTask+0x5dc>
				{
				
					brakeSupTime = 0;
    749c:	4b61      	ldr	r3, [pc, #388]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    749e:	2200      	movs	r2, #0
    74a0:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    74a2:	4b5b      	ldr	r3, [pc, #364]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    74a4:	781b      	ldrb	r3, [r3, #0]
    74a6:	2202      	movs	r2, #2
    74a8:	4393      	bics	r3, r2
    74aa:	b2da      	uxtb	r2, r3
    74ac:	4b58      	ldr	r3, [pc, #352]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    74ae:	701a      	strb	r2, [r3, #0]
					brakeSetupExtend++;
    74b0:	4b64      	ldr	r3, [pc, #400]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    74b2:	881b      	ldrh	r3, [r3, #0]
    74b4:	3301      	adds	r3, #1
    74b6:	b29a      	uxth	r2, r3
    74b8:	4b62      	ldr	r3, [pc, #392]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    74ba:	801a      	strh	r2, [r3, #0]
					MotorCW();
    74bc:	4b66      	ldr	r3, [pc, #408]	; (7658 <BrakeBoardStateMachineTask+0x764>)
    74be:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;  
    74c0:	4b58      	ldr	r3, [pc, #352]	; (7624 <BrakeBoardStateMachineTask+0x730>)
    74c2:	2264      	movs	r2, #100	; 0x64
    74c4:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_SETUPACTIVE;
    74c6:	4b55      	ldr	r3, [pc, #340]	; (761c <BrakeBoardStateMachineTask+0x728>)
    74c8:	2205      	movs	r2, #5
    74ca:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    74cc:	f001 fbb2 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    74d0:	f001 fbb0 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
		case BRAKESTATE_SETUPACTIVE:
		{
			done = 0; 
    74d4:	1c3b      	adds	r3, r7, #0
    74d6:	330e      	adds	r3, #14
    74d8:	2200      	movs	r2, #0
    74da:	701a      	strb	r2, [r3, #0]
//			if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
//			{
//				done = 1; 
//				brakeState = BRAKESTATE_POWERINGUP;
//			}
			if (brakeSetupExtend==(MAX_BRAKESETUPEXTEND-1))
    74dc:	4b59      	ldr	r3, [pc, #356]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    74de:	881b      	ldrh	r3, [r3, #0]
    74e0:	2b08      	cmp	r3, #8
    74e2:	d130      	bne.n	7546 <BrakeBoardStateMachineTask+0x652>
			{
				//building table 
				if ((brakeChange & BRAKECHANGE_TABLESAMPLE)!= 0)
    74e4:	4b4a      	ldr	r3, [pc, #296]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	1c1a      	adds	r2, r3, #0
    74ea:	2304      	movs	r3, #4
    74ec:	4013      	ands	r3, r2
    74ee:	d02a      	beq.n	7546 <BrakeBoardStateMachineTask+0x652>
				{
					brakeChange &= ~BRAKECHANGE_TABLESAMPLE; 
    74f0:	4b47      	ldr	r3, [pc, #284]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	2204      	movs	r2, #4
    74f6:	4393      	bics	r3, r2
    74f8:	b2da      	uxtb	r2, r3
    74fa:	4b45      	ldr	r3, [pc, #276]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    74fc:	701a      	strb	r2, [r3, #0]
					if (buildTableOffset >= MAX_BUILDTABLE)
    74fe:	4b57      	ldr	r3, [pc, #348]	; (765c <BrakeBoardStateMachineTask+0x768>)
    7500:	881a      	ldrh	r2, [r3, #0]
    7502:	4b57      	ldr	r3, [pc, #348]	; (7660 <BrakeBoardStateMachineTask+0x76c>)
    7504:	429a      	cmp	r2, r3
    7506:	d902      	bls.n	750e <BrakeBoardStateMachineTask+0x61a>
					{
						buildTableOffset = 0;
    7508:	4b54      	ldr	r3, [pc, #336]	; (765c <BrakeBoardStateMachineTask+0x768>)
    750a:	2200      	movs	r2, #0
    750c:	801a      	strh	r2, [r3, #0]
					}
					buildTable.Current[buildTableOffset] = ADCGetReading(ADC_INPUT_CURRENT); 
    750e:	4b53      	ldr	r3, [pc, #332]	; (765c <BrakeBoardStateMachineTask+0x768>)
    7510:	881b      	ldrh	r3, [r3, #0]
    7512:	1c1c      	adds	r4, r3, #0
    7514:	2001      	movs	r0, #1
    7516:	4b53      	ldr	r3, [pc, #332]	; (7664 <BrakeBoardStateMachineTask+0x770>)
    7518:	4798      	blx	r3
    751a:	1c03      	adds	r3, r0, #0
    751c:	1c19      	adds	r1, r3, #0
    751e:	4b52      	ldr	r3, [pc, #328]	; (7668 <BrakeBoardStateMachineTask+0x774>)
    7520:	0062      	lsls	r2, r4, #1
    7522:	52d1      	strh	r1, [r2, r3]
					buildTable.EncoderCount[buildTableOffset] = encoderCount;
    7524:	4b4d      	ldr	r3, [pc, #308]	; (765c <BrakeBoardStateMachineTask+0x768>)
    7526:	881b      	ldrh	r3, [r3, #0]
    7528:	1c1a      	adds	r2, r3, #0
    752a:	4b50      	ldr	r3, [pc, #320]	; (766c <BrakeBoardStateMachineTask+0x778>)
    752c:	8819      	ldrh	r1, [r3, #0]
    752e:	4b4e      	ldr	r3, [pc, #312]	; (7668 <BrakeBoardStateMachineTask+0x774>)
    7530:	2080      	movs	r0, #128	; 0x80
    7532:	00c0      	lsls	r0, r0, #3
    7534:	1812      	adds	r2, r2, r0
    7536:	0052      	lsls	r2, r2, #1
    7538:	52d1      	strh	r1, [r2, r3]
					buildTableOffset++;
    753a:	4b48      	ldr	r3, [pc, #288]	; (765c <BrakeBoardStateMachineTask+0x768>)
    753c:	881b      	ldrh	r3, [r3, #0]
    753e:	3301      	adds	r3, #1
    7540:	b29a      	uxth	r2, r3
    7542:	4b46      	ldr	r3, [pc, #280]	; (765c <BrakeBoardStateMachineTask+0x768>)
    7544:	801a      	strh	r2, [r3, #0]
				}
			}

			if (done == 0)
    7546:	1c3b      	adds	r3, r7, #0
    7548:	330e      	adds	r3, #14
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	2b00      	cmp	r3, #0
    754e:	d000      	beq.n	7552 <BrakeBoardStateMachineTask+0x65e>
    7550:	e179      	b.n	7846 <BrakeBoardStateMachineTask+0x952>
			{
			//---------------------------------
			// brakeSetupExtend
			// * counts 0,2,4,6,8 - extend
			// * counts 1,3,5,7,9 - retract
			if ((brakeSetupExtend & 0x01)==0)
    7552:	4b3c      	ldr	r3, [pc, #240]	; (7644 <BrakeBoardStateMachineTask+0x750>)
    7554:	881b      	ldrh	r3, [r3, #0]
    7556:	1c1a      	adds	r2, r3, #0
    7558:	2301      	movs	r3, #1
    755a:	4013      	ands	r3, r2
    755c:	d104      	bne.n	7568 <BrakeBoardStateMachineTask+0x674>
			{
				forceExtend = 0x00; 
    755e:	1c3b      	adds	r3, r7, #0
    7560:	330d      	adds	r3, #13
    7562:	2200      	movs	r2, #0
    7564:	701a      	strb	r2, [r3, #0]
    7566:	e003      	b.n	7570 <BrakeBoardStateMachineTask+0x67c>
			}
			else
			{
				forceExtend = 0x01;
    7568:	1c3b      	adds	r3, r7, #0
    756a:	330d      	adds	r3, #13
    756c:	2201      	movs	r2, #1
    756e:	701a      	strb	r2, [r3, #0]
			}
			switch (forceExtend)   //brakeSetupExtend)
    7570:	1c3b      	adds	r3, r7, #0
    7572:	330d      	adds	r3, #13
    7574:	781b      	ldrb	r3, [r3, #0]
    7576:	2b09      	cmp	r3, #9
    7578:	d901      	bls.n	757e <BrakeBoardStateMachineTask+0x68a>
    757a:	f001 fb5a 	bl	8c32 <BrakeBoardStateMachineTask+0x1d3e>
    757e:	009a      	lsls	r2, r3, #2
    7580:	4b3b      	ldr	r3, [pc, #236]	; (7670 <BrakeBoardStateMachineTask+0x77c>)
    7582:	18d3      	adds	r3, r2, r3
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	469f      	mov	pc, r3
				case 2:
				case 4:
				case 6:
				case 8:
				{
					if (flimitState == 0)
    7588:	4b32      	ldr	r3, [pc, #200]	; (7654 <BrakeBoardStateMachineTask+0x760>)
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	2b00      	cmp	r3, #0
    758e:	d117      	bne.n	75c0 <BrakeBoardStateMachineTask+0x6cc>
					{
						if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    7590:	2001      	movs	r0, #1
    7592:	4b28      	ldr	r3, [pc, #160]	; (7634 <BrakeBoardStateMachineTask+0x740>)
    7594:	4798      	blx	r3
    7596:	1c03      	adds	r3, r0, #0
    7598:	2b00      	cmp	r3, #0
    759a:	d103      	bne.n	75a4 <BrakeBoardStateMachineTask+0x6b0>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    759c:	4b1f      	ldr	r3, [pc, #124]	; (761c <BrakeBoardStateMachineTask+0x728>)
    759e:	2207      	movs	r2, #7
    75a0:	701a      	strb	r2, [r3, #0]
    75a2:	e005      	b.n	75b0 <BrakeBoardStateMachineTask+0x6bc>
						}		
						else
						{	
							setupExtendTriggered = 1;		
    75a4:	4b2a      	ldr	r3, [pc, #168]	; (7650 <BrakeBoardStateMachineTask+0x75c>)
    75a6:	2201      	movs	r2, #1
    75a8:	701a      	strb	r2, [r3, #0]
							brakeState = BRAKESTATE_ERROR_RETRACT;				
    75aa:	4b1c      	ldr	r3, [pc, #112]	; (761c <BrakeBoardStateMachineTask+0x728>)
    75ac:	2207      	movs	r2, #7
    75ae:	701a      	strb	r2, [r3, #0]
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    75b0:	4b17      	ldr	r3, [pc, #92]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    75b2:	781b      	ldrb	r3, [r3, #0]
    75b4:	2202      	movs	r2, #2
    75b6:	4393      	bics	r3, r2
    75b8:	b2da      	uxtb	r2, r3
    75ba:	4b15      	ldr	r3, [pc, #84]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    75bc:	701a      	strb	r2, [r3, #0]
    75be:	e0a0      	b.n	7702 <BrakeBoardStateMachineTask+0x80e>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    75c0:	2002      	movs	r0, #2
    75c2:	4b1c      	ldr	r3, [pc, #112]	; (7634 <BrakeBoardStateMachineTask+0x740>)
    75c4:	4798      	blx	r3
    75c6:	1c03      	adds	r3, r0, #0
    75c8:	2b00      	cmp	r3, #0
    75ca:	d107      	bne.n	75dc <BrakeBoardStateMachineTask+0x6e8>
    75cc:	4b29      	ldr	r3, [pc, #164]	; (7674 <BrakeBoardStateMachineTask+0x780>)
    75ce:	881b      	ldrh	r3, [r3, #0]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d103      	bne.n	75dc <BrakeBoardStateMachineTask+0x6e8>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;			
    75d4:	4b11      	ldr	r3, [pc, #68]	; (761c <BrakeBoardStateMachineTask+0x728>)
    75d6:	2207      	movs	r2, #7
    75d8:	701a      	strb	r2, [r3, #0]
    75da:	e092      	b.n	7702 <BrakeBoardStateMachineTask+0x80e>
						}	
						else
						{
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    75dc:	4b0c      	ldr	r3, [pc, #48]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	1c1a      	adds	r2, r3, #0
    75e2:	2302      	movs	r3, #2
    75e4:	4013      	ands	r3, r2
    75e6:	d051      	beq.n	768c <BrakeBoardStateMachineTask+0x798>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    75e8:	4b09      	ldr	r3, [pc, #36]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    75ea:	781b      	ldrb	r3, [r3, #0]
    75ec:	2202      	movs	r2, #2
    75ee:	4393      	bics	r3, r2
    75f0:	b2da      	uxtb	r2, r3
    75f2:	4b07      	ldr	r3, [pc, #28]	; (7610 <BrakeBoardStateMachineTask+0x71c>)
    75f4:	701a      	strb	r2, [r3, #0]
								MotorOff(1);
    75f6:	2001      	movs	r0, #1
    75f8:	4b07      	ldr	r3, [pc, #28]	; (7618 <BrakeBoardStateMachineTask+0x724>)
    75fa:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    75fc:	2002      	movs	r0, #2
    75fe:	4b0d      	ldr	r3, [pc, #52]	; (7634 <BrakeBoardStateMachineTask+0x740>)
    7600:	4798      	blx	r3
    7602:	1c03      	adds	r3, r0, #0
    7604:	2b00      	cmp	r3, #0
    7606:	d137      	bne.n	7678 <BrakeBoardStateMachineTask+0x784>
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    7608:	4b04      	ldr	r3, [pc, #16]	; (761c <BrakeBoardStateMachineTask+0x728>)
    760a:	2207      	movs	r2, #7
    760c:	701a      	strb	r2, [r3, #0]
    760e:	e036      	b.n	767e <BrakeBoardStateMachineTask+0x78a>
    7610:	20002eee 	.word	0x20002eee
    7614:	20002ee2 	.word	0x20002ee2
    7618:	00009b75 	.word	0x00009b75
    761c:	20002ebf 	.word	0x20002ebf
    7620:	00009c89 	.word	0x00009c89
    7624:	200036c4 	.word	0x200036c4
    7628:	20003068 	.word	0x20003068
    762c:	20000001 	.word	0x20000001
    7630:	20003694 	.word	0x20003694
    7634:	000069a1 	.word	0x000069a1
    7638:	00008f41 	.word	0x00008f41
    763c:	00006851 	.word	0x00006851
    7640:	2000306e 	.word	0x2000306e
    7644:	20002ecc 	.word	0x20002ecc
    7648:	200004be 	.word	0x200004be
    764c:	200004c0 	.word	0x200004c0
    7650:	200004b1 	.word	0x200004b1
    7654:	20003072 	.word	0x20003072
    7658:	00009d45 	.word	0x00009d45
    765c:	20001e9c 	.word	0x20001e9c
    7660:	000003ff 	.word	0x000003ff
    7664:	0000b4b5 	.word	0x0000b4b5
    7668:	20000e9c 	.word	0x20000e9c
    766c:	200004a8 	.word	0x200004a8
    7670:	00018470 	.word	0x00018470
    7674:	20002eb2 	.word	0x20002eb2
								}
								else
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    7678:	4bce      	ldr	r3, [pc, #824]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    767a:	2207      	movs	r2, #7
    767c:	701a      	strb	r2, [r3, #0]
								}	
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    767e:	4bce      	ldr	r3, [pc, #824]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7680:	781b      	ldrb	r3, [r3, #0]
    7682:	2202      	movs	r2, #2
    7684:	4393      	bics	r3, r2
    7686:	b2da      	uxtb	r2, r3
    7688:	4bcb      	ldr	r3, [pc, #812]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    768a:	701a      	strb	r2, [r3, #0]
							}			
							if (motorRunTime == 0)
    768c:	4bcb      	ldr	r3, [pc, #812]	; (79bc <BrakeBoardStateMachineTask+0xac8>)
    768e:	881b      	ldrh	r3, [r3, #0]
    7690:	2b00      	cmp	r3, #0
    7692:	d136      	bne.n	7702 <BrakeBoardStateMachineTask+0x80e>
								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
//								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
//								((brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))								
#else								
								setupCurrent = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet);
    7694:	4bca      	ldr	r3, [pc, #808]	; (79c0 <BrakeBoardStateMachineTask+0xacc>)
    7696:	7d9b      	ldrb	r3, [r3, #22]
    7698:	1c18      	adds	r0, r3, #0
    769a:	4bca      	ldr	r3, [pc, #808]	; (79c4 <BrakeBoardStateMachineTask+0xad0>)
    769c:	4798      	blx	r3
    769e:	1c03      	adds	r3, r0, #0
    76a0:	1c1a      	adds	r2, r3, #0
    76a2:	4bc9      	ldr	r3, [pc, #804]	; (79c8 <BrakeBoardStateMachineTask+0xad4>)
    76a4:	801a      	strh	r2, [r3, #0]
								if (((maxCurrentRead > setupCurrent)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||								
    76a6:	4bc9      	ldr	r3, [pc, #804]	; (79cc <BrakeBoardStateMachineTask+0xad8>)
    76a8:	881a      	ldrh	r2, [r3, #0]
    76aa:	4bc7      	ldr	r3, [pc, #796]	; (79c8 <BrakeBoardStateMachineTask+0xad4>)
    76ac:	881b      	ldrh	r3, [r3, #0]
    76ae:	429a      	cmp	r2, r3
    76b0:	d903      	bls.n	76ba <BrakeBoardStateMachineTask+0x7c6>
    76b2:	4bc7      	ldr	r3, [pc, #796]	; (79d0 <BrakeBoardStateMachineTask+0xadc>)
    76b4:	881b      	ldrh	r3, [r3, #0]
    76b6:	2b08      	cmp	r3, #8
    76b8:	d108      	bne.n	76cc <BrakeBoardStateMachineTask+0x7d8>
//v1.05							if (((maxCurrentRead > CURRENT_THRESHOLD_SETUP)&&(brakeSetupExtend!= 8))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
    76ba:	4bc4      	ldr	r3, [pc, #784]	; (79cc <BrakeBoardStateMachineTask+0xad8>)
    76bc:	881a      	ldrh	r2, [r3, #0]
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
//								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
//								((brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))								
#else								
								setupCurrent = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet);
								if (((maxCurrentRead > setupCurrent)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||								
    76be:	4bc5      	ldr	r3, [pc, #788]	; (79d4 <BrakeBoardStateMachineTask+0xae0>)
    76c0:	429a      	cmp	r2, r3
    76c2:	d91e      	bls.n	7702 <BrakeBoardStateMachineTask+0x80e>
//v1.05							if (((maxCurrentRead > CURRENT_THRESHOLD_SETUP)&&(brakeSetupExtend!= 8))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
    76c4:	4bc2      	ldr	r3, [pc, #776]	; (79d0 <BrakeBoardStateMachineTask+0xadc>)
    76c6:	881b      	ldrh	r3, [r3, #0]
    76c8:	2b08      	cmp	r3, #8
    76ca:	d11a      	bne.n	7702 <BrakeBoardStateMachineTask+0x80e>
#endif
								{
									MotorOff(1);
    76cc:	2001      	movs	r0, #1
    76ce:	4bc2      	ldr	r3, [pc, #776]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    76d0:	4798      	blx	r3
									if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    76d2:	2002      	movs	r0, #2
    76d4:	4bc1      	ldr	r3, [pc, #772]	; (79dc <BrakeBoardStateMachineTask+0xae8>)
    76d6:	4798      	blx	r3
    76d8:	1c03      	adds	r3, r0, #0
    76da:	2b00      	cmp	r3, #0
    76dc:	d103      	bne.n	76e6 <BrakeBoardStateMachineTask+0x7f2>
									{
										brakeState = BRAKESTATE_ERROR_RETRACT;
    76de:	4bb5      	ldr	r3, [pc, #724]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    76e0:	2207      	movs	r2, #7
    76e2:	701a      	strb	r2, [r3, #0]
    76e4:	e005      	b.n	76f2 <BrakeBoardStateMachineTask+0x7fe>
									}
									else
									{								
										brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND; 										
    76e6:	4bb3      	ldr	r3, [pc, #716]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    76e8:	220e      	movs	r2, #14
    76ea:	701a      	strb	r2, [r3, #0]
										brakeSupTime = BRAKESUPTIME_SETUPPAUSE;  									
    76ec:	4bbc      	ldr	r3, [pc, #752]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    76ee:	2214      	movs	r2, #20
    76f0:	801a      	strh	r2, [r3, #0]
									}
									brakeChange &= ~BRAKECHANGE_SUPTIME;
    76f2:	4bb1      	ldr	r3, [pc, #708]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    76f4:	781b      	ldrb	r3, [r3, #0]
    76f6:	2202      	movs	r2, #2
    76f8:	4393      	bics	r3, r2
    76fa:	b2da      	uxtb	r2, r3
    76fc:	4bae      	ldr	r3, [pc, #696]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    76fe:	701a      	strb	r2, [r3, #0]
								}
							}
						}
					}
					break;
    7700:	e0a1      	b.n	7846 <BrakeBoardStateMachineTask+0x952>
    7702:	e0a0      	b.n	7846 <BrakeBoardStateMachineTask+0x952>
				case 3:
				case 5:
				case 7:
				case 9:
				{
					if ((hlimitState == 0)||(homeLimit== HOME_IN)) //V01_26
    7704:	4bb7      	ldr	r3, [pc, #732]	; (79e4 <BrakeBoardStateMachineTask+0xaf0>)
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	2b00      	cmp	r3, #0
    770a:	d003      	beq.n	7714 <BrakeBoardStateMachineTask+0x820>
    770c:	4bb6      	ldr	r3, [pc, #728]	; (79e8 <BrakeBoardStateMachineTask+0xaf4>)
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	2b00      	cmp	r3, #0
    7712:	d13f      	bne.n	7794 <BrakeBoardStateMachineTask+0x8a0>
					{
						if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    7714:	2000      	movs	r0, #0
    7716:	4bb1      	ldr	r3, [pc, #708]	; (79dc <BrakeBoardStateMachineTask+0xae8>)
    7718:	4798      	blx	r3
    771a:	1c03      	adds	r3, r0, #0
    771c:	2b00      	cmp	r3, #0
    771e:	d106      	bne.n	772e <BrakeBoardStateMachineTask+0x83a>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    7720:	4ba4      	ldr	r3, [pc, #656]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7722:	2207      	movs	r2, #7
    7724:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    7726:	4bae      	ldr	r3, [pc, #696]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7728:	2200      	movs	r2, #0
    772a:	801a      	strh	r2, [r3, #0]
    772c:	e02a      	b.n	7784 <BrakeBoardStateMachineTask+0x890>
						}
						else
						{		
							if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    772e:	4ba8      	ldr	r3, [pc, #672]	; (79d0 <BrakeBoardStateMachineTask+0xadc>)
    7730:	881b      	ldrh	r3, [r3, #0]
    7732:	2b01      	cmp	r3, #1
    7734:	d120      	bne.n	7778 <BrakeBoardStateMachineTask+0x884>
//V1.05									if (brakeSetupExtend == 9)												
							{
										if (setupExtendTriggered != 0)
    7736:	4bad      	ldr	r3, [pc, #692]	; (79ec <BrakeBoardStateMachineTask+0xaf8>)
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	2b00      	cmp	r3, #0
    773c:	d006      	beq.n	774c <BrakeBoardStateMachineTask+0x858>
										{
											brakeState = BRAKESTATE_ERROR_RETRACT;
    773e:	4b9d      	ldr	r3, [pc, #628]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7740:	2207      	movs	r2, #7
    7742:	701a      	strb	r2, [r3, #0]
											MotorOff(1);										
    7744:	2001      	movs	r0, #1
    7746:	4ba4      	ldr	r3, [pc, #656]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    7748:	4798      	blx	r3
    774a:	e01b      	b.n	7784 <BrakeBoardStateMachineTask+0x890>
										}
										else
										{		
											brakeState = BRAKESTATE_SETUPACTIVE_END; //BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    774c:	4b99      	ldr	r3, [pc, #612]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    774e:	2221      	movs	r2, #33	; 0x21
    7750:	701a      	strb	r2, [r3, #0]
											MotorOff(1);
    7752:	2001      	movs	r0, #1
    7754:	4ba0      	ldr	r3, [pc, #640]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    7756:	4798      	blx	r3
											brakeSupTime =BRAKESUPTIME;   
    7758:	4ba1      	ldr	r3, [pc, #644]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    775a:	2264      	movs	r2, #100	; 0x64
    775c:	801a      	strh	r2, [r3, #0]
														if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    775e:	4ba4      	ldr	r3, [pc, #656]	; (79f0 <BrakeBoardStateMachineTask+0xafc>)
    7760:	791b      	ldrb	r3, [r3, #4]
    7762:	1c1a      	adds	r2, r3, #0
    7764:	2308      	movs	r3, #8
    7766:	4013      	ands	r3, r2
    7768:	d003      	beq.n	7772 <BrakeBoardStateMachineTask+0x87e>
											{
												brakeState = BRAKESTATE_ERROR_RETRACT;
    776a:	4b92      	ldr	r3, [pc, #584]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    776c:	2207      	movs	r2, #7
    776e:	701a      	strb	r2, [r3, #0]
    7770:	e008      	b.n	7784 <BrakeBoardStateMachineTask+0x890>
											}
											else
											{
												MotorCCW(); //V01_27
    7772:	4ba0      	ldr	r3, [pc, #640]	; (79f4 <BrakeBoardStateMachineTask+0xb00>)
    7774:	4798      	blx	r3
    7776:	e005      	b.n	7784 <BrakeBoardStateMachineTask+0x890>
											//--------------v1.05 eoc													
										}				
							}	
							else
							{
								brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 								
    7778:	4b8e      	ldr	r3, [pc, #568]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    777a:	220f      	movs	r2, #15
    777c:	701a      	strb	r2, [r3, #0]
 								brakeSupTime = BRAKESUPTIME_SETUPPAUSE;  
    777e:	4b98      	ldr	r3, [pc, #608]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7780:	2214      	movs	r2, #20
    7782:	801a      	strh	r2, [r3, #0]
							}
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7784:	4b8c      	ldr	r3, [pc, #560]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	2202      	movs	r2, #2
    778a:	4393      	bics	r3, r2
    778c:	b2da      	uxtb	r2, r3
    778e:	4b8a      	ldr	r3, [pc, #552]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7790:	701a      	strb	r2, [r3, #0]
    7792:	e057      	b.n	7844 <BrakeBoardStateMachineTask+0x950>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    7794:	2002      	movs	r0, #2
    7796:	4b91      	ldr	r3, [pc, #580]	; (79dc <BrakeBoardStateMachineTask+0xae8>)
    7798:	4798      	blx	r3
    779a:	1c03      	adds	r3, r0, #0
    779c:	2b00      	cmp	r3, #0
    779e:	d10d      	bne.n	77bc <BrakeBoardStateMachineTask+0x8c8>
    77a0:	4b86      	ldr	r3, [pc, #536]	; (79bc <BrakeBoardStateMachineTask+0xac8>)
    77a2:	881b      	ldrh	r3, [r3, #0]
    77a4:	2b00      	cmp	r3, #0
    77a6:	d109      	bne.n	77bc <BrakeBoardStateMachineTask+0x8c8>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    77a8:	4b82      	ldr	r3, [pc, #520]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    77aa:	2207      	movs	r2, #7
    77ac:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    77ae:	4b8c      	ldr	r3, [pc, #560]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    77b0:	2200      	movs	r2, #0
    77b2:	801a      	strh	r2, [r3, #0]
							MotorOff(1);
    77b4:	2001      	movs	r0, #1
    77b6:	4b88      	ldr	r3, [pc, #544]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    77b8:	4798      	blx	r3
    77ba:	e043      	b.n	7844 <BrakeBoardStateMachineTask+0x950>
						}
						else
						{						
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    77bc:	4b7e      	ldr	r3, [pc, #504]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	1c1a      	adds	r2, r3, #0
    77c2:	2302      	movs	r3, #2
    77c4:	4013      	ands	r3, r2
    77c6:	d03d      	beq.n	7844 <BrakeBoardStateMachineTask+0x950>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    77c8:	4b7b      	ldr	r3, [pc, #492]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    77ca:	781b      	ldrb	r3, [r3, #0]
    77cc:	2202      	movs	r2, #2
    77ce:	4393      	bics	r3, r2
    77d0:	b2da      	uxtb	r2, r3
    77d2:	4b79      	ldr	r3, [pc, #484]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    77d4:	701a      	strb	r2, [r3, #0]
								//						brakeState = BRAKESTATE_IDLE;
								//						brakeBiLED = BRAKEBILED_SOLIDGREEN;
								//----------------ERROR here????
								MotorOff(1);
    77d6:	2001      	movs	r0, #1
    77d8:	4b7f      	ldr	r3, [pc, #508]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    77da:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    77dc:	2002      	movs	r0, #2
    77de:	4b7f      	ldr	r3, [pc, #508]	; (79dc <BrakeBoardStateMachineTask+0xae8>)
    77e0:	4798      	blx	r3
    77e2:	1c03      	adds	r3, r0, #0
    77e4:	2b00      	cmp	r3, #0
    77e6:	d106      	bne.n	77f6 <BrakeBoardStateMachineTask+0x902>
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    77e8:	4b72      	ldr	r3, [pc, #456]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    77ea:	2207      	movs	r2, #7
    77ec:	701a      	strb	r2, [r3, #0]
									brakeSupTime = 0;
    77ee:	4b7c      	ldr	r3, [pc, #496]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    77f0:	2200      	movs	r2, #0
    77f2:	801a      	strh	r2, [r3, #0]
    77f4:	e01e      	b.n	7834 <BrakeBoardStateMachineTask+0x940>
								}
								else
								{
									if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    77f6:	4b76      	ldr	r3, [pc, #472]	; (79d0 <BrakeBoardStateMachineTask+0xadc>)
    77f8:	881b      	ldrh	r3, [r3, #0]
    77fa:	2b01      	cmp	r3, #1
    77fc:	d114      	bne.n	7828 <BrakeBoardStateMachineTask+0x934>
//V1.05									if (brakeSetupExtend == 9)									
									{
										if (setupExtendTriggered != 0)
    77fe:	4b7b      	ldr	r3, [pc, #492]	; (79ec <BrakeBoardStateMachineTask+0xaf8>)
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	2b00      	cmp	r3, #0
    7804:	d006      	beq.n	7814 <BrakeBoardStateMachineTask+0x920>
										{
											brakeState = BRAKESTATE_ERROR_RETRACT;
    7806:	4b6b      	ldr	r3, [pc, #428]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7808:	2207      	movs	r2, #7
    780a:	701a      	strb	r2, [r3, #0]
											MotorOff(1);									
    780c:	2001      	movs	r0, #1
    780e:	4b72      	ldr	r3, [pc, #456]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    7810:	4798      	blx	r3
    7812:	e00f      	b.n	7834 <BrakeBoardStateMachineTask+0x940>
										}
										else
										{		
//											MotorNeedNewBaseline();					
//											brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
											brakeState = BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    7814:	4b67      	ldr	r3, [pc, #412]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7816:	2222      	movs	r2, #34	; 0x22
    7818:	701a      	strb	r2, [r3, #0]
											MotorOff(1);
    781a:	2001      	movs	r0, #1
    781c:	4b6e      	ldr	r3, [pc, #440]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    781e:	4798      	blx	r3
											brakeSupTime = 30; // BRAKESUPTIME;	
    7820:	4b6f      	ldr	r3, [pc, #444]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7822:	221e      	movs	r2, #30
    7824:	801a      	strh	r2, [r3, #0]
    7826:	e005      	b.n	7834 <BrakeBoardStateMachineTask+0x940>
											//--------------v1.05 eoc													
										}
									}
									else
									{						
										brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 
    7828:	4b62      	ldr	r3, [pc, #392]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    782a:	220f      	movs	r2, #15
    782c:	701a      	strb	r2, [r3, #0]
										brakeSupTime = BRAKESUPTIME_SETUPPAUSE;
    782e:	4b6c      	ldr	r3, [pc, #432]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7830:	2214      	movs	r2, #20
    7832:	801a      	strh	r2, [r3, #0]
									}
								}
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    7834:	4b60      	ldr	r3, [pc, #384]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	2202      	movs	r2, #2
    783a:	4393      	bics	r3, r2
    783c:	b2da      	uxtb	r2, r3
    783e:	4b5e      	ldr	r3, [pc, #376]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7840:	701a      	strb	r2, [r3, #0]
							}			
						}
					}
					break;
    7842:	e7ff      	b.n	7844 <BrakeBoardStateMachineTask+0x950>
    7844:	46c0      	nop			; (mov r8, r8)
				}
			}
			}
			break;
    7846:	f001 f9f4 	bl	8c32 <BrakeBoardStateMachineTask+0x1d3e>
		}
//----------------------------------
// error handling states
		case BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE:
		{
				if (((brakeChange & BRAKECHANGE_SUPTIME)!=0)||(brakeSupTime==0))
    784a:	4b5b      	ldr	r3, [pc, #364]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	1c1a      	adds	r2, r3, #0
    7850:	2302      	movs	r3, #2
    7852:	4013      	ands	r3, r2
    7854:	d103      	bne.n	785e <BrakeBoardStateMachineTask+0x96a>
    7856:	4b62      	ldr	r3, [pc, #392]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7858:	881b      	ldrh	r3, [r3, #0]
    785a:	2b00      	cmp	r3, #0
    785c:	d114      	bne.n	7888 <BrakeBoardStateMachineTask+0x994>
				{
					MotorOff(1);
    785e:	2001      	movs	r0, #1
    7860:	4b5d      	ldr	r3, [pc, #372]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    7862:	4798      	blx	r3
					brakeSupTime = 0;
    7864:	4b5e      	ldr	r3, [pc, #376]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7866:	2200      	movs	r2, #0
    7868:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    786a:	4b53      	ldr	r3, [pc, #332]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    786c:	781b      	ldrb	r3, [r3, #0]
    786e:	2202      	movs	r2, #2
    7870:	4393      	bics	r3, r2
    7872:	b2da      	uxtb	r2, r3
    7874:	4b50      	ldr	r3, [pc, #320]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7876:	701a      	strb	r2, [r3, #0]
					BrakeActuatorControl(BRAKE_HOME);
    7878:	2000      	movs	r0, #0
    787a:	4b58      	ldr	r3, [pc, #352]	; (79dc <BrakeBoardStateMachineTask+0xae8>)
    787c:	4798      	blx	r3
					brakeState = BRAKESTATE_ERROR_FINAL;
    787e:	4b4d      	ldr	r3, [pc, #308]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7880:	2218      	movs	r2, #24
    7882:	701a      	strb	r2, [r3, #0]
				}
			break;
    7884:	f001 f9d6 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7888:	f001 f9d4 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_ERROR_RETRACT:
		{
			switch (action)
    788c:	4b5a      	ldr	r3, [pc, #360]	; (79f8 <BrakeBoardStateMachineTask+0xb04>)
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	2b01      	cmp	r3, #1
    7892:	d02f      	beq.n	78f4 <BrakeBoardStateMachineTask+0xa00>
    7894:	2b04      	cmp	r3, #4
    7896:	d02d      	beq.n	78f4 <BrakeBoardStateMachineTask+0xa00>
    7898:	2b00      	cmp	r3, #0
    789a:	d13e      	bne.n	791a <BrakeBoardStateMachineTask+0xa26>
			{
				case NONE:
				{
					if ((prevAction == EXTENDING)||(prevAction == EXTENDING_BY_ENCODER))
    789c:	4b57      	ldr	r3, [pc, #348]	; (79fc <BrakeBoardStateMachineTask+0xb08>)
    789e:	781b      	ldrb	r3, [r3, #0]
    78a0:	2b01      	cmp	r3, #1
    78a2:	d003      	beq.n	78ac <BrakeBoardStateMachineTask+0x9b8>
    78a4:	4b55      	ldr	r3, [pc, #340]	; (79fc <BrakeBoardStateMachineTask+0xb08>)
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	2b04      	cmp	r3, #4
    78aa:	d112      	bne.n	78d2 <BrakeBoardStateMachineTask+0x9de>
					{
						MotorOff(1);
    78ac:	2001      	movs	r0, #1
    78ae:	4b4a      	ldr	r3, [pc, #296]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    78b0:	4798      	blx	r3
						MotorCCW();
    78b2:	4b50      	ldr	r3, [pc, #320]	; (79f4 <BrakeBoardStateMachineTask+0xb00>)
    78b4:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME_MEDIUM;
    78b6:	4b4a      	ldr	r3, [pc, #296]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    78b8:	221e      	movs	r2, #30
    78ba:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    78bc:	4b3e      	ldr	r3, [pc, #248]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	2202      	movs	r2, #2
    78c2:	4393      	bics	r3, r2
    78c4:	b2da      	uxtb	r2, r3
    78c6:	4b3c      	ldr	r3, [pc, #240]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    78c8:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    78ca:	4b3a      	ldr	r3, [pc, #232]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    78cc:	2224      	movs	r2, #36	; 0x24
    78ce:	701a      	strb	r2, [r3, #0]
						MotorOff(1);
						brakeSupTime = 0;
						brakeChange |= BRAKECHANGE_SUPTIME;
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
					}
					break;
    78d0:	e035      	b.n	793e <BrakeBoardStateMachineTask+0xa4a>
						brakeChange &= ~BRAKECHANGE_SUPTIME;
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
					}
					else
					{
						MotorOff(1);
    78d2:	2001      	movs	r0, #1
    78d4:	4b40      	ldr	r3, [pc, #256]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    78d6:	4798      	blx	r3
						brakeSupTime = 0;
    78d8:	4b41      	ldr	r3, [pc, #260]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    78da:	2200      	movs	r2, #0
    78dc:	801a      	strh	r2, [r3, #0]
						brakeChange |= BRAKECHANGE_SUPTIME;
    78de:	4b36      	ldr	r3, [pc, #216]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    78e0:	781b      	ldrb	r3, [r3, #0]
    78e2:	2202      	movs	r2, #2
    78e4:	4313      	orrs	r3, r2
    78e6:	b2da      	uxtb	r2, r3
    78e8:	4b33      	ldr	r3, [pc, #204]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    78ea:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    78ec:	4b31      	ldr	r3, [pc, #196]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    78ee:	2224      	movs	r2, #36	; 0x24
    78f0:	701a      	strb	r2, [r3, #0]
					}
					break;
    78f2:	e024      	b.n	793e <BrakeBoardStateMachineTask+0xa4a>
				}
				case EXTENDING:
				case EXTENDING_BY_ENCODER:
				{
					MotorOff(1);
    78f4:	2001      	movs	r0, #1
    78f6:	4b38      	ldr	r3, [pc, #224]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    78f8:	4798      	blx	r3
					MotorCCW();
    78fa:	4b3e      	ldr	r3, [pc, #248]	; (79f4 <BrakeBoardStateMachineTask+0xb00>)
    78fc:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME_MEDIUM;
    78fe:	4b38      	ldr	r3, [pc, #224]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7900:	221e      	movs	r2, #30
    7902:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7904:	4b2c      	ldr	r3, [pc, #176]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	2202      	movs	r2, #2
    790a:	4393      	bics	r3, r2
    790c:	b2da      	uxtb	r2, r3
    790e:	4b2a      	ldr	r3, [pc, #168]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7910:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    7912:	4b28      	ldr	r3, [pc, #160]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7914:	2224      	movs	r2, #36	; 0x24
    7916:	701a      	strb	r2, [r3, #0]
					break;
    7918:	e011      	b.n	793e <BrakeBoardStateMachineTask+0xa4a>
				}
				default:
				{
					MotorOff(1);
    791a:	2001      	movs	r0, #1
    791c:	4b2e      	ldr	r3, [pc, #184]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    791e:	4798      	blx	r3
					brakeSupTime = 0;
    7920:	4b2f      	ldr	r3, [pc, #188]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7922:	2200      	movs	r2, #0
    7924:	801a      	strh	r2, [r3, #0]
					brakeChange |= BRAKECHANGE_SUPTIME;
    7926:	4b24      	ldr	r3, [pc, #144]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	2202      	movs	r2, #2
    792c:	4313      	orrs	r3, r2
    792e:	b2da      	uxtb	r2, r3
    7930:	4b21      	ldr	r3, [pc, #132]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7932:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    7934:	4b1f      	ldr	r3, [pc, #124]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7936:	2224      	movs	r2, #36	; 0x24
    7938:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    793a:	f001 f97b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    793e:	f001 f979 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_ERRORLOAD:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack==0))
    7942:	4b1d      	ldr	r3, [pc, #116]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	1c1a      	adds	r2, r3, #0
    7948:	2302      	movs	r3, #2
    794a:	4013      	ands	r3, r2
    794c:	d103      	bne.n	7956 <BrakeBoardStateMachineTask+0xa62>
    794e:	4b2c      	ldr	r3, [pc, #176]	; (7a00 <BrakeBoardStateMachineTask+0xb0c>)
    7950:	881b      	ldrh	r3, [r3, #0]
    7952:	2b00      	cmp	r3, #0
    7954:	d111      	bne.n	797a <BrakeBoardStateMachineTask+0xa86>
			{
				MotorOff(1);
    7956:	2001      	movs	r0, #1
    7958:	4b1f      	ldr	r3, [pc, #124]	; (79d8 <BrakeBoardStateMachineTask+0xae4>)
    795a:	4798      	blx	r3
				brakeState = BRAKESTATE_ERRORLOADWAIT;
    795c:	4b15      	ldr	r3, [pc, #84]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    795e:	2220      	movs	r2, #32
    7960:	701a      	strb	r2, [r3, #0]
				brakeSupTime = 10;  //1 second
    7962:	4b1f      	ldr	r3, [pc, #124]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    7964:	220a      	movs	r2, #10
    7966:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7968:	4b13      	ldr	r3, [pc, #76]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	2202      	movs	r2, #2
    796e:	4393      	bics	r3, r2
    7970:	b2da      	uxtb	r2, r3
    7972:	4b11      	ldr	r3, [pc, #68]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    7974:	701a      	strb	r2, [r3, #0]
			}		
			break;
    7976:	f001 f95d 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    797a:	f001 f95b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_ERRORLOADWAIT:
		{
			itemp3 = LoadCell(brakeState);
    797e:	4b0d      	ldr	r3, [pc, #52]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	1dbc      	adds	r4, r7, #6
    7984:	1c18      	adds	r0, r3, #0
    7986:	4b1f      	ldr	r3, [pc, #124]	; (7a04 <BrakeBoardStateMachineTask+0xb10>)
    7988:	4798      	blx	r3
    798a:	1c03      	adds	r3, r0, #0
    798c:	8023      	strh	r3, [r4, #0]
			if (itemp3<0x60)								
    798e:	1dbb      	adds	r3, r7, #6
    7990:	881b      	ldrh	r3, [r3, #0]
    7992:	2b5f      	cmp	r3, #95	; 0x5f
    7994:	d838      	bhi.n	7a08 <BrakeBoardStateMachineTask+0xb14>
			{
     			brakeState = BRAKESTATE_ACTIVELOAD;			
    7996:	4b07      	ldr	r3, [pc, #28]	; (79b4 <BrakeBoardStateMachineTask+0xac0>)
    7998:	221e      	movs	r2, #30
    799a:	701a      	strb	r2, [r3, #0]
				brakeSupTime = 0;
    799c:	4b10      	ldr	r3, [pc, #64]	; (79e0 <BrakeBoardStateMachineTask+0xaec>)
    799e:	2200      	movs	r2, #0
    79a0:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    79a2:	4b05      	ldr	r3, [pc, #20]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	2202      	movs	r2, #2
    79a8:	4393      	bics	r3, r2
    79aa:	b2da      	uxtb	r2, r3
    79ac:	4b02      	ldr	r3, [pc, #8]	; (79b8 <BrakeBoardStateMachineTask+0xac4>)
    79ae:	701a      	strb	r2, [r3, #0]
//					brakeState = BRAKESTATE_ERROR;		
					MotorOff(0);	
				}
				ActiveLoadState(brakeState);
			}
			break;
    79b0:	f001 f940 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    79b4:	20002ebf 	.word	0x20002ebf
    79b8:	20002eee 	.word	0x20002eee
    79bc:	20002eb2 	.word	0x20002eb2
    79c0:	20002fb8 	.word	0x20002fb8
    79c4:	00009545 	.word	0x00009545
    79c8:	20002ee0 	.word	0x20002ee0
    79cc:	200004be 	.word	0x200004be
    79d0:	20002ecc 	.word	0x20002ecc
    79d4:	00000345 	.word	0x00000345
    79d8:	00009b75 	.word	0x00009b75
    79dc:	000069a1 	.word	0x000069a1
    79e0:	200036c4 	.word	0x200036c4
    79e4:	20003068 	.word	0x20003068
    79e8:	20000001 	.word	0x20000001
    79ec:	200004b1 	.word	0x200004b1
    79f0:	20003694 	.word	0x20003694
    79f4:	00009c89 	.word	0x00009c89
    79f8:	200004ae 	.word	0x200004ae
    79fc:	200004af 	.word	0x200004af
    7a00:	20002ee2 	.word	0x20002ee2
    7a04:	00006851 	.word	0x00006851
				brakeChange &= ~BRAKECHANGE_SUPTIME;

			}
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0) 
    7a08:	4bca      	ldr	r3, [pc, #808]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	1c1a      	adds	r2, r3, #0
    7a0e:	2302      	movs	r3, #2
    7a10:	4013      	ands	r3, r2
    7a12:	d011      	beq.n	7a38 <BrakeBoardStateMachineTask+0xb44>
				{
					brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;
    7a14:	4bc8      	ldr	r3, [pc, #800]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a16:	791b      	ldrb	r3, [r3, #4]
    7a18:	2204      	movs	r2, #4
    7a1a:	4313      	orrs	r3, r2
    7a1c:	b2da      	uxtb	r2, r3
    7a1e:	4bc6      	ldr	r3, [pc, #792]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a20:	711a      	strb	r2, [r3, #4]
					brakeStatus.BrakeState |= BRAKESTATE_ERRORLOADSET;  //V01_28 added 
    7a22:	4bc5      	ldr	r3, [pc, #788]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a24:	791b      	ldrb	r3, [r3, #4]
    7a26:	2280      	movs	r2, #128	; 0x80
    7a28:	4252      	negs	r2, r2
    7a2a:	4313      	orrs	r3, r2
    7a2c:	b2da      	uxtb	r2, r3
    7a2e:	4bc2      	ldr	r3, [pc, #776]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a30:	711a      	strb	r2, [r3, #4]
//					brakeState = BRAKESTATE_ERROR;		
					MotorOff(0);	
    7a32:	2000      	movs	r0, #0
    7a34:	4bc1      	ldr	r3, [pc, #772]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7a36:	4798      	blx	r3
				}
				ActiveLoadState(brakeState);
    7a38:	4bc1      	ldr	r3, [pc, #772]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7a3a:	781b      	ldrb	r3, [r3, #0]
    7a3c:	1c18      	adds	r0, r3, #0
    7a3e:	4bc1      	ldr	r3, [pc, #772]	; (7d44 <BrakeBoardStateMachineTask+0xe50>)
    7a40:	4798      	blx	r3
			}
			break;
    7a42:	f001 f8f7 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_ERROR:
		{
			MotorOff(0);
    7a46:	2000      	movs	r0, #0
    7a48:	4bbc      	ldr	r3, [pc, #752]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7a4a:	4798      	blx	r3
			break;
    7a4c:	f001 f8f2 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
		case BRAKESTATE_ERROR_FINAL:
		{
			MotorOff(0);
    7a50:	2000      	movs	r0, #0
    7a52:	4bba      	ldr	r3, [pc, #744]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7a54:	4798      	blx	r3
			if (setupExtendTriggered != 0)
    7a56:	4bbc      	ldr	r3, [pc, #752]	; (7d48 <BrakeBoardStateMachineTask+0xe54>)
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d007      	beq.n	7a6e <BrakeBoardStateMachineTask+0xb7a>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDTRIGGEREDINSETUP;
    7a5e:	4bb6      	ldr	r3, [pc, #728]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a60:	789b      	ldrb	r3, [r3, #2]
    7a62:	2280      	movs	r2, #128	; 0x80
    7a64:	4252      	negs	r2, r2
    7a66:	4313      	orrs	r3, r2
    7a68:	b2da      	uxtb	r2, r3
    7a6a:	4bb3      	ldr	r3, [pc, #716]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a6c:	709a      	strb	r2, [r3, #2]
			}
			brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7a6e:	4bb2      	ldr	r3, [pc, #712]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a70:	791b      	ldrb	r3, [r3, #4]
    7a72:	2210      	movs	r2, #16
    7a74:	4393      	bics	r3, r2
    7a76:	b2da      	uxtb	r2, r3
    7a78:	4baf      	ldr	r3, [pc, #700]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a7a:	711a      	strb	r2, [r3, #4]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    7a7c:	4bae      	ldr	r3, [pc, #696]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7a7e:	791b      	ldrb	r3, [r3, #4]
    7a80:	1c1a      	adds	r2, r3, #0
    7a82:	2308      	movs	r3, #8
    7a84:	4013      	ands	r3, r2
    7a86:	d10c      	bne.n	7aa2 <BrakeBoardStateMachineTask+0xbae>
			{
				if (poweredUp != 0)
    7a88:	4bb0      	ldr	r3, [pc, #704]	; (7d4c <BrakeBoardStateMachineTask+0xe58>)
    7a8a:	781b      	ldrb	r3, [r3, #0]
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d002      	beq.n	7a96 <BrakeBoardStateMachineTask+0xba2>
				{
					brakeState = BRAKESTATE_RESET;
    7a90:	4bab      	ldr	r3, [pc, #684]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7a92:	2200      	movs	r2, #0
    7a94:	701a      	strb	r2, [r3, #0]
				}
				done = 1;
    7a96:	1c3b      	adds	r3, r7, #0
    7a98:	330e      	adds	r3, #14
    7a9a:	2201      	movs	r2, #1
    7a9c:	701a      	strb	r2, [r3, #0]
			}			
			break;
    7a9e:	f001 f8c9 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7aa2:	f001 f8c7 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}	
		case BRAKESTATE_ERROR_VOLTAGE_ACTIVE:
		{
			done = 0;
    7aa6:	1c3b      	adds	r3, r7, #0
    7aa8:	330e      	adds	r3, #14
    7aaa:	2200      	movs	r2, #0
    7aac:	701a      	strb	r2, [r3, #0]
			//V00_60 - recover after voltage comes back
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    7aae:	4ba2      	ldr	r3, [pc, #648]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7ab0:	791b      	ldrb	r3, [r3, #4]
    7ab2:	1c1a      	adds	r2, r3, #0
    7ab4:	2308      	movs	r3, #8
    7ab6:	4013      	ands	r3, r2
    7ab8:	d106      	bne.n	7ac8 <BrakeBoardStateMachineTask+0xbd4>
			{
				brakeState = BRAKESTATE_ACTIVE;
    7aba:	4ba1      	ldr	r3, [pc, #644]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7abc:	2209      	movs	r2, #9
    7abe:	701a      	strb	r2, [r3, #0]
				done = 1;
    7ac0:	1c3b      	adds	r3, r7, #0
    7ac2:	330e      	adds	r3, #14
    7ac4:	2201      	movs	r2, #1
    7ac6:	701a      	strb	r2, [r3, #0]
			}
			if (done == 0)
    7ac8:	1c3b      	adds	r3, r7, #0
    7aca:	330e      	adds	r3, #14
    7acc:	781b      	ldrb	r3, [r3, #0]
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d153      	bne.n	7b7a <BrakeBoardStateMachineTask+0xc86>
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    7ad2:	4b9f      	ldr	r3, [pc, #636]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7ad4:	881b      	ldrh	r3, [r3, #0]
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d008      	beq.n	7aec <BrakeBoardStateMachineTask+0xbf8>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7ada:	4b9d      	ldr	r3, [pc, #628]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7adc:	881b      	ldrh	r3, [r3, #0]
				done = 1;
			}
			if (done == 0)
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    7ade:	b21b      	sxth	r3, r3
    7ae0:	2b01      	cmp	r3, #1
    7ae2:	d10a      	bne.n	7afa <BrakeBoardStateMachineTask+0xc06>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7ae4:	4b9b      	ldr	r3, [pc, #620]	; (7d54 <BrakeBoardStateMachineTask+0xe60>)
    7ae6:	881b      	ldrh	r3, [r3, #0]
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d106      	bne.n	7afa <BrakeBoardStateMachineTask+0xc06>
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7aec:	4b92      	ldr	r3, [pc, #584]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7aee:	791b      	ldrb	r3, [r3, #4]
    7af0:	2202      	movs	r2, #2
    7af2:	4393      	bics	r3, r2
    7af4:	b2da      	uxtb	r2, r3
    7af6:	4b90      	ldr	r3, [pc, #576]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7af8:	711a      	strb	r2, [r3, #4]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7afa:	4b96      	ldr	r3, [pc, #600]	; (7d54 <BrakeBoardStateMachineTask+0xe60>)
    7afc:	881b      	ldrh	r3, [r3, #0]
    7afe:	2b00      	cmp	r3, #0
    7b00:	d00a      	beq.n	7b18 <BrakeBoardStateMachineTask+0xc24>
    7b02:	4b93      	ldr	r3, [pc, #588]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7b04:	881b      	ldrh	r3, [r3, #0]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d006      	beq.n	7b18 <BrakeBoardStateMachineTask+0xc24>
				(breakawayHoldTimer ==0))
    7b0a:	4b93      	ldr	r3, [pc, #588]	; (7d58 <BrakeBoardStateMachineTask+0xe64>)
    7b0c:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayRing_pressed == 0) ||
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d102      	bne.n	7b18 <BrakeBoardStateMachineTask+0xc24>
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
    7b12:	4b91      	ldr	r3, [pc, #580]	; (7d58 <BrakeBoardStateMachineTask+0xe64>)
    7b14:	2201      	movs	r2, #1
    7b16:	801a      	strh	r2, [r3, #0]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7b18:	4b8e      	ldr	r3, [pc, #568]	; (7d54 <BrakeBoardStateMachineTask+0xe60>)
    7b1a:	881b      	ldrh	r3, [r3, #0]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	d02c      	beq.n	7b7a <BrakeBoardStateMachineTask+0xc86>
    7b20:	4b8b      	ldr	r3, [pc, #556]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7b22:	881b      	ldrh	r3, [r3, #0]
    7b24:	2b00      	cmp	r3, #0
    7b26:	d028      	beq.n	7b7a <BrakeBoardStateMachineTask+0xc86>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7b28:	4b8b      	ldr	r3, [pc, #556]	; (7d58 <BrakeBoardStateMachineTask+0xe64>)
    7b2a:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7b2c:	2b13      	cmp	r3, #19
    7b2e:	d924      	bls.n	7b7a <BrakeBoardStateMachineTask+0xc86>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7b30:	4b81      	ldr	r3, [pc, #516]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7b32:	791b      	ldrb	r3, [r3, #4]
    7b34:	1c1a      	adds	r2, r3, #0
    7b36:	2302      	movs	r3, #2
    7b38:	4013      	ands	r3, r2
    7b3a:	d11e      	bne.n	7b7a <BrakeBoardStateMachineTask+0xc86>
				{
					done = 1;
    7b3c:	1c3b      	adds	r3, r7, #0
    7b3e:	330e      	adds	r3, #14
    7b40:	2201      	movs	r2, #1
    7b42:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    7b44:	4b7c      	ldr	r3, [pc, #496]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7b46:	791b      	ldrb	r3, [r3, #4]
    7b48:	2202      	movs	r2, #2
    7b4a:	4313      	orrs	r3, r2
    7b4c:	b2da      	uxtb	r2, r3
    7b4e:	4b7a      	ldr	r3, [pc, #488]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7b50:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    7b52:	4b7b      	ldr	r3, [pc, #492]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7b54:	2211      	movs	r2, #17
    7b56:	701a      	strb	r2, [r3, #0]
					MotorCW();
    7b58:	4b80      	ldr	r3, [pc, #512]	; (7d5c <BrakeBoardStateMachineTask+0xe68>)
    7b5a:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7b5c:	4b80      	ldr	r3, [pc, #512]	; (7d60 <BrakeBoardStateMachineTask+0xe6c>)
    7b5e:	2264      	movs	r2, #100	; 0x64
    7b60:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7b62:	4b74      	ldr	r3, [pc, #464]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7b64:	781b      	ldrb	r3, [r3, #0]
    7b66:	2202      	movs	r2, #2
    7b68:	4393      	bics	r3, r2
    7b6a:	b2da      	uxtb	r2, r3
    7b6c:	4b71      	ldr	r3, [pc, #452]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7b6e:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    7b70:	4b7c      	ldr	r3, [pc, #496]	; (7d64 <BrakeBoardStateMachineTask+0xe70>)
    7b72:	2200      	movs	r2, #0
    7b74:	701a      	strb	r2, [r3, #0]
				}			
			}
			break;
    7b76:	f001 f85d 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7b7a:	f001 f85b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}	
		case BRAKESTATE_SETUPACTIVE_END:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7b7e:	4b6d      	ldr	r3, [pc, #436]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	1c1a      	adds	r2, r3, #0
    7b84:	2302      	movs	r3, #2
    7b86:	4013      	ands	r3, r2
    7b88:	d107      	bne.n	7b9a <BrakeBoardStateMachineTask+0xca6>
			(hlimitState == 0)||(homeLimit== HOME_IN))
    7b8a:	4b77      	ldr	r3, [pc, #476]	; (7d68 <BrakeBoardStateMachineTask+0xe74>)
    7b8c:	781b      	ldrb	r3, [r3, #0]
			}
			break;
		}	
		case BRAKESTATE_SETUPACTIVE_END:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d003      	beq.n	7b9a <BrakeBoardStateMachineTask+0xca6>
			(hlimitState == 0)||(homeLimit== HOME_IN))
    7b92:	4b76      	ldr	r3, [pc, #472]	; (7d6c <BrakeBoardStateMachineTask+0xe78>)
    7b94:	781b      	ldrb	r3, [r3, #0]
    7b96:	2b00      	cmp	r3, #0
    7b98:	d111      	bne.n	7bbe <BrakeBoardStateMachineTask+0xcca>
			{
				brakeSupTime = 10;
    7b9a:	4b71      	ldr	r3, [pc, #452]	; (7d60 <BrakeBoardStateMachineTask+0xe6c>)
    7b9c:	220a      	movs	r2, #10
    7b9e:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7ba0:	4b64      	ldr	r3, [pc, #400]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7ba2:	781b      	ldrb	r3, [r3, #0]
    7ba4:	2202      	movs	r2, #2
    7ba6:	4393      	bics	r3, r2
    7ba8:	b2da      	uxtb	r2, r3
    7baa:	4b62      	ldr	r3, [pc, #392]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7bac:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    7bae:	2001      	movs	r0, #1
    7bb0:	4b62      	ldr	r3, [pc, #392]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7bb2:	4798      	blx	r3
				brakeState = BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    7bb4:	4b62      	ldr	r3, [pc, #392]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7bb6:	2222      	movs	r2, #34	; 0x22
    7bb8:	701a      	strb	r2, [r3, #0]
			}
			break;
    7bba:	f001 f83b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7bbe:	f001 f839 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
		case BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP:
		{
			itemp3 = LoadCell(brakeState);
    7bc2:	4b5f      	ldr	r3, [pc, #380]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	1dbc      	adds	r4, r7, #6
    7bc8:	1c18      	adds	r0, r3, #0
    7bca:	4b69      	ldr	r3, [pc, #420]	; (7d70 <BrakeBoardStateMachineTask+0xe7c>)
    7bcc:	4798      	blx	r3
    7bce:	1c03      	adds	r3, r0, #0
    7bd0:	8023      	strh	r3, [r4, #0]
			if (itemp3>0x60)								
    7bd2:	1dbb      	adds	r3, r7, #6
    7bd4:	881b      	ldrh	r3, [r3, #0]
    7bd6:	2b60      	cmp	r3, #96	; 0x60
    7bd8:	d904      	bls.n	7be4 <BrakeBoardStateMachineTask+0xcf0>
			{
				brakeState = BRAKESTATE_ERROR;		
    7bda:	4b59      	ldr	r3, [pc, #356]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7bdc:	2208      	movs	r2, #8
    7bde:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 10;		
					}
				}										 
				brakeChange &= ~BRAKECHANGE_SUPTIME; 			
			}		
			break;
    7be0:	f001 f828 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
				brakeState = BRAKESTATE_ERROR;		
			}
			else
			{
				
				if ((brakeChange & BRAKECHANGE_SUPTIME)!=0)
    7be4:	4b53      	ldr	r3, [pc, #332]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	1c1a      	adds	r2, r3, #0
    7bea:	2302      	movs	r3, #2
    7bec:	4013      	ands	r3, r2
    7bee:	d012      	beq.n	7c16 <BrakeBoardStateMachineTask+0xd22>
				{			
					MotorOff(1);		
    7bf0:	2001      	movs	r0, #1
    7bf2:	4b52      	ldr	r3, [pc, #328]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7bf4:	4798      	blx	r3
					if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7bf6:	4b50      	ldr	r3, [pc, #320]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7bf8:	791b      	ldrb	r3, [r3, #4]
    7bfa:	1c1a      	adds	r2, r3, #0
    7bfc:	2308      	movs	r3, #8
    7bfe:	4013      	ands	r3, r2
    7c00:	d003      	beq.n	7c0a <BrakeBoardStateMachineTask+0xd16>
					{
						brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7c02:	4b4f      	ldr	r3, [pc, #316]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c04:	2219      	movs	r2, #25
    7c06:	701a      	strb	r2, [r3, #0]
    7c08:	e005      	b.n	7c16 <BrakeBoardStateMachineTask+0xd22>
					}		
					else
					{
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;				
    7c0a:	4b4d      	ldr	r3, [pc, #308]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c0c:	220b      	movs	r2, #11
    7c0e:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 10;		
    7c10:	4b53      	ldr	r3, [pc, #332]	; (7d60 <BrakeBoardStateMachineTask+0xe6c>)
    7c12:	220a      	movs	r2, #10
    7c14:	801a      	strh	r2, [r3, #0]
					}
				}										 
				brakeChange &= ~BRAKECHANGE_SUPTIME; 			
    7c16:	4b47      	ldr	r3, [pc, #284]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	2202      	movs	r2, #2
    7c1c:	4393      	bics	r3, r2
    7c1e:	b2da      	uxtb	r2, r3
    7c20:	4b44      	ldr	r3, [pc, #272]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7c22:	701a      	strb	r2, [r3, #0]
			}		
			break;
    7c24:	f001 f806 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
//-----------------------------------------		
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{	
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7c28:	4b43      	ldr	r3, [pc, #268]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7c2a:	791b      	ldrb	r3, [r3, #4]
    7c2c:	1c1a      	adds	r2, r3, #0
    7c2e:	2308      	movs	r3, #8
    7c30:	4013      	ands	r3, r2
    7c32:	d003      	beq.n	7c3c <BrakeBoardStateMachineTask+0xd48>
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7c34:	4b42      	ldr	r3, [pc, #264]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c36:	2219      	movs	r2, #25
    7c38:	701a      	strb	r2, [r3, #0]
    7c3a:	e079      	b.n	7d30 <BrakeBoardStateMachineTask+0xe3c>
			}		
			else
			{		
				if ((brakeStatus.BrakeState & BRAKESTATE_NOTSETUP)!= 0)
    7c3c:	4b3e      	ldr	r3, [pc, #248]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7c3e:	791b      	ldrb	r3, [r3, #4]
    7c40:	1c1a      	adds	r2, r3, #0
    7c42:	2304      	movs	r3, #4
    7c44:	4013      	ands	r3, r2
    7c46:	d03d      	beq.n	7cc4 <BrakeBoardStateMachineTask+0xdd0>
				{
					if ((brakeChange & BRAKECHANGE_SUPTIME)!=0)
    7c48:	4b3a      	ldr	r3, [pc, #232]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7c4a:	781b      	ldrb	r3, [r3, #0]
    7c4c:	1c1a      	adds	r2, r3, #0
    7c4e:	2302      	movs	r3, #2
    7c50:	4013      	ands	r3, r2
    7c52:	d06d      	beq.n	7d30 <BrakeBoardStateMachineTask+0xe3c>
					{
	//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
						itemp3 = LoadCell(brakeState);
    7c54:	4b3a      	ldr	r3, [pc, #232]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	1dbc      	adds	r4, r7, #6
    7c5a:	1c18      	adds	r0, r3, #0
    7c5c:	4b44      	ldr	r3, [pc, #272]	; (7d70 <BrakeBoardStateMachineTask+0xe7c>)
    7c5e:	4798      	blx	r3
    7c60:	1c03      	adds	r3, r0, #0
    7c62:	8023      	strh	r3, [r4, #0]
						if (itemp3>0x60)								
    7c64:	1dbb      	adds	r3, r7, #6
    7c66:	881b      	ldrh	r3, [r3, #0]
    7c68:	2b60      	cmp	r3, #96	; 0x60
    7c6a:	d903      	bls.n	7c74 <BrakeBoardStateMachineTask+0xd80>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;								
    7c6c:	4b34      	ldr	r3, [pc, #208]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c6e:	2207      	movs	r2, #7
    7c70:	701a      	strb	r2, [r3, #0]
    7c72:	e01e      	b.n	7cb2 <BrakeBoardStateMachineTask+0xdbe>
						}
						else
						{
							MotorNeedNewBaseline();
    7c74:	4b3f      	ldr	r3, [pc, #252]	; (7d74 <BrakeBoardStateMachineTask+0xe80>)
    7c76:	4798      	blx	r3
							brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    7c78:	4b2f      	ldr	r3, [pc, #188]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7c7a:	791b      	ldrb	r3, [r3, #4]
    7c7c:	2204      	movs	r2, #4
    7c7e:	4393      	bics	r3, r2
    7c80:	b2da      	uxtb	r2, r3
    7c82:	4b2d      	ldr	r3, [pc, #180]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7c84:	711a      	strb	r2, [r3, #4]
							brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7c86:	4b2e      	ldr	r3, [pc, #184]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7c88:	220b      	movs	r2, #11
    7c8a:	701a      	strb	r2, [r3, #0]
							MotorOff(1);		
    7c8c:	2001      	movs	r0, #1
    7c8e:	4b2b      	ldr	r3, [pc, #172]	; (7d3c <BrakeBoardStateMachineTask+0xe48>)
    7c90:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME_SHORT;	
    7c92:	4b33      	ldr	r3, [pc, #204]	; (7d60 <BrakeBoardStateMachineTask+0xe6c>)
    7c94:	2214      	movs	r2, #20
    7c96:	801a      	strh	r2, [r3, #0]
							//------------v1.05 boc
							brakeInitiationCount = 0;
    7c98:	4b37      	ldr	r3, [pc, #220]	; (7d78 <BrakeBoardStateMachineTask+0xe84>)
    7c9a:	2200      	movs	r2, #0
    7c9c:	701a      	strb	r2, [r3, #0]
							brakeCycleCount = 0;
    7c9e:	4b37      	ldr	r3, [pc, #220]	; (7d7c <BrakeBoardStateMachineTask+0xe88>)
    7ca0:	2200      	movs	r2, #0
    7ca2:	701a      	strb	r2, [r3, #0]
							if (table0.Item.Hybrid == TRUE)
    7ca4:	4b36      	ldr	r3, [pc, #216]	; (7d80 <BrakeBoardStateMachineTask+0xe8c>)
    7ca6:	7e5b      	ldrb	r3, [r3, #25]
    7ca8:	2b01      	cmp	r3, #1
    7caa:	d102      	bne.n	7cb2 <BrakeBoardStateMachineTask+0xdbe>
							{
								brakeInitiationCount = 10;
    7cac:	4b32      	ldr	r3, [pc, #200]	; (7d78 <BrakeBoardStateMachineTask+0xe84>)
    7cae:	220a      	movs	r2, #10
    7cb0:	701a      	strb	r2, [r3, #0]
							}
							//--------------v1.05 eoc																				
						}										 
						brakeChange &= ~BRAKECHANGE_SUPTIME; 
    7cb2:	4b20      	ldr	r3, [pc, #128]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	2202      	movs	r2, #2
    7cb8:	4393      	bics	r3, r2
    7cba:	b2da      	uxtb	r2, r3
    7cbc:	4b1d      	ldr	r3, [pc, #116]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7cbe:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE; 
					}
					encoderCountBackTotal = 0;
				}
			}
			break;
    7cc0:	f000 ffb8 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
						brakeChange &= ~BRAKECHANGE_SUPTIME; 
					}			
				}
				else
				{
					gPrime = 0; 
    7cc4:	4b2f      	ldr	r3, [pc, #188]	; (7d84 <BrakeBoardStateMachineTask+0xe90>)
    7cc6:	2200      	movs	r2, #0
    7cc8:	801a      	strh	r2, [r3, #0]
					if ((breakawayRing_pressed == 0) || 
    7cca:	4b21      	ldr	r3, [pc, #132]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7ccc:	881b      	ldrh	r3, [r3, #0]
    7cce:	2b00      	cmp	r3, #0
    7cd0:	d008      	beq.n	7ce4 <BrakeBoardStateMachineTask+0xdf0>
					   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7cd2:	4b1f      	ldr	r3, [pc, #124]	; (7d50 <BrakeBoardStateMachineTask+0xe5c>)
    7cd4:	881b      	ldrh	r3, [r3, #0]
					}			
				}
				else
				{
					gPrime = 0; 
					if ((breakawayRing_pressed == 0) || 
    7cd6:	b21b      	sxth	r3, r3
    7cd8:	2b01      	cmp	r3, #1
    7cda:	d10a      	bne.n	7cf2 <BrakeBoardStateMachineTask+0xdfe>
					   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7cdc:	4b1d      	ldr	r3, [pc, #116]	; (7d54 <BrakeBoardStateMachineTask+0xe60>)
    7cde:	881b      	ldrh	r3, [r3, #0]
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d106      	bne.n	7cf2 <BrakeBoardStateMachineTask+0xdfe>
					{
						brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7ce4:	4b14      	ldr	r3, [pc, #80]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7ce6:	791b      	ldrb	r3, [r3, #4]
    7ce8:	2202      	movs	r2, #2
    7cea:	4393      	bics	r3, r2
    7cec:	b2da      	uxtb	r2, r3
    7cee:	4b12      	ldr	r3, [pc, #72]	; (7d38 <BrakeBoardStateMachineTask+0xe44>)
    7cf0:	711a      	strb	r2, [r3, #4]
					}						
					thresholdmet = 0; 	
    7cf2:	4b1c      	ldr	r3, [pc, #112]	; (7d64 <BrakeBoardStateMachineTask+0xe70>)
    7cf4:	2200      	movs	r2, #0
    7cf6:	701a      	strb	r2, [r3, #0]
					tempdiffx = MotorGetAcc(FALSE);
    7cf8:	2000      	movs	r0, #0
    7cfa:	4b23      	ldr	r3, [pc, #140]	; (7d88 <BrakeBoardStateMachineTask+0xe94>)
    7cfc:	4798      	blx	r3
    7cfe:	1c03      	adds	r3, r0, #0
    7d00:	1c1a      	adds	r2, r3, #0
    7d02:	4b22      	ldr	r3, [pc, #136]	; (7d8c <BrakeBoardStateMachineTask+0xe98>)
    7d04:	801a      	strh	r2, [r3, #0]
					if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7d06:	4b0b      	ldr	r3, [pc, #44]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	1c1a      	adds	r2, r3, #0
    7d0c:	2302      	movs	r3, #2
    7d0e:	4013      	ands	r3, r2
    7d10:	d009      	beq.n	7d26 <BrakeBoardStateMachineTask+0xe32>
					{
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7d12:	4b08      	ldr	r3, [pc, #32]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	2202      	movs	r2, #2
    7d18:	4393      	bics	r3, r2
    7d1a:	b2da      	uxtb	r2, r3
    7d1c:	4b05      	ldr	r3, [pc, #20]	; (7d34 <BrakeBoardStateMachineTask+0xe40>)
    7d1e:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE; 
    7d20:	4b07      	ldr	r3, [pc, #28]	; (7d40 <BrakeBoardStateMachineTask+0xe4c>)
    7d22:	2209      	movs	r2, #9
    7d24:	701a      	strb	r2, [r3, #0]
					}
					encoderCountBackTotal = 0;
    7d26:	4b1a      	ldr	r3, [pc, #104]	; (7d90 <BrakeBoardStateMachineTask+0xe9c>)
    7d28:	2200      	movs	r2, #0
    7d2a:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
    7d2c:	f000 ff82 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7d30:	f000 ff80 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    7d34:	20002eee 	.word	0x20002eee
    7d38:	20003694 	.word	0x20003694
    7d3c:	00009b75 	.word	0x00009b75
    7d40:	20002ebf 	.word	0x20002ebf
    7d44:	00008c95 	.word	0x00008c95
    7d48:	200004b1 	.word	0x200004b1
    7d4c:	200036b5 	.word	0x200036b5
    7d50:	2000306a 	.word	0x2000306a
    7d54:	20003070 	.word	0x20003070
    7d58:	20002ef2 	.word	0x20002ef2
    7d5c:	00009d45 	.word	0x00009d45
    7d60:	200036c4 	.word	0x200036c4
    7d64:	200004b2 	.word	0x200004b2
    7d68:	20003068 	.word	0x20003068
    7d6c:	20000001 	.word	0x20000001
    7d70:	00006851 	.word	0x00006851
    7d74:	00008f41 	.word	0x00008f41
    7d78:	200004b6 	.word	0x200004b6
    7d7c:	200004b7 	.word	0x200004b7
    7d80:	20002fb8 	.word	0x20002fb8
    7d84:	20002ee6 	.word	0x20002ee6
    7d88:	0000914d 	.word	0x0000914d
    7d8c:	20002ec4 	.word	0x20002ec4
    7d90:	20002ede 	.word	0x20002ede
		}
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_ACTIVELOAD:
		{
			done = 0; 
    7d94:	1c3b      	adds	r3, r7, #0
    7d96:	330e      	adds	r3, #14
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
			//------------------ v1.23 
			// check for pedal press. 
//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
			itemp3 = LoadCell(brakeState);
    7d9c:	4baa      	ldr	r3, [pc, #680]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7d9e:	781b      	ldrb	r3, [r3, #0]
    7da0:	1dbc      	adds	r4, r7, #6
    7da2:	1c18      	adds	r0, r3, #0
    7da4:	4ba9      	ldr	r3, [pc, #676]	; (804c <BrakeBoardStateMachineTask+0x1158>)
    7da6:	4798      	blx	r3
    7da8:	1c03      	adds	r3, r0, #0
    7daa:	8023      	strh	r3, [r4, #0]
//V01_29			if ((itemp3>0x60)&&(brakeState == BRAKESTATE_ACTIVE))		
			if (itemp3>0x60)										
    7dac:	1dbb      	adds	r3, r7, #6
    7dae:	881b      	ldrh	r3, [r3, #0]
    7db0:	2b60      	cmp	r3, #96	; 0x60
    7db2:	d924      	bls.n	7dfe <BrakeBoardStateMachineTask+0xf0a>
			{
				
				MotorOff(1);	
    7db4:	2001      	movs	r0, #1
    7db6:	4ba6      	ldr	r3, [pc, #664]	; (8050 <BrakeBoardStateMachineTask+0x115c>)
    7db8:	4798      	blx	r3
				brakeSupTime = 10;  //2 seconds to EXTEND
    7dba:	4ba6      	ldr	r3, [pc, #664]	; (8054 <BrakeBoardStateMachineTask+0x1160>)
    7dbc:	220a      	movs	r2, #10
    7dbe:	801a      	strh	r2, [r3, #0]
				if (brakeState == BRAKESTATE_ACTIVE)  //V01_29
    7dc0:	4ba1      	ldr	r3, [pc, #644]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	2b09      	cmp	r3, #9
    7dc6:	d10a      	bne.n	7dde <BrakeBoardStateMachineTask+0xeea>
				{
					MotorCCW();
    7dc8:	4ba3      	ldr	r3, [pc, #652]	; (8058 <BrakeBoardStateMachineTask+0x1164>)
    7dca:	4798      	blx	r3
					brakeSupTime = 20;  //2 seconds to EXTEND
    7dcc:	4ba1      	ldr	r3, [pc, #644]	; (8054 <BrakeBoardStateMachineTask+0x1160>)
    7dce:	2214      	movs	r2, #20
    7dd0:	801a      	strh	r2, [r3, #0]
					//----- boc 1_23 ---- control by encode counts 
					encoderCountBack = ENCODER_RETRACT_ACTIVECOUNT; 
    7dd2:	4ba2      	ldr	r3, [pc, #648]	; (805c <BrakeBoardStateMachineTask+0x1168>)
    7dd4:	224b      	movs	r2, #75	; 0x4b
    7dd6:	801a      	strh	r2, [r3, #0]
					action = RETRACTING_BY_ENCODER; 
    7dd8:	4ba1      	ldr	r3, [pc, #644]	; (8060 <BrakeBoardStateMachineTask+0x116c>)
    7dda:	2203      	movs	r2, #3
    7ddc:	701a      	strb	r2, [r3, #0]
				}
				//----- eoc 1_23 
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7dde:	4ba1      	ldr	r3, [pc, #644]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7de0:	781b      	ldrb	r3, [r3, #0]
    7de2:	2202      	movs	r2, #2
    7de4:	4393      	bics	r3, r2
    7de6:	b2da      	uxtb	r2, r3
    7de8:	4b9e      	ldr	r3, [pc, #632]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7dea:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_ERRORLOAD;
    7dec:	4b96      	ldr	r3, [pc, #600]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7dee:	221f      	movs	r2, #31
    7df0:	701a      	strb	r2, [r3, #0]
				done = 1; 									
    7df2:	1c3b      	adds	r3, r7, #0
    7df4:	330e      	adds	r3, #14
    7df6:	2201      	movs	r2, #1
    7df8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				ActiveLoadState(brakeState);
			}
			break;
    7dfa:	f000 ff1b 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
				brakeState = BRAKESTATE_ERRORLOAD;
				done = 1; 									
			}
			else
			{
				ActiveLoadState(brakeState);
    7dfe:	4b92      	ldr	r3, [pc, #584]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	1c18      	adds	r0, r3, #0
    7e04:	4b98      	ldr	r3, [pc, #608]	; (8068 <BrakeBoardStateMachineTask+0x1174>)
    7e06:	4798      	blx	r3
			}
			break;
    7e08:	f000 ff14 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
//------------------------- 
// ACTIVE EXTEND STATE 
//-------------------------		
		case BRAKESTATE_ACTIVE_EXTEND:
		{
			done = 0; 
    7e0c:	1c3b      	adds	r3, r7, #0
    7e0e:	330e      	adds	r3, #14
    7e10:	2200      	movs	r2, #0
    7e12:	701a      	strb	r2, [r3, #0]
			// you are braking .... so 
			// 1. look for 500 counts on current to stop braking. 
			// 2. when at 1/10 g then retract 
			// 3. also maximum time of braking is 15 second. 
			// 
 			if ((flimitState == 0)&&(done == 0))
    7e14:	4b95      	ldr	r3, [pc, #596]	; (806c <BrakeBoardStateMachineTask+0x1178>)
    7e16:	781b      	ldrb	r3, [r3, #0]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d132      	bne.n	7e82 <BrakeBoardStateMachineTask+0xf8e>
    7e1c:	1c3b      	adds	r3, r7, #0
    7e1e:	330e      	adds	r3, #14
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d12d      	bne.n	7e82 <BrakeBoardStateMachineTask+0xf8e>
			{
				done = 1; 
    7e26:	1c3b      	adds	r3, r7, #0
    7e28:	330e      	adds	r3, #14
    7e2a:	2201      	movs	r2, #1
    7e2c:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    7e2e:	2001      	movs	r0, #1
    7e30:	4b87      	ldr	r3, [pc, #540]	; (8050 <BrakeBoardStateMachineTask+0x115c>)
    7e32:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    7e34:	2001      	movs	r0, #1
    7e36:	4b8e      	ldr	r3, [pc, #568]	; (8070 <BrakeBoardStateMachineTask+0x117c>)
    7e38:	4798      	blx	r3
    7e3a:	1c03      	adds	r3, r0, #0
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d103      	bne.n	7e48 <BrakeBoardStateMachineTask+0xf54>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    7e40:	4b81      	ldr	r3, [pc, #516]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7e42:	2207      	movs	r2, #7
    7e44:	701a      	strb	r2, [r3, #0]
    7e46:	e01c      	b.n	7e82 <BrakeBoardStateMachineTask+0xf8e>
				}
				else
				{
					thresholdmet = 0; 
    7e48:	4b8a      	ldr	r3, [pc, #552]	; (8074 <BrakeBoardStateMachineTask+0x1180>)
    7e4a:	2200      	movs	r2, #0
    7e4c:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ACTIVE_HOLD; 
    7e4e:	4b7e      	ldr	r3, [pc, #504]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7e50:	220d      	movs	r2, #13
    7e52:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_DITHER;
    7e54:	4b83      	ldr	r3, [pc, #524]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7e56:	781b      	ldrb	r3, [r3, #0]
    7e58:	2210      	movs	r2, #16
    7e5a:	4393      	bics	r3, r2
    7e5c:	b2da      	uxtb	r2, r3
    7e5e:	4b81      	ldr	r3, [pc, #516]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7e60:	701a      	strb	r2, [r3, #0]
					ditherTimer = 0;  
    7e62:	4b85      	ldr	r3, [pc, #532]	; (8078 <BrakeBoardStateMachineTask+0x1184>)
    7e64:	2200      	movs	r2, #0
    7e66:	801a      	strh	r2, [r3, #0]
					if (encoderFlip != 0)
    7e68:	4b84      	ldr	r3, [pc, #528]	; (807c <BrakeBoardStateMachineTask+0x1188>)
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	2b00      	cmp	r3, #0
    7e6e:	d004      	beq.n	7e7a <BrakeBoardStateMachineTask+0xf86>
					{
						encoderFillOffset = MAX_BUILDTABLE;
    7e70:	4b83      	ldr	r3, [pc, #524]	; (8080 <BrakeBoardStateMachineTask+0x118c>)
    7e72:	2280      	movs	r2, #128	; 0x80
    7e74:	00d2      	lsls	r2, r2, #3
    7e76:	801a      	strh	r2, [r3, #0]
    7e78:	e003      	b.n	7e82 <BrakeBoardStateMachineTask+0xf8e>
					}
					else
					{
						encoderFillOffset = encoderTableOffset; 
    7e7a:	4b82      	ldr	r3, [pc, #520]	; (8084 <BrakeBoardStateMachineTask+0x1190>)
    7e7c:	881a      	ldrh	r2, [r3, #0]
    7e7e:	4b80      	ldr	r3, [pc, #512]	; (8080 <BrakeBoardStateMachineTask+0x118c>)
    7e80:	801a      	strh	r2, [r3, #0]
					}
				}
				
			}	
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    7e82:	4b78      	ldr	r3, [pc, #480]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7e84:	781b      	ldrb	r3, [r3, #0]
    7e86:	1c1a      	adds	r2, r3, #0
    7e88:	2302      	movs	r3, #2
    7e8a:	4013      	ands	r3, r2
    7e8c:	d02e      	beq.n	7eec <BrakeBoardStateMachineTask+0xff8>
    7e8e:	1c3b      	adds	r3, r7, #0
    7e90:	330e      	adds	r3, #14
    7e92:	781b      	ldrb	r3, [r3, #0]
    7e94:	2b00      	cmp	r3, #0
    7e96:	d129      	bne.n	7eec <BrakeBoardStateMachineTask+0xff8>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7e98:	4b72      	ldr	r3, [pc, #456]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7e9a:	781b      	ldrb	r3, [r3, #0]
    7e9c:	2202      	movs	r2, #2
    7e9e:	4393      	bics	r3, r2
    7ea0:	b2da      	uxtb	r2, r3
    7ea2:	4b70      	ldr	r3, [pc, #448]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7ea4:	701a      	strb	r2, [r3, #0]
				MotorOff(1);	
    7ea6:	2001      	movs	r0, #1
    7ea8:	4b69      	ldr	r3, [pc, #420]	; (8050 <BrakeBoardStateMachineTask+0x115c>)
    7eaa:	4798      	blx	r3
				done = 1; 
    7eac:	1c3b      	adds	r3, r7, #0
    7eae:	330e      	adds	r3, #14
    7eb0:	2201      	movs	r2, #1
    7eb2:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7eb4:	2002      	movs	r0, #2
    7eb6:	4b6e      	ldr	r3, [pc, #440]	; (8070 <BrakeBoardStateMachineTask+0x117c>)
    7eb8:	4798      	blx	r3
    7eba:	1c03      	adds	r3, r0, #0
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d106      	bne.n	7ece <BrakeBoardStateMachineTask+0xfda>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    7ec0:	4b61      	ldr	r3, [pc, #388]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7ec2:	2207      	movs	r2, #7
    7ec4:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    7ec6:	4b63      	ldr	r3, [pc, #396]	; (8054 <BrakeBoardStateMachineTask+0x1160>)
    7ec8:	2200      	movs	r2, #0
    7eca:	801a      	strh	r2, [r3, #0]
    7ecc:	e007      	b.n	7ede <BrakeBoardStateMachineTask+0xfea>
				}
				else
				{
 					MotorCCW();
    7ece:	4b62      	ldr	r3, [pc, #392]	; (8058 <BrakeBoardStateMachineTask+0x1164>)
    7ed0:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7ed2:	4b60      	ldr	r3, [pc, #384]	; (8054 <BrakeBoardStateMachineTask+0x1160>)
    7ed4:	2264      	movs	r2, #100	; 0x64
    7ed6:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    7ed8:	4b5b      	ldr	r3, [pc, #364]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7eda:	2217      	movs	r2, #23
    7edc:	701a      	strb	r2, [r3, #0]
//					MotorNeedNewBaseline();  //01_89
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7ede:	4b61      	ldr	r3, [pc, #388]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	2202      	movs	r2, #2
    7ee4:	4393      	bics	r3, r2
    7ee6:	b2da      	uxtb	r2, r3
    7ee8:	4b5e      	ldr	r3, [pc, #376]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7eea:	701a      	strb	r2, [r3, #0]
			}			
			if ((motorRunTime == 0)&&(done == 0))
    7eec:	4b66      	ldr	r3, [pc, #408]	; (8088 <BrakeBoardStateMachineTask+0x1194>)
    7eee:	881b      	ldrh	r3, [r3, #0]
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d000      	beq.n	7ef6 <BrakeBoardStateMachineTask+0x1002>
    7ef4:	e0e8      	b.n	80c8 <BrakeBoardStateMachineTask+0x11d4>
    7ef6:	1c3b      	adds	r3, r7, #0
    7ef8:	330e      	adds	r3, #14
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	2b00      	cmp	r3, #0
    7efe:	d000      	beq.n	7f02 <BrakeBoardStateMachineTask+0x100e>
    7f00:	e0e2      	b.n	80c8 <BrakeBoardStateMachineTask+0x11d4>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    7f02:	2001      	movs	r0, #1
    7f04:	4b61      	ldr	r3, [pc, #388]	; (808c <BrakeBoardStateMachineTask+0x1198>)
    7f06:	4798      	blx	r3
    7f08:	1c03      	adds	r3, r0, #0
    7f0a:	1c1a      	adds	r2, r3, #0
    7f0c:	4b60      	ldr	r3, [pc, #384]	; (8090 <BrakeBoardStateMachineTask+0x119c>)
    7f0e:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculated();
    7f10:	4b60      	ldr	r3, [pc, #384]	; (8094 <BrakeBoardStateMachineTask+0x11a0>)
    7f12:	4798      	blx	r3
    7f14:	1c03      	adds	r3, r0, #0
    7f16:	1c1a      	adds	r2, r3, #0
    7f18:	4b5f      	ldr	r3, [pc, #380]	; (8098 <BrakeBoardStateMachineTask+0x11a4>)
    7f1a:	801a      	strh	r2, [r3, #0]
				//---------------v1.05 
				if (table0.Item.Hybrid == FALSE)
    7f1c:	4b5f      	ldr	r3, [pc, #380]	; (809c <BrakeBoardStateMachineTask+0x11a8>)
    7f1e:	7e5b      	ldrb	r3, [r3, #25]
    7f20:	2b00      	cmp	r3, #0
    7f22:	d119      	bne.n	7f58 <BrakeBoardStateMachineTask+0x1064>
				{								
					if (brakeCycleCount <2)
    7f24:	4b5e      	ldr	r3, [pc, #376]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	2b01      	cmp	r3, #1
    7f2a:	d806      	bhi.n	7f3a <BrakeBoardStateMachineTask+0x1046>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    7f2c:	2002      	movs	r0, #2
    7f2e:	4b5d      	ldr	r3, [pc, #372]	; (80a4 <BrakeBoardStateMachineTask+0x11b0>)
    7f30:	4798      	blx	r3
    7f32:	1c03      	adds	r3, r0, #0
    7f34:	1c1a      	adds	r2, r3, #0
    7f36:	4b58      	ldr	r3, [pc, #352]	; (8098 <BrakeBoardStateMachineTask+0x11a4>)
    7f38:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    7f3a:	4b59      	ldr	r3, [pc, #356]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7f3c:	781b      	ldrb	r3, [r3, #0]
    7f3e:	2b02      	cmp	r3, #2
    7f40:	d10a      	bne.n	7f58 <BrakeBoardStateMachineTask+0x1064>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    7f42:	4b56      	ldr	r3, [pc, #344]	; (809c <BrakeBoardStateMachineTask+0x11a8>)
    7f44:	7d9b      	ldrb	r3, [r3, #22]
    7f46:	085b      	lsrs	r3, r3, #1
    7f48:	b2db      	uxtb	r3, r3
    7f4a:	1c18      	adds	r0, r3, #0
    7f4c:	4b55      	ldr	r3, [pc, #340]	; (80a4 <BrakeBoardStateMachineTask+0x11b0>)
    7f4e:	4798      	blx	r3
    7f50:	1c03      	adds	r3, r0, #0
    7f52:	1c1a      	adds	r2, r3, #0
    7f54:	4b50      	ldr	r3, [pc, #320]	; (8098 <BrakeBoardStateMachineTask+0x11a4>)
    7f56:	801a      	strh	r2, [r3, #0]
					}					
				}
//V01_41 boc
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    7f58:	2002      	movs	r0, #2
    7f5a:	4b4c      	ldr	r3, [pc, #304]	; (808c <BrakeBoardStateMachineTask+0x1198>)
    7f5c:	4798      	blx	r3
    7f5e:	1c03      	adds	r3, r0, #0
    7f60:	1c1a      	adds	r2, r3, #0
    7f62:	4b51      	ldr	r3, [pc, #324]	; (80a8 <BrakeBoardStateMachineTask+0x11b4>)
    7f64:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculated();
    7f66:	4b51      	ldr	r3, [pc, #324]	; (80ac <BrakeBoardStateMachineTask+0x11b8>)
    7f68:	4798      	blx	r3
    7f6a:	1c03      	adds	r3, r0, #0
    7f6c:	1c1a      	adds	r2, r3, #0
    7f6e:	4b50      	ldr	r3, [pc, #320]	; (80b0 <BrakeBoardStateMachineTask+0x11bc>)
    7f70:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    7f72:	4b4a      	ldr	r3, [pc, #296]	; (809c <BrakeBoardStateMachineTask+0x11a8>)
    7f74:	7e5b      	ldrb	r3, [r3, #25]
    7f76:	2b00      	cmp	r3, #0
    7f78:	d119      	bne.n	7fae <BrakeBoardStateMachineTask+0x10ba>
				{
					if (brakeCycleCount <2)
    7f7a:	4b49      	ldr	r3, [pc, #292]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	2b01      	cmp	r3, #1
    7f80:	d806      	bhi.n	7f90 <BrakeBoardStateMachineTask+0x109c>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(2);
    7f82:	2002      	movs	r0, #2
    7f84:	4b4b      	ldr	r3, [pc, #300]	; (80b4 <BrakeBoardStateMachineTask+0x11c0>)
    7f86:	4798      	blx	r3
    7f88:	1c03      	adds	r3, r0, #0
    7f8a:	1c1a      	adds	r2, r3, #0
    7f8c:	4b48      	ldr	r3, [pc, #288]	; (80b0 <BrakeBoardStateMachineTask+0x11bc>)
    7f8e:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    7f90:	4b43      	ldr	r3, [pc, #268]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	2b02      	cmp	r3, #2
    7f96:	d10a      	bne.n	7fae <BrakeBoardStateMachineTask+0x10ba>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    7f98:	4b40      	ldr	r3, [pc, #256]	; (809c <BrakeBoardStateMachineTask+0x11a8>)
    7f9a:	7d9b      	ldrb	r3, [r3, #22]
    7f9c:	085b      	lsrs	r3, r3, #1
    7f9e:	b2db      	uxtb	r3, r3
    7fa0:	1c18      	adds	r0, r3, #0
    7fa2:	4b44      	ldr	r3, [pc, #272]	; (80b4 <BrakeBoardStateMachineTask+0x11c0>)
    7fa4:	4798      	blx	r3
    7fa6:	1c03      	adds	r3, r0, #0
    7fa8:	1c1a      	adds	r2, r3, #0
    7faa:	4b41      	ldr	r3, [pc, #260]	; (80b0 <BrakeBoardStateMachineTask+0x11bc>)
    7fac:	801a      	strh	r2, [r3, #0]
				//--------------------v1.05
//v01_41	
#if FSR_USE			
				if (fsrRead > newFSRThreshold)
#else
				if (currentRead > newCurrentThreshold)   
    7fae:	4b38      	ldr	r3, [pc, #224]	; (8090 <BrakeBoardStateMachineTask+0x119c>)
    7fb0:	881a      	ldrh	r2, [r3, #0]
    7fb2:	4b39      	ldr	r3, [pc, #228]	; (8098 <BrakeBoardStateMachineTask+0x11a4>)
    7fb4:	881b      	ldrh	r3, [r3, #0]
    7fb6:	429a      	cmp	r2, r3
    7fb8:	d800      	bhi.n	7fbc <BrakeBoardStateMachineTask+0x10c8>
    7fba:	e085      	b.n	80c8 <BrakeBoardStateMachineTask+0x11d4>
#endif				
				{
					MotorOff(1);		
    7fbc:	2001      	movs	r0, #1
    7fbe:	4b24      	ldr	r3, [pc, #144]	; (8050 <BrakeBoardStateMachineTask+0x115c>)
    7fc0:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    7fc2:	4b37      	ldr	r3, [pc, #220]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7fc4:	781b      	ldrb	r3, [r3, #0]
    7fc6:	2b09      	cmp	r3, #9
    7fc8:	d805      	bhi.n	7fd6 <BrakeBoardStateMachineTask+0x10e2>
					{
						brakeCycleCount++;
    7fca:	4b35      	ldr	r3, [pc, #212]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7fcc:	781b      	ldrb	r3, [r3, #0]
    7fce:	3301      	adds	r3, #1
    7fd0:	b2da      	uxtb	r2, r3
    7fd2:	4b33      	ldr	r3, [pc, #204]	; (80a0 <BrakeBoardStateMachineTask+0x11ac>)
    7fd4:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7fd6:	2002      	movs	r0, #2
    7fd8:	4b25      	ldr	r3, [pc, #148]	; (8070 <BrakeBoardStateMachineTask+0x117c>)
    7fda:	4798      	blx	r3
    7fdc:	1c03      	adds	r3, r0, #0
    7fde:	2b00      	cmp	r3, #0
    7fe0:	d111      	bne.n	8006 <BrakeBoardStateMachineTask+0x1112>
					{
						done = 1; 
    7fe2:	1c3b      	adds	r3, r7, #0
    7fe4:	330e      	adds	r3, #14
    7fe6:	2201      	movs	r2, #1
    7fe8:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT;
    7fea:	4b17      	ldr	r3, [pc, #92]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    7fec:	2207      	movs	r2, #7
    7fee:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    7ff0:	4b18      	ldr	r3, [pc, #96]	; (8054 <BrakeBoardStateMachineTask+0x1160>)
    7ff2:	2200      	movs	r2, #0
    7ff4:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7ff6:	4b1b      	ldr	r3, [pc, #108]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	2202      	movs	r2, #2
    7ffc:	4393      	bics	r3, r2
    7ffe:	b2da      	uxtb	r2, r3
    8000:	4b18      	ldr	r3, [pc, #96]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    8002:	701a      	strb	r2, [r3, #0]
    8004:	e060      	b.n	80c8 <BrakeBoardStateMachineTask+0x11d4>
					}
					else
					{
						done =1; 
    8006:	1c3b      	adds	r3, r7, #0
    8008:	330e      	adds	r3, #14
    800a:	2201      	movs	r2, #1
    800c:	701a      	strb	r2, [r3, #0]
						thresholdmet = 0;
    800e:	4b19      	ldr	r3, [pc, #100]	; (8074 <BrakeBoardStateMachineTask+0x1180>)
    8010:	2200      	movs	r2, #0
    8012:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_HOLD;  		
    8014:	4b0c      	ldr	r3, [pc, #48]	; (8048 <BrakeBoardStateMachineTask+0x1154>)
    8016:	220d      	movs	r2, #13
    8018:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    801a:	4b12      	ldr	r3, [pc, #72]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    801c:	781b      	ldrb	r3, [r3, #0]
    801e:	2210      	movs	r2, #16
    8020:	4393      	bics	r3, r2
    8022:	b2da      	uxtb	r2, r3
    8024:	4b0f      	ldr	r3, [pc, #60]	; (8064 <BrakeBoardStateMachineTask+0x1170>)
    8026:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;  	
    8028:	4b13      	ldr	r3, [pc, #76]	; (8078 <BrakeBoardStateMachineTask+0x1184>)
    802a:	2200      	movs	r2, #0
    802c:	801a      	strh	r2, [r3, #0]
						holdG = instantGain; 	
    802e:	4b22      	ldr	r3, [pc, #136]	; (80b8 <BrakeBoardStateMachineTask+0x11c4>)
    8030:	881a      	ldrh	r2, [r3, #0]
    8032:	4b22      	ldr	r3, [pc, #136]	; (80bc <BrakeBoardStateMachineTask+0x11c8>)
    8034:	801a      	strh	r2, [r3, #0]
						if (encoderFlip != 0)
    8036:	4b11      	ldr	r3, [pc, #68]	; (807c <BrakeBoardStateMachineTask+0x1188>)
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	2b00      	cmp	r3, #0
    803c:	d040      	beq.n	80c0 <BrakeBoardStateMachineTask+0x11cc>
						{
							encoderFillOffset = MAX_BUILDTABLE;
    803e:	4b10      	ldr	r3, [pc, #64]	; (8080 <BrakeBoardStateMachineTask+0x118c>)
    8040:	2280      	movs	r2, #128	; 0x80
    8042:	00d2      	lsls	r2, r2, #3
    8044:	801a      	strh	r2, [r3, #0]
    8046:	e03f      	b.n	80c8 <BrakeBoardStateMachineTask+0x11d4>
    8048:	20002ebf 	.word	0x20002ebf
    804c:	00006851 	.word	0x00006851
    8050:	00009b75 	.word	0x00009b75
    8054:	200036c4 	.word	0x200036c4
    8058:	00009c89 	.word	0x00009c89
    805c:	20002ee2 	.word	0x20002ee2
    8060:	200004ae 	.word	0x200004ae
    8064:	20002eee 	.word	0x20002eee
    8068:	00008c95 	.word	0x00008c95
    806c:	20003072 	.word	0x20003072
    8070:	000069a1 	.word	0x000069a1
    8074:	200004b2 	.word	0x200004b2
    8078:	20002ed4 	.word	0x20002ed4
    807c:	200004aa 	.word	0x200004aa
    8080:	200004a6 	.word	0x200004a6
    8084:	20001e9e 	.word	0x20001e9e
    8088:	20002eb2 	.word	0x20002eb2
    808c:	0000b4b5 	.word	0x0000b4b5
    8090:	20002ea6 	.word	0x20002ea6
    8094:	0000916d 	.word	0x0000916d
    8098:	20002eaa 	.word	0x20002eaa
    809c:	20002fb8 	.word	0x20002fb8
    80a0:	200004b7 	.word	0x200004b7
    80a4:	00009545 	.word	0x00009545
    80a8:	20002eea 	.word	0x20002eea
    80ac:	000092bd 	.word	0x000092bd
    80b0:	20002eac 	.word	0x20002eac
    80b4:	000095c1 	.word	0x000095c1
    80b8:	20002ef6 	.word	0x20002ef6
    80bc:	20002ec2 	.word	0x20002ec2
						}
						else
						{
							encoderFillOffset = encoderTableOffset;
    80c0:	4bab      	ldr	r3, [pc, #684]	; (8370 <BrakeBoardStateMachineTask+0x147c>)
    80c2:	881a      	ldrh	r2, [r3, #0]
    80c4:	4bab      	ldr	r3, [pc, #684]	; (8374 <BrakeBoardStateMachineTask+0x1480>)
    80c6:	801a      	strh	r2, [r3, #0]
						}													
					}
				}
			}
			//----------------------boc ----- v01_39_#1
			if (done == 0)
    80c8:	1c3b      	adds	r3, r7, #0
    80ca:	330e      	adds	r3, #14
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	2b00      	cmp	r3, #0
    80d0:	d160      	bne.n	8194 <BrakeBoardStateMachineTask+0x12a0>
			{
				tempdiffx = MotorGetAcc(TRUE);				
    80d2:	2001      	movs	r0, #1
    80d4:	4ba8      	ldr	r3, [pc, #672]	; (8378 <BrakeBoardStateMachineTask+0x1484>)
    80d6:	4798      	blx	r3
    80d8:	1c03      	adds	r3, r0, #0
    80da:	1c1a      	adds	r2, r3, #0
    80dc:	4ba7      	ldr	r3, [pc, #668]	; (837c <BrakeBoardStateMachineTask+0x1488>)
    80de:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    80e0:	4ba7      	ldr	r3, [pc, #668]	; (8380 <BrakeBoardStateMachineTask+0x148c>)
    80e2:	7eda      	ldrb	r2, [r3, #27]
    80e4:	1c3b      	adds	r3, r7, #0
    80e6:	330a      	adds	r3, #10
    80e8:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    80ea:	1c3b      	adds	r3, r7, #0
    80ec:	330a      	adds	r3, #10
    80ee:	881b      	ldrh	r3, [r3, #0]
    80f0:	2b09      	cmp	r3, #9
    80f2:	d903      	bls.n	80fc <BrakeBoardStateMachineTask+0x1208>
				{
					itemp2 = 0;
    80f4:	1c3b      	adds	r3, r7, #0
    80f6:	330a      	adds	r3, #10
    80f8:	2200      	movs	r2, #0
    80fa:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    80fc:	1c3a      	adds	r2, r7, #0
    80fe:	320a      	adds	r2, #10
    8100:	1c3b      	adds	r3, r7, #0
    8102:	330a      	adds	r3, #10
    8104:	881b      	ldrh	r3, [r3, #0]
    8106:	1c19      	adds	r1, r3, #0
    8108:	00c9      	lsls	r1, r1, #3
    810a:	18cb      	adds	r3, r1, r3
    810c:	1c19      	adds	r1, r3, #0
    810e:	00c8      	lsls	r0, r1, #3
    8110:	1c19      	adds	r1, r3, #0
    8112:	1c03      	adds	r3, r0, #0
    8114:	18cb      	adds	r3, r1, r3
    8116:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_TWENTYITH_G;
    8118:	1c3b      	adds	r3, r7, #0
    811a:	330a      	adds	r3, #10
    811c:	1c3a      	adds	r2, r7, #0
    811e:	320a      	adds	r2, #10
    8120:	8812      	ldrh	r2, [r2, #0]
    8122:	4998      	ldr	r1, [pc, #608]	; (8384 <BrakeBoardStateMachineTask+0x1490>)
    8124:	1852      	adds	r2, r2, r1
    8126:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_LESS,motorAccXBaseline)!=0)
    8128:	1c3b      	adds	r3, r7, #0
    812a:	330a      	adds	r3, #10
    812c:	881a      	ldrh	r2, [r3, #0]
    812e:	4b96      	ldr	r3, [pc, #600]	; (8388 <BrakeBoardStateMachineTask+0x1494>)
    8130:	881b      	ldrh	r3, [r3, #0]
    8132:	b212      	sxth	r2, r2
    8134:	b21b      	sxth	r3, r3
    8136:	1c10      	adds	r0, r2, #0
    8138:	2102      	movs	r1, #2
    813a:	1c1a      	adds	r2, r3, #0
    813c:	4b93      	ldr	r3, [pc, #588]	; (838c <BrakeBoardStateMachineTask+0x1498>)
    813e:	4798      	blx	r3
    8140:	1c03      	adds	r3, r0, #0
    8142:	2b00      	cmp	r3, #0
    8144:	d023      	beq.n	818e <BrakeBoardStateMachineTask+0x129a>
				{
					thresholdmet++; 
    8146:	4b92      	ldr	r3, [pc, #584]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	3301      	adds	r3, #1
    814c:	b2da      	uxtb	r2, r3
    814e:	4b90      	ldr	r3, [pc, #576]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8150:	701a      	strb	r2, [r3, #0]
					if (thresholdmet > MAX_THRESHOLD_NEEDED)
    8152:	4b8f      	ldr	r3, [pc, #572]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8154:	781b      	ldrb	r3, [r3, #0]
    8156:	2b03      	cmp	r3, #3
    8158:	d91c      	bls.n	8194 <BrakeBoardStateMachineTask+0x12a0>
					{
 						done = 1; 
    815a:	1c3b      	adds	r3, r7, #0
    815c:	330e      	adds	r3, #14
    815e:	2201      	movs	r2, #1
    8160:	701a      	strb	r2, [r3, #0]
						thresholdmet = 0;
    8162:	4b8b      	ldr	r3, [pc, #556]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8164:	2200      	movs	r2, #0
    8166:	701a      	strb	r2, [r3, #0]
						MotorOff(1);
    8168:	2001      	movs	r0, #1
    816a:	4b8a      	ldr	r3, [pc, #552]	; (8394 <BrakeBoardStateMachineTask+0x14a0>)
    816c:	4798      	blx	r3
						MotorCCW();
    816e:	4b8a      	ldr	r3, [pc, #552]	; (8398 <BrakeBoardStateMachineTask+0x14a4>)
    8170:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;   
    8172:	4b8a      	ldr	r3, [pc, #552]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    8174:	2264      	movs	r2, #100	; 0x64
    8176:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT;  
    8178:	4b89      	ldr	r3, [pc, #548]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    817a:	2210      	movs	r2, #16
    817c:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;		
    817e:	4b89      	ldr	r3, [pc, #548]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	2202      	movs	r2, #2
    8184:	4393      	bics	r3, r2
    8186:	b2da      	uxtb	r2, r3
    8188:	4b86      	ldr	r3, [pc, #536]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    818a:	701a      	strb	r2, [r3, #0]
    818c:	e002      	b.n	8194 <BrakeBoardStateMachineTask+0x12a0>
					}
				}
				else
				{
					thresholdmet = 0; 
    818e:	4b80      	ldr	r3, [pc, #512]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8190:	2200      	movs	r2, #0
    8192:	701a      	strb	r2, [r3, #0]
			}			
			//---------- eoc v01_39_#1 
		}				
		case BRAKESTATE_ACTIVE_HOLD:
		{
			done = 0;
    8194:	1c3b      	adds	r3, r7, #0
    8196:	330e      	adds	r3, #14
    8198:	2200      	movs	r2, #0
    819a:	701a      	strb	r2, [r3, #0]
			// you are braking .... so
			// 1. look for 500 counts on current to stop braking.
			// 2. when at 1/10 g then retract
			// 3. also maximum time of braking is 15 second.
			//
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    819c:	4b81      	ldr	r3, [pc, #516]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	1c1a      	adds	r2, r3, #0
    81a2:	2302      	movs	r3, #2
    81a4:	4013      	ands	r3, r2
    81a6:	d02b      	beq.n	8200 <BrakeBoardStateMachineTask+0x130c>
    81a8:	1c3b      	adds	r3, r7, #0
    81aa:	330e      	adds	r3, #14
    81ac:	781b      	ldrb	r3, [r3, #0]
    81ae:	2b00      	cmp	r3, #0
    81b0:	d126      	bne.n	8200 <BrakeBoardStateMachineTask+0x130c>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    81b2:	4b7c      	ldr	r3, [pc, #496]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    81b4:	781b      	ldrb	r3, [r3, #0]
    81b6:	2202      	movs	r2, #2
    81b8:	4393      	bics	r3, r2
    81ba:	b2da      	uxtb	r2, r3
    81bc:	4b79      	ldr	r3, [pc, #484]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    81be:	701a      	strb	r2, [r3, #0]
				MotorOff(1);		
    81c0:	2001      	movs	r0, #1
    81c2:	4b74      	ldr	r3, [pc, #464]	; (8394 <BrakeBoardStateMachineTask+0x14a0>)
    81c4:	4798      	blx	r3
				done = 1; 
    81c6:	1c3b      	adds	r3, r7, #0
    81c8:	330e      	adds	r3, #14
    81ca:	2201      	movs	r2, #1
    81cc:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    81ce:	2002      	movs	r0, #2
    81d0:	4b75      	ldr	r3, [pc, #468]	; (83a8 <BrakeBoardStateMachineTask+0x14b4>)
    81d2:	4798      	blx	r3
    81d4:	1c03      	adds	r3, r0, #0
    81d6:	2b00      	cmp	r3, #0
    81d8:	d103      	bne.n	81e2 <BrakeBoardStateMachineTask+0x12ee>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    81da:	4b71      	ldr	r3, [pc, #452]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    81dc:	2207      	movs	r2, #7
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	e007      	b.n	81f2 <BrakeBoardStateMachineTask+0x12fe>
				}
				else
				{
 					MotorCCW();
    81e2:	4b6d      	ldr	r3, [pc, #436]	; (8398 <BrakeBoardStateMachineTask+0x14a4>)
    81e4:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    81e6:	4b6d      	ldr	r3, [pc, #436]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    81e8:	2264      	movs	r2, #100	; 0x64
    81ea:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    81ec:	4b6c      	ldr	r3, [pc, #432]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    81ee:	2217      	movs	r2, #23
    81f0:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    81f2:	4b6c      	ldr	r3, [pc, #432]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    81f4:	781b      	ldrb	r3, [r3, #0]
    81f6:	2202      	movs	r2, #2
    81f8:	4393      	bics	r3, r2
    81fa:	b2da      	uxtb	r2, r3
    81fc:	4b69      	ldr	r3, [pc, #420]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    81fe:	701a      	strb	r2, [r3, #0]
			}			
			if (done == 0)
    8200:	1c3b      	adds	r3, r7, #0
    8202:	330e      	adds	r3, #14
    8204:	781b      	ldrb	r3, [r3, #0]
    8206:	2b00      	cmp	r3, #0
    8208:	d15e      	bne.n	82c8 <BrakeBoardStateMachineTask+0x13d4>
			{
				tempdiffx = MotorGetAcc(TRUE);				
    820a:	2001      	movs	r0, #1
    820c:	4b5a      	ldr	r3, [pc, #360]	; (8378 <BrakeBoardStateMachineTask+0x1484>)
    820e:	4798      	blx	r3
    8210:	1c03      	adds	r3, r0, #0
    8212:	1c1a      	adds	r2, r3, #0
    8214:	4b59      	ldr	r3, [pc, #356]	; (837c <BrakeBoardStateMachineTask+0x1488>)
    8216:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    8218:	4b59      	ldr	r3, [pc, #356]	; (8380 <BrakeBoardStateMachineTask+0x148c>)
    821a:	7eda      	ldrb	r2, [r3, #27]
    821c:	1c3b      	adds	r3, r7, #0
    821e:	330a      	adds	r3, #10
    8220:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    8222:	1c3b      	adds	r3, r7, #0
    8224:	330a      	adds	r3, #10
    8226:	881b      	ldrh	r3, [r3, #0]
    8228:	2b09      	cmp	r3, #9
    822a:	d903      	bls.n	8234 <BrakeBoardStateMachineTask+0x1340>
				{
					itemp2 = 0;
    822c:	1c3b      	adds	r3, r7, #0
    822e:	330a      	adds	r3, #10
    8230:	2200      	movs	r2, #0
    8232:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    8234:	1c3a      	adds	r2, r7, #0
    8236:	320a      	adds	r2, #10
    8238:	1c3b      	adds	r3, r7, #0
    823a:	330a      	adds	r3, #10
    823c:	881b      	ldrh	r3, [r3, #0]
    823e:	1c19      	adds	r1, r3, #0
    8240:	00c9      	lsls	r1, r1, #3
    8242:	18cb      	adds	r3, r1, r3
    8244:	1c19      	adds	r1, r3, #0
    8246:	00c8      	lsls	r0, r1, #3
    8248:	1c19      	adds	r1, r3, #0
    824a:	1c03      	adds	r3, r0, #0
    824c:	18cb      	adds	r3, r1, r3
    824e:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_TWENTYITH_G;
    8250:	1c3b      	adds	r3, r7, #0
    8252:	330a      	adds	r3, #10
    8254:	1c3a      	adds	r2, r7, #0
    8256:	320a      	adds	r2, #10
    8258:	8812      	ldrh	r2, [r2, #0]
    825a:	484a      	ldr	r0, [pc, #296]	; (8384 <BrakeBoardStateMachineTask+0x1490>)
    825c:	1812      	adds	r2, r2, r0
    825e:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_LESS,motorAccXBaseline)!=0)
    8260:	1c3b      	adds	r3, r7, #0
    8262:	330a      	adds	r3, #10
    8264:	881a      	ldrh	r2, [r3, #0]
    8266:	4b48      	ldr	r3, [pc, #288]	; (8388 <BrakeBoardStateMachineTask+0x1494>)
    8268:	881b      	ldrh	r3, [r3, #0]
    826a:	b212      	sxth	r2, r2
    826c:	b21b      	sxth	r3, r3
    826e:	1c10      	adds	r0, r2, #0
    8270:	2102      	movs	r1, #2
    8272:	1c1a      	adds	r2, r3, #0
    8274:	4b45      	ldr	r3, [pc, #276]	; (838c <BrakeBoardStateMachineTask+0x1498>)
    8276:	4798      	blx	r3
    8278:	1c03      	adds	r3, r0, #0
    827a:	2b00      	cmp	r3, #0
    827c:	d01f      	beq.n	82be <BrakeBoardStateMachineTask+0x13ca>
				{
					thresholdmet++; 
    827e:	4b44      	ldr	r3, [pc, #272]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	3301      	adds	r3, #1
    8284:	b2da      	uxtb	r2, r3
    8286:	4b42      	ldr	r3, [pc, #264]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8288:	701a      	strb	r2, [r3, #0]
 					done = 1; 
    828a:	1c3b      	adds	r3, r7, #0
    828c:	330e      	adds	r3, #14
    828e:	2201      	movs	r2, #1
    8290:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    8292:	4b3f      	ldr	r3, [pc, #252]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    8294:	2200      	movs	r2, #0
    8296:	701a      	strb	r2, [r3, #0]
					MotorOff(1);
    8298:	2001      	movs	r0, #1
    829a:	4b3e      	ldr	r3, [pc, #248]	; (8394 <BrakeBoardStateMachineTask+0x14a0>)
    829c:	4798      	blx	r3
					MotorCCW();
    829e:	4b3e      	ldr	r3, [pc, #248]	; (8398 <BrakeBoardStateMachineTask+0x14a4>)
    82a0:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;   
    82a2:	4b3e      	ldr	r3, [pc, #248]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    82a4:	2264      	movs	r2, #100	; 0x64
    82a6:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT;  
    82a8:	4b3d      	ldr	r3, [pc, #244]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    82aa:	2210      	movs	r2, #16
    82ac:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;				
    82ae:	4b3d      	ldr	r3, [pc, #244]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    82b0:	781b      	ldrb	r3, [r3, #0]
    82b2:	2202      	movs	r2, #2
    82b4:	4393      	bics	r3, r2
    82b6:	b2da      	uxtb	r2, r3
    82b8:	4b3a      	ldr	r3, [pc, #232]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    82ba:	701a      	strb	r2, [r3, #0]
    82bc:	e004      	b.n	82c8 <BrakeBoardStateMachineTask+0x13d4>
				}
				else
				{
					thresholdmet = 0; 
    82be:	4b34      	ldr	r3, [pc, #208]	; (8390 <BrakeBoardStateMachineTask+0x149c>)
    82c0:	2200      	movs	r2, #0
    82c2:	701a      	strb	r2, [r3, #0]
						MotorExtendMore(); 								
					} 
				}				
			}
#endif			
			break;
    82c4:	f000 fcb6 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    82c8:	f000 fcb4 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
		case BRAKESTATE_ACTIVE_RETRACT:
		{
			done = 0;
    82cc:	1c3b      	adds	r3, r7, #0
    82ce:	330e      	adds	r3, #14
    82d0:	2200      	movs	r2, #0
    82d2:	701a      	strb	r2, [r3, #0]
 			if (((hlimitState == 0)||(homeLimit == HOME_IN))&&(done == 0)) //V01_26
    82d4:	4b35      	ldr	r3, [pc, #212]	; (83ac <BrakeBoardStateMachineTask+0x14b8>)
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2b00      	cmp	r3, #0
    82da:	d003      	beq.n	82e4 <BrakeBoardStateMachineTask+0x13f0>
    82dc:	4b34      	ldr	r3, [pc, #208]	; (83b0 <BrakeBoardStateMachineTask+0x14bc>)
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d11e      	bne.n	8322 <BrakeBoardStateMachineTask+0x142e>
    82e4:	1c3b      	adds	r3, r7, #0
    82e6:	330e      	adds	r3, #14
    82e8:	781b      	ldrb	r3, [r3, #0]
    82ea:	2b00      	cmp	r3, #0
    82ec:	d119      	bne.n	8322 <BrakeBoardStateMachineTask+0x142e>
			{
				done = 1; 
    82ee:	1c3b      	adds	r3, r7, #0
    82f0:	330e      	adds	r3, #14
    82f2:	2201      	movs	r2, #1
    82f4:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    82f6:	2000      	movs	r0, #0
    82f8:	4b2b      	ldr	r3, [pc, #172]	; (83a8 <BrakeBoardStateMachineTask+0x14b4>)
    82fa:	4798      	blx	r3
    82fc:	1c03      	adds	r3, r0, #0
    82fe:	2b00      	cmp	r3, #0
    8300:	d106      	bne.n	8310 <BrakeBoardStateMachineTask+0x141c>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8302:	4b27      	ldr	r3, [pc, #156]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    8304:	2207      	movs	r2, #7
    8306:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8308:	4b24      	ldr	r3, [pc, #144]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    830a:	2200      	movs	r2, #0
    830c:	801a      	strh	r2, [r3, #0]
    830e:	e008      	b.n	8322 <BrakeBoardStateMachineTask+0x142e>
				}
				else
				{
//					MotorNeedNewBaseline();
					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    8310:	4b23      	ldr	r3, [pc, #140]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    8312:	220b      	movs	r2, #11
    8314:	701a      	strb	r2, [r3, #0]
					MotorOff(1);	
    8316:	2001      	movs	r0, #1
    8318:	4b1e      	ldr	r3, [pc, #120]	; (8394 <BrakeBoardStateMachineTask+0x14a0>)
    831a:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIMESHORT;
    831c:	4b1f      	ldr	r3, [pc, #124]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    831e:	220a      	movs	r2, #10
    8320:	801a      	strh	r2, [r3, #0]
				}
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    8322:	4b20      	ldr	r3, [pc, #128]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    8324:	781b      	ldrb	r3, [r3, #0]
    8326:	1c1a      	adds	r2, r3, #0
    8328:	2302      	movs	r3, #2
    832a:	4013      	ands	r3, r2
    832c:	d04a      	beq.n	83c4 <BrakeBoardStateMachineTask+0x14d0>
    832e:	1c3b      	adds	r3, r7, #0
    8330:	330e      	adds	r3, #14
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	2b00      	cmp	r3, #0
    8336:	d145      	bne.n	83c4 <BrakeBoardStateMachineTask+0x14d0>
			{
				done = 1; 
    8338:	1c3b      	adds	r3, r7, #0
    833a:	330e      	adds	r3, #14
    833c:	2201      	movs	r2, #1
    833e:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8340:	4b18      	ldr	r3, [pc, #96]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	2202      	movs	r2, #2
    8346:	4393      	bics	r3, r2
    8348:	b2da      	uxtb	r2, r3
    834a:	4b16      	ldr	r3, [pc, #88]	; (83a4 <BrakeBoardStateMachineTask+0x14b0>)
    834c:	701a      	strb	r2, [r3, #0]
				MotorOff(1);		
    834e:	2001      	movs	r0, #1
    8350:	4b10      	ldr	r3, [pc, #64]	; (8394 <BrakeBoardStateMachineTask+0x14a0>)
    8352:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8354:	2002      	movs	r0, #2
    8356:	4b14      	ldr	r3, [pc, #80]	; (83a8 <BrakeBoardStateMachineTask+0x14b4>)
    8358:	4798      	blx	r3
    835a:	1c03      	adds	r3, r0, #0
    835c:	2b00      	cmp	r3, #0
    835e:	d129      	bne.n	83b4 <BrakeBoardStateMachineTask+0x14c0>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8360:	4b0f      	ldr	r3, [pc, #60]	; (83a0 <BrakeBoardStateMachineTask+0x14ac>)
    8362:	2207      	movs	r2, #7
    8364:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8366:	4b0d      	ldr	r3, [pc, #52]	; (839c <BrakeBoardStateMachineTask+0x14a8>)
    8368:	2200      	movs	r2, #0
    836a:	801a      	strh	r2, [r3, #0]
    836c:	e02a      	b.n	83c4 <BrakeBoardStateMachineTask+0x14d0>
    836e:	46c0      	nop			; (mov r8, r8)
    8370:	20001e9e 	.word	0x20001e9e
    8374:	200004a6 	.word	0x200004a6
    8378:	0000914d 	.word	0x0000914d
    837c:	20002ec4 	.word	0x20002ec4
    8380:	20002fb8 	.word	0x20002fb8
    8384:	00000333 	.word	0x00000333
    8388:	20002ef4 	.word	0x20002ef4
    838c:	00005b7d 	.word	0x00005b7d
    8390:	200004b2 	.word	0x200004b2
    8394:	00009b75 	.word	0x00009b75
    8398:	00009c89 	.word	0x00009c89
    839c:	200036c4 	.word	0x200036c4
    83a0:	20002ebf 	.word	0x20002ebf
    83a4:	20002eee 	.word	0x20002eee
    83a8:	000069a1 	.word	0x000069a1
    83ac:	20003068 	.word	0x20003068
    83b0:	20000001 	.word	0x20000001
				}
				else
				{
					MotorCCW();
    83b4:	4bc5      	ldr	r3, [pc, #788]	; (86cc <BrakeBoardStateMachineTask+0x17d8>)
    83b6:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    83b8:	4bc5      	ldr	r3, [pc, #788]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    83ba:	2264      	movs	r2, #100	; 0x64
    83bc:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    83be:	4bc5      	ldr	r3, [pc, #788]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    83c0:	2217      	movs	r2, #23
    83c2:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((done == 0)&&(action == NONE)&&((brakeChange & BRAKECHANGE_DITHER)!=0))
    83c4:	1c3b      	adds	r3, r7, #0
    83c6:	330e      	adds	r3, #14
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	2b00      	cmp	r3, #0
    83cc:	d000      	beq.n	83d0 <BrakeBoardStateMachineTask+0x14dc>
    83ce:	e07a      	b.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
    83d0:	4bc1      	ldr	r3, [pc, #772]	; (86d8 <BrakeBoardStateMachineTask+0x17e4>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b00      	cmp	r3, #0
    83d6:	d000      	beq.n	83da <BrakeBoardStateMachineTask+0x14e6>
    83d8:	e075      	b.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
    83da:	4bc0      	ldr	r3, [pc, #768]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    83dc:	781b      	ldrb	r3, [r3, #0]
    83de:	1c1a      	adds	r2, r3, #0
    83e0:	2310      	movs	r3, #16
    83e2:	4013      	ands	r3, r2
    83e4:	d100      	bne.n	83e8 <BrakeBoardStateMachineTask+0x14f4>
    83e6:	e06e      	b.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
			{
				brakeChange &= ~BRAKECHANGE_DITHER; 
    83e8:	4bbc      	ldr	r3, [pc, #752]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	2210      	movs	r2, #16
    83ee:	4393      	bics	r3, r2
    83f0:	b2da      	uxtb	r2, r3
    83f2:	4bba      	ldr	r3, [pc, #744]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    83f4:	701a      	strb	r2, [r3, #0]
				//--------------------------
				// at 100msec check gain value 
				newG = MotorGetAcc(TRUE);
    83f6:	2001      	movs	r0, #1
    83f8:	4bb9      	ldr	r3, [pc, #740]	; (86e0 <BrakeBoardStateMachineTask+0x17ec>)
    83fa:	4798      	blx	r3
    83fc:	1c03      	adds	r3, r0, #0
    83fe:	b29a      	uxth	r2, r3
    8400:	4bb8      	ldr	r3, [pc, #736]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    8402:	801a      	strh	r2, [r3, #0]
				if (newG < holdG)
    8404:	4bb7      	ldr	r3, [pc, #732]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    8406:	881a      	ldrh	r2, [r3, #0]
    8408:	4bb7      	ldr	r3, [pc, #732]	; (86e8 <BrakeBoardStateMachineTask+0x17f4>)
    840a:	881b      	ldrh	r3, [r3, #0]
    840c:	429a      	cmp	r2, r3
    840e:	d239      	bcs.n	8484 <BrakeBoardStateMachineTask+0x1590>
				{
					diffG = (holdG - newG); 
    8410:	4bb5      	ldr	r3, [pc, #724]	; (86e8 <BrakeBoardStateMachineTask+0x17f4>)
    8412:	881a      	ldrh	r2, [r3, #0]
    8414:	4bb3      	ldr	r3, [pc, #716]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    8416:	881b      	ldrh	r3, [r3, #0]
    8418:	1ad3      	subs	r3, r2, r3
    841a:	b29a      	uxth	r2, r3
    841c:	4bb3      	ldr	r3, [pc, #716]	; (86ec <BrakeBoardStateMachineTask+0x17f8>)
    841e:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    8420:	4bb2      	ldr	r3, [pc, #712]	; (86ec <BrakeBoardStateMachineTask+0x17f8>)
    8422:	881a      	ldrh	r2, [r3, #0]
    8424:	4bb2      	ldr	r3, [pc, #712]	; (86f0 <BrakeBoardStateMachineTask+0x17fc>)
    8426:	429a      	cmp	r2, r3
    8428:	d94d      	bls.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
					{
						//---------------------
						// Calculate the current from the equation for the g 
						matchCurrent = CurrentMotorCalculatedForG(newG);
    842a:	4bae      	ldr	r3, [pc, #696]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    842c:	881b      	ldrh	r3, [r3, #0]
    842e:	1c18      	adds	r0, r3, #0
    8430:	4bb0      	ldr	r3, [pc, #704]	; (86f4 <BrakeBoardStateMachineTask+0x1800>)
    8432:	4798      	blx	r3
    8434:	1c03      	adds	r3, r0, #0
    8436:	1c1a      	adds	r2, r3, #0
    8438:	4baf      	ldr	r3, [pc, #700]	; (86f8 <BrakeBoardStateMachineTask+0x1804>)
    843a:	801a      	strh	r2, [r3, #0]
						itemp = MotorFindEncoderMatch(matchCurrent);
    843c:	4bae      	ldr	r3, [pc, #696]	; (86f8 <BrakeBoardStateMachineTask+0x1804>)
    843e:	881b      	ldrh	r3, [r3, #0]
    8440:	1c18      	adds	r0, r3, #0
    8442:	4bae      	ldr	r3, [pc, #696]	; (86fc <BrakeBoardStateMachineTask+0x1808>)
    8444:	4798      	blx	r3
    8446:	1c03      	adds	r3, r0, #0
    8448:	1c1a      	adds	r2, r3, #0
    844a:	1d7b      	adds	r3, r7, #5
    844c:	701a      	strb	r2, [r3, #0]
						if (itemp > MAX_ENCODERCOUNT_BACK)
						{
							itemp = MAX_ENCODERCOUNT_BACK; 
						}
						encoderCountBackTotal += itemp; 
    844e:	1d7b      	adds	r3, r7, #5
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	b29a      	uxth	r2, r3
    8454:	4baa      	ldr	r3, [pc, #680]	; (8700 <BrakeBoardStateMachineTask+0x180c>)
    8456:	881b      	ldrh	r3, [r3, #0]
    8458:	18d3      	adds	r3, r2, r3
    845a:	b29a      	uxth	r2, r3
    845c:	4ba8      	ldr	r3, [pc, #672]	; (8700 <BrakeBoardStateMachineTask+0x180c>)
    845e:	801a      	strh	r2, [r3, #0]
						//--------------------------
						if (encoderCountBackTotal <1000)
    8460:	4ba7      	ldr	r3, [pc, #668]	; (8700 <BrakeBoardStateMachineTask+0x180c>)
    8462:	881a      	ldrh	r2, [r3, #0]
    8464:	4ba7      	ldr	r3, [pc, #668]	; (8704 <BrakeBoardStateMachineTask+0x1810>)
    8466:	429a      	cmp	r2, r3
    8468:	d82d      	bhi.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
						{
							encoderCountBack = itemp; 
    846a:	1d7b      	adds	r3, r7, #5
    846c:	781b      	ldrb	r3, [r3, #0]
    846e:	b29a      	uxth	r2, r3
    8470:	4ba5      	ldr	r3, [pc, #660]	; (8708 <BrakeBoardStateMachineTask+0x1814>)
    8472:	801a      	strh	r2, [r3, #0]
							RetractByEncoderCount();	
    8474:	4ba5      	ldr	r3, [pc, #660]	; (870c <BrakeBoardStateMachineTask+0x1818>)
    8476:	4798      	blx	r3
							holdG = newG; 	
    8478:	4b9a      	ldr	r3, [pc, #616]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    847a:	881a      	ldrh	r2, [r3, #0]
    847c:	4b9a      	ldr	r3, [pc, #616]	; (86e8 <BrakeBoardStateMachineTask+0x17f4>)
    847e:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
 									
					} 
				}							
			}  			
			break;
    8480:	f000 fbd8 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
						}
					}
				}			
				else
				{
					diffG = (newG - holdG);
    8484:	4b97      	ldr	r3, [pc, #604]	; (86e4 <BrakeBoardStateMachineTask+0x17f0>)
    8486:	881a      	ldrh	r2, [r3, #0]
    8488:	4b97      	ldr	r3, [pc, #604]	; (86e8 <BrakeBoardStateMachineTask+0x17f4>)
    848a:	881b      	ldrh	r3, [r3, #0]
    848c:	1ad3      	subs	r3, r2, r3
    848e:	b29a      	uxth	r2, r3
    8490:	4b96      	ldr	r3, [pc, #600]	; (86ec <BrakeBoardStateMachineTask+0x17f8>)
    8492:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    8494:	4b95      	ldr	r3, [pc, #596]	; (86ec <BrakeBoardStateMachineTask+0x17f8>)
    8496:	881a      	ldrh	r2, [r3, #0]
    8498:	4b95      	ldr	r3, [pc, #596]	; (86f0 <BrakeBoardStateMachineTask+0x17fc>)
    849a:	429a      	cmp	r2, r3
    849c:	d913      	bls.n	84c6 <BrakeBoardStateMachineTask+0x15d2>
					{
						//---------------Extend
						thresholdmet = 0;
    849e:	4b9c      	ldr	r3, [pc, #624]	; (8710 <BrakeBoardStateMachineTask+0x181c>)
    84a0:	2200      	movs	r2, #0
    84a2:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_EXTEND;
    84a4:	4b8b      	ldr	r3, [pc, #556]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    84a6:	220a      	movs	r2, #10
    84a8:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    84aa:	4b8c      	ldr	r3, [pc, #560]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    84ac:	781b      	ldrb	r3, [r3, #0]
    84ae:	2210      	movs	r2, #16
    84b0:	4393      	bics	r3, r2
    84b2:	b2da      	uxtb	r2, r3
    84b4:	4b89      	ldr	r3, [pc, #548]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    84b6:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;
    84b8:	4b96      	ldr	r3, [pc, #600]	; (8714 <BrakeBoardStateMachineTask+0x1820>)
    84ba:	2200      	movs	r2, #0
    84bc:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
    84be:	4b96      	ldr	r3, [pc, #600]	; (8718 <BrakeBoardStateMachineTask+0x1824>)
    84c0:	4798      	blx	r3
 									
					} 
				}							
			}  			
			break;
    84c2:	f000 fbb7 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
    84c6:	f000 fbb5 	bl	8c34 <BrakeBoardStateMachineTask+0x1d40>
		case BRAKESTATE_END_RETRACT_TIMEOUT:
		case BRAKESTATE_END_RETRACT:
		case BRAKESTATE_END_RETRACT_BREAKAWAY:
		case BRAKESTATE_END_RETRACT_MANUAL:
		{
			breakawayHoldTimer = 0; 
    84ca:	4b94      	ldr	r3, [pc, #592]	; (871c <BrakeBoardStateMachineTask+0x1828>)
    84cc:	2200      	movs	r2, #0
    84ce:	801a      	strh	r2, [r3, #0]
 			if ((hlimitState == 0)||(homeLimit == HOME_IN))  //V01_26
    84d0:	4b93      	ldr	r3, [pc, #588]	; (8720 <BrakeBoardStateMachineTask+0x182c>)
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	2b00      	cmp	r3, #0
    84d6:	d003      	beq.n	84e0 <BrakeBoardStateMachineTask+0x15ec>
    84d8:	4b92      	ldr	r3, [pc, #584]	; (8724 <BrakeBoardStateMachineTask+0x1830>)
    84da:	781b      	ldrb	r3, [r3, #0]
    84dc:	2b00      	cmp	r3, #0
    84de:	d136      	bne.n	854e <BrakeBoardStateMachineTask+0x165a>
			{
				MotorOff(1);		
    84e0:	2001      	movs	r0, #1
    84e2:	4b91      	ldr	r3, [pc, #580]	; (8728 <BrakeBoardStateMachineTask+0x1834>)
    84e4:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    84e6:	2000      	movs	r0, #0
    84e8:	4b90      	ldr	r3, [pc, #576]	; (872c <BrakeBoardStateMachineTask+0x1838>)
    84ea:	4798      	blx	r3
    84ec:	1c03      	adds	r3, r0, #0
    84ee:	2b00      	cmp	r3, #0
    84f0:	d106      	bne.n	8500 <BrakeBoardStateMachineTask+0x160c>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    84f2:	4b78      	ldr	r3, [pc, #480]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    84f4:	2207      	movs	r2, #7
    84f6:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    84f8:	4b75      	ldr	r3, [pc, #468]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    84fa:	2200      	movs	r2, #0
    84fc:	801a      	strh	r2, [r3, #0]
    84fe:	e01e      	b.n	853e <BrakeBoardStateMachineTask+0x164a>
				}
				else
				{
					brakeSupTime = BRAKESUPTIME_SHORT;
    8500:	4b73      	ldr	r3, [pc, #460]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8502:	2214      	movs	r2, #20
    8504:	801a      	strh	r2, [r3, #0]
					if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    8506:	4b73      	ldr	r3, [pc, #460]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    8508:	781b      	ldrb	r3, [r3, #0]
    850a:	2b17      	cmp	r3, #23
    850c:	d102      	bne.n	8514 <BrakeBoardStateMachineTask+0x1620>
					{
						brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    850e:	4b70      	ldr	r3, [pc, #448]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8510:	2296      	movs	r2, #150	; 0x96
    8512:	801a      	strh	r2, [r3, #0]
					}

					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    8514:	4b6f      	ldr	r3, [pc, #444]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    8516:	220b      	movs	r2, #11
    8518:	701a      	strb	r2, [r3, #0]
					MotorNeedNewBaseline();
    851a:	4b85      	ldr	r3, [pc, #532]	; (8730 <BrakeBoardStateMachineTask+0x183c>)
    851c:	4798      	blx	r3
//					if (prevBrakeState !=BRAKESTATE_ERRORLOADWAIT )
//					{
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    851e:	4b6d      	ldr	r3, [pc, #436]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    8520:	220b      	movs	r2, #11
    8522:	701a      	strb	r2, [r3, #0]
//					}
//					else
//					{
//						brakeState = BRAKESTATE_ERRORLOADWAIT;
//					}					
					if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8524:	4b83      	ldr	r3, [pc, #524]	; (8734 <BrakeBoardStateMachineTask+0x1840>)
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	1c1a      	adds	r2, r3, #0
    852a:	2301      	movs	r3, #1
    852c:	4013      	ands	r3, r2
    852e:	d106      	bne.n	853e <BrakeBoardStateMachineTask+0x164a>
					{
						brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    8530:	4b81      	ldr	r3, [pc, #516]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    8532:	791b      	ldrb	r3, [r3, #4]
    8534:	2210      	movs	r2, #16
    8536:	4393      	bics	r3, r2
    8538:	b2da      	uxtb	r2, r3
    853a:	4b7f      	ldr	r3, [pc, #508]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    853c:	711a      	strb	r2, [r3, #4]
					}
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    853e:	4b67      	ldr	r3, [pc, #412]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8540:	781b      	ldrb	r3, [r3, #0]
    8542:	2202      	movs	r2, #2
    8544:	4393      	bics	r3, r2
    8546:	b2da      	uxtb	r2, r3
    8548:	4b64      	ldr	r3, [pc, #400]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    854a:	701a      	strb	r2, [r3, #0]
    854c:	e040      	b.n	85d0 <BrakeBoardStateMachineTask+0x16dc>
			}
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    854e:	4b63      	ldr	r3, [pc, #396]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8550:	781b      	ldrb	r3, [r3, #0]
    8552:	1c1a      	adds	r2, r3, #0
    8554:	2302      	movs	r3, #2
    8556:	4013      	ands	r3, r2
    8558:	d03a      	beq.n	85d0 <BrakeBoardStateMachineTask+0x16dc>
				{
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    855a:	4b60      	ldr	r3, [pc, #384]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2202      	movs	r2, #2
    8560:	4393      	bics	r3, r2
    8562:	b2da      	uxtb	r2, r3
    8564:	4b5d      	ldr	r3, [pc, #372]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8566:	701a      	strb	r2, [r3, #0]
					MotorOff(1);				
    8568:	2001      	movs	r0, #1
    856a:	4b6f      	ldr	r3, [pc, #444]	; (8728 <BrakeBoardStateMachineTask+0x1834>)
    856c:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    856e:	2002      	movs	r0, #2
    8570:	4b6e      	ldr	r3, [pc, #440]	; (872c <BrakeBoardStateMachineTask+0x1838>)
    8572:	4798      	blx	r3
    8574:	1c03      	adds	r3, r0, #0
    8576:	2b00      	cmp	r3, #0
    8578:	d106      	bne.n	8588 <BrakeBoardStateMachineTask+0x1694>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    857a:	4b56      	ldr	r3, [pc, #344]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    857c:	2207      	movs	r2, #7
    857e:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    8580:	4b53      	ldr	r3, [pc, #332]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8582:	2200      	movs	r2, #0
    8584:	801a      	strh	r2, [r3, #0]
    8586:	e01b      	b.n	85c0 <BrakeBoardStateMachineTask+0x16cc>
					}
					else
					{
						brakeSupTime = BRAKESUPTIME_SHORT;
    8588:	4b51      	ldr	r3, [pc, #324]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    858a:	2214      	movs	r2, #20
    858c:	801a      	strh	r2, [r3, #0]
						if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    858e:	4b51      	ldr	r3, [pc, #324]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	2b17      	cmp	r3, #23
    8594:	d102      	bne.n	859c <BrakeBoardStateMachineTask+0x16a8>
						{
							brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    8596:	4b4e      	ldr	r3, [pc, #312]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8598:	2296      	movs	r2, #150	; 0x96
    859a:	801a      	strh	r2, [r3, #0]
						}		
//						if (prevBrakeState !=BRAKESTATE_ERRORLOADWAIT )	
//						{		
							brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    859c:	4b4d      	ldr	r3, [pc, #308]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    859e:	220b      	movs	r2, #11
    85a0:	701a      	strb	r2, [r3, #0]
							MotorNeedNewBaseline();
    85a2:	4b63      	ldr	r3, [pc, #396]	; (8730 <BrakeBoardStateMachineTask+0x183c>)
    85a4:	4798      	blx	r3
//						else
//						{
//							brakeState = BRAKESTATE_ERRORLOADWAIT;
//						}
						
						if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    85a6:	4b63      	ldr	r3, [pc, #396]	; (8734 <BrakeBoardStateMachineTask+0x1840>)
    85a8:	781b      	ldrb	r3, [r3, #0]
    85aa:	1c1a      	adds	r2, r3, #0
    85ac:	2301      	movs	r3, #1
    85ae:	4013      	ands	r3, r2
    85b0:	d106      	bne.n	85c0 <BrakeBoardStateMachineTask+0x16cc>
						{
							brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    85b2:	4b61      	ldr	r3, [pc, #388]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    85b4:	791b      	ldrb	r3, [r3, #4]
    85b6:	2210      	movs	r2, #16
    85b8:	4393      	bics	r3, r2
    85ba:	b2da      	uxtb	r2, r3
    85bc:	4b5e      	ldr	r3, [pc, #376]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    85be:	711a      	strb	r2, [r3, #4]
						}
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    85c0:	4b46      	ldr	r3, [pc, #280]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    85c2:	781b      	ldrb	r3, [r3, #0]
    85c4:	2202      	movs	r2, #2
    85c6:	4393      	bics	r3, r2
    85c8:	b2da      	uxtb	r2, r3
    85ca:	4b44      	ldr	r3, [pc, #272]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    85cc:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    85ce:	e331      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
    85d0:	e330      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}		
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    85d2:	4b59      	ldr	r3, [pc, #356]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    85d4:	791b      	ldrb	r3, [r3, #4]
    85d6:	2202      	movs	r2, #2
    85d8:	4313      	orrs	r3, r2
    85da:	b2da      	uxtb	r2, r3
    85dc:	4b56      	ldr	r3, [pc, #344]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    85de:	711a      	strb	r2, [r3, #4]
			if ((breakawayRing_pressed == 0) || 
    85e0:	4b56      	ldr	r3, [pc, #344]	; (873c <BrakeBoardStateMachineTask+0x1848>)
    85e2:	881b      	ldrh	r3, [r3, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d008      	beq.n	85fa <BrakeBoardStateMachineTask+0x1706>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    85e8:	4b54      	ldr	r3, [pc, #336]	; (873c <BrakeBoardStateMachineTask+0x1848>)
    85ea:	881b      	ldrh	r3, [r3, #0]
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			if ((breakawayRing_pressed == 0) || 
    85ec:	b21b      	sxth	r3, r3
    85ee:	2b01      	cmp	r3, #1
    85f0:	d11d      	bne.n	862e <BrakeBoardStateMachineTask+0x173a>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    85f2:	4b53      	ldr	r3, [pc, #332]	; (8740 <BrakeBoardStateMachineTask+0x184c>)
    85f4:	881b      	ldrh	r3, [r3, #0]
    85f6:	2b00      	cmp	r3, #0
    85f8:	d119      	bne.n	862e <BrakeBoardStateMachineTask+0x173a>
			{			
					done = 1;
    85fa:	1c3b      	adds	r3, r7, #0
    85fc:	330e      	adds	r3, #14
    85fe:	2201      	movs	r2, #1
    8600:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8602:	4b32      	ldr	r3, [pc, #200]	; (86cc <BrakeBoardStateMachineTask+0x17d8>)
    8604:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8606:	4b32      	ldr	r3, [pc, #200]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8608:	2264      	movs	r2, #100	; 0x64
    860a:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    860c:	4b31      	ldr	r3, [pc, #196]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    860e:	2213      	movs	r2, #19
    8610:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8612:	4b32      	ldr	r3, [pc, #200]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	2202      	movs	r2, #2
    8618:	4393      	bics	r3, r2
    861a:	b2da      	uxtb	r2, r3
    861c:	4b2f      	ldr	r3, [pc, #188]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    861e:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    8620:	4b45      	ldr	r3, [pc, #276]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    8622:	791b      	ldrb	r3, [r3, #4]
    8624:	2202      	movs	r2, #2
    8626:	4393      	bics	r3, r2
    8628:	b2da      	uxtb	r2, r3
    862a:	4b43      	ldr	r3, [pc, #268]	; (8738 <BrakeBoardStateMachineTask+0x1844>)
    862c:	711a      	strb	r2, [r3, #4]
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    862e:	4b2b      	ldr	r3, [pc, #172]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	1c1a      	adds	r2, r3, #0
    8634:	2302      	movs	r3, #2
    8636:	4013      	ands	r3, r2
    8638:	d02e      	beq.n	8698 <BrakeBoardStateMachineTask+0x17a4>
    863a:	1c3b      	adds	r3, r7, #0
    863c:	330e      	adds	r3, #14
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	2b00      	cmp	r3, #0
    8642:	d129      	bne.n	8698 <BrakeBoardStateMachineTask+0x17a4>
			{
				done = 1;
    8644:	1c3b      	adds	r3, r7, #0
    8646:	330e      	adds	r3, #14
    8648:	2201      	movs	r2, #1
    864a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    864c:	4b23      	ldr	r3, [pc, #140]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	2202      	movs	r2, #2
    8652:	4393      	bics	r3, r2
    8654:	b2da      	uxtb	r2, r3
    8656:	4b21      	ldr	r3, [pc, #132]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8658:	701a      	strb	r2, [r3, #0]
				MotorOff(1);	
    865a:	2001      	movs	r0, #1
    865c:	4b32      	ldr	r3, [pc, #200]	; (8728 <BrakeBoardStateMachineTask+0x1834>)
    865e:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8660:	2002      	movs	r0, #2
    8662:	4b32      	ldr	r3, [pc, #200]	; (872c <BrakeBoardStateMachineTask+0x1838>)
    8664:	4798      	blx	r3
    8666:	1c03      	adds	r3, r0, #0
    8668:	2b00      	cmp	r3, #0
    866a:	d106      	bne.n	867a <BrakeBoardStateMachineTask+0x1786>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    866c:	4b19      	ldr	r3, [pc, #100]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    866e:	2207      	movs	r2, #7
    8670:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8672:	4b17      	ldr	r3, [pc, #92]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8674:	2200      	movs	r2, #0
    8676:	801a      	strh	r2, [r3, #0]
    8678:	e00e      	b.n	8698 <BrakeBoardStateMachineTask+0x17a4>
				}
				else
				{
					MotorCCW();
    867a:	4b14      	ldr	r3, [pc, #80]	; (86cc <BrakeBoardStateMachineTask+0x17d8>)
    867c:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    867e:	4b14      	ldr	r3, [pc, #80]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    8680:	2264      	movs	r2, #100	; 0x64
    8682:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8684:	4b13      	ldr	r3, [pc, #76]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    8686:	2213      	movs	r2, #19
    8688:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    868a:	4b14      	ldr	r3, [pc, #80]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	2202      	movs	r2, #2
    8690:	4393      	bics	r3, r2
    8692:	b2da      	uxtb	r2, r3
    8694:	4b11      	ldr	r3, [pc, #68]	; (86dc <BrakeBoardStateMachineTask+0x17e8>)
    8696:	701a      	strb	r2, [r3, #0]
				}
			}						
 			if ((flimitState == 0)&&(done == 0))
    8698:	4b2a      	ldr	r3, [pc, #168]	; (8744 <BrakeBoardStateMachineTask+0x1850>)
    869a:	781b      	ldrb	r3, [r3, #0]
    869c:	2b00      	cmp	r3, #0
    869e:	d160      	bne.n	8762 <BrakeBoardStateMachineTask+0x186e>
    86a0:	1c3b      	adds	r3, r7, #0
    86a2:	330e      	adds	r3, #14
    86a4:	781b      	ldrb	r3, [r3, #0]
    86a6:	2b00      	cmp	r3, #0
    86a8:	d15b      	bne.n	8762 <BrakeBoardStateMachineTask+0x186e>
			{
				done = 1; 
    86aa:	1c3b      	adds	r3, r7, #0
    86ac:	330e      	adds	r3, #14
    86ae:	2201      	movs	r2, #1
    86b0:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    86b2:	2001      	movs	r0, #1
    86b4:	4b1d      	ldr	r3, [pc, #116]	; (872c <BrakeBoardStateMachineTask+0x1838>)
    86b6:	4798      	blx	r3
    86b8:	1c03      	adds	r3, r0, #0
    86ba:	2b00      	cmp	r3, #0
    86bc:	d144      	bne.n	8748 <BrakeBoardStateMachineTask+0x1854>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    86be:	4b05      	ldr	r3, [pc, #20]	; (86d4 <BrakeBoardStateMachineTask+0x17e0>)
    86c0:	2207      	movs	r2, #7
    86c2:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    86c4:	4b02      	ldr	r3, [pc, #8]	; (86d0 <BrakeBoardStateMachineTask+0x17dc>)
    86c6:	2200      	movs	r2, #0
    86c8:	801a      	strh	r2, [r3, #0]
    86ca:	e043      	b.n	8754 <BrakeBoardStateMachineTask+0x1860>
    86cc:	00009c89 	.word	0x00009c89
    86d0:	200036c4 	.word	0x200036c4
    86d4:	20002ebf 	.word	0x20002ebf
    86d8:	200004ae 	.word	0x200004ae
    86dc:	20002eee 	.word	0x20002eee
    86e0:	0000914d 	.word	0x0000914d
    86e4:	20002ec8 	.word	0x20002ec8
    86e8:	20002ec2 	.word	0x20002ec2
    86ec:	20002eba 	.word	0x20002eba
    86f0:	00000666 	.word	0x00000666
    86f4:	0000940d 	.word	0x0000940d
    86f8:	20002eb8 	.word	0x20002eb8
    86fc:	0000641d 	.word	0x0000641d
    8700:	20002ede 	.word	0x20002ede
    8704:	000003e7 	.word	0x000003e7
    8708:	20002ee2 	.word	0x20002ee2
    870c:	00009c25 	.word	0x00009c25
    8710:	200004b2 	.word	0x200004b2
    8714:	20002ed4 	.word	0x20002ed4
    8718:	00009e1d 	.word	0x00009e1d
    871c:	20002ef2 	.word	0x20002ef2
    8720:	20003068 	.word	0x20003068
    8724:	20000001 	.word	0x20000001
    8728:	00009b75 	.word	0x00009b75
    872c:	000069a1 	.word	0x000069a1
    8730:	00008f41 	.word	0x00008f41
    8734:	20002f1c 	.word	0x20002f1c
    8738:	20003694 	.word	0x20003694
    873c:	2000306a 	.word	0x2000306a
    8740:	20003070 	.word	0x20003070
    8744:	20003072 	.word	0x20003072
				}
				else
				{
					MotorOff(1);				
    8748:	2001      	movs	r0, #1
    874a:	4b91      	ldr	r3, [pc, #580]	; (8990 <BrakeBoardStateMachineTask+0x1a9c>)
    874c:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY; 
    874e:	4b91      	ldr	r3, [pc, #580]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    8750:	2212      	movs	r2, #18
    8752:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8754:	4b90      	ldr	r3, [pc, #576]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	2202      	movs	r2, #2
    875a:	4393      	bics	r3, r2
    875c:	b2da      	uxtb	r2, r3
    875e:	4b8e      	ldr	r3, [pc, #568]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8760:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    8762:	4b8e      	ldr	r3, [pc, #568]	; (899c <BrakeBoardStateMachineTask+0x1aa8>)
    8764:	881b      	ldrh	r3, [r3, #0]
    8766:	2b00      	cmp	r3, #0
    8768:	d13f      	bne.n	87ea <BrakeBoardStateMachineTask+0x18f6>
    876a:	1c3b      	adds	r3, r7, #0
    876c:	330e      	adds	r3, #14
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2b00      	cmp	r3, #0
    8772:	d13a      	bne.n	87ea <BrakeBoardStateMachineTask+0x18f6>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    8774:	2001      	movs	r0, #1
    8776:	4b8a      	ldr	r3, [pc, #552]	; (89a0 <BrakeBoardStateMachineTask+0x1aac>)
    8778:	4798      	blx	r3
    877a:	1c03      	adds	r3, r0, #0
    877c:	1c1a      	adds	r2, r3, #0
    877e:	4b89      	ldr	r3, [pc, #548]	; (89a4 <BrakeBoardStateMachineTask+0x1ab0>)
    8780:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedBreakaway();
    8782:	4b89      	ldr	r3, [pc, #548]	; (89a8 <BrakeBoardStateMachineTask+0x1ab4>)
    8784:	4798      	blx	r3
    8786:	1c03      	adds	r3, r0, #0
    8788:	1c1a      	adds	r2, r3, #0
    878a:	4b88      	ldr	r3, [pc, #544]	; (89ac <BrakeBoardStateMachineTask+0x1ab8>)
    878c:	801a      	strh	r2, [r3, #0]
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    878e:	2002      	movs	r0, #2
    8790:	4b83      	ldr	r3, [pc, #524]	; (89a0 <BrakeBoardStateMachineTask+0x1aac>)
    8792:	4798      	blx	r3
    8794:	1c03      	adds	r3, r0, #0
    8796:	1c1a      	adds	r2, r3, #0
    8798:	4b85      	ldr	r3, [pc, #532]	; (89b0 <BrakeBoardStateMachineTask+0x1abc>)
    879a:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculatedBreakaway();				
    879c:	4b85      	ldr	r3, [pc, #532]	; (89b4 <BrakeBoardStateMachineTask+0x1ac0>)
    879e:	4798      	blx	r3
    87a0:	1c03      	adds	r3, r0, #0
    87a2:	1c1a      	adds	r2, r3, #0
    87a4:	4b84      	ldr	r3, [pc, #528]	; (89b8 <BrakeBoardStateMachineTask+0x1ac4>)
    87a6:	801a      	strh	r2, [r3, #0]
#if FSR_USE				
				if (fsrRead > newFSRThreshold)   
#else
				if (currentRead > newCurrentThreshold)   	
    87a8:	4b7e      	ldr	r3, [pc, #504]	; (89a4 <BrakeBoardStateMachineTask+0x1ab0>)
    87aa:	881a      	ldrh	r2, [r3, #0]
    87ac:	4b7f      	ldr	r3, [pc, #508]	; (89ac <BrakeBoardStateMachineTask+0x1ab8>)
    87ae:	881b      	ldrh	r3, [r3, #0]
    87b0:	429a      	cmp	r2, r3
    87b2:	d91a      	bls.n	87ea <BrakeBoardStateMachineTask+0x18f6>
#endif 				
				{
					MotorOff(1);		
    87b4:	2001      	movs	r0, #1
    87b6:	4b76      	ldr	r3, [pc, #472]	; (8990 <BrakeBoardStateMachineTask+0x1a9c>)
    87b8:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    87ba:	2002      	movs	r0, #2
    87bc:	4b7f      	ldr	r3, [pc, #508]	; (89bc <BrakeBoardStateMachineTask+0x1ac8>)
    87be:	4798      	blx	r3
    87c0:	1c03      	adds	r3, r0, #0
    87c2:	2b00      	cmp	r3, #0
    87c4:	d106      	bne.n	87d4 <BrakeBoardStateMachineTask+0x18e0>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    87c6:	4b73      	ldr	r3, [pc, #460]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    87c8:	2207      	movs	r2, #7
    87ca:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    87cc:	4b7c      	ldr	r3, [pc, #496]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    87ce:	2200      	movs	r2, #0
    87d0:	801a      	strh	r2, [r3, #0]
    87d2:	e002      	b.n	87da <BrakeBoardStateMachineTask+0x18e6>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY;  			
    87d4:	4b6f      	ldr	r3, [pc, #444]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    87d6:	2212      	movs	r2, #18
    87d8:	701a      	strb	r2, [r3, #0]
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    87da:	4b6f      	ldr	r3, [pc, #444]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	2202      	movs	r2, #2
    87e0:	4393      	bics	r3, r2
    87e2:	b2da      	uxtb	r2, r3
    87e4:	4b6c      	ldr	r3, [pc, #432]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    87e6:	701a      	strb	r2, [r3, #0]
				}
			}			
			break;
    87e8:	e224      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
    87ea:	e223      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			done = 0;
    87ec:	1c3b      	adds	r3, r7, #0
    87ee:	330e      	adds	r3, #14
    87f0:	2200      	movs	r2, #0
    87f2:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    87f4:	4b73      	ldr	r3, [pc, #460]	; (89c4 <BrakeBoardStateMachineTask+0x1ad0>)
    87f6:	791b      	ldrb	r3, [r3, #4]
    87f8:	2202      	movs	r2, #2
    87fa:	4313      	orrs	r3, r2
    87fc:	b2da      	uxtb	r2, r3
    87fe:	4b71      	ldr	r3, [pc, #452]	; (89c4 <BrakeBoardStateMachineTask+0x1ad0>)
    8800:	711a      	strb	r2, [r3, #4]
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    8802:	4b71      	ldr	r3, [pc, #452]	; (89c8 <BrakeBoardStateMachineTask+0x1ad4>)
    8804:	881b      	ldrh	r3, [r3, #0]
    8806:	2b00      	cmp	r3, #0
    8808:	d008      	beq.n	881c <BrakeBoardStateMachineTask+0x1928>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    880a:	4b6f      	ldr	r3, [pc, #444]	; (89c8 <BrakeBoardStateMachineTask+0x1ad4>)
    880c:	881b      	ldrh	r3, [r3, #0]
		{
			done = 0;
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    880e:	b21b      	sxth	r3, r3
    8810:	2b01      	cmp	r3, #1
    8812:	d11d      	bne.n	8850 <BrakeBoardStateMachineTask+0x195c>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8814:	4b6d      	ldr	r3, [pc, #436]	; (89cc <BrakeBoardStateMachineTask+0x1ad8>)
    8816:	881b      	ldrh	r3, [r3, #0]
    8818:	2b00      	cmp	r3, #0
    881a:	d119      	bne.n	8850 <BrakeBoardStateMachineTask+0x195c>
			{		
				//----------------------------
				// Hold until cleared by: break-away signal 
				// returning to normal, set-up button pressed 
				// on brake unit or cleared with remote.  	
				done = 1;
    881c:	1c3b      	adds	r3, r7, #0
    881e:	330e      	adds	r3, #14
    8820:	2201      	movs	r2, #1
    8822:	701a      	strb	r2, [r3, #0]
				MotorCCW();
    8824:	4b6a      	ldr	r3, [pc, #424]	; (89d0 <BrakeBoardStateMachineTask+0x1adc>)
    8826:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;
    8828:	4b65      	ldr	r3, [pc, #404]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    882a:	2264      	movs	r2, #100	; 0x64
    882c:	801a      	strh	r2, [r3, #0]
				brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    882e:	4b59      	ldr	r3, [pc, #356]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    8830:	2213      	movs	r2, #19
    8832:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8834:	4b58      	ldr	r3, [pc, #352]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	2202      	movs	r2, #2
    883a:	4393      	bics	r3, r2
    883c:	b2da      	uxtb	r2, r3
    883e:	4b56      	ldr	r3, [pc, #344]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8840:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    8842:	4b60      	ldr	r3, [pc, #384]	; (89c4 <BrakeBoardStateMachineTask+0x1ad0>)
    8844:	791b      	ldrb	r3, [r3, #4]
    8846:	2202      	movs	r2, #2
    8848:	4393      	bics	r3, r2
    884a:	b2da      	uxtb	r2, r3
    884c:	4b5d      	ldr	r3, [pc, #372]	; (89c4 <BrakeBoardStateMachineTask+0x1ad0>)
    884e:	711a      	strb	r2, [r3, #4]
			}
			if (done == 0)
    8850:	1c3b      	adds	r3, r7, #0
    8852:	330e      	adds	r3, #14
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	2b00      	cmp	r3, #0
    8858:	d124      	bne.n	88a4 <BrakeBoardStateMachineTask+0x19b0>
			{
				if ((button & KEY_SETUP)!=0)
    885a:	1c3b      	adds	r3, r7, #0
    885c:	3309      	adds	r3, #9
    885e:	781a      	ldrb	r2, [r3, #0]
    8860:	2301      	movs	r3, #1
    8862:	4013      	ands	r3, r2
    8864:	d01e      	beq.n	88a4 <BrakeBoardStateMachineTask+0x19b0>
				{
					if (setup_pressed == 1)
    8866:	4b5b      	ldr	r3, [pc, #364]	; (89d4 <BrakeBoardStateMachineTask+0x1ae0>)
    8868:	881b      	ldrh	r3, [r3, #0]
    886a:	b21b      	sxth	r3, r3
    886c:	2b01      	cmp	r3, #1
    886e:	d119      	bne.n	88a4 <BrakeBoardStateMachineTask+0x19b0>
					{
						done = 1;
    8870:	1c3b      	adds	r3, r7, #0
    8872:	330e      	adds	r3, #14
    8874:	2201      	movs	r2, #1
    8876:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    8878:	4b47      	ldr	r3, [pc, #284]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    887a:	781b      	ldrb	r3, [r3, #0]
    887c:	2208      	movs	r2, #8
    887e:	4393      	bics	r3, r2
    8880:	b2da      	uxtb	r2, r3
    8882:	4b45      	ldr	r3, [pc, #276]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8884:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    8886:	4b52      	ldr	r3, [pc, #328]	; (89d0 <BrakeBoardStateMachineTask+0x1adc>)
    8888:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    888a:	4b4d      	ldr	r3, [pc, #308]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    888c:	2264      	movs	r2, #100	; 0x64
    888e:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8890:	4b40      	ldr	r3, [pc, #256]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    8892:	2213      	movs	r2, #19
    8894:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8896:	4b40      	ldr	r3, [pc, #256]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8898:	781b      	ldrb	r3, [r3, #0]
    889a:	2202      	movs	r2, #2
    889c:	4393      	bics	r3, r2
    889e:	b2da      	uxtb	r2, r3
    88a0:	4b3d      	ldr	r3, [pc, #244]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88a2:	701a      	strb	r2, [r3, #0]
					}
				}	
			}		
			if (done == 0)
    88a4:	1c3b      	adds	r3, r7, #0
    88a6:	330e      	adds	r3, #14
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d120      	bne.n	88f0 <BrakeBoardStateMachineTask+0x19fc>
			{
				if ((remoteStatus & REMOTE_CLEARBREAKAWAY)!=0)
    88ae:	4b4a      	ldr	r3, [pc, #296]	; (89d8 <BrakeBoardStateMachineTask+0x1ae4>)
    88b0:	781b      	ldrb	r3, [r3, #0]
    88b2:	1c1a      	adds	r2, r3, #0
    88b4:	2302      	movs	r3, #2
    88b6:	4013      	ands	r3, r2
    88b8:	d01a      	beq.n	88f0 <BrakeBoardStateMachineTask+0x19fc>
				{
						done = 1;
    88ba:	1c3b      	adds	r3, r7, #0
    88bc:	330e      	adds	r3, #14
    88be:	2201      	movs	r2, #1
    88c0:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    88c2:	4b35      	ldr	r3, [pc, #212]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88c4:	781b      	ldrb	r3, [r3, #0]
    88c6:	2208      	movs	r2, #8
    88c8:	4393      	bics	r3, r2
    88ca:	b2da      	uxtb	r2, r3
    88cc:	4b32      	ldr	r3, [pc, #200]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88ce:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    88d0:	4b3f      	ldr	r3, [pc, #252]	; (89d0 <BrakeBoardStateMachineTask+0x1adc>)
    88d2:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    88d4:	4b3a      	ldr	r3, [pc, #232]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    88d6:	2264      	movs	r2, #100	; 0x64
    88d8:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    88da:	4b2e      	ldr	r3, [pc, #184]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    88dc:	2213      	movs	r2, #19
    88de:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    88e0:	4b2d      	ldr	r3, [pc, #180]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88e2:	781b      	ldrb	r3, [r3, #0]
    88e4:	2202      	movs	r2, #2
    88e6:	4393      	bics	r3, r2
    88e8:	b2da      	uxtb	r2, r3
    88ea:	4b2b      	ldr	r3, [pc, #172]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88ec:	701a      	strb	r2, [r3, #0]
				}	
			}									
			break;
    88ee:	e1a1      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
    88f0:	e1a0      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
	//--------------------------------
	// MANUAL STATES. 
	//--------------------------------		
		case BRAKESTATE_ACTIVE_EXTEND_MANUAL:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    88f2:	4b29      	ldr	r3, [pc, #164]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	1c1a      	adds	r2, r3, #0
    88f8:	2302      	movs	r3, #2
    88fa:	4013      	ands	r3, r2
    88fc:	d02e      	beq.n	895c <BrakeBoardStateMachineTask+0x1a68>
    88fe:	1c3b      	adds	r3, r7, #0
    8900:	330e      	adds	r3, #14
    8902:	781b      	ldrb	r3, [r3, #0]
    8904:	2b00      	cmp	r3, #0
    8906:	d129      	bne.n	895c <BrakeBoardStateMachineTask+0x1a68>
			{
				done = 1;
    8908:	1c3b      	adds	r3, r7, #0
    890a:	330e      	adds	r3, #14
    890c:	2201      	movs	r2, #1
    890e:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8910:	4b21      	ldr	r3, [pc, #132]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	2202      	movs	r2, #2
    8916:	4393      	bics	r3, r2
    8918:	b2da      	uxtb	r2, r3
    891a:	4b1f      	ldr	r3, [pc, #124]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    891c:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    891e:	2001      	movs	r0, #1
    8920:	4b1b      	ldr	r3, [pc, #108]	; (8990 <BrakeBoardStateMachineTask+0x1a9c>)
    8922:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8924:	2002      	movs	r0, #2
    8926:	4b25      	ldr	r3, [pc, #148]	; (89bc <BrakeBoardStateMachineTask+0x1ac8>)
    8928:	4798      	blx	r3
    892a:	1c03      	adds	r3, r0, #0
    892c:	2b00      	cmp	r3, #0
    892e:	d106      	bne.n	893e <BrakeBoardStateMachineTask+0x1a4a>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8930:	4b18      	ldr	r3, [pc, #96]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    8932:	2207      	movs	r2, #7
    8934:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8936:	4b22      	ldr	r3, [pc, #136]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    8938:	2200      	movs	r2, #0
    893a:	801a      	strh	r2, [r3, #0]
    893c:	e00e      	b.n	895c <BrakeBoardStateMachineTask+0x1a68>
				}
				else
				{
					MotorCCW();
    893e:	4b24      	ldr	r3, [pc, #144]	; (89d0 <BrakeBoardStateMachineTask+0x1adc>)
    8940:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8942:	4b1f      	ldr	r3, [pc, #124]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    8944:	2264      	movs	r2, #100	; 0x64
    8946:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8948:	4b12      	ldr	r3, [pc, #72]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    894a:	2216      	movs	r2, #22
    894c:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    894e:	4b12      	ldr	r3, [pc, #72]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	2202      	movs	r2, #2
    8954:	4393      	bics	r3, r2
    8956:	b2da      	uxtb	r2, r3
    8958:	4b0f      	ldr	r3, [pc, #60]	; (8998 <BrakeBoardStateMachineTask+0x1aa4>)
    895a:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((flimitState == 0)&&(done == 0))
    895c:	4b1f      	ldr	r3, [pc, #124]	; (89dc <BrakeBoardStateMachineTask+0x1ae8>)
    895e:	781b      	ldrb	r3, [r3, #0]
    8960:	2b00      	cmp	r3, #0
    8962:	d14a      	bne.n	89fa <BrakeBoardStateMachineTask+0x1b06>
    8964:	1c3b      	adds	r3, r7, #0
    8966:	330e      	adds	r3, #14
    8968:	781b      	ldrb	r3, [r3, #0]
    896a:	2b00      	cmp	r3, #0
    896c:	d145      	bne.n	89fa <BrakeBoardStateMachineTask+0x1b06>
			{
				done = 1;
    896e:	1c3b      	adds	r3, r7, #0
    8970:	330e      	adds	r3, #14
    8972:	2201      	movs	r2, #1
    8974:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    8976:	2001      	movs	r0, #1
    8978:	4b10      	ldr	r3, [pc, #64]	; (89bc <BrakeBoardStateMachineTask+0x1ac8>)
    897a:	4798      	blx	r3
    897c:	1c03      	adds	r3, r0, #0
    897e:	2b00      	cmp	r3, #0
    8980:	d12e      	bne.n	89e0 <BrakeBoardStateMachineTask+0x1aec>
				{
					brakeState = BRAKESTATE_ERROR;
    8982:	4b04      	ldr	r3, [pc, #16]	; (8994 <BrakeBoardStateMachineTask+0x1aa0>)
    8984:	2208      	movs	r2, #8
    8986:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8988:	4b0d      	ldr	r3, [pc, #52]	; (89c0 <BrakeBoardStateMachineTask+0x1acc>)
    898a:	2200      	movs	r2, #0
    898c:	801a      	strh	r2, [r3, #0]
    898e:	e02d      	b.n	89ec <BrakeBoardStateMachineTask+0x1af8>
    8990:	00009b75 	.word	0x00009b75
    8994:	20002ebf 	.word	0x20002ebf
    8998:	20002eee 	.word	0x20002eee
    899c:	20002eb2 	.word	0x20002eb2
    89a0:	0000b4b5 	.word	0x0000b4b5
    89a4:	20002ea6 	.word	0x20002ea6
    89a8:	00009649 	.word	0x00009649
    89ac:	20002eaa 	.word	0x20002eaa
    89b0:	20002eea 	.word	0x20002eea
    89b4:	000096e5 	.word	0x000096e5
    89b8:	20002eac 	.word	0x20002eac
    89bc:	000069a1 	.word	0x000069a1
    89c0:	200036c4 	.word	0x200036c4
    89c4:	20003694 	.word	0x20003694
    89c8:	2000306a 	.word	0x2000306a
    89cc:	20003070 	.word	0x20003070
    89d0:	00009c89 	.word	0x00009c89
    89d4:	2000306e 	.word	0x2000306e
    89d8:	20002f1c 	.word	0x20002f1c
    89dc:	20003072 	.word	0x20003072
				}
				else
				{
					MotorOff(1);
    89e0:	2001      	movs	r0, #1
    89e2:	4b97      	ldr	r3, [pc, #604]	; (8c40 <BrakeBoardStateMachineTask+0x1d4c>)
    89e4:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    89e6:	4b97      	ldr	r3, [pc, #604]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    89e8:	2215      	movs	r2, #21
    89ea:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    89ec:	4b96      	ldr	r3, [pc, #600]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    89ee:	781b      	ldrb	r3, [r3, #0]
    89f0:	2202      	movs	r2, #2
    89f2:	4393      	bics	r3, r2
    89f4:	b2da      	uxtb	r2, r3
    89f6:	4b94      	ldr	r3, [pc, #592]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    89f8:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    89fa:	4b94      	ldr	r3, [pc, #592]	; (8c4c <BrakeBoardStateMachineTask+0x1d58>)
    89fc:	881b      	ldrh	r3, [r3, #0]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d000      	beq.n	8a04 <BrakeBoardStateMachineTask+0x1b10>
    8a02:	e085      	b.n	8b10 <BrakeBoardStateMachineTask+0x1c1c>
    8a04:	1c3b      	adds	r3, r7, #0
    8a06:	330e      	adds	r3, #14
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	d000      	beq.n	8a10 <BrakeBoardStateMachineTask+0x1b1c>
    8a0e:	e07f      	b.n	8b10 <BrakeBoardStateMachineTask+0x1c1c>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    8a10:	2001      	movs	r0, #1
    8a12:	4b8f      	ldr	r3, [pc, #572]	; (8c50 <BrakeBoardStateMachineTask+0x1d5c>)
    8a14:	4798      	blx	r3
    8a16:	1c03      	adds	r3, r0, #0
    8a18:	1c1a      	adds	r2, r3, #0
    8a1a:	4b8e      	ldr	r3, [pc, #568]	; (8c54 <BrakeBoardStateMachineTask+0x1d60>)
    8a1c:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedManual();
    8a1e:	4b8e      	ldr	r3, [pc, #568]	; (8c58 <BrakeBoardStateMachineTask+0x1d64>)
    8a20:	4798      	blx	r3
    8a22:	1c03      	adds	r3, r0, #0
    8a24:	1c1a      	adds	r2, r3, #0
    8a26:	4b8d      	ldr	r3, [pc, #564]	; (8c5c <BrakeBoardStateMachineTask+0x1d68>)
    8a28:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    8a2a:	4b8d      	ldr	r3, [pc, #564]	; (8c60 <BrakeBoardStateMachineTask+0x1d6c>)
    8a2c:	7e5b      	ldrb	r3, [r3, #25]
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d119      	bne.n	8a66 <BrakeBoardStateMachineTask+0x1b72>
				{
					if (brakeCycleCount <2)
    8a32:	4b8c      	ldr	r3, [pc, #560]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8a34:	781b      	ldrb	r3, [r3, #0]
    8a36:	2b01      	cmp	r3, #1
    8a38:	d806      	bhi.n	8a48 <BrakeBoardStateMachineTask+0x1b54>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    8a3a:	2002      	movs	r0, #2
    8a3c:	4b8a      	ldr	r3, [pc, #552]	; (8c68 <BrakeBoardStateMachineTask+0x1d74>)
    8a3e:	4798      	blx	r3
    8a40:	1c03      	adds	r3, r0, #0
    8a42:	1c1a      	adds	r2, r3, #0
    8a44:	4b85      	ldr	r3, [pc, #532]	; (8c5c <BrakeBoardStateMachineTask+0x1d68>)
    8a46:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    8a48:	4b86      	ldr	r3, [pc, #536]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8a4a:	781b      	ldrb	r3, [r3, #0]
    8a4c:	2b02      	cmp	r3, #2
    8a4e:	d10a      	bne.n	8a66 <BrakeBoardStateMachineTask+0x1b72>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    8a50:	4b83      	ldr	r3, [pc, #524]	; (8c60 <BrakeBoardStateMachineTask+0x1d6c>)
    8a52:	7d9b      	ldrb	r3, [r3, #22]
    8a54:	085b      	lsrs	r3, r3, #1
    8a56:	b2db      	uxtb	r3, r3
    8a58:	1c18      	adds	r0, r3, #0
    8a5a:	4b83      	ldr	r3, [pc, #524]	; (8c68 <BrakeBoardStateMachineTask+0x1d74>)
    8a5c:	4798      	blx	r3
    8a5e:	1c03      	adds	r3, r0, #0
    8a60:	1c1a      	adds	r2, r3, #0
    8a62:	4b7e      	ldr	r3, [pc, #504]	; (8c5c <BrakeBoardStateMachineTask+0x1d68>)
    8a64:	801a      	strh	r2, [r3, #0]
					}
				}	
				//V01_41 boc
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    8a66:	2002      	movs	r0, #2
    8a68:	4b79      	ldr	r3, [pc, #484]	; (8c50 <BrakeBoardStateMachineTask+0x1d5c>)
    8a6a:	4798      	blx	r3
    8a6c:	1c03      	adds	r3, r0, #0
    8a6e:	1c1a      	adds	r2, r3, #0
    8a70:	4b7e      	ldr	r3, [pc, #504]	; (8c6c <BrakeBoardStateMachineTask+0x1d78>)
    8a72:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculatedManual();
    8a74:	4b7e      	ldr	r3, [pc, #504]	; (8c70 <BrakeBoardStateMachineTask+0x1d7c>)
    8a76:	4798      	blx	r3
    8a78:	1c03      	adds	r3, r0, #0
    8a7a:	1c1a      	adds	r2, r3, #0
    8a7c:	4b7d      	ldr	r3, [pc, #500]	; (8c74 <BrakeBoardStateMachineTask+0x1d80>)
    8a7e:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    8a80:	4b77      	ldr	r3, [pc, #476]	; (8c60 <BrakeBoardStateMachineTask+0x1d6c>)
    8a82:	7e5b      	ldrb	r3, [r3, #25]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d119      	bne.n	8abc <BrakeBoardStateMachineTask+0x1bc8>
				{
					if (brakeCycleCount <2)
    8a88:	4b76      	ldr	r3, [pc, #472]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	2b01      	cmp	r3, #1
    8a8e:	d806      	bhi.n	8a9e <BrakeBoardStateMachineTask+0x1baa>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(2);
    8a90:	2002      	movs	r0, #2
    8a92:	4b79      	ldr	r3, [pc, #484]	; (8c78 <BrakeBoardStateMachineTask+0x1d84>)
    8a94:	4798      	blx	r3
    8a96:	1c03      	adds	r3, r0, #0
    8a98:	1c1a      	adds	r2, r3, #0
    8a9a:	4b76      	ldr	r3, [pc, #472]	; (8c74 <BrakeBoardStateMachineTask+0x1d80>)
    8a9c:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    8a9e:	4b71      	ldr	r3, [pc, #452]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	2b02      	cmp	r3, #2
    8aa4:	d10a      	bne.n	8abc <BrakeBoardStateMachineTask+0x1bc8>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    8aa6:	4b6e      	ldr	r3, [pc, #440]	; (8c60 <BrakeBoardStateMachineTask+0x1d6c>)
    8aa8:	7d9b      	ldrb	r3, [r3, #22]
    8aaa:	085b      	lsrs	r3, r3, #1
    8aac:	b2db      	uxtb	r3, r3
    8aae:	1c18      	adds	r0, r3, #0
    8ab0:	4b71      	ldr	r3, [pc, #452]	; (8c78 <BrakeBoardStateMachineTask+0x1d84>)
    8ab2:	4798      	blx	r3
    8ab4:	1c03      	adds	r3, r0, #0
    8ab6:	1c1a      	adds	r2, r3, #0
    8ab8:	4b6e      	ldr	r3, [pc, #440]	; (8c74 <BrakeBoardStateMachineTask+0x1d80>)
    8aba:	801a      	strh	r2, [r3, #0]
				//V01_41 eoc
				//--------------------v1.05
#if FSR_USE					
				if (fsrRead > newFSRThreshold)		
#else
				if (currentRead > newCurrentThreshold)
    8abc:	4b65      	ldr	r3, [pc, #404]	; (8c54 <BrakeBoardStateMachineTask+0x1d60>)
    8abe:	881a      	ldrh	r2, [r3, #0]
    8ac0:	4b66      	ldr	r3, [pc, #408]	; (8c5c <BrakeBoardStateMachineTask+0x1d68>)
    8ac2:	881b      	ldrh	r3, [r3, #0]
    8ac4:	429a      	cmp	r2, r3
    8ac6:	d923      	bls.n	8b10 <BrakeBoardStateMachineTask+0x1c1c>
#endif									
				{
					MotorOff(1);
    8ac8:	2001      	movs	r0, #1
    8aca:	4b5d      	ldr	r3, [pc, #372]	; (8c40 <BrakeBoardStateMachineTask+0x1d4c>)
    8acc:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    8ace:	4b65      	ldr	r3, [pc, #404]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8ad0:	781b      	ldrb	r3, [r3, #0]
    8ad2:	2b09      	cmp	r3, #9
    8ad4:	d805      	bhi.n	8ae2 <BrakeBoardStateMachineTask+0x1bee>
					{
						brakeCycleCount++;
    8ad6:	4b63      	ldr	r3, [pc, #396]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	3301      	adds	r3, #1
    8adc:	b2da      	uxtb	r2, r3
    8ade:	4b61      	ldr	r3, [pc, #388]	; (8c64 <BrakeBoardStateMachineTask+0x1d70>)
    8ae0:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8ae2:	2002      	movs	r0, #2
    8ae4:	4b65      	ldr	r3, [pc, #404]	; (8c7c <BrakeBoardStateMachineTask+0x1d88>)
    8ae6:	4798      	blx	r3
    8ae8:	1c03      	adds	r3, r0, #0
    8aea:	2b00      	cmp	r3, #0
    8aec:	d10d      	bne.n	8b0a <BrakeBoardStateMachineTask+0x1c16>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    8aee:	4b55      	ldr	r3, [pc, #340]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8af0:	2207      	movs	r2, #7
    8af2:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    8af4:	4b62      	ldr	r3, [pc, #392]	; (8c80 <BrakeBoardStateMachineTask+0x1d8c>)
    8af6:	2200      	movs	r2, #0
    8af8:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8afa:	4b53      	ldr	r3, [pc, #332]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	2202      	movs	r2, #2
    8b00:	4393      	bics	r3, r2
    8b02:	b2da      	uxtb	r2, r3
    8b04:	4b50      	ldr	r3, [pc, #320]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b06:	701a      	strb	r2, [r3, #0]
    8b08:	e002      	b.n	8b10 <BrakeBoardStateMachineTask+0x1c1c>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    8b0a:	4b4e      	ldr	r3, [pc, #312]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8b0c:	2215      	movs	r2, #21
    8b0e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			//------------------------
			// you are braking ....
			if (done == 0)
    8b10:	1c3b      	adds	r3, r7, #0
    8b12:	330e      	adds	r3, #14
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	2b00      	cmp	r3, #0
    8b18:	d118      	bne.n	8b4c <BrakeBoardStateMachineTask+0x1c58>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8b1a:	4b5a      	ldr	r3, [pc, #360]	; (8c84 <BrakeBoardStateMachineTask+0x1d90>)
    8b1c:	781b      	ldrb	r3, [r3, #0]
    8b1e:	1c1a      	adds	r2, r3, #0
    8b20:	2301      	movs	r3, #1
    8b22:	4013      	ands	r3, r2
    8b24:	d112      	bne.n	8b4c <BrakeBoardStateMachineTask+0x1c58>
				{
					done = 1;
    8b26:	1c3b      	adds	r3, r7, #0
    8b28:	330e      	adds	r3, #14
    8b2a:	2201      	movs	r2, #1
    8b2c:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8b2e:	4b56      	ldr	r3, [pc, #344]	; (8c88 <BrakeBoardStateMachineTask+0x1d94>)
    8b30:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8b32:	4b53      	ldr	r3, [pc, #332]	; (8c80 <BrakeBoardStateMachineTask+0x1d8c>)
    8b34:	2264      	movs	r2, #100	; 0x64
    8b36:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8b38:	4b42      	ldr	r3, [pc, #264]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8b3a:	2216      	movs	r2, #22
    8b3c:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8b3e:	4b42      	ldr	r3, [pc, #264]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b40:	781b      	ldrb	r3, [r3, #0]
    8b42:	2202      	movs	r2, #2
    8b44:	4393      	bics	r3, r2
    8b46:	b2da      	uxtb	r2, r3
    8b48:	4b3f      	ldr	r3, [pc, #252]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b4a:	701a      	strb	r2, [r3, #0]
				}
			}			
			if (done == 0)
    8b4c:	1c3b      	adds	r3, r7, #0
    8b4e:	330e      	adds	r3, #14
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	2b00      	cmp	r3, #0
    8b54:	d107      	bne.n	8b66 <BrakeBoardStateMachineTask+0x1c72>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8b56:	4b4d      	ldr	r3, [pc, #308]	; (8c8c <BrakeBoardStateMachineTask+0x1d98>)
    8b58:	791b      	ldrb	r3, [r3, #4]
    8b5a:	2210      	movs	r2, #16
    8b5c:	4313      	orrs	r3, r2
    8b5e:	b2da      	uxtb	r2, r3
    8b60:	4b4a      	ldr	r3, [pc, #296]	; (8c8c <BrakeBoardStateMachineTask+0x1d98>)
    8b62:	711a      	strb	r2, [r3, #4]
			}
			break;
    8b64:	e066      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
    8b66:	e065      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
		}	
		case BRAKESTATE_ACTIVE_HOLD_MANUAL:
		{
			done = 0;
    8b68:	1c3b      	adds	r3, r7, #0
    8b6a:	330e      	adds	r3, #14
    8b6c:	2200      	movs	r2, #0
    8b6e:	701a      	strb	r2, [r3, #0]
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    8b70:	4b35      	ldr	r3, [pc, #212]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	1c1a      	adds	r2, r3, #0
    8b76:	2302      	movs	r3, #2
    8b78:	4013      	ands	r3, r2
    8b7a:	d02e      	beq.n	8bda <BrakeBoardStateMachineTask+0x1ce6>
    8b7c:	1c3b      	adds	r3, r7, #0
    8b7e:	330e      	adds	r3, #14
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	2b00      	cmp	r3, #0
    8b84:	d129      	bne.n	8bda <BrakeBoardStateMachineTask+0x1ce6>
			{
				done = 1;
    8b86:	1c3b      	adds	r3, r7, #0
    8b88:	330e      	adds	r3, #14
    8b8a:	2201      	movs	r2, #1
    8b8c:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8b8e:	4b2e      	ldr	r3, [pc, #184]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	2202      	movs	r2, #2
    8b94:	4393      	bics	r3, r2
    8b96:	b2da      	uxtb	r2, r3
    8b98:	4b2b      	ldr	r3, [pc, #172]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8b9a:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    8b9c:	2001      	movs	r0, #1
    8b9e:	4b28      	ldr	r3, [pc, #160]	; (8c40 <BrakeBoardStateMachineTask+0x1d4c>)
    8ba0:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8ba2:	2002      	movs	r0, #2
    8ba4:	4b35      	ldr	r3, [pc, #212]	; (8c7c <BrakeBoardStateMachineTask+0x1d88>)
    8ba6:	4798      	blx	r3
    8ba8:	1c03      	adds	r3, r0, #0
    8baa:	2b00      	cmp	r3, #0
    8bac:	d106      	bne.n	8bbc <BrakeBoardStateMachineTask+0x1cc8>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8bae:	4b25      	ldr	r3, [pc, #148]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8bb0:	2207      	movs	r2, #7
    8bb2:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8bb4:	4b32      	ldr	r3, [pc, #200]	; (8c80 <BrakeBoardStateMachineTask+0x1d8c>)
    8bb6:	2200      	movs	r2, #0
    8bb8:	801a      	strh	r2, [r3, #0]
    8bba:	e00e      	b.n	8bda <BrakeBoardStateMachineTask+0x1ce6>
				}
				else
				{
					MotorCCW();
    8bbc:	4b32      	ldr	r3, [pc, #200]	; (8c88 <BrakeBoardStateMachineTask+0x1d94>)
    8bbe:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8bc0:	4b2f      	ldr	r3, [pc, #188]	; (8c80 <BrakeBoardStateMachineTask+0x1d8c>)
    8bc2:	2264      	movs	r2, #100	; 0x64
    8bc4:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8bc6:	4b1f      	ldr	r3, [pc, #124]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8bc8:	2216      	movs	r2, #22
    8bca:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8bcc:	4b1e      	ldr	r3, [pc, #120]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8bce:	781b      	ldrb	r3, [r3, #0]
    8bd0:	2202      	movs	r2, #2
    8bd2:	4393      	bics	r3, r2
    8bd4:	b2da      	uxtb	r2, r3
    8bd6:	4b1c      	ldr	r3, [pc, #112]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8bd8:	701a      	strb	r2, [r3, #0]
				}
			}			
			//------------------------
			// you are braking ....
			if (done == 0)
    8bda:	1c3b      	adds	r3, r7, #0
    8bdc:	330e      	adds	r3, #14
    8bde:	781b      	ldrb	r3, [r3, #0]
    8be0:	2b00      	cmp	r3, #0
    8be2:	d118      	bne.n	8c16 <BrakeBoardStateMachineTask+0x1d22>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8be4:	4b27      	ldr	r3, [pc, #156]	; (8c84 <BrakeBoardStateMachineTask+0x1d90>)
    8be6:	781b      	ldrb	r3, [r3, #0]
    8be8:	1c1a      	adds	r2, r3, #0
    8bea:	2301      	movs	r3, #1
    8bec:	4013      	ands	r3, r2
    8bee:	d112      	bne.n	8c16 <BrakeBoardStateMachineTask+0x1d22>
				{
					done = 1;
    8bf0:	1c3b      	adds	r3, r7, #0
    8bf2:	330e      	adds	r3, #14
    8bf4:	2201      	movs	r2, #1
    8bf6:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8bf8:	4b23      	ldr	r3, [pc, #140]	; (8c88 <BrakeBoardStateMachineTask+0x1d94>)
    8bfa:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8bfc:	4b20      	ldr	r3, [pc, #128]	; (8c80 <BrakeBoardStateMachineTask+0x1d8c>)
    8bfe:	2264      	movs	r2, #100	; 0x64
    8c00:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8c02:	4b10      	ldr	r3, [pc, #64]	; (8c44 <BrakeBoardStateMachineTask+0x1d50>)
    8c04:	2216      	movs	r2, #22
    8c06:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8c08:	4b0f      	ldr	r3, [pc, #60]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	2202      	movs	r2, #2
    8c0e:	4393      	bics	r3, r2
    8c10:	b2da      	uxtb	r2, r3
    8c12:	4b0d      	ldr	r3, [pc, #52]	; (8c48 <BrakeBoardStateMachineTask+0x1d54>)
    8c14:	701a      	strb	r2, [r3, #0]
				}
			}
			if (done == 0)
    8c16:	1c3b      	adds	r3, r7, #0
    8c18:	330e      	adds	r3, #14
    8c1a:	781b      	ldrb	r3, [r3, #0]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d107      	bne.n	8c30 <BrakeBoardStateMachineTask+0x1d3c>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8c20:	4b1a      	ldr	r3, [pc, #104]	; (8c8c <BrakeBoardStateMachineTask+0x1d98>)
    8c22:	791b      	ldrb	r3, [r3, #4]
    8c24:	2210      	movs	r2, #16
    8c26:	4313      	orrs	r3, r2
    8c28:	b2da      	uxtb	r2, r3
    8c2a:	4b18      	ldr	r3, [pc, #96]	; (8c8c <BrakeBoardStateMachineTask+0x1d98>)
    8c2c:	711a      	strb	r2, [r3, #4]
			}
			break;
    8c2e:	e001      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
    8c30:	e000      	b.n	8c34 <BrakeBoardStateMachineTask+0x1d40>
					}
					break;
				}
			}
			}
			break;
    8c32:	46c0      	nop			; (mov r8, r8)
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
			}
			break;
		}	
	}
	BrakeLEDControl();
    8c34:	4b16      	ldr	r3, [pc, #88]	; (8c90 <BrakeBoardStateMachineTask+0x1d9c>)
    8c36:	4798      	blx	r3
}
    8c38:	46bd      	mov	sp, r7
    8c3a:	b005      	add	sp, #20
    8c3c:	bd90      	pop	{r4, r7, pc}
    8c3e:	46c0      	nop			; (mov r8, r8)
    8c40:	00009b75 	.word	0x00009b75
    8c44:	20002ebf 	.word	0x20002ebf
    8c48:	20002eee 	.word	0x20002eee
    8c4c:	20002eb2 	.word	0x20002eb2
    8c50:	0000b4b5 	.word	0x0000b4b5
    8c54:	20002ea6 	.word	0x20002ea6
    8c58:	00009789 	.word	0x00009789
    8c5c:	20002eaa 	.word	0x20002eaa
    8c60:	20002fb8 	.word	0x20002fb8
    8c64:	200004b7 	.word	0x200004b7
    8c68:	00009545 	.word	0x00009545
    8c6c:	20002eea 	.word	0x20002eea
    8c70:	00009829 	.word	0x00009829
    8c74:	20002eac 	.word	0x20002eac
    8c78:	000095c1 	.word	0x000095c1
    8c7c:	000069a1 	.word	0x000069a1
    8c80:	200036c4 	.word	0x200036c4
    8c84:	20002f1c 	.word	0x20002f1c
    8c88:	00009c89 	.word	0x00009c89
    8c8c:	20003694 	.word	0x20003694
    8c90:	00006b7d 	.word	0x00006b7d

00008c94 <ActiveLoadState>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================			
void ActiveLoadState(uint8_t enteringInState)
{
    8c94:	b580      	push	{r7, lr}
    8c96:	b084      	sub	sp, #16
    8c98:	af00      	add	r7, sp, #0
    8c9a:	1c02      	adds	r2, r0, #0
    8c9c:	1dfb      	adds	r3, r7, #7
    8c9e:	701a      	strb	r2, [r3, #0]
	uint8_t done; 
	uint16_t itemp2,itemp3;	
	done = 0; 
    8ca0:	1c3b      	adds	r3, r7, #0
    8ca2:	330f      	adds	r3, #15
    8ca4:	2200      	movs	r2, #0
    8ca6:	701a      	strb	r2, [r3, #0]
	prevBrakeState = 0; 
    8ca8:	4b94      	ldr	r3, [pc, #592]	; (8efc <ActiveLoadState+0x268>)
    8caa:	2200      	movs	r2, #0
    8cac:	701a      	strb	r2, [r3, #0]
	
	if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    8cae:	4b94      	ldr	r3, [pc, #592]	; (8f00 <ActiveLoadState+0x26c>)
    8cb0:	791b      	ldrb	r3, [r3, #4]
    8cb2:	1c1a      	adds	r2, r3, #0
    8cb4:	2308      	movs	r3, #8
    8cb6:	4013      	ands	r3, r2
    8cb8:	d006      	beq.n	8cc8 <ActiveLoadState+0x34>
	{
		brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE;
    8cba:	4b92      	ldr	r3, [pc, #584]	; (8f04 <ActiveLoadState+0x270>)
    8cbc:	2219      	movs	r2, #25
    8cbe:	701a      	strb	r2, [r3, #0]
		done = 1;
    8cc0:	1c3b      	adds	r3, r7, #0
    8cc2:	330f      	adds	r3, #15
    8cc4:	2201      	movs	r2, #1
    8cc6:	701a      	strb	r2, [r3, #0]
	}
	//---------------------check for breakaway
	if ((breakawayRing_pressed == 0) ||
    8cc8:	4b8f      	ldr	r3, [pc, #572]	; (8f08 <ActiveLoadState+0x274>)
    8cca:	881b      	ldrh	r3, [r3, #0]
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d008      	beq.n	8ce2 <ActiveLoadState+0x4e>
	((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8cd0:	4b8d      	ldr	r3, [pc, #564]	; (8f08 <ActiveLoadState+0x274>)
    8cd2:	881b      	ldrh	r3, [r3, #0]
	{
		brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE;
		done = 1;
	}
	//---------------------check for breakaway
	if ((breakawayRing_pressed == 0) ||
    8cd4:	b21b      	sxth	r3, r3
    8cd6:	2b01      	cmp	r3, #1
    8cd8:	d10a      	bne.n	8cf0 <ActiveLoadState+0x5c>
	((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8cda:	4b8c      	ldr	r3, [pc, #560]	; (8f0c <ActiveLoadState+0x278>)
    8cdc:	881b      	ldrh	r3, [r3, #0]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d106      	bne.n	8cf0 <ActiveLoadState+0x5c>
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    8ce2:	4b87      	ldr	r3, [pc, #540]	; (8f00 <ActiveLoadState+0x26c>)
    8ce4:	791b      	ldrb	r3, [r3, #4]
    8ce6:	2202      	movs	r2, #2
    8ce8:	4393      	bics	r3, r2
    8cea:	b2da      	uxtb	r2, r3
    8cec:	4b84      	ldr	r3, [pc, #528]	; (8f00 <ActiveLoadState+0x26c>)
    8cee:	711a      	strb	r2, [r3, #4]
	}
	if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    8cf0:	4b86      	ldr	r3, [pc, #536]	; (8f0c <ActiveLoadState+0x278>)
    8cf2:	881b      	ldrh	r3, [r3, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d00a      	beq.n	8d0e <ActiveLoadState+0x7a>
    8cf8:	4b83      	ldr	r3, [pc, #524]	; (8f08 <ActiveLoadState+0x274>)
    8cfa:	881b      	ldrh	r3, [r3, #0]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d006      	beq.n	8d0e <ActiveLoadState+0x7a>
	(breakawayHoldTimer ==0))
    8d00:	4b83      	ldr	r3, [pc, #524]	; (8f10 <ActiveLoadState+0x27c>)
    8d02:	881b      	ldrh	r3, [r3, #0]
	if ((breakawayRing_pressed == 0) ||
	((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
	}
	if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    8d04:	2b00      	cmp	r3, #0
    8d06:	d102      	bne.n	8d0e <ActiveLoadState+0x7a>
	(breakawayHoldTimer ==0))
	{
		breakawayHoldTimer = 1;
    8d08:	4b81      	ldr	r3, [pc, #516]	; (8f10 <ActiveLoadState+0x27c>)
    8d0a:	2201      	movs	r2, #1
    8d0c:	801a      	strh	r2, [r3, #0]
	}
	if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&(done==0)&& //v1_23 added the done here
    8d0e:	4b7f      	ldr	r3, [pc, #508]	; (8f0c <ActiveLoadState+0x278>)
    8d10:	881b      	ldrh	r3, [r3, #0]
    8d12:	2b00      	cmp	r3, #0
    8d14:	d033      	beq.n	8d7e <ActiveLoadState+0xea>
    8d16:	4b7c      	ldr	r3, [pc, #496]	; (8f08 <ActiveLoadState+0x274>)
    8d18:	881b      	ldrh	r3, [r3, #0]
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d02f      	beq.n	8d7e <ActiveLoadState+0xea>
    8d1e:	1c3b      	adds	r3, r7, #0
    8d20:	330f      	adds	r3, #15
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d12a      	bne.n	8d7e <ActiveLoadState+0xea>
		(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    8d28:	4b79      	ldr	r3, [pc, #484]	; (8f10 <ActiveLoadState+0x27c>)
    8d2a:	881b      	ldrh	r3, [r3, #0]
	if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
	(breakawayHoldTimer ==0))
	{
		breakawayHoldTimer = 1;
	}
	if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&(done==0)&& //v1_23 added the done here
    8d2c:	2b13      	cmp	r3, #19
    8d2e:	d926      	bls.n	8d7e <ActiveLoadState+0xea>
		(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    8d30:	4b73      	ldr	r3, [pc, #460]	; (8f00 <ActiveLoadState+0x26c>)
    8d32:	791b      	ldrb	r3, [r3, #4]
    8d34:	1c1a      	adds	r2, r3, #0
    8d36:	2302      	movs	r3, #2
    8d38:	4013      	ands	r3, r2
    8d3a:	d120      	bne.n	8d7e <ActiveLoadState+0xea>
	{
		done = 1;
    8d3c:	1c3b      	adds	r3, r7, #0
    8d3e:	330f      	adds	r3, #15
    8d40:	2201      	movs	r2, #1
    8d42:	701a      	strb	r2, [r3, #0]
		brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    8d44:	4b6e      	ldr	r3, [pc, #440]	; (8f00 <ActiveLoadState+0x26c>)
    8d46:	791b      	ldrb	r3, [r3, #4]
    8d48:	2202      	movs	r2, #2
    8d4a:	4313      	orrs	r3, r2
    8d4c:	b2da      	uxtb	r2, r3
    8d4e:	4b6c      	ldr	r3, [pc, #432]	; (8f00 <ActiveLoadState+0x26c>)
    8d50:	711a      	strb	r2, [r3, #4]
		brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    8d52:	4b6c      	ldr	r3, [pc, #432]	; (8f04 <ActiveLoadState+0x270>)
    8d54:	2211      	movs	r2, #17
    8d56:	701a      	strb	r2, [r3, #0]
		prevBrakeState = enteringInState;
    8d58:	4b68      	ldr	r3, [pc, #416]	; (8efc <ActiveLoadState+0x268>)
    8d5a:	1dfa      	adds	r2, r7, #7
    8d5c:	7812      	ldrb	r2, [r2, #0]
    8d5e:	701a      	strb	r2, [r3, #0]
		MotorCW();
    8d60:	4b6c      	ldr	r3, [pc, #432]	; (8f14 <ActiveLoadState+0x280>)
    8d62:	4798      	blx	r3
		brakeSupTime = BRAKESUPTIME;
    8d64:	4b6c      	ldr	r3, [pc, #432]	; (8f18 <ActiveLoadState+0x284>)
    8d66:	2264      	movs	r2, #100	; 0x64
    8d68:	801a      	strh	r2, [r3, #0]
		brakeChange &= ~BRAKECHANGE_SUPTIME;
    8d6a:	4b6c      	ldr	r3, [pc, #432]	; (8f1c <ActiveLoadState+0x288>)
    8d6c:	781b      	ldrb	r3, [r3, #0]
    8d6e:	2202      	movs	r2, #2
    8d70:	4393      	bics	r3, r2
    8d72:	b2da      	uxtb	r2, r3
    8d74:	4b69      	ldr	r3, [pc, #420]	; (8f1c <ActiveLoadState+0x288>)
    8d76:	701a      	strb	r2, [r3, #0]
		thresholdmet = 0;
    8d78:	4b69      	ldr	r3, [pc, #420]	; (8f20 <ActiveLoadState+0x28c>)
    8d7a:	2200      	movs	r2, #0
    8d7c:	701a      	strb	r2, [r3, #0]
	}
	//---------------------check for manual
	if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8d7e:	4b69      	ldr	r3, [pc, #420]	; (8f24 <ActiveLoadState+0x290>)
    8d80:	781b      	ldrb	r3, [r3, #0]
    8d82:	1c1a      	adds	r2, r3, #0
    8d84:	2301      	movs	r3, #1
    8d86:	4013      	ands	r3, r2
    8d88:	d106      	bne.n	8d98 <ActiveLoadState+0x104>
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    8d8a:	4b5d      	ldr	r3, [pc, #372]	; (8f00 <ActiveLoadState+0x26c>)
    8d8c:	791b      	ldrb	r3, [r3, #4]
    8d8e:	2210      	movs	r2, #16
    8d90:	4393      	bics	r3, r2
    8d92:	b2da      	uxtb	r2, r3
    8d94:	4b5a      	ldr	r3, [pc, #360]	; (8f00 <ActiveLoadState+0x26c>)
    8d96:	711a      	strb	r2, [r3, #4]
	}
	if (done == 0)
    8d98:	1c3b      	adds	r3, r7, #0
    8d9a:	330f      	adds	r3, #15
    8d9c:	781b      	ldrb	r3, [r3, #0]
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d133      	bne.n	8e0a <ActiveLoadState+0x176>
	{
		if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    8da2:	4b60      	ldr	r3, [pc, #384]	; (8f24 <ActiveLoadState+0x290>)
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	1c1a      	adds	r2, r3, #0
    8da8:	2301      	movs	r3, #1
    8daa:	4013      	ands	r3, r2
    8dac:	d02d      	beq.n	8e0a <ActiveLoadState+0x176>
		((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
    8dae:	4b54      	ldr	r3, [pc, #336]	; (8f00 <ActiveLoadState+0x26c>)
    8db0:	791b      	ldrb	r3, [r3, #4]
    8db2:	1c1a      	adds	r2, r3, #0
    8db4:	2310      	movs	r3, #16
    8db6:	4013      	ands	r3, r2
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
	}
	if (done == 0)
	{
		if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    8db8:	d127      	bne.n	8e0a <ActiveLoadState+0x176>
		((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
		{
			done = 1;
    8dba:	1c3b      	adds	r3, r7, #0
    8dbc:	330f      	adds	r3, #15
    8dbe:	2201      	movs	r2, #1
    8dc0:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8dc2:	4b4f      	ldr	r3, [pc, #316]	; (8f00 <ActiveLoadState+0x26c>)
    8dc4:	791b      	ldrb	r3, [r3, #4]
    8dc6:	2210      	movs	r2, #16
    8dc8:	4313      	orrs	r3, r2
    8dca:	b2da      	uxtb	r2, r3
    8dcc:	4b4c      	ldr	r3, [pc, #304]	; (8f00 <ActiveLoadState+0x26c>)
    8dce:	711a      	strb	r2, [r3, #4]
			brakeState = BRAKESTATE_ACTIVE_EXTEND_MANUAL;
    8dd0:	4b4c      	ldr	r3, [pc, #304]	; (8f04 <ActiveLoadState+0x270>)
    8dd2:	2214      	movs	r2, #20
    8dd4:	701a      	strb	r2, [r3, #0]
			prevBrakeState = enteringInState;			
    8dd6:	4b49      	ldr	r3, [pc, #292]	; (8efc <ActiveLoadState+0x268>)
    8dd8:	1dfa      	adds	r2, r7, #7
    8dda:	7812      	ldrb	r2, [r2, #0]
    8ddc:	701a      	strb	r2, [r3, #0]
			//------------v1.05 boc
			if (brakeInitiationCount <10)
    8dde:	4b52      	ldr	r3, [pc, #328]	; (8f28 <ActiveLoadState+0x294>)
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	2b09      	cmp	r3, #9
    8de4:	d805      	bhi.n	8df2 <ActiveLoadState+0x15e>
			{
				brakeInitiationCount++;
    8de6:	4b50      	ldr	r3, [pc, #320]	; (8f28 <ActiveLoadState+0x294>)
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	3301      	adds	r3, #1
    8dec:	b2da      	uxtb	r2, r3
    8dee:	4b4e      	ldr	r3, [pc, #312]	; (8f28 <ActiveLoadState+0x294>)
    8df0:	701a      	strb	r2, [r3, #0]
			}
			//--------------v1.05 eoc
			MotorCW();
    8df2:	4b48      	ldr	r3, [pc, #288]	; (8f14 <ActiveLoadState+0x280>)
    8df4:	4798      	blx	r3
			brakeSupTime = BRAKESUPTIME;
    8df6:	4b48      	ldr	r3, [pc, #288]	; (8f18 <ActiveLoadState+0x284>)
    8df8:	2264      	movs	r2, #100	; 0x64
    8dfa:	801a      	strh	r2, [r3, #0]
			brakeChange &= ~BRAKECHANGE_SUPTIME;
    8dfc:	4b47      	ldr	r3, [pc, #284]	; (8f1c <ActiveLoadState+0x288>)
    8dfe:	781b      	ldrb	r3, [r3, #0]
    8e00:	2202      	movs	r2, #2
    8e02:	4393      	bics	r3, r2
    8e04:	b2da      	uxtb	r2, r3
    8e06:	4b45      	ldr	r3, [pc, #276]	; (8f1c <ActiveLoadState+0x288>)
    8e08:	701a      	strb	r2, [r3, #0]
		}
	}
	//------------------------
	// check accelerometer.
	if (done==0)
    8e0a:	1c3b      	adds	r3, r7, #0
    8e0c:	330f      	adds	r3, #15
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	2b00      	cmp	r3, #0
    8e12:	d16c      	bne.n	8eee <ActiveLoadState+0x25a>
	{
		tempdiffx = MotorGetAcc(FALSE);
    8e14:	2000      	movs	r0, #0
    8e16:	4b45      	ldr	r3, [pc, #276]	; (8f2c <ActiveLoadState+0x298>)
    8e18:	4798      	blx	r3
    8e1a:	1c03      	adds	r3, r0, #0
    8e1c:	1c1a      	adds	r2, r3, #0
    8e1e:	4b44      	ldr	r3, [pc, #272]	; (8f30 <ActiveLoadState+0x29c>)
    8e20:	801a      	strh	r2, [r3, #0]
		itemp2 = table0.Item.SensitivitySet;;
    8e22:	4b44      	ldr	r3, [pc, #272]	; (8f34 <ActiveLoadState+0x2a0>)
    8e24:	7eda      	ldrb	r2, [r3, #27]
    8e26:	1c3b      	adds	r3, r7, #0
    8e28:	330c      	adds	r3, #12
    8e2a:	801a      	strh	r2, [r3, #0]
		if (itemp2 >9)
    8e2c:	1c3b      	adds	r3, r7, #0
    8e2e:	330c      	adds	r3, #12
    8e30:	881b      	ldrh	r3, [r3, #0]
    8e32:	2b09      	cmp	r3, #9
    8e34:	d903      	bls.n	8e3e <ActiveLoadState+0x1aa>
		{
			itemp2 = 0;
    8e36:	1c3b      	adds	r3, r7, #0
    8e38:	330c      	adds	r3, #12
    8e3a:	2200      	movs	r2, #0
    8e3c:	801a      	strh	r2, [r3, #0]
		}
		itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    8e3e:	1c3a      	adds	r2, r7, #0
    8e40:	320c      	adds	r2, #12
    8e42:	1c3b      	adds	r3, r7, #0
    8e44:	330c      	adds	r3, #12
    8e46:	881b      	ldrh	r3, [r3, #0]
    8e48:	1c19      	adds	r1, r3, #0
    8e4a:	00c9      	lsls	r1, r1, #3
    8e4c:	18cb      	adds	r3, r1, r3
    8e4e:	1c19      	adds	r1, r3, #0
    8e50:	00c8      	lsls	r0, r1, #3
    8e52:	1c19      	adds	r1, r3, #0
    8e54:	1c03      	adds	r3, r0, #0
    8e56:	18cb      	adds	r3, r1, r3
    8e58:	8013      	strh	r3, [r2, #0]
		itemp2 = itemp2 + ACC_SIXTEENTHS_G;
    8e5a:	1c3b      	adds	r3, r7, #0
    8e5c:	330c      	adds	r3, #12
    8e5e:	1c3a      	adds	r2, r7, #0
    8e60:	320c      	adds	r2, #12
    8e62:	8812      	ldrh	r2, [r2, #0]
    8e64:	2180      	movs	r1, #128	; 0x80
    8e66:	00c9      	lsls	r1, r1, #3
    8e68:	1852      	adds	r2, r2, r1
    8e6a:	801a      	strh	r2, [r3, #0]
		if (AccelProvideDecisions(itemp2,DECISION_GREATER,motorAccXBaseline)!=0) //V062 was ACC_SIXTEENTHS_G
    8e6c:	1c3b      	adds	r3, r7, #0
    8e6e:	330c      	adds	r3, #12
    8e70:	881a      	ldrh	r2, [r3, #0]
    8e72:	4b31      	ldr	r3, [pc, #196]	; (8f38 <ActiveLoadState+0x2a4>)
    8e74:	881b      	ldrh	r3, [r3, #0]
    8e76:	b212      	sxth	r2, r2
    8e78:	b21b      	sxth	r3, r3
    8e7a:	1c10      	adds	r0, r2, #0
    8e7c:	2101      	movs	r1, #1
    8e7e:	1c1a      	adds	r2, r3, #0
    8e80:	4b2e      	ldr	r3, [pc, #184]	; (8f3c <ActiveLoadState+0x2a8>)
    8e82:	4798      	blx	r3
    8e84:	1c03      	adds	r3, r0, #0
    8e86:	2b00      	cmp	r3, #0
    8e88:	d02d      	beq.n	8ee6 <ActiveLoadState+0x252>
		{
			thresholdmet++;
    8e8a:	4b25      	ldr	r3, [pc, #148]	; (8f20 <ActiveLoadState+0x28c>)
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	3301      	adds	r3, #1
    8e90:	b2da      	uxtb	r2, r3
    8e92:	4b23      	ldr	r3, [pc, #140]	; (8f20 <ActiveLoadState+0x28c>)
    8e94:	701a      	strb	r2, [r3, #0]
			//					if (thresholdmet >= MAX_THRESHOLD_NEEDED)
			//					{
			done = 1;
    8e96:	1c3b      	adds	r3, r7, #0
    8e98:	330f      	adds	r3, #15
    8e9a:	2201      	movs	r2, #1
    8e9c:	701a      	strb	r2, [r3, #0]
			thresholdmet = MAX_THRESHOLD_NEEDED;
    8e9e:	4b20      	ldr	r3, [pc, #128]	; (8f20 <ActiveLoadState+0x28c>)
    8ea0:	2203      	movs	r2, #3
    8ea2:	701a      	strb	r2, [r3, #0]
			brakeState = BRAKESTATE_ACTIVE_EXTEND;
    8ea4:	4b17      	ldr	r3, [pc, #92]	; (8f04 <ActiveLoadState+0x270>)
    8ea6:	220a      	movs	r2, #10
    8ea8:	701a      	strb	r2, [r3, #0]
			prevBrakeState = enteringInState;
    8eaa:	4b14      	ldr	r3, [pc, #80]	; (8efc <ActiveLoadState+0x268>)
    8eac:	1dfa      	adds	r2, r7, #7
    8eae:	7812      	ldrb	r2, [r2, #0]
    8eb0:	701a      	strb	r2, [r3, #0]
			//------------v1.05 boc
			if (brakeInitiationCount <10)
    8eb2:	4b1d      	ldr	r3, [pc, #116]	; (8f28 <ActiveLoadState+0x294>)
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	2b09      	cmp	r3, #9
    8eb8:	d805      	bhi.n	8ec6 <ActiveLoadState+0x232>
			{
				brakeInitiationCount++;
    8eba:	4b1b      	ldr	r3, [pc, #108]	; (8f28 <ActiveLoadState+0x294>)
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	3301      	adds	r3, #1
    8ec0:	b2da      	uxtb	r2, r3
    8ec2:	4b19      	ldr	r3, [pc, #100]	; (8f28 <ActiveLoadState+0x294>)
    8ec4:	701a      	strb	r2, [r3, #0]
			//--------------v1.05 eoc
			//----------------------------------
			// EXTEND -
			// 1. set max time to 5 seconds
			// 2. set hold max time to 15 seconds
			MotorCW();
    8ec6:	4b13      	ldr	r3, [pc, #76]	; (8f14 <ActiveLoadState+0x280>)
    8ec8:	4798      	blx	r3
			thresholdmet = 0;   //01_39_#1
    8eca:	4b15      	ldr	r3, [pc, #84]	; (8f20 <ActiveLoadState+0x28c>)
    8ecc:	2200      	movs	r2, #0
    8ece:	701a      	strb	r2, [r3, #0]
			brakeSupTime = BRAKESUPTIME;
    8ed0:	4b11      	ldr	r3, [pc, #68]	; (8f18 <ActiveLoadState+0x284>)
    8ed2:	2264      	movs	r2, #100	; 0x64
    8ed4:	801a      	strh	r2, [r3, #0]
			brakeChange &= ~BRAKECHANGE_SUPTIME;
    8ed6:	4b11      	ldr	r3, [pc, #68]	; (8f1c <ActiveLoadState+0x288>)
    8ed8:	781b      	ldrb	r3, [r3, #0]
    8eda:	2202      	movs	r2, #2
    8edc:	4393      	bics	r3, r2
    8ede:	b2da      	uxtb	r2, r3
    8ee0:	4b0e      	ldr	r3, [pc, #56]	; (8f1c <ActiveLoadState+0x288>)
    8ee2:	701a      	strb	r2, [r3, #0]
    8ee4:	e006      	b.n	8ef4 <ActiveLoadState+0x260>
			//					}
		}
		else
		{
			thresholdmet = 0;
    8ee6:	4b0e      	ldr	r3, [pc, #56]	; (8f20 <ActiveLoadState+0x28c>)
    8ee8:	2200      	movs	r2, #0
    8eea:	701a      	strb	r2, [r3, #0]
    8eec:	e002      	b.n	8ef4 <ActiveLoadState+0x260>
		}
	}
	else
	{
		thresholdmet = 0;
    8eee:	4b0c      	ldr	r3, [pc, #48]	; (8f20 <ActiveLoadState+0x28c>)
    8ef0:	2200      	movs	r2, #0
    8ef2:	701a      	strb	r2, [r3, #0]
	}
}
    8ef4:	46bd      	mov	sp, r7
    8ef6:	b004      	add	sp, #16
    8ef8:	bd80      	pop	{r7, pc}
    8efa:	46c0      	nop			; (mov r8, r8)
    8efc:	20002ea4 	.word	0x20002ea4
    8f00:	20003694 	.word	0x20003694
    8f04:	20002ebf 	.word	0x20002ebf
    8f08:	2000306a 	.word	0x2000306a
    8f0c:	20003070 	.word	0x20003070
    8f10:	20002ef2 	.word	0x20002ef2
    8f14:	00009d45 	.word	0x00009d45
    8f18:	200036c4 	.word	0x200036c4
    8f1c:	20002eee 	.word	0x20002eee
    8f20:	200004b2 	.word	0x200004b2
    8f24:	20002f1c 	.word	0x20002f1c
    8f28:	200004b6 	.word	0x200004b6
    8f2c:	0000914d 	.word	0x0000914d
    8f30:	20002ec4 	.word	0x20002ec4
    8f34:	20002fb8 	.word	0x20002fb8
    8f38:	20002ef4 	.word	0x20002ef4
    8f3c:	00005b7d 	.word	0x00005b7d

00008f40 <MotorNeedNewBaseline>:

//XXXXXXXXXXXXXXXXXXXXXXXXX DEACCELERATION DETECTION XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
int16_t motorTempDiffx = 0;

void MotorNeedNewBaseline(void)
{
    8f40:	b580      	push	{r7, lr}
    8f42:	af00      	add	r7, sp, #0
	needNewBaseline=1;
    8f44:	4b03      	ldr	r3, [pc, #12]	; (8f54 <MotorNeedNewBaseline+0x14>)
    8f46:	2201      	movs	r2, #1
    8f48:	701a      	strb	r2, [r3, #0]
	needNewBaselineTimer=NEEDNEWBASELINE_TIME; 
    8f4a:	4b03      	ldr	r3, [pc, #12]	; (8f58 <MotorNeedNewBaseline+0x18>)
    8f4c:	2264      	movs	r2, #100	; 0x64
    8f4e:	801a      	strh	r2, [r3, #0]
}
    8f50:	46bd      	mov	sp, r7
    8f52:	bd80      	pop	{r7, pc}
    8f54:	20000000 	.word	0x20000000
    8f58:	20000644 	.word	0x20000644

00008f5c <MotorBuildGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
void MotorBuildGetAcc(void)
{
    8f5c:	b590      	push	{r4, r7, lr}
    8f5e:	b085      	sub	sp, #20
    8f60:	af00      	add	r7, sp, #0
	int16_t mytempdiffx,newMotorx;
	uint8_t change;
	int32_t ltemp;
	
	mytempdiffx = 0;
    8f62:	1c3b      	adds	r3, r7, #0
    8f64:	330e      	adds	r3, #14
    8f66:	2200      	movs	r2, #0
    8f68:	801a      	strh	r2, [r3, #0]
	//   when some event requires this to happen -
	//   events noted today: power-up, just return to home, acceleration detected (-g)
	// DURING needNewBaseline - mytempdiffx returned will be zero 0000000000
	// needNewBaseline will be on a 10 second timer.
	//----------------------------------------
	if (AccelProvideReadingChange(&motorx,&motory,&motorz,&change)!= 0)
    8f6a:	4866      	ldr	r0, [pc, #408]	; (9104 <MotorBuildGetAcc+0x1a8>)
    8f6c:	4966      	ldr	r1, [pc, #408]	; (9108 <MotorBuildGetAcc+0x1ac>)
    8f6e:	4a67      	ldr	r2, [pc, #412]	; (910c <MotorBuildGetAcc+0x1b0>)
    8f70:	1d7b      	adds	r3, r7, #5
    8f72:	4c67      	ldr	r4, [pc, #412]	; (9110 <MotorBuildGetAcc+0x1b4>)
    8f74:	47a0      	blx	r4
    8f76:	1c03      	adds	r3, r0, #0
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d100      	bne.n	8f7e <MotorBuildGetAcc+0x22>
    8f7c:	e0b1      	b.n	90e2 <MotorBuildGetAcc+0x186>
	{
//v01_26		if ((change != 0)&&(hlimitState == 0))
		if ((change != 0)&&((hlimitState == 0)||(homeLimit == HOME_IN)))		
    8f7e:	1d7b      	adds	r3, r7, #5
    8f80:	781b      	ldrb	r3, [r3, #0]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d100      	bne.n	8f88 <MotorBuildGetAcc+0x2c>
    8f86:	e098      	b.n	90ba <MotorBuildGetAcc+0x15e>
    8f88:	4b62      	ldr	r3, [pc, #392]	; (9114 <MotorBuildGetAcc+0x1b8>)
    8f8a:	781b      	ldrb	r3, [r3, #0]
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d004      	beq.n	8f9a <MotorBuildGetAcc+0x3e>
    8f90:	4b61      	ldr	r3, [pc, #388]	; (9118 <MotorBuildGetAcc+0x1bc>)
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d000      	beq.n	8f9a <MotorBuildGetAcc+0x3e>
    8f98:	e08f      	b.n	90ba <MotorBuildGetAcc+0x15e>
		{
			newMotorx = (int16_t)motorx;
    8f9a:	4b5a      	ldr	r3, [pc, #360]	; (9104 <MotorBuildGetAcc+0x1a8>)
    8f9c:	881a      	ldrh	r2, [r3, #0]
    8f9e:	1dbb      	adds	r3, r7, #6
    8fa0:	801a      	strh	r2, [r3, #0]
			ltemp = (int32_t)motorAccXBaseline;
    8fa2:	4b5e      	ldr	r3, [pc, #376]	; (911c <MotorBuildGetAcc+0x1c0>)
    8fa4:	881b      	ldrh	r3, [r3, #0]
    8fa6:	b21b      	sxth	r3, r3
    8fa8:	60bb      	str	r3, [r7, #8]
			
			if (needNewBaseline != 0)
    8faa:	4b5d      	ldr	r3, [pc, #372]	; (9120 <MotorBuildGetAcc+0x1c4>)
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d041      	beq.n	9036 <MotorBuildGetAcc+0xda>
			{
				if (newMotorx >0)
    8fb2:	1dbb      	adds	r3, r7, #6
    8fb4:	2200      	movs	r2, #0
    8fb6:	5e9b      	ldrsh	r3, [r3, r2]
    8fb8:	2b00      	cmp	r3, #0
    8fba:	dd11      	ble.n	8fe0 <MotorBuildGetAcc+0x84>
				{
					ltemp = ltemp * 100;
    8fbc:	68bb      	ldr	r3, [r7, #8]
    8fbe:	2264      	movs	r2, #100	; 0x64
    8fc0:	4353      	muls	r3, r2
    8fc2:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8fc4:	1dbb      	adds	r3, r7, #6
    8fc6:	2200      	movs	r2, #0
    8fc8:	5e9b      	ldrsh	r3, [r3, r2]
    8fca:	68ba      	ldr	r2, [r7, #8]
    8fcc:	18d3      	adds	r3, r2, r3
    8fce:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8fd0:	68ba      	ldr	r2, [r7, #8]
    8fd2:	4b54      	ldr	r3, [pc, #336]	; (9124 <MotorBuildGetAcc+0x1c8>)
    8fd4:	1c10      	adds	r0, r2, #0
    8fd6:	2165      	movs	r1, #101	; 0x65
    8fd8:	4798      	blx	r3
    8fda:	1c03      	adds	r3, r0, #0
    8fdc:	60bb      	str	r3, [r7, #8]
    8fde:	e010      	b.n	9002 <MotorBuildGetAcc+0xa6>
				}
				else
				{
					ltemp = ltemp * 100;
    8fe0:	68bb      	ldr	r3, [r7, #8]
    8fe2:	2264      	movs	r2, #100	; 0x64
    8fe4:	4353      	muls	r3, r2
    8fe6:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8fe8:	1dbb      	adds	r3, r7, #6
    8fea:	2200      	movs	r2, #0
    8fec:	5e9b      	ldrsh	r3, [r3, r2]
    8fee:	68ba      	ldr	r2, [r7, #8]
    8ff0:	18d3      	adds	r3, r2, r3
    8ff2:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8ff4:	68ba      	ldr	r2, [r7, #8]
    8ff6:	4b4b      	ldr	r3, [pc, #300]	; (9124 <MotorBuildGetAcc+0x1c8>)
    8ff8:	1c10      	adds	r0, r2, #0
    8ffa:	2165      	movs	r1, #101	; 0x65
    8ffc:	4798      	blx	r3
    8ffe:	1c03      	adds	r3, r0, #0
    9000:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    9002:	4b49      	ldr	r3, [pc, #292]	; (9128 <MotorBuildGetAcc+0x1cc>)
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	2b00      	cmp	r3, #0
    9008:	d106      	bne.n	9018 <MotorBuildGetAcc+0xbc>
				{
					ltemp = newMotorx;
    900a:	1dbb      	adds	r3, r7, #6
    900c:	2200      	movs	r2, #0
    900e:	5e9b      	ldrsh	r3, [r3, r2]
    9010:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    9012:	4b45      	ldr	r3, [pc, #276]	; (9128 <MotorBuildGetAcc+0x1cc>)
    9014:	2201      	movs	r2, #1
    9016:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    9018:	68bb      	ldr	r3, [r7, #8]
    901a:	b29a      	uxth	r2, r3
    901c:	4b3f      	ldr	r3, [pc, #252]	; (911c <MotorBuildGetAcc+0x1c0>)
    901e:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    9020:	4b39      	ldr	r3, [pc, #228]	; (9108 <MotorBuildGetAcc+0x1ac>)
    9022:	881b      	ldrh	r3, [r3, #0]
    9024:	b29a      	uxth	r2, r3
    9026:	4b41      	ldr	r3, [pc, #260]	; (912c <MotorBuildGetAcc+0x1d0>)
    9028:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;				
    902a:	4b38      	ldr	r3, [pc, #224]	; (910c <MotorBuildGetAcc+0x1b0>)
    902c:	881b      	ldrh	r3, [r3, #0]
    902e:	b29a      	uxth	r2, r3
    9030:	4b3f      	ldr	r3, [pc, #252]	; (9130 <MotorBuildGetAcc+0x1d4>)
    9032:	801a      	strh	r2, [r3, #0]
    9034:	e041      	b.n	90ba <MotorBuildGetAcc+0x15e>
			}
			else
			{
				if (newMotorx >0)
    9036:	1dbb      	adds	r3, r7, #6
    9038:	2200      	movs	r2, #0
    903a:	5e9b      	ldrsh	r3, [r3, r2]
    903c:	2b00      	cmp	r3, #0
    903e:	dd12      	ble.n	9066 <MotorBuildGetAcc+0x10a>
				{
					ltemp = ltemp * 1000;
    9040:	68bb      	ldr	r3, [r7, #8]
    9042:	22fa      	movs	r2, #250	; 0xfa
    9044:	0092      	lsls	r2, r2, #2
    9046:	4353      	muls	r3, r2
    9048:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    904a:	1dbb      	adds	r3, r7, #6
    904c:	2200      	movs	r2, #0
    904e:	5e9b      	ldrsh	r3, [r3, r2]
    9050:	68ba      	ldr	r2, [r7, #8]
    9052:	18d3      	adds	r3, r2, r3
    9054:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/1001;
    9056:	68ba      	ldr	r2, [r7, #8]
    9058:	4b32      	ldr	r3, [pc, #200]	; (9124 <MotorBuildGetAcc+0x1c8>)
    905a:	1c10      	adds	r0, r2, #0
    905c:	4935      	ldr	r1, [pc, #212]	; (9134 <MotorBuildGetAcc+0x1d8>)
    905e:	4798      	blx	r3
    9060:	1c03      	adds	r3, r0, #0
    9062:	60bb      	str	r3, [r7, #8]
    9064:	e010      	b.n	9088 <MotorBuildGetAcc+0x12c>
				}
				else
				{
					ltemp = ltemp * 5000;
    9066:	68bb      	ldr	r3, [r7, #8]
    9068:	4a33      	ldr	r2, [pc, #204]	; (9138 <MotorBuildGetAcc+0x1dc>)
    906a:	4353      	muls	r3, r2
    906c:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    906e:	1dbb      	adds	r3, r7, #6
    9070:	2200      	movs	r2, #0
    9072:	5e9b      	ldrsh	r3, [r3, r2]
    9074:	68ba      	ldr	r2, [r7, #8]
    9076:	18d3      	adds	r3, r2, r3
    9078:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/5001;
    907a:	68ba      	ldr	r2, [r7, #8]
    907c:	4b29      	ldr	r3, [pc, #164]	; (9124 <MotorBuildGetAcc+0x1c8>)
    907e:	1c10      	adds	r0, r2, #0
    9080:	492e      	ldr	r1, [pc, #184]	; (913c <MotorBuildGetAcc+0x1e0>)
    9082:	4798      	blx	r3
    9084:	1c03      	adds	r3, r0, #0
    9086:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    9088:	4b27      	ldr	r3, [pc, #156]	; (9128 <MotorBuildGetAcc+0x1cc>)
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	2b00      	cmp	r3, #0
    908e:	d106      	bne.n	909e <MotorBuildGetAcc+0x142>
				{
					ltemp = newMotorx;
    9090:	1dbb      	adds	r3, r7, #6
    9092:	2200      	movs	r2, #0
    9094:	5e9b      	ldrsh	r3, [r3, r2]
    9096:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    9098:	4b23      	ldr	r3, [pc, #140]	; (9128 <MotorBuildGetAcc+0x1cc>)
    909a:	2201      	movs	r2, #1
    909c:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    909e:	68bb      	ldr	r3, [r7, #8]
    90a0:	b29a      	uxth	r2, r3
    90a2:	4b1e      	ldr	r3, [pc, #120]	; (911c <MotorBuildGetAcc+0x1c0>)
    90a4:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    90a6:	4b18      	ldr	r3, [pc, #96]	; (9108 <MotorBuildGetAcc+0x1ac>)
    90a8:	881b      	ldrh	r3, [r3, #0]
    90aa:	b29a      	uxth	r2, r3
    90ac:	4b1f      	ldr	r3, [pc, #124]	; (912c <MotorBuildGetAcc+0x1d0>)
    90ae:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;
    90b0:	4b16      	ldr	r3, [pc, #88]	; (910c <MotorBuildGetAcc+0x1b0>)
    90b2:	881b      	ldrh	r3, [r3, #0]
    90b4:	b29a      	uxth	r2, r3
    90b6:	4b1e      	ldr	r3, [pc, #120]	; (9130 <MotorBuildGetAcc+0x1d4>)
    90b8:	801a      	strh	r2, [r3, #0]
			}
		}
		tempx = (int16_t)motorx;
    90ba:	4b12      	ldr	r3, [pc, #72]	; (9104 <MotorBuildGetAcc+0x1a8>)
    90bc:	881b      	ldrh	r3, [r3, #0]
    90be:	b29a      	uxth	r2, r3
    90c0:	4b1f      	ldr	r3, [pc, #124]	; (9140 <MotorBuildGetAcc+0x1e4>)
    90c2:	801a      	strh	r2, [r3, #0]
		tempbasex = (int16_t) motorAccXBaseline;
    90c4:	4b15      	ldr	r3, [pc, #84]	; (911c <MotorBuildGetAcc+0x1c0>)
    90c6:	881a      	ldrh	r2, [r3, #0]
    90c8:	4b1e      	ldr	r3, [pc, #120]	; (9144 <MotorBuildGetAcc+0x1e8>)
    90ca:	801a      	strh	r2, [r3, #0]
		mytempdiffx = tempx- tempbasex;
    90cc:	4b1c      	ldr	r3, [pc, #112]	; (9140 <MotorBuildGetAcc+0x1e4>)
    90ce:	881b      	ldrh	r3, [r3, #0]
    90d0:	b29a      	uxth	r2, r3
    90d2:	4b1c      	ldr	r3, [pc, #112]	; (9144 <MotorBuildGetAcc+0x1e8>)
    90d4:	881b      	ldrh	r3, [r3, #0]
    90d6:	b29b      	uxth	r3, r3
    90d8:	1ad3      	subs	r3, r2, r3
    90da:	b29a      	uxth	r2, r3
    90dc:	1c3b      	adds	r3, r7, #0
    90de:	330e      	adds	r3, #14
    90e0:	801a      	strh	r2, [r3, #0]
		
	}
	if (needNewBaseline != 0)
    90e2:	4b0f      	ldr	r3, [pc, #60]	; (9120 <MotorBuildGetAcc+0x1c4>)
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	2b00      	cmp	r3, #0
    90e8:	d003      	beq.n	90f2 <MotorBuildGetAcc+0x196>
	{
		mytempdiffx = 0; 
    90ea:	1c3b      	adds	r3, r7, #0
    90ec:	330e      	adds	r3, #14
    90ee:	2200      	movs	r2, #0
    90f0:	801a      	strh	r2, [r3, #0]
	}
	motorTempDiffx = mytempdiffx;
    90f2:	4b15      	ldr	r3, [pc, #84]	; (9148 <MotorBuildGetAcc+0x1ec>)
    90f4:	1c3a      	adds	r2, r7, #0
    90f6:	320e      	adds	r2, #14
    90f8:	8812      	ldrh	r2, [r2, #0]
    90fa:	801a      	strh	r2, [r3, #0]
}
    90fc:	46bd      	mov	sp, r7
    90fe:	b005      	add	sp, #20
    9100:	bd90      	pop	{r4, r7, pc}
    9102:	46c0      	nop			; (mov r8, r8)
    9104:	20002ef0 	.word	0x20002ef0
    9108:	20002ea8 	.word	0x20002ea8
    910c:	20002ebc 	.word	0x20002ebc
    9110:	00005c81 	.word	0x00005c81
    9114:	20003068 	.word	0x20003068
    9118:	20000001 	.word	0x20000001
    911c:	20002ef4 	.word	0x20002ef4
    9120:	20000000 	.word	0x20000000
    9124:	00015875 	.word	0x00015875
    9128:	20002ece 	.word	0x20002ece
    912c:	20002eae 	.word	0x20002eae
    9130:	20002ec0 	.word	0x20002ec0
    9134:	000003e9 	.word	0x000003e9
    9138:	00001388 	.word	0x00001388
    913c:	00001389 	.word	0x00001389
    9140:	20002eda 	.word	0x20002eda
    9144:	20002edc 	.word	0x20002edc
    9148:	200004b8 	.word	0x200004b8

0000914c <MotorGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
int16_t MotorGetAcc(uint8_t activeBraking)
{
    914c:	b580      	push	{r7, lr}
    914e:	b082      	sub	sp, #8
    9150:	af00      	add	r7, sp, #0
    9152:	1c02      	adds	r2, r0, #0
    9154:	1dfb      	adds	r3, r7, #7
    9156:	701a      	strb	r2, [r3, #0]
	return motorTempDiffx;
    9158:	4b03      	ldr	r3, [pc, #12]	; (9168 <MotorGetAcc+0x1c>)
    915a:	881b      	ldrh	r3, [r3, #0]
    915c:	b21b      	sxth	r3, r3
}
    915e:	1c18      	adds	r0, r3, #0
    9160:	46bd      	mov	sp, r7
    9162:	b002      	add	sp, #8
    9164:	bd80      	pop	{r7, pc}
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	200004b8 	.word	0x200004b8

0000916c <CurrentMotorCalculated>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculated(void)
{
    916c:	b580      	push	{r7, lr}
    916e:	b084      	sub	sp, #16
    9170:	af00      	add	r7, sp, #0
	uint32_t ltemp1,temp2;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    9172:	1c3b      	adds	r3, r7, #0
    9174:	330a      	adds	r3, #10
    9176:	2200      	movs	r2, #0
    9178:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    917a:	4b46      	ldr	r3, [pc, #280]	; (9294 <CurrentMotorCalculated+0x128>)
    917c:	7d9a      	ldrb	r2, [r3, #22]
    917e:	4b46      	ldr	r3, [pc, #280]	; (9298 <CurrentMotorCalculated+0x12c>)
    9180:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9182:	4b44      	ldr	r3, [pc, #272]	; (9294 <CurrentMotorCalculated+0x128>)
    9184:	789a      	ldrb	r2, [r3, #2]
    9186:	4b45      	ldr	r3, [pc, #276]	; (929c <CurrentMotorCalculated+0x130>)
    9188:	701a      	strb	r2, [r3, #0]
	
	if ((fm<1)||(fm>9))
    918a:	4b43      	ldr	r3, [pc, #268]	; (9298 <CurrentMotorCalculated+0x12c>)
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	2b00      	cmp	r3, #0
    9190:	d003      	beq.n	919a <CurrentMotorCalculated+0x2e>
    9192:	4b41      	ldr	r3, [pc, #260]	; (9298 <CurrentMotorCalculated+0x12c>)
    9194:	781b      	ldrb	r3, [r3, #0]
    9196:	2b09      	cmp	r3, #9
    9198:	d902      	bls.n	91a0 <CurrentMotorCalculated+0x34>
	{
		fm = 5;
    919a:	4b3f      	ldr	r3, [pc, #252]	; (9298 <CurrentMotorCalculated+0x12c>)
    919c:	2205      	movs	r2, #5
    919e:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    91a0:	4b3e      	ldr	r3, [pc, #248]	; (929c <CurrentMotorCalculated+0x130>)
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	2b00      	cmp	r3, #0
    91a6:	d003      	beq.n	91b0 <CurrentMotorCalculated+0x44>
    91a8:	4b3c      	ldr	r3, [pc, #240]	; (929c <CurrentMotorCalculated+0x130>)
    91aa:	781b      	ldrb	r3, [r3, #0]
    91ac:	2b09      	cmp	r3, #9
    91ae:	d902      	bls.n	91b6 <CurrentMotorCalculated+0x4a>
	{
		gain = 5;
    91b0:	4b3a      	ldr	r3, [pc, #232]	; (929c <CurrentMotorCalculated+0x130>)
    91b2:	2205      	movs	r2, #5
    91b4:	701a      	strb	r2, [r3, #0]
	}		 
	instantGain = MotorGetAcc(TRUE);
    91b6:	2001      	movs	r0, #1
    91b8:	4b39      	ldr	r3, [pc, #228]	; (92a0 <CurrentMotorCalculated+0x134>)
    91ba:	4798      	blx	r3
    91bc:	1c03      	adds	r3, r0, #0
    91be:	b29a      	uxth	r2, r3
    91c0:	4b38      	ldr	r3, [pc, #224]	; (92a4 <CurrentMotorCalculated+0x138>)
    91c2:	801a      	strh	r2, [r3, #0]
	if (instantGain > 0)
    91c4:	4b37      	ldr	r3, [pc, #220]	; (92a4 <CurrentMotorCalculated+0x138>)
    91c6:	881b      	ldrh	r3, [r3, #0]
    91c8:	2b00      	cmp	r3, #0
    91ca:	d102      	bne.n	91d2 <CurrentMotorCalculated+0x66>
//		instantGain = -1 * instantGain; 
//		instantGain =1; 
	}
	else
	{
		instantGain =0;  //1; 
    91cc:	4b35      	ldr	r3, [pc, #212]	; (92a4 <CurrentMotorCalculated+0x138>)
    91ce:	2200      	movs	r2, #0
    91d0:	801a      	strh	r2, [r3, #0]
//	{
//		instantGain = -1 * instantGain; 
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = instantGain * (gain*10)/5;
    91d2:	4b34      	ldr	r3, [pc, #208]	; (92a4 <CurrentMotorCalculated+0x138>)
    91d4:	881b      	ldrh	r3, [r3, #0]
    91d6:	1c19      	adds	r1, r3, #0
    91d8:	4b30      	ldr	r3, [pc, #192]	; (929c <CurrentMotorCalculated+0x130>)
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	1c1a      	adds	r2, r3, #0
    91de:	1c13      	adds	r3, r2, #0
    91e0:	009b      	lsls	r3, r3, #2
    91e2:	189b      	adds	r3, r3, r2
    91e4:	005b      	lsls	r3, r3, #1
    91e6:	1c1a      	adds	r2, r3, #0
    91e8:	434a      	muls	r2, r1
    91ea:	4b2f      	ldr	r3, [pc, #188]	; (92a8 <CurrentMotorCalculated+0x13c>)
    91ec:	1c10      	adds	r0, r2, #0
    91ee:	2105      	movs	r1, #5
    91f0:	4798      	blx	r3
    91f2:	1c03      	adds	r3, r0, #0
    91f4:	60fb      	str	r3, [r7, #12]
		temp2 = temp2/10; 
    91f6:	68fa      	ldr	r2, [r7, #12]
    91f8:	4b2c      	ldr	r3, [pc, #176]	; (92ac <CurrentMotorCalculated+0x140>)
    91fa:	1c10      	adds	r0, r2, #0
    91fc:	210a      	movs	r1, #10
    91fe:	4798      	blx	r3
    9200:	1c03      	adds	r3, r0, #0
    9202:	60fb      	str	r3, [r7, #12]
		if (temp2 > ACC_HALF_G)
    9204:	68fa      	ldr	r2, [r7, #12]
    9206:	2380      	movs	r3, #128	; 0x80
    9208:	019b      	lsls	r3, r3, #6
    920a:	429a      	cmp	r2, r3
    920c:	d902      	bls.n	9214 <CurrentMotorCalculated+0xa8>
		{
			temp2 = ACC_HALF_G; 
    920e:	2380      	movs	r3, #128	; 0x80
    9210:	019b      	lsls	r3, r3, #6
    9212:	60fb      	str	r3, [r7, #12]
		}
		ltemp = temp2;
    9214:	4b26      	ldr	r3, [pc, #152]	; (92b0 <CurrentMotorCalculated+0x144>)
    9216:	68fa      	ldr	r2, [r7, #12]
    9218:	601a      	str	r2, [r3, #0]
		ltemp = ltemp * 100; 
    921a:	4b25      	ldr	r3, [pc, #148]	; (92b0 <CurrentMotorCalculated+0x144>)
    921c:	681b      	ldr	r3, [r3, #0]
    921e:	2264      	movs	r2, #100	; 0x64
    9220:	435a      	muls	r2, r3
    9222:	4b23      	ldr	r3, [pc, #140]	; (92b0 <CurrentMotorCalculated+0x144>)
    9224:	601a      	str	r2, [r3, #0]
		ltemp = ltemp/ACC_ONE_G;
    9226:	4b22      	ldr	r3, [pc, #136]	; (92b0 <CurrentMotorCalculated+0x144>)
    9228:	681b      	ldr	r3, [r3, #0]
    922a:	0b9a      	lsrs	r2, r3, #14
    922c:	4b20      	ldr	r3, [pc, #128]	; (92b0 <CurrentMotorCalculated+0x144>)
    922e:	601a      	str	r2, [r3, #0]
		temp2 = ltemp; 		
    9230:	4b1f      	ldr	r3, [pc, #124]	; (92b0 <CurrentMotorCalculated+0x144>)
    9232:	681b      	ldr	r3, [r3, #0]
    9234:	60fb      	str	r3, [r7, #12]
		//----------------------------
		ltemp1 = temp2;
    9236:	68fb      	ldr	r3, [r7, #12]
    9238:	607b      	str	r3, [r7, #4]
		gPrime = ltemp1; 
    923a:	687b      	ldr	r3, [r7, #4]
    923c:	b29a      	uxth	r2, r3
    923e:	4b1d      	ldr	r3, [pc, #116]	; (92b4 <CurrentMotorCalculated+0x148>)
    9240:	801a      	strh	r2, [r3, #0]
		ltemp1 = (ltemp1 * fm * 70 *RUSSELLAMPCHANGE);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    9242:	4b15      	ldr	r3, [pc, #84]	; (9298 <CurrentMotorCalculated+0x12c>)
    9244:	781b      	ldrb	r3, [r3, #0]
    9246:	687a      	ldr	r2, [r7, #4]
    9248:	4353      	muls	r3, r2
    924a:	2246      	movs	r2, #70	; 0x46
    924c:	4353      	muls	r3, r2
    924e:	607b      	str	r3, [r7, #4]
		ltemp1 = 19000 + ltemp1;  //V00_78
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	4a19      	ldr	r2, [pc, #100]	; (92b8 <CurrentMotorCalculated+0x14c>)
    9254:	189b      	adds	r3, r3, r2
    9256:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1 * 205; 
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	22cd      	movs	r2, #205	; 0xcd
    925c:	4353      	muls	r3, r2
    925e:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    9260:	687a      	ldr	r2, [r7, #4]
    9262:	4b12      	ldr	r3, [pc, #72]	; (92ac <CurrentMotorCalculated+0x140>)
    9264:	1c10      	adds	r0, r2, #0
    9266:	2164      	movs	r1, #100	; 0x64
    9268:	4798      	blx	r3
    926a:	1c03      	adds	r3, r0, #0
    926c:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    926e:	687a      	ldr	r2, [r7, #4]
    9270:	4b0e      	ldr	r3, [pc, #56]	; (92ac <CurrentMotorCalculated+0x140>)
    9272:	1c10      	adds	r0, r2, #0
    9274:	2164      	movs	r1, #100	; 0x64
    9276:	4798      	blx	r3
    9278:	1c03      	adds	r3, r0, #0
    927a:	607b      	str	r3, [r7, #4]
		returnCurrent = ltemp1; 
    927c:	1c3b      	adds	r3, r7, #0
    927e:	330a      	adds	r3, #10
    9280:	687a      	ldr	r2, [r7, #4]
    9282:	801a      	strh	r2, [r3, #0]
//	}
//	else
//	{
//		returnCurrent = 1; 
//	}
	return returnCurrent;
    9284:	1c3b      	adds	r3, r7, #0
    9286:	330a      	adds	r3, #10
    9288:	881b      	ldrh	r3, [r3, #0]
}
    928a:	1c18      	adds	r0, r3, #0
    928c:	46bd      	mov	sp, r7
    928e:	b004      	add	sp, #16
    9290:	bd80      	pop	{r7, pc}
    9292:	46c0      	nop			; (mov r8, r8)
    9294:	20002fb8 	.word	0x20002fb8
    9298:	20002eb4 	.word	0x20002eb4
    929c:	20002ed2 	.word	0x20002ed2
    92a0:	0000914d 	.word	0x0000914d
    92a4:	20002ef6 	.word	0x20002ef6
    92a8:	00015875 	.word	0x00015875
    92ac:	000157d9 	.word	0x000157d9
    92b0:	20002ea0 	.word	0x20002ea0
    92b4:	20002ee6 	.word	0x20002ee6
    92b8:	00004a38 	.word	0x00004a38

000092bc <FsrMotorCalculated>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculated(void)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b084      	sub	sp, #16
    92c0:	af00      	add	r7, sp, #0
	uint32_t ltemp1,temp2;
	uint16_t returnFsr;
	
	returnFsr = 0;
    92c2:	1c3b      	adds	r3, r7, #0
    92c4:	330a      	adds	r3, #10
    92c6:	2200      	movs	r2, #0
    92c8:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    92ca:	4b46      	ldr	r3, [pc, #280]	; (93e4 <FsrMotorCalculated+0x128>)
    92cc:	7d9a      	ldrb	r2, [r3, #22]
    92ce:	4b46      	ldr	r3, [pc, #280]	; (93e8 <FsrMotorCalculated+0x12c>)
    92d0:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    92d2:	4b44      	ldr	r3, [pc, #272]	; (93e4 <FsrMotorCalculated+0x128>)
    92d4:	789a      	ldrb	r2, [r3, #2]
    92d6:	4b45      	ldr	r3, [pc, #276]	; (93ec <FsrMotorCalculated+0x130>)
    92d8:	701a      	strb	r2, [r3, #0]
	
	if ((fm<1)||(fm>9))
    92da:	4b43      	ldr	r3, [pc, #268]	; (93e8 <FsrMotorCalculated+0x12c>)
    92dc:	781b      	ldrb	r3, [r3, #0]
    92de:	2b00      	cmp	r3, #0
    92e0:	d003      	beq.n	92ea <FsrMotorCalculated+0x2e>
    92e2:	4b41      	ldr	r3, [pc, #260]	; (93e8 <FsrMotorCalculated+0x12c>)
    92e4:	781b      	ldrb	r3, [r3, #0]
    92e6:	2b09      	cmp	r3, #9
    92e8:	d902      	bls.n	92f0 <FsrMotorCalculated+0x34>
	{
		fm = 5;
    92ea:	4b3f      	ldr	r3, [pc, #252]	; (93e8 <FsrMotorCalculated+0x12c>)
    92ec:	2205      	movs	r2, #5
    92ee:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    92f0:	4b3e      	ldr	r3, [pc, #248]	; (93ec <FsrMotorCalculated+0x130>)
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	2b00      	cmp	r3, #0
    92f6:	d003      	beq.n	9300 <FsrMotorCalculated+0x44>
    92f8:	4b3c      	ldr	r3, [pc, #240]	; (93ec <FsrMotorCalculated+0x130>)
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	2b09      	cmp	r3, #9
    92fe:	d902      	bls.n	9306 <FsrMotorCalculated+0x4a>
	{
		gain = 5;
    9300:	4b3a      	ldr	r3, [pc, #232]	; (93ec <FsrMotorCalculated+0x130>)
    9302:	2205      	movs	r2, #5
    9304:	701a      	strb	r2, [r3, #0]
	}
	instantGain = MotorGetAcc(TRUE);
    9306:	2001      	movs	r0, #1
    9308:	4b39      	ldr	r3, [pc, #228]	; (93f0 <FsrMotorCalculated+0x134>)
    930a:	4798      	blx	r3
    930c:	1c03      	adds	r3, r0, #0
    930e:	b29a      	uxth	r2, r3
    9310:	4b38      	ldr	r3, [pc, #224]	; (93f4 <FsrMotorCalculated+0x138>)
    9312:	801a      	strh	r2, [r3, #0]
	if (instantGain > 0)
    9314:	4b37      	ldr	r3, [pc, #220]	; (93f4 <FsrMotorCalculated+0x138>)
    9316:	881b      	ldrh	r3, [r3, #0]
    9318:	2b00      	cmp	r3, #0
    931a:	d102      	bne.n	9322 <FsrMotorCalculated+0x66>
		//		instantGain = -1 * instantGain;
		//		instantGain =1;
	}
	else
	{
		instantGain =0;  //1;
    931c:	4b35      	ldr	r3, [pc, #212]	; (93f4 <FsrMotorCalculated+0x138>)
    931e:	2200      	movs	r2, #0
    9320:	801a      	strh	r2, [r3, #0]
	//	{
	//		instantGain = -1 * instantGain;
	//-----------------------
	// g' = g * G/5 and limite to .5g
	// *multiply by 10 to get to whole numbers
	temp2 = instantGain * (gain*10)/5;
    9322:	4b34      	ldr	r3, [pc, #208]	; (93f4 <FsrMotorCalculated+0x138>)
    9324:	881b      	ldrh	r3, [r3, #0]
    9326:	1c19      	adds	r1, r3, #0
    9328:	4b30      	ldr	r3, [pc, #192]	; (93ec <FsrMotorCalculated+0x130>)
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	1c1a      	adds	r2, r3, #0
    932e:	1c13      	adds	r3, r2, #0
    9330:	009b      	lsls	r3, r3, #2
    9332:	189b      	adds	r3, r3, r2
    9334:	005b      	lsls	r3, r3, #1
    9336:	1c1a      	adds	r2, r3, #0
    9338:	434a      	muls	r2, r1
    933a:	4b2f      	ldr	r3, [pc, #188]	; (93f8 <FsrMotorCalculated+0x13c>)
    933c:	1c10      	adds	r0, r2, #0
    933e:	2105      	movs	r1, #5
    9340:	4798      	blx	r3
    9342:	1c03      	adds	r3, r0, #0
    9344:	60fb      	str	r3, [r7, #12]
	temp2 = temp2/10;
    9346:	68fa      	ldr	r2, [r7, #12]
    9348:	4b2c      	ldr	r3, [pc, #176]	; (93fc <FsrMotorCalculated+0x140>)
    934a:	1c10      	adds	r0, r2, #0
    934c:	210a      	movs	r1, #10
    934e:	4798      	blx	r3
    9350:	1c03      	adds	r3, r0, #0
    9352:	60fb      	str	r3, [r7, #12]
	if (temp2 > ACC_HALF_G)
    9354:	68fa      	ldr	r2, [r7, #12]
    9356:	2380      	movs	r3, #128	; 0x80
    9358:	019b      	lsls	r3, r3, #6
    935a:	429a      	cmp	r2, r3
    935c:	d902      	bls.n	9364 <FsrMotorCalculated+0xa8>
	{
		temp2 = ACC_HALF_G;
    935e:	2380      	movs	r3, #128	; 0x80
    9360:	019b      	lsls	r3, r3, #6
    9362:	60fb      	str	r3, [r7, #12]
	}
	ltemp = temp2;
    9364:	4b26      	ldr	r3, [pc, #152]	; (9400 <FsrMotorCalculated+0x144>)
    9366:	68fa      	ldr	r2, [r7, #12]
    9368:	601a      	str	r2, [r3, #0]
	ltemp = ltemp * 100;
    936a:	4b25      	ldr	r3, [pc, #148]	; (9400 <FsrMotorCalculated+0x144>)
    936c:	681b      	ldr	r3, [r3, #0]
    936e:	2264      	movs	r2, #100	; 0x64
    9370:	435a      	muls	r2, r3
    9372:	4b23      	ldr	r3, [pc, #140]	; (9400 <FsrMotorCalculated+0x144>)
    9374:	601a      	str	r2, [r3, #0]
	ltemp = ltemp/ACC_ONE_G;
    9376:	4b22      	ldr	r3, [pc, #136]	; (9400 <FsrMotorCalculated+0x144>)
    9378:	681b      	ldr	r3, [r3, #0]
    937a:	0b9a      	lsrs	r2, r3, #14
    937c:	4b20      	ldr	r3, [pc, #128]	; (9400 <FsrMotorCalculated+0x144>)
    937e:	601a      	str	r2, [r3, #0]
	temp2 = ltemp;
    9380:	4b1f      	ldr	r3, [pc, #124]	; (9400 <FsrMotorCalculated+0x144>)
    9382:	681b      	ldr	r3, [r3, #0]
    9384:	60fb      	str	r3, [r7, #12]
	//----------------------------
	ltemp1 = temp2;
    9386:	68fb      	ldr	r3, [r7, #12]
    9388:	607b      	str	r3, [r7, #4]
	gPrime = ltemp1;
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	b29a      	uxth	r2, r3
    938e:	4b1d      	ldr	r3, [pc, #116]	; (9404 <FsrMotorCalculated+0x148>)
    9390:	801a      	strh	r2, [r3, #0]
//	ltemp1 = (ltemp1 * fm * 2 *3686);   
	ltemp1 = (ltemp1 * fm * 2 *2600)+400;   	
    9392:	4b15      	ldr	r3, [pc, #84]	; (93e8 <FsrMotorCalculated+0x12c>)
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	687a      	ldr	r2, [r7, #4]
    9398:	4353      	muls	r3, r2
    939a:	4a1b      	ldr	r2, [pc, #108]	; (9408 <FsrMotorCalculated+0x14c>)
    939c:	4353      	muls	r3, r2
    939e:	3391      	adds	r3, #145	; 0x91
    93a0:	33ff      	adds	r3, #255	; 0xff
    93a2:	607b      	str	r3, [r7, #4]
	ltemp1 = ltemp1/9;  
    93a4:	687a      	ldr	r2, [r7, #4]
    93a6:	4b15      	ldr	r3, [pc, #84]	; (93fc <FsrMotorCalculated+0x140>)
    93a8:	1c10      	adds	r0, r2, #0
    93aa:	2109      	movs	r1, #9
    93ac:	4798      	blx	r3
    93ae:	1c03      	adds	r3, r0, #0
    93b0:	607b      	str	r3, [r7, #4]
	ltemp1 = ltemp1/100;
    93b2:	687a      	ldr	r2, [r7, #4]
    93b4:	4b11      	ldr	r3, [pc, #68]	; (93fc <FsrMotorCalculated+0x140>)
    93b6:	1c10      	adds	r0, r2, #0
    93b8:	2164      	movs	r1, #100	; 0x64
    93ba:	4798      	blx	r3
    93bc:	1c03      	adds	r3, r0, #0
    93be:	607b      	str	r3, [r7, #4]
	
	returnFsr = ltemp1;
    93c0:	1c3b      	adds	r3, r7, #0
    93c2:	330a      	adds	r3, #10
    93c4:	687a      	ldr	r2, [r7, #4]
    93c6:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    93c8:	1c3a      	adds	r2, r7, #0
    93ca:	320a      	adds	r2, #10
    93cc:	1c3b      	adds	r3, r7, #0
    93ce:	330a      	adds	r3, #10
    93d0:	881b      	ldrh	r3, [r3, #0]
    93d2:	18db      	adds	r3, r3, r3
    93d4:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    93d6:	1c3b      	adds	r3, r7, #0
    93d8:	330a      	adds	r3, #10
    93da:	881b      	ldrh	r3, [r3, #0]
} 
    93dc:	1c18      	adds	r0, r3, #0
    93de:	46bd      	mov	sp, r7
    93e0:	b004      	add	sp, #16
    93e2:	bd80      	pop	{r7, pc}
    93e4:	20002fb8 	.word	0x20002fb8
    93e8:	20002eb4 	.word	0x20002eb4
    93ec:	20002ed2 	.word	0x20002ed2
    93f0:	0000914d 	.word	0x0000914d
    93f4:	20002ef6 	.word	0x20002ef6
    93f8:	00015875 	.word	0x00015875
    93fc:	000157d9 	.word	0x000157d9
    9400:	20002ea0 	.word	0x20002ea0
    9404:	20002ee6 	.word	0x20002ee6
    9408:	00001450 	.word	0x00001450

0000940c <CurrentMotorCalculatedForG>:
 
 
uint16_t CurrentMotorCalculatedForG(uint16_t gin)
{
    940c:	b580      	push	{r7, lr}
    940e:	b088      	sub	sp, #32
    9410:	af00      	add	r7, sp, #0
    9412:	1c02      	adds	r2, r0, #0
    9414:	1dbb      	adds	r3, r7, #6
    9416:	801a      	strh	r2, [r3, #0]
	
	uint32_t ltemp1,ltemp,temp2;
	uint8_t fm; 
	uint16_t returnCurrent,iGain;
	
	returnCurrent = 0;
    9418:	1c3b      	adds	r3, r7, #0
    941a:	3318      	adds	r3, #24
    941c:	2200      	movs	r2, #0
    941e:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    9420:	1c3b      	adds	r3, r7, #0
    9422:	331b      	adds	r3, #27
    9424:	2207      	movs	r2, #7
    9426:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    9428:	1c3b      	adds	r3, r7, #0
    942a:	331b      	adds	r3, #27
    942c:	4a40      	ldr	r2, [pc, #256]	; (9530 <CurrentMotorCalculatedForG+0x124>)
    942e:	7d92      	ldrb	r2, [r2, #22]
    9430:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9432:	4b3f      	ldr	r3, [pc, #252]	; (9530 <CurrentMotorCalculatedForG+0x124>)
    9434:	789a      	ldrb	r2, [r3, #2]
    9436:	4b3f      	ldr	r3, [pc, #252]	; (9534 <CurrentMotorCalculatedForG+0x128>)
    9438:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    943a:	1c3b      	adds	r3, r7, #0
    943c:	331b      	adds	r3, #27
    943e:	781b      	ldrb	r3, [r3, #0]
    9440:	2b00      	cmp	r3, #0
    9442:	d004      	beq.n	944e <CurrentMotorCalculatedForG+0x42>
    9444:	1c3b      	adds	r3, r7, #0
    9446:	331b      	adds	r3, #27
    9448:	781b      	ldrb	r3, [r3, #0]
    944a:	2b09      	cmp	r3, #9
    944c:	d903      	bls.n	9456 <CurrentMotorCalculatedForG+0x4a>
	{
		fm = 5;
    944e:	1c3b      	adds	r3, r7, #0
    9450:	331b      	adds	r3, #27
    9452:	2205      	movs	r2, #5
    9454:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    9456:	4b37      	ldr	r3, [pc, #220]	; (9534 <CurrentMotorCalculatedForG+0x128>)
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	2b00      	cmp	r3, #0
    945c:	d003      	beq.n	9466 <CurrentMotorCalculatedForG+0x5a>
    945e:	4b35      	ldr	r3, [pc, #212]	; (9534 <CurrentMotorCalculatedForG+0x128>)
    9460:	781b      	ldrb	r3, [r3, #0]
    9462:	2b09      	cmp	r3, #9
    9464:	d902      	bls.n	946c <CurrentMotorCalculatedForG+0x60>
	{
		gain = 5;
    9466:	4b33      	ldr	r3, [pc, #204]	; (9534 <CurrentMotorCalculatedForG+0x128>)
    9468:	2205      	movs	r2, #5
    946a:	701a      	strb	r2, [r3, #0]
	}
			 
	iGain = gin;
    946c:	1c3b      	adds	r3, r7, #0
    946e:	3316      	adds	r3, #22
    9470:	1dba      	adds	r2, r7, #6
    9472:	8812      	ldrh	r2, [r2, #0]
    9474:	801a      	strh	r2, [r3, #0]
	if (iGain != 0)
    9476:	1c3b      	adds	r3, r7, #0
    9478:	3316      	adds	r3, #22
    947a:	881b      	ldrh	r3, [r3, #0]
    947c:	2b00      	cmp	r3, #0
    947e:	d04f      	beq.n	9520 <CurrentMotorCalculatedForG+0x114>
	{
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = iGain * (gain*10)/5;
    9480:	1c3b      	adds	r3, r7, #0
    9482:	3316      	adds	r3, #22
    9484:	8819      	ldrh	r1, [r3, #0]
    9486:	4b2b      	ldr	r3, [pc, #172]	; (9534 <CurrentMotorCalculatedForG+0x128>)
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	1c1a      	adds	r2, r3, #0
    948c:	1c13      	adds	r3, r2, #0
    948e:	009b      	lsls	r3, r3, #2
    9490:	189b      	adds	r3, r3, r2
    9492:	005b      	lsls	r3, r3, #1
    9494:	1c1a      	adds	r2, r3, #0
    9496:	434a      	muls	r2, r1
    9498:	4b27      	ldr	r3, [pc, #156]	; (9538 <CurrentMotorCalculatedForG+0x12c>)
    949a:	1c10      	adds	r0, r2, #0
    949c:	2105      	movs	r1, #5
    949e:	4798      	blx	r3
    94a0:	1c03      	adds	r3, r0, #0
    94a2:	61fb      	str	r3, [r7, #28]
		temp2 = temp2/10; 
    94a4:	69fa      	ldr	r2, [r7, #28]
    94a6:	4b25      	ldr	r3, [pc, #148]	; (953c <CurrentMotorCalculatedForG+0x130>)
    94a8:	1c10      	adds	r0, r2, #0
    94aa:	210a      	movs	r1, #10
    94ac:	4798      	blx	r3
    94ae:	1c03      	adds	r3, r0, #0
    94b0:	61fb      	str	r3, [r7, #28]
		if (temp2 > ACC_HALF_G)
    94b2:	69fa      	ldr	r2, [r7, #28]
    94b4:	2380      	movs	r3, #128	; 0x80
    94b6:	019b      	lsls	r3, r3, #6
    94b8:	429a      	cmp	r2, r3
    94ba:	d902      	bls.n	94c2 <CurrentMotorCalculatedForG+0xb6>
		{
			temp2 = ACC_HALF_G; 
    94bc:	2380      	movs	r3, #128	; 0x80
    94be:	019b      	lsls	r3, r3, #6
    94c0:	61fb      	str	r3, [r7, #28]
		}
		ltemp = temp2;
    94c2:	69fb      	ldr	r3, [r7, #28]
    94c4:	613b      	str	r3, [r7, #16]
		ltemp = ltemp * 100; 
    94c6:	693b      	ldr	r3, [r7, #16]
    94c8:	2264      	movs	r2, #100	; 0x64
    94ca:	4353      	muls	r3, r2
    94cc:	613b      	str	r3, [r7, #16]
		ltemp = ltemp/ACC_ONE_G;
    94ce:	693b      	ldr	r3, [r7, #16]
    94d0:	0b9b      	lsrs	r3, r3, #14
    94d2:	613b      	str	r3, [r7, #16]
		temp2 = ltemp; 		
    94d4:	693b      	ldr	r3, [r7, #16]
    94d6:	61fb      	str	r3, [r7, #28]
		//----------------------------
		ltemp1 = temp2;
    94d8:	69fb      	ldr	r3, [r7, #28]
    94da:	60fb      	str	r3, [r7, #12]
		ltemp1 = (ltemp1 * fm * 70*RUSSELLAMPCHANGE);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    94dc:	1c3b      	adds	r3, r7, #0
    94de:	331b      	adds	r3, #27
    94e0:	781b      	ldrb	r3, [r3, #0]
    94e2:	68fa      	ldr	r2, [r7, #12]
    94e4:	4353      	muls	r3, r2
    94e6:	2246      	movs	r2, #70	; 0x46
    94e8:	4353      	muls	r3, r2
    94ea:	60fb      	str	r3, [r7, #12]
		ltemp1 = 19000 + ltemp1;  //V00_78
    94ec:	68fb      	ldr	r3, [r7, #12]
    94ee:	4a14      	ldr	r2, [pc, #80]	; (9540 <CurrentMotorCalculatedForG+0x134>)
    94f0:	189b      	adds	r3, r3, r2
    94f2:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1 * 205; 
    94f4:	68fb      	ldr	r3, [r7, #12]
    94f6:	22cd      	movs	r2, #205	; 0xcd
    94f8:	4353      	muls	r3, r2
    94fa:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    94fc:	68fa      	ldr	r2, [r7, #12]
    94fe:	4b0f      	ldr	r3, [pc, #60]	; (953c <CurrentMotorCalculatedForG+0x130>)
    9500:	1c10      	adds	r0, r2, #0
    9502:	2164      	movs	r1, #100	; 0x64
    9504:	4798      	blx	r3
    9506:	1c03      	adds	r3, r0, #0
    9508:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    950a:	68fa      	ldr	r2, [r7, #12]
    950c:	4b0b      	ldr	r3, [pc, #44]	; (953c <CurrentMotorCalculatedForG+0x130>)
    950e:	1c10      	adds	r0, r2, #0
    9510:	2164      	movs	r1, #100	; 0x64
    9512:	4798      	blx	r3
    9514:	1c03      	adds	r3, r0, #0
    9516:	60fb      	str	r3, [r7, #12]
		returnCurrent = ltemp1; 
    9518:	1c3b      	adds	r3, r7, #0
    951a:	3318      	adds	r3, #24
    951c:	68fa      	ldr	r2, [r7, #12]
    951e:	801a      	strh	r2, [r3, #0]
	}
	return returnCurrent;
    9520:	1c3b      	adds	r3, r7, #0
    9522:	3318      	adds	r3, #24
    9524:	881b      	ldrh	r3, [r3, #0]
} 
    9526:	1c18      	adds	r0, r3, #0
    9528:	46bd      	mov	sp, r7
    952a:	b008      	add	sp, #32
    952c:	bd80      	pop	{r7, pc}
    952e:	46c0      	nop			; (mov r8, r8)
    9530:	20002fb8 	.word	0x20002fb8
    9534:	20002ed2 	.word	0x20002ed2
    9538:	00015875 	.word	0x00015875
    953c:	000157d9 	.word	0x000157d9
    9540:	00004a38 	.word	0x00004a38

00009544 <CurrentMotorCalculatedStartup>:
//------------------------------------------------------------------------------
// This function
// Imotor=1.5+Fm*0.56 
//==============================================================================
uint16_t CurrentMotorCalculatedStartup(uint8_t forceMax)
{
    9544:	b580      	push	{r7, lr}
    9546:	b084      	sub	sp, #16
    9548:	af00      	add	r7, sp, #0
    954a:	1c02      	adds	r2, r0, #0
    954c:	1dfb      	adds	r3, r7, #7
    954e:	701a      	strb	r2, [r3, #0]
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    9550:	1c3b      	adds	r3, r7, #0
    9552:	330e      	adds	r3, #14
    9554:	2200      	movs	r2, #0
    9556:	801a      	strh	r2, [r3, #0]
//	fm = table0.Item.ForceMaxSet;
	fm = forceMax;
    9558:	4b16      	ldr	r3, [pc, #88]	; (95b4 <CurrentMotorCalculatedStartup+0x70>)
    955a:	1dfa      	adds	r2, r7, #7
    955c:	7812      	ldrb	r2, [r2, #0]
    955e:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    9560:	4b14      	ldr	r3, [pc, #80]	; (95b4 <CurrentMotorCalculatedStartup+0x70>)
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2b00      	cmp	r3, #0
    9566:	d003      	beq.n	9570 <CurrentMotorCalculatedStartup+0x2c>
    9568:	4b12      	ldr	r3, [pc, #72]	; (95b4 <CurrentMotorCalculatedStartup+0x70>)
    956a:	781b      	ldrb	r3, [r3, #0]
    956c:	2b09      	cmp	r3, #9
    956e:	d902      	bls.n	9576 <CurrentMotorCalculatedStartup+0x32>
	{
		fm = 5;
    9570:	4b10      	ldr	r3, [pc, #64]	; (95b4 <CurrentMotorCalculatedStartup+0x70>)
    9572:	2205      	movs	r2, #5
    9574:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1500 + (fm * 560*RUSSELLAMPCHANGE);  //V00_62  was *375 now *560 //V00_78
    9576:	4b0f      	ldr	r3, [pc, #60]	; (95b4 <CurrentMotorCalculatedStartup+0x70>)
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	228c      	movs	r2, #140	; 0x8c
    957c:	0092      	lsls	r2, r2, #2
    957e:	4353      	muls	r3, r2
    9580:	4a0d      	ldr	r2, [pc, #52]	; (95b8 <CurrentMotorCalculatedStartup+0x74>)
    9582:	189b      	adds	r3, r3, r2
    9584:	60bb      	str	r3, [r7, #8]
	temp1 = temp1 * 205;
    9586:	68bb      	ldr	r3, [r7, #8]
    9588:	22cd      	movs	r2, #205	; 0xcd
    958a:	4353      	muls	r3, r2
    958c:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/1000;
    958e:	68ba      	ldr	r2, [r7, #8]
    9590:	4b0a      	ldr	r3, [pc, #40]	; (95bc <CurrentMotorCalculatedStartup+0x78>)
    9592:	1c10      	adds	r0, r2, #0
    9594:	22fa      	movs	r2, #250	; 0xfa
    9596:	0091      	lsls	r1, r2, #2
    9598:	4798      	blx	r3
    959a:	1c03      	adds	r3, r0, #0
    959c:	60bb      	str	r3, [r7, #8]
	returnCurrent = temp1;
    959e:	1c3b      	adds	r3, r7, #0
    95a0:	330e      	adds	r3, #14
    95a2:	68ba      	ldr	r2, [r7, #8]
    95a4:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    95a6:	1c3b      	adds	r3, r7, #0
    95a8:	330e      	adds	r3, #14
    95aa:	881b      	ldrh	r3, [r3, #0]
} 
    95ac:	1c18      	adds	r0, r3, #0
    95ae:	46bd      	mov	sp, r7
    95b0:	b004      	add	sp, #16
    95b2:	bd80      	pop	{r7, pc}
    95b4:	20002eb4 	.word	0x20002eb4
    95b8:	000005dc 	.word	0x000005dc
    95bc:	000157d9 	.word	0x000157d9

000095c0 <FsrMotorCalculatedStartup>:
//------------------------------------------------------------------------------
// This function
// Imotor=1.5+Fm*0.56
//==============================================================================
uint16_t FsrMotorCalculatedStartup(uint8_t forceMax)
{
    95c0:	b580      	push	{r7, lr}
    95c2:	b084      	sub	sp, #16
    95c4:	af00      	add	r7, sp, #0
    95c6:	1c02      	adds	r2, r0, #0
    95c8:	1dfb      	adds	r3, r7, #7
    95ca:	701a      	strb	r2, [r3, #0]
	uint32_t temp1;
	uint16_t returnFSR;
	
	returnFSR = 0;
    95cc:	1c3b      	adds	r3, r7, #0
    95ce:	330e      	adds	r3, #14
    95d0:	2200      	movs	r2, #0
    95d2:	801a      	strh	r2, [r3, #0]
	//	fm = table0.Item.ForceMaxSet;
	fm = forceMax;
    95d4:	4b19      	ldr	r3, [pc, #100]	; (963c <FsrMotorCalculatedStartup+0x7c>)
    95d6:	1dfa      	adds	r2, r7, #7
    95d8:	7812      	ldrb	r2, [r2, #0]
    95da:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    95dc:	4b17      	ldr	r3, [pc, #92]	; (963c <FsrMotorCalculatedStartup+0x7c>)
    95de:	781b      	ldrb	r3, [r3, #0]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d003      	beq.n	95ec <FsrMotorCalculatedStartup+0x2c>
    95e4:	4b15      	ldr	r3, [pc, #84]	; (963c <FsrMotorCalculatedStartup+0x7c>)
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	2b09      	cmp	r3, #9
    95ea:	d902      	bls.n	95f2 <FsrMotorCalculatedStartup+0x32>
	{
		fm = 5;
    95ec:	4b13      	ldr	r3, [pc, #76]	; (963c <FsrMotorCalculatedStartup+0x7c>)
    95ee:	2205      	movs	r2, #5
    95f0:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * 25* 3686);  //V00_62  was *375 now *560 //V00_78
    95f2:	4b12      	ldr	r3, [pc, #72]	; (963c <FsrMotorCalculatedStartup+0x7c>)
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	4a12      	ldr	r2, [pc, #72]	; (9640 <FsrMotorCalculatedStartup+0x80>)
    95f8:	4353      	muls	r3, r2
    95fa:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/9;
    95fc:	68ba      	ldr	r2, [r7, #8]
    95fe:	4b11      	ldr	r3, [pc, #68]	; (9644 <FsrMotorCalculatedStartup+0x84>)
    9600:	1c10      	adds	r0, r2, #0
    9602:	2109      	movs	r1, #9
    9604:	4798      	blx	r3
    9606:	1c03      	adds	r3, r0, #0
    9608:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/100;
    960a:	68ba      	ldr	r2, [r7, #8]
    960c:	4b0d      	ldr	r3, [pc, #52]	; (9644 <FsrMotorCalculatedStartup+0x84>)
    960e:	1c10      	adds	r0, r2, #0
    9610:	2164      	movs	r1, #100	; 0x64
    9612:	4798      	blx	r3
    9614:	1c03      	adds	r3, r0, #0
    9616:	60bb      	str	r3, [r7, #8]
	returnFSR = temp1;
    9618:	1c3b      	adds	r3, r7, #0
    961a:	330e      	adds	r3, #14
    961c:	68ba      	ldr	r2, [r7, #8]
    961e:	801a      	strh	r2, [r3, #0]
//	returnFSR = returnFSR/4; 
	returnFSR = returnFSR *2; 
    9620:	1c3a      	adds	r2, r7, #0
    9622:	320e      	adds	r2, #14
    9624:	1c3b      	adds	r3, r7, #0
    9626:	330e      	adds	r3, #14
    9628:	881b      	ldrh	r3, [r3, #0]
    962a:	18db      	adds	r3, r3, r3
    962c:	8013      	strh	r3, [r2, #0]
	return returnFSR;
    962e:	1c3b      	adds	r3, r7, #0
    9630:	330e      	adds	r3, #14
    9632:	881b      	ldrh	r3, [r3, #0]
} 
    9634:	1c18      	adds	r0, r3, #0
    9636:	46bd      	mov	sp, r7
    9638:	b004      	add	sp, #16
    963a:	bd80      	pop	{r7, pc}
    963c:	20002eb4 	.word	0x20002eb4
    9640:	000167f6 	.word	0x000167f6
    9644:	000157d9 	.word	0x000157d9

00009648 <CurrentMotorCalculatedBreakaway>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedBreakaway(void)
{
    9648:	b580      	push	{r7, lr}
    964a:	b082      	sub	sp, #8
    964c:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    964e:	1dbb      	adds	r3, r7, #6
    9650:	2200      	movs	r2, #0
    9652:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    9654:	4b1e      	ldr	r3, [pc, #120]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    9656:	2207      	movs	r2, #7
    9658:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    965a:	4b1e      	ldr	r3, [pc, #120]	; (96d4 <CurrentMotorCalculatedBreakaway+0x8c>)
    965c:	7d9a      	ldrb	r2, [r3, #22]
    965e:	4b1c      	ldr	r3, [pc, #112]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    9660:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9662:	4b1c      	ldr	r3, [pc, #112]	; (96d4 <CurrentMotorCalculatedBreakaway+0x8c>)
    9664:	789a      	ldrb	r2, [r3, #2]
    9666:	4b1c      	ldr	r3, [pc, #112]	; (96d8 <CurrentMotorCalculatedBreakaway+0x90>)
    9668:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    966a:	4b19      	ldr	r3, [pc, #100]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2b00      	cmp	r3, #0
    9670:	d003      	beq.n	967a <CurrentMotorCalculatedBreakaway+0x32>
    9672:	4b17      	ldr	r3, [pc, #92]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    9674:	781b      	ldrb	r3, [r3, #0]
    9676:	2b09      	cmp	r3, #9
    9678:	d902      	bls.n	9680 <CurrentMotorCalculatedBreakaway+0x38>
	{
		fm = 5;
    967a:	4b15      	ldr	r3, [pc, #84]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    967c:	2205      	movs	r2, #5
    967e:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    9680:	4b15      	ldr	r3, [pc, #84]	; (96d8 <CurrentMotorCalculatedBreakaway+0x90>)
    9682:	781b      	ldrb	r3, [r3, #0]
    9684:	2b00      	cmp	r3, #0
    9686:	d003      	beq.n	9690 <CurrentMotorCalculatedBreakaway+0x48>
    9688:	4b13      	ldr	r3, [pc, #76]	; (96d8 <CurrentMotorCalculatedBreakaway+0x90>)
    968a:	781b      	ldrb	r3, [r3, #0]
    968c:	2b09      	cmp	r3, #9
    968e:	d902      	bls.n	9696 <CurrentMotorCalculatedBreakaway+0x4e>
	{
		gain = 5;
    9690:	4b11      	ldr	r3, [pc, #68]	; (96d8 <CurrentMotorCalculatedBreakaway+0x90>)
    9692:	2205      	movs	r2, #5
    9694:	701a      	strb	r2, [r3, #0]
	}
 	//----------------------------
	temp1 = 1900 + (fm * 375*RUSSELLAMPCHANGE);  //V00_62  was *375 now *560 //V00_78
    9696:	4b0e      	ldr	r3, [pc, #56]	; (96d0 <CurrentMotorCalculatedBreakaway+0x88>)
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	2278      	movs	r2, #120	; 0x78
    969c:	32ff      	adds	r2, #255	; 0xff
    969e:	4353      	muls	r3, r2
    96a0:	4a0e      	ldr	r2, [pc, #56]	; (96dc <CurrentMotorCalculatedBreakaway+0x94>)
    96a2:	189b      	adds	r3, r3, r2
    96a4:	603b      	str	r3, [r7, #0]
	temp1 = temp1 * 205;
    96a6:	683b      	ldr	r3, [r7, #0]
    96a8:	22cd      	movs	r2, #205	; 0xcd
    96aa:	4353      	muls	r3, r2
    96ac:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    96ae:	683a      	ldr	r2, [r7, #0]
    96b0:	4b0b      	ldr	r3, [pc, #44]	; (96e0 <CurrentMotorCalculatedBreakaway+0x98>)
    96b2:	1c10      	adds	r0, r2, #0
    96b4:	22fa      	movs	r2, #250	; 0xfa
    96b6:	0091      	lsls	r1, r2, #2
    96b8:	4798      	blx	r3
    96ba:	1c03      	adds	r3, r0, #0
    96bc:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    96be:	1dbb      	adds	r3, r7, #6
    96c0:	683a      	ldr	r2, [r7, #0]
    96c2:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    96c4:	1dbb      	adds	r3, r7, #6
    96c6:	881b      	ldrh	r3, [r3, #0]
} 
    96c8:	1c18      	adds	r0, r3, #0
    96ca:	46bd      	mov	sp, r7
    96cc:	b002      	add	sp, #8
    96ce:	bd80      	pop	{r7, pc}
    96d0:	20002eb4 	.word	0x20002eb4
    96d4:	20002fb8 	.word	0x20002fb8
    96d8:	20002ed2 	.word	0x20002ed2
    96dc:	0000076c 	.word	0x0000076c
    96e0:	000157d9 	.word	0x000157d9

000096e4 <FsrMotorCalculatedBreakaway>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculatedBreakaway(void)
{
    96e4:	b580      	push	{r7, lr}
    96e6:	b082      	sub	sp, #8
    96e8:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnFsr;
	
	returnFsr = 0;
    96ea:	1dbb      	adds	r3, r7, #6
    96ec:	2200      	movs	r2, #0
    96ee:	801a      	strh	r2, [r3, #0]
	fm = FM;
    96f0:	4b20      	ldr	r3, [pc, #128]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    96f2:	2207      	movs	r2, #7
    96f4:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    96f6:	4b20      	ldr	r3, [pc, #128]	; (9778 <FsrMotorCalculatedBreakaway+0x94>)
    96f8:	7d9a      	ldrb	r2, [r3, #22]
    96fa:	4b1e      	ldr	r3, [pc, #120]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    96fc:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    96fe:	4b1e      	ldr	r3, [pc, #120]	; (9778 <FsrMotorCalculatedBreakaway+0x94>)
    9700:	789a      	ldrb	r2, [r3, #2]
    9702:	4b1e      	ldr	r3, [pc, #120]	; (977c <FsrMotorCalculatedBreakaway+0x98>)
    9704:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    9706:	4b1b      	ldr	r3, [pc, #108]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	2b00      	cmp	r3, #0
    970c:	d003      	beq.n	9716 <FsrMotorCalculatedBreakaway+0x32>
    970e:	4b19      	ldr	r3, [pc, #100]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	2b09      	cmp	r3, #9
    9714:	d902      	bls.n	971c <FsrMotorCalculatedBreakaway+0x38>
	{
		fm = 5;
    9716:	4b17      	ldr	r3, [pc, #92]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    9718:	2205      	movs	r2, #5
    971a:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    971c:	4b17      	ldr	r3, [pc, #92]	; (977c <FsrMotorCalculatedBreakaway+0x98>)
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	2b00      	cmp	r3, #0
    9722:	d003      	beq.n	972c <FsrMotorCalculatedBreakaway+0x48>
    9724:	4b15      	ldr	r3, [pc, #84]	; (977c <FsrMotorCalculatedBreakaway+0x98>)
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	2b09      	cmp	r3, #9
    972a:	d902      	bls.n	9732 <FsrMotorCalculatedBreakaway+0x4e>
	{
		gain = 5;
    972c:	4b13      	ldr	r3, [pc, #76]	; (977c <FsrMotorCalculatedBreakaway+0x98>)
    972e:	2205      	movs	r2, #5
    9730:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * 5*3686);  
    9732:	4b10      	ldr	r3, [pc, #64]	; (9774 <FsrMotorCalculatedBreakaway+0x90>)
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	4a12      	ldr	r2, [pc, #72]	; (9780 <FsrMotorCalculatedBreakaway+0x9c>)
    9738:	4353      	muls	r3, r2
    973a:	603b      	str	r3, [r7, #0]
	temp1 = temp1/9;
    973c:	683a      	ldr	r2, [r7, #0]
    973e:	4b11      	ldr	r3, [pc, #68]	; (9784 <FsrMotorCalculatedBreakaway+0xa0>)
    9740:	1c10      	adds	r0, r2, #0
    9742:	2109      	movs	r1, #9
    9744:	4798      	blx	r3
    9746:	1c03      	adds	r3, r0, #0
    9748:	603b      	str	r3, [r7, #0]
	temp1 = temp1/10;
    974a:	683a      	ldr	r2, [r7, #0]
    974c:	4b0d      	ldr	r3, [pc, #52]	; (9784 <FsrMotorCalculatedBreakaway+0xa0>)
    974e:	1c10      	adds	r0, r2, #0
    9750:	210a      	movs	r1, #10
    9752:	4798      	blx	r3
    9754:	1c03      	adds	r3, r0, #0
    9756:	603b      	str	r3, [r7, #0]
	returnFsr = temp1;
    9758:	1dbb      	adds	r3, r7, #6
    975a:	683a      	ldr	r2, [r7, #0]
    975c:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    975e:	1dba      	adds	r2, r7, #6
    9760:	1dbb      	adds	r3, r7, #6
    9762:	881b      	ldrh	r3, [r3, #0]
    9764:	18db      	adds	r3, r3, r3
    9766:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    9768:	1dbb      	adds	r3, r7, #6
    976a:	881b      	ldrh	r3, [r3, #0]
} 
    976c:	1c18      	adds	r0, r3, #0
    976e:	46bd      	mov	sp, r7
    9770:	b002      	add	sp, #8
    9772:	bd80      	pop	{r7, pc}
    9774:	20002eb4 	.word	0x20002eb4
    9778:	20002fb8 	.word	0x20002fb8
    977c:	20002ed2 	.word	0x20002ed2
    9780:	000047fe 	.word	0x000047fe
    9784:	000157d9 	.word	0x000157d9

00009788 <CurrentMotorCalculatedManual>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedManual(void)
{
    9788:	b580      	push	{r7, lr}
    978a:	b082      	sub	sp, #8
    978c:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    978e:	1dbb      	adds	r3, r7, #6
    9790:	2200      	movs	r2, #0
    9792:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    9794:	4b1f      	ldr	r3, [pc, #124]	; (9814 <CurrentMotorCalculatedManual+0x8c>)
    9796:	7d9a      	ldrb	r2, [r3, #22]
    9798:	4b1f      	ldr	r3, [pc, #124]	; (9818 <CurrentMotorCalculatedManual+0x90>)
    979a:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    979c:	4b1d      	ldr	r3, [pc, #116]	; (9814 <CurrentMotorCalculatedManual+0x8c>)
    979e:	789a      	ldrb	r2, [r3, #2]
    97a0:	4b1e      	ldr	r3, [pc, #120]	; (981c <CurrentMotorCalculatedManual+0x94>)
    97a2:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    97a4:	4b1c      	ldr	r3, [pc, #112]	; (9818 <CurrentMotorCalculatedManual+0x90>)
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	2b00      	cmp	r3, #0
    97aa:	d003      	beq.n	97b4 <CurrentMotorCalculatedManual+0x2c>
    97ac:	4b1a      	ldr	r3, [pc, #104]	; (9818 <CurrentMotorCalculatedManual+0x90>)
    97ae:	781b      	ldrb	r3, [r3, #0]
    97b0:	2b09      	cmp	r3, #9
    97b2:	d902      	bls.n	97ba <CurrentMotorCalculatedManual+0x32>
	{
		fm = 5;
    97b4:	4b18      	ldr	r3, [pc, #96]	; (9818 <CurrentMotorCalculatedManual+0x90>)
    97b6:	2205      	movs	r2, #5
    97b8:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    97ba:	4b18      	ldr	r3, [pc, #96]	; (981c <CurrentMotorCalculatedManual+0x94>)
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	2b00      	cmp	r3, #0
    97c0:	d003      	beq.n	97ca <CurrentMotorCalculatedManual+0x42>
    97c2:	4b16      	ldr	r3, [pc, #88]	; (981c <CurrentMotorCalculatedManual+0x94>)
    97c4:	781b      	ldrb	r3, [r3, #0]
    97c6:	2b09      	cmp	r3, #9
    97c8:	d902      	bls.n	97d0 <CurrentMotorCalculatedManual+0x48>
	{
		gain = 5;
    97ca:	4b14      	ldr	r3, [pc, #80]	; (981c <CurrentMotorCalculatedManual+0x94>)
    97cc:	2205      	movs	r2, #5
    97ce:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1900 + (fm * gain * 56*RUSSELLAMPCHANGE); //V00_62  was *56 now *84 //V00_78
    97d0:	4b11      	ldr	r3, [pc, #68]	; (9818 <CurrentMotorCalculatedManual+0x90>)
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	4a11      	ldr	r2, [pc, #68]	; (981c <CurrentMotorCalculatedManual+0x94>)
    97d6:	7812      	ldrb	r2, [r2, #0]
    97d8:	435a      	muls	r2, r3
    97da:	1c13      	adds	r3, r2, #0
    97dc:	00db      	lsls	r3, r3, #3
    97de:	1a9b      	subs	r3, r3, r2
    97e0:	00db      	lsls	r3, r3, #3
    97e2:	4a0f      	ldr	r2, [pc, #60]	; (9820 <CurrentMotorCalculatedManual+0x98>)
    97e4:	189b      	adds	r3, r3, r2
    97e6:	603b      	str	r3, [r7, #0]
	//---------------------
	// to make it 75% divide now by 100
	//---------------------
	temp1 = temp1 * 205;
    97e8:	683b      	ldr	r3, [r7, #0]
    97ea:	22cd      	movs	r2, #205	; 0xcd
    97ec:	4353      	muls	r3, r2
    97ee:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    97f0:	683a      	ldr	r2, [r7, #0]
    97f2:	4b0c      	ldr	r3, [pc, #48]	; (9824 <CurrentMotorCalculatedManual+0x9c>)
    97f4:	1c10      	adds	r0, r2, #0
    97f6:	22fa      	movs	r2, #250	; 0xfa
    97f8:	0091      	lsls	r1, r2, #2
    97fa:	4798      	blx	r3
    97fc:	1c03      	adds	r3, r0, #0
    97fe:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    9800:	1dbb      	adds	r3, r7, #6
    9802:	683a      	ldr	r2, [r7, #0]
    9804:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    9806:	1dbb      	adds	r3, r7, #6
    9808:	881b      	ldrh	r3, [r3, #0]
} 
    980a:	1c18      	adds	r0, r3, #0
    980c:	46bd      	mov	sp, r7
    980e:	b002      	add	sp, #8
    9810:	bd80      	pop	{r7, pc}
    9812:	46c0      	nop			; (mov r8, r8)
    9814:	20002fb8 	.word	0x20002fb8
    9818:	20002eb4 	.word	0x20002eb4
    981c:	20002ed2 	.word	0x20002ed2
    9820:	0000076c 	.word	0x0000076c
    9824:	000157d9 	.word	0x000157d9

00009828 <FsrMotorCalculatedManual>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculatedManual(void)
{
    9828:	b580      	push	{r7, lr}
    982a:	b082      	sub	sp, #8
    982c:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnFsr;
	
	returnFsr = 0;
    982e:	1dbb      	adds	r3, r7, #6
    9830:	2200      	movs	r2, #0
    9832:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    9834:	4b20      	ldr	r3, [pc, #128]	; (98b8 <FsrMotorCalculatedManual+0x90>)
    9836:	7d9a      	ldrb	r2, [r3, #22]
    9838:	4b20      	ldr	r3, [pc, #128]	; (98bc <FsrMotorCalculatedManual+0x94>)
    983a:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    983c:	4b1e      	ldr	r3, [pc, #120]	; (98b8 <FsrMotorCalculatedManual+0x90>)
    983e:	789a      	ldrb	r2, [r3, #2]
    9840:	4b1f      	ldr	r3, [pc, #124]	; (98c0 <FsrMotorCalculatedManual+0x98>)
    9842:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    9844:	4b1d      	ldr	r3, [pc, #116]	; (98bc <FsrMotorCalculatedManual+0x94>)
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	2b00      	cmp	r3, #0
    984a:	d003      	beq.n	9854 <FsrMotorCalculatedManual+0x2c>
    984c:	4b1b      	ldr	r3, [pc, #108]	; (98bc <FsrMotorCalculatedManual+0x94>)
    984e:	781b      	ldrb	r3, [r3, #0]
    9850:	2b09      	cmp	r3, #9
    9852:	d902      	bls.n	985a <FsrMotorCalculatedManual+0x32>
	{
		fm = 5;
    9854:	4b19      	ldr	r3, [pc, #100]	; (98bc <FsrMotorCalculatedManual+0x94>)
    9856:	2205      	movs	r2, #5
    9858:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    985a:	4b19      	ldr	r3, [pc, #100]	; (98c0 <FsrMotorCalculatedManual+0x98>)
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	2b00      	cmp	r3, #0
    9860:	d003      	beq.n	986a <FsrMotorCalculatedManual+0x42>
    9862:	4b17      	ldr	r3, [pc, #92]	; (98c0 <FsrMotorCalculatedManual+0x98>)
    9864:	781b      	ldrb	r3, [r3, #0]
    9866:	2b09      	cmp	r3, #9
    9868:	d902      	bls.n	9870 <FsrMotorCalculatedManual+0x48>
	{
		gain = 5;
    986a:	4b15      	ldr	r3, [pc, #84]	; (98c0 <FsrMotorCalculatedManual+0x98>)
    986c:	2205      	movs	r2, #5
    986e:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * gain * 3686); 
    9870:	4b12      	ldr	r3, [pc, #72]	; (98bc <FsrMotorCalculatedManual+0x94>)
    9872:	781b      	ldrb	r3, [r3, #0]
    9874:	4a12      	ldr	r2, [pc, #72]	; (98c0 <FsrMotorCalculatedManual+0x98>)
    9876:	7812      	ldrb	r2, [r2, #0]
    9878:	4353      	muls	r3, r2
    987a:	4a12      	ldr	r2, [pc, #72]	; (98c4 <FsrMotorCalculatedManual+0x9c>)
    987c:	4353      	muls	r3, r2
    987e:	603b      	str	r3, [r7, #0]
	//---------------------
	//  
	//---------------------
	temp1 = temp1/9;
    9880:	683a      	ldr	r2, [r7, #0]
    9882:	4b11      	ldr	r3, [pc, #68]	; (98c8 <FsrMotorCalculatedManual+0xa0>)
    9884:	1c10      	adds	r0, r2, #0
    9886:	2109      	movs	r1, #9
    9888:	4798      	blx	r3
    988a:	1c03      	adds	r3, r0, #0
    988c:	603b      	str	r3, [r7, #0]
	temp1 = temp1/9;
    988e:	683a      	ldr	r2, [r7, #0]
    9890:	4b0d      	ldr	r3, [pc, #52]	; (98c8 <FsrMotorCalculatedManual+0xa0>)
    9892:	1c10      	adds	r0, r2, #0
    9894:	2109      	movs	r1, #9
    9896:	4798      	blx	r3
    9898:	1c03      	adds	r3, r0, #0
    989a:	603b      	str	r3, [r7, #0]
	returnFsr = temp1;
    989c:	1dbb      	adds	r3, r7, #6
    989e:	683a      	ldr	r2, [r7, #0]
    98a0:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    98a2:	1dba      	adds	r2, r7, #6
    98a4:	1dbb      	adds	r3, r7, #6
    98a6:	881b      	ldrh	r3, [r3, #0]
    98a8:	18db      	adds	r3, r3, r3
    98aa:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    98ac:	1dbb      	adds	r3, r7, #6
    98ae:	881b      	ldrh	r3, [r3, #0]
} 
    98b0:	1c18      	adds	r0, r3, #0
    98b2:	46bd      	mov	sp, r7
    98b4:	b002      	add	sp, #8
    98b6:	bd80      	pop	{r7, pc}
    98b8:	20002fb8 	.word	0x20002fb8
    98bc:	20002eb4 	.word	0x20002eb4
    98c0:	20002ed2 	.word	0x20002ed2
    98c4:	00000e66 	.word	0x00000e66
    98c8:	000157d9 	.word	0x000157d9

000098cc <ConfigureMotorFLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitChannel(void)
{
    98cc:	b580      	push	{r7, lr}
    98ce:	b084      	sub	sp, #16
    98d0:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    98d2:	1d3b      	adds	r3, r7, #4
    98d4:	1c18      	adds	r0, r3, #0
    98d6:	4b0b      	ldr	r3, [pc, #44]	; (9904 <ConfigureMotorFLimitChannel+0x38>)
    98d8:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA21A_EIC_EXTINT5;
    98da:	1d3b      	adds	r3, r7, #4
    98dc:	2215      	movs	r2, #21
    98de:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA21A_EIC_EXTINT5;
    98e0:	1d3b      	adds	r3, r7, #4
    98e2:	2200      	movs	r2, #0
    98e4:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    98e6:	1d3b      	adds	r3, r7, #4
    98e8:	2200      	movs	r2, #0
    98ea:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    98ec:	1d3b      	adds	r3, r7, #4
    98ee:	2203      	movs	r2, #3
    98f0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(5, &config_extint_chan);
    98f2:	1d3b      	adds	r3, r7, #4
    98f4:	2005      	movs	r0, #5
    98f6:	1c19      	adds	r1, r3, #0
    98f8:	4b03      	ldr	r3, [pc, #12]	; (9908 <ConfigureMotorFLimitChannel+0x3c>)
    98fa:	4798      	blx	r3
}
    98fc:	46bd      	mov	sp, r7
    98fe:	b004      	add	sp, #16
    9900:	bd80      	pop	{r7, pc}
    9902:	46c0      	nop			; (mov r8, r8)
    9904:	000067f5 	.word	0x000067f5
    9908:	0000406d 	.word	0x0000406d

0000990c <ConfigureMotorFLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitCallbacks(void)
{
    990c:	b580      	push	{r7, lr}
    990e:	af00      	add	r7, sp, #0
	extint_register_callback(MotorFLimitCallback,5,EXTINT_CALLBACK_TYPE_DETECT);
    9910:	4b05      	ldr	r3, [pc, #20]	; (9928 <ConfigureMotorFLimitCallbacks+0x1c>)
    9912:	1c18      	adds	r0, r3, #0
    9914:	2105      	movs	r1, #5
    9916:	2200      	movs	r2, #0
    9918:	4b04      	ldr	r3, [pc, #16]	; (992c <ConfigureMotorFLimitCallbacks+0x20>)
    991a:	4798      	blx	r3
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
    991c:	2005      	movs	r0, #5
    991e:	2100      	movs	r1, #0
    9920:	4b03      	ldr	r3, [pc, #12]	; (9930 <ConfigureMotorFLimitCallbacks+0x24>)
    9922:	4798      	blx	r3
}
    9924:	46bd      	mov	sp, r7
    9926:	bd80      	pop	{r7, pc}
    9928:	00009935 	.word	0x00009935
    992c:	00004239 	.word	0x00004239
    9930:	00004295 	.word	0x00004295

00009934 <MotorFLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorFLimitCallback(void)
{
    9934:	b580      	push	{r7, lr}
    9936:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORFLIMIT;
    9938:	4b0c      	ldr	r3, [pc, #48]	; (996c <MotorFLimitCallback+0x38>)
    993a:	681b      	ldr	r3, [r3, #0]
    993c:	2204      	movs	r2, #4
    993e:	431a      	orrs	r2, r3
    9940:	4b0a      	ldr	r3, [pc, #40]	; (996c <MotorFLimitCallback+0x38>)
    9942:	601a      	str	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);		
    9944:	2015      	movs	r0, #21
    9946:	4b0a      	ldr	r3, [pc, #40]	; (9970 <MotorFLimitCallback+0x3c>)
    9948:	4798      	blx	r3
    994a:	1c03      	adds	r3, r0, #0
    994c:	1c1a      	adds	r2, r3, #0
    994e:	4b09      	ldr	r3, [pc, #36]	; (9974 <MotorFLimitCallback+0x40>)
    9950:	701a      	strb	r2, [r3, #0]
	if ((flimitState == 0)&&(action!=RETRACTING))
    9952:	4b08      	ldr	r3, [pc, #32]	; (9974 <MotorFLimitCallback+0x40>)
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	2b00      	cmp	r3, #0
    9958:	d106      	bne.n	9968 <MotorFLimitCallback+0x34>
    995a:	4b07      	ldr	r3, [pc, #28]	; (9978 <MotorFLimitCallback+0x44>)
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	2b02      	cmp	r3, #2
    9960:	d002      	beq.n	9968 <MotorFLimitCallback+0x34>
	{
		MotorOff(0);
    9962:	2000      	movs	r0, #0
    9964:	4b05      	ldr	r3, [pc, #20]	; (997c <MotorFLimitCallback+0x48>)
    9966:	4798      	blx	r3
	}
}
    9968:	46bd      	mov	sp, r7
    996a:	bd80      	pop	{r7, pc}
    996c:	2000369c 	.word	0x2000369c
    9970:	00006759 	.word	0x00006759
    9974:	20003072 	.word	0x20003072
    9978:	200004ae 	.word	0x200004ae
    997c:	00009b75 	.word	0x00009b75

00009980 <ConfigureMotorHLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitChannel(void)
{
    9980:	b580      	push	{r7, lr}
    9982:	b084      	sub	sp, #16
    9984:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    9986:	1d3b      	adds	r3, r7, #4
    9988:	1c18      	adds	r0, r3, #0
    998a:	4b0b      	ldr	r3, [pc, #44]	; (99b8 <ConfigureMotorHLimitChannel+0x38>)
    998c:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA20A_EIC_EXTINT4;   
    998e:	1d3b      	adds	r3, r7, #4
    9990:	2214      	movs	r2, #20
    9992:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA20A_EIC_EXTINT4;   
    9994:	1d3b      	adds	r3, r7, #4
    9996:	2200      	movs	r2, #0
    9998:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    999a:	1d3b      	adds	r3, r7, #4
    999c:	2200      	movs	r2, #0
    999e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH; 
    99a0:	1d3b      	adds	r3, r7, #4
    99a2:	2203      	movs	r2, #3
    99a4:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(4, &config_extint_chan);   
    99a6:	1d3b      	adds	r3, r7, #4
    99a8:	2004      	movs	r0, #4
    99aa:	1c19      	adds	r1, r3, #0
    99ac:	4b03      	ldr	r3, [pc, #12]	; (99bc <ConfigureMotorHLimitChannel+0x3c>)
    99ae:	4798      	blx	r3
}
    99b0:	46bd      	mov	sp, r7
    99b2:	b004      	add	sp, #16
    99b4:	bd80      	pop	{r7, pc}
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	000067f5 	.word	0x000067f5
    99bc:	0000406d 	.word	0x0000406d

000099c0 <ConfigureMotorHLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitCallbacks(void)
{
    99c0:	b580      	push	{r7, lr}
    99c2:	af00      	add	r7, sp, #0
	extint_register_callback(MotorHLimitCallback,4,EXTINT_CALLBACK_TYPE_DETECT);
    99c4:	4b05      	ldr	r3, [pc, #20]	; (99dc <ConfigureMotorHLimitCallbacks+0x1c>)
    99c6:	1c18      	adds	r0, r3, #0
    99c8:	2104      	movs	r1, #4
    99ca:	2200      	movs	r2, #0
    99cc:	4b04      	ldr	r3, [pc, #16]	; (99e0 <ConfigureMotorHLimitCallbacks+0x20>)
    99ce:	4798      	blx	r3
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
    99d0:	2004      	movs	r0, #4
    99d2:	2100      	movs	r1, #0
    99d4:	4b03      	ldr	r3, [pc, #12]	; (99e4 <ConfigureMotorHLimitCallbacks+0x24>)
    99d6:	4798      	blx	r3
}
    99d8:	46bd      	mov	sp, r7
    99da:	bd80      	pop	{r7, pc}
    99dc:	000099e9 	.word	0x000099e9
    99e0:	00004239 	.word	0x00004239
    99e4:	00004295 	.word	0x00004295

000099e8 <MotorHLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorHLimitCallback(void)
{
    99e8:	b580      	push	{r7, lr}
    99ea:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORHLIMIT;
    99ec:	4b1a      	ldr	r3, [pc, #104]	; (9a58 <MotorHLimitCallback+0x70>)
    99ee:	681b      	ldr	r3, [r3, #0]
    99f0:	2202      	movs	r2, #2
    99f2:	431a      	orrs	r2, r3
    99f4:	4b18      	ldr	r3, [pc, #96]	; (9a58 <MotorHLimitCallback+0x70>)
    99f6:	601a      	str	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    99f8:	2014      	movs	r0, #20
    99fa:	4b18      	ldr	r3, [pc, #96]	; (9a5c <MotorHLimitCallback+0x74>)
    99fc:	4798      	blx	r3
    99fe:	1c03      	adds	r3, r0, #0
    9a00:	1c1a      	adds	r2, r3, #0
    9a02:	4b17      	ldr	r3, [pc, #92]	; (9a60 <MotorHLimitCallback+0x78>)
    9a04:	701a      	strb	r2, [r3, #0]
	
 	if (hlimitState == 0)
    9a06:	4b16      	ldr	r3, [pc, #88]	; (9a60 <MotorHLimitCallback+0x78>)
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	d112      	bne.n	9a34 <MotorHLimitCallback+0x4c>
	{
		if ((action != EXTENDING)&&(action !=EXTENDING_BY_ENCODER))
    9a0e:	4b15      	ldr	r3, [pc, #84]	; (9a64 <MotorHLimitCallback+0x7c>)
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	2b01      	cmp	r3, #1
    9a14:	d00a      	beq.n	9a2c <MotorHLimitCallback+0x44>
    9a16:	4b13      	ldr	r3, [pc, #76]	; (9a64 <MotorHLimitCallback+0x7c>)
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2b04      	cmp	r3, #4
    9a1c:	d006      	beq.n	9a2c <MotorHLimitCallback+0x44>
		{
			MotorOff(0);
    9a1e:	2000      	movs	r0, #0
    9a20:	4b11      	ldr	r3, [pc, #68]	; (9a68 <MotorHLimitCallback+0x80>)
    9a22:	4798      	blx	r3
			homeLimit = HOME_IN;
    9a24:	4b11      	ldr	r3, [pc, #68]	; (9a6c <MotorHLimitCallback+0x84>)
    9a26:	2200      	movs	r2, #0
    9a28:	701a      	strb	r2, [r3, #0]
    9a2a:	e012      	b.n	9a52 <MotorHLimitCallback+0x6a>
		}
		else
		{
			homeLimit = HOME_OUT;
    9a2c:	4b0f      	ldr	r3, [pc, #60]	; (9a6c <MotorHLimitCallback+0x84>)
    9a2e:	2201      	movs	r2, #1
    9a30:	701a      	strb	r2, [r3, #0]
    9a32:	e00e      	b.n	9a52 <MotorHLimitCallback+0x6a>
		}
	}
	else
	{
		// added below logic v01_27
		if ((action != EXTENDING)&&(action !=EXTENDING_BY_ENCODER))
    9a34:	4b0b      	ldr	r3, [pc, #44]	; (9a64 <MotorHLimitCallback+0x7c>)
    9a36:	781b      	ldrb	r3, [r3, #0]
    9a38:	2b01      	cmp	r3, #1
    9a3a:	d007      	beq.n	9a4c <MotorHLimitCallback+0x64>
    9a3c:	4b09      	ldr	r3, [pc, #36]	; (9a64 <MotorHLimitCallback+0x7c>)
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	2b04      	cmp	r3, #4
    9a42:	d003      	beq.n	9a4c <MotorHLimitCallback+0x64>
		{
//			MotorOff();
			homeLimit = HOME_IN;
    9a44:	4b09      	ldr	r3, [pc, #36]	; (9a6c <MotorHLimitCallback+0x84>)
    9a46:	2200      	movs	r2, #0
    9a48:	701a      	strb	r2, [r3, #0]
    9a4a:	e002      	b.n	9a52 <MotorHLimitCallback+0x6a>
		}
		else
		{
			homeLimit = HOME_OUT;
    9a4c:	4b07      	ldr	r3, [pc, #28]	; (9a6c <MotorHLimitCallback+0x84>)
    9a4e:	2201      	movs	r2, #1
    9a50:	701a      	strb	r2, [r3, #0]
		}
	}
}
    9a52:	46bd      	mov	sp, r7
    9a54:	bd80      	pop	{r7, pc}
    9a56:	46c0      	nop			; (mov r8, r8)
    9a58:	2000369c 	.word	0x2000369c
    9a5c:	00006759 	.word	0x00006759
    9a60:	20003068 	.word	0x20003068
    9a64:	200004ae 	.word	0x200004ae
    9a68:	00009b75 	.word	0x00009b75
    9a6c:	20000001 	.word	0x20000001

00009a70 <MotorHLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorHLimitTask(void)
{
    9a70:	b580      	push	{r7, lr}
    9a72:	af00      	add	r7, sp, #0
	hlimitCount++;	
    9a74:	4b07      	ldr	r3, [pc, #28]	; (9a94 <MotorHLimitTask+0x24>)
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	3301      	adds	r3, #1
    9a7a:	b2da      	uxtb	r2, r3
    9a7c:	4b05      	ldr	r3, [pc, #20]	; (9a94 <MotorHLimitTask+0x24>)
    9a7e:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    9a80:	2014      	movs	r0, #20
    9a82:	4b05      	ldr	r3, [pc, #20]	; (9a98 <MotorHLimitTask+0x28>)
    9a84:	4798      	blx	r3
    9a86:	1c03      	adds	r3, r0, #0
    9a88:	1c1a      	adds	r2, r3, #0
    9a8a:	4b04      	ldr	r3, [pc, #16]	; (9a9c <MotorHLimitTask+0x2c>)
    9a8c:	701a      	strb	r2, [r3, #0]
}
    9a8e:	46bd      	mov	sp, r7
    9a90:	bd80      	pop	{r7, pc}
    9a92:	46c0      	nop			; (mov r8, r8)
    9a94:	20002eef 	.word	0x20002eef
    9a98:	00006759 	.word	0x00006759
    9a9c:	20003068 	.word	0x20003068

00009aa0 <MotorFLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorFLimitTask(void)
{
    9aa0:	b580      	push	{r7, lr}
    9aa2:	af00      	add	r7, sp, #0
	flimitCount++;
    9aa4:	4b0c      	ldr	r3, [pc, #48]	; (9ad8 <MotorFLimitTask+0x38>)
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	3301      	adds	r3, #1
    9aaa:	b2da      	uxtb	r2, r3
    9aac:	4b0a      	ldr	r3, [pc, #40]	; (9ad8 <MotorFLimitTask+0x38>)
    9aae:	701a      	strb	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);
    9ab0:	2015      	movs	r0, #21
    9ab2:	4b0a      	ldr	r3, [pc, #40]	; (9adc <MotorFLimitTask+0x3c>)
    9ab4:	4798      	blx	r3
    9ab6:	1c03      	adds	r3, r0, #0
    9ab8:	1c1a      	adds	r2, r3, #0
    9aba:	4b09      	ldr	r3, [pc, #36]	; (9ae0 <MotorFLimitTask+0x40>)
    9abc:	701a      	strb	r2, [r3, #0]
	
	if ((flimitState == 0)&&(action!= RETRACTING))
    9abe:	4b08      	ldr	r3, [pc, #32]	; (9ae0 <MotorFLimitTask+0x40>)
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	d106      	bne.n	9ad4 <MotorFLimitTask+0x34>
    9ac6:	4b07      	ldr	r3, [pc, #28]	; (9ae4 <MotorFLimitTask+0x44>)
    9ac8:	781b      	ldrb	r3, [r3, #0]
    9aca:	2b02      	cmp	r3, #2
    9acc:	d002      	beq.n	9ad4 <MotorFLimitTask+0x34>
	{
		MotorOff(1);
    9ace:	2001      	movs	r0, #1
    9ad0:	4b05      	ldr	r3, [pc, #20]	; (9ae8 <MotorFLimitTask+0x48>)
    9ad2:	4798      	blx	r3
	}	
}
    9ad4:	46bd      	mov	sp, r7
    9ad6:	bd80      	pop	{r7, pc}
    9ad8:	20002eb5 	.word	0x20002eb5
    9adc:	00006759 	.word	0x00006759
    9ae0:	20003072 	.word	0x20003072
    9ae4:	200004ae 	.word	0x200004ae
    9ae8:	00009b75 	.word	0x00009b75

00009aec <MotorInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorInit(void)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	af00      	add	r7, sp, #0
	hlimitCount = 0;
    9af0:	4b13      	ldr	r3, [pc, #76]	; (9b40 <MotorInit+0x54>)
    9af2:	2200      	movs	r2, #0
    9af4:	701a      	strb	r2, [r3, #0]
	flimitCount = 0; 
    9af6:	4b13      	ldr	r3, [pc, #76]	; (9b44 <MotorInit+0x58>)
    9af8:	2200      	movs	r2, #0
    9afa:	701a      	strb	r2, [r3, #0]
	
	ConfigureMotorHLimitChannel();
    9afc:	4b12      	ldr	r3, [pc, #72]	; (9b48 <MotorInit+0x5c>)
    9afe:	4798      	blx	r3
	ConfigureMotorHLimitCallbacks();
    9b00:	4b12      	ldr	r3, [pc, #72]	; (9b4c <MotorInit+0x60>)
    9b02:	4798      	blx	r3
	
	ConfigureMotorFLimitChannel();
    9b04:	4b12      	ldr	r3, [pc, #72]	; (9b50 <MotorInit+0x64>)
    9b06:	4798      	blx	r3
	ConfigureMotorFLimitCallbacks();	
    9b08:	4b12      	ldr	r3, [pc, #72]	; (9b54 <MotorInit+0x68>)
    9b0a:	4798      	blx	r3
	
	flimitState = port_pin_get_input_level(FLIMIT);
    9b0c:	2015      	movs	r0, #21
    9b0e:	4b12      	ldr	r3, [pc, #72]	; (9b58 <MotorInit+0x6c>)
    9b10:	4798      	blx	r3
    9b12:	1c03      	adds	r3, r0, #0
    9b14:	1c1a      	adds	r2, r3, #0
    9b16:	4b11      	ldr	r3, [pc, #68]	; (9b5c <MotorInit+0x70>)
    9b18:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    9b1a:	2014      	movs	r0, #20
    9b1c:	4b0e      	ldr	r3, [pc, #56]	; (9b58 <MotorInit+0x6c>)
    9b1e:	4798      	blx	r3
    9b20:	1c03      	adds	r3, r0, #0
    9b22:	1c1a      	adds	r2, r3, #0
    9b24:	4b0e      	ldr	r3, [pc, #56]	; (9b60 <MotorInit+0x74>)
    9b26:	701a      	strb	r2, [r3, #0]
	
	ConfigureEncoder();
    9b28:	4b0e      	ldr	r3, [pc, #56]	; (9b64 <MotorInit+0x78>)
    9b2a:	4798      	blx	r3
	ConfigureEncoderCallbacks();
    9b2c:	4b0e      	ldr	r3, [pc, #56]	; (9b68 <MotorInit+0x7c>)
    9b2e:	4798      	blx	r3
	encoderCount = 0; 
    9b30:	4b0e      	ldr	r3, [pc, #56]	; (9b6c <MotorInit+0x80>)
    9b32:	2200      	movs	r2, #0
    9b34:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    9b36:	4b0e      	ldr	r3, [pc, #56]	; (9b70 <MotorInit+0x84>)
    9b38:	2200      	movs	r2, #0
    9b3a:	801a      	strh	r2, [r3, #0]
}
    9b3c:	46bd      	mov	sp, r7
    9b3e:	bd80      	pop	{r7, pc}
    9b40:	20002eef 	.word	0x20002eef
    9b44:	20002eb5 	.word	0x20002eb5
    9b48:	00009981 	.word	0x00009981
    9b4c:	000099c1 	.word	0x000099c1
    9b50:	000098cd 	.word	0x000098cd
    9b54:	0000990d 	.word	0x0000990d
    9b58:	00006759 	.word	0x00006759
    9b5c:	20003072 	.word	0x20003072
    9b60:	20003068 	.word	0x20003068
    9b64:	00006555 	.word	0x00006555
    9b68:	00006595 	.word	0x00006595
    9b6c:	200004a8 	.word	0x200004a8
    9b70:	20001e9c 	.word	0x20001e9c

00009b74 <MotorOff>:
// FUNCTION:   MotorOff
//------------------------------------------------------------------------------
// This function Initializes registers to allow button interrupts
//==============================================================================
void MotorOff(uint8_t useHoldOff)
{
    9b74:	b580      	push	{r7, lr}
    9b76:	b084      	sub	sp, #16
    9b78:	af00      	add	r7, sp, #0
    9b7a:	1c02      	adds	r2, r0, #0
    9b7c:	1dfb      	adds	r3, r7, #7
    9b7e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    9b80:	1c3b      	adds	r3, r7, #0
    9b82:	330c      	adds	r3, #12
    9b84:	1c18      	adds	r0, r3, #0
    9b86:	4b20      	ldr	r3, [pc, #128]	; (9c08 <MotorOff+0x94>)
    9b88:	4798      	blx	r3
  
	motorOn = FALSE; 
    9b8a:	4b20      	ldr	r3, [pc, #128]	; (9c0c <MotorOff+0x98>)
    9b8c:	2200      	movs	r2, #0
    9b8e:	701a      	strb	r2, [r3, #0]
	motorRunTime = 0;	
    9b90:	4b1f      	ldr	r3, [pc, #124]	; (9c10 <MotorOff+0x9c>)
    9b92:	2200      	movs	r2, #0
    9b94:	801a      	strh	r2, [r3, #0]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    9b96:	1c3b      	adds	r3, r7, #0
    9b98:	330c      	adds	r3, #12
    9b9a:	2201      	movs	r2, #1
    9b9c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);
    9b9e:	1c3b      	adds	r3, r7, #0
    9ba0:	330c      	adds	r3, #12
    9ba2:	2012      	movs	r0, #18
    9ba4:	1c19      	adds	r1, r3, #0
    9ba6:	4b1b      	ldr	r3, [pc, #108]	; (9c14 <MotorOff+0xa0>)
    9ba8:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    9baa:	2012      	movs	r0, #18
    9bac:	2100      	movs	r1, #0
    9bae:	4b1a      	ldr	r3, [pc, #104]	; (9c18 <MotorOff+0xa4>)
    9bb0:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9bb2:	1c3b      	adds	r3, r7, #0
    9bb4:	330c      	adds	r3, #12
    9bb6:	2018      	movs	r0, #24
    9bb8:	1c19      	adds	r1, r3, #0
    9bba:	4b16      	ldr	r3, [pc, #88]	; (9c14 <MotorOff+0xa0>)
    9bbc:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    9bbe:	2018      	movs	r0, #24
    9bc0:	2100      	movs	r1, #0
    9bc2:	4b15      	ldr	r3, [pc, #84]	; (9c18 <MotorOff+0xa4>)
    9bc4:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);
    9bc6:	1c3b      	adds	r3, r7, #0
    9bc8:	330c      	adds	r3, #12
    9bca:	2013      	movs	r0, #19
    9bcc:	1c19      	adds	r1, r3, #0
    9bce:	4b11      	ldr	r3, [pc, #68]	; (9c14 <MotorOff+0xa0>)
    9bd0:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    9bd2:	2013      	movs	r0, #19
    9bd4:	2100      	movs	r1, #0
    9bd6:	4b10      	ldr	r3, [pc, #64]	; (9c18 <MotorOff+0xa4>)
    9bd8:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);
    9bda:	1c3b      	adds	r3, r7, #0
    9bdc:	330c      	adds	r3, #12
    9bde:	2019      	movs	r0, #25
    9be0:	1c19      	adds	r1, r3, #0
    9be2:	4b0c      	ldr	r3, [pc, #48]	; (9c14 <MotorOff+0xa0>)
    9be4:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9be6:	2019      	movs	r0, #25
    9be8:	2100      	movs	r1, #0
    9bea:	4b0b      	ldr	r3, [pc, #44]	; (9c18 <MotorOff+0xa4>)
    9bec:	4798      	blx	r3
	
	action = NONE; 
    9bee:	4b0b      	ldr	r3, [pc, #44]	; (9c1c <MotorOff+0xa8>)
    9bf0:	2200      	movs	r2, #0
    9bf2:	701a      	strb	r2, [r3, #0]
	if (useHoldOff != 0)
    9bf4:	1dfb      	adds	r3, r7, #7
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d002      	beq.n	9c02 <MotorOff+0x8e>
	{
		BrakeHoldOff(100);
    9bfc:	2064      	movs	r0, #100	; 0x64
    9bfe:	4b08      	ldr	r3, [pc, #32]	; (9c20 <MotorOff+0xac>)
    9c00:	4798      	blx	r3
	}
}
    9c02:	46bd      	mov	sp, r7
    9c04:	b004      	add	sp, #16
    9c06:	bd80      	pop	{r7, pc}
    9c08:	00006739 	.word	0x00006739
    9c0c:	200004b0 	.word	0x200004b0
    9c10:	20002eb2 	.word	0x20002eb2
    9c14:	00011dbd 	.word	0x00011dbd
    9c18:	000067a1 	.word	0x000067a1
    9c1c:	200004ae 	.word	0x200004ae
    9c20:	00006829 	.word	0x00006829

00009c24 <RetractByEncoderCount>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RetractByEncoderCount(void)
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b082      	sub	sp, #8
    9c28:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9c2a:	1d3b      	adds	r3, r7, #4
    9c2c:	1c18      	adds	r0, r3, #0
    9c2e:	4b11      	ldr	r3, [pc, #68]	; (9c74 <RetractByEncoderCount+0x50>)
    9c30:	4798      	blx	r3
	
	motorOn = TRUE; 
    9c32:	4b11      	ldr	r3, [pc, #68]	; (9c78 <RetractByEncoderCount+0x54>)
    9c34:	2201      	movs	r2, #1
    9c36:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    9c38:	2013      	movs	r0, #19
    9c3a:	2100      	movs	r1, #0
    9c3c:	4b0f      	ldr	r3, [pc, #60]	; (9c7c <RetractByEncoderCount+0x58>)
    9c3e:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    9c40:	2019      	movs	r0, #25
    9c42:	2101      	movs	r1, #1
    9c44:	4b0d      	ldr	r3, [pc, #52]	; (9c7c <RetractByEncoderCount+0x58>)
    9c46:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9c48:	1d3b      	adds	r3, r7, #4
    9c4a:	2200      	movs	r2, #0
    9c4c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9c4e:	1d3b      	adds	r3, r7, #4
    9c50:	2200      	movs	r2, #0
    9c52:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9c54:	1d3b      	adds	r3, r7, #4
    9c56:	2012      	movs	r0, #18
    9c58:	1c19      	adds	r1, r3, #0
    9c5a:	4b09      	ldr	r3, [pc, #36]	; (9c80 <RetractByEncoderCount+0x5c>)
    9c5c:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9c5e:	1d3b      	adds	r3, r7, #4
    9c60:	2018      	movs	r0, #24
    9c62:	1c19      	adds	r1, r3, #0
    9c64:	4b06      	ldr	r3, [pc, #24]	; (9c80 <RetractByEncoderCount+0x5c>)
    9c66:	4798      	blx	r3
	action = RETRACTING_BY_ENCODER; 
    9c68:	4b06      	ldr	r3, [pc, #24]	; (9c84 <RetractByEncoderCount+0x60>)
    9c6a:	2203      	movs	r2, #3
    9c6c:	701a      	strb	r2, [r3, #0]
}
    9c6e:	46bd      	mov	sp, r7
    9c70:	b002      	add	sp, #8
    9c72:	bd80      	pop	{r7, pc}
    9c74:	00006739 	.word	0x00006739
    9c78:	200004b0 	.word	0x200004b0
    9c7c:	000067a1 	.word	0x000067a1
    9c80:	00011dbd 	.word	0x00011dbd
    9c84:	200004ae 	.word	0x200004ae

00009c88 <MotorCCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorCCW(void)
{
    9c88:	b580      	push	{r7, lr}
    9c8a:	b082      	sub	sp, #8
    9c8c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9c8e:	1d3b      	adds	r3, r7, #4
    9c90:	1c18      	adds	r0, r3, #0
    9c92:	4b1f      	ldr	r3, [pc, #124]	; (9d10 <MotorCCW+0x88>)
    9c94:	4798      	blx	r3
	
	motorOn = TRUE; 
    9c96:	4b1f      	ldr	r3, [pc, #124]	; (9d14 <MotorCCW+0x8c>)
    9c98:	2201      	movs	r2, #1
    9c9a:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    9c9c:	4b1e      	ldr	r3, [pc, #120]	; (9d18 <MotorCCW+0x90>)
    9c9e:	2296      	movs	r2, #150	; 0x96
    9ca0:	0052      	lsls	r2, r2, #1
    9ca2:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0; 
    9ca4:	4b1d      	ldr	r3, [pc, #116]	; (9d1c <MotorCCW+0x94>)
    9ca6:	2200      	movs	r2, #0
    9ca8:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9caa:	4b1d      	ldr	r3, [pc, #116]	; (9d20 <MotorCCW+0x98>)
    9cac:	2200      	movs	r2, #0
    9cae:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;
    9cb0:	4b1c      	ldr	r3, [pc, #112]	; (9d24 <MotorCCW+0x9c>)
    9cb2:	2200      	movs	r2, #0
    9cb4:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    9cb6:	4b1c      	ldr	r3, [pc, #112]	; (9d28 <MotorCCW+0xa0>)
    9cb8:	2200      	movs	r2, #0
    9cba:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    9cbc:	2013      	movs	r0, #19
    9cbe:	2100      	movs	r1, #0
    9cc0:	4b1a      	ldr	r3, [pc, #104]	; (9d2c <MotorCCW+0xa4>)
    9cc2:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    9cc4:	2019      	movs	r0, #25
    9cc6:	2101      	movs	r1, #1
    9cc8:	4b18      	ldr	r3, [pc, #96]	; (9d2c <MotorCCW+0xa4>)
    9cca:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9ccc:	1d3b      	adds	r3, r7, #4
    9cce:	2200      	movs	r2, #0
    9cd0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9cd2:	1d3b      	adds	r3, r7, #4
    9cd4:	2200      	movs	r2, #0
    9cd6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9cd8:	1d3b      	adds	r3, r7, #4
    9cda:	2012      	movs	r0, #18
    9cdc:	1c19      	adds	r1, r3, #0
    9cde:	4b14      	ldr	r3, [pc, #80]	; (9d30 <MotorCCW+0xa8>)
    9ce0:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9ce2:	1d3b      	adds	r3, r7, #4
    9ce4:	2018      	movs	r0, #24
    9ce6:	1c19      	adds	r1, r3, #0
    9ce8:	4b11      	ldr	r3, [pc, #68]	; (9d30 <MotorCCW+0xa8>)
    9cea:	4798      	blx	r3
	action = RETRACTING; 
    9cec:	4b11      	ldr	r3, [pc, #68]	; (9d34 <MotorCCW+0xac>)
    9cee:	2202      	movs	r2, #2
    9cf0:	701a      	strb	r2, [r3, #0]
	prevEncoderCount = encoderCount; //01_38_#3
    9cf2:	4b0c      	ldr	r3, [pc, #48]	; (9d24 <MotorCCW+0x9c>)
    9cf4:	881a      	ldrh	r2, [r3, #0]
    9cf6:	4b10      	ldr	r3, [pc, #64]	; (9d38 <MotorCCW+0xb0>)
    9cf8:	801a      	strh	r2, [r3, #0]
	actionEncoderSample = 0; //01_38_#3
    9cfa:	4b10      	ldr	r3, [pc, #64]	; (9d3c <MotorCCW+0xb4>)
    9cfc:	2200      	movs	r2, #0
    9cfe:	701a      	strb	r2, [r3, #0]
	prevAction = action; 
    9d00:	4b0c      	ldr	r3, [pc, #48]	; (9d34 <MotorCCW+0xac>)
    9d02:	781a      	ldrb	r2, [r3, #0]
    9d04:	4b0e      	ldr	r3, [pc, #56]	; (9d40 <MotorCCW+0xb8>)
    9d06:	701a      	strb	r2, [r3, #0]
}
    9d08:	46bd      	mov	sp, r7
    9d0a:	b002      	add	sp, #8
    9d0c:	bd80      	pop	{r7, pc}
    9d0e:	46c0      	nop			; (mov r8, r8)
    9d10:	00006739 	.word	0x00006739
    9d14:	200004b0 	.word	0x200004b0
    9d18:	20002eb2 	.word	0x20002eb2
    9d1c:	200004be 	.word	0x200004be
    9d20:	200004c0 	.word	0x200004c0
    9d24:	200004a8 	.word	0x200004a8
    9d28:	20001e9c 	.word	0x20001e9c
    9d2c:	000067a1 	.word	0x000067a1
    9d30:	00011dbd 	.word	0x00011dbd
    9d34:	200004ae 	.word	0x200004ae
    9d38:	20002ec6 	.word	0x20002ec6
    9d3c:	20002ebe 	.word	0x20002ebe
    9d40:	200004af 	.word	0x200004af

00009d44 <MotorCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void MotorCW(void)
{
    9d44:	b580      	push	{r7, lr}
    9d46:	b082      	sub	sp, #8
    9d48:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    9d4a:	1d3b      	adds	r3, r7, #4
    9d4c:	1c18      	adds	r0, r3, #0
    9d4e:	4b23      	ldr	r3, [pc, #140]	; (9ddc <MotorCW+0x98>)
    9d50:	4798      	blx	r3

	motorOn = TRUE; 
    9d52:	4b23      	ldr	r3, [pc, #140]	; (9de0 <MotorCW+0x9c>)
    9d54:	2201      	movs	r2, #1
    9d56:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    9d58:	4b22      	ldr	r3, [pc, #136]	; (9de4 <MotorCW+0xa0>)
    9d5a:	2296      	movs	r2, #150	; 0x96
    9d5c:	0052      	lsls	r2, r2, #1
    9d5e:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    9d60:	4b21      	ldr	r3, [pc, #132]	; (9de8 <MotorCW+0xa4>)
    9d62:	2200      	movs	r2, #0
    9d64:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9d66:	4b21      	ldr	r3, [pc, #132]	; (9dec <MotorCW+0xa8>)
    9d68:	2200      	movs	r2, #0
    9d6a:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;	
    9d6c:	4b20      	ldr	r3, [pc, #128]	; (9df0 <MotorCW+0xac>)
    9d6e:	2200      	movs	r2, #0
    9d70:	801a      	strh	r2, [r3, #0]
	encoderFlip = 0; 
    9d72:	4b20      	ldr	r3, [pc, #128]	; (9df4 <MotorCW+0xb0>)
    9d74:	2200      	movs	r2, #0
    9d76:	701a      	strb	r2, [r3, #0]
	buildTableOffset = 0;
    9d78:	4b1f      	ldr	r3, [pc, #124]	; (9df8 <MotorCW+0xb4>)
    9d7a:	2200      	movs	r2, #0
    9d7c:	801a      	strh	r2, [r3, #0]
	encoderTableOffset = 0; 
    9d7e:	4b1f      	ldr	r3, [pc, #124]	; (9dfc <MotorCW+0xb8>)
    9d80:	2200      	movs	r2, #0
    9d82:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, true);
    9d84:	2013      	movs	r0, #19
    9d86:	2101      	movs	r1, #1
    9d88:	4b1d      	ldr	r3, [pc, #116]	; (9e00 <MotorCW+0xbc>)
    9d8a:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9d8c:	2019      	movs	r0, #25
    9d8e:	2100      	movs	r1, #0
    9d90:	4b1b      	ldr	r3, [pc, #108]	; (9e00 <MotorCW+0xbc>)
    9d92:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9d94:	1d3b      	adds	r3, r7, #4
    9d96:	2200      	movs	r2, #0
    9d98:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9d9a:	1d3b      	adds	r3, r7, #4
    9d9c:	2200      	movs	r2, #0
    9d9e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9da0:	1d3b      	adds	r3, r7, #4
    9da2:	2012      	movs	r0, #18
    9da4:	1c19      	adds	r1, r3, #0
    9da6:	4b17      	ldr	r3, [pc, #92]	; (9e04 <MotorCW+0xc0>)
    9da8:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9daa:	1d3b      	adds	r3, r7, #4
    9dac:	2018      	movs	r0, #24
    9dae:	1c19      	adds	r1, r3, #0
    9db0:	4b14      	ldr	r3, [pc, #80]	; (9e04 <MotorCW+0xc0>)
    9db2:	4798      	blx	r3
	action = EXTENDING; 
    9db4:	4b14      	ldr	r3, [pc, #80]	; (9e08 <MotorCW+0xc4>)
    9db6:	2201      	movs	r2, #1
    9db8:	701a      	strb	r2, [r3, #0]
	homeLimit = HOME_OUT;
    9dba:	4b14      	ldr	r3, [pc, #80]	; (9e0c <MotorCW+0xc8>)
    9dbc:	2201      	movs	r2, #1
    9dbe:	701a      	strb	r2, [r3, #0]
	prevEncoderCount = encoderCount; //01_38_#3
    9dc0:	4b0b      	ldr	r3, [pc, #44]	; (9df0 <MotorCW+0xac>)
    9dc2:	881a      	ldrh	r2, [r3, #0]
    9dc4:	4b12      	ldr	r3, [pc, #72]	; (9e10 <MotorCW+0xcc>)
    9dc6:	801a      	strh	r2, [r3, #0]
	actionEncoderSample = 0; //01_38_#3
    9dc8:	4b12      	ldr	r3, [pc, #72]	; (9e14 <MotorCW+0xd0>)
    9dca:	2200      	movs	r2, #0
    9dcc:	701a      	strb	r2, [r3, #0]
	prevAction = action; 
    9dce:	4b0e      	ldr	r3, [pc, #56]	; (9e08 <MotorCW+0xc4>)
    9dd0:	781a      	ldrb	r2, [r3, #0]
    9dd2:	4b11      	ldr	r3, [pc, #68]	; (9e18 <MotorCW+0xd4>)
    9dd4:	701a      	strb	r2, [r3, #0]
}
    9dd6:	46bd      	mov	sp, r7
    9dd8:	b002      	add	sp, #8
    9dda:	bd80      	pop	{r7, pc}
    9ddc:	00006739 	.word	0x00006739
    9de0:	200004b0 	.word	0x200004b0
    9de4:	20002eb2 	.word	0x20002eb2
    9de8:	200004be 	.word	0x200004be
    9dec:	200004c0 	.word	0x200004c0
    9df0:	200004a8 	.word	0x200004a8
    9df4:	200004aa 	.word	0x200004aa
    9df8:	20001e9c 	.word	0x20001e9c
    9dfc:	20001e9e 	.word	0x20001e9e
    9e00:	000067a1 	.word	0x000067a1
    9e04:	00011dbd 	.word	0x00011dbd
    9e08:	200004ae 	.word	0x200004ae
    9e0c:	20000001 	.word	0x20000001
    9e10:	20002ec6 	.word	0x20002ec6
    9e14:	20002ebe 	.word	0x20002ebe
    9e18:	200004af 	.word	0x200004af

00009e1c <MotorExtendMore>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorExtendMore(void)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b082      	sub	sp, #8
    9e20:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9e22:	1d3b      	adds	r3, r7, #4
    9e24:	1c18      	adds	r0, r3, #0
    9e26:	4b18      	ldr	r3, [pc, #96]	; (9e88 <MotorExtendMore+0x6c>)
    9e28:	4798      	blx	r3

	motorOn = TRUE;
    9e2a:	4b18      	ldr	r3, [pc, #96]	; (9e8c <MotorExtendMore+0x70>)
    9e2c:	2201      	movs	r2, #1
    9e2e:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;
    9e30:	4b17      	ldr	r3, [pc, #92]	; (9e90 <MotorExtendMore+0x74>)
    9e32:	2296      	movs	r2, #150	; 0x96
    9e34:	0052      	lsls	r2, r2, #1
    9e36:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    9e38:	4b16      	ldr	r3, [pc, #88]	; (9e94 <MotorExtendMore+0x78>)
    9e3a:	2200      	movs	r2, #0
    9e3c:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9e3e:	4b16      	ldr	r3, [pc, #88]	; (9e98 <MotorExtendMore+0x7c>)
    9e40:	2200      	movs	r2, #0
    9e42:	801a      	strh	r2, [r3, #0]
//	encoderCount = 0;
//	encoderFlip = 0;
	buildTableOffset = 0;
    9e44:	4b15      	ldr	r3, [pc, #84]	; (9e9c <MotorExtendMore+0x80>)
    9e46:	2200      	movs	r2, #0
    9e48:	801a      	strh	r2, [r3, #0]
//	encoderTableOffset = 0;
	port_pin_set_output_level(INa, true);
    9e4a:	2013      	movs	r0, #19
    9e4c:	2101      	movs	r1, #1
    9e4e:	4b14      	ldr	r3, [pc, #80]	; (9ea0 <MotorExtendMore+0x84>)
    9e50:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9e52:	2019      	movs	r0, #25
    9e54:	2100      	movs	r1, #0
    9e56:	4b12      	ldr	r3, [pc, #72]	; (9ea0 <MotorExtendMore+0x84>)
    9e58:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9e5a:	1d3b      	adds	r3, r7, #4
    9e5c:	2200      	movs	r2, #0
    9e5e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9e60:	1d3b      	adds	r3, r7, #4
    9e62:	2200      	movs	r2, #0
    9e64:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9e66:	1d3b      	adds	r3, r7, #4
    9e68:	2012      	movs	r0, #18
    9e6a:	1c19      	adds	r1, r3, #0
    9e6c:	4b0d      	ldr	r3, [pc, #52]	; (9ea4 <MotorExtendMore+0x88>)
    9e6e:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9e70:	1d3b      	adds	r3, r7, #4
    9e72:	2018      	movs	r0, #24
    9e74:	1c19      	adds	r1, r3, #0
    9e76:	4b0b      	ldr	r3, [pc, #44]	; (9ea4 <MotorExtendMore+0x88>)
    9e78:	4798      	blx	r3
	action = EXTENDING;
    9e7a:	4b0b      	ldr	r3, [pc, #44]	; (9ea8 <MotorExtendMore+0x8c>)
    9e7c:	2201      	movs	r2, #1
    9e7e:	701a      	strb	r2, [r3, #0]
	
}
    9e80:	46bd      	mov	sp, r7
    9e82:	b002      	add	sp, #8
    9e84:	bd80      	pop	{r7, pc}
    9e86:	46c0      	nop			; (mov r8, r8)
    9e88:	00006739 	.word	0x00006739
    9e8c:	200004b0 	.word	0x200004b0
    9e90:	20002eb2 	.word	0x20002eb2
    9e94:	200004be 	.word	0x200004be
    9e98:	200004c0 	.word	0x200004c0
    9e9c:	20001e9c 	.word	0x20001e9c
    9ea0:	000067a1 	.word	0x000067a1
    9ea4:	00011dbd 	.word	0x00011dbd
    9ea8:	200004ae 	.word	0x200004ae

00009eac <AppProtocolChecksum>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AppProtocolChecksum(uint8_t *buffers,uint16_t length)
{
    9eac:	b580      	push	{r7, lr}
    9eae:	b086      	sub	sp, #24
    9eb0:	af00      	add	r7, sp, #0
    9eb2:	6078      	str	r0, [r7, #4]
    9eb4:	1c0a      	adds	r2, r1, #0
    9eb6:	1cbb      	adds	r3, r7, #2
    9eb8:	801a      	strh	r2, [r3, #0]
	uint8_t checksum,*ptr; 
	uint16_t i; 
	
	checksum = 0; 
    9eba:	1c3b      	adds	r3, r7, #0
    9ebc:	3317      	adds	r3, #23
    9ebe:	2200      	movs	r2, #0
    9ec0:	701a      	strb	r2, [r3, #0]
	ptr = buffers; 
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	613b      	str	r3, [r7, #16]
	
	for (i=0;i<length;i++)
    9ec6:	1c3b      	adds	r3, r7, #0
    9ec8:	330e      	adds	r3, #14
    9eca:	2200      	movs	r2, #0
    9ecc:	801a      	strh	r2, [r3, #0]
    9ece:	e011      	b.n	9ef4 <AppProtocolChecksum+0x48>
	{
		checksum += *ptr++;	
    9ed0:	693b      	ldr	r3, [r7, #16]
    9ed2:	1c5a      	adds	r2, r3, #1
    9ed4:	613a      	str	r2, [r7, #16]
    9ed6:	7819      	ldrb	r1, [r3, #0]
    9ed8:	1c3b      	adds	r3, r7, #0
    9eda:	3317      	adds	r3, #23
    9edc:	1c3a      	adds	r2, r7, #0
    9ede:	3217      	adds	r2, #23
    9ee0:	7812      	ldrb	r2, [r2, #0]
    9ee2:	188a      	adds	r2, r1, r2
    9ee4:	701a      	strb	r2, [r3, #0]
	uint16_t i; 
	
	checksum = 0; 
	ptr = buffers; 
	
	for (i=0;i<length;i++)
    9ee6:	1c3b      	adds	r3, r7, #0
    9ee8:	330e      	adds	r3, #14
    9eea:	881a      	ldrh	r2, [r3, #0]
    9eec:	1c3b      	adds	r3, r7, #0
    9eee:	330e      	adds	r3, #14
    9ef0:	3201      	adds	r2, #1
    9ef2:	801a      	strh	r2, [r3, #0]
    9ef4:	1c3a      	adds	r2, r7, #0
    9ef6:	320e      	adds	r2, #14
    9ef8:	1cbb      	adds	r3, r7, #2
    9efa:	8812      	ldrh	r2, [r2, #0]
    9efc:	881b      	ldrh	r3, [r3, #0]
    9efe:	429a      	cmp	r2, r3
    9f00:	d3e6      	bcc.n	9ed0 <AppProtocolChecksum+0x24>
	{
		checksum += *ptr++;	
	}
	return checksum; 
    9f02:	1c3b      	adds	r3, r7, #0
    9f04:	3317      	adds	r3, #23
    9f06:	781b      	ldrb	r3, [r3, #0]
}
    9f08:	1c18      	adds	r0, r3, #0
    9f0a:	46bd      	mov	sp, r7
    9f0c:	b006      	add	sp, #24
    9f0e:	bd80      	pop	{r7, pc}

00009f10 <NewRemoteDownload>:

#if BRAKEBOARD		

uint8_t newRemoteDownloadNeeded = FALSE; 
uint8_t NewRemoteDownload(void)
{
    9f10:	b580      	push	{r7, lr}
    9f12:	af00      	add	r7, sp, #0
	//----------------- if there is a remote version in SCRATCH 
	//                    RETURN the information and allow the remote 
	//                    to decide if it wants a download. 
	//----------------------------------------
	CheckScratch();
    9f14:	4b03      	ldr	r3, [pc, #12]	; (9f24 <NewRemoteDownload+0x14>)
    9f16:	4798      	blx	r3
	return newRemoteDownloadNeeded; 
    9f18:	4b03      	ldr	r3, [pc, #12]	; (9f28 <NewRemoteDownload+0x18>)
    9f1a:	781b      	ldrb	r3, [r3, #0]
}
    9f1c:	1c18      	adds	r0, r3, #0
    9f1e:	46bd      	mov	sp, r7
    9f20:	bd80      	pop	{r7, pc}
    9f22:	46c0      	nop			; (mov r8, r8)
    9f24:	0000bf99 	.word	0x0000bf99
    9f28:	200004bb 	.word	0x200004bb

00009f2c <AppProtocolBrake>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void AppProtocolBrake(uint8_t *buffers)
{
    9f2c:	b590      	push	{r4, r7, lr}
    9f2e:	b08f      	sub	sp, #60	; 0x3c
    9f30:	af00      	add	r7, sp, #0
    9f32:	6078      	str	r0, [r7, #4]
	uint8_t length,i,match,temp,offset,goodmsg,checksum;  
	uint16_t x,y,z;
	uint32_t ltemp1,ltemp2;
	uint8_t *lptr; 

	if ((buffers[1] == '#')&&(buffers[0]>3))
    9f34:	687b      	ldr	r3, [r7, #4]
    9f36:	3301      	adds	r3, #1
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	2b23      	cmp	r3, #35	; 0x23
    9f3c:	d001      	beq.n	9f42 <AppProtocolBrake+0x16>
    9f3e:	f000 ffbd 	bl	aebc <AppProtocolBrake+0xf90>
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	2b03      	cmp	r3, #3
    9f48:	d801      	bhi.n	9f4e <AppProtocolBrake+0x22>
    9f4a:	f000 ffb7 	bl	aebc <AppProtocolBrake+0xf90>
		//--------------------------------
		// Qualify the received message - match is TRUE 
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
    9f4e:	1c3b      	adds	r3, r7, #0
    9f50:	3336      	adds	r3, #54	; 0x36
    9f52:	2200      	movs	r2, #0
    9f54:	701a      	strb	r2, [r3, #0]
		goodmsg = FALSE;
    9f56:	1c3b      	adds	r3, r7, #0
    9f58:	3334      	adds	r3, #52	; 0x34
    9f5a:	2200      	movs	r2, #0
    9f5c:	701a      	strb	r2, [r3, #0]
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    9f5e:	687b      	ldr	r3, [r7, #4]
    9f60:	3302      	adds	r3, #2
    9f62:	781a      	ldrb	r2, [r3, #0]
    9f64:	4bc9      	ldr	r3, [pc, #804]	; (a28c <AppProtocolBrake+0x360>)
    9f66:	7bdb      	ldrb	r3, [r3, #15]
    9f68:	429a      	cmp	r2, r3
    9f6a:	d10a      	bne.n	9f82 <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	3303      	adds	r3, #3
    9f70:	781a      	ldrb	r2, [r3, #0]
    9f72:	4bc6      	ldr	r3, [pc, #792]	; (a28c <AppProtocolBrake+0x360>)
    9f74:	7c1b      	ldrb	r3, [r3, #16]
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
		goodmsg = FALSE;
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    9f76:	429a      	cmp	r2, r3
    9f78:	d103      	bne.n	9f82 <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
		{
			match = TRUE; 
    9f7a:	1c3b      	adds	r3, r7, #0
    9f7c:	3336      	adds	r3, #54	; 0x36
    9f7e:	2201      	movs	r2, #1
    9f80:	701a      	strb	r2, [r3, #0]
		}		
		//----------------
		// build the command
		itemp = buffers[4];
    9f82:	687b      	ldr	r3, [r7, #4]
    9f84:	3304      	adds	r3, #4
    9f86:	781a      	ldrb	r2, [r3, #0]
    9f88:	1c3b      	adds	r3, r7, #0
    9f8a:	332e      	adds	r3, #46	; 0x2e
    9f8c:	801a      	strh	r2, [r3, #0]
		itemp2 = buffers[5];
    9f8e:	687b      	ldr	r3, [r7, #4]
    9f90:	3305      	adds	r3, #5
    9f92:	781a      	ldrb	r2, [r3, #0]
    9f94:	1c3b      	adds	r3, r7, #0
    9f96:	332c      	adds	r3, #44	; 0x2c
    9f98:	801a      	strh	r2, [r3, #0]
		itemp = itemp<<8; 
    9f9a:	1c3b      	adds	r3, r7, #0
    9f9c:	332e      	adds	r3, #46	; 0x2e
    9f9e:	1c3a      	adds	r2, r7, #0
    9fa0:	322e      	adds	r2, #46	; 0x2e
    9fa2:	8812      	ldrh	r2, [r2, #0]
    9fa4:	0212      	lsls	r2, r2, #8
    9fa6:	801a      	strh	r2, [r3, #0]
		itemp |= itemp2; 
    9fa8:	1c3b      	adds	r3, r7, #0
    9faa:	332e      	adds	r3, #46	; 0x2e
    9fac:	1c39      	adds	r1, r7, #0
    9fae:	312e      	adds	r1, #46	; 0x2e
    9fb0:	1c3a      	adds	r2, r7, #0
    9fb2:	322c      	adds	r2, #44	; 0x2c
    9fb4:	8809      	ldrh	r1, [r1, #0]
    9fb6:	8812      	ldrh	r2, [r2, #0]
    9fb8:	430a      	orrs	r2, r1
    9fba:	801a      	strh	r2, [r3, #0]
		command = itemp;
    9fbc:	1c3b      	adds	r3, r7, #0
    9fbe:	332a      	adds	r3, #42	; 0x2a
    9fc0:	1c3a      	adds	r2, r7, #0
    9fc2:	322e      	adds	r2, #46	; 0x2e
    9fc4:	8812      	ldrh	r2, [r2, #0]
    9fc6:	801a      	strh	r2, [r3, #0]
		//----------------
		// get the length
		length = buffers[0];
    9fc8:	1c3b      	adds	r3, r7, #0
    9fca:	3329      	adds	r3, #41	; 0x29
    9fcc:	687a      	ldr	r2, [r7, #4]
    9fce:	7812      	ldrb	r2, [r2, #0]
    9fd0:	701a      	strb	r2, [r3, #0]
	
		goodmsg = AppProtocolChecksum(&buffers[1],length-2);	
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	1c5a      	adds	r2, r3, #1
    9fd6:	1c3b      	adds	r3, r7, #0
    9fd8:	3329      	adds	r3, #41	; 0x29
    9fda:	781b      	ldrb	r3, [r3, #0]
    9fdc:	b29b      	uxth	r3, r3
    9fde:	3b02      	subs	r3, #2
    9fe0:	b29b      	uxth	r3, r3
    9fe2:	1c3c      	adds	r4, r7, #0
    9fe4:	3434      	adds	r4, #52	; 0x34
    9fe6:	1c10      	adds	r0, r2, #0
    9fe8:	1c19      	adds	r1, r3, #0
    9fea:	4ba9      	ldr	r3, [pc, #676]	; (a290 <AppProtocolBrake+0x364>)
    9fec:	4798      	blx	r3
    9fee:	1c03      	adds	r3, r0, #0
    9ff0:	7023      	strb	r3, [r4, #0]
		if (goodmsg == buffers[length-1])
    9ff2:	1c3b      	adds	r3, r7, #0
    9ff4:	3329      	adds	r3, #41	; 0x29
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	3b01      	subs	r3, #1
    9ffa:	687a      	ldr	r2, [r7, #4]
    9ffc:	18d3      	adds	r3, r2, r3
    9ffe:	781b      	ldrb	r3, [r3, #0]
    a000:	1c3a      	adds	r2, r7, #0
    a002:	3234      	adds	r2, #52	; 0x34
    a004:	7812      	ldrb	r2, [r2, #0]
    a006:	429a      	cmp	r2, r3
    a008:	d104      	bne.n	a014 <AppProtocolBrake+0xe8>
		{
			goodmsg = TRUE; 
    a00a:	1c3b      	adds	r3, r7, #0
    a00c:	3334      	adds	r3, #52	; 0x34
    a00e:	2201      	movs	r2, #1
    a010:	701a      	strb	r2, [r3, #0]
    a012:	e003      	b.n	a01c <AppProtocolBrake+0xf0>
		}
		else
		{
			goodmsg = FALSE; 
    a014:	1c3b      	adds	r3, r7, #0
    a016:	3334      	adds	r3, #52	; 0x34
    a018:	2200      	movs	r2, #0
    a01a:	701a      	strb	r2, [r3, #0]
		}
								
		if ((((command == MSG_PR)&&(buffers[2] == 0xff)&&(buffers[3]==0xff)) ||
    a01c:	1c3b      	adds	r3, r7, #0
    a01e:	332a      	adds	r3, #42	; 0x2a
    a020:	881a      	ldrh	r2, [r3, #0]
    a022:	4b9c      	ldr	r3, [pc, #624]	; (a294 <AppProtocolBrake+0x368>)
    a024:	429a      	cmp	r2, r3
    a026:	d109      	bne.n	a03c <AppProtocolBrake+0x110>
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	3302      	adds	r3, #2
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	2bff      	cmp	r3, #255	; 0xff
    a030:	d104      	bne.n	a03c <AppProtocolBrake+0x110>
    a032:	687b      	ldr	r3, [r7, #4]
    a034:	3303      	adds	r3, #3
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	2bff      	cmp	r3, #255	; 0xff
    a03a:	d00e      	beq.n	a05a <AppProtocolBrake+0x12e>
    a03c:	1c3b      	adds	r3, r7, #0
    a03e:	332a      	adds	r3, #42	; 0x2a
    a040:	881a      	ldrh	r2, [r3, #0]
    a042:	4b94      	ldr	r3, [pc, #592]	; (a294 <AppProtocolBrake+0x368>)
    a044:	429a      	cmp	r2, r3
    a046:	d101      	bne.n	a04c <AppProtocolBrake+0x120>
    a048:	f000 ff38 	bl	aebc <AppProtocolBrake+0xf90>
			((command != MSG_PR)&&(match == TRUE)))&&(goodmsg == TRUE))
    a04c:	1c3b      	adds	r3, r7, #0
    a04e:	3336      	adds	r3, #54	; 0x36
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	2b01      	cmp	r3, #1
    a054:	d001      	beq.n	a05a <AppProtocolBrake+0x12e>
    a056:	f000 ff31 	bl	aebc <AppProtocolBrake+0xf90>
    a05a:	1c3b      	adds	r3, r7, #0
    a05c:	3334      	adds	r3, #52	; 0x34
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	2b01      	cmp	r3, #1
    a062:	d001      	beq.n	a068 <AppProtocolBrake+0x13c>
    a064:	f000 ff2a 	bl	aebc <AppProtocolBrake+0xf90>
		{
	
			if ((buffers[1] == '#')&&(length>3))
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	3301      	adds	r3, #1
    a06c:	781b      	ldrb	r3, [r3, #0]
    a06e:	2b23      	cmp	r3, #35	; 0x23
    a070:	d001      	beq.n	a076 <AppProtocolBrake+0x14a>
    a072:	f000 ff23 	bl	aebc <AppProtocolBrake+0xf90>
    a076:	1c3b      	adds	r3, r7, #0
    a078:	3329      	adds	r3, #41	; 0x29
    a07a:	781b      	ldrb	r3, [r3, #0]
    a07c:	2b03      	cmp	r3, #3
    a07e:	d801      	bhi.n	a084 <AppProtocolBrake+0x158>
    a080:	f000 ff1c 	bl	aebc <AppProtocolBrake+0xf90>
			{
				commSupTimer = COMM_SUP_TIME; 
    a084:	4b84      	ldr	r3, [pc, #528]	; (a298 <AppProtocolBrake+0x36c>)
    a086:	22fa      	movs	r2, #250	; 0xfa
    a088:	0052      	lsls	r2, r2, #1
    a08a:	801a      	strh	r2, [r3, #0]
				commFailureCount = 0; 
    a08c:	4b83      	ldr	r3, [pc, #524]	; (a29c <AppProtocolBrake+0x370>)
    a08e:	2200      	movs	r2, #0
    a090:	701a      	strb	r2, [r3, #0]
				commErrorCount = 0; 	
    a092:	4b83      	ldr	r3, [pc, #524]	; (a2a0 <AppProtocolBrake+0x374>)
    a094:	2200      	movs	r2, #0
    a096:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_COMMERROR; 
    a098:	4b82      	ldr	r3, [pc, #520]	; (a2a4 <AppProtocolBrake+0x378>)
    a09a:	791b      	ldrb	r3, [r3, #4]
    a09c:	2201      	movs	r2, #1
    a09e:	4393      	bics	r3, r2
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	4b80      	ldr	r3, [pc, #512]	; (a2a4 <AppProtocolBrake+0x378>)
    a0a4:	711a      	strb	r2, [r3, #4]
					
				if ((command == MSG_STATUS)||(command == MSG_FV)||(command==0x5245)||(command==0x5241))		
    a0a6:	1c3b      	adds	r3, r7, #0
    a0a8:	332a      	adds	r3, #42	; 0x2a
    a0aa:	881a      	ldrh	r2, [r3, #0]
    a0ac:	4b7e      	ldr	r3, [pc, #504]	; (a2a8 <AppProtocolBrake+0x37c>)
    a0ae:	429a      	cmp	r2, r3
    a0b0:	d012      	beq.n	a0d8 <AppProtocolBrake+0x1ac>
    a0b2:	1c3b      	adds	r3, r7, #0
    a0b4:	332a      	adds	r3, #42	; 0x2a
    a0b6:	881a      	ldrh	r2, [r3, #0]
    a0b8:	4b7c      	ldr	r3, [pc, #496]	; (a2ac <AppProtocolBrake+0x380>)
    a0ba:	429a      	cmp	r2, r3
    a0bc:	d00c      	beq.n	a0d8 <AppProtocolBrake+0x1ac>
    a0be:	1c3b      	adds	r3, r7, #0
    a0c0:	332a      	adds	r3, #42	; 0x2a
    a0c2:	881a      	ldrh	r2, [r3, #0]
    a0c4:	4b7a      	ldr	r3, [pc, #488]	; (a2b0 <AppProtocolBrake+0x384>)
    a0c6:	429a      	cmp	r2, r3
    a0c8:	d006      	beq.n	a0d8 <AppProtocolBrake+0x1ac>
    a0ca:	1c3b      	adds	r3, r7, #0
    a0cc:	332a      	adds	r3, #42	; 0x2a
    a0ce:	881a      	ldrh	r2, [r3, #0]
    a0d0:	4b78      	ldr	r3, [pc, #480]	; (a2b4 <AppProtocolBrake+0x388>)
    a0d2:	429a      	cmp	r2, r3
    a0d4:	d000      	beq.n	a0d8 <AppProtocolBrake+0x1ac>
    a0d6:	e0a7      	b.n	a228 <AppProtocolBrake+0x2fc>
				{
						remoteStatus = buffers[7];
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	79da      	ldrb	r2, [r3, #7]
    a0dc:	4b76      	ldr	r3, [pc, #472]	; (a2b8 <AppProtocolBrake+0x38c>)
    a0de:	701a      	strb	r2, [r3, #0]
						remoteForce = buffers[8]; 
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	7a1a      	ldrb	r2, [r3, #8]
    a0e4:	4b75      	ldr	r3, [pc, #468]	; (a2bc <AppProtocolBrake+0x390>)
    a0e6:	701a      	strb	r2, [r3, #0]
						remoteSettings = buffers[9];
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	7a5a      	ldrb	r2, [r3, #9]
    a0ec:	4b74      	ldr	r3, [pc, #464]	; (a2c0 <AppProtocolBrake+0x394>)
    a0ee:	701a      	strb	r2, [r3, #0]
						//-----------------------force setting
						if ((remoteForce & 0x0f) != (table0.Item.MaxForce))	
    a0f0:	4b72      	ldr	r3, [pc, #456]	; (a2bc <AppProtocolBrake+0x390>)
    a0f2:	781b      	ldrb	r3, [r3, #0]
    a0f4:	1c1a      	adds	r2, r3, #0
    a0f6:	230f      	movs	r3, #15
    a0f8:	401a      	ands	r2, r3
    a0fa:	4b64      	ldr	r3, [pc, #400]	; (a28c <AppProtocolBrake+0x360>)
    a0fc:	789b      	ldrb	r3, [r3, #2]
    a0fe:	429a      	cmp	r2, r3
    a100:	d00c      	beq.n	a11c <AppProtocolBrake+0x1f0>
						{
							table0.Item.MaxForce = remoteForce & 0x0f; 
    a102:	4b6e      	ldr	r3, [pc, #440]	; (a2bc <AppProtocolBrake+0x390>)
    a104:	781a      	ldrb	r2, [r3, #0]
    a106:	230f      	movs	r3, #15
    a108:	4013      	ands	r3, r2
    a10a:	b2da      	uxtb	r2, r3
    a10c:	4b5f      	ldr	r3, [pc, #380]	; (a28c <AppProtocolBrake+0x360>)
    a10e:	709a      	strb	r2, [r3, #2]
							ConfigUpdate(table0.Item.MaxForce,MaxForce_Setting);
    a110:	4b5e      	ldr	r3, [pc, #376]	; (a28c <AppProtocolBrake+0x360>)
    a112:	789b      	ldrb	r3, [r3, #2]
    a114:	1c18      	adds	r0, r3, #0
    a116:	212a      	movs	r1, #42	; 0x2a
    a118:	4b6a      	ldr	r3, [pc, #424]	; (a2c4 <AppProtocolBrake+0x398>)
    a11a:	4798      	blx	r3
						}
						//--------------------- max force set 
						temp = remoteForce >>4; 
    a11c:	4b67      	ldr	r3, [pc, #412]	; (a2bc <AppProtocolBrake+0x390>)
    a11e:	781a      	ldrb	r2, [r3, #0]
    a120:	1c3b      	adds	r3, r7, #0
    a122:	3335      	adds	r3, #53	; 0x35
    a124:	0912      	lsrs	r2, r2, #4
    a126:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f; 
    a128:	1c3b      	adds	r3, r7, #0
    a12a:	3335      	adds	r3, #53	; 0x35
    a12c:	1c3a      	adds	r2, r7, #0
    a12e:	3235      	adds	r2, #53	; 0x35
    a130:	7811      	ldrb	r1, [r2, #0]
    a132:	220f      	movs	r2, #15
    a134:	400a      	ands	r2, r1
    a136:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.ForceMaxSet))	
    a138:	4b54      	ldr	r3, [pc, #336]	; (a28c <AppProtocolBrake+0x360>)
    a13a:	7d9b      	ldrb	r3, [r3, #22]
    a13c:	1c3a      	adds	r2, r7, #0
    a13e:	3235      	adds	r2, #53	; 0x35
    a140:	7812      	ldrb	r2, [r2, #0]
    a142:	429a      	cmp	r2, r3
    a144:	d00d      	beq.n	a162 <AppProtocolBrake+0x236>
						{
							table0.Item.ForceMaxSet = temp & 0x0f; 
    a146:	1c3b      	adds	r3, r7, #0
    a148:	3335      	adds	r3, #53	; 0x35
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	230f      	movs	r3, #15
    a14e:	4013      	ands	r3, r2
    a150:	b2da      	uxtb	r2, r3
    a152:	4b4e      	ldr	r3, [pc, #312]	; (a28c <AppProtocolBrake+0x360>)
    a154:	759a      	strb	r2, [r3, #22]
							ConfigUpdate(table0.Item.ForceMaxSet,ForceMaxSetting);
    a156:	4b4d      	ldr	r3, [pc, #308]	; (a28c <AppProtocolBrake+0x360>)
    a158:	7d9b      	ldrb	r3, [r3, #22]
    a15a:	1c18      	adds	r0, r3, #0
    a15c:	213e      	movs	r1, #62	; 0x3e
    a15e:	4b59      	ldr	r3, [pc, #356]	; (a2c4 <AppProtocolBrake+0x398>)
    a160:	4798      	blx	r3
						}					
						//-------------------handle active brake enable setting 	
						//--------------------- sensitivity set
						temp = remoteSettings >>4;
    a162:	4b57      	ldr	r3, [pc, #348]	; (a2c0 <AppProtocolBrake+0x394>)
    a164:	781a      	ldrb	r2, [r3, #0]
    a166:	1c3b      	adds	r3, r7, #0
    a168:	3335      	adds	r3, #53	; 0x35
    a16a:	0912      	lsrs	r2, r2, #4
    a16c:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f;
    a16e:	1c3b      	adds	r3, r7, #0
    a170:	3335      	adds	r3, #53	; 0x35
    a172:	1c3a      	adds	r2, r7, #0
    a174:	3235      	adds	r2, #53	; 0x35
    a176:	7811      	ldrb	r1, [r2, #0]
    a178:	220f      	movs	r2, #15
    a17a:	400a      	ands	r2, r1
    a17c:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.SensitivitySet))
    a17e:	4b43      	ldr	r3, [pc, #268]	; (a28c <AppProtocolBrake+0x360>)
    a180:	7edb      	ldrb	r3, [r3, #27]
    a182:	1c3a      	adds	r2, r7, #0
    a184:	3235      	adds	r2, #53	; 0x35
    a186:	7812      	ldrb	r2, [r2, #0]
    a188:	429a      	cmp	r2, r3
    a18a:	d00d      	beq.n	a1a8 <AppProtocolBrake+0x27c>
						{
							table0.Item.SensitivitySet= temp & 0x0f;
    a18c:	1c3b      	adds	r3, r7, #0
    a18e:	3335      	adds	r3, #53	; 0x35
    a190:	781a      	ldrb	r2, [r3, #0]
    a192:	230f      	movs	r3, #15
    a194:	4013      	ands	r3, r2
    a196:	b2da      	uxtb	r2, r3
    a198:	4b3c      	ldr	r3, [pc, #240]	; (a28c <AppProtocolBrake+0x360>)
    a19a:	76da      	strb	r2, [r3, #27]
							ConfigUpdate(table0.Item.SensitivitySet,SensitivitySetting);
    a19c:	4b3b      	ldr	r3, [pc, #236]	; (a28c <AppProtocolBrake+0x360>)
    a19e:	7edb      	ldrb	r3, [r3, #27]
    a1a0:	1c18      	adds	r0, r3, #0
    a1a2:	2143      	movs	r1, #67	; 0x43
    a1a4:	4b47      	ldr	r3, [pc, #284]	; (a2c4 <AppProtocolBrake+0x398>)
    a1a6:	4798      	blx	r3
						}					
						temp = 0; 
    a1a8:	1c3b      	adds	r3, r7, #0
    a1aa:	3335      	adds	r3, #53	; 0x35
    a1ac:	2200      	movs	r2, #0
    a1ae:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_ACTIVEBRAKEENABLE)!= FALSE)
    a1b0:	4b43      	ldr	r3, [pc, #268]	; (a2c0 <AppProtocolBrake+0x394>)
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	1c1a      	adds	r2, r3, #0
    a1b6:	2301      	movs	r3, #1
    a1b8:	4013      	ands	r3, r2
    a1ba:	d003      	beq.n	a1c4 <AppProtocolBrake+0x298>
						{
							temp = TRUE; 
    a1bc:	1c3b      	adds	r3, r7, #0
    a1be:	3335      	adds	r3, #53	; 0x35
    a1c0:	2201      	movs	r2, #1
    a1c2:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.ActiveBrakeEnable)	
    a1c4:	4b31      	ldr	r3, [pc, #196]	; (a28c <AppProtocolBrake+0x360>)
    a1c6:	7ddb      	ldrb	r3, [r3, #23]
    a1c8:	1c3a      	adds	r2, r7, #0
    a1ca:	3235      	adds	r2, #53	; 0x35
    a1cc:	7812      	ldrb	r2, [r2, #0]
    a1ce:	429a      	cmp	r2, r3
    a1d0:	d00a      	beq.n	a1e8 <AppProtocolBrake+0x2bc>
						{
							table0.Item.ActiveBrakeEnable = temp;
    a1d2:	4b2e      	ldr	r3, [pc, #184]	; (a28c <AppProtocolBrake+0x360>)
    a1d4:	1c3a      	adds	r2, r7, #0
    a1d6:	3235      	adds	r2, #53	; 0x35
    a1d8:	7812      	ldrb	r2, [r2, #0]
    a1da:	75da      	strb	r2, [r3, #23]
							ConfigUpdate(table0.Item.ActiveBrakeEnable,ActiveBrakeEnableSetting);
    a1dc:	4b2b      	ldr	r3, [pc, #172]	; (a28c <AppProtocolBrake+0x360>)
    a1de:	7ddb      	ldrb	r3, [r3, #23]
    a1e0:	1c18      	adds	r0, r3, #0
    a1e2:	213f      	movs	r1, #63	; 0x3f
    a1e4:	4b37      	ldr	r3, [pc, #220]	; (a2c4 <AppProtocolBrake+0x398>)
    a1e6:	4798      	blx	r3
						}			
						//-------------------handle TPMS Enable setting 	
						temp = 0; 
    a1e8:	1c3b      	adds	r3, r7, #0
    a1ea:	3335      	adds	r3, #53	; 0x35
    a1ec:	2200      	movs	r2, #0
    a1ee:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_TPMSENABLE)!= FALSE)
    a1f0:	4b33      	ldr	r3, [pc, #204]	; (a2c0 <AppProtocolBrake+0x394>)
    a1f2:	781b      	ldrb	r3, [r3, #0]
    a1f4:	1c1a      	adds	r2, r3, #0
    a1f6:	2302      	movs	r3, #2
    a1f8:	4013      	ands	r3, r2
    a1fa:	d003      	beq.n	a204 <AppProtocolBrake+0x2d8>
						{
							temp = TRUE; 
    a1fc:	1c3b      	adds	r3, r7, #0
    a1fe:	3335      	adds	r3, #53	; 0x35
    a200:	2201      	movs	r2, #1
    a202:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.TPMSEnable)	
    a204:	4b21      	ldr	r3, [pc, #132]	; (a28c <AppProtocolBrake+0x360>)
    a206:	7e1b      	ldrb	r3, [r3, #24]
    a208:	1c3a      	adds	r2, r7, #0
    a20a:	3235      	adds	r2, #53	; 0x35
    a20c:	7812      	ldrb	r2, [r2, #0]
    a20e:	429a      	cmp	r2, r3
    a210:	d00a      	beq.n	a228 <AppProtocolBrake+0x2fc>
						{
							table0.Item.TPMSEnable = temp;
    a212:	4b1e      	ldr	r3, [pc, #120]	; (a28c <AppProtocolBrake+0x360>)
    a214:	1c3a      	adds	r2, r7, #0
    a216:	3235      	adds	r2, #53	; 0x35
    a218:	7812      	ldrb	r2, [r2, #0]
    a21a:	761a      	strb	r2, [r3, #24]
							ConfigUpdate(table0.Item.TPMSEnable,TPMSEnableSetting);
    a21c:	4b1b      	ldr	r3, [pc, #108]	; (a28c <AppProtocolBrake+0x360>)
    a21e:	7e1b      	ldrb	r3, [r3, #24]
    a220:	1c18      	adds	r0, r3, #0
    a222:	2140      	movs	r1, #64	; 0x40
    a224:	4b27      	ldr	r3, [pc, #156]	; (a2c4 <AppProtocolBrake+0x398>)
    a226:	4798      	blx	r3
						}																		
				}
				switch (command)
    a228:	1c3b      	adds	r3, r7, #0
    a22a:	332a      	adds	r3, #42	; 0x2a
    a22c:	881b      	ldrh	r3, [r3, #0]
    a22e:	4a19      	ldr	r2, [pc, #100]	; (a294 <AppProtocolBrake+0x368>)
    a230:	4293      	cmp	r3, r2
    a232:	d100      	bne.n	a236 <AppProtocolBrake+0x30a>
    a234:	e2ce      	b.n	a7d4 <AppProtocolBrake+0x8a8>
    a236:	4a17      	ldr	r2, [pc, #92]	; (a294 <AppProtocolBrake+0x368>)
    a238:	4293      	cmp	r3, r2
    a23a:	dc0c      	bgt.n	a256 <AppProtocolBrake+0x32a>
    a23c:	4a22      	ldr	r2, [pc, #136]	; (a2c8 <AppProtocolBrake+0x39c>)
    a23e:	4293      	cmp	r3, r2
    a240:	d048      	beq.n	a2d4 <AppProtocolBrake+0x3a8>
    a242:	4a1a      	ldr	r2, [pc, #104]	; (a2ac <AppProtocolBrake+0x380>)
    a244:	4293      	cmp	r3, r2
    a246:	d100      	bne.n	a24a <AppProtocolBrake+0x31e>
    a248:	e305      	b.n	a856 <AppProtocolBrake+0x92a>
    a24a:	4a17      	ldr	r2, [pc, #92]	; (a2a8 <AppProtocolBrake+0x37c>)
    a24c:	4293      	cmp	r3, r2
    a24e:	d100      	bne.n	a252 <AppProtocolBrake+0x326>
    a250:	e36e      	b.n	a930 <AppProtocolBrake+0xa04>
    a252:	f000 fe33 	bl	aebc <AppProtocolBrake+0xf90>
    a256:	4a16      	ldr	r2, [pc, #88]	; (a2b0 <AppProtocolBrake+0x384>)
    a258:	4293      	cmp	r3, r2
    a25a:	d101      	bne.n	a260 <AppProtocolBrake+0x334>
    a25c:	f000 fc2a 	bl	aab4 <AppProtocolBrake+0xb88>
    a260:	4a13      	ldr	r2, [pc, #76]	; (a2b0 <AppProtocolBrake+0x384>)
    a262:	4293      	cmp	r3, r2
    a264:	dc06      	bgt.n	a274 <AppProtocolBrake+0x348>
    a266:	4a13      	ldr	r2, [pc, #76]	; (a2b4 <AppProtocolBrake+0x388>)
    a268:	4293      	cmp	r3, r2
    a26a:	d101      	bne.n	a270 <AppProtocolBrake+0x344>
    a26c:	f000 fc6f 	bl	ab4e <AppProtocolBrake+0xc22>
    a270:	f000 fe24 	bl	aebc <AppProtocolBrake+0xf90>
    a274:	4a15      	ldr	r2, [pc, #84]	; (a2cc <AppProtocolBrake+0x3a0>)
    a276:	4293      	cmp	r3, r2
    a278:	d101      	bne.n	a27e <AppProtocolBrake+0x352>
    a27a:	f000 fcf9 	bl	ac70 <AppProtocolBrake+0xd44>
    a27e:	4a14      	ldr	r2, [pc, #80]	; (a2d0 <AppProtocolBrake+0x3a4>)
    a280:	4293      	cmp	r3, r2
    a282:	d100      	bne.n	a286 <AppProtocolBrake+0x35a>
    a284:	e269      	b.n	a75a <AppProtocolBrake+0x82e>
    a286:	f000 fe19 	bl	aebc <AppProtocolBrake+0xf90>
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	20002fb8 	.word	0x20002fb8
    a290:	00009ead 	.word	0x00009ead
    a294:	0000504d 	.word	0x0000504d
    a298:	200036ba 	.word	0x200036ba
    a29c:	200036b8 	.word	0x200036b8
    a2a0:	200036b1 	.word	0x200036b1
    a2a4:	20003694 	.word	0x20003694
    a2a8:	0000424d 	.word	0x0000424d
    a2ac:	0000464d 	.word	0x0000464d
    a2b0:	00005245 	.word	0x00005245
    a2b4:	00005241 	.word	0x00005241
    a2b8:	20002f1c 	.word	0x20002f1c
    a2bc:	20002efa 	.word	0x20002efa
    a2c0:	20002fb6 	.word	0x20002fb6
    a2c4:	0000b305 	.word	0x0000b305
    a2c8:	00004452 	.word	0x00004452
    a2cc:	00005254 	.word	0x00005254
    a2d0:	00005357 	.word	0x00005357
					case 0x4452:
					{
						//----------------------------------
						// check the offset and see if download mode. 
						//----------------------------------
						protocolBuffer[0] = '#';
    a2d4:	4bd3      	ldr	r3, [pc, #844]	; (a624 <AppProtocolBrake+0x6f8>)
    a2d6:	2223      	movs	r2, #35	; 0x23
    a2d8:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a2da:	4bd3      	ldr	r3, [pc, #844]	; (a628 <AppProtocolBrake+0x6fc>)
    a2dc:	7bda      	ldrb	r2, [r3, #15]
    a2de:	4bd1      	ldr	r3, [pc, #836]	; (a624 <AppProtocolBrake+0x6f8>)
    a2e0:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a2e2:	4bd1      	ldr	r3, [pc, #836]	; (a628 <AppProtocolBrake+0x6fc>)
    a2e4:	7c1a      	ldrb	r2, [r3, #16]
    a2e6:	4bcf      	ldr	r3, [pc, #828]	; (a624 <AppProtocolBrake+0x6f8>)
    a2e8:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'D';
    a2ea:	4bce      	ldr	r3, [pc, #824]	; (a624 <AppProtocolBrake+0x6f8>)
    a2ec:	2244      	movs	r2, #68	; 0x44
    a2ee:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'R';
    a2f0:	4bcc      	ldr	r3, [pc, #816]	; (a624 <AppProtocolBrake+0x6f8>)
    a2f2:	2252      	movs	r2, #82	; 0x52
    a2f4:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0; //length 
    a2f6:	4bcb      	ldr	r3, [pc, #812]	; (a624 <AppProtocolBrake+0x6f8>)
    a2f8:	2200      	movs	r2, #0
    a2fa:	715a      	strb	r2, [r3, #5]
						if ((NewRemoteDownload()==TRUE)&&(bluetoothAwake!=0))
    a2fc:	4bcb      	ldr	r3, [pc, #812]	; (a62c <AppProtocolBrake+0x700>)
    a2fe:	4798      	blx	r3
    a300:	1c03      	adds	r3, r0, #0
    a302:	2b01      	cmp	r3, #1
    a304:	d000      	beq.n	a308 <AppProtocolBrake+0x3dc>
    a306:	e1e1      	b.n	a6cc <AppProtocolBrake+0x7a0>
    a308:	4bc9      	ldr	r3, [pc, #804]	; (a630 <AppProtocolBrake+0x704>)
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	2b00      	cmp	r3, #0
    a30e:	d100      	bne.n	a312 <AppProtocolBrake+0x3e6>
    a310:	e1dc      	b.n	a6cc <AppProtocolBrake+0x7a0>
						{
							//----------------
							// build the offset
							itemp = buffers[7];
    a312:	687b      	ldr	r3, [r7, #4]
    a314:	3307      	adds	r3, #7
    a316:	781a      	ldrb	r2, [r3, #0]
    a318:	1c3b      	adds	r3, r7, #0
    a31a:	332e      	adds	r3, #46	; 0x2e
    a31c:	801a      	strh	r2, [r3, #0]
							itemp2 = buffers[8];
    a31e:	687b      	ldr	r3, [r7, #4]
    a320:	3308      	adds	r3, #8
    a322:	781a      	ldrb	r2, [r3, #0]
    a324:	1c3b      	adds	r3, r7, #0
    a326:	332c      	adds	r3, #44	; 0x2c
    a328:	801a      	strh	r2, [r3, #0]
							itemp = itemp<<8; 
    a32a:	1c3b      	adds	r3, r7, #0
    a32c:	332e      	adds	r3, #46	; 0x2e
    a32e:	1c3a      	adds	r2, r7, #0
    a330:	322e      	adds	r2, #46	; 0x2e
    a332:	8812      	ldrh	r2, [r2, #0]
    a334:	0212      	lsls	r2, r2, #8
    a336:	801a      	strh	r2, [r3, #0]
							itemp |= itemp2; 
    a338:	1c3b      	adds	r3, r7, #0
    a33a:	332e      	adds	r3, #46	; 0x2e
    a33c:	1c39      	adds	r1, r7, #0
    a33e:	312e      	adds	r1, #46	; 0x2e
    a340:	1c3a      	adds	r2, r7, #0
    a342:	322c      	adds	r2, #44	; 0x2c
    a344:	8809      	ldrh	r1, [r1, #0]
    a346:	8812      	ldrh	r2, [r2, #0]
    a348:	430a      	orrs	r2, r1
    a34a:	801a      	strh	r2, [r3, #0]
							doffset = itemp;						
    a34c:	1c3b      	adds	r3, r7, #0
    a34e:	3326      	adds	r3, #38	; 0x26
    a350:	1c3a      	adds	r2, r7, #0
    a352:	322e      	adds	r2, #46	; 0x2e
    a354:	8812      	ldrh	r2, [r2, #0]
    a356:	801a      	strh	r2, [r3, #0]
							if (doffset == 0)
    a358:	1c3b      	adds	r3, r7, #0
    a35a:	3326      	adds	r3, #38	; 0x26
    a35c:	881b      	ldrh	r3, [r3, #0]
    a35e:	2b00      	cmp	r3, #0
    a360:	d000      	beq.n	a364 <AppProtocolBrake+0x438>
    a362:	e0ef      	b.n	a544 <AppProtocolBrake+0x618>
							{
								protocolBuffer[5] = 28; 
    a364:	4baf      	ldr	r3, [pc, #700]	; (a624 <AppProtocolBrake+0x6f8>)
    a366:	221c      	movs	r2, #28
    a368:	715a      	strb	r2, [r3, #5]
								//----------offset 
								protocolBuffer[6] = 0x00;
    a36a:	4bae      	ldr	r3, [pc, #696]	; (a624 <AppProtocolBrake+0x6f8>)
    a36c:	2200      	movs	r2, #0
    a36e:	719a      	strb	r2, [r3, #6]
								protocolBuffer[7] = 0x00;
    a370:	4bac      	ldr	r3, [pc, #688]	; (a624 <AppProtocolBrake+0x6f8>)
    a372:	2200      	movs	r2, #0
    a374:	71da      	strb	r2, [r3, #7]
							//----------length 							
								//-------file length, 4 bytes
								ltemp1 = newRemoteInfo.appLength >>24;
    a376:	4baf      	ldr	r3, [pc, #700]	; (a634 <AppProtocolBrake+0x708>)
    a378:	685b      	ldr	r3, [r3, #4]
    a37a:	0e1b      	lsrs	r3, r3, #24
    a37c:	623b      	str	r3, [r7, #32]
								protocolBuffer[8] = ltemp1; 
    a37e:	6a3b      	ldr	r3, [r7, #32]
    a380:	b2da      	uxtb	r2, r3
    a382:	4ba8      	ldr	r3, [pc, #672]	; (a624 <AppProtocolBrake+0x6f8>)
    a384:	721a      	strb	r2, [r3, #8]
								ltemp1 = newRemoteInfo.appLength >>16; 
    a386:	4bab      	ldr	r3, [pc, #684]	; (a634 <AppProtocolBrake+0x708>)
    a388:	685b      	ldr	r3, [r3, #4]
    a38a:	0c1b      	lsrs	r3, r3, #16
    a38c:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a38e:	6a3a      	ldr	r2, [r7, #32]
    a390:	23ff      	movs	r3, #255	; 0xff
    a392:	4013      	ands	r3, r2
    a394:	623b      	str	r3, [r7, #32]
								protocolBuffer[9] = ltemp1; 
    a396:	6a3b      	ldr	r3, [r7, #32]
    a398:	b2da      	uxtb	r2, r3
    a39a:	4ba2      	ldr	r3, [pc, #648]	; (a624 <AppProtocolBrake+0x6f8>)
    a39c:	725a      	strb	r2, [r3, #9]
								ltemp1 = newRemoteInfo.appLength >>8; 
    a39e:	4ba5      	ldr	r3, [pc, #660]	; (a634 <AppProtocolBrake+0x708>)
    a3a0:	685b      	ldr	r3, [r3, #4]
    a3a2:	0a1b      	lsrs	r3, r3, #8
    a3a4:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3a6:	6a3a      	ldr	r2, [r7, #32]
    a3a8:	23ff      	movs	r3, #255	; 0xff
    a3aa:	4013      	ands	r3, r2
    a3ac:	623b      	str	r3, [r7, #32]
								protocolBuffer[10] = ltemp1; 
    a3ae:	6a3b      	ldr	r3, [r7, #32]
    a3b0:	b2da      	uxtb	r2, r3
    a3b2:	4b9c      	ldr	r3, [pc, #624]	; (a624 <AppProtocolBrake+0x6f8>)
    a3b4:	729a      	strb	r2, [r3, #10]
								ltemp1 = newRemoteInfo.appLength; 
    a3b6:	4b9f      	ldr	r3, [pc, #636]	; (a634 <AppProtocolBrake+0x708>)
    a3b8:	685b      	ldr	r3, [r3, #4]
    a3ba:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3bc:	6a3a      	ldr	r2, [r7, #32]
    a3be:	23ff      	movs	r3, #255	; 0xff
    a3c0:	4013      	ands	r3, r2
    a3c2:	623b      	str	r3, [r7, #32]
								protocolBuffer[11] = ltemp1; 	
    a3c4:	6a3b      	ldr	r3, [r7, #32]
    a3c6:	b2da      	uxtb	r2, r3
    a3c8:	4b96      	ldr	r3, [pc, #600]	; (a624 <AppProtocolBrake+0x6f8>)
    a3ca:	72da      	strb	r2, [r3, #11]
								//-------file checksum, 4 bytes
								ltemp1 = newRemoteInfo.checksum >>24;
    a3cc:	4b99      	ldr	r3, [pc, #612]	; (a634 <AppProtocolBrake+0x708>)
    a3ce:	681b      	ldr	r3, [r3, #0]
    a3d0:	0e1b      	lsrs	r3, r3, #24
    a3d2:	623b      	str	r3, [r7, #32]
								protocolBuffer[12] = ltemp1; 
    a3d4:	6a3b      	ldr	r3, [r7, #32]
    a3d6:	b2da      	uxtb	r2, r3
    a3d8:	4b92      	ldr	r3, [pc, #584]	; (a624 <AppProtocolBrake+0x6f8>)
    a3da:	731a      	strb	r2, [r3, #12]
								ltemp1 = newRemoteInfo.checksum >>16; 
    a3dc:	4b95      	ldr	r3, [pc, #596]	; (a634 <AppProtocolBrake+0x708>)
    a3de:	681b      	ldr	r3, [r3, #0]
    a3e0:	0c1b      	lsrs	r3, r3, #16
    a3e2:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3e4:	6a3a      	ldr	r2, [r7, #32]
    a3e6:	23ff      	movs	r3, #255	; 0xff
    a3e8:	4013      	ands	r3, r2
    a3ea:	623b      	str	r3, [r7, #32]
								protocolBuffer[13] = ltemp1; 
    a3ec:	6a3b      	ldr	r3, [r7, #32]
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	4b8c      	ldr	r3, [pc, #560]	; (a624 <AppProtocolBrake+0x6f8>)
    a3f2:	735a      	strb	r2, [r3, #13]
								ltemp1 = newRemoteInfo.checksum >>8; 
    a3f4:	4b8f      	ldr	r3, [pc, #572]	; (a634 <AppProtocolBrake+0x708>)
    a3f6:	681b      	ldr	r3, [r3, #0]
    a3f8:	0a1b      	lsrs	r3, r3, #8
    a3fa:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3fc:	6a3a      	ldr	r2, [r7, #32]
    a3fe:	23ff      	movs	r3, #255	; 0xff
    a400:	4013      	ands	r3, r2
    a402:	623b      	str	r3, [r7, #32]
								protocolBuffer[14] = ltemp1; 
    a404:	6a3b      	ldr	r3, [r7, #32]
    a406:	b2da      	uxtb	r2, r3
    a408:	4b86      	ldr	r3, [pc, #536]	; (a624 <AppProtocolBrake+0x6f8>)
    a40a:	739a      	strb	r2, [r3, #14]
								ltemp1 = newRemoteInfo.checksum; 
    a40c:	4b89      	ldr	r3, [pc, #548]	; (a634 <AppProtocolBrake+0x708>)
    a40e:	681b      	ldr	r3, [r3, #0]
    a410:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a412:	6a3a      	ldr	r2, [r7, #32]
    a414:	23ff      	movs	r3, #255	; 0xff
    a416:	4013      	ands	r3, r2
    a418:	623b      	str	r3, [r7, #32]
								protocolBuffer[15] = ltemp1; 		
    a41a:	6a3b      	ldr	r3, [r7, #32]
    a41c:	b2da      	uxtb	r2, r3
    a41e:	4b81      	ldr	r3, [pc, #516]	; (a624 <AppProtocolBrake+0x6f8>)
    a420:	73da      	strb	r2, [r3, #15]
								//-------file checksum start, 4 bytes
								ltemp1 = newRemoteInfo.checksumStartOffset >>24;
    a422:	4b84      	ldr	r3, [pc, #528]	; (a634 <AppProtocolBrake+0x708>)
    a424:	689b      	ldr	r3, [r3, #8]
    a426:	0e1b      	lsrs	r3, r3, #24
    a428:	623b      	str	r3, [r7, #32]
								protocolBuffer[16] = ltemp1; 
    a42a:	6a3b      	ldr	r3, [r7, #32]
    a42c:	b2da      	uxtb	r2, r3
    a42e:	4b7d      	ldr	r3, [pc, #500]	; (a624 <AppProtocolBrake+0x6f8>)
    a430:	741a      	strb	r2, [r3, #16]
								ltemp1 = newRemoteInfo.checksumStartOffset >>16; 
    a432:	4b80      	ldr	r3, [pc, #512]	; (a634 <AppProtocolBrake+0x708>)
    a434:	689b      	ldr	r3, [r3, #8]
    a436:	0c1b      	lsrs	r3, r3, #16
    a438:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a43a:	6a3a      	ldr	r2, [r7, #32]
    a43c:	23ff      	movs	r3, #255	; 0xff
    a43e:	4013      	ands	r3, r2
    a440:	623b      	str	r3, [r7, #32]
								protocolBuffer[17] = ltemp1; 
    a442:	6a3b      	ldr	r3, [r7, #32]
    a444:	b2da      	uxtb	r2, r3
    a446:	4b77      	ldr	r3, [pc, #476]	; (a624 <AppProtocolBrake+0x6f8>)
    a448:	745a      	strb	r2, [r3, #17]
								ltemp1 = newRemoteInfo.checksumStartOffset >>8; 
    a44a:	4b7a      	ldr	r3, [pc, #488]	; (a634 <AppProtocolBrake+0x708>)
    a44c:	689b      	ldr	r3, [r3, #8]
    a44e:	0a1b      	lsrs	r3, r3, #8
    a450:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a452:	6a3a      	ldr	r2, [r7, #32]
    a454:	23ff      	movs	r3, #255	; 0xff
    a456:	4013      	ands	r3, r2
    a458:	623b      	str	r3, [r7, #32]
								protocolBuffer[18] = ltemp1; 
    a45a:	6a3b      	ldr	r3, [r7, #32]
    a45c:	b2da      	uxtb	r2, r3
    a45e:	4b71      	ldr	r3, [pc, #452]	; (a624 <AppProtocolBrake+0x6f8>)
    a460:	749a      	strb	r2, [r3, #18]
								ltemp1 = newRemoteInfo.checksumStartOffset; 
    a462:	4b74      	ldr	r3, [pc, #464]	; (a634 <AppProtocolBrake+0x708>)
    a464:	689b      	ldr	r3, [r3, #8]
    a466:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a468:	6a3a      	ldr	r2, [r7, #32]
    a46a:	23ff      	movs	r3, #255	; 0xff
    a46c:	4013      	ands	r3, r2
    a46e:	623b      	str	r3, [r7, #32]
								protocolBuffer[19] = ltemp1; 			
    a470:	6a3b      	ldr	r3, [r7, #32]
    a472:	b2da      	uxtb	r2, r3
    a474:	4b6b      	ldr	r3, [pc, #428]	; (a624 <AppProtocolBrake+0x6f8>)
    a476:	74da      	strb	r2, [r3, #19]
								//-------file version, 4 bytes 
								ltemp1 = newRemoteInfo.version >>24;
    a478:	4b6e      	ldr	r3, [pc, #440]	; (a634 <AppProtocolBrake+0x708>)
    a47a:	68db      	ldr	r3, [r3, #12]
    a47c:	0e1b      	lsrs	r3, r3, #24
    a47e:	623b      	str	r3, [r7, #32]
								protocolBuffer[20] = ltemp1; 
    a480:	6a3b      	ldr	r3, [r7, #32]
    a482:	b2da      	uxtb	r2, r3
    a484:	4b67      	ldr	r3, [pc, #412]	; (a624 <AppProtocolBrake+0x6f8>)
    a486:	751a      	strb	r2, [r3, #20]
								ltemp1 = newRemoteInfo.version >>16; 
    a488:	4b6a      	ldr	r3, [pc, #424]	; (a634 <AppProtocolBrake+0x708>)
    a48a:	68db      	ldr	r3, [r3, #12]
    a48c:	0c1b      	lsrs	r3, r3, #16
    a48e:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a490:	6a3a      	ldr	r2, [r7, #32]
    a492:	23ff      	movs	r3, #255	; 0xff
    a494:	4013      	ands	r3, r2
    a496:	623b      	str	r3, [r7, #32]
								protocolBuffer[21] = ltemp1; 
    a498:	6a3b      	ldr	r3, [r7, #32]
    a49a:	b2da      	uxtb	r2, r3
    a49c:	4b61      	ldr	r3, [pc, #388]	; (a624 <AppProtocolBrake+0x6f8>)
    a49e:	755a      	strb	r2, [r3, #21]
								ltemp1 = newRemoteInfo.version >>8; 
    a4a0:	4b64      	ldr	r3, [pc, #400]	; (a634 <AppProtocolBrake+0x708>)
    a4a2:	68db      	ldr	r3, [r3, #12]
    a4a4:	0a1b      	lsrs	r3, r3, #8
    a4a6:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a4a8:	6a3a      	ldr	r2, [r7, #32]
    a4aa:	23ff      	movs	r3, #255	; 0xff
    a4ac:	4013      	ands	r3, r2
    a4ae:	623b      	str	r3, [r7, #32]
								protocolBuffer[22] = ltemp1; 
    a4b0:	6a3b      	ldr	r3, [r7, #32]
    a4b2:	b2da      	uxtb	r2, r3
    a4b4:	4b5b      	ldr	r3, [pc, #364]	; (a624 <AppProtocolBrake+0x6f8>)
    a4b6:	759a      	strb	r2, [r3, #22]
								ltemp1 = newRemoteInfo.version; 
    a4b8:	4b5e      	ldr	r3, [pc, #376]	; (a634 <AppProtocolBrake+0x708>)
    a4ba:	68db      	ldr	r3, [r3, #12]
    a4bc:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a4be:	6a3a      	ldr	r2, [r7, #32]
    a4c0:	23ff      	movs	r3, #255	; 0xff
    a4c2:	4013      	ands	r3, r2
    a4c4:	623b      	str	r3, [r7, #32]
								protocolBuffer[23] = ltemp1; 			
    a4c6:	6a3b      	ldr	r3, [r7, #32]
    a4c8:	b2da      	uxtb	r2, r3
    a4ca:	4b56      	ldr	r3, [pc, #344]	; (a624 <AppProtocolBrake+0x6f8>)
    a4cc:	75da      	strb	r2, [r3, #23]
								//-------number of packets, 1 byte
								ltemp1 = newRemoteInfo.appLength;
    a4ce:	4b59      	ldr	r3, [pc, #356]	; (a634 <AppProtocolBrake+0x708>)
    a4d0:	685b      	ldr	r3, [r3, #4]
    a4d2:	623b      	str	r3, [r7, #32]
								ltemp1 = ltemp1/128; 
    a4d4:	6a3b      	ldr	r3, [r7, #32]
    a4d6:	09db      	lsrs	r3, r3, #7
    a4d8:	623b      	str	r3, [r7, #32]
								ltemp1++;
    a4da:	6a3b      	ldr	r3, [r7, #32]
    a4dc:	3301      	adds	r3, #1
    a4de:	623b      	str	r3, [r7, #32]
								remoteDownloadPacketCount = ltemp1; 
    a4e0:	6a3b      	ldr	r3, [r7, #32]
    a4e2:	b29a      	uxth	r2, r3
    a4e4:	4b54      	ldr	r3, [pc, #336]	; (a638 <AppProtocolBrake+0x70c>)
    a4e6:	801a      	strh	r2, [r3, #0]
								protocolBuffer[24] = ltemp1>>8;
    a4e8:	6a3b      	ldr	r3, [r7, #32]
    a4ea:	0a1b      	lsrs	r3, r3, #8
    a4ec:	b2da      	uxtb	r2, r3
    a4ee:	4b4d      	ldr	r3, [pc, #308]	; (a624 <AppProtocolBrake+0x6f8>)
    a4f0:	761a      	strb	r2, [r3, #24]
								ltemp1 &= 0xff; 
    a4f2:	6a3a      	ldr	r2, [r7, #32]
    a4f4:	23ff      	movs	r3, #255	; 0xff
    a4f6:	4013      	ands	r3, r2
    a4f8:	623b      	str	r3, [r7, #32]
								protocolBuffer[25] = ltemp1;
    a4fa:	6a3b      	ldr	r3, [r7, #32]
    a4fc:	b2da      	uxtb	r2, r3
    a4fe:	4b49      	ldr	r3, [pc, #292]	; (a624 <AppProtocolBrake+0x6f8>)
    a500:	765a      	strb	r2, [r3, #25]
							
								checksum = AppProtocolChecksum(protocolBuffer,26);
    a502:	1c3c      	adds	r4, r7, #0
    a504:	341f      	adds	r4, #31
    a506:	4b47      	ldr	r3, [pc, #284]	; (a624 <AppProtocolBrake+0x6f8>)
    a508:	1c18      	adds	r0, r3, #0
    a50a:	211a      	movs	r1, #26
    a50c:	4b4b      	ldr	r3, [pc, #300]	; (a63c <AppProtocolBrake+0x710>)
    a50e:	4798      	blx	r3
    a510:	1c03      	adds	r3, r0, #0
    a512:	7023      	strb	r3, [r4, #0]
								protocolBuffer[26] = checksum;
    a514:	4b43      	ldr	r3, [pc, #268]	; (a624 <AppProtocolBrake+0x6f8>)
    a516:	1c3a      	adds	r2, r7, #0
    a518:	321f      	adds	r2, #31
    a51a:	7812      	ldrb	r2, [r2, #0]
    a51c:	769a      	strb	r2, [r3, #26]
								protocolBuffer[27] = 0x04;
    a51e:	4b41      	ldr	r3, [pc, #260]	; (a624 <AppProtocolBrake+0x6f8>)
    a520:	2204      	movs	r2, #4
    a522:	76da      	strb	r2, [r3, #27]
								if (whichRadio == WHICHRADIO_LORA)
    a524:	4b46      	ldr	r3, [pc, #280]	; (a640 <AppProtocolBrake+0x714>)
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	2b99      	cmp	r3, #153	; 0x99
    a52a:	d105      	bne.n	a538 <AppProtocolBrake+0x60c>
								{
									SX1272LoraTransmit(protocolBuffer,28);
    a52c:	4b3d      	ldr	r3, [pc, #244]	; (a624 <AppProtocolBrake+0x6f8>)
    a52e:	1c18      	adds	r0, r3, #0
    a530:	211c      	movs	r1, #28
    a532:	4b44      	ldr	r3, [pc, #272]	; (a644 <AppProtocolBrake+0x718>)
    a534:	4798      	blx	r3
    a536:	e0c8      	b.n	a6ca <AppProtocolBrake+0x79e>
								}
								else
								{
									SX1272FskTransmit(protocolBuffer,28);
    a538:	4b3a      	ldr	r3, [pc, #232]	; (a624 <AppProtocolBrake+0x6f8>)
    a53a:	1c18      	adds	r0, r3, #0
    a53c:	211c      	movs	r1, #28
    a53e:	4b42      	ldr	r3, [pc, #264]	; (a648 <AppProtocolBrake+0x71c>)
    a540:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a542:	e109      	b.n	a758 <AppProtocolBrake+0x82c>
									SX1272FskTransmit(protocolBuffer,28);
								}							 
							}
							else
							{
								if (doffset == 0xffff)
    a544:	1c3b      	adds	r3, r7, #0
    a546:	3326      	adds	r3, #38	; 0x26
    a548:	881a      	ldrh	r2, [r3, #0]
    a54a:	4b40      	ldr	r3, [pc, #256]	; (a64c <AppProtocolBrake+0x720>)
    a54c:	429a      	cmp	r2, r3
    a54e:	d138      	bne.n	a5c2 <AppProtocolBrake+0x696>
								{
									newRemoteDownloadNeeded = FALSE; 
    a550:	4b3f      	ldr	r3, [pc, #252]	; (a650 <AppProtocolBrake+0x724>)
    a552:	2200      	movs	r2, #0
    a554:	701a      	strb	r2, [r3, #0]
									protocolBuffer[5] = 14;
    a556:	4b33      	ldr	r3, [pc, #204]	; (a624 <AppProtocolBrake+0x6f8>)
    a558:	220e      	movs	r2, #14
    a55a:	715a      	strb	r2, [r3, #5]
									//----------offset 
									protocolBuffer[6] = 0x00;
    a55c:	4b31      	ldr	r3, [pc, #196]	; (a624 <AppProtocolBrake+0x6f8>)
    a55e:	2200      	movs	r2, #0
    a560:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = 0x00;
    a562:	4b30      	ldr	r3, [pc, #192]	; (a624 <AppProtocolBrake+0x6f8>)
    a564:	2200      	movs	r2, #0
    a566:	71da      	strb	r2, [r3, #7]
									//----------length 
									protocolBuffer[8] = 0x00; 
    a568:	4b2e      	ldr	r3, [pc, #184]	; (a624 <AppProtocolBrake+0x6f8>)
    a56a:	2200      	movs	r2, #0
    a56c:	721a      	strb	r2, [r3, #8]
									protocolBuffer[9] = 0x00;
    a56e:	4b2d      	ldr	r3, [pc, #180]	; (a624 <AppProtocolBrake+0x6f8>)
    a570:	2200      	movs	r2, #0
    a572:	725a      	strb	r2, [r3, #9]
									protocolBuffer[10] = 0x00;
    a574:	4b2b      	ldr	r3, [pc, #172]	; (a624 <AppProtocolBrake+0x6f8>)
    a576:	2200      	movs	r2, #0
    a578:	729a      	strb	r2, [r3, #10]
									protocolBuffer[11] = 0x00;
    a57a:	4b2a      	ldr	r3, [pc, #168]	; (a624 <AppProtocolBrake+0x6f8>)
    a57c:	2200      	movs	r2, #0
    a57e:	72da      	strb	r2, [r3, #11]
									checksum = AppProtocolChecksum(protocolBuffer,12);
    a580:	1c3c      	adds	r4, r7, #0
    a582:	341f      	adds	r4, #31
    a584:	4b27      	ldr	r3, [pc, #156]	; (a624 <AppProtocolBrake+0x6f8>)
    a586:	1c18      	adds	r0, r3, #0
    a588:	210c      	movs	r1, #12
    a58a:	4b2c      	ldr	r3, [pc, #176]	; (a63c <AppProtocolBrake+0x710>)
    a58c:	4798      	blx	r3
    a58e:	1c03      	adds	r3, r0, #0
    a590:	7023      	strb	r3, [r4, #0]
									protocolBuffer[12] = checksum;
    a592:	4b24      	ldr	r3, [pc, #144]	; (a624 <AppProtocolBrake+0x6f8>)
    a594:	1c3a      	adds	r2, r7, #0
    a596:	321f      	adds	r2, #31
    a598:	7812      	ldrb	r2, [r2, #0]
    a59a:	731a      	strb	r2, [r3, #12]
									protocolBuffer[13] = 0x04;
    a59c:	4b21      	ldr	r3, [pc, #132]	; (a624 <AppProtocolBrake+0x6f8>)
    a59e:	2204      	movs	r2, #4
    a5a0:	735a      	strb	r2, [r3, #13]
									if (whichRadio == WHICHRADIO_LORA)
    a5a2:	4b27      	ldr	r3, [pc, #156]	; (a640 <AppProtocolBrake+0x714>)
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	2b99      	cmp	r3, #153	; 0x99
    a5a8:	d105      	bne.n	a5b6 <AppProtocolBrake+0x68a>
									{
										SX1272LoraTransmit(protocolBuffer,14);
    a5aa:	4b1e      	ldr	r3, [pc, #120]	; (a624 <AppProtocolBrake+0x6f8>)
    a5ac:	1c18      	adds	r0, r3, #0
    a5ae:	210e      	movs	r1, #14
    a5b0:	4b24      	ldr	r3, [pc, #144]	; (a644 <AppProtocolBrake+0x718>)
    a5b2:	4798      	blx	r3
    a5b4:	e089      	b.n	a6ca <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,14);
    a5b6:	4b1b      	ldr	r3, [pc, #108]	; (a624 <AppProtocolBrake+0x6f8>)
    a5b8:	1c18      	adds	r0, r3, #0
    a5ba:	210e      	movs	r1, #14
    a5bc:	4b22      	ldr	r3, [pc, #136]	; (a648 <AppProtocolBrake+0x71c>)
    a5be:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a5c0:	e0ca      	b.n	a758 <AppProtocolBrake+0x82c>
								}
								else
								{
							
									//-----------------offset greater than 0x00 
									protocolBuffer[5] = 138; 
    a5c2:	4b18      	ldr	r3, [pc, #96]	; (a624 <AppProtocolBrake+0x6f8>)
    a5c4:	228a      	movs	r2, #138	; 0x8a
    a5c6:	715a      	strb	r2, [r3, #5]
									//----------offset 
									itemp = doffset >>8;
    a5c8:	1c3b      	adds	r3, r7, #0
    a5ca:	332e      	adds	r3, #46	; 0x2e
    a5cc:	1c3a      	adds	r2, r7, #0
    a5ce:	3226      	adds	r2, #38	; 0x26
    a5d0:	8812      	ldrh	r2, [r2, #0]
    a5d2:	0a12      	lsrs	r2, r2, #8
    a5d4:	801a      	strh	r2, [r3, #0]
									itemp2 = doffset & 0xff; 
    a5d6:	1c3b      	adds	r3, r7, #0
    a5d8:	332c      	adds	r3, #44	; 0x2c
    a5da:	1c3a      	adds	r2, r7, #0
    a5dc:	3226      	adds	r2, #38	; 0x26
    a5de:	8811      	ldrh	r1, [r2, #0]
    a5e0:	22ff      	movs	r2, #255	; 0xff
    a5e2:	400a      	ands	r2, r1
    a5e4:	801a      	strh	r2, [r3, #0]
									protocolBuffer[6] = itemp;
    a5e6:	1c3b      	adds	r3, r7, #0
    a5e8:	332e      	adds	r3, #46	; 0x2e
    a5ea:	881b      	ldrh	r3, [r3, #0]
    a5ec:	b2da      	uxtb	r2, r3
    a5ee:	4b0d      	ldr	r3, [pc, #52]	; (a624 <AppProtocolBrake+0x6f8>)
    a5f0:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = itemp2;
    a5f2:	1c3b      	adds	r3, r7, #0
    a5f4:	332c      	adds	r3, #44	; 0x2c
    a5f6:	881b      	ldrh	r3, [r3, #0]
    a5f8:	b2da      	uxtb	r2, r3
    a5fa:	4b0a      	ldr	r3, [pc, #40]	; (a624 <AppProtocolBrake+0x6f8>)
    a5fc:	71da      	strb	r2, [r3, #7]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
    a5fe:	1c3b      	adds	r3, r7, #0
    a600:	3326      	adds	r3, #38	; 0x26
    a602:	881b      	ldrh	r3, [r3, #0]
    a604:	3b01      	subs	r3, #1
    a606:	01db      	lsls	r3, r3, #7
    a608:	623b      	str	r3, [r7, #32]
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
    a60a:	6a3b      	ldr	r3, [r7, #32]
    a60c:	2284      	movs	r2, #132	; 0x84
    a60e:	0292      	lsls	r2, r2, #10
    a610:	189b      	adds	r3, r3, r2
    a612:	61bb      	str	r3, [r7, #24]
									lptr = ltemp2; 				 
    a614:	69bb      	ldr	r3, [r7, #24]
    a616:	633b      	str	r3, [r7, #48]	; 0x30
			 						for (x=0;x<128;x++)
    a618:	1c3b      	adds	r3, r7, #0
    a61a:	3312      	adds	r3, #18
    a61c:	2200      	movs	r2, #0
    a61e:	801a      	strh	r2, [r3, #0]
    a620:	e02b      	b.n	a67a <AppProtocolBrake+0x74e>
    a622:	46c0      	nop			; (mov r8, r8)
    a624:	20002f20 	.word	0x20002f20
    a628:	20002fb8 	.word	0x20002fb8
    a62c:	00009f11 	.word	0x00009f11
    a630:	200004a4 	.word	0x200004a4
    a634:	2000308c 	.word	0x2000308c
    a638:	20002ef8 	.word	0x20002ef8
    a63c:	00009ead 	.word	0x00009ead
    a640:	200036d2 	.word	0x200036d2
    a644:	0001115d 	.word	0x0001115d
    a648:	00010331 	.word	0x00010331
    a64c:	0000ffff 	.word	0x0000ffff
    a650:	200004bb 	.word	0x200004bb
									{
										protocolBuffer[x+8] = *lptr++;	
    a654:	1c3b      	adds	r3, r7, #0
    a656:	3312      	adds	r3, #18
    a658:	881b      	ldrh	r3, [r3, #0]
    a65a:	1c1a      	adds	r2, r3, #0
    a65c:	3208      	adds	r2, #8
    a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a660:	1c59      	adds	r1, r3, #1
    a662:	6339      	str	r1, [r7, #48]	; 0x30
    a664:	7819      	ldrb	r1, [r3, #0]
    a666:	4ba5      	ldr	r3, [pc, #660]	; (a8fc <AppProtocolBrake+0x9d0>)
    a668:	5499      	strb	r1, [r3, r2]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
									lptr = ltemp2; 				 
			 						for (x=0;x<128;x++)
    a66a:	1c3b      	adds	r3, r7, #0
    a66c:	3312      	adds	r3, #18
    a66e:	881b      	ldrh	r3, [r3, #0]
    a670:	3301      	adds	r3, #1
    a672:	b29a      	uxth	r2, r3
    a674:	1c3b      	adds	r3, r7, #0
    a676:	3312      	adds	r3, #18
    a678:	801a      	strh	r2, [r3, #0]
    a67a:	1c3b      	adds	r3, r7, #0
    a67c:	3312      	adds	r3, #18
    a67e:	881b      	ldrh	r3, [r3, #0]
    a680:	2b7f      	cmp	r3, #127	; 0x7f
    a682:	d9e7      	bls.n	a654 <AppProtocolBrake+0x728>
									{
										protocolBuffer[x+8] = *lptr++;	
									}
									checksum = AppProtocolChecksum(protocolBuffer,136);
    a684:	1c3c      	adds	r4, r7, #0
    a686:	341f      	adds	r4, #31
    a688:	4b9c      	ldr	r3, [pc, #624]	; (a8fc <AppProtocolBrake+0x9d0>)
    a68a:	1c18      	adds	r0, r3, #0
    a68c:	2188      	movs	r1, #136	; 0x88
    a68e:	4b9c      	ldr	r3, [pc, #624]	; (a900 <AppProtocolBrake+0x9d4>)
    a690:	4798      	blx	r3
    a692:	1c03      	adds	r3, r0, #0
    a694:	7023      	strb	r3, [r4, #0]
									protocolBuffer[136] = checksum;
    a696:	4a99      	ldr	r2, [pc, #612]	; (a8fc <AppProtocolBrake+0x9d0>)
    a698:	1c39      	adds	r1, r7, #0
    a69a:	311f      	adds	r1, #31
    a69c:	2388      	movs	r3, #136	; 0x88
    a69e:	7809      	ldrb	r1, [r1, #0]
    a6a0:	54d1      	strb	r1, [r2, r3]
									protocolBuffer[137] = 0x04;
    a6a2:	4a96      	ldr	r2, [pc, #600]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6a4:	2389      	movs	r3, #137	; 0x89
    a6a6:	2104      	movs	r1, #4
    a6a8:	54d1      	strb	r1, [r2, r3]
									if (whichRadio == WHICHRADIO_LORA)
    a6aa:	4b96      	ldr	r3, [pc, #600]	; (a904 <AppProtocolBrake+0x9d8>)
    a6ac:	781b      	ldrb	r3, [r3, #0]
    a6ae:	2b99      	cmp	r3, #153	; 0x99
    a6b0:	d105      	bne.n	a6be <AppProtocolBrake+0x792>
									{
										SX1272LoraTransmit(protocolBuffer,138);
    a6b2:	4b92      	ldr	r3, [pc, #584]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6b4:	1c18      	adds	r0, r3, #0
    a6b6:	218a      	movs	r1, #138	; 0x8a
    a6b8:	4b93      	ldr	r3, [pc, #588]	; (a908 <AppProtocolBrake+0x9dc>)
    a6ba:	4798      	blx	r3
    a6bc:	e005      	b.n	a6ca <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,138);
    a6be:	4b8f      	ldr	r3, [pc, #572]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6c0:	1c18      	adds	r0, r3, #0
    a6c2:	218a      	movs	r1, #138	; 0x8a
    a6c4:	4b91      	ldr	r3, [pc, #580]	; (a90c <AppProtocolBrake+0x9e0>)
    a6c6:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a6c8:	e046      	b.n	a758 <AppProtocolBrake+0x82c>
    a6ca:	e045      	b.n	a758 <AppProtocolBrake+0x82c>
								}
							}
						}
						else
						{				
							remoteDownloadPacketNumber=0; 
    a6cc:	4b90      	ldr	r3, [pc, #576]	; (a910 <AppProtocolBrake+0x9e4>)
    a6ce:	2200      	movs	r2, #0
    a6d0:	801a      	strh	r2, [r3, #0]
							remoteDownloadPacketCount=0; 
    a6d2:	4b90      	ldr	r3, [pc, #576]	; (a914 <AppProtocolBrake+0x9e8>)
    a6d4:	2200      	movs	r2, #0
    a6d6:	801a      	strh	r2, [r3, #0]
							remoteDownloadNextPacketNumber=0;
    a6d8:	4b8f      	ldr	r3, [pc, #572]	; (a918 <AppProtocolBrake+0x9ec>)
    a6da:	2200      	movs	r2, #0
    a6dc:	801a      	strh	r2, [r3, #0]
							remoteDownloadLastPacketNumber=0; 
    a6de:	4b8f      	ldr	r3, [pc, #572]	; (a91c <AppProtocolBrake+0x9f0>)
    a6e0:	2200      	movs	r2, #0
    a6e2:	801a      	strh	r2, [r3, #0]
							remoteDownloadLength=0; 						
    a6e4:	4b8e      	ldr	r3, [pc, #568]	; (a920 <AppProtocolBrake+0x9f4>)
    a6e6:	2200      	movs	r2, #0
    a6e8:	601a      	str	r2, [r3, #0]
						 					 
							protocolBuffer[5] = 14;
    a6ea:	4b84      	ldr	r3, [pc, #528]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6ec:	220e      	movs	r2, #14
    a6ee:	715a      	strb	r2, [r3, #5]
							//----------offset 
							protocolBuffer[6] = 0x00;
    a6f0:	4b82      	ldr	r3, [pc, #520]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6f2:	2200      	movs	r2, #0
    a6f4:	719a      	strb	r2, [r3, #6]
							protocolBuffer[7] = 0x00;
    a6f6:	4b81      	ldr	r3, [pc, #516]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6f8:	2200      	movs	r2, #0
    a6fa:	71da      	strb	r2, [r3, #7]
							//----------length 
							protocolBuffer[8] = 0x00; 
    a6fc:	4b7f      	ldr	r3, [pc, #508]	; (a8fc <AppProtocolBrake+0x9d0>)
    a6fe:	2200      	movs	r2, #0
    a700:	721a      	strb	r2, [r3, #8]
							protocolBuffer[9] = 0x00;
    a702:	4b7e      	ldr	r3, [pc, #504]	; (a8fc <AppProtocolBrake+0x9d0>)
    a704:	2200      	movs	r2, #0
    a706:	725a      	strb	r2, [r3, #9]
							protocolBuffer[10] = 0x00;
    a708:	4b7c      	ldr	r3, [pc, #496]	; (a8fc <AppProtocolBrake+0x9d0>)
    a70a:	2200      	movs	r2, #0
    a70c:	729a      	strb	r2, [r3, #10]
							protocolBuffer[11] = 0x00;
    a70e:	4b7b      	ldr	r3, [pc, #492]	; (a8fc <AppProtocolBrake+0x9d0>)
    a710:	2200      	movs	r2, #0
    a712:	72da      	strb	r2, [r3, #11]
							checksum = AppProtocolChecksum(protocolBuffer,12);
    a714:	1c3c      	adds	r4, r7, #0
    a716:	341f      	adds	r4, #31
    a718:	4b78      	ldr	r3, [pc, #480]	; (a8fc <AppProtocolBrake+0x9d0>)
    a71a:	1c18      	adds	r0, r3, #0
    a71c:	210c      	movs	r1, #12
    a71e:	4b78      	ldr	r3, [pc, #480]	; (a900 <AppProtocolBrake+0x9d4>)
    a720:	4798      	blx	r3
    a722:	1c03      	adds	r3, r0, #0
    a724:	7023      	strb	r3, [r4, #0]
							protocolBuffer[12] = checksum;
    a726:	4b75      	ldr	r3, [pc, #468]	; (a8fc <AppProtocolBrake+0x9d0>)
    a728:	1c3a      	adds	r2, r7, #0
    a72a:	321f      	adds	r2, #31
    a72c:	7812      	ldrb	r2, [r2, #0]
    a72e:	731a      	strb	r2, [r3, #12]
							protocolBuffer[13] = 0x04;
    a730:	4b72      	ldr	r3, [pc, #456]	; (a8fc <AppProtocolBrake+0x9d0>)
    a732:	2204      	movs	r2, #4
    a734:	735a      	strb	r2, [r3, #13]
							if (whichRadio == WHICHRADIO_LORA)
    a736:	4b73      	ldr	r3, [pc, #460]	; (a904 <AppProtocolBrake+0x9d8>)
    a738:	781b      	ldrb	r3, [r3, #0]
    a73a:	2b99      	cmp	r3, #153	; 0x99
    a73c:	d105      	bne.n	a74a <AppProtocolBrake+0x81e>
							{
								SX1272LoraTransmit(protocolBuffer,14);
    a73e:	4b6f      	ldr	r3, [pc, #444]	; (a8fc <AppProtocolBrake+0x9d0>)
    a740:	1c18      	adds	r0, r3, #0
    a742:	210e      	movs	r1, #14
    a744:	4b70      	ldr	r3, [pc, #448]	; (a908 <AppProtocolBrake+0x9dc>)
    a746:	4798      	blx	r3
    a748:	e006      	b.n	a758 <AppProtocolBrake+0x82c>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,14);
    a74a:	4b6c      	ldr	r3, [pc, #432]	; (a8fc <AppProtocolBrake+0x9d0>)
    a74c:	1c18      	adds	r0, r3, #0
    a74e:	210e      	movs	r1, #14
    a750:	4b6e      	ldr	r3, [pc, #440]	; (a90c <AppProtocolBrake+0x9e0>)
    a752:	4798      	blx	r3
							}	
						}
						break;
    a754:	f000 fbb2 	bl	aebc <AppProtocolBrake+0xf90>
    a758:	e3b0      	b.n	aebc <AppProtocolBrake+0xf90>
					}
					case MSG_SW:
					{
						protocolBuffer[0] = '#';
    a75a:	4b68      	ldr	r3, [pc, #416]	; (a8fc <AppProtocolBrake+0x9d0>)
    a75c:	2223      	movs	r2, #35	; 0x23
    a75e:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a760:	4b70      	ldr	r3, [pc, #448]	; (a924 <AppProtocolBrake+0x9f8>)
    a762:	7bda      	ldrb	r2, [r3, #15]
    a764:	4b65      	ldr	r3, [pc, #404]	; (a8fc <AppProtocolBrake+0x9d0>)
    a766:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a768:	4b6e      	ldr	r3, [pc, #440]	; (a924 <AppProtocolBrake+0x9f8>)
    a76a:	7c1a      	ldrb	r2, [r3, #16]
    a76c:	4b63      	ldr	r3, [pc, #396]	; (a8fc <AppProtocolBrake+0x9d0>)
    a76e:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'S';
    a770:	4b62      	ldr	r3, [pc, #392]	; (a8fc <AppProtocolBrake+0x9d0>)
    a772:	2253      	movs	r2, #83	; 0x53
    a774:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'W';					 
    a776:	4b61      	ldr	r3, [pc, #388]	; (a8fc <AppProtocolBrake+0x9d0>)
    a778:	2257      	movs	r2, #87	; 0x57
    a77a:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0x09;
    a77c:	4b5f      	ldr	r3, [pc, #380]	; (a8fc <AppProtocolBrake+0x9d0>)
    a77e:	2209      	movs	r2, #9
    a780:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = buffers[7];  //yes switching
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	79da      	ldrb	r2, [r3, #7]
    a786:	4b5d      	ldr	r3, [pc, #372]	; (a8fc <AppProtocolBrake+0x9d0>)
    a788:	719a      	strb	r2, [r3, #6]
						switchOnTransmit = buffers[7]; 
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	79da      	ldrb	r2, [r3, #7]
    a78e:	4b66      	ldr	r3, [pc, #408]	; (a928 <AppProtocolBrake+0x9fc>)
    a790:	701a      	strb	r2, [r3, #0]
						checksum = AppProtocolChecksum(protocolBuffer,7);
    a792:	1c3c      	adds	r4, r7, #0
    a794:	341f      	adds	r4, #31
    a796:	4b59      	ldr	r3, [pc, #356]	; (a8fc <AppProtocolBrake+0x9d0>)
    a798:	1c18      	adds	r0, r3, #0
    a79a:	2107      	movs	r1, #7
    a79c:	4b58      	ldr	r3, [pc, #352]	; (a900 <AppProtocolBrake+0x9d4>)
    a79e:	4798      	blx	r3
    a7a0:	1c03      	adds	r3, r0, #0
    a7a2:	7023      	strb	r3, [r4, #0]
						protocolBuffer[7] = checksum;
    a7a4:	4b55      	ldr	r3, [pc, #340]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7a6:	1c3a      	adds	r2, r7, #0
    a7a8:	321f      	adds	r2, #31
    a7aa:	7812      	ldrb	r2, [r2, #0]
    a7ac:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = 0x04;
    a7ae:	4b53      	ldr	r3, [pc, #332]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7b0:	2204      	movs	r2, #4
    a7b2:	721a      	strb	r2, [r3, #8]
						if (whichRadio == WHICHRADIO_LORA)
    a7b4:	4b53      	ldr	r3, [pc, #332]	; (a904 <AppProtocolBrake+0x9d8>)
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	2b99      	cmp	r3, #153	; 0x99
    a7ba:	d105      	bne.n	a7c8 <AppProtocolBrake+0x89c>
						{
							SX1272LoraTransmit(protocolBuffer,9);
    a7bc:	4b4f      	ldr	r3, [pc, #316]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7be:	1c18      	adds	r0, r3, #0
    a7c0:	2109      	movs	r1, #9
    a7c2:	4b51      	ldr	r3, [pc, #324]	; (a908 <AppProtocolBrake+0x9dc>)
    a7c4:	4798      	blx	r3
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
						}
					
						break;
    a7c6:	e379      	b.n	aebc <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,9);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
    a7c8:	4b4c      	ldr	r3, [pc, #304]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7ca:	1c18      	adds	r0, r3, #0
    a7cc:	2109      	movs	r1, #9
    a7ce:	4b4f      	ldr	r3, [pc, #316]	; (a90c <AppProtocolBrake+0x9e0>)
    a7d0:	4798      	blx	r3
						}
					
						break;
    a7d2:	e373      	b.n	aebc <AppProtocolBrake+0xf90>
					}				
					case MSG_PR:
					{			
						protocolBuffer[0] = '#';
    a7d4:	4b49      	ldr	r3, [pc, #292]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7d6:	2223      	movs	r2, #35	; 0x23
    a7d8:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a7da:	4b52      	ldr	r3, [pc, #328]	; (a924 <AppProtocolBrake+0x9f8>)
    a7dc:	7bda      	ldrb	r2, [r3, #15]
    a7de:	4b47      	ldr	r3, [pc, #284]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7e0:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a7e2:	4b50      	ldr	r3, [pc, #320]	; (a924 <AppProtocolBrake+0x9f8>)
    a7e4:	7c1a      	ldrb	r2, [r3, #16]
    a7e6:	4b45      	ldr	r3, [pc, #276]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7e8:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'P';
    a7ea:	4b44      	ldr	r3, [pc, #272]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7ec:	2250      	movs	r2, #80	; 0x50
    a7ee:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';	
    a7f0:	4b42      	ldr	r3, [pc, #264]	; (a8fc <AppProtocolBrake+0x9d0>)
    a7f2:	224d      	movs	r2, #77	; 0x4d
    a7f4:	711a      	strb	r2, [r3, #4]
						if (setup_pressed == 0)		
    a7f6:	4b4d      	ldr	r3, [pc, #308]	; (a92c <AppProtocolBrake+0xa00>)
    a7f8:	881b      	ldrh	r3, [r3, #0]
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d102      	bne.n	a804 <AppProtocolBrake+0x8d8>
						{
							protocolBuffer[4] = 'L';		
    a7fe:	4b3f      	ldr	r3, [pc, #252]	; (a8fc <AppProtocolBrake+0x9d0>)
    a800:	224c      	movs	r2, #76	; 0x4c
    a802:	711a      	strb	r2, [r3, #4]
						}				
						protocolBuffer[5] = 0x08; 	
    a804:	4b3d      	ldr	r3, [pc, #244]	; (a8fc <AppProtocolBrake+0x9d0>)
    a806:	2208      	movs	r2, #8
    a808:	715a      	strb	r2, [r3, #5]
						checksum = AppProtocolChecksum(protocolBuffer,6);	
    a80a:	1c3c      	adds	r4, r7, #0
    a80c:	341f      	adds	r4, #31
    a80e:	4b3b      	ldr	r3, [pc, #236]	; (a8fc <AppProtocolBrake+0x9d0>)
    a810:	1c18      	adds	r0, r3, #0
    a812:	2106      	movs	r1, #6
    a814:	4b3a      	ldr	r3, [pc, #232]	; (a900 <AppProtocolBrake+0x9d4>)
    a816:	4798      	blx	r3
    a818:	1c03      	adds	r3, r0, #0
    a81a:	7023      	strb	r3, [r4, #0]
						protocolBuffer[6] = checksum; 			
    a81c:	4b37      	ldr	r3, [pc, #220]	; (a8fc <AppProtocolBrake+0x9d0>)
    a81e:	1c3a      	adds	r2, r7, #0
    a820:	321f      	adds	r2, #31
    a822:	7812      	ldrb	r2, [r2, #0]
    a824:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = 0x04; 	
    a826:	4b35      	ldr	r3, [pc, #212]	; (a8fc <AppProtocolBrake+0x9d0>)
    a828:	2204      	movs	r2, #4
    a82a:	71da      	strb	r2, [r3, #7]
						if (setup_pressed != 0)
    a82c:	4b3f      	ldr	r3, [pc, #252]	; (a92c <AppProtocolBrake+0xa00>)
    a82e:	881b      	ldrh	r3, [r3, #0]
    a830:	2b00      	cmp	r3, #0
    a832:	d00f      	beq.n	a854 <AppProtocolBrake+0x928>
						{						
							if (whichRadio == WHICHRADIO_LORA)
    a834:	4b33      	ldr	r3, [pc, #204]	; (a904 <AppProtocolBrake+0x9d8>)
    a836:	781b      	ldrb	r3, [r3, #0]
    a838:	2b99      	cmp	r3, #153	; 0x99
    a83a:	d105      	bne.n	a848 <AppProtocolBrake+0x91c>
							{
								SX1272LoraTransmit(protocolBuffer,8);
    a83c:	4b2f      	ldr	r3, [pc, #188]	; (a8fc <AppProtocolBrake+0x9d0>)
    a83e:	1c18      	adds	r0, r3, #0
    a840:	2108      	movs	r1, #8
    a842:	4b31      	ldr	r3, [pc, #196]	; (a908 <AppProtocolBrake+0x9dc>)
    a844:	4798      	blx	r3
    a846:	e005      	b.n	a854 <AppProtocolBrake+0x928>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,8);
    a848:	4b2c      	ldr	r3, [pc, #176]	; (a8fc <AppProtocolBrake+0x9d0>)
    a84a:	1c18      	adds	r0, r3, #0
    a84c:	2108      	movs	r1, #8
    a84e:	4b2f      	ldr	r3, [pc, #188]	; (a90c <AppProtocolBrake+0x9e0>)
    a850:	4798      	blx	r3
							}
						}
						break;
    a852:	e333      	b.n	aebc <AppProtocolBrake+0xf90>
    a854:	e332      	b.n	aebc <AppProtocolBrake+0xf90>
					}
					case MSG_FV:
					{
 							//---------FV
						protocolBuffer[0] = '#';
    a856:	4b29      	ldr	r3, [pc, #164]	; (a8fc <AppProtocolBrake+0x9d0>)
    a858:	2223      	movs	r2, #35	; 0x23
    a85a:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a85c:	4b31      	ldr	r3, [pc, #196]	; (a924 <AppProtocolBrake+0x9f8>)
    a85e:	7bda      	ldrb	r2, [r3, #15]
    a860:	4b26      	ldr	r3, [pc, #152]	; (a8fc <AppProtocolBrake+0x9d0>)
    a862:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a864:	4b2f      	ldr	r3, [pc, #188]	; (a924 <AppProtocolBrake+0x9f8>)
    a866:	7c1a      	ldrb	r2, [r3, #16]
    a868:	4b24      	ldr	r3, [pc, #144]	; (a8fc <AppProtocolBrake+0x9d0>)
    a86a:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'F';
    a86c:	4b23      	ldr	r3, [pc, #140]	; (a8fc <AppProtocolBrake+0x9d0>)
    a86e:	2246      	movs	r2, #70	; 0x46
    a870:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    a872:	4b22      	ldr	r3, [pc, #136]	; (a8fc <AppProtocolBrake+0x9d0>)
    a874:	224d      	movs	r2, #77	; 0x4d
    a876:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 18;
    a878:	4b20      	ldr	r3, [pc, #128]	; (a8fc <AppProtocolBrake+0x9d0>)
    a87a:	2212      	movs	r2, #18
    a87c:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = FWVER3;
    a87e:	4b1f      	ldr	r3, [pc, #124]	; (a8fc <AppProtocolBrake+0x9d0>)
    a880:	2230      	movs	r2, #48	; 0x30
    a882:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = FWVER2;
    a884:	4b1d      	ldr	r3, [pc, #116]	; (a8fc <AppProtocolBrake+0x9d0>)
    a886:	2231      	movs	r2, #49	; 0x31
    a888:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = FWVER1;
    a88a:	4b1c      	ldr	r3, [pc, #112]	; (a8fc <AppProtocolBrake+0x9d0>)
    a88c:	2239      	movs	r2, #57	; 0x39
    a88e:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	FWVER0;			
    a890:	4b1a      	ldr	r3, [pc, #104]	; (a8fc <AppProtocolBrake+0x9d0>)
    a892:	2233      	movs	r2, #51	; 0x33
    a894:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10]= MONTHMSB;
    a896:	4b19      	ldr	r3, [pc, #100]	; (a8fc <AppProtocolBrake+0x9d0>)
    a898:	2230      	movs	r2, #48	; 0x30
    a89a:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = MONTHLSB;
    a89c:	4b17      	ldr	r3, [pc, #92]	; (a8fc <AppProtocolBrake+0x9d0>)
    a89e:	2232      	movs	r2, #50	; 0x32
    a8a0:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = DAYMSB;
    a8a2:	4b16      	ldr	r3, [pc, #88]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8a4:	2231      	movs	r2, #49	; 0x31
    a8a6:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = DAYLSB;						
    a8a8:	4b14      	ldr	r3, [pc, #80]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8aa:	2234      	movs	r2, #52	; 0x34
    a8ac:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = YEARMSB;
    a8ae:	4b13      	ldr	r3, [pc, #76]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8b0:	2232      	movs	r2, #50	; 0x32
    a8b2:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = YEARLSB;	
    a8b4:	4b11      	ldr	r3, [pc, #68]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8b6:	2231      	movs	r2, #49	; 0x31
    a8b8:	73da      	strb	r2, [r3, #15]
						checksum = AppProtocolChecksum(protocolBuffer,16);	
    a8ba:	1c3c      	adds	r4, r7, #0
    a8bc:	341f      	adds	r4, #31
    a8be:	4b0f      	ldr	r3, [pc, #60]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8c0:	1c18      	adds	r0, r3, #0
    a8c2:	2110      	movs	r1, #16
    a8c4:	4b0e      	ldr	r3, [pc, #56]	; (a900 <AppProtocolBrake+0x9d4>)
    a8c6:	4798      	blx	r3
    a8c8:	1c03      	adds	r3, r0, #0
    a8ca:	7023      	strb	r3, [r4, #0]
						protocolBuffer[16] = checksum; 					
    a8cc:	4b0b      	ldr	r3, [pc, #44]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8ce:	1c3a      	adds	r2, r7, #0
    a8d0:	321f      	adds	r2, #31
    a8d2:	7812      	ldrb	r2, [r2, #0]
    a8d4:	741a      	strb	r2, [r3, #16]
						protocolBuffer[17] = 0x04; 	
    a8d6:	4b09      	ldr	r3, [pc, #36]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8d8:	2204      	movs	r2, #4
    a8da:	745a      	strb	r2, [r3, #17]
						if (whichRadio == WHICHRADIO_LORA)
    a8dc:	4b09      	ldr	r3, [pc, #36]	; (a904 <AppProtocolBrake+0x9d8>)
    a8de:	781b      	ldrb	r3, [r3, #0]
    a8e0:	2b99      	cmp	r3, #153	; 0x99
    a8e2:	d105      	bne.n	a8f0 <AppProtocolBrake+0x9c4>
						{
							SX1272LoraTransmit(protocolBuffer,18);
    a8e4:	4b05      	ldr	r3, [pc, #20]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8e6:	1c18      	adds	r0, r3, #0
    a8e8:	2112      	movs	r1, #18
    a8ea:	4b07      	ldr	r3, [pc, #28]	; (a908 <AppProtocolBrake+0x9dc>)
    a8ec:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
						}					
						break;
    a8ee:	e2e5      	b.n	aebc <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,18);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
    a8f0:	4b02      	ldr	r3, [pc, #8]	; (a8fc <AppProtocolBrake+0x9d0>)
    a8f2:	1c18      	adds	r0, r3, #0
    a8f4:	2112      	movs	r1, #18
    a8f6:	4b05      	ldr	r3, [pc, #20]	; (a90c <AppProtocolBrake+0x9e0>)
    a8f8:	4798      	blx	r3
						}					
						break;
    a8fa:	e2df      	b.n	aebc <AppProtocolBrake+0xf90>
    a8fc:	20002f20 	.word	0x20002f20
    a900:	00009ead 	.word	0x00009ead
    a904:	200036d2 	.word	0x200036d2
    a908:	0001115d 	.word	0x0001115d
    a90c:	00010331 	.word	0x00010331
    a910:	20002f18 	.word	0x20002f18
    a914:	20002ef8 	.word	0x20002ef8
    a918:	20002f1e 	.word	0x20002f1e
    a91c:	20002f1a 	.word	0x20002f1a
    a920:	20002f14 	.word	0x20002f14
    a924:	20002fb8 	.word	0x20002fb8
    a928:	200004d9 	.word	0x200004d9
    a92c:	2000306e 	.word	0x2000306e
					}									
					case MSG_STATUS:
					{
 							//---------BS
						remoteVersionToReport[0] = buffers[10];
    a930:	687b      	ldr	r3, [r7, #4]
    a932:	7a9a      	ldrb	r2, [r3, #10]
    a934:	4be9      	ldr	r3, [pc, #932]	; (acdc <AppProtocolBrake+0xdb0>)
    a936:	701a      	strb	r2, [r3, #0]
						remoteVersionToReport[1] = buffers[11];
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	7ada      	ldrb	r2, [r3, #11]
    a93c:	4be7      	ldr	r3, [pc, #924]	; (acdc <AppProtocolBrake+0xdb0>)
    a93e:	705a      	strb	r2, [r3, #1]
						remoteVersionToReport[2] = buffers[12];
    a940:	687b      	ldr	r3, [r7, #4]
    a942:	7b1a      	ldrb	r2, [r3, #12]
    a944:	4be5      	ldr	r3, [pc, #916]	; (acdc <AppProtocolBrake+0xdb0>)
    a946:	709a      	strb	r2, [r3, #2]
						remoteVersionToReport[3] = buffers[13];
    a948:	687b      	ldr	r3, [r7, #4]
    a94a:	7b5a      	ldrb	r2, [r3, #13]
    a94c:	4be3      	ldr	r3, [pc, #908]	; (acdc <AppProtocolBrake+0xdb0>)
    a94e:	70da      	strb	r2, [r3, #3]
					
						//--------------------------------------
						protocolBuffer[0] = '#';
    a950:	4be3      	ldr	r3, [pc, #908]	; (ace0 <AppProtocolBrake+0xdb4>)
    a952:	2223      	movs	r2, #35	; 0x23
    a954:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a956:	4be3      	ldr	r3, [pc, #908]	; (ace4 <AppProtocolBrake+0xdb8>)
    a958:	7bda      	ldrb	r2, [r3, #15]
    a95a:	4be1      	ldr	r3, [pc, #900]	; (ace0 <AppProtocolBrake+0xdb4>)
    a95c:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a95e:	4be1      	ldr	r3, [pc, #900]	; (ace4 <AppProtocolBrake+0xdb8>)
    a960:	7c1a      	ldrb	r2, [r3, #16]
    a962:	4bdf      	ldr	r3, [pc, #892]	; (ace0 <AppProtocolBrake+0xdb4>)
    a964:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'B';
    a966:	4bde      	ldr	r3, [pc, #888]	; (ace0 <AppProtocolBrake+0xdb4>)
    a968:	2242      	movs	r2, #66	; 0x42
    a96a:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    a96c:	4bdc      	ldr	r3, [pc, #880]	; (ace0 <AppProtocolBrake+0xdb4>)
    a96e:	224d      	movs	r2, #77	; 0x4d
    a970:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 22;
    a972:	4bdb      	ldr	r3, [pc, #876]	; (ace0 <AppProtocolBrake+0xdb4>)
    a974:	2216      	movs	r2, #22
    a976:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = statusData.TireRadio;
    a978:	4bdb      	ldr	r3, [pc, #876]	; (ace8 <AppProtocolBrake+0xdbc>)
    a97a:	781a      	ldrb	r2, [r3, #0]
    a97c:	4bd8      	ldr	r3, [pc, #864]	; (ace0 <AppProtocolBrake+0xdb4>)
    a97e:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = statusData.ExtRadio;
    a980:	4bd9      	ldr	r3, [pc, #868]	; (ace8 <AppProtocolBrake+0xdbc>)
    a982:	785a      	ldrb	r2, [r3, #1]
    a984:	4bd6      	ldr	r3, [pc, #856]	; (ace0 <AppProtocolBrake+0xdb4>)
    a986:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = statusData.EEPROM;;
    a988:	4bd7      	ldr	r3, [pc, #860]	; (ace8 <AppProtocolBrake+0xdbc>)
    a98a:	789a      	ldrb	r2, [r3, #2]
    a98c:	4bd4      	ldr	r3, [pc, #848]	; (ace0 <AppProtocolBrake+0xdb4>)
    a98e:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	statusData.Accelerometer;	
    a990:	4bd5      	ldr	r3, [pc, #852]	; (ace8 <AppProtocolBrake+0xdbc>)
    a992:	78da      	ldrb	r2, [r3, #3]
    a994:	4bd2      	ldr	r3, [pc, #840]	; (ace0 <AppProtocolBrake+0xdb4>)
    a996:	725a      	strb	r2, [r3, #9]
						//---------------V01_20 placing FSR in Voltage Input
						itemp  = 	ADCGetReading(ADC_INPUT_FSR);
    a998:	1c3c      	adds	r4, r7, #0
    a99a:	342e      	adds	r4, #46	; 0x2e
    a99c:	2002      	movs	r0, #2
    a99e:	4bd3      	ldr	r3, [pc, #844]	; (acec <AppProtocolBrake+0xdc0>)
    a9a0:	4798      	blx	r3
    a9a2:	1c03      	adds	r3, r0, #0
    a9a4:	8023      	strh	r3, [r4, #0]
						itemp2 = itemp & 0x00ff;
    a9a6:	1c3b      	adds	r3, r7, #0
    a9a8:	332c      	adds	r3, #44	; 0x2c
    a9aa:	1c3a      	adds	r2, r7, #0
    a9ac:	322e      	adds	r2, #46	; 0x2e
    a9ae:	8811      	ldrh	r1, [r2, #0]
    a9b0:	22ff      	movs	r2, #255	; 0xff
    a9b2:	400a      	ands	r2, r1
    a9b4:	801a      	strh	r2, [r3, #0]
						brakeStatus.VoltageInput = itemp2; 
    a9b6:	1c3b      	adds	r3, r7, #0
    a9b8:	332c      	adds	r3, #44	; 0x2c
    a9ba:	881b      	ldrh	r3, [r3, #0]
    a9bc:	b2da      	uxtb	r2, r3
    a9be:	4bcc      	ldr	r3, [pc, #816]	; (acf0 <AppProtocolBrake+0xdc4>)
    a9c0:	701a      	strb	r2, [r3, #0]
						//---------------V01_20 placing FSR in Voltage Input
						itemp  = 	ADCGetReading(ADC_INPUT_FSR);
    a9c2:	1c3c      	adds	r4, r7, #0
    a9c4:	342e      	adds	r4, #46	; 0x2e
    a9c6:	2002      	movs	r0, #2
    a9c8:	4bc8      	ldr	r3, [pc, #800]	; (acec <AppProtocolBrake+0xdc0>)
    a9ca:	4798      	blx	r3
    a9cc:	1c03      	adds	r3, r0, #0
    a9ce:	8023      	strh	r3, [r4, #0]
						itemp2 = itemp>>8;
    a9d0:	1c3b      	adds	r3, r7, #0
    a9d2:	332c      	adds	r3, #44	; 0x2c
    a9d4:	1c3a      	adds	r2, r7, #0
    a9d6:	322e      	adds	r2, #46	; 0x2e
    a9d8:	8812      	ldrh	r2, [r2, #0]
    a9da:	0a12      	lsrs	r2, r2, #8
    a9dc:	801a      	strh	r2, [r3, #0]
						brakeStatus.VoltageSupercap = itemp2;						
    a9de:	1c3b      	adds	r3, r7, #0
    a9e0:	332c      	adds	r3, #44	; 0x2c
    a9e2:	881b      	ldrh	r3, [r3, #0]
    a9e4:	b2da      	uxtb	r2, r3
    a9e6:	4bc2      	ldr	r3, [pc, #776]	; (acf0 <AppProtocolBrake+0xdc4>)
    a9e8:	705a      	strb	r2, [r3, #1]
						protocolBuffer[10] = brakeStatus.VoltageInput;
    a9ea:	4bc1      	ldr	r3, [pc, #772]	; (acf0 <AppProtocolBrake+0xdc4>)
    a9ec:	781a      	ldrb	r2, [r3, #0]
    a9ee:	4bbc      	ldr	r3, [pc, #752]	; (ace0 <AppProtocolBrake+0xdb4>)
    a9f0:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = brakeStatus.AccelerometerStatus;
    a9f2:	4bbf      	ldr	r3, [pc, #764]	; (acf0 <AppProtocolBrake+0xdc4>)
    a9f4:	78da      	ldrb	r2, [r3, #3]
    a9f6:	4bba      	ldr	r3, [pc, #744]	; (ace0 <AppProtocolBrake+0xdb4>)
    a9f8:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = brakeStatus.ActuatorStatus;;
    a9fa:	4bbd      	ldr	r3, [pc, #756]	; (acf0 <AppProtocolBrake+0xdc4>)
    a9fc:	789a      	ldrb	r2, [r3, #2]
    a9fe:	4bb8      	ldr	r3, [pc, #736]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa00:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = brakeStatus.BrakeState;	
    aa02:	4bbb      	ldr	r3, [pc, #748]	; (acf0 <AppProtocolBrake+0xdc4>)
    aa04:	791a      	ldrb	r2, [r3, #4]
    aa06:	4bb6      	ldr	r3, [pc, #728]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa08:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = brakeStatus.VoltageSupercap; 	
    aa0a:	4bb9      	ldr	r3, [pc, #740]	; (acf0 <AppProtocolBrake+0xdc4>)
    aa0c:	785a      	ldrb	r2, [r3, #1]
    aa0e:	4bb4      	ldr	r3, [pc, #720]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa10:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = brakeState; 		
    aa12:	4bb8      	ldr	r3, [pc, #736]	; (acf4 <AppProtocolBrake+0xdc8>)
    aa14:	781a      	ldrb	r2, [r3, #0]
    aa16:	4bb2      	ldr	r3, [pc, #712]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa18:	73da      	strb	r2, [r3, #15]
						protocolBuffer[16] = 0x00; 	
    aa1a:	4bb1      	ldr	r3, [pc, #708]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa1c:	2200      	movs	r2, #0
    aa1e:	741a      	strb	r2, [r3, #16]
						if (switchToFSK ==TRUE)
    aa20:	4bb5      	ldr	r3, [pc, #724]	; (acf8 <AppProtocolBrake+0xdcc>)
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	2b01      	cmp	r3, #1
    aa26:	d102      	bne.n	aa2e <AppProtocolBrake+0xb02>
						{
							protocolBuffer[16] = 0x55; 
    aa28:	4bad      	ldr	r3, [pc, #692]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa2a:	2255      	movs	r2, #85	; 0x55
    aa2c:	741a      	strb	r2, [r3, #16]
						}
						ltemp = gPrime;
    aa2e:	1c3b      	adds	r3, r7, #0
    aa30:	3316      	adds	r3, #22
    aa32:	4ab2      	ldr	r2, [pc, #712]	; (acfc <AppProtocolBrake+0xdd0>)
    aa34:	8812      	ldrh	r2, [r2, #0]
    aa36:	801a      	strh	r2, [r3, #0]
						ltemp = ltemp>>8;
    aa38:	1c3b      	adds	r3, r7, #0
    aa3a:	3316      	adds	r3, #22
    aa3c:	1c3a      	adds	r2, r7, #0
    aa3e:	3216      	adds	r2, #22
    aa40:	8812      	ldrh	r2, [r2, #0]
    aa42:	0a12      	lsrs	r2, r2, #8
    aa44:	801a      	strh	r2, [r3, #0]
						protocolBuffer[17] = ltemp; 
    aa46:	1c3b      	adds	r3, r7, #0
    aa48:	3316      	adds	r3, #22
    aa4a:	881b      	ldrh	r3, [r3, #0]
    aa4c:	b2da      	uxtb	r2, r3
    aa4e:	4ba4      	ldr	r3, [pc, #656]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa50:	745a      	strb	r2, [r3, #17]
						ltemp = gPrime & 0x00ff;	
    aa52:	4baa      	ldr	r3, [pc, #680]	; (acfc <AppProtocolBrake+0xdd0>)
    aa54:	8819      	ldrh	r1, [r3, #0]
    aa56:	1c3b      	adds	r3, r7, #0
    aa58:	3316      	adds	r3, #22
    aa5a:	22ff      	movs	r2, #255	; 0xff
    aa5c:	400a      	ands	r2, r1
    aa5e:	801a      	strh	r2, [r3, #0]
						protocolBuffer[18] = ltemp; 	
    aa60:	1c3b      	adds	r3, r7, #0
    aa62:	3316      	adds	r3, #22
    aa64:	881b      	ldrh	r3, [r3, #0]
    aa66:	b2da      	uxtb	r2, r3
    aa68:	4b9d      	ldr	r3, [pc, #628]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa6a:	749a      	strb	r2, [r3, #18]
						protocolBuffer[19] = 0x00; 	
    aa6c:	4b9c      	ldr	r3, [pc, #624]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa6e:	2200      	movs	r2, #0
    aa70:	74da      	strb	r2, [r3, #19]
 					
						checksum = AppProtocolChecksum(protocolBuffer,20);	
    aa72:	1c3c      	adds	r4, r7, #0
    aa74:	341f      	adds	r4, #31
    aa76:	4b9a      	ldr	r3, [pc, #616]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa78:	1c18      	adds	r0, r3, #0
    aa7a:	2114      	movs	r1, #20
    aa7c:	4ba0      	ldr	r3, [pc, #640]	; (ad00 <AppProtocolBrake+0xdd4>)
    aa7e:	4798      	blx	r3
    aa80:	1c03      	adds	r3, r0, #0
    aa82:	7023      	strb	r3, [r4, #0]
						protocolBuffer[20] = checksum; 																			
    aa84:	4b96      	ldr	r3, [pc, #600]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa86:	1c3a      	adds	r2, r7, #0
    aa88:	321f      	adds	r2, #31
    aa8a:	7812      	ldrb	r2, [r2, #0]
    aa8c:	751a      	strb	r2, [r3, #20]
						protocolBuffer[21] = 0x04; 	
    aa8e:	4b94      	ldr	r3, [pc, #592]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa90:	2204      	movs	r2, #4
    aa92:	755a      	strb	r2, [r3, #21]
						if (whichRadio == WHICHRADIO_LORA)
    aa94:	4b9b      	ldr	r3, [pc, #620]	; (ad04 <AppProtocolBrake+0xdd8>)
    aa96:	781b      	ldrb	r3, [r3, #0]
    aa98:	2b99      	cmp	r3, #153	; 0x99
    aa9a:	d105      	bne.n	aaa8 <AppProtocolBrake+0xb7c>
						{
							SX1272LoraTransmit(protocolBuffer,22);
    aa9c:	4b90      	ldr	r3, [pc, #576]	; (ace0 <AppProtocolBrake+0xdb4>)
    aa9e:	1c18      	adds	r0, r3, #0
    aaa0:	2116      	movs	r1, #22
    aaa2:	4b99      	ldr	r3, [pc, #612]	; (ad08 <AppProtocolBrake+0xddc>)
    aaa4:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
						}		
						break;
    aaa6:	e209      	b.n	aebc <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,22);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
    aaa8:	4b8d      	ldr	r3, [pc, #564]	; (ace0 <AppProtocolBrake+0xdb4>)
    aaaa:	1c18      	adds	r0, r3, #0
    aaac:	2116      	movs	r1, #22
    aaae:	4b97      	ldr	r3, [pc, #604]	; (ad0c <AppProtocolBrake+0xde0>)
    aab0:	4798      	blx	r3
						}		
						break;
    aab2:	e203      	b.n	aebc <AppProtocolBrake+0xf90>
					}						
					case 0x5245:
					{
						//---------RE
						protocolBuffer[0] = '#';
    aab4:	4b8a      	ldr	r3, [pc, #552]	; (ace0 <AppProtocolBrake+0xdb4>)
    aab6:	2223      	movs	r2, #35	; 0x23
    aab8:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    aaba:	4b8a      	ldr	r3, [pc, #552]	; (ace4 <AppProtocolBrake+0xdb8>)
    aabc:	7bda      	ldrb	r2, [r3, #15]
    aabe:	4b88      	ldr	r3, [pc, #544]	; (ace0 <AppProtocolBrake+0xdb4>)
    aac0:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    aac2:	4b88      	ldr	r3, [pc, #544]	; (ace4 <AppProtocolBrake+0xdb8>)
    aac4:	7c1a      	ldrb	r2, [r3, #16]
    aac6:	4b86      	ldr	r3, [pc, #536]	; (ace0 <AppProtocolBrake+0xdb4>)
    aac8:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    aaca:	4b85      	ldr	r3, [pc, #532]	; (ace0 <AppProtocolBrake+0xdb4>)
    aacc:	2252      	movs	r2, #82	; 0x52
    aace:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'E';
    aad0:	4b83      	ldr	r3, [pc, #524]	; (ace0 <AppProtocolBrake+0xdb4>)
    aad2:	2245      	movs	r2, #69	; 0x45
    aad4:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    aad6:	4b82      	ldr	r3, [pc, #520]	; (ace0 <AppProtocolBrake+0xdb4>)
    aad8:	220e      	movs	r2, #14
    aada:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = table0.Item.EepromManDevSerial[0];
    aadc:	4b81      	ldr	r3, [pc, #516]	; (ace4 <AppProtocolBrake+0xdb8>)
    aade:	7ada      	ldrb	r2, [r3, #11]
    aae0:	4b7f      	ldr	r3, [pc, #508]	; (ace0 <AppProtocolBrake+0xdb4>)
    aae2:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = table0.Item.EepromManDevSerial[1];
    aae4:	4b7f      	ldr	r3, [pc, #508]	; (ace4 <AppProtocolBrake+0xdb8>)
    aae6:	7b1a      	ldrb	r2, [r3, #12]
    aae8:	4b7d      	ldr	r3, [pc, #500]	; (ace0 <AppProtocolBrake+0xdb4>)
    aaea:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = table0.Item.EepromManDevSerial[2];;
    aaec:	4b7d      	ldr	r3, [pc, #500]	; (ace4 <AppProtocolBrake+0xdb8>)
    aaee:	7b5a      	ldrb	r2, [r3, #13]
    aaf0:	4b7b      	ldr	r3, [pc, #492]	; (ace0 <AppProtocolBrake+0xdb4>)
    aaf2:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	table0.Item.EepromManDevSerial[3];;				
    aaf4:	4b7b      	ldr	r3, [pc, #492]	; (ace4 <AppProtocolBrake+0xdb8>)
    aaf6:	7b9a      	ldrb	r2, [r3, #14]
    aaf8:	4b79      	ldr	r3, [pc, #484]	; (ace0 <AppProtocolBrake+0xdb4>)
    aafa:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10] = table0.Item.EepromManDevSerial[4];
    aafc:	4b79      	ldr	r3, [pc, #484]	; (ace4 <AppProtocolBrake+0xdb8>)
    aafe:	7bda      	ldrb	r2, [r3, #15]
    ab00:	4b77      	ldr	r3, [pc, #476]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab02:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = table0.Item.EepromManDevSerial[5];		
    ab04:	4b77      	ldr	r3, [pc, #476]	; (ace4 <AppProtocolBrake+0xdb8>)
    ab06:	7c1a      	ldrb	r2, [r3, #16]
    ab08:	4b75      	ldr	r3, [pc, #468]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab0a:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    ab0c:	1c3c      	adds	r4, r7, #0
    ab0e:	341f      	adds	r4, #31
    ab10:	4b73      	ldr	r3, [pc, #460]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab12:	1c18      	adds	r0, r3, #0
    ab14:	210c      	movs	r1, #12
    ab16:	4b7a      	ldr	r3, [pc, #488]	; (ad00 <AppProtocolBrake+0xdd4>)
    ab18:	4798      	blx	r3
    ab1a:	1c03      	adds	r3, r0, #0
    ab1c:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 				
    ab1e:	4b70      	ldr	r3, [pc, #448]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab20:	1c3a      	adds	r2, r7, #0
    ab22:	321f      	adds	r2, #31
    ab24:	7812      	ldrb	r2, [r2, #0]
    ab26:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 		
    ab28:	4b6d      	ldr	r3, [pc, #436]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab2a:	2204      	movs	r2, #4
    ab2c:	735a      	strb	r2, [r3, #13]
						if (whichRadio == WHICHRADIO_LORA)
    ab2e:	4b75      	ldr	r3, [pc, #468]	; (ad04 <AppProtocolBrake+0xdd8>)
    ab30:	781b      	ldrb	r3, [r3, #0]
    ab32:	2b99      	cmp	r3, #153	; 0x99
    ab34:	d105      	bne.n	ab42 <AppProtocolBrake+0xc16>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    ab36:	4b6a      	ldr	r3, [pc, #424]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab38:	1c18      	adds	r0, r3, #0
    ab3a:	210e      	movs	r1, #14
    ab3c:	4b72      	ldr	r3, [pc, #456]	; (ad08 <AppProtocolBrake+0xddc>)
    ab3e:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}											
						break;
    ab40:	e1bc      	b.n	aebc <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    ab42:	4b67      	ldr	r3, [pc, #412]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab44:	1c18      	adds	r0, r3, #0
    ab46:	210e      	movs	r1, #14
    ab48:	4b70      	ldr	r3, [pc, #448]	; (ad0c <AppProtocolBrake+0xde0>)
    ab4a:	4798      	blx	r3
						}											
						break;
    ab4c:	e1b6      	b.n	aebc <AppProtocolBrake+0xf90>
					}
					case 0x5241:
					{
						//---------RA
						AccelProvideReading(&x,&y,&z); 
    ab4e:	1c39      	adds	r1, r7, #0
    ab50:	3112      	adds	r1, #18
    ab52:	1c3a      	adds	r2, r7, #0
    ab54:	3210      	adds	r2, #16
    ab56:	1c3b      	adds	r3, r7, #0
    ab58:	330e      	adds	r3, #14
    ab5a:	1c08      	adds	r0, r1, #0
    ab5c:	1c11      	adds	r1, r2, #0
    ab5e:	1c1a      	adds	r2, r3, #0
    ab60:	4b6b      	ldr	r3, [pc, #428]	; (ad10 <AppProtocolBrake+0xde4>)
    ab62:	4798      	blx	r3
						protocolBuffer[0] = '#';
    ab64:	4b5e      	ldr	r3, [pc, #376]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab66:	2223      	movs	r2, #35	; 0x23
    ab68:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    ab6a:	4b5e      	ldr	r3, [pc, #376]	; (ace4 <AppProtocolBrake+0xdb8>)
    ab6c:	7bda      	ldrb	r2, [r3, #15]
    ab6e:	4b5c      	ldr	r3, [pc, #368]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab70:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    ab72:	4b5c      	ldr	r3, [pc, #368]	; (ace4 <AppProtocolBrake+0xdb8>)
    ab74:	7c1a      	ldrb	r2, [r3, #16]
    ab76:	4b5a      	ldr	r3, [pc, #360]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab78:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    ab7a:	4b59      	ldr	r3, [pc, #356]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab7c:	2252      	movs	r2, #82	; 0x52
    ab7e:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'A';
    ab80:	4b57      	ldr	r3, [pc, #348]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab82:	2241      	movs	r2, #65	; 0x41
    ab84:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    ab86:	4b56      	ldr	r3, [pc, #344]	; (ace0 <AppProtocolBrake+0xdb4>)
    ab88:	220e      	movs	r2, #14
    ab8a:	715a      	strb	r2, [r3, #5]
						itemp = x>>8;
    ab8c:	1c3b      	adds	r3, r7, #0
    ab8e:	3312      	adds	r3, #18
    ab90:	881a      	ldrh	r2, [r3, #0]
    ab92:	1c3b      	adds	r3, r7, #0
    ab94:	332e      	adds	r3, #46	; 0x2e
    ab96:	0a12      	lsrs	r2, r2, #8
    ab98:	801a      	strh	r2, [r3, #0]
						itemp2 = x & 0x00ff;
    ab9a:	1c3b      	adds	r3, r7, #0
    ab9c:	3312      	adds	r3, #18
    ab9e:	8819      	ldrh	r1, [r3, #0]
    aba0:	1c3b      	adds	r3, r7, #0
    aba2:	332c      	adds	r3, #44	; 0x2c
    aba4:	22ff      	movs	r2, #255	; 0xff
    aba6:	400a      	ands	r2, r1
    aba8:	801a      	strh	r2, [r3, #0]
						protocolBuffer[6] = itemp;
    abaa:	1c3b      	adds	r3, r7, #0
    abac:	332e      	adds	r3, #46	; 0x2e
    abae:	881b      	ldrh	r3, [r3, #0]
    abb0:	b2da      	uxtb	r2, r3
    abb2:	4b4b      	ldr	r3, [pc, #300]	; (ace0 <AppProtocolBrake+0xdb4>)
    abb4:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = itemp2;
    abb6:	1c3b      	adds	r3, r7, #0
    abb8:	332c      	adds	r3, #44	; 0x2c
    abba:	881b      	ldrh	r3, [r3, #0]
    abbc:	b2da      	uxtb	r2, r3
    abbe:	4b48      	ldr	r3, [pc, #288]	; (ace0 <AppProtocolBrake+0xdb4>)
    abc0:	71da      	strb	r2, [r3, #7]
						itemp = y>>8;
    abc2:	1c3b      	adds	r3, r7, #0
    abc4:	3310      	adds	r3, #16
    abc6:	881a      	ldrh	r2, [r3, #0]
    abc8:	1c3b      	adds	r3, r7, #0
    abca:	332e      	adds	r3, #46	; 0x2e
    abcc:	0a12      	lsrs	r2, r2, #8
    abce:	801a      	strh	r2, [r3, #0]
						itemp2 = y & 0x00ff;				
    abd0:	1c3b      	adds	r3, r7, #0
    abd2:	3310      	adds	r3, #16
    abd4:	8819      	ldrh	r1, [r3, #0]
    abd6:	1c3b      	adds	r3, r7, #0
    abd8:	332c      	adds	r3, #44	; 0x2c
    abda:	22ff      	movs	r2, #255	; 0xff
    abdc:	400a      	ands	r2, r1
    abde:	801a      	strh	r2, [r3, #0]
						protocolBuffer[8] = itemp;
    abe0:	1c3b      	adds	r3, r7, #0
    abe2:	332e      	adds	r3, #46	; 0x2e
    abe4:	881b      	ldrh	r3, [r3, #0]
    abe6:	b2da      	uxtb	r2, r3
    abe8:	4b3d      	ldr	r3, [pc, #244]	; (ace0 <AppProtocolBrake+0xdb4>)
    abea:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	itemp2;		
    abec:	1c3b      	adds	r3, r7, #0
    abee:	332c      	adds	r3, #44	; 0x2c
    abf0:	881b      	ldrh	r3, [r3, #0]
    abf2:	b2da      	uxtb	r2, r3
    abf4:	4b3a      	ldr	r3, [pc, #232]	; (ace0 <AppProtocolBrake+0xdb4>)
    abf6:	725a      	strb	r2, [r3, #9]
						itemp = z>>8;
    abf8:	1c3b      	adds	r3, r7, #0
    abfa:	330e      	adds	r3, #14
    abfc:	881a      	ldrh	r2, [r3, #0]
    abfe:	1c3b      	adds	r3, r7, #0
    ac00:	332e      	adds	r3, #46	; 0x2e
    ac02:	0a12      	lsrs	r2, r2, #8
    ac04:	801a      	strh	r2, [r3, #0]
						itemp2 = z & 0x00ff;		
    ac06:	1c3b      	adds	r3, r7, #0
    ac08:	330e      	adds	r3, #14
    ac0a:	8819      	ldrh	r1, [r3, #0]
    ac0c:	1c3b      	adds	r3, r7, #0
    ac0e:	332c      	adds	r3, #44	; 0x2c
    ac10:	22ff      	movs	r2, #255	; 0xff
    ac12:	400a      	ands	r2, r1
    ac14:	801a      	strh	r2, [r3, #0]
						protocolBuffer[10] = itemp;
    ac16:	1c3b      	adds	r3, r7, #0
    ac18:	332e      	adds	r3, #46	; 0x2e
    ac1a:	881b      	ldrh	r3, [r3, #0]
    ac1c:	b2da      	uxtb	r2, r3
    ac1e:	4b30      	ldr	r3, [pc, #192]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac20:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = itemp2;	
    ac22:	1c3b      	adds	r3, r7, #0
    ac24:	332c      	adds	r3, #44	; 0x2c
    ac26:	881b      	ldrh	r3, [r3, #0]
    ac28:	b2da      	uxtb	r2, r3
    ac2a:	4b2d      	ldr	r3, [pc, #180]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac2c:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    ac2e:	1c3c      	adds	r4, r7, #0
    ac30:	341f      	adds	r4, #31
    ac32:	4b2b      	ldr	r3, [pc, #172]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac34:	1c18      	adds	r0, r3, #0
    ac36:	210c      	movs	r1, #12
    ac38:	4b31      	ldr	r3, [pc, #196]	; (ad00 <AppProtocolBrake+0xdd4>)
    ac3a:	4798      	blx	r3
    ac3c:	1c03      	adds	r3, r0, #0
    ac3e:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 			
    ac40:	4b27      	ldr	r3, [pc, #156]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac42:	1c3a      	adds	r2, r7, #0
    ac44:	321f      	adds	r2, #31
    ac46:	7812      	ldrb	r2, [r2, #0]
    ac48:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 	
    ac4a:	4b25      	ldr	r3, [pc, #148]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac4c:	2204      	movs	r2, #4
    ac4e:	735a      	strb	r2, [r3, #13]
	 	
						if (whichRadio == WHICHRADIO_LORA)
    ac50:	4b2c      	ldr	r3, [pc, #176]	; (ad04 <AppProtocolBrake+0xdd8>)
    ac52:	781b      	ldrb	r3, [r3, #0]
    ac54:	2b99      	cmp	r3, #153	; 0x99
    ac56:	d105      	bne.n	ac64 <AppProtocolBrake+0xd38>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    ac58:	4b21      	ldr	r3, [pc, #132]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac5a:	1c18      	adds	r0, r3, #0
    ac5c:	210e      	movs	r1, #14
    ac5e:	4b2a      	ldr	r3, [pc, #168]	; (ad08 <AppProtocolBrake+0xddc>)
    ac60:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}								
						break;
    ac62:	e12b      	b.n	aebc <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    ac64:	4b1e      	ldr	r3, [pc, #120]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac66:	1c18      	adds	r0, r3, #0
    ac68:	210e      	movs	r1, #14
    ac6a:	4b28      	ldr	r3, [pc, #160]	; (ad0c <AppProtocolBrake+0xde0>)
    ac6c:	4798      	blx	r3
						}								
						break;
    ac6e:	e125      	b.n	aebc <AppProtocolBrake+0xf90>
					}			
					case 0x5254:
					{
						//---------RT
						if (buffers[7]<4)
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	3307      	adds	r3, #7
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	2b03      	cmp	r3, #3
    ac78:	d900      	bls.n	ac7c <AppProtocolBrake+0xd50>
    ac7a:	e0e6      	b.n	ae4a <AppProtocolBrake+0xf1e>
						{
							protocolBuffer[0] = '#';
    ac7c:	4b18      	ldr	r3, [pc, #96]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac7e:	2223      	movs	r2, #35	; 0x23
    ac80:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    ac82:	4b18      	ldr	r3, [pc, #96]	; (ace4 <AppProtocolBrake+0xdb8>)
    ac84:	7bda      	ldrb	r2, [r3, #15]
    ac86:	4b16      	ldr	r3, [pc, #88]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac88:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    ac8a:	4b16      	ldr	r3, [pc, #88]	; (ace4 <AppProtocolBrake+0xdb8>)
    ac8c:	7c1a      	ldrb	r2, [r3, #16]
    ac8e:	4b14      	ldr	r3, [pc, #80]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac90:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    ac92:	4b13      	ldr	r3, [pc, #76]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac94:	2252      	movs	r2, #82	; 0x52
    ac96:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    ac98:	4b11      	ldr	r3, [pc, #68]	; (ace0 <AppProtocolBrake+0xdb4>)
    ac9a:	2254      	movs	r2, #84	; 0x54
    ac9c:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] =  33;
    ac9e:	4b10      	ldr	r3, [pc, #64]	; (ace0 <AppProtocolBrake+0xdb4>)
    aca0:	2221      	movs	r2, #33	; 0x21
    aca2:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[7];	
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	79da      	ldrb	r2, [r3, #7]
    aca8:	4b0d      	ldr	r3, [pc, #52]	; (ace0 <AppProtocolBrake+0xdb4>)
    acaa:	719a      	strb	r2, [r3, #6]
					 
							offset = buffers[7]*3; 
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	3307      	adds	r3, #7
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	1c39      	adds	r1, r7, #0
    acb4:	3115      	adds	r1, #21
    acb6:	1c1a      	adds	r2, r3, #0
    acb8:	1892      	adds	r2, r2, r2
    acba:	18d3      	adds	r3, r2, r3
    acbc:	700b      	strb	r3, [r1, #0]
							protocolBuffer[7] = sensorDynamic[offset].Change;
    acbe:	1c3b      	adds	r3, r7, #0
    acc0:	3315      	adds	r3, #21
    acc2:	781b      	ldrb	r3, [r3, #0]
    acc4:	4a13      	ldr	r2, [pc, #76]	; (ad14 <AppProtocolBrake+0xde8>)
    acc6:	011b      	lsls	r3, r3, #4
    acc8:	18d3      	adds	r3, r2, r3
    acca:	791a      	ldrb	r2, [r3, #4]
    accc:	4b04      	ldr	r3, [pc, #16]	; (ace0 <AppProtocolBrake+0xdb4>)
    acce:	71da      	strb	r2, [r3, #7]
							for (i=0;i<7;i++)
    acd0:	1c3b      	adds	r3, r7, #0
    acd2:	3337      	adds	r3, #55	; 0x37
    acd4:	2200      	movs	r2, #0
    acd6:	701a      	strb	r2, [r3, #0]
    acd8:	e036      	b.n	ad48 <AppProtocolBrake+0xe1c>
    acda:	46c0      	nop			; (mov r8, r8)
    acdc:	20002efc 	.word	0x20002efc
    ace0:	20002f20 	.word	0x20002f20
    ace4:	20002fb8 	.word	0x20002fb8
    ace8:	200036cc 	.word	0x200036cc
    acec:	0000b4b5 	.word	0x0000b4b5
    acf0:	20003694 	.word	0x20003694
    acf4:	20002ebf 	.word	0x20002ebf
    acf8:	200004ba 	.word	0x200004ba
    acfc:	20002ee6 	.word	0x20002ee6
    ad00:	00009ead 	.word	0x00009ead
    ad04:	200036d2 	.word	0x200036d2
    ad08:	0001115d 	.word	0x0001115d
    ad0c:	00010331 	.word	0x00010331
    ad10:	00005cfd 	.word	0x00005cfd
    ad14:	200033b4 	.word	0x200033b4
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
    ad18:	1c3b      	adds	r3, r7, #0
    ad1a:	3337      	adds	r3, #55	; 0x37
    ad1c:	781b      	ldrb	r3, [r3, #0]
    ad1e:	3308      	adds	r3, #8
    ad20:	1c3a      	adds	r2, r7, #0
    ad22:	3215      	adds	r2, #21
    ad24:	7810      	ldrb	r0, [r2, #0]
    ad26:	1c3a      	adds	r2, r7, #0
    ad28:	3237      	adds	r2, #55	; 0x37
    ad2a:	7812      	ldrb	r2, [r2, #0]
    ad2c:	4965      	ldr	r1, [pc, #404]	; (aec4 <AppProtocolBrake+0xf98>)
    ad2e:	0100      	lsls	r0, r0, #4
    ad30:	1882      	adds	r2, r0, r2
    ad32:	188a      	adds	r2, r1, r2
    ad34:	7951      	ldrb	r1, [r2, #5]
    ad36:	4a64      	ldr	r2, [pc, #400]	; (aec8 <AppProtocolBrake+0xf9c>)
    ad38:	54d1      	strb	r1, [r2, r3]
							protocolBuffer[5] =  33;
							protocolBuffer[6] = buffers[7];	
					 
							offset = buffers[7]*3; 
							protocolBuffer[7] = sensorDynamic[offset].Change;
							for (i=0;i<7;i++)
    ad3a:	1c3b      	adds	r3, r7, #0
    ad3c:	3337      	adds	r3, #55	; 0x37
    ad3e:	781a      	ldrb	r2, [r3, #0]
    ad40:	1c3b      	adds	r3, r7, #0
    ad42:	3337      	adds	r3, #55	; 0x37
    ad44:	3201      	adds	r2, #1
    ad46:	701a      	strb	r2, [r3, #0]
    ad48:	1c3b      	adds	r3, r7, #0
    ad4a:	3337      	adds	r3, #55	; 0x37
    ad4c:	781b      	ldrb	r3, [r3, #0]
    ad4e:	2b06      	cmp	r3, #6
    ad50:	d9e2      	bls.n	ad18 <AppProtocolBrake+0xdec>
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
    ad52:	1c3b      	adds	r3, r7, #0
    ad54:	3315      	adds	r3, #21
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	3301      	adds	r3, #1
    ad5a:	4a5a      	ldr	r2, [pc, #360]	; (aec4 <AppProtocolBrake+0xf98>)
    ad5c:	011b      	lsls	r3, r3, #4
    ad5e:	18d3      	adds	r3, r2, r3
    ad60:	791a      	ldrb	r2, [r3, #4]
    ad62:	4b59      	ldr	r3, [pc, #356]	; (aec8 <AppProtocolBrake+0xf9c>)
    ad64:	73da      	strb	r2, [r3, #15]
							for (i=0;i<7;i++)
    ad66:	1c3b      	adds	r3, r7, #0
    ad68:	3337      	adds	r3, #55	; 0x37
    ad6a:	2200      	movs	r2, #0
    ad6c:	701a      	strb	r2, [r3, #0]
    ad6e:	e018      	b.n	ada2 <AppProtocolBrake+0xe76>
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
    ad70:	1c3b      	adds	r3, r7, #0
    ad72:	3337      	adds	r3, #55	; 0x37
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	3310      	adds	r3, #16
    ad78:	1c3a      	adds	r2, r7, #0
    ad7a:	3215      	adds	r2, #21
    ad7c:	7812      	ldrb	r2, [r2, #0]
    ad7e:	1c50      	adds	r0, r2, #1
    ad80:	1c3a      	adds	r2, r7, #0
    ad82:	3237      	adds	r2, #55	; 0x37
    ad84:	7812      	ldrb	r2, [r2, #0]
    ad86:	494f      	ldr	r1, [pc, #316]	; (aec4 <AppProtocolBrake+0xf98>)
    ad88:	0100      	lsls	r0, r0, #4
    ad8a:	1882      	adds	r2, r0, r2
    ad8c:	188a      	adds	r2, r1, r2
    ad8e:	7951      	ldrb	r1, [r2, #5]
    ad90:	4a4d      	ldr	r2, [pc, #308]	; (aec8 <AppProtocolBrake+0xf9c>)
    ad92:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
							for (i=0;i<7;i++)
    ad94:	1c3b      	adds	r3, r7, #0
    ad96:	3337      	adds	r3, #55	; 0x37
    ad98:	781a      	ldrb	r2, [r3, #0]
    ad9a:	1c3b      	adds	r3, r7, #0
    ad9c:	3337      	adds	r3, #55	; 0x37
    ad9e:	3201      	adds	r2, #1
    ada0:	701a      	strb	r2, [r3, #0]
    ada2:	1c3b      	adds	r3, r7, #0
    ada4:	3337      	adds	r3, #55	; 0x37
    ada6:	781b      	ldrb	r3, [r3, #0]
    ada8:	2b06      	cmp	r3, #6
    adaa:	d9e1      	bls.n	ad70 <AppProtocolBrake+0xe44>
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
    adac:	1c3b      	adds	r3, r7, #0
    adae:	3315      	adds	r3, #21
    adb0:	781b      	ldrb	r3, [r3, #0]
    adb2:	3302      	adds	r3, #2
    adb4:	4a43      	ldr	r2, [pc, #268]	; (aec4 <AppProtocolBrake+0xf98>)
    adb6:	011b      	lsls	r3, r3, #4
    adb8:	18d3      	adds	r3, r2, r3
    adba:	791a      	ldrb	r2, [r3, #4]
    adbc:	4b42      	ldr	r3, [pc, #264]	; (aec8 <AppProtocolBrake+0xf9c>)
    adbe:	75da      	strb	r2, [r3, #23]
							for (i=0;i<7;i++)
    adc0:	1c3b      	adds	r3, r7, #0
    adc2:	3337      	adds	r3, #55	; 0x37
    adc4:	2200      	movs	r2, #0
    adc6:	701a      	strb	r2, [r3, #0]
    adc8:	e018      	b.n	adfc <AppProtocolBrake+0xed0>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
    adca:	1c3b      	adds	r3, r7, #0
    adcc:	3337      	adds	r3, #55	; 0x37
    adce:	781b      	ldrb	r3, [r3, #0]
    add0:	3318      	adds	r3, #24
    add2:	1c3a      	adds	r2, r7, #0
    add4:	3215      	adds	r2, #21
    add6:	7812      	ldrb	r2, [r2, #0]
    add8:	1c90      	adds	r0, r2, #2
    adda:	1c3a      	adds	r2, r7, #0
    addc:	3237      	adds	r2, #55	; 0x37
    adde:	7812      	ldrb	r2, [r2, #0]
    ade0:	4938      	ldr	r1, [pc, #224]	; (aec4 <AppProtocolBrake+0xf98>)
    ade2:	0100      	lsls	r0, r0, #4
    ade4:	1882      	adds	r2, r0, r2
    ade6:	188a      	adds	r2, r1, r2
    ade8:	7951      	ldrb	r1, [r2, #5]
    adea:	4a37      	ldr	r2, [pc, #220]	; (aec8 <AppProtocolBrake+0xf9c>)
    adec:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
							for (i=0;i<7;i++)
    adee:	1c3b      	adds	r3, r7, #0
    adf0:	3337      	adds	r3, #55	; 0x37
    adf2:	781a      	ldrb	r2, [r3, #0]
    adf4:	1c3b      	adds	r3, r7, #0
    adf6:	3337      	adds	r3, #55	; 0x37
    adf8:	3201      	adds	r2, #1
    adfa:	701a      	strb	r2, [r3, #0]
    adfc:	1c3b      	adds	r3, r7, #0
    adfe:	3337      	adds	r3, #55	; 0x37
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	2b06      	cmp	r3, #6
    ae04:	d9e1      	bls.n	adca <AppProtocolBrake+0xe9e>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
							}	
							checksum = AppProtocolChecksum(protocolBuffer,31);	
    ae06:	1c3c      	adds	r4, r7, #0
    ae08:	341f      	adds	r4, #31
    ae0a:	4b2f      	ldr	r3, [pc, #188]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae0c:	1c18      	adds	r0, r3, #0
    ae0e:	211f      	movs	r1, #31
    ae10:	4b2e      	ldr	r3, [pc, #184]	; (aecc <AppProtocolBrake+0xfa0>)
    ae12:	4798      	blx	r3
    ae14:	1c03      	adds	r3, r0, #0
    ae16:	7023      	strb	r3, [r4, #0]
							protocolBuffer[31] = checksum; 			
    ae18:	4b2b      	ldr	r3, [pc, #172]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae1a:	1c3a      	adds	r2, r7, #0
    ae1c:	321f      	adds	r2, #31
    ae1e:	7812      	ldrb	r2, [r2, #0]
    ae20:	77da      	strb	r2, [r3, #31]
							protocolBuffer[32] = 0x04; 																	
    ae22:	4a29      	ldr	r2, [pc, #164]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae24:	2320      	movs	r3, #32
    ae26:	2104      	movs	r1, #4
    ae28:	54d1      	strb	r1, [r2, r3]
											
							if (whichRadio == WHICHRADIO_LORA)
    ae2a:	4b29      	ldr	r3, [pc, #164]	; (aed0 <AppProtocolBrake+0xfa4>)
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	2b99      	cmp	r3, #153	; 0x99
    ae30:	d105      	bne.n	ae3e <AppProtocolBrake+0xf12>
							{
								SX1272LoraTransmit(protocolBuffer,33);
    ae32:	4b25      	ldr	r3, [pc, #148]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae34:	1c18      	adds	r0, r3, #0
    ae36:	2121      	movs	r1, #33	; 0x21
    ae38:	4b26      	ldr	r3, [pc, #152]	; (aed4 <AppProtocolBrake+0xfa8>)
    ae3a:	4798      	blx	r3
    ae3c:	e03d      	b.n	aeba <AppProtocolBrake+0xf8e>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,33);
    ae3e:	4b22      	ldr	r3, [pc, #136]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae40:	1c18      	adds	r0, r3, #0
    ae42:	2121      	movs	r1, #33	; 0x21
    ae44:	4b24      	ldr	r3, [pc, #144]	; (aed8 <AppProtocolBrake+0xfac>)
    ae46:	4798      	blx	r3
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
							}											
						}
						break;
    ae48:	e038      	b.n	aebc <AppProtocolBrake+0xf90>
								SX1272FskTransmit(protocolBuffer,33);
							}								
						}
						else
						{
							protocolBuffer[0] = '#';
    ae4a:	4b1f      	ldr	r3, [pc, #124]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae4c:	2223      	movs	r2, #35	; 0x23
    ae4e:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    ae50:	4b22      	ldr	r3, [pc, #136]	; (aedc <AppProtocolBrake+0xfb0>)
    ae52:	7bda      	ldrb	r2, [r3, #15]
    ae54:	4b1c      	ldr	r3, [pc, #112]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae56:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    ae58:	4b20      	ldr	r3, [pc, #128]	; (aedc <AppProtocolBrake+0xfb0>)
    ae5a:	7c1a      	ldrb	r2, [r3, #16]
    ae5c:	4b1a      	ldr	r3, [pc, #104]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae5e:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    ae60:	4b19      	ldr	r3, [pc, #100]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae62:	2252      	movs	r2, #82	; 0x52
    ae64:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    ae66:	4b18      	ldr	r3, [pc, #96]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae68:	2254      	movs	r2, #84	; 0x54
    ae6a:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] = 9;
    ae6c:	4b16      	ldr	r3, [pc, #88]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae6e:	2209      	movs	r2, #9
    ae70:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[6];
    ae72:	687b      	ldr	r3, [r7, #4]
    ae74:	799a      	ldrb	r2, [r3, #6]
    ae76:	4b14      	ldr	r3, [pc, #80]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae78:	719a      	strb	r2, [r3, #6]
							checksum = AppProtocolChecksum(protocolBuffer,7);	
    ae7a:	1c3c      	adds	r4, r7, #0
    ae7c:	341f      	adds	r4, #31
    ae7e:	4b12      	ldr	r3, [pc, #72]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae80:	1c18      	adds	r0, r3, #0
    ae82:	2107      	movs	r1, #7
    ae84:	4b11      	ldr	r3, [pc, #68]	; (aecc <AppProtocolBrake+0xfa0>)
    ae86:	4798      	blx	r3
    ae88:	1c03      	adds	r3, r0, #0
    ae8a:	7023      	strb	r3, [r4, #0]
							protocolBuffer[7] = checksum; 			
    ae8c:	4b0e      	ldr	r3, [pc, #56]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae8e:	1c3a      	adds	r2, r7, #0
    ae90:	321f      	adds	r2, #31
    ae92:	7812      	ldrb	r2, [r2, #0]
    ae94:	71da      	strb	r2, [r3, #7]
							protocolBuffer[8] = 0x04; 		
    ae96:	4b0c      	ldr	r3, [pc, #48]	; (aec8 <AppProtocolBrake+0xf9c>)
    ae98:	2204      	movs	r2, #4
    ae9a:	721a      	strb	r2, [r3, #8]
							if (whichRadio == WHICHRADIO_LORA)
    ae9c:	4b0c      	ldr	r3, [pc, #48]	; (aed0 <AppProtocolBrake+0xfa4>)
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	2b99      	cmp	r3, #153	; 0x99
    aea2:	d105      	bne.n	aeb0 <AppProtocolBrake+0xf84>
							{
								SX1272LoraTransmit(protocolBuffer,9);
    aea4:	4b08      	ldr	r3, [pc, #32]	; (aec8 <AppProtocolBrake+0xf9c>)
    aea6:	1c18      	adds	r0, r3, #0
    aea8:	2109      	movs	r1, #9
    aeaa:	4b0a      	ldr	r3, [pc, #40]	; (aed4 <AppProtocolBrake+0xfa8>)
    aeac:	4798      	blx	r3
    aeae:	e004      	b.n	aeba <AppProtocolBrake+0xf8e>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
    aeb0:	4b05      	ldr	r3, [pc, #20]	; (aec8 <AppProtocolBrake+0xf9c>)
    aeb2:	1c18      	adds	r0, r3, #0
    aeb4:	2109      	movs	r1, #9
    aeb6:	4b08      	ldr	r3, [pc, #32]	; (aed8 <AppProtocolBrake+0xfac>)
    aeb8:	4798      	blx	r3
							}											
						}
						break;
    aeba:	46c0      	nop			; (mov r8, r8)
			
				}		
			}
		}
	}
}
    aebc:	46bd      	mov	sp, r7
    aebe:	b00f      	add	sp, #60	; 0x3c
    aec0:	bd90      	pop	{r4, r7, pc}
    aec2:	46c0      	nop			; (mov r8, r8)
    aec4:	200033b4 	.word	0x200033b4
    aec8:	20002f20 	.word	0x20002f20
    aecc:	00009ead 	.word	0x00009ead
    aed0:	200036d2 	.word	0x200036d2
    aed4:	0001115d 	.word	0x0001115d
    aed8:	00010331 	.word	0x00010331
    aedc:	20002fb8 	.word	0x20002fb8

0000aee0 <SendOneMessage>:
#endif	

void SendOneMessage()
{
    aee0:	b590      	push	{r4, r7, lr}
    aee2:	b083      	sub	sp, #12
    aee4:	af00      	add	r7, sp, #0
 
		//-------------------
		// address field set to ffff
		// since in pairing mode.
		//-------------------
		buffer[0] = '#';
    aee6:	4b19      	ldr	r3, [pc, #100]	; (af4c <SendOneMessage+0x6c>)
    aee8:	2223      	movs	r2, #35	; 0x23
    aeea:	701a      	strb	r2, [r3, #0]
		buffer[1] = 0xff;
    aeec:	4b17      	ldr	r3, [pc, #92]	; (af4c <SendOneMessage+0x6c>)
    aeee:	22ff      	movs	r2, #255	; 0xff
    aef0:	705a      	strb	r2, [r3, #1]
		buffer[2] = 0xff;
    aef2:	4b16      	ldr	r3, [pc, #88]	; (af4c <SendOneMessage+0x6c>)
    aef4:	22ff      	movs	r2, #255	; 0xff
    aef6:	709a      	strb	r2, [r3, #2]
		buffer[3] = 'T';
    aef8:	4b14      	ldr	r3, [pc, #80]	; (af4c <SendOneMessage+0x6c>)
    aefa:	2254      	movs	r2, #84	; 0x54
    aefc:	70da      	strb	r2, [r3, #3]
		buffer[4] = 'T';
    aefe:	4b13      	ldr	r3, [pc, #76]	; (af4c <SendOneMessage+0x6c>)
    af00:	2254      	movs	r2, #84	; 0x54
    af02:	711a      	strb	r2, [r3, #4]
		buffer[5] = 8;
    af04:	4b11      	ldr	r3, [pc, #68]	; (af4c <SendOneMessage+0x6c>)
    af06:	2208      	movs	r2, #8
    af08:	715a      	strb	r2, [r3, #5]
		checksum = AppProtocolChecksum(buffer,6);
    af0a:	1dfc      	adds	r4, r7, #7
    af0c:	4b0f      	ldr	r3, [pc, #60]	; (af4c <SendOneMessage+0x6c>)
    af0e:	1c18      	adds	r0, r3, #0
    af10:	2106      	movs	r1, #6
    af12:	4b0f      	ldr	r3, [pc, #60]	; (af50 <SendOneMessage+0x70>)
    af14:	4798      	blx	r3
    af16:	1c03      	adds	r3, r0, #0
    af18:	7023      	strb	r3, [r4, #0]
		buffer[6] = checksum;
    af1a:	4b0c      	ldr	r3, [pc, #48]	; (af4c <SendOneMessage+0x6c>)
    af1c:	1dfa      	adds	r2, r7, #7
    af1e:	7812      	ldrb	r2, [r2, #0]
    af20:	719a      	strb	r2, [r3, #6]
		buffer[7] = 0x04;
    af22:	4b0a      	ldr	r3, [pc, #40]	; (af4c <SendOneMessage+0x6c>)
    af24:	2204      	movs	r2, #4
    af26:	71da      	strb	r2, [r3, #7]
		if (whichRadio == WHICHRADIO_LORA)
    af28:	4b0a      	ldr	r3, [pc, #40]	; (af54 <SendOneMessage+0x74>)
    af2a:	781b      	ldrb	r3, [r3, #0]
    af2c:	2b99      	cmp	r3, #153	; 0x99
    af2e:	d105      	bne.n	af3c <SendOneMessage+0x5c>
		{
			SX1272LoraTransmit(buffer,8);
    af30:	4b06      	ldr	r3, [pc, #24]	; (af4c <SendOneMessage+0x6c>)
    af32:	1c18      	adds	r0, r3, #0
    af34:	2108      	movs	r1, #8
    af36:	4b08      	ldr	r3, [pc, #32]	; (af58 <SendOneMessage+0x78>)
    af38:	4798      	blx	r3
    af3a:	e004      	b.n	af46 <SendOneMessage+0x66>
		}
		else
		{
			SX1272FskTransmit(buffer,8);
    af3c:	4b03      	ldr	r3, [pc, #12]	; (af4c <SendOneMessage+0x6c>)
    af3e:	1c18      	adds	r0, r3, #0
    af40:	2108      	movs	r1, #8
    af42:	4b06      	ldr	r3, [pc, #24]	; (af5c <SendOneMessage+0x7c>)
    af44:	4798      	blx	r3
		}
 
}
    af46:	46bd      	mov	sp, r7
    af48:	b003      	add	sp, #12
    af4a:	bd90      	pop	{r4, r7, pc}
    af4c:	20002f00 	.word	0x20002f00
    af50:	00009ead 	.word	0x00009ead
    af54:	200036d2 	.word	0x200036d2
    af58:	0001115d 	.word	0x0001115d
    af5c:	00010331 	.word	0x00010331

0000af60 <ConfigInit>:
//------------------------------------------------------------------------------
// This function handles allows all the RAM copies of EEPROM values to be loaded 
// in.
//==============================================================================
void ConfigInit(void)
{
    af60:	b580      	push	{r7, lr}
    af62:	b086      	sub	sp, #24
    af64:	af00      	add	r7, sp, #0
  uint8_t testBuffer[10],value,n,eepromManDevSerial[6],i; 
  
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    af66:	1c3b      	adds	r3, r7, #0
    af68:	330c      	adds	r3, #12
    af6a:	1c18      	adds	r0, r3, #0
    af6c:	2102      	movs	r1, #2
    af6e:	220a      	movs	r2, #10
    af70:	4bdf      	ldr	r3, [pc, #892]	; (b2f0 <ConfigInit+0x390>)
    af72:	4798      	blx	r3
    af74:	1c03      	adds	r3, r0, #0
    af76:	2b00      	cmp	r3, #0
    af78:	d100      	bne.n	af7c <ConfigInit+0x1c>
    af7a:	e151      	b.n	b220 <ConfigInit+0x2c0>
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    af7c:	1c3b      	adds	r3, r7, #0
    af7e:	330c      	adds	r3, #12
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	2b43      	cmp	r3, #67	; 0x43
    af84:	d123      	bne.n	afce <ConfigInit+0x6e>
    af86:	1c3b      	adds	r3, r7, #0
    af88:	330c      	adds	r3, #12
    af8a:	785b      	ldrb	r3, [r3, #1]
    af8c:	2b52      	cmp	r3, #82	; 0x52
    af8e:	d11e      	bne.n	afce <ConfigInit+0x6e>
    af90:	1c3b      	adds	r3, r7, #0
    af92:	330c      	adds	r3, #12
    af94:	789b      	ldrb	r3, [r3, #2]
    af96:	2b45      	cmp	r3, #69	; 0x45
    af98:	d119      	bne.n	afce <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    af9a:	1c3b      	adds	r3, r7, #0
    af9c:	330c      	adds	r3, #12
    af9e:	78db      	ldrb	r3, [r3, #3]
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    afa0:	2b45      	cmp	r3, #69	; 0x45
    afa2:	d114      	bne.n	afce <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    afa4:	1c3b      	adds	r3, r7, #0
    afa6:	330c      	adds	r3, #12
    afa8:	791b      	ldrb	r3, [r3, #4]
    afaa:	2b44      	cmp	r3, #68	; 0x44
    afac:	d10f      	bne.n	afce <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    afae:	1c3b      	adds	r3, r7, #0
    afb0:	330c      	adds	r3, #12
    afb2:	799b      	ldrb	r3, [r3, #6]
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    afb4:	2b30      	cmp	r3, #48	; 0x30
    afb6:	d10a      	bne.n	afce <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    afb8:	1c3b      	adds	r3, r7, #0
    afba:	330c      	adds	r3, #12
    afbc:	7a1b      	ldrb	r3, [r3, #8]
    afbe:	2b30      	cmp	r3, #48	; 0x30
    afc0:	d105      	bne.n	afce <ConfigInit+0x6e>
		(testBuffer[9] == CONFIGDB_VER2))
    afc2:	1c3b      	adds	r3, r7, #0
    afc4:	330c      	adds	r3, #12
    afc6:	7a5b      	ldrb	r3, [r3, #9]
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    afc8:	2b36      	cmp	r3, #54	; 0x36
    afca:	d100      	bne.n	afce <ConfigInit+0x6e>
    afcc:	e103      	b.n	b1d6 <ConfigInit+0x276>
		 
	}
	else
	{
		//------------------------setup header and default values 
		testBuffer[0] = 'C';
    afce:	1c3b      	adds	r3, r7, #0
    afd0:	330c      	adds	r3, #12
    afd2:	2243      	movs	r2, #67	; 0x43
    afd4:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 'R';
    afd6:	1c3b      	adds	r3, r7, #0
    afd8:	330c      	adds	r3, #12
    afda:	2252      	movs	r2, #82	; 0x52
    afdc:	705a      	strb	r2, [r3, #1]
		testBuffer[2] = 'E';
    afde:	1c3b      	adds	r3, r7, #0
    afe0:	330c      	adds	r3, #12
    afe2:	2245      	movs	r2, #69	; 0x45
    afe4:	709a      	strb	r2, [r3, #2]
		testBuffer[3] = 'E';
    afe6:	1c3b      	adds	r3, r7, #0
    afe8:	330c      	adds	r3, #12
    afea:	2245      	movs	r2, #69	; 0x45
    afec:	70da      	strb	r2, [r3, #3]
		testBuffer[4] = 'D';
    afee:	1c3b      	adds	r3, r7, #0
    aff0:	330c      	adds	r3, #12
    aff2:	2244      	movs	r2, #68	; 0x44
    aff4:	711a      	strb	r2, [r3, #4]
		testBuffer[5] = 'V';
    aff6:	1c3b      	adds	r3, r7, #0
    aff8:	330c      	adds	r3, #12
    affa:	2256      	movs	r2, #86	; 0x56
    affc:	715a      	strb	r2, [r3, #5]
		testBuffer[6] = CONFIGDB_VER0;
    affe:	1c3b      	adds	r3, r7, #0
    b000:	330c      	adds	r3, #12
    b002:	2230      	movs	r2, #48	; 0x30
    b004:	719a      	strb	r2, [r3, #6]
		testBuffer[7] = '.';
    b006:	1c3b      	adds	r3, r7, #0
    b008:	330c      	adds	r3, #12
    b00a:	222e      	movs	r2, #46	; 0x2e
    b00c:	71da      	strb	r2, [r3, #7]
		testBuffer[8] = CONFIGDB_VER1;
    b00e:	1c3b      	adds	r3, r7, #0
    b010:	330c      	adds	r3, #12
    b012:	2230      	movs	r2, #48	; 0x30
    b014:	721a      	strb	r2, [r3, #8]
		testBuffer[9] = CONFIGDB_VER2; 					
    b016:	1c3b      	adds	r3, r7, #0
    b018:	330c      	adds	r3, #12
    b01a:	2236      	movs	r2, #54	; 0x36
    b01c:	725a      	strb	r2, [r3, #9]
		for (n=0;n<10;n++)
    b01e:	1c3b      	adds	r3, r7, #0
    b020:	3317      	adds	r3, #23
    b022:	2200      	movs	r2, #0
    b024:	701a      	strb	r2, [r3, #0]
    b026:	e016      	b.n	b056 <ConfigInit+0xf6>
		{
			if (I2CEEPROMBufferWrite(&testBuffer[n],TableHeader1_Setting+n,1)!= 0)
    b028:	1c3b      	adds	r3, r7, #0
    b02a:	3317      	adds	r3, #23
    b02c:	781b      	ldrb	r3, [r3, #0]
    b02e:	1c3a      	adds	r2, r7, #0
    b030:	320c      	adds	r2, #12
    b032:	18d2      	adds	r2, r2, r3
    b034:	1c3b      	adds	r3, r7, #0
    b036:	3317      	adds	r3, #23
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	3302      	adds	r3, #2
    b03c:	b2db      	uxtb	r3, r3
    b03e:	1c10      	adds	r0, r2, #0
    b040:	1c19      	adds	r1, r3, #0
    b042:	2201      	movs	r2, #1
    b044:	4bab      	ldr	r3, [pc, #684]	; (b2f4 <ConfigInit+0x394>)
    b046:	4798      	blx	r3
		testBuffer[5] = 'V';
		testBuffer[6] = CONFIGDB_VER0;
		testBuffer[7] = '.';
		testBuffer[8] = CONFIGDB_VER1;
		testBuffer[9] = CONFIGDB_VER2; 					
		for (n=0;n<10;n++)
    b048:	1c3b      	adds	r3, r7, #0
    b04a:	3317      	adds	r3, #23
    b04c:	781a      	ldrb	r2, [r3, #0]
    b04e:	1c3b      	adds	r3, r7, #0
    b050:	3317      	adds	r3, #23
    b052:	3201      	adds	r2, #1
    b054:	701a      	strb	r2, [r3, #0]
    b056:	1c3b      	adds	r3, r7, #0
    b058:	3317      	adds	r3, #23
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	2b09      	cmp	r3, #9
    b05e:	d9e3      	bls.n	b028 <ConfigInit+0xc8>
			}		
		}
		//----------------------------------------
		// place in defaults
		//---------------------------------------
		testBuffer[0] = 0x5A; 
    b060:	1c3b      	adds	r3, r7, #0
    b062:	330c      	adds	r3, #12
    b064:	225a      	movs	r2, #90	; 0x5a
    b066:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Key_Setting,1);
    b068:	1c3b      	adds	r3, r7, #0
    b06a:	330c      	adds	r3, #12
    b06c:	1c18      	adds	r0, r3, #0
    b06e:	2128      	movs	r1, #40	; 0x28
    b070:	2201      	movs	r2, #1
    b072:	4ba0      	ldr	r3, [pc, #640]	; (b2f4 <ConfigInit+0x394>)
    b074:	4798      	blx	r3
		testBuffer[0] = 0x01; 
    b076:	1c3b      	adds	r3, r7, #0
    b078:	330c      	adds	r3, #12
    b07a:	2201      	movs	r2, #1
    b07c:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Mode_Setting,1);
    b07e:	1c3b      	adds	r3, r7, #0
    b080:	330c      	adds	r3, #12
    b082:	1c18      	adds	r0, r3, #0
    b084:	2129      	movs	r1, #41	; 0x29
    b086:	2201      	movs	r2, #1
    b088:	4b9a      	ldr	r3, [pc, #616]	; (b2f4 <ConfigInit+0x394>)
    b08a:	4798      	blx	r3
		testBuffer[0] = 0x05; 
    b08c:	1c3b      	adds	r3, r7, #0
    b08e:	330c      	adds	r3, #12
    b090:	2205      	movs	r2, #5
    b092:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,MaxForce_Setting,1);		
    b094:	1c3b      	adds	r3, r7, #0
    b096:	330c      	adds	r3, #12
    b098:	1c18      	adds	r0, r3, #0
    b09a:	212a      	movs	r1, #42	; 0x2a
    b09c:	2201      	movs	r2, #1
    b09e:	4b95      	ldr	r3, [pc, #596]	; (b2f4 <ConfigInit+0x394>)
    b0a0:	4798      	blx	r3
		
		//------------run time counters
		testBuffer[0] = 0x00; 
    b0a2:	1c3b      	adds	r3, r7, #0
    b0a4:	330c      	adds	r3, #12
    b0a6:	2200      	movs	r2, #0
    b0a8:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_X_Setting,1);
    b0aa:	1c3b      	adds	r3, r7, #0
    b0ac:	330c      	adds	r3, #12
    b0ae:	1c18      	adds	r0, r3, #0
    b0b0:	212b      	movs	r1, #43	; 0x2b
    b0b2:	2201      	movs	r2, #1
    b0b4:	4b8f      	ldr	r3, [pc, #572]	; (b2f4 <ConfigInit+0x394>)
    b0b6:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b0b8:	1c3b      	adds	r3, r7, #0
    b0ba:	330c      	adds	r3, #12
    b0bc:	2200      	movs	r2, #0
    b0be:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_H_Setting,1);
    b0c0:	1c3b      	adds	r3, r7, #0
    b0c2:	330c      	adds	r3, #12
    b0c4:	1c18      	adds	r0, r3, #0
    b0c6:	212c      	movs	r1, #44	; 0x2c
    b0c8:	2201      	movs	r2, #1
    b0ca:	4b8a      	ldr	r3, [pc, #552]	; (b2f4 <ConfigInit+0x394>)
    b0cc:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b0ce:	1c3b      	adds	r3, r7, #0
    b0d0:	330c      	adds	r3, #12
    b0d2:	2200      	movs	r2, #0
    b0d4:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_M_Setting,1);	
    b0d6:	1c3b      	adds	r3, r7, #0
    b0d8:	330c      	adds	r3, #12
    b0da:	1c18      	adds	r0, r3, #0
    b0dc:	212d      	movs	r1, #45	; 0x2d
    b0de:	2201      	movs	r2, #1
    b0e0:	4b84      	ldr	r3, [pc, #528]	; (b2f4 <ConfigInit+0x394>)
    b0e2:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b0e4:	1c3b      	adds	r3, r7, #0
    b0e6:	330c      	adds	r3, #12
    b0e8:	2200      	movs	r2, #0
    b0ea:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_L_Setting,1);	 		 
    b0ec:	1c3b      	adds	r3, r7, #0
    b0ee:	330c      	adds	r3, #12
    b0f0:	1c18      	adds	r0, r3, #0
    b0f2:	212e      	movs	r1, #46	; 0x2e
    b0f4:	2201      	movs	r2, #1
    b0f6:	4b7f      	ldr	r3, [pc, #508]	; (b2f4 <ConfigInit+0x394>)
    b0f8:	4798      	blx	r3
		
		testBuffer[0] = 0x00;
    b0fa:	1c3b      	adds	r3, r7, #0
    b0fc:	330c      	adds	r3, #12
    b0fe:	2200      	movs	r2, #0
    b100:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressMSB,1);
    b102:	1c3b      	adds	r3, r7, #0
    b104:	330c      	adds	r3, #12
    b106:	1c18      	adds	r0, r3, #0
    b108:	2139      	movs	r1, #57	; 0x39
    b10a:	2201      	movs	r2, #1
    b10c:	4b79      	ldr	r3, [pc, #484]	; (b2f4 <ConfigInit+0x394>)
    b10e:	4798      	blx	r3
		testBuffer[0] = 0x00;
    b110:	1c3b      	adds	r3, r7, #0
    b112:	330c      	adds	r3, #12
    b114:	2200      	movs	r2, #0
    b116:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressLSB,1);		
    b118:	1c3b      	adds	r3, r7, #0
    b11a:	330c      	adds	r3, #12
    b11c:	1c18      	adds	r0, r3, #0
    b11e:	213a      	movs	r1, #58	; 0x3a
    b120:	2201      	movs	r2, #1
    b122:	4b74      	ldr	r3, [pc, #464]	; (b2f4 <ConfigInit+0x394>)
    b124:	4798      	blx	r3
		
		testBuffer[0] = 0x07;
    b126:	1c3b      	adds	r3, r7, #0
    b128:	330c      	adds	r3, #12
    b12a:	2207      	movs	r2, #7
    b12c:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ScreenColorSetting,1);
    b12e:	1c3b      	adds	r3, r7, #0
    b130:	330c      	adds	r3, #12
    b132:	1c18      	adds	r0, r3, #0
    b134:	213b      	movs	r1, #59	; 0x3b
    b136:	2201      	movs	r2, #1
    b138:	4b6e      	ldr	r3, [pc, #440]	; (b2f4 <ConfigInit+0x394>)
    b13a:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b13c:	1c3b      	adds	r3, r7, #0
    b13e:	330c      	adds	r3, #12
    b140:	2200      	movs	r2, #0
    b142:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,BackLightOnSetting,1);		
    b144:	1c3b      	adds	r3, r7, #0
    b146:	330c      	adds	r3, #12
    b148:	1c18      	adds	r0, r3, #0
    b14a:	213c      	movs	r1, #60	; 0x3c
    b14c:	2201      	movs	r2, #1
    b14e:	4b69      	ldr	r3, [pc, #420]	; (b2f4 <ConfigInit+0x394>)
    b150:	4798      	blx	r3
		testBuffer[0] = TRUE;
    b152:	1c3b      	adds	r3, r7, #0
    b154:	330c      	adds	r3, #12
    b156:	2201      	movs	r2, #1
    b158:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TempFarenheitOnSetting,1);		
    b15a:	1c3b      	adds	r3, r7, #0
    b15c:	330c      	adds	r3, #12
    b15e:	1c18      	adds	r0, r3, #0
    b160:	213d      	movs	r1, #61	; 0x3d
    b162:	2201      	movs	r2, #1
    b164:	4b63      	ldr	r3, [pc, #396]	; (b2f4 <ConfigInit+0x394>)
    b166:	4798      	blx	r3

		testBuffer[0] = 0x07;
    b168:	1c3b      	adds	r3, r7, #0
    b16a:	330c      	adds	r3, #12
    b16c:	2207      	movs	r2, #7
    b16e:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ForceMaxSetting,1);
    b170:	1c3b      	adds	r3, r7, #0
    b172:	330c      	adds	r3, #12
    b174:	1c18      	adds	r0, r3, #0
    b176:	213e      	movs	r1, #62	; 0x3e
    b178:	2201      	movs	r2, #1
    b17a:	4b5e      	ldr	r3, [pc, #376]	; (b2f4 <ConfigInit+0x394>)
    b17c:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b17e:	1c3b      	adds	r3, r7, #0
    b180:	330c      	adds	r3, #12
    b182:	2200      	movs	r2, #0
    b184:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,HybridSetting,1);		
    b186:	1c3b      	adds	r3, r7, #0
    b188:	330c      	adds	r3, #12
    b18a:	1c18      	adds	r0, r3, #0
    b18c:	2141      	movs	r1, #65	; 0x41
    b18e:	2201      	movs	r2, #1
    b190:	4b58      	ldr	r3, [pc, #352]	; (b2f4 <ConfigInit+0x394>)
    b192:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b194:	1c3b      	adds	r3, r7, #0
    b196:	330c      	adds	r3, #12
    b198:	2200      	movs	r2, #0
    b19a:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ActiveBrakeEnableSetting,1);
    b19c:	1c3b      	adds	r3, r7, #0
    b19e:	330c      	adds	r3, #12
    b1a0:	1c18      	adds	r0, r3, #0
    b1a2:	213f      	movs	r1, #63	; 0x3f
    b1a4:	2201      	movs	r2, #1
    b1a6:	4b53      	ldr	r3, [pc, #332]	; (b2f4 <ConfigInit+0x394>)
    b1a8:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b1aa:	1c3b      	adds	r3, r7, #0
    b1ac:	330c      	adds	r3, #12
    b1ae:	2200      	movs	r2, #0
    b1b0:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TPMSEnableSetting,1);		
    b1b2:	1c3b      	adds	r3, r7, #0
    b1b4:	330c      	adds	r3, #12
    b1b6:	1c18      	adds	r0, r3, #0
    b1b8:	2140      	movs	r1, #64	; 0x40
    b1ba:	2201      	movs	r2, #1
    b1bc:	4b4d      	ldr	r3, [pc, #308]	; (b2f4 <ConfigInit+0x394>)
    b1be:	4798      	blx	r3
		testBuffer[0] = 0x00;
    b1c0:	1c3b      	adds	r3, r7, #0
    b1c2:	330c      	adds	r3, #12
    b1c4:	2200      	movs	r2, #0
    b1c6:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
    b1c8:	1c3b      	adds	r3, r7, #0
    b1ca:	330c      	adds	r3, #12
    b1cc:	1c18      	adds	r0, r3, #0
    b1ce:	2143      	movs	r1, #67	; 0x43
    b1d0:	2201      	movs	r2, #1
    b1d2:	4b48      	ldr	r3, [pc, #288]	; (b2f4 <ConfigInit+0x394>)
    b1d4:	4798      	blx	r3
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    b1d6:	1c3b      	adds	r3, r7, #0
    b1d8:	3317      	adds	r3, #23
    b1da:	2200      	movs	r2, #0
    b1dc:	701a      	strb	r2, [r3, #0]
    b1de:	e01a      	b.n	b216 <ConfigInit+0x2b6>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
    b1e0:	1c3b      	adds	r3, r7, #0
    b1e2:	3317      	adds	r3, #23
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	3328      	adds	r3, #40	; 0x28
    b1e8:	b2db      	uxtb	r3, r3
    b1ea:	1c3a      	adds	r2, r7, #0
    b1ec:	320b      	adds	r2, #11
    b1ee:	1c10      	adds	r0, r2, #0
    b1f0:	1c19      	adds	r1, r3, #0
    b1f2:	2201      	movs	r2, #1
    b1f4:	4b3e      	ldr	r3, [pc, #248]	; (b2f0 <ConfigInit+0x390>)
    b1f6:	4798      	blx	r3
		table0.Index[n] = value;   
    b1f8:	1c3b      	adds	r3, r7, #0
    b1fa:	3317      	adds	r3, #23
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	1c3a      	adds	r2, r7, #0
    b200:	320b      	adds	r2, #11
    b202:	7811      	ldrb	r1, [r2, #0]
    b204:	4a3c      	ldr	r2, [pc, #240]	; (b2f8 <ConfigInit+0x398>)
    b206:	54d1      	strb	r1, [r2, r3]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    b208:	1c3b      	adds	r3, r7, #0
    b20a:	3317      	adds	r3, #23
    b20c:	781a      	ldrb	r2, [r3, #0]
    b20e:	1c3b      	adds	r3, r7, #0
    b210:	3317      	adds	r3, #23
    b212:	3201      	adds	r2, #1
    b214:	701a      	strb	r2, [r3, #0]
    b216:	1c3b      	adds	r3, r7, #0
    b218:	3317      	adds	r3, #23
    b21a:	781b      	ldrb	r3, [r3, #0]
    b21c:	2b1b      	cmp	r3, #27
    b21e:	d9df      	bls.n	b1e0 <ConfigInit+0x280>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    b220:	1c3b      	adds	r3, r7, #0
    b222:	3317      	adds	r3, #23
    b224:	2200      	movs	r2, #0
    b226:	701a      	strb	r2, [r3, #0]
    b228:	e00c      	b.n	b244 <ConfigInit+0x2e4>
	{
		eepromManDevSerial[n] = 0; 
    b22a:	1c3b      	adds	r3, r7, #0
    b22c:	3317      	adds	r3, #23
    b22e:	781b      	ldrb	r3, [r3, #0]
    b230:	1d3a      	adds	r2, r7, #4
    b232:	2100      	movs	r1, #0
    b234:	54d1      	strb	r1, [r2, r3]
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    b236:	1c3b      	adds	r3, r7, #0
    b238:	3317      	adds	r3, #23
    b23a:	781a      	ldrb	r2, [r3, #0]
    b23c:	1c3b      	adds	r3, r7, #0
    b23e:	3317      	adds	r3, #23
    b240:	3201      	adds	r2, #1
    b242:	701a      	strb	r2, [r3, #0]
    b244:	1c3b      	adds	r3, r7, #0
    b246:	3317      	adds	r3, #23
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	2b05      	cmp	r3, #5
    b24c:	d9ed      	bls.n	b22a <ConfigInit+0x2ca>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    b24e:	1d3b      	adds	r3, r7, #4
    b250:	1c18      	adds	r0, r3, #0
    b252:	21fa      	movs	r1, #250	; 0xfa
    b254:	2206      	movs	r2, #6
    b256:	4b26      	ldr	r3, [pc, #152]	; (b2f0 <ConfigInit+0x390>)
    b258:	4798      	blx	r3
    b25a:	1c03      	adds	r3, r0, #0
    b25c:	2b00      	cmp	r3, #0
    b25e:	d020      	beq.n	b2a2 <ConfigInit+0x342>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    b260:	2003      	movs	r0, #3
    b262:	2101      	movs	r1, #1
    b264:	2201      	movs	r2, #1
    b266:	4b25      	ldr	r3, [pc, #148]	; (b2fc <ConfigInit+0x39c>)
    b268:	4798      	blx	r3
		for (n=0;n<6;n++)
    b26a:	1c3b      	adds	r3, r7, #0
    b26c:	3317      	adds	r3, #23
    b26e:	2200      	movs	r2, #0
    b270:	701a      	strb	r2, [r3, #0]
    b272:	e011      	b.n	b298 <ConfigInit+0x338>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    b274:	1c3b      	adds	r3, r7, #0
    b276:	3317      	adds	r3, #23
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	1c3a      	adds	r2, r7, #0
    b27c:	3217      	adds	r2, #23
    b27e:	7812      	ldrb	r2, [r2, #0]
    b280:	1d39      	adds	r1, r7, #4
    b282:	5c8a      	ldrb	r2, [r1, r2]
    b284:	491c      	ldr	r1, [pc, #112]	; (b2f8 <ConfigInit+0x398>)
    b286:	18cb      	adds	r3, r1, r3
    b288:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    b28a:	1c3b      	adds	r3, r7, #0
    b28c:	3317      	adds	r3, #23
    b28e:	781a      	ldrb	r2, [r3, #0]
    b290:	1c3b      	adds	r3, r7, #0
    b292:	3317      	adds	r3, #23
    b294:	3201      	adds	r2, #1
    b296:	701a      	strb	r2, [r3, #0]
    b298:	1c3b      	adds	r3, r7, #0
    b29a:	3317      	adds	r3, #23
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	2b05      	cmp	r3, #5
    b2a0:	d9e8      	bls.n	b274 <ConfigInit+0x314>
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    b2a2:	1c3b      	adds	r3, r7, #0
    b2a4:	3316      	adds	r3, #22
    b2a6:	2200      	movs	r2, #0
    b2a8:	701a      	strb	r2, [r3, #0]
    b2aa:	e018      	b.n	b2de <ConfigInit+0x37e>
	{
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
    b2ac:	1c3b      	adds	r3, r7, #0
    b2ae:	3316      	adds	r3, #22
    b2b0:	781b      	ldrb	r3, [r3, #0]
    b2b2:	009a      	lsls	r2, r3, #2
    b2b4:	4b12      	ldr	r3, [pc, #72]	; (b300 <ConfigInit+0x3a0>)
    b2b6:	18d2      	adds	r2, r2, r3
    b2b8:	1c3b      	adds	r3, r7, #0
    b2ba:	3316      	adds	r3, #22
    b2bc:	781b      	ldrb	r3, [r3, #0]
    b2be:	3314      	adds	r3, #20
    b2c0:	b2db      	uxtb	r3, r3
    b2c2:	009b      	lsls	r3, r3, #2
    b2c4:	b2db      	uxtb	r3, r3
    b2c6:	1c10      	adds	r0, r2, #0
    b2c8:	1c19      	adds	r1, r3, #0
    b2ca:	2204      	movs	r2, #4
    b2cc:	4b08      	ldr	r3, [pc, #32]	; (b2f0 <ConfigInit+0x390>)
    b2ce:	4798      	blx	r3
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    b2d0:	1c3b      	adds	r3, r7, #0
    b2d2:	3316      	adds	r3, #22
    b2d4:	781a      	ldrb	r2, [r3, #0]
    b2d6:	1c3b      	adds	r3, r7, #0
    b2d8:	3316      	adds	r3, #22
    b2da:	3201      	adds	r2, #1
    b2dc:	701a      	strb	r2, [r3, #0]
    b2de:	1c3b      	adds	r3, r7, #0
    b2e0:	3316      	adds	r3, #22
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	2b0b      	cmp	r3, #11
    b2e6:	d9e1      	bls.n	b2ac <ConfigInit+0x34c>
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
		{ 
	  
		}
	}
}
    b2e8:	46bd      	mov	sp, r7
    b2ea:	b006      	add	sp, #24
    b2ec:	bd80      	pop	{r7, pc}
    b2ee:	46c0      	nop			; (mov r8, r8)
    b2f0:	0000c625 	.word	0x0000c625
    b2f4:	0000c7a5 	.word	0x0000c7a5
    b2f8:	20002fb8 	.word	0x20002fb8
    b2fc:	0000f635 	.word	0x0000f635
    b300:	20002fd8 	.word	0x20002fd8

0000b304 <ConfigUpdate>:

void ConfigUpdate(uint8_t value,uint8_t settingAddress)
{
    b304:	b580      	push	{r7, lr}
    b306:	b082      	sub	sp, #8
    b308:	af00      	add	r7, sp, #0
    b30a:	1c0a      	adds	r2, r1, #0
    b30c:	1dfb      	adds	r3, r7, #7
    b30e:	1c01      	adds	r1, r0, #0
    b310:	7019      	strb	r1, [r3, #0]
    b312:	1dbb      	adds	r3, r7, #6
    b314:	701a      	strb	r2, [r3, #0]
	I2CEEPROMBufferWrite(&value,settingAddress,1);	 
    b316:	1dfa      	adds	r2, r7, #7
    b318:	1dbb      	adds	r3, r7, #6
    b31a:	781b      	ldrb	r3, [r3, #0]
    b31c:	1c10      	adds	r0, r2, #0
    b31e:	1c19      	adds	r1, r3, #0
    b320:	2201      	movs	r2, #1
    b322:	4b02      	ldr	r3, [pc, #8]	; (b32c <ConfigUpdate+0x28>)
    b324:	4798      	blx	r3
}
    b326:	46bd      	mov	sp, r7
    b328:	b002      	add	sp, #8
    b32a:	bd80      	pop	{r7, pc}
    b32c:	0000c7a5 	.word	0x0000c7a5

0000b330 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    b330:	b580      	push	{r7, lr}
    b332:	b082      	sub	sp, #8
    b334:	af00      	add	r7, sp, #0
    b336:	1c02      	adds	r2, r0, #0
    b338:	1dfb      	adds	r3, r7, #7
    b33a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b33c:	4b06      	ldr	r3, [pc, #24]	; (b358 <system_interrupt_enable+0x28>)
    b33e:	1dfa      	adds	r2, r7, #7
    b340:	7812      	ldrb	r2, [r2, #0]
    b342:	1c11      	adds	r1, r2, #0
    b344:	221f      	movs	r2, #31
    b346:	400a      	ands	r2, r1
    b348:	2101      	movs	r1, #1
    b34a:	1c08      	adds	r0, r1, #0
    b34c:	4090      	lsls	r0, r2
    b34e:	1c02      	adds	r2, r0, #0
    b350:	601a      	str	r2, [r3, #0]
}
    b352:	46bd      	mov	sp, r7
    b354:	b002      	add	sp, #8
    b356:	bd80      	pop	{r7, pc}
    b358:	e000e100 	.word	0xe000e100

0000b35c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    b35c:	b580      	push	{r7, lr}
    b35e:	b084      	sub	sp, #16
    b360:	af00      	add	r7, sp, #0
    b362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	681b      	ldr	r3, [r3, #0]
    b368:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b36a:	68fb      	ldr	r3, [r7, #12]
    b36c:	7e5b      	ldrb	r3, [r3, #25]
    b36e:	b2db      	uxtb	r3, r3
    b370:	b2db      	uxtb	r3, r3
    b372:	b25b      	sxtb	r3, r3
    b374:	2b00      	cmp	r3, #0
    b376:	da01      	bge.n	b37c <adc_is_syncing+0x20>
		return true;
    b378:	2301      	movs	r3, #1
    b37a:	e000      	b.n	b37e <adc_is_syncing+0x22>
	}

	return false;
    b37c:	2300      	movs	r3, #0
}
    b37e:	1c18      	adds	r0, r3, #0
    b380:	46bd      	mov	sp, r7
    b382:	b004      	add	sp, #16
    b384:	bd80      	pop	{r7, pc}
    b386:	46c0      	nop			; (mov r8, r8)

0000b388 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b084      	sub	sp, #16
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	681b      	ldr	r3, [r3, #0]
    b394:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    b396:	46c0      	nop			; (mov r8, r8)
    b398:	687b      	ldr	r3, [r7, #4]
    b39a:	1c18      	adds	r0, r3, #0
    b39c:	4b0e      	ldr	r3, [pc, #56]	; (b3d8 <adc_enable+0x50>)
    b39e:	4798      	blx	r3
    b3a0:	1c03      	adds	r3, r0, #0
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	d1f8      	bne.n	b398 <adc_enable+0x10>
		/* Wait for synchronization */
	}

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    b3a6:	2015      	movs	r0, #21
    b3a8:	4b0c      	ldr	r3, [pc, #48]	; (b3dc <adc_enable+0x54>)
    b3aa:	4798      	blx	r3
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    b3ac:	68fb      	ldr	r3, [r7, #12]
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	b2db      	uxtb	r3, r3
    b3b2:	2202      	movs	r2, #2
    b3b4:	4313      	orrs	r3, r2
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	68fb      	ldr	r3, [r7, #12]
    b3ba:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    b3bc:	46c0      	nop			; (mov r8, r8)
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	1c18      	adds	r0, r3, #0
    b3c2:	4b05      	ldr	r3, [pc, #20]	; (b3d8 <adc_enable+0x50>)
    b3c4:	4798      	blx	r3
    b3c6:	1c03      	adds	r3, r0, #0
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d1f8      	bne.n	b3be <adc_enable+0x36>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    b3cc:	2300      	movs	r3, #0
}
    b3ce:	1c18      	adds	r0, r3, #0
    b3d0:	46bd      	mov	sp, r7
    b3d2:	b004      	add	sp, #16
    b3d4:	bd80      	pop	{r7, pc}
    b3d6:	46c0      	nop			; (mov r8, r8)
    b3d8:	0000b35d 	.word	0x0000b35d
    b3dc:	0000b331 	.word	0x0000b331

0000b3e0 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    b3e0:	b580      	push	{r7, lr}
    b3e2:	b084      	sub	sp, #16
    b3e4:	af00      	add	r7, sp, #0
    b3e6:	6078      	str	r0, [r7, #4]
    b3e8:	1c0a      	adds	r2, r1, #0
    b3ea:	1cfb      	adds	r3, r7, #3
    b3ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	681b      	ldr	r3, [r3, #0]
    b3f2:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    b3f4:	46c0      	nop			; (mov r8, r8)
    b3f6:	687b      	ldr	r3, [r7, #4]
    b3f8:	1c18      	adds	r0, r3, #0
    b3fa:	4b0d      	ldr	r3, [pc, #52]	; (b430 <adc_set_positive_input+0x50>)
    b3fc:	4798      	blx	r3
    b3fe:	1c03      	adds	r3, r0, #0
    b400:	2b00      	cmp	r3, #0
    b402:	d1f8      	bne.n	b3f6 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    b404:	68fb      	ldr	r3, [r7, #12]
    b406:	691b      	ldr	r3, [r3, #16]
    b408:	221f      	movs	r2, #31
    b40a:	1c19      	adds	r1, r3, #0
    b40c:	4391      	bics	r1, r2
    b40e:	1c0a      	adds	r2, r1, #0
    b410:	1cfb      	adds	r3, r7, #3
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    b416:	68fb      	ldr	r3, [r7, #12]
    b418:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    b41a:	46c0      	nop			; (mov r8, r8)
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	1c18      	adds	r0, r3, #0
    b420:	4b03      	ldr	r3, [pc, #12]	; (b430 <adc_set_positive_input+0x50>)
    b422:	4798      	blx	r3
    b424:	1c03      	adds	r3, r0, #0
    b426:	2b00      	cmp	r3, #0
    b428:	d1f8      	bne.n	b41c <adc_set_positive_input+0x3c>
		/* Wait for synchronization */
	}
}
    b42a:	46bd      	mov	sp, r7
    b42c:	b004      	add	sp, #16
    b42e:	bd80      	pop	{r7, pc}
    b430:	0000b35d 	.word	0x0000b35d

0000b434 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    b434:	b580      	push	{r7, lr}
    b436:	b084      	sub	sp, #16
    b438:	af00      	add	r7, sp, #0
    b43a:	6078      	str	r0, [r7, #4]
    b43c:	1c0a      	adds	r2, r1, #0
    b43e:	1cfb      	adds	r3, r7, #3
    b440:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b442:	687b      	ldr	r3, [r7, #4]
    b444:	681b      	ldr	r3, [r3, #0]
    b446:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    b448:	68fb      	ldr	r3, [r7, #12]
    b44a:	1cfa      	adds	r2, r7, #3
    b44c:	7812      	ldrb	r2, [r2, #0]
    b44e:	75da      	strb	r2, [r3, #23]
}
    b450:	46bd      	mov	sp, r7
    b452:	b004      	add	sp, #16
    b454:	bd80      	pop	{r7, pc}
    b456:	46c0      	nop			; (mov r8, r8)

0000b458 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    b458:	b580      	push	{r7, lr}
    b45a:	b082      	sub	sp, #8
    b45c:	af00      	add	r7, sp, #0
    b45e:	6078      	str	r0, [r7, #4]
    b460:	1c0a      	adds	r2, r1, #0
    b462:	1cfb      	adds	r3, r7, #3
    b464:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    b466:	687b      	ldr	r3, [r7, #4]
    b468:	7edb      	ldrb	r3, [r3, #27]
    b46a:	b2da      	uxtb	r2, r3
    b46c:	1cfb      	adds	r3, r7, #3
    b46e:	781b      	ldrb	r3, [r3, #0]
    b470:	2101      	movs	r1, #1
    b472:	1c08      	adds	r0, r1, #0
    b474:	4098      	lsls	r0, r3
    b476:	1c03      	adds	r3, r0, #0
    b478:	b2db      	uxtb	r3, r3
    b47a:	4313      	orrs	r3, r2
    b47c:	b2db      	uxtb	r3, r3
    b47e:	b2da      	uxtb	r2, r3
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    b484:	1cfb      	adds	r3, r7, #3
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	2b01      	cmp	r3, #1
    b48a:	d104      	bne.n	b496 <adc_enable_callback+0x3e>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	1c18      	adds	r0, r3, #0
    b490:	2104      	movs	r1, #4
    b492:	4b07      	ldr	r3, [pc, #28]	; (b4b0 <adc_enable_callback+0x58>)
    b494:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    b496:	1cfb      	adds	r3, r7, #3
    b498:	781b      	ldrb	r3, [r3, #0]
    b49a:	2b02      	cmp	r3, #2
    b49c:	d104      	bne.n	b4a8 <adc_enable_callback+0x50>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    b49e:	687b      	ldr	r3, [r7, #4]
    b4a0:	1c18      	adds	r0, r3, #0
    b4a2:	2102      	movs	r1, #2
    b4a4:	4b02      	ldr	r3, [pc, #8]	; (b4b0 <adc_enable_callback+0x58>)
    b4a6:	4798      	blx	r3
	}
}
    b4a8:	46bd      	mov	sp, r7
    b4aa:	b002      	add	sp, #8
    b4ac:	bd80      	pop	{r7, pc}
    b4ae:	46c0      	nop			; (mov r8, r8)
    b4b0:	0000b435 	.word	0x0000b435

0000b4b4 <ADCGetReading>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
 uint16_t ADCGetReading(uint8_t which)
 {
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b084      	sub	sp, #16
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	1c02      	adds	r2, r0, #0
    b4bc:	1dfb      	adds	r3, r7, #7
    b4be:	701a      	strb	r2, [r3, #0]
	 uint16_t valueRead; 
	 valueRead = 0; 
    b4c0:	1c3b      	adds	r3, r7, #0
    b4c2:	330e      	adds	r3, #14
    b4c4:	2200      	movs	r2, #0
    b4c6:	801a      	strh	r2, [r3, #0]
	 switch(which)
    b4c8:	1dfb      	adds	r3, r7, #7
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	2b01      	cmp	r3, #1
    b4ce:	d00e      	beq.n	b4ee <ADCGetReading+0x3a>
    b4d0:	dc02      	bgt.n	b4d8 <ADCGetReading+0x24>
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d005      	beq.n	b4e2 <ADCGetReading+0x2e>
    b4d6:	e01c      	b.n	b512 <ADCGetReading+0x5e>
    b4d8:	2b02      	cmp	r3, #2
    b4da:	d00e      	beq.n	b4fa <ADCGetReading+0x46>
    b4dc:	2b03      	cmp	r3, #3
    b4de:	d012      	beq.n	b506 <ADCGetReading+0x52>
    b4e0:	e017      	b.n	b512 <ADCGetReading+0x5e>
	 {
		 case ADC_INPUT_VOLTAGE:
		 {
			 valueRead = adcAverageReadings[0]; 
    b4e2:	1c3b      	adds	r3, r7, #0
    b4e4:	330e      	adds	r3, #14
    b4e6:	4a0e      	ldr	r2, [pc, #56]	; (b520 <ADCGetReading+0x6c>)
    b4e8:	8812      	ldrh	r2, [r2, #0]
    b4ea:	801a      	strh	r2, [r3, #0]
			 break;
    b4ec:	e011      	b.n	b512 <ADCGetReading+0x5e>
		 }
		 case ADC_INPUT_CURRENT:
		 {
			 valueRead = adcAverageReadings[1]; 
    b4ee:	1c3b      	adds	r3, r7, #0
    b4f0:	330e      	adds	r3, #14
    b4f2:	4a0b      	ldr	r2, [pc, #44]	; (b520 <ADCGetReading+0x6c>)
    b4f4:	8852      	ldrh	r2, [r2, #2]
    b4f6:	801a      	strh	r2, [r3, #0]
			 break;
    b4f8:	e00b      	b.n	b512 <ADCGetReading+0x5e>
		 }
		 case ADC_INPUT_FSR:
		 {
			 valueRead = adcAverageReadings[2];
    b4fa:	1c3b      	adds	r3, r7, #0
    b4fc:	330e      	adds	r3, #14
    b4fe:	4a08      	ldr	r2, [pc, #32]	; (b520 <ADCGetReading+0x6c>)
    b500:	8892      	ldrh	r2, [r2, #4]
    b502:	801a      	strh	r2, [r3, #0]
			 break;
    b504:	e005      	b.n	b512 <ADCGetReading+0x5e>
		 }		 
		 case ADC_INPUT_SUPERCAP:
		 {
			 valueRead = adcAverageReadings[3];
    b506:	1c3b      	adds	r3, r7, #0
    b508:	330e      	adds	r3, #14
    b50a:	4a05      	ldr	r2, [pc, #20]	; (b520 <ADCGetReading+0x6c>)
    b50c:	88d2      	ldrh	r2, [r2, #6]
    b50e:	801a      	strh	r2, [r3, #0]
			 break;
    b510:	46c0      	nop			; (mov r8, r8)
		 }		 
	 }
	 return valueRead; 
    b512:	1c3b      	adds	r3, r7, #0
    b514:	330e      	adds	r3, #14
    b516:	881b      	ldrh	r3, [r3, #0]
 }
    b518:	1c18      	adds	r0, r3, #0
    b51a:	46bd      	mov	sp, r7
    b51c:	b004      	add	sp, #16
    b51e:	bd80      	pop	{r7, pc}
    b520:	20003040 	.word	0x20003040

0000b524 <adc_complete_callback>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void adc_complete_callback(const struct adc_module *const module)
{
    b524:	b580      	push	{r7, lr}
    b526:	b082      	sub	sp, #8
    b528:	af00      	add	r7, sp, #0
    b52a:	6078      	str	r0, [r7, #4]
	uint16_t averageRead;	
	adc_read_done = true;
    b52c:	4b31      	ldr	r3, [pc, #196]	; (b5f4 <adc_complete_callback+0xd0>)
    b52e:	2201      	movs	r2, #1
    b530:	701a      	strb	r2, [r3, #0]

#if BRAKEBOARD	
	if (motorOn == TRUE)
    b532:	4b31      	ldr	r3, [pc, #196]	; (b5f8 <adc_complete_callback+0xd4>)
    b534:	781b      	ldrb	r3, [r3, #0]
    b536:	2b01      	cmp	r3, #1
    b538:	d152      	bne.n	b5e0 <adc_complete_callback+0xbc>
	{
		//v01_20 was adc_result_buffer[1]
		adcAverageReadings[adcOffset] = adc_result_buffer[1];  
    b53a:	4b30      	ldr	r3, [pc, #192]	; (b5fc <adc_complete_callback+0xd8>)
    b53c:	781b      	ldrb	r3, [r3, #0]
    b53e:	1c1a      	adds	r2, r3, #0
    b540:	4b2f      	ldr	r3, [pc, #188]	; (b600 <adc_complete_callback+0xdc>)
    b542:	8859      	ldrh	r1, [r3, #2]
    b544:	4b2f      	ldr	r3, [pc, #188]	; (b604 <adc_complete_callback+0xe0>)
    b546:	0052      	lsls	r2, r2, #1
    b548:	52d1      	strh	r1, [r2, r3]
		
		switch (adcOffset)
    b54a:	4b2c      	ldr	r3, [pc, #176]	; (b5fc <adc_complete_callback+0xd8>)
    b54c:	781b      	ldrb	r3, [r3, #0]
    b54e:	2b01      	cmp	r3, #1
    b550:	d122      	bne.n	b598 <adc_complete_callback+0x74>
		{
			case 1:
			{
				adcOffset=2;
    b552:	4b2a      	ldr	r3, [pc, #168]	; (b5fc <adc_complete_callback+0xd8>)
    b554:	2202      	movs	r2, #2
    b556:	701a      	strb	r2, [r3, #0]
//brake v01_41	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN14);	
//brake v01_41 boc
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN15);	
    b558:	4b2b      	ldr	r3, [pc, #172]	; (b608 <adc_complete_callback+0xe4>)
    b55a:	1c18      	adds	r0, r3, #0
    b55c:	210f      	movs	r1, #15
    b55e:	4b2b      	ldr	r3, [pc, #172]	; (b60c <adc_complete_callback+0xe8>)
    b560:	4798      	blx	r3
//brake v01_41 eoc								
				adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    b562:	4a29      	ldr	r2, [pc, #164]	; (b608 <adc_complete_callback+0xe4>)
    b564:	4b26      	ldr	r3, [pc, #152]	; (b600 <adc_complete_callback+0xdc>)
    b566:	1c10      	adds	r0, r2, #0
    b568:	1c19      	adds	r1, r3, #0
    b56a:	2204      	movs	r2, #4
    b56c:	4b28      	ldr	r3, [pc, #160]	; (b610 <adc_complete_callback+0xec>)
    b56e:	4798      	blx	r3
				if (motorRunTime > 0)
    b570:	4b28      	ldr	r3, [pc, #160]	; (b614 <adc_complete_callback+0xf0>)
    b572:	881b      	ldrh	r3, [r3, #0]
    b574:	2b00      	cmp	r3, #0
    b576:	d003      	beq.n	b580 <adc_complete_callback+0x5c>
				{
					maxCurrentRead = 0;
    b578:	4b27      	ldr	r3, [pc, #156]	; (b618 <adc_complete_callback+0xf4>)
    b57a:	2200      	movs	r2, #0
    b57c:	801a      	strh	r2, [r3, #0]
    b57e:	e00a      	b.n	b596 <adc_complete_callback+0x72>
				}	
				else
				{
					if (maxCurrentRead < adcAverageReadings[1])
    b580:	4b20      	ldr	r3, [pc, #128]	; (b604 <adc_complete_callback+0xe0>)
    b582:	885a      	ldrh	r2, [r3, #2]
    b584:	4b24      	ldr	r3, [pc, #144]	; (b618 <adc_complete_callback+0xf4>)
    b586:	881b      	ldrh	r3, [r3, #0]
    b588:	429a      	cmp	r2, r3
    b58a:	d904      	bls.n	b596 <adc_complete_callback+0x72>
					{
						maxCurrentRead = adcAverageReadings[1]; 
    b58c:	4b1d      	ldr	r3, [pc, #116]	; (b604 <adc_complete_callback+0xe0>)
    b58e:	885a      	ldrh	r2, [r3, #2]
    b590:	4b21      	ldr	r3, [pc, #132]	; (b618 <adc_complete_callback+0xf4>)
    b592:	801a      	strh	r2, [r3, #0]
					}
				}
				break;
    b594:	e023      	b.n	b5de <adc_complete_callback+0xba>
    b596:	e022      	b.n	b5de <adc_complete_callback+0xba>
			}
			default:
			{
				adcOffset=1;
    b598:	4b18      	ldr	r3, [pc, #96]	; (b5fc <adc_complete_callback+0xd8>)
    b59a:	2201      	movs	r2, #1
    b59c:	701a      	strb	r2, [r3, #0]
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);	
    b59e:	4b1a      	ldr	r3, [pc, #104]	; (b608 <adc_complete_callback+0xe4>)
    b5a0:	1c18      	adds	r0, r3, #0
    b5a2:	2101      	movs	r1, #1
    b5a4:	4b19      	ldr	r3, [pc, #100]	; (b60c <adc_complete_callback+0xe8>)
    b5a6:	4798      	blx	r3
				adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);	
    b5a8:	4a17      	ldr	r2, [pc, #92]	; (b608 <adc_complete_callback+0xe4>)
    b5aa:	4b15      	ldr	r3, [pc, #84]	; (b600 <adc_complete_callback+0xdc>)
    b5ac:	1c10      	adds	r0, r2, #0
    b5ae:	1c19      	adds	r1, r3, #0
    b5b0:	2204      	movs	r2, #4
    b5b2:	4b17      	ldr	r3, [pc, #92]	; (b610 <adc_complete_callback+0xec>)
    b5b4:	4798      	blx	r3
//brake v01_41 boc				
				if (motorRunTime > 0)
    b5b6:	4b17      	ldr	r3, [pc, #92]	; (b614 <adc_complete_callback+0xf0>)
    b5b8:	881b      	ldrh	r3, [r3, #0]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d003      	beq.n	b5c6 <adc_complete_callback+0xa2>
				{
					maxFSRRead = 0;
    b5be:	4b17      	ldr	r3, [pc, #92]	; (b61c <adc_complete_callback+0xf8>)
    b5c0:	2200      	movs	r2, #0
    b5c2:	801a      	strh	r2, [r3, #0]
    b5c4:	e00a      	b.n	b5dc <adc_complete_callback+0xb8>
				}
				else
				{
					if (maxFSRRead < adcAverageReadings[2])
    b5c6:	4b0f      	ldr	r3, [pc, #60]	; (b604 <adc_complete_callback+0xe0>)
    b5c8:	889a      	ldrh	r2, [r3, #4]
    b5ca:	4b14      	ldr	r3, [pc, #80]	; (b61c <adc_complete_callback+0xf8>)
    b5cc:	881b      	ldrh	r3, [r3, #0]
    b5ce:	429a      	cmp	r2, r3
    b5d0:	d904      	bls.n	b5dc <adc_complete_callback+0xb8>
					{
						maxFSRRead = adcAverageReadings[2];
    b5d2:	4b0c      	ldr	r3, [pc, #48]	; (b604 <adc_complete_callback+0xe0>)
    b5d4:	889a      	ldrh	r2, [r3, #4]
    b5d6:	4b11      	ldr	r3, [pc, #68]	; (b61c <adc_complete_callback+0xf8>)
    b5d8:	801a      	strh	r2, [r3, #0]
					}
				}
//brake v01_41 eoc									
				break;
    b5da:	e7ff      	b.n	b5dc <adc_complete_callback+0xb8>
    b5dc:	46c0      	nop			; (mov r8, r8)
    b5de:	e005      	b.n	b5ec <adc_complete_callback+0xc8>
			}	
		}
	}
	else
	{
		schedByte |= SCHEDBYTE_ADC;
    b5e0:	4b0f      	ldr	r3, [pc, #60]	; (b620 <adc_complete_callback+0xfc>)
    b5e2:	681b      	ldr	r3, [r3, #0]
    b5e4:	2220      	movs	r2, #32
    b5e6:	431a      	orrs	r2, r3
    b5e8:	4b0d      	ldr	r3, [pc, #52]	; (b620 <adc_complete_callback+0xfc>)
    b5ea:	601a      	str	r2, [r3, #0]
	}
#else
	schedByte |= SCHEDBYTE_ADC;	
#endif
}
    b5ec:	46bd      	mov	sp, r7
    b5ee:	b002      	add	sp, #8
    b5f0:	bd80      	pop	{r7, pc}
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	200004c2 	.word	0x200004c2
    b5f8:	200004b0 	.word	0x200004b0
    b5fc:	2000303c 	.word	0x2000303c
    b600:	20003034 	.word	0x20003034
    b604:	20003040 	.word	0x20003040
    b608:	20003048 	.word	0x20003048
    b60c:	0000b3e1 	.word	0x0000b3e1
    b610:	00003cb1 	.word	0x00003cb1
    b614:	20002eb2 	.word	0x20002eb2
    b618:	200004be 	.word	0x200004be
    b61c:	200004c0 	.word	0x200004c0
    b620:	2000369c 	.word	0x2000369c

0000b624 <configure_adc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================  
void configure_adc(uint8_t which)
{
    b624:	b580      	push	{r7, lr}
    b626:	b08e      	sub	sp, #56	; 0x38
    b628:	af00      	add	r7, sp, #0
    b62a:	1c02      	adds	r2, r0, #0
    b62c:	1dfb      	adds	r3, r7, #7
    b62e:	701a      	strb	r2, [r3, #0]
	struct adc_config config_adc;
	
 	adc_get_config_defaults(&config_adc);
    b630:	1c3b      	adds	r3, r7, #0
    b632:	3308      	adds	r3, #8
    b634:	1c18      	adds	r0, r3, #0
    b636:	4b2f      	ldr	r3, [pc, #188]	; (b6f4 <configure_adc+0xd0>)
    b638:	4798      	blx	r3
 
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;  //ADC_GAIN_FACTOR_DIV2;
    b63a:	1c3b      	adds	r3, r7, #0
    b63c:	3308      	adds	r3, #8
    b63e:	2200      	movs	r2, #0
    b640:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;  //8;
    b642:	1c3b      	adds	r3, r7, #0
    b644:	3308      	adds	r3, #8
    b646:	2280      	movs	r2, #128	; 0x80
    b648:	0052      	lsls	r2, r2, #1
    b64a:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INT1V; //ADC_REFERENCE_INTVCC0;  //ADC_REFERENCE_INTVCC1;
    b64c:	1c3b      	adds	r3, r7, #0
    b64e:	3308      	adds	r3, #8
    b650:	2200      	movs	r2, #0
    b652:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;
    b654:	1c3b      	adds	r3, r7, #0
    b656:	3308      	adds	r3, #8
    b658:	2201      	movs	r2, #1
    b65a:	731a      	strb	r2, [r3, #12]
#endif	
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
    b65c:	1c3b      	adds	r3, r7, #0
    b65e:	3308      	adds	r3, #8
    b660:	2200      	movs	r2, #0
    b662:	711a      	strb	r2, [r3, #4]
//    config_adc.correction.correction_enable = true;
//    config_adc.correction.offset_correction = 512;
//	config_adc.correction.gain_correction = 0x0800;
	config_adc.negative_input     =ADC_NEGATIVE_INPUT_GND;
    b664:	1c3b      	adds	r3, r7, #0
    b666:	3308      	adds	r3, #8
    b668:	22c0      	movs	r2, #192	; 0xc0
    b66a:	0152      	lsls	r2, r2, #5
    b66c:	81da      	strh	r2, [r3, #14]
	config_adc.sample_length                 = 5;  //1;
    b66e:	1c3b      	adds	r3, r7, #0
    b670:	3308      	adds	r3, #8
    b672:	2205      	movs	r2, #5
    b674:	75da      	strb	r2, [r3, #23]
	config_adc.resolution         = ADC_RESOLUTION_CUSTOM;
    b676:	1c3b      	adds	r3, r7, #0
    b678:	3308      	adds	r3, #8
    b67a:	2234      	movs	r2, #52	; 0x34
    b67c:	711a      	strb	r2, [r3, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_4;   //06-28-20 ADC_DIVIDE_RESULT_16;
    b67e:	1c3b      	adds	r3, r7, #0
    b680:	3308      	adds	r3, #8
    b682:	2202      	movs	r2, #2
    b684:	745a      	strb	r2, [r3, #17]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_4; //06-28-20 ADC_ACCUMULATE_SAMPLES_16;
    b686:	1c3b      	adds	r3, r7, #0
    b688:	3308      	adds	r3, #8
    b68a:	2202      	movs	r2, #2
    b68c:	741a      	strb	r2, [r3, #16]

#if BRAKEBOARD	
	switch (which)
    b68e:	1dfb      	adds	r3, r7, #7
    b690:	781b      	ldrb	r3, [r3, #0]
    b692:	2b04      	cmp	r3, #4
    b694:	d81d      	bhi.n	b6d2 <configure_adc+0xae>
    b696:	009a      	lsls	r2, r3, #2
    b698:	4b17      	ldr	r3, [pc, #92]	; (b6f8 <configure_adc+0xd4>)
    b69a:	18d3      	adds	r3, r2, r3
    b69c:	681b      	ldr	r3, [r3, #0]
    b69e:	469f      	mov	pc, r3
	{
		case 0:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
    b6a0:	1c3b      	adds	r3, r7, #0
    b6a2:	3308      	adds	r3, #8
    b6a4:	2200      	movs	r2, #0
    b6a6:	731a      	strb	r2, [r3, #12]
			break;
    b6a8:	e013      	b.n	b6d2 <configure_adc+0xae>
		}	
		case 1:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
    b6aa:	1c3b      	adds	r3, r7, #0
    b6ac:	3308      	adds	r3, #8
    b6ae:	2201      	movs	r2, #1
    b6b0:	731a      	strb	r2, [r3, #12]
			break;
    b6b2:	e00e      	b.n	b6d2 <configure_adc+0xae>
		}
		case 2:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
    b6b4:	1c3b      	adds	r3, r7, #0
    b6b6:	3308      	adds	r3, #8
    b6b8:	220f      	movs	r2, #15
    b6ba:	731a      	strb	r2, [r3, #12]
			break;
    b6bc:	e009      	b.n	b6d2 <configure_adc+0xae>
		}	
		case 3:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;	//01_38_#2		
    b6be:	1c3b      	adds	r3, r7, #0
    b6c0:	3308      	adds	r3, #8
    b6c2:	220e      	movs	r2, #14
    b6c4:	731a      	strb	r2, [r3, #12]
			break;
    b6c6:	e004      	b.n	b6d2 <configure_adc+0xae>
		}
		case 4:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN12;	//01_38_#2		
    b6c8:	1c3b      	adds	r3, r7, #0
    b6ca:	3308      	adds	r3, #8
    b6cc:	220c      	movs	r2, #12
    b6ce:	731a      	strb	r2, [r3, #12]
			break;
    b6d0:	46c0      	nop			; (mov r8, r8)
		}				
	}
#endif 

	adc_init(&adc_instance, ADC, &config_adc);
    b6d2:	490a      	ldr	r1, [pc, #40]	; (b6fc <configure_adc+0xd8>)
    b6d4:	4a0a      	ldr	r2, [pc, #40]	; (b700 <configure_adc+0xdc>)
    b6d6:	1c3b      	adds	r3, r7, #0
    b6d8:	3308      	adds	r3, #8
    b6da:	1c08      	adds	r0, r1, #0
    b6dc:	1c11      	adds	r1, r2, #0
    b6de:	1c1a      	adds	r2, r3, #0
    b6e0:	4b08      	ldr	r3, [pc, #32]	; (b704 <configure_adc+0xe0>)
    b6e2:	4798      	blx	r3
	adc_enable(&adc_instance);
    b6e4:	4b05      	ldr	r3, [pc, #20]	; (b6fc <configure_adc+0xd8>)
    b6e6:	1c18      	adds	r0, r3, #0
    b6e8:	4b07      	ldr	r3, [pc, #28]	; (b708 <configure_adc+0xe4>)
    b6ea:	4798      	blx	r3
 
}
    b6ec:	46bd      	mov	sp, r7
    b6ee:	b00e      	add	sp, #56	; 0x38
    b6f0:	bd80      	pop	{r7, pc}
    b6f2:	46c0      	nop			; (mov r8, r8)
    b6f4:	00003309 	.word	0x00003309
    b6f8:	00018498 	.word	0x00018498
    b6fc:	20003048 	.word	0x20003048
    b700:	42004000 	.word	0x42004000
    b704:	0000398d 	.word	0x0000398d
    b708:	0000b389 	.word	0x0000b389

0000b70c <configure_adc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_adc_callbacks(void)
{
    b70c:	b580      	push	{r7, lr}
    b70e:	af00      	add	r7, sp, #0
 
	adc_register_callback(&adc_instance,
    b710:	4a06      	ldr	r2, [pc, #24]	; (b72c <configure_adc_callbacks+0x20>)
    b712:	4b07      	ldr	r3, [pc, #28]	; (b730 <configure_adc_callbacks+0x24>)
    b714:	1c10      	adds	r0, r2, #0
    b716:	1c19      	adds	r1, r3, #0
    b718:	2200      	movs	r2, #0
    b71a:	4b06      	ldr	r3, [pc, #24]	; (b734 <configure_adc_callbacks+0x28>)
    b71c:	4798      	blx	r3
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
 
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
    b71e:	4b03      	ldr	r3, [pc, #12]	; (b72c <configure_adc_callbacks+0x20>)
    b720:	1c18      	adds	r0, r3, #0
    b722:	2100      	movs	r1, #0
    b724:	4b04      	ldr	r3, [pc, #16]	; (b738 <configure_adc_callbacks+0x2c>)
    b726:	4798      	blx	r3
 
}
    b728:	46bd      	mov	sp, r7
    b72a:	bd80      	pop	{r7, pc}
    b72c:	20003048 	.word	0x20003048
    b730:	0000b525 	.word	0x0000b525
    b734:	00003c71 	.word	0x00003c71
    b738:	0000b459 	.word	0x0000b459

0000b73c <ADCTask>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
void ADCTask(void)
{
    b73c:	b580      	push	{r7, lr}
    b73e:	b082      	sub	sp, #8
    b740:	af00      	add	r7, sp, #0
	uint16_t averageRead; 
	//----------------------
	// load in the readings for the current channel 
	// start the next reading of the next channel
	//-----------------------
	if (adc_read_done != FALSE)
    b742:	4b6b      	ldr	r3, [pc, #428]	; (b8f0 <ADCTask+0x1b4>)
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	b2db      	uxtb	r3, r3
    b748:	2b00      	cmp	r3, #0
    b74a:	d100      	bne.n	b74e <ADCTask+0x12>
    b74c:	e094      	b.n	b878 <ADCTask+0x13c>
	{
		adc_read_done = 0; 
    b74e:	4b68      	ldr	r3, [pc, #416]	; (b8f0 <ADCTask+0x1b4>)
    b750:	2200      	movs	r2, #0
    b752:	701a      	strb	r2, [r3, #0]
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    b754:	1dfb      	adds	r3, r7, #7
    b756:	2200      	movs	r2, #0
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	e018      	b.n	b78e <ADCTask+0x52>
		{
			if (adcOffset < MAX_ADC_CHANNELS)
    b75c:	4b65      	ldr	r3, [pc, #404]	; (b8f4 <ADCTask+0x1b8>)
    b75e:	781b      	ldrb	r3, [r3, #0]
    b760:	2b03      	cmp	r3, #3
    b762:	d80f      	bhi.n	b784 <ADCTask+0x48>
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
    b764:	4b63      	ldr	r3, [pc, #396]	; (b8f4 <ADCTask+0x1b8>)
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	1c18      	adds	r0, r3, #0
    b76a:	1dfb      	adds	r3, r7, #7
    b76c:	781a      	ldrb	r2, [r3, #0]
    b76e:	1dfb      	adds	r3, r7, #7
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	1c59      	adds	r1, r3, #1
    b774:	4b60      	ldr	r3, [pc, #384]	; (b8f8 <ADCTask+0x1bc>)
    b776:	0049      	lsls	r1, r1, #1
    b778:	5ac9      	ldrh	r1, [r1, r3]
    b77a:	4b60      	ldr	r3, [pc, #384]	; (b8fc <ADCTask+0x1c0>)
    b77c:	0080      	lsls	r0, r0, #2
    b77e:	1882      	adds	r2, r0, r2
    b780:	0052      	lsls	r2, r2, #1
    b782:	52d1      	strh	r1, [r2, r3]
	if (adc_read_done != FALSE)
	{
		adc_read_done = 0; 
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    b784:	1dfb      	adds	r3, r7, #7
    b786:	781a      	ldrb	r2, [r3, #0]
    b788:	1dfb      	adds	r3, r7, #7
    b78a:	3201      	adds	r2, #1
    b78c:	701a      	strb	r2, [r3, #0]
    b78e:	1dfb      	adds	r3, r7, #7
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	2b02      	cmp	r3, #2
    b794:	d9e2      	bls.n	b75c <ADCTask+0x20>
			if (adcOffset < MAX_ADC_CHANNELS)
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
    b796:	1d3b      	adds	r3, r7, #4
    b798:	2200      	movs	r2, #0
    b79a:	801a      	strh	r2, [r3, #0]
		for (i=1;i<(ADC_SAMPLES-1);i++)
    b79c:	1dfb      	adds	r3, r7, #7
    b79e:	2201      	movs	r2, #1
    b7a0:	701a      	strb	r2, [r3, #0]
    b7a2:	e00f      	b.n	b7c4 <ADCTask+0x88>
		{
			averageRead += adc_result_buffer[i+1];
    b7a4:	1dfb      	adds	r3, r7, #7
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	1c5a      	adds	r2, r3, #1
    b7aa:	4b53      	ldr	r3, [pc, #332]	; (b8f8 <ADCTask+0x1bc>)
    b7ac:	0052      	lsls	r2, r2, #1
    b7ae:	5ad1      	ldrh	r1, [r2, r3]
    b7b0:	1d3b      	adds	r3, r7, #4
    b7b2:	1d3a      	adds	r2, r7, #4
    b7b4:	8812      	ldrh	r2, [r2, #0]
    b7b6:	188a      	adds	r2, r1, r2
    b7b8:	801a      	strh	r2, [r3, #0]
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
		for (i=1;i<(ADC_SAMPLES-1);i++)
    b7ba:	1dfb      	adds	r3, r7, #7
    b7bc:	781a      	ldrb	r2, [r3, #0]
    b7be:	1dfb      	adds	r3, r7, #7
    b7c0:	3201      	adds	r2, #1
    b7c2:	701a      	strb	r2, [r3, #0]
    b7c4:	1dfb      	adds	r3, r7, #7
    b7c6:	781b      	ldrb	r3, [r3, #0]
    b7c8:	2b02      	cmp	r3, #2
    b7ca:	d9eb      	bls.n	b7a4 <ADCTask+0x68>
		{
			averageRead += adc_result_buffer[i+1];
		}
		averageRead = averageRead/(ADC_SAMPLES-1-1);
    b7cc:	1d3b      	adds	r3, r7, #4
    b7ce:	1d3a      	adds	r2, r7, #4
    b7d0:	8812      	ldrh	r2, [r2, #0]
    b7d2:	0852      	lsrs	r2, r2, #1
    b7d4:	801a      	strh	r2, [r3, #0]
		adcAverageReadings[adcOffset] = averageRead;	
    b7d6:	4b47      	ldr	r3, [pc, #284]	; (b8f4 <ADCTask+0x1b8>)
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	1c1a      	adds	r2, r3, #0
    b7dc:	4b48      	ldr	r3, [pc, #288]	; (b900 <ADCTask+0x1c4>)
    b7de:	0052      	lsls	r2, r2, #1
    b7e0:	1d39      	adds	r1, r7, #4
    b7e2:	8809      	ldrh	r1, [r1, #0]
    b7e4:	52d1      	strh	r1, [r2, r3]
//BETHUGH		adcAverageReadings[adcOffset] = adc_result_buffer[1];  //beth 			
		//----------------------
		// testing grab maximum current sense 
		//----------------------
		if (adcOffset == 1)
    b7e6:	4b43      	ldr	r3, [pc, #268]	; (b8f4 <ADCTask+0x1b8>)
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	2b01      	cmp	r3, #1
    b7ec:	d109      	bne.n	b802 <ADCTask+0xc6>
		{
			//----------------------
			// Get an average. 
			if (averageRead>maxCurrentRead)
    b7ee:	4b45      	ldr	r3, [pc, #276]	; (b904 <ADCTask+0x1c8>)
    b7f0:	881b      	ldrh	r3, [r3, #0]
    b7f2:	1d3a      	adds	r2, r7, #4
    b7f4:	8812      	ldrh	r2, [r2, #0]
    b7f6:	429a      	cmp	r2, r3
    b7f8:	d903      	bls.n	b802 <ADCTask+0xc6>
			{
				maxCurrentRead = averageRead;
    b7fa:	4b42      	ldr	r3, [pc, #264]	; (b904 <ADCTask+0x1c8>)
    b7fc:	1d3a      	adds	r2, r7, #4
    b7fe:	8812      	ldrh	r2, [r2, #0]
    b800:	801a      	strh	r2, [r3, #0]
			}
		}		
//v01_41 boc
		if (adcOffset == 2)
    b802:	4b3c      	ldr	r3, [pc, #240]	; (b8f4 <ADCTask+0x1b8>)
    b804:	781b      	ldrb	r3, [r3, #0]
    b806:	2b02      	cmp	r3, #2
    b808:	d109      	bne.n	b81e <ADCTask+0xe2>
		{
			//----------------------
			// Get an average.
			if (averageRead>maxFSRRead)
    b80a:	4b3f      	ldr	r3, [pc, #252]	; (b908 <ADCTask+0x1cc>)
    b80c:	881b      	ldrh	r3, [r3, #0]
    b80e:	1d3a      	adds	r2, r7, #4
    b810:	8812      	ldrh	r2, [r2, #0]
    b812:	429a      	cmp	r2, r3
    b814:	d903      	bls.n	b81e <ADCTask+0xe2>
			{
				maxFSRRead = averageRead;
    b816:	4b3c      	ldr	r3, [pc, #240]	; (b908 <ADCTask+0x1cc>)
    b818:	1d3a      	adds	r2, r7, #4
    b81a:	8812      	ldrh	r2, [r2, #0]
    b81c:	801a      	strh	r2, [r3, #0]
			}
		}		
		adcOffset++;
    b81e:	4b35      	ldr	r3, [pc, #212]	; (b8f4 <ADCTask+0x1b8>)
    b820:	781b      	ldrb	r3, [r3, #0]
    b822:	3301      	adds	r3, #1
    b824:	b2da      	uxtb	r2, r3
    b826:	4b33      	ldr	r3, [pc, #204]	; (b8f4 <ADCTask+0x1b8>)
    b828:	701a      	strb	r2, [r3, #0]
		if (adcOffset >= MAX_ADC_CHANNELS)
    b82a:	4b32      	ldr	r3, [pc, #200]	; (b8f4 <ADCTask+0x1b8>)
    b82c:	781b      	ldrb	r3, [r3, #0]
    b82e:	2b03      	cmp	r3, #3
    b830:	d912      	bls.n	b858 <ADCTask+0x11c>
		{
			adcOffset = 0;
    b832:	4b30      	ldr	r3, [pc, #192]	; (b8f4 <ADCTask+0x1b8>)
    b834:	2200      	movs	r2, #0
    b836:	701a      	strb	r2, [r3, #0]
			adcFirstPassDone = 1;  
    b838:	4b34      	ldr	r3, [pc, #208]	; (b90c <ADCTask+0x1d0>)
    b83a:	2201      	movs	r2, #1
    b83c:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD			
			brakeChange |= BRAKECHANGE_ADCDONE; 
    b83e:	4b34      	ldr	r3, [pc, #208]	; (b910 <ADCTask+0x1d4>)
    b840:	781b      	ldrb	r3, [r3, #0]
    b842:	2201      	movs	r2, #1
    b844:	4313      	orrs	r3, r2
    b846:	b2da      	uxtb	r2, r3
    b848:	4b31      	ldr	r3, [pc, #196]	; (b910 <ADCTask+0x1d4>)
    b84a:	701a      	strb	r2, [r3, #0]
			schedByte|= SCHEDBYTE_BRAKETASK; 
    b84c:	4b31      	ldr	r3, [pc, #196]	; (b914 <ADCTask+0x1d8>)
    b84e:	681b      	ldr	r3, [r3, #0]
    b850:	2240      	movs	r2, #64	; 0x40
    b852:	431a      	orrs	r2, r3
    b854:	4b2f      	ldr	r3, [pc, #188]	; (b914 <ADCTask+0x1d8>)
    b856:	601a      	str	r2, [r3, #0]
			//-----------------------
			// set a timer to do the ADC stuff
			
		}
#if BRAKEBOARD		
		if (motorOn == TRUE)
    b858:	4b2f      	ldr	r3, [pc, #188]	; (b918 <ADCTask+0x1dc>)
    b85a:	781b      	ldrb	r3, [r3, #0]
    b85c:	2b01      	cmp	r3, #1
    b85e:	d102      	bne.n	b866 <ADCTask+0x12a>
		{
			adcOffset = 1; 
    b860:	4b24      	ldr	r3, [pc, #144]	; (b8f4 <ADCTask+0x1b8>)
    b862:	2201      	movs	r2, #1
    b864:	701a      	strb	r2, [r3, #0]
		}
		adcTimeout = 1; //04-11-16
    b866:	4b2d      	ldr	r3, [pc, #180]	; (b91c <ADCTask+0x1e0>)
    b868:	2201      	movs	r2, #1
    b86a:	701a      	strb	r2, [r3, #0]
#endif
 		adcTimer = ADCTIME; 
    b86c:	4b2c      	ldr	r3, [pc, #176]	; (b920 <ADCTask+0x1e4>)
    b86e:	2203      	movs	r2, #3
    b870:	801a      	strh	r2, [r3, #0]
		adcTimeout = 0; 
    b872:	4b2a      	ldr	r3, [pc, #168]	; (b91c <ADCTask+0x1e0>)
    b874:	2200      	movs	r2, #0
    b876:	701a      	strb	r2, [r3, #0]
	}
	if (adcTimeout != 0)
    b878:	4b28      	ldr	r3, [pc, #160]	; (b91c <ADCTask+0x1e0>)
    b87a:	781b      	ldrb	r3, [r3, #0]
    b87c:	2b00      	cmp	r3, #0
    b87e:	d033      	beq.n	b8e8 <ADCTask+0x1ac>
	{
		adcTimeout = 0;
    b880:	4b26      	ldr	r3, [pc, #152]	; (b91c <ADCTask+0x1e0>)
    b882:	2200      	movs	r2, #0
    b884:	701a      	strb	r2, [r3, #0]
		adcTimer = 0; 
    b886:	4b26      	ldr	r3, [pc, #152]	; (b920 <ADCTask+0x1e4>)
    b888:	2200      	movs	r2, #0
    b88a:	801a      	strh	r2, [r3, #0]
		switch (adcOffset)
    b88c:	4b19      	ldr	r3, [pc, #100]	; (b8f4 <ADCTask+0x1b8>)
    b88e:	781b      	ldrb	r3, [r3, #0]
    b890:	2b04      	cmp	r3, #4
    b892:	d822      	bhi.n	b8da <ADCTask+0x19e>
    b894:	009a      	lsls	r2, r3, #2
    b896:	4b23      	ldr	r3, [pc, #140]	; (b924 <ADCTask+0x1e8>)
    b898:	18d3      	adds	r3, r2, r3
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	469f      	mov	pc, r3
		{
			case 0:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN0);
    b89e:	4b22      	ldr	r3, [pc, #136]	; (b928 <ADCTask+0x1ec>)
    b8a0:	1c18      	adds	r0, r3, #0
    b8a2:	2100      	movs	r1, #0
    b8a4:	4b21      	ldr	r3, [pc, #132]	; (b92c <ADCTask+0x1f0>)
    b8a6:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
				break;
    b8a8:	e017      	b.n	b8da <ADCTask+0x19e>
			}	
			case 1:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);			
    b8aa:	4b1f      	ldr	r3, [pc, #124]	; (b928 <ADCTask+0x1ec>)
    b8ac:	1c18      	adds	r0, r3, #0
    b8ae:	2101      	movs	r1, #1
    b8b0:	4b1e      	ldr	r3, [pc, #120]	; (b92c <ADCTask+0x1f0>)
    b8b2:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
				break;
    b8b4:	e011      	b.n	b8da <ADCTask+0x19e>
			}
			case 2:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN15);
    b8b6:	4b1c      	ldr	r3, [pc, #112]	; (b928 <ADCTask+0x1ec>)
    b8b8:	1c18      	adds	r0, r3, #0
    b8ba:	210f      	movs	r1, #15
    b8bc:	4b1b      	ldr	r3, [pc, #108]	; (b92c <ADCTask+0x1f0>)
    b8be:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN2;			
				break;
    b8c0:	e00b      	b.n	b8da <ADCTask+0x19e>
			}	
			case 3:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN14);		//01_38_#2	
    b8c2:	4b19      	ldr	r3, [pc, #100]	; (b928 <ADCTask+0x1ec>)
    b8c4:	1c18      	adds	r0, r3, #0
    b8c6:	210e      	movs	r1, #14
    b8c8:	4b18      	ldr	r3, [pc, #96]	; (b92c <ADCTask+0x1f0>)
    b8ca:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;			
				break;
    b8cc:	e005      	b.n	b8da <ADCTask+0x19e>
			}
			case 4:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN12);		//01_38_#2	
    b8ce:	4b16      	ldr	r3, [pc, #88]	; (b928 <ADCTask+0x1ec>)
    b8d0:	1c18      	adds	r0, r3, #0
    b8d2:	210c      	movs	r1, #12
    b8d4:	4b15      	ldr	r3, [pc, #84]	; (b92c <ADCTask+0x1f0>)
    b8d6:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
				break;
    b8d8:	46c0      	nop			; (mov r8, r8)
			}				
		}
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    b8da:	4a13      	ldr	r2, [pc, #76]	; (b928 <ADCTask+0x1ec>)
    b8dc:	4b06      	ldr	r3, [pc, #24]	; (b8f8 <ADCTask+0x1bc>)
    b8de:	1c10      	adds	r0, r2, #0
    b8e0:	1c19      	adds	r1, r3, #0
    b8e2:	2204      	movs	r2, #4
    b8e4:	4b12      	ldr	r3, [pc, #72]	; (b930 <ADCTask+0x1f4>)
    b8e6:	4798      	blx	r3
	}
}
    b8e8:	46bd      	mov	sp, r7
    b8ea:	b002      	add	sp, #8
    b8ec:	bd80      	pop	{r7, pc}
    b8ee:	46c0      	nop			; (mov r8, r8)
    b8f0:	200004c2 	.word	0x200004c2
    b8f4:	2000303c 	.word	0x2000303c
    b8f8:	20003034 	.word	0x20003034
    b8fc:	20003010 	.word	0x20003010
    b900:	20003040 	.word	0x20003040
    b904:	200004be 	.word	0x200004be
    b908:	200004c0 	.word	0x200004c0
    b90c:	200004bc 	.word	0x200004bc
    b910:	20002eee 	.word	0x20002eee
    b914:	2000369c 	.word	0x2000369c
    b918:	200004b0 	.word	0x200004b0
    b91c:	2000300c 	.word	0x2000300c
    b920:	20003030 	.word	0x20003030
    b924:	000184ac 	.word	0x000184ac
    b928:	20003048 	.word	0x20003048
    b92c:	0000b3e1 	.word	0x0000b3e1
    b930:	00003cb1 	.word	0x00003cb1

0000b934 <ADCInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCInit(void)
{
    b934:	b580      	push	{r7, lr}
    b936:	b082      	sub	sp, #8
    b938:	af00      	add	r7, sp, #0
	uint8_t i,j; 
	
	adcOffset = 0; 
    b93a:	4b1d      	ldr	r3, [pc, #116]	; (b9b0 <ADCInit+0x7c>)
    b93c:	2200      	movs	r2, #0
    b93e:	701a      	strb	r2, [r3, #0]
	adcFirstPassDone = 0; 
    b940:	4b1c      	ldr	r3, [pc, #112]	; (b9b4 <ADCInit+0x80>)
    b942:	2200      	movs	r2, #0
    b944:	701a      	strb	r2, [r3, #0]
	 
	configure_adc(adcOffset);	
    b946:	4b1a      	ldr	r3, [pc, #104]	; (b9b0 <ADCInit+0x7c>)
    b948:	781b      	ldrb	r3, [r3, #0]
    b94a:	1c18      	adds	r0, r3, #0
    b94c:	4b1a      	ldr	r3, [pc, #104]	; (b9b8 <ADCInit+0x84>)
    b94e:	4798      	blx	r3
	configure_adc_callbacks();	
    b950:	4b1a      	ldr	r3, [pc, #104]	; (b9bc <ADCInit+0x88>)
    b952:	4798      	blx	r3
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b954:	1dfb      	adds	r3, r7, #7
    b956:	2200      	movs	r2, #0
    b958:	701a      	strb	r2, [r3, #0]
    b95a:	e021      	b.n	b9a0 <ADCInit+0x6c>
	{
		for (j=0;j<ADC_SAMPLES;j++)
    b95c:	1dbb      	adds	r3, r7, #6
    b95e:	2200      	movs	r2, #0
    b960:	701a      	strb	r2, [r3, #0]
    b962:	e00e      	b.n	b982 <ADCInit+0x4e>
		{
			adcReadings[i][j]=0;
    b964:	1dfb      	adds	r3, r7, #7
    b966:	7819      	ldrb	r1, [r3, #0]
    b968:	1dbb      	adds	r3, r7, #6
    b96a:	781a      	ldrb	r2, [r3, #0]
    b96c:	4b14      	ldr	r3, [pc, #80]	; (b9c0 <ADCInit+0x8c>)
    b96e:	0089      	lsls	r1, r1, #2
    b970:	188a      	adds	r2, r1, r2
    b972:	0052      	lsls	r2, r2, #1
    b974:	2100      	movs	r1, #0
    b976:	52d1      	strh	r1, [r2, r3]
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
	{
		for (j=0;j<ADC_SAMPLES;j++)
    b978:	1dbb      	adds	r3, r7, #6
    b97a:	781a      	ldrb	r2, [r3, #0]
    b97c:	1dbb      	adds	r3, r7, #6
    b97e:	3201      	adds	r2, #1
    b980:	701a      	strb	r2, [r3, #0]
    b982:	1dbb      	adds	r3, r7, #6
    b984:	781b      	ldrb	r3, [r3, #0]
    b986:	2b03      	cmp	r3, #3
    b988:	d9ec      	bls.n	b964 <ADCInit+0x30>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
    b98a:	1dfb      	adds	r3, r7, #7
    b98c:	781a      	ldrb	r2, [r3, #0]
    b98e:	4b0d      	ldr	r3, [pc, #52]	; (b9c4 <ADCInit+0x90>)
    b990:	0052      	lsls	r2, r2, #1
    b992:	2100      	movs	r1, #0
    b994:	52d1      	strh	r1, [r2, r3]
	adcFirstPassDone = 0; 
	 
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b996:	1dfb      	adds	r3, r7, #7
    b998:	781a      	ldrb	r2, [r3, #0]
    b99a:	1dfb      	adds	r3, r7, #7
    b99c:	3201      	adds	r2, #1
    b99e:	701a      	strb	r2, [r3, #0]
    b9a0:	1dfb      	adds	r3, r7, #7
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	2b03      	cmp	r3, #3
    b9a6:	d9d9      	bls.n	b95c <ADCInit+0x28>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
	}
}
    b9a8:	46bd      	mov	sp, r7
    b9aa:	b002      	add	sp, #8
    b9ac:	bd80      	pop	{r7, pc}
    b9ae:	46c0      	nop			; (mov r8, r8)
    b9b0:	2000303c 	.word	0x2000303c
    b9b4:	200004bc 	.word	0x200004bc
    b9b8:	0000b625 	.word	0x0000b625
    b9bc:	0000b70d 	.word	0x0000b70d
    b9c0:	20003010 	.word	0x20003010
    b9c4:	20003040 	.word	0x20003040

0000b9c8 <ADCStart>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCStart(void)
{
    b9c8:	b580      	push	{r7, lr}
    b9ca:	b082      	sub	sp, #8
    b9cc:	af00      	add	r7, sp, #0
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b9ce:	1dfb      	adds	r3, r7, #7
    b9d0:	2200      	movs	r2, #0
    b9d2:	701a      	strb	r2, [r3, #0]
    b9d4:	e020      	b.n	ba18 <ADCStart+0x50>
	{
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    b9d6:	4a14      	ldr	r2, [pc, #80]	; (ba28 <ADCStart+0x60>)
    b9d8:	4b14      	ldr	r3, [pc, #80]	; (ba2c <ADCStart+0x64>)
    b9da:	1c10      	adds	r0, r2, #0
    b9dc:	1c19      	adds	r1, r3, #0
    b9de:	2204      	movs	r2, #4
    b9e0:	4b13      	ldr	r3, [pc, #76]	; (ba30 <ADCStart+0x68>)
    b9e2:	4798      	blx	r3
		while ((schedByte&SCHEDBYTE_ADC)==0);
    b9e4:	46c0      	nop			; (mov r8, r8)
    b9e6:	4b13      	ldr	r3, [pc, #76]	; (ba34 <ADCStart+0x6c>)
    b9e8:	681a      	ldr	r2, [r3, #0]
    b9ea:	2320      	movs	r3, #32
    b9ec:	4013      	ands	r3, r2
    b9ee:	d0fa      	beq.n	b9e6 <ADCStart+0x1e>
		schedByte &= ~SCHEDBYTE_ADC; 
    b9f0:	4b10      	ldr	r3, [pc, #64]	; (ba34 <ADCStart+0x6c>)
    b9f2:	681b      	ldr	r3, [r3, #0]
    b9f4:	2220      	movs	r2, #32
    b9f6:	1c19      	adds	r1, r3, #0
    b9f8:	4391      	bics	r1, r2
    b9fa:	1c0a      	adds	r2, r1, #0
    b9fc:	4b0d      	ldr	r3, [pc, #52]	; (ba34 <ADCStart+0x6c>)
    b9fe:	601a      	str	r2, [r3, #0]
		ADCTask();
    ba00:	4b0d      	ldr	r3, [pc, #52]	; (ba38 <ADCStart+0x70>)
    ba02:	4798      	blx	r3
		adcTimeout = 1; 
    ba04:	4b0d      	ldr	r3, [pc, #52]	; (ba3c <ADCStart+0x74>)
    ba06:	2201      	movs	r2, #1
    ba08:	701a      	strb	r2, [r3, #0]
		ADCTask();
    ba0a:	4b0b      	ldr	r3, [pc, #44]	; (ba38 <ADCStart+0x70>)
    ba0c:	4798      	blx	r3
//==============================================================================
void ADCStart(void)
{
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    ba0e:	1dfb      	adds	r3, r7, #7
    ba10:	781a      	ldrb	r2, [r3, #0]
    ba12:	1dfb      	adds	r3, r7, #7
    ba14:	3201      	adds	r2, #1
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	1dfb      	adds	r3, r7, #7
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	2b03      	cmp	r3, #3
    ba1e:	d9da      	bls.n	b9d6 <ADCStart+0xe>
		schedByte &= ~SCHEDBYTE_ADC; 
		ADCTask();
		adcTimeout = 1; 
		ADCTask();
	}
}
    ba20:	46bd      	mov	sp, r7
    ba22:	b002      	add	sp, #8
    ba24:	bd80      	pop	{r7, pc}
    ba26:	46c0      	nop			; (mov r8, r8)
    ba28:	20003048 	.word	0x20003048
    ba2c:	20003034 	.word	0x20003034
    ba30:	00003cb1 	.word	0x00003cb1
    ba34:	2000369c 	.word	0x2000369c
    ba38:	0000b73d 	.word	0x0000b73d
    ba3c:	2000300c 	.word	0x2000300c

0000ba40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ba40:	b580      	push	{r7, lr}
    ba42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    ba44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ba48:	4b02      	ldr	r3, [pc, #8]	; (ba54 <NVIC_SystemReset+0x14>)
    ba4a:	4a03      	ldr	r2, [pc, #12]	; (ba58 <NVIC_SystemReset+0x18>)
    ba4c:	60da      	str	r2, [r3, #12]
    ba4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    ba52:	e7fe      	b.n	ba52 <NVIC_SystemReset+0x12>
    ba54:	e000ed00 	.word	0xe000ed00
    ba58:	05fa0004 	.word	0x05fa0004

0000ba5c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    ba5c:	b580      	push	{r7, lr}
    ba5e:	b084      	sub	sp, #16
    ba60:	af00      	add	r7, sp, #0
    ba62:	1c02      	adds	r2, r0, #0
    ba64:	1dfb      	adds	r3, r7, #7
    ba66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ba68:	1c3b      	adds	r3, r7, #0
    ba6a:	330f      	adds	r3, #15
    ba6c:	1dfa      	adds	r2, r7, #7
    ba6e:	7812      	ldrb	r2, [r2, #0]
    ba70:	09d2      	lsrs	r2, r2, #7
    ba72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ba74:	1c3b      	adds	r3, r7, #0
    ba76:	330e      	adds	r3, #14
    ba78:	1dfa      	adds	r2, r7, #7
    ba7a:	7812      	ldrb	r2, [r2, #0]
    ba7c:	0952      	lsrs	r2, r2, #5
    ba7e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ba80:	4b0d      	ldr	r3, [pc, #52]	; (bab8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ba82:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    ba84:	1c3b      	adds	r3, r7, #0
    ba86:	330f      	adds	r3, #15
    ba88:	781b      	ldrb	r3, [r3, #0]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d10e      	bne.n	baac <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    ba8e:	1c3b      	adds	r3, r7, #0
    ba90:	330f      	adds	r3, #15
    ba92:	781b      	ldrb	r3, [r3, #0]
    ba94:	009b      	lsls	r3, r3, #2
    ba96:	2210      	movs	r2, #16
    ba98:	19d2      	adds	r2, r2, r7
    ba9a:	18d3      	adds	r3, r2, r3
    ba9c:	3b08      	subs	r3, #8
    ba9e:	681a      	ldr	r2, [r3, #0]
    baa0:	1c3b      	adds	r3, r7, #0
    baa2:	330e      	adds	r3, #14
    baa4:	781b      	ldrb	r3, [r3, #0]
    baa6:	01db      	lsls	r3, r3, #7
    baa8:	18d3      	adds	r3, r2, r3
    baaa:	e000      	b.n	baae <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    baac:	2300      	movs	r3, #0
	}
}
    baae:	1c18      	adds	r0, r3, #0
    bab0:	46bd      	mov	sp, r7
    bab2:	b004      	add	sp, #16
    bab4:	bd80      	pop	{r7, pc}
    bab6:	46c0      	nop			; (mov r8, r8)
    bab8:	41004400 	.word	0x41004400

0000babc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    babc:	b580      	push	{r7, lr}
    babe:	b082      	sub	sp, #8
    bac0:	af00      	add	r7, sp, #0
    bac2:	1c02      	adds	r2, r0, #0
    bac4:	1dfb      	adds	r3, r7, #7
    bac6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    bac8:	1dfb      	adds	r3, r7, #7
    baca:	781b      	ldrb	r3, [r3, #0]
    bacc:	1c18      	adds	r0, r3, #0
    bace:	4b03      	ldr	r3, [pc, #12]	; (badc <port_get_group_from_gpio_pin+0x20>)
    bad0:	4798      	blx	r3
    bad2:	1c03      	adds	r3, r0, #0
}
    bad4:	1c18      	adds	r0, r3, #0
    bad6:	46bd      	mov	sp, r7
    bad8:	b002      	add	sp, #8
    bada:	bd80      	pop	{r7, pc}
    badc:	0000ba5d 	.word	0x0000ba5d

0000bae0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    bae0:	b580      	push	{r7, lr}
    bae2:	b084      	sub	sp, #16
    bae4:	af00      	add	r7, sp, #0
    bae6:	1c02      	adds	r2, r0, #0
    bae8:	1dfb      	adds	r3, r7, #7
    baea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    baec:	1dfb      	adds	r3, r7, #7
    baee:	781b      	ldrb	r3, [r3, #0]
    baf0:	1c18      	adds	r0, r3, #0
    baf2:	4b0c      	ldr	r3, [pc, #48]	; (bb24 <port_pin_get_input_level+0x44>)
    baf4:	4798      	blx	r3
    baf6:	1c03      	adds	r3, r0, #0
    baf8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bafa:	1dfb      	adds	r3, r7, #7
    bafc:	781a      	ldrb	r2, [r3, #0]
    bafe:	231f      	movs	r3, #31
    bb00:	4013      	ands	r3, r2
    bb02:	2201      	movs	r2, #1
    bb04:	1c11      	adds	r1, r2, #0
    bb06:	4099      	lsls	r1, r3
    bb08:	1c0b      	adds	r3, r1, #0
    bb0a:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    bb0c:	68fb      	ldr	r3, [r7, #12]
    bb0e:	6a1b      	ldr	r3, [r3, #32]
    bb10:	68ba      	ldr	r2, [r7, #8]
    bb12:	4013      	ands	r3, r2
    bb14:	1e5a      	subs	r2, r3, #1
    bb16:	4193      	sbcs	r3, r2
    bb18:	b2db      	uxtb	r3, r3
}
    bb1a:	1c18      	adds	r0, r3, #0
    bb1c:	46bd      	mov	sp, r7
    bb1e:	b004      	add	sp, #16
    bb20:	bd80      	pop	{r7, pc}
    bb22:	46c0      	nop			; (mov r8, r8)
    bb24:	0000babd 	.word	0x0000babd

0000bb28 <ButtonCheckPower>:
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// ---------------------------GLOBAL FUNCTIONS ----------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#if BRAKEBOARD
uint8_t ButtonCheckPower(void)
{
    bb28:	b590      	push	{r4, r7, lr}
    bb2a:	b083      	sub	sp, #12
    bb2c:	af00      	add	r7, sp, #0
	short int prevKey; 
	uint8_t i;
	
	for (i=0;i<12;i++)
    bb2e:	1dfb      	adds	r3, r7, #7
    bb30:	2200      	movs	r2, #0
    bb32:	701a      	strb	r2, [r3, #0]
    bb34:	e021      	b.n	bb7a <ButtonCheckPower+0x52>
	{
		power_hist = (power_hist << 1) + port_pin_get_input_level(BUTTON_POWER);
    bb36:	4b1c      	ldr	r3, [pc, #112]	; (bba8 <ButtonCheckPower+0x80>)
    bb38:	881b      	ldrh	r3, [r3, #0]
    bb3a:	18db      	adds	r3, r3, r3
    bb3c:	b29c      	uxth	r4, r3
    bb3e:	200e      	movs	r0, #14
    bb40:	4b1a      	ldr	r3, [pc, #104]	; (bbac <ButtonCheckPower+0x84>)
    bb42:	4798      	blx	r3
    bb44:	1c03      	adds	r3, r0, #0
    bb46:	18e3      	adds	r3, r4, r3
    bb48:	b29a      	uxth	r2, r3
    bb4a:	4b17      	ldr	r3, [pc, #92]	; (bba8 <ButtonCheckPower+0x80>)
    bb4c:	801a      	strh	r2, [r3, #0]
	 
		prevKey = power_pressed;
    bb4e:	1d3b      	adds	r3, r7, #4
    bb50:	4a17      	ldr	r2, [pc, #92]	; (bbb0 <ButtonCheckPower+0x88>)
    bb52:	8812      	ldrh	r2, [r2, #0]
    bb54:	801a      	strh	r2, [r3, #0]
		if ((power_hist & 7) == 0)
    bb56:	4b14      	ldr	r3, [pc, #80]	; (bba8 <ButtonCheckPower+0x80>)
    bb58:	881b      	ldrh	r3, [r3, #0]
    bb5a:	1c1a      	adds	r2, r3, #0
    bb5c:	2307      	movs	r3, #7
    bb5e:	4013      	ands	r3, r2
    bb60:	d103      	bne.n	bb6a <ButtonCheckPower+0x42>
		power_pressed = 1;
    bb62:	4b13      	ldr	r3, [pc, #76]	; (bbb0 <ButtonCheckPower+0x88>)
    bb64:	2201      	movs	r2, #1
    bb66:	801a      	strh	r2, [r3, #0]
    bb68:	e002      	b.n	bb70 <ButtonCheckPower+0x48>
		else
		power_pressed = 0;
    bb6a:	4b11      	ldr	r3, [pc, #68]	; (bbb0 <ButtonCheckPower+0x88>)
    bb6c:	2200      	movs	r2, #0
    bb6e:	801a      	strh	r2, [r3, #0]
uint8_t ButtonCheckPower(void)
{
	short int prevKey; 
	uint8_t i;
	
	for (i=0;i<12;i++)
    bb70:	1dfb      	adds	r3, r7, #7
    bb72:	781a      	ldrb	r2, [r3, #0]
    bb74:	1dfb      	adds	r3, r7, #7
    bb76:	3201      	adds	r2, #1
    bb78:	701a      	strb	r2, [r3, #0]
    bb7a:	1dfb      	adds	r3, r7, #7
    bb7c:	781b      	ldrb	r3, [r3, #0]
    bb7e:	2b0b      	cmp	r3, #11
    bb80:	d9d9      	bls.n	bb36 <ButtonCheckPower+0xe>
		if ((power_hist & 7) == 0)
		power_pressed = 1;
		else
		power_pressed = 0;
	}
		if (power_pressed != 0)
    bb82:	4b0b      	ldr	r3, [pc, #44]	; (bbb0 <ButtonCheckPower+0x88>)
    bb84:	881b      	ldrh	r3, [r3, #0]
    bb86:	2b00      	cmp	r3, #0
    bb88:	d006      	beq.n	bb98 <ButtonCheckPower+0x70>
		{
			keyChanged |= KEY_POWER;
    bb8a:	4b0a      	ldr	r3, [pc, #40]	; (bbb4 <ButtonCheckPower+0x8c>)
    bb8c:	781b      	ldrb	r3, [r3, #0]
    bb8e:	2202      	movs	r2, #2
    bb90:	4313      	orrs	r3, r2
    bb92:	b2da      	uxtb	r2, r3
    bb94:	4b07      	ldr	r3, [pc, #28]	; (bbb4 <ButtonCheckPower+0x8c>)
    bb96:	701a      	strb	r2, [r3, #0]
		}
		return power_pressed;
    bb98:	4b05      	ldr	r3, [pc, #20]	; (bbb0 <ButtonCheckPower+0x88>)
    bb9a:	881b      	ldrh	r3, [r3, #0]
    bb9c:	b2db      	uxtb	r3, r3
}
    bb9e:	1c18      	adds	r0, r3, #0
    bba0:	46bd      	mov	sp, r7
    bba2:	b003      	add	sp, #12
    bba4:	bd90      	pop	{r4, r7, pc}
    bba6:	46c0      	nop			; (mov r8, r8)
    bba8:	200004d2 	.word	0x200004d2
    bbac:	0000bae1 	.word	0x0000bae1
    bbb0:	2000306c 	.word	0x2000306c
    bbb4:	20003069 	.word	0x20003069

0000bbb8 <FCCSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void FCCSample(void)
{
    bbb8:	b598      	push	{r3, r4, r7, lr}
    bbba:	af00      	add	r7, sp, #0
	 
	//------------------------
	//check pins
	constantTX_hist = (constantTX_hist << 1) + port_pin_get_input_level(CONSTANTTX);
    bbbc:	4b26      	ldr	r3, [pc, #152]	; (bc58 <FCCSample+0xa0>)
    bbbe:	881b      	ldrh	r3, [r3, #0]
    bbc0:	18db      	adds	r3, r3, r3
    bbc2:	b29c      	uxth	r4, r3
    bbc4:	2000      	movs	r0, #0
    bbc6:	4b25      	ldr	r3, [pc, #148]	; (bc5c <FCCSample+0xa4>)
    bbc8:	4798      	blx	r3
    bbca:	1c03      	adds	r3, r0, #0
    bbcc:	18e3      	adds	r3, r4, r3
    bbce:	b29a      	uxth	r2, r3
    bbd0:	4b21      	ldr	r3, [pc, #132]	; (bc58 <FCCSample+0xa0>)
    bbd2:	801a      	strh	r2, [r3, #0]
	constantRX_hist = (constantRX_hist << 1) + port_pin_get_input_level(CONSTANTRX);
    bbd4:	4b22      	ldr	r3, [pc, #136]	; (bc60 <FCCSample+0xa8>)
    bbd6:	881b      	ldrh	r3, [r3, #0]
    bbd8:	18db      	adds	r3, r3, r3
    bbda:	b29c      	uxth	r4, r3
    bbdc:	2001      	movs	r0, #1
    bbde:	4b1f      	ldr	r3, [pc, #124]	; (bc5c <FCCSample+0xa4>)
    bbe0:	4798      	blx	r3
    bbe2:	1c03      	adds	r3, r0, #0
    bbe4:	18e3      	adds	r3, r4, r3
    bbe6:	b29a      	uxth	r2, r3
    bbe8:	4b1d      	ldr	r3, [pc, #116]	; (bc60 <FCCSample+0xa8>)
    bbea:	801a      	strh	r2, [r3, #0]
	constantCW_hist = (constantCW_hist << 1) + port_pin_get_input_level(CONSTANTCW);
    bbec:	4b1d      	ldr	r3, [pc, #116]	; (bc64 <FCCSample+0xac>)
    bbee:	881b      	ldrh	r3, [r3, #0]
    bbf0:	18db      	adds	r3, r3, r3
    bbf2:	b29c      	uxth	r4, r3
    bbf4:	2036      	movs	r0, #54	; 0x36
    bbf6:	4b19      	ldr	r3, [pc, #100]	; (bc5c <FCCSample+0xa4>)
    bbf8:	4798      	blx	r3
    bbfa:	1c03      	adds	r3, r0, #0
    bbfc:	18e3      	adds	r3, r4, r3
    bbfe:	b29a      	uxth	r2, r3
    bc00:	4b18      	ldr	r3, [pc, #96]	; (bc64 <FCCSample+0xac>)
    bc02:	801a      	strh	r2, [r3, #0]
	 	
	//update vars
 
	if ((constantTX_hist & 7) == 0)
    bc04:	4b14      	ldr	r3, [pc, #80]	; (bc58 <FCCSample+0xa0>)
    bc06:	881b      	ldrh	r3, [r3, #0]
    bc08:	1c1a      	adds	r2, r3, #0
    bc0a:	2307      	movs	r3, #7
    bc0c:	4013      	ands	r3, r2
    bc0e:	d103      	bne.n	bc18 <FCCSample+0x60>
	constantTX_pressed = 1;
    bc10:	4b15      	ldr	r3, [pc, #84]	; (bc68 <FCCSample+0xb0>)
    bc12:	2201      	movs	r2, #1
    bc14:	801a      	strh	r2, [r3, #0]
    bc16:	e002      	b.n	bc1e <FCCSample+0x66>
	else
	constantTX_pressed = 0;
    bc18:	4b13      	ldr	r3, [pc, #76]	; (bc68 <FCCSample+0xb0>)
    bc1a:	2200      	movs	r2, #0
    bc1c:	801a      	strh	r2, [r3, #0]

	 
	if ((constantRX_hist & 7) == 0)
    bc1e:	4b10      	ldr	r3, [pc, #64]	; (bc60 <FCCSample+0xa8>)
    bc20:	881b      	ldrh	r3, [r3, #0]
    bc22:	1c1a      	adds	r2, r3, #0
    bc24:	2307      	movs	r3, #7
    bc26:	4013      	ands	r3, r2
    bc28:	d103      	bne.n	bc32 <FCCSample+0x7a>
	constantRX_pressed = 1;
    bc2a:	4b10      	ldr	r3, [pc, #64]	; (bc6c <FCCSample+0xb4>)
    bc2c:	2201      	movs	r2, #1
    bc2e:	801a      	strh	r2, [r3, #0]
    bc30:	e002      	b.n	bc38 <FCCSample+0x80>
	else
	constantRX_pressed = 0;
    bc32:	4b0e      	ldr	r3, [pc, #56]	; (bc6c <FCCSample+0xb4>)
    bc34:	2200      	movs	r2, #0
    bc36:	801a      	strh	r2, [r3, #0]
	
	 
	if ((constantCW_hist & 7) == 0)
    bc38:	4b0a      	ldr	r3, [pc, #40]	; (bc64 <FCCSample+0xac>)
    bc3a:	881b      	ldrh	r3, [r3, #0]
    bc3c:	1c1a      	adds	r2, r3, #0
    bc3e:	2307      	movs	r3, #7
    bc40:	4013      	ands	r3, r2
    bc42:	d103      	bne.n	bc4c <FCCSample+0x94>
	constantCW_pressed = 1;
    bc44:	4b0a      	ldr	r3, [pc, #40]	; (bc70 <FCCSample+0xb8>)
    bc46:	2201      	movs	r2, #1
    bc48:	801a      	strh	r2, [r3, #0]
    bc4a:	e002      	b.n	bc52 <FCCSample+0x9a>
	else
	constantCW_pressed = 0;	
    bc4c:	4b08      	ldr	r3, [pc, #32]	; (bc70 <FCCSample+0xb8>)
    bc4e:	2200      	movs	r2, #0
    bc50:	801a      	strh	r2, [r3, #0]
}
    bc52:	46bd      	mov	sp, r7
    bc54:	bd98      	pop	{r3, r4, r7, pc}
    bc56:	46c0      	nop			; (mov r8, r8)
    bc58:	200004ca 	.word	0x200004ca
    bc5c:	0000bae1 	.word	0x0000bae1
    bc60:	200004cc 	.word	0x200004cc
    bc64:	200004ce 	.word	0x200004ce
    bc68:	200004c4 	.word	0x200004c4
    bc6c:	200004c6 	.word	0x200004c6
    bc70:	200004c8 	.word	0x200004c8

0000bc74 <ButtonChanged>:
 

uint8_t ButtonChanged(void)
{
    bc74:	b580      	push	{r7, lr}
    bc76:	b082      	sub	sp, #8
    bc78:	af00      	add	r7, sp, #0
	uint8_t which; 
	which = keyChanged; 
    bc7a:	1dfb      	adds	r3, r7, #7
    bc7c:	4a05      	ldr	r2, [pc, #20]	; (bc94 <ButtonChanged+0x20>)
    bc7e:	7812      	ldrb	r2, [r2, #0]
    bc80:	701a      	strb	r2, [r3, #0]
	keyChanged = 0;	
    bc82:	4b04      	ldr	r3, [pc, #16]	; (bc94 <ButtonChanged+0x20>)
    bc84:	2200      	movs	r2, #0
    bc86:	701a      	strb	r2, [r3, #0]
	return which;
    bc88:	1dfb      	adds	r3, r7, #7
    bc8a:	781b      	ldrb	r3, [r3, #0]
	
}
    bc8c:	1c18      	adds	r0, r3, #0
    bc8e:	46bd      	mov	sp, r7
    bc90:	b002      	add	sp, #8
    bc92:	bd80      	pop	{r7, pc}
    bc94:	20003069 	.word	0x20003069

0000bc98 <ButtonSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void ButtonSample(void)
{
    bc98:	b590      	push	{r4, r7, lr}
    bc9a:	b083      	sub	sp, #12
    bc9c:	af00      	add	r7, sp, #0
  
#endif	
#if BRAKEBOARD
	//------------------------
	//check pins
	setup_hist = (setup_hist << 1) + port_pin_get_input_level(BUTTON_SETUP);
    bc9e:	4b74      	ldr	r3, [pc, #464]	; (be70 <ButtonSample+0x1d8>)
    bca0:	881b      	ldrh	r3, [r3, #0]
    bca2:	18db      	adds	r3, r3, r3
    bca4:	b29c      	uxth	r4, r3
    bca6:	200f      	movs	r0, #15
    bca8:	4b72      	ldr	r3, [pc, #456]	; (be74 <ButtonSample+0x1dc>)
    bcaa:	4798      	blx	r3
    bcac:	1c03      	adds	r3, r0, #0
    bcae:	18e3      	adds	r3, r4, r3
    bcb0:	b29a      	uxth	r2, r3
    bcb2:	4b6f      	ldr	r3, [pc, #444]	; (be70 <ButtonSample+0x1d8>)
    bcb4:	801a      	strh	r2, [r3, #0]
	power_hist = (power_hist << 1) + port_pin_get_input_level(BUTTON_POWER);
    bcb6:	4b70      	ldr	r3, [pc, #448]	; (be78 <ButtonSample+0x1e0>)
    bcb8:	881b      	ldrh	r3, [r3, #0]
    bcba:	18db      	adds	r3, r3, r3
    bcbc:	b29c      	uxth	r4, r3
    bcbe:	200e      	movs	r0, #14
    bcc0:	4b6c      	ldr	r3, [pc, #432]	; (be74 <ButtonSample+0x1dc>)
    bcc2:	4798      	blx	r3
    bcc4:	1c03      	adds	r3, r0, #0
    bcc6:	18e3      	adds	r3, r4, r3
    bcc8:	b29a      	uxth	r2, r3
    bcca:	4b6b      	ldr	r3, [pc, #428]	; (be78 <ButtonSample+0x1e0>)
    bccc:	801a      	strh	r2, [r3, #0]
	breakawayRing_hist = (breakawayRing_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_RING);	
    bcce:	4b6b      	ldr	r3, [pc, #428]	; (be7c <ButtonSample+0x1e4>)
    bcd0:	881b      	ldrh	r3, [r3, #0]
    bcd2:	18db      	adds	r3, r3, r3
    bcd4:	b29c      	uxth	r4, r3
    bcd6:	2016      	movs	r0, #22
    bcd8:	4b66      	ldr	r3, [pc, #408]	; (be74 <ButtonSample+0x1dc>)
    bcda:	4798      	blx	r3
    bcdc:	1c03      	adds	r3, r0, #0
    bcde:	18e3      	adds	r3, r4, r3
    bce0:	b29a      	uxth	r2, r3
    bce2:	4b66      	ldr	r3, [pc, #408]	; (be7c <ButtonSample+0x1e4>)
    bce4:	801a      	strh	r2, [r3, #0]
	breakawayTip_hist = (breakawayTip_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_TIP);		
    bce6:	4b66      	ldr	r3, [pc, #408]	; (be80 <ButtonSample+0x1e8>)
    bce8:	881b      	ldrh	r3, [r3, #0]
    bcea:	18db      	adds	r3, r3, r3
    bcec:	b29c      	uxth	r4, r3
    bcee:	2017      	movs	r0, #23
    bcf0:	4b60      	ldr	r3, [pc, #384]	; (be74 <ButtonSample+0x1dc>)
    bcf2:	4798      	blx	r3
    bcf4:	1c03      	adds	r3, r0, #0
    bcf6:	18e3      	adds	r3, r4, r3
    bcf8:	b29a      	uxth	r2, r3
    bcfa:	4b61      	ldr	r3, [pc, #388]	; (be80 <ButtonSample+0x1e8>)
    bcfc:	801a      	strh	r2, [r3, #0]
	 
	//update vars
	prevKey = setup_pressed;
    bcfe:	1dbb      	adds	r3, r7, #6
    bd00:	4a60      	ldr	r2, [pc, #384]	; (be84 <ButtonSample+0x1ec>)
    bd02:	8812      	ldrh	r2, [r2, #0]
    bd04:	801a      	strh	r2, [r3, #0]
	if ((setup_hist & 7) == 0)
    bd06:	4b5a      	ldr	r3, [pc, #360]	; (be70 <ButtonSample+0x1d8>)
    bd08:	881b      	ldrh	r3, [r3, #0]
    bd0a:	1c1a      	adds	r2, r3, #0
    bd0c:	2307      	movs	r3, #7
    bd0e:	4013      	ands	r3, r2
    bd10:	d103      	bne.n	bd1a <ButtonSample+0x82>
	setup_pressed = 1;
    bd12:	4b5c      	ldr	r3, [pc, #368]	; (be84 <ButtonSample+0x1ec>)
    bd14:	2201      	movs	r2, #1
    bd16:	801a      	strh	r2, [r3, #0]
    bd18:	e002      	b.n	bd20 <ButtonSample+0x88>
	else
	setup_pressed = 0;
    bd1a:	4b5a      	ldr	r3, [pc, #360]	; (be84 <ButtonSample+0x1ec>)
    bd1c:	2200      	movs	r2, #0
    bd1e:	801a      	strh	r2, [r3, #0]
	if (prevKey != setup_pressed)
    bd20:	4b58      	ldr	r3, [pc, #352]	; (be84 <ButtonSample+0x1ec>)
    bd22:	881b      	ldrh	r3, [r3, #0]
    bd24:	1dba      	adds	r2, r7, #6
    bd26:	2100      	movs	r1, #0
    bd28:	5e52      	ldrsh	r2, [r2, r1]
    bd2a:	b21b      	sxth	r3, r3
    bd2c:	429a      	cmp	r2, r3
    bd2e:	d006      	beq.n	bd3e <ButtonSample+0xa6>
	{
		keyChanged |= KEY_SETUP;
    bd30:	4b55      	ldr	r3, [pc, #340]	; (be88 <ButtonSample+0x1f0>)
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	2201      	movs	r2, #1
    bd36:	4313      	orrs	r3, r2
    bd38:	b2da      	uxtb	r2, r3
    bd3a:	4b53      	ldr	r3, [pc, #332]	; (be88 <ButtonSample+0x1f0>)
    bd3c:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	
	}

	prevKey = power_pressed;
    bd3e:	1dbb      	adds	r3, r7, #6
    bd40:	4a52      	ldr	r2, [pc, #328]	; (be8c <ButtonSample+0x1f4>)
    bd42:	8812      	ldrh	r2, [r2, #0]
    bd44:	801a      	strh	r2, [r3, #0]
	if ((power_hist & 7) == 0)
    bd46:	4b4c      	ldr	r3, [pc, #304]	; (be78 <ButtonSample+0x1e0>)
    bd48:	881b      	ldrh	r3, [r3, #0]
    bd4a:	1c1a      	adds	r2, r3, #0
    bd4c:	2307      	movs	r3, #7
    bd4e:	4013      	ands	r3, r2
    bd50:	d103      	bne.n	bd5a <ButtonSample+0xc2>
	power_pressed = 1;
    bd52:	4b4e      	ldr	r3, [pc, #312]	; (be8c <ButtonSample+0x1f4>)
    bd54:	2201      	movs	r2, #1
    bd56:	801a      	strh	r2, [r3, #0]
    bd58:	e002      	b.n	bd60 <ButtonSample+0xc8>
	else
	power_pressed = 0;
    bd5a:	4b4c      	ldr	r3, [pc, #304]	; (be8c <ButtonSample+0x1f4>)
    bd5c:	2200      	movs	r2, #0
    bd5e:	801a      	strh	r2, [r3, #0]
	if (prevKey != power_pressed)
    bd60:	4b4a      	ldr	r3, [pc, #296]	; (be8c <ButtonSample+0x1f4>)
    bd62:	881b      	ldrh	r3, [r3, #0]
    bd64:	1dba      	adds	r2, r7, #6
    bd66:	2100      	movs	r1, #0
    bd68:	5e52      	ldrsh	r2, [r2, r1]
    bd6a:	b21b      	sxth	r3, r3
    bd6c:	429a      	cmp	r2, r3
    bd6e:	d006      	beq.n	bd7e <ButtonSample+0xe6>
	{
		keyChanged |= KEY_POWER;
    bd70:	4b45      	ldr	r3, [pc, #276]	; (be88 <ButtonSample+0x1f0>)
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	2202      	movs	r2, #2
    bd76:	4313      	orrs	r3, r2
    bd78:	b2da      	uxtb	r2, r3
    bd7a:	4b43      	ldr	r3, [pc, #268]	; (be88 <ButtonSample+0x1f0>)
    bd7c:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}
	
	prevKey = breakawayRing_pressed;
    bd7e:	1dbb      	adds	r3, r7, #6
    bd80:	4a43      	ldr	r2, [pc, #268]	; (be90 <ButtonSample+0x1f8>)
    bd82:	8812      	ldrh	r2, [r2, #0]
    bd84:	801a      	strh	r2, [r3, #0]
	if ((breakawayRing_hist & 7) == 0)
    bd86:	4b3d      	ldr	r3, [pc, #244]	; (be7c <ButtonSample+0x1e4>)
    bd88:	881b      	ldrh	r3, [r3, #0]
    bd8a:	1c1a      	adds	r2, r3, #0
    bd8c:	2307      	movs	r3, #7
    bd8e:	4013      	ands	r3, r2
    bd90:	d103      	bne.n	bd9a <ButtonSample+0x102>
	breakawayRing_pressed = 1;
    bd92:	4b3f      	ldr	r3, [pc, #252]	; (be90 <ButtonSample+0x1f8>)
    bd94:	2201      	movs	r2, #1
    bd96:	801a      	strh	r2, [r3, #0]
    bd98:	e002      	b.n	bda0 <ButtonSample+0x108>
	else
	breakawayRing_pressed = 0;	
    bd9a:	4b3d      	ldr	r3, [pc, #244]	; (be90 <ButtonSample+0x1f8>)
    bd9c:	2200      	movs	r2, #0
    bd9e:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayRing_pressed)
    bda0:	4b3b      	ldr	r3, [pc, #236]	; (be90 <ButtonSample+0x1f8>)
    bda2:	881b      	ldrh	r3, [r3, #0]
    bda4:	1dba      	adds	r2, r7, #6
    bda6:	2100      	movs	r1, #0
    bda8:	5e52      	ldrsh	r2, [r2, r1]
    bdaa:	b21b      	sxth	r3, r3
    bdac:	429a      	cmp	r2, r3
    bdae:	d006      	beq.n	bdbe <ButtonSample+0x126>
	{
		keyChanged |= KEY_BREAKAWAYRING;
    bdb0:	4b35      	ldr	r3, [pc, #212]	; (be88 <ButtonSample+0x1f0>)
    bdb2:	781b      	ldrb	r3, [r3, #0]
    bdb4:	2204      	movs	r2, #4
    bdb6:	4313      	orrs	r3, r2
    bdb8:	b2da      	uxtb	r2, r3
    bdba:	4b33      	ldr	r3, [pc, #204]	; (be88 <ButtonSample+0x1f0>)
    bdbc:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
	
	prevKey = breakawayTip_pressed;
    bdbe:	1dbb      	adds	r3, r7, #6
    bdc0:	4a34      	ldr	r2, [pc, #208]	; (be94 <ButtonSample+0x1fc>)
    bdc2:	8812      	ldrh	r2, [r2, #0]
    bdc4:	801a      	strh	r2, [r3, #0]
	if ((breakawayTip_hist & 7) == 0)
    bdc6:	4b2e      	ldr	r3, [pc, #184]	; (be80 <ButtonSample+0x1e8>)
    bdc8:	881b      	ldrh	r3, [r3, #0]
    bdca:	1c1a      	adds	r2, r3, #0
    bdcc:	2307      	movs	r3, #7
    bdce:	4013      	ands	r3, r2
    bdd0:	d103      	bne.n	bdda <ButtonSample+0x142>
	breakawayTip_pressed = 1;
    bdd2:	4b30      	ldr	r3, [pc, #192]	; (be94 <ButtonSample+0x1fc>)
    bdd4:	2201      	movs	r2, #1
    bdd6:	801a      	strh	r2, [r3, #0]
    bdd8:	e002      	b.n	bde0 <ButtonSample+0x148>
	else
	breakawayTip_pressed = 0;	
    bdda:	4b2e      	ldr	r3, [pc, #184]	; (be94 <ButtonSample+0x1fc>)
    bddc:	2200      	movs	r2, #0
    bdde:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayTip_pressed)
    bde0:	4b2c      	ldr	r3, [pc, #176]	; (be94 <ButtonSample+0x1fc>)
    bde2:	881b      	ldrh	r3, [r3, #0]
    bde4:	1dba      	adds	r2, r7, #6
    bde6:	2100      	movs	r1, #0
    bde8:	5e52      	ldrsh	r2, [r2, r1]
    bdea:	b21b      	sxth	r3, r3
    bdec:	429a      	cmp	r2, r3
    bdee:	d006      	beq.n	bdfe <ButtonSample+0x166>
	{
		keyChanged |= KEY_BREAKAWAYTIP;
    bdf0:	4b25      	ldr	r3, [pc, #148]	; (be88 <ButtonSample+0x1f0>)
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	2208      	movs	r2, #8
    bdf6:	4313      	orrs	r3, r2
    bdf8:	b2da      	uxtb	r2, r3
    bdfa:	4b23      	ldr	r3, [pc, #140]	; (be88 <ButtonSample+0x1f0>)
    bdfc:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
		
	flimitState = port_pin_get_input_level(FLIMIT);	
    bdfe:	2015      	movs	r0, #21
    be00:	4b1c      	ldr	r3, [pc, #112]	; (be74 <ButtonSample+0x1dc>)
    be02:	4798      	blx	r3
    be04:	1c03      	adds	r3, r0, #0
    be06:	1c1a      	adds	r2, r3, #0
    be08:	4b23      	ldr	r3, [pc, #140]	; (be98 <ButtonSample+0x200>)
    be0a:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    be0c:	2014      	movs	r0, #20
    be0e:	4b19      	ldr	r3, [pc, #100]	; (be74 <ButtonSample+0x1dc>)
    be10:	4798      	blx	r3
    be12:	1c03      	adds	r3, r0, #0
    be14:	1c1a      	adds	r2, r3, #0
    be16:	4b21      	ldr	r3, [pc, #132]	; (be9c <ButtonSample+0x204>)
    be18:	701a      	strb	r2, [r3, #0]
//V01_11							deconfigure_wdt();
//V01_11							NVIC_SystemReset();					
						}		
				}	
*/				
				if (((keyChanged & KEY_POWER)!= 0)&&(power_pressed != 0))
    be1a:	4b1b      	ldr	r3, [pc, #108]	; (be88 <ButtonSample+0x1f0>)
    be1c:	781b      	ldrb	r3, [r3, #0]
    be1e:	1c1a      	adds	r2, r3, #0
    be20:	2302      	movs	r3, #2
    be22:	4013      	ands	r3, r2
    be24:	d021      	beq.n	be6a <ButtonSample+0x1d2>
    be26:	4b19      	ldr	r3, [pc, #100]	; (be8c <ButtonSample+0x1f4>)
    be28:	881b      	ldrh	r3, [r3, #0]
    be2a:	2b00      	cmp	r3, #0
    be2c:	d01d      	beq.n	be6a <ButtonSample+0x1d2>
				{
					if (poweredUp == 0)
    be2e:	4b1c      	ldr	r3, [pc, #112]	; (bea0 <ButtonSample+0x208>)
    be30:	781b      	ldrb	r3, [r3, #0]
    be32:	2b00      	cmp	r3, #0
    be34:	d10f      	bne.n	be56 <ButtonSample+0x1be>
					{
						poweredUp = 1;
    be36:	4b1a      	ldr	r3, [pc, #104]	; (bea0 <ButtonSample+0x208>)
    be38:	2201      	movs	r2, #1
    be3a:	701a      	strb	r2, [r3, #0]
						MotorOff(1);  //added in v01_20			
    be3c:	2001      	movs	r0, #1
    be3e:	4b19      	ldr	r3, [pc, #100]	; (bea4 <ButtonSample+0x20c>)
    be40:	4798      	blx	r3
						brakeStatus.BrakeState &= ~(BRAKESTATE_INPUTVOLTAGEBAD&BRAKESTATE_LOWSUPERCAP); 			
    be42:	4b19      	ldr	r3, [pc, #100]	; (bea8 <ButtonSample+0x210>)
    be44:	791a      	ldrb	r2, [r3, #4]
    be46:	4b18      	ldr	r3, [pc, #96]	; (bea8 <ButtonSample+0x210>)
    be48:	711a      	strb	r2, [r3, #4]
						brakeState = BRAKESTATE_RESET;
    be4a:	4b18      	ldr	r3, [pc, #96]	; (beac <ButtonSample+0x214>)
    be4c:	2200      	movs	r2, #0
    be4e:	701a      	strb	r2, [r3, #0]
						BrakeBoardStateMachineTask();	
    be50:	4b17      	ldr	r3, [pc, #92]	; (beb0 <ButtonSample+0x218>)
    be52:	4798      	blx	r3
    be54:	e009      	b.n	be6a <ButtonSample+0x1d2>
					}
					else
					{
							poweredUp = 0;
    be56:	4b12      	ldr	r3, [pc, #72]	; (bea0 <ButtonSample+0x208>)
    be58:	2200      	movs	r2, #0
    be5a:	701a      	strb	r2, [r3, #0]
							MotorOff(1);  //added in v01_20
    be5c:	2001      	movs	r0, #1
    be5e:	4b11      	ldr	r3, [pc, #68]	; (bea4 <ButtonSample+0x20c>)
    be60:	4798      	blx	r3
							//V01_20 added below
//							port_pin_set_output_level(SUPERCAPEN,false);							
							deconfigure_wdt();
    be62:	4b14      	ldr	r3, [pc, #80]	; (beb4 <ButtonSample+0x21c>)
    be64:	4798      	blx	r3
							NVIC_SystemReset();								
    be66:	4b14      	ldr	r3, [pc, #80]	; (beb8 <ButtonSample+0x220>)
    be68:	4798      	blx	r3
					}
				}	
	
#endif		
}
    be6a:	46bd      	mov	sp, r7
    be6c:	b003      	add	sp, #12
    be6e:	bd90      	pop	{r4, r7, pc}
    be70:	200004d0 	.word	0x200004d0
    be74:	0000bae1 	.word	0x0000bae1
    be78:	200004d2 	.word	0x200004d2
    be7c:	200004d4 	.word	0x200004d4
    be80:	200004d6 	.word	0x200004d6
    be84:	2000306e 	.word	0x2000306e
    be88:	20003069 	.word	0x20003069
    be8c:	2000306c 	.word	0x2000306c
    be90:	2000306a 	.word	0x2000306a
    be94:	20003070 	.word	0x20003070
    be98:	20003072 	.word	0x20003072
    be9c:	20003068 	.word	0x20003068
    bea0:	200036b5 	.word	0x200036b5
    bea4:	00009b75 	.word	0x00009b75
    bea8:	20003694 	.word	0x20003694
    beac:	20002ebf 	.word	0x20002ebf
    beb0:	00006ef5 	.word	0x00006ef5
    beb4:	0000ece9 	.word	0x0000ece9
    beb8:	0000ba41 	.word	0x0000ba41

0000bebc <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    bebc:	b580      	push	{r7, lr}
    bebe:	af00      	add	r7, sp, #0
    bec0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    bec4:	4b02      	ldr	r3, [pc, #8]	; (bed0 <NVIC_SystemReset+0x14>)
    bec6:	4a03      	ldr	r2, [pc, #12]	; (bed4 <NVIC_SystemReset+0x18>)
    bec8:	60da      	str	r2, [r3, #12]
    beca:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    bece:	e7fe      	b.n	bece <NVIC_SystemReset+0x12>
    bed0:	e000ed00 	.word	0xe000ed00
    bed4:	05fa0004 	.word	0x05fa0004

0000bed8 <GetAppInfo>:
// FUNCTION: GetAppInfo
//------------------------------------------------------------------------------
// This function parses app info starting at the given addr (failure returns 0)
//==============================================================================
uint8_t GetAppInfo(uint32_t startAddress, AppInfo* info)
{
    bed8:	b580      	push	{r7, lr}
    beda:	b084      	sub	sp, #16
    bedc:	af00      	add	r7, sp, #0
    bede:	6078      	str	r0, [r7, #4]
    bee0:	6039      	str	r1, [r7, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
    bee2:	1c3b      	adds	r3, r7, #0
    bee4:	330e      	adds	r3, #14
    bee6:	2200      	movs	r2, #0
    bee8:	701a      	strb	r2, [r3, #0]
	
	success = 0;
    beea:	1c3b      	adds	r3, r7, #0
    beec:	330f      	adds	r3, #15
    beee:	2200      	movs	r2, #0
    bef0:	701a      	strb	r2, [r3, #0]
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    bef2:	687b      	ldr	r3, [r7, #4]
    bef4:	60bb      	str	r3, [r7, #8]
    bef6:	e03c      	b.n	bf72 <GetAppInfo+0x9a>
	{
		if (*((uint32_t*)addr) == APP_INFO_START)
    bef8:	68bb      	ldr	r3, [r7, #8]
    befa:	681a      	ldr	r2, [r3, #0]
    befc:	4b24      	ldr	r3, [pc, #144]	; (bf90 <GetAppInfo+0xb8>)
    befe:	429a      	cmp	r2, r3
    bf00:	d120      	bne.n	bf44 <GetAppInfo+0x6c>
		{
			info->checksum = *(uint32_t*)(addr + 4);
    bf02:	68bb      	ldr	r3, [r7, #8]
    bf04:	3304      	adds	r3, #4
    bf06:	681a      	ldr	r2, [r3, #0]
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	601a      	str	r2, [r3, #0]
			info->appLength = *(uint32_t*)(addr + 8);
    bf0c:	68bb      	ldr	r3, [r7, #8]
    bf0e:	3308      	adds	r3, #8
    bf10:	681a      	ldr	r2, [r3, #0]
    bf12:	683b      	ldr	r3, [r7, #0]
    bf14:	605a      	str	r2, [r3, #4]
			info->version = *(uint32_t*)(addr + 12);
    bf16:	68bb      	ldr	r3, [r7, #8]
    bf18:	330c      	adds	r3, #12
    bf1a:	681a      	ldr	r2, [r3, #0]
    bf1c:	683b      	ldr	r3, [r7, #0]
    bf1e:	60da      	str	r2, [r3, #12]
			info->filetype1 = *(uint32_t*)(addr + 32);
    bf20:	68bb      	ldr	r3, [r7, #8]
    bf22:	3320      	adds	r3, #32
    bf24:	681a      	ldr	r2, [r3, #0]
    bf26:	683b      	ldr	r3, [r7, #0]
    bf28:	611a      	str	r2, [r3, #16]
			info->filetype2 = *(uint32_t*)(addr + 36);
    bf2a:	68bb      	ldr	r3, [r7, #8]
    bf2c:	3324      	adds	r3, #36	; 0x24
    bf2e:	681a      	ldr	r2, [r3, #0]
    bf30:	683b      	ldr	r3, [r7, #0]
    bf32:	615a      	str	r2, [r3, #20]
			appInfoStarted = 1;
    bf34:	1c3b      	adds	r3, r7, #0
    bf36:	330e      	adds	r3, #14
    bf38:	2201      	movs	r2, #1
    bf3a:	701a      	strb	r2, [r3, #0]
			addr += 16;
    bf3c:	68bb      	ldr	r3, [r7, #8]
    bf3e:	3310      	adds	r3, #16
    bf40:	60bb      	str	r3, [r7, #8]
    bf42:	e013      	b.n	bf6c <GetAppInfo+0x94>
		}
		else if (appInfoStarted)
    bf44:	1c3b      	adds	r3, r7, #0
    bf46:	330e      	adds	r3, #14
    bf48:	781b      	ldrb	r3, [r3, #0]
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d00e      	beq.n	bf6c <GetAppInfo+0x94>
		{
			if (*((uint32_t*)addr) == APP_INFO_END)
    bf4e:	68bb      	ldr	r3, [r7, #8]
    bf50:	681a      	ldr	r2, [r3, #0]
    bf52:	4b10      	ldr	r3, [pc, #64]	; (bf94 <GetAppInfo+0xbc>)
    bf54:	429a      	cmp	r2, r3
    bf56:	d109      	bne.n	bf6c <GetAppInfo+0x94>
			{
				//save address to start checksum at
				info->checksumStartOffset = addr + 4 - startAddress;
    bf58:	68ba      	ldr	r2, [r7, #8]
    bf5a:	687b      	ldr	r3, [r7, #4]
    bf5c:	1ad3      	subs	r3, r2, r3
    bf5e:	1d1a      	adds	r2, r3, #4
    bf60:	683b      	ldr	r3, [r7, #0]
    bf62:	609a      	str	r2, [r3, #8]
				
				//success
				success = 1;
    bf64:	1c3b      	adds	r3, r7, #0
    bf66:	330f      	adds	r3, #15
    bf68:	2201      	movs	r2, #1
    bf6a:	701a      	strb	r2, [r3, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
	
	success = 0;
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    bf6c:	68bb      	ldr	r3, [r7, #8]
    bf6e:	3304      	adds	r3, #4
    bf70:	60bb      	str	r3, [r7, #8]
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	2180      	movs	r1, #128	; 0x80
    bf76:	0089      	lsls	r1, r1, #2
    bf78:	185a      	adds	r2, r3, r1
    bf7a:	68bb      	ldr	r3, [r7, #8]
    bf7c:	429a      	cmp	r2, r3
    bf7e:	d8bb      	bhi.n	bef8 <GetAppInfo+0x20>
		}
		//else we haven't found the app info start marker yet
	}
	
	//we didn't find both a start and end marker
	return success;
    bf80:	1c3b      	adds	r3, r7, #0
    bf82:	330f      	adds	r3, #15
    bf84:	781b      	ldrb	r3, [r3, #0]
} 
    bf86:	1c18      	adds	r0, r3, #0
    bf88:	46bd      	mov	sp, r7
    bf8a:	b004      	add	sp, #16
    bf8c:	bd80      	pop	{r7, pc}
    bf8e:	46c0      	nop			; (mov r8, r8)
    bf90:	89abcdef 	.word	0x89abcdef
    bf94:	fedcba98 	.word	0xfedcba98

0000bf98 <CheckScratch>:
#if BRAKEBOARD 

void CheckScratch(void)
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	af00      	add	r7, sp, #0
	
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    bf9c:	2384      	movs	r3, #132	; 0x84
    bf9e:	029a      	lsls	r2, r3, #10
    bfa0:	4b08      	ldr	r3, [pc, #32]	; (bfc4 <CheckScratch+0x2c>)
    bfa2:	1c10      	adds	r0, r2, #0
    bfa4:	1c19      	adds	r1, r3, #0
    bfa6:	4b08      	ldr	r3, [pc, #32]	; (bfc8 <CheckScratch+0x30>)
    bfa8:	4798      	blx	r3
    bfaa:	1c03      	adds	r3, r0, #0
    bfac:	2b00      	cmp	r3, #0
    bfae:	d006      	beq.n	bfbe <CheckScratch+0x26>
    bfb0:	4b04      	ldr	r3, [pc, #16]	; (bfc4 <CheckScratch+0x2c>)
    bfb2:	691b      	ldr	r3, [r3, #16]
    bfb4:	2b35      	cmp	r3, #53	; 0x35
    bfb6:	d102      	bne.n	bfbe <CheckScratch+0x26>
		{
			newRemoteDownloadNeeded = TRUE; 
    bfb8:	4b04      	ldr	r3, [pc, #16]	; (bfcc <CheckScratch+0x34>)
    bfba:	2201      	movs	r2, #1
    bfbc:	701a      	strb	r2, [r3, #0]
		}			
}
    bfbe:	46bd      	mov	sp, r7
    bfc0:	bd80      	pop	{r7, pc}
    bfc2:	46c0      	nop			; (mov r8, r8)
    bfc4:	2000308c 	.word	0x2000308c
    bfc8:	0000bed9 	.word	0x0000bed9
    bfcc:	200004bb 	.word	0x200004bb

0000bfd0 <DownloadDoneTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void DownloadDoneTask(void)
{
    bfd0:	b580      	push	{r7, lr}
    bfd2:	af00      	add	r7, sp, #0
	//	uint32_t version;
	//}AppInfo;
	//
	// extern AppInfo brakeApp;
	// extern AppInfo remoteApp;	
	if ((GetAppInfo(APP_SCRATCH_BASE, &newBrakeInfo)!= 0)&&(newBrakeInfo.filetype1==0x34))
    bfd4:	2384      	movs	r3, #132	; 0x84
    bfd6:	029a      	lsls	r2, r3, #10
    bfd8:	4b14      	ldr	r3, [pc, #80]	; (c02c <DownloadDoneTask+0x5c>)
    bfda:	1c10      	adds	r0, r2, #0
    bfdc:	1c19      	adds	r1, r3, #0
    bfde:	4b14      	ldr	r3, [pc, #80]	; (c030 <DownloadDoneTask+0x60>)
    bfe0:	4798      	blx	r3
    bfe2:	1c03      	adds	r3, r0, #0
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d006      	beq.n	bff6 <DownloadDoneTask+0x26>
    bfe8:	4b10      	ldr	r3, [pc, #64]	; (c02c <DownloadDoneTask+0x5c>)
    bfea:	691b      	ldr	r3, [r3, #16]
    bfec:	2b34      	cmp	r3, #52	; 0x34
    bfee:	d102      	bne.n	bff6 <DownloadDoneTask+0x26>
	{
		//---------------BRAKE DOWNLOAD .... 
		// Force a reset. 
		//----------------------------------
		/* Reset module and boot into application */
		NVIC_SystemReset();
    bff0:	4b10      	ldr	r3, [pc, #64]	; (c034 <DownloadDoneTask+0x64>)
    bff2:	4798      	blx	r3
    bff4:	e018      	b.n	c028 <DownloadDoneTask+0x58>
	}	
	else
	{
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    bff6:	2384      	movs	r3, #132	; 0x84
    bff8:	029a      	lsls	r2, r3, #10
    bffa:	4b0f      	ldr	r3, [pc, #60]	; (c038 <DownloadDoneTask+0x68>)
    bffc:	1c10      	adds	r0, r2, #0
    bffe:	1c19      	adds	r1, r3, #0
    c000:	4b0b      	ldr	r3, [pc, #44]	; (c030 <DownloadDoneTask+0x60>)
    c002:	4798      	blx	r3
    c004:	1c03      	adds	r3, r0, #0
    c006:	2b00      	cmp	r3, #0
    c008:	d00e      	beq.n	c028 <DownloadDoneTask+0x58>
    c00a:	4b0b      	ldr	r3, [pc, #44]	; (c038 <DownloadDoneTask+0x68>)
    c00c:	691b      	ldr	r3, [r3, #16]
    c00e:	2b35      	cmp	r3, #53	; 0x35
    c010:	d10a      	bne.n	c028 <DownloadDoneTask+0x58>
		{
			//---------------REMOTE DOWNLOAD .... 
			// Download to remote
			//----------------------------------
			newRemoteDownloadNeeded = TRUE; 
    c012:	4b0a      	ldr	r3, [pc, #40]	; (c03c <DownloadDoneTask+0x6c>)
    c014:	2201      	movs	r2, #1
    c016:	701a      	strb	r2, [r3, #0]
			//01_10
			whichRadio = WHICHRADIO_LORA;
    c018:	4b09      	ldr	r3, [pc, #36]	; (c040 <DownloadDoneTask+0x70>)
    c01a:	2299      	movs	r2, #153	; 0x99
    c01c:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE;
    c01e:	4b09      	ldr	r3, [pc, #36]	; (c044 <DownloadDoneTask+0x74>)
    c020:	2200      	movs	r2, #0
    c022:	701a      	strb	r2, [r3, #0]
			CommInit();			
    c024:	4b08      	ldr	r3, [pc, #32]	; (c048 <DownloadDoneTask+0x78>)
    c026:	4798      	blx	r3
		}			
	}
 
}
    c028:	46bd      	mov	sp, r7
    c02a:	bd80      	pop	{r7, pc}
    c02c:	20003074 	.word	0x20003074
    c030:	0000bed9 	.word	0x0000bed9
    c034:	0000bebd 	.word	0x0000bebd
    c038:	2000308c 	.word	0x2000308c
    c03c:	200004bb 	.word	0x200004bb
    c040:	200036d2 	.word	0x200036d2
    c044:	200004ba 	.word	0x200004ba
    c048:	0000f4fd 	.word	0x0000f4fd

0000c04c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    c04c:	b580      	push	{r7, lr}
    c04e:	b084      	sub	sp, #16
    c050:	af00      	add	r7, sp, #0
    c052:	1c02      	adds	r2, r0, #0
    c054:	1dfb      	adds	r3, r7, #7
    c056:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c058:	1c3b      	adds	r3, r7, #0
    c05a:	330f      	adds	r3, #15
    c05c:	1dfa      	adds	r2, r7, #7
    c05e:	7812      	ldrb	r2, [r2, #0]
    c060:	09d2      	lsrs	r2, r2, #7
    c062:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c064:	1c3b      	adds	r3, r7, #0
    c066:	330e      	adds	r3, #14
    c068:	1dfa      	adds	r2, r7, #7
    c06a:	7812      	ldrb	r2, [r2, #0]
    c06c:	0952      	lsrs	r2, r2, #5
    c06e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c070:	4b0d      	ldr	r3, [pc, #52]	; (c0a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c072:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    c074:	1c3b      	adds	r3, r7, #0
    c076:	330f      	adds	r3, #15
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d10e      	bne.n	c09c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    c07e:	1c3b      	adds	r3, r7, #0
    c080:	330f      	adds	r3, #15
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	009b      	lsls	r3, r3, #2
    c086:	2210      	movs	r2, #16
    c088:	19d2      	adds	r2, r2, r7
    c08a:	18d3      	adds	r3, r2, r3
    c08c:	3b08      	subs	r3, #8
    c08e:	681a      	ldr	r2, [r3, #0]
    c090:	1c3b      	adds	r3, r7, #0
    c092:	330e      	adds	r3, #14
    c094:	781b      	ldrb	r3, [r3, #0]
    c096:	01db      	lsls	r3, r3, #7
    c098:	18d3      	adds	r3, r2, r3
    c09a:	e000      	b.n	c09e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    c09c:	2300      	movs	r3, #0
	}
}
    c09e:	1c18      	adds	r0, r3, #0
    c0a0:	46bd      	mov	sp, r7
    c0a2:	b004      	add	sp, #16
    c0a4:	bd80      	pop	{r7, pc}
    c0a6:	46c0      	nop			; (mov r8, r8)
    c0a8:	41004400 	.word	0x41004400

0000c0ac <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    c0ac:	b580      	push	{r7, lr}
    c0ae:	b082      	sub	sp, #8
    c0b0:	af00      	add	r7, sp, #0
    c0b2:	1c02      	adds	r2, r0, #0
    c0b4:	1dfb      	adds	r3, r7, #7
    c0b6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c0b8:	1dfb      	adds	r3, r7, #7
    c0ba:	781b      	ldrb	r3, [r3, #0]
    c0bc:	1c18      	adds	r0, r3, #0
    c0be:	4b03      	ldr	r3, [pc, #12]	; (c0cc <port_get_group_from_gpio_pin+0x20>)
    c0c0:	4798      	blx	r3
    c0c2:	1c03      	adds	r3, r0, #0
}
    c0c4:	1c18      	adds	r0, r3, #0
    c0c6:	46bd      	mov	sp, r7
    c0c8:	b002      	add	sp, #8
    c0ca:	bd80      	pop	{r7, pc}
    c0cc:	0000c04d 	.word	0x0000c04d

0000c0d0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    c0d0:	b580      	push	{r7, lr}
    c0d2:	b082      	sub	sp, #8
    c0d4:	af00      	add	r7, sp, #0
    c0d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    c0d8:	687b      	ldr	r3, [r7, #4]
    c0da:	2200      	movs	r2, #0
    c0dc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c0de:	687b      	ldr	r3, [r7, #4]
    c0e0:	2201      	movs	r2, #1
    c0e2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c0e4:	687b      	ldr	r3, [r7, #4]
    c0e6:	2200      	movs	r2, #0
    c0e8:	709a      	strb	r2, [r3, #2]
}
    c0ea:	46bd      	mov	sp, r7
    c0ec:	b002      	add	sp, #8
    c0ee:	bd80      	pop	{r7, pc}

0000c0f0 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b084      	sub	sp, #16
    c0f4:	af00      	add	r7, sp, #0
    c0f6:	1c0a      	adds	r2, r1, #0
    c0f8:	1dfb      	adds	r3, r7, #7
    c0fa:	1c01      	adds	r1, r0, #0
    c0fc:	7019      	strb	r1, [r3, #0]
    c0fe:	1dbb      	adds	r3, r7, #6
    c100:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c102:	1dfb      	adds	r3, r7, #7
    c104:	781b      	ldrb	r3, [r3, #0]
    c106:	1c18      	adds	r0, r3, #0
    c108:	4b0d      	ldr	r3, [pc, #52]	; (c140 <port_pin_set_output_level+0x50>)
    c10a:	4798      	blx	r3
    c10c:	1c03      	adds	r3, r0, #0
    c10e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c110:	1dfb      	adds	r3, r7, #7
    c112:	781a      	ldrb	r2, [r3, #0]
    c114:	231f      	movs	r3, #31
    c116:	4013      	ands	r3, r2
    c118:	2201      	movs	r2, #1
    c11a:	1c11      	adds	r1, r2, #0
    c11c:	4099      	lsls	r1, r3
    c11e:	1c0b      	adds	r3, r1, #0
    c120:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    c122:	1dbb      	adds	r3, r7, #6
    c124:	781b      	ldrb	r3, [r3, #0]
    c126:	2b00      	cmp	r3, #0
    c128:	d003      	beq.n	c132 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    c12a:	68fb      	ldr	r3, [r7, #12]
    c12c:	68ba      	ldr	r2, [r7, #8]
    c12e:	619a      	str	r2, [r3, #24]
    c130:	e002      	b.n	c138 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c132:	68fb      	ldr	r3, [r7, #12]
    c134:	68ba      	ldr	r2, [r7, #8]
    c136:	615a      	str	r2, [r3, #20]
	}
}
    c138:	46bd      	mov	sp, r7
    c13a:	b004      	add	sp, #16
    c13c:	bd80      	pop	{r7, pc}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	0000c0ad 	.word	0x0000c0ad

0000c144 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    c144:	b580      	push	{r7, lr}
    c146:	b084      	sub	sp, #16
    c148:	af00      	add	r7, sp, #0
    c14a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    c14c:	687b      	ldr	r3, [r7, #4]
    c14e:	681b      	ldr	r3, [r3, #0]
    c150:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    c152:	68fb      	ldr	r3, [r7, #12]
    c154:	8a1b      	ldrh	r3, [r3, #16]
    c156:	b29b      	uxth	r3, r3
    c158:	1c1a      	adds	r2, r3, #0
    c15a:	2380      	movs	r3, #128	; 0x80
    c15c:	021b      	lsls	r3, r3, #8
    c15e:	4013      	ands	r3, r2
    c160:	1e5a      	subs	r2, r3, #1
    c162:	4193      	sbcs	r3, r2
    c164:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    c166:	1c18      	adds	r0, r3, #0
    c168:	46bd      	mov	sp, r7
    c16a:	b004      	add	sp, #16
    c16c:	bd80      	pop	{r7, pc}
    c16e:	46c0      	nop			; (mov r8, r8)

0000c170 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    c170:	b580      	push	{r7, lr}
    c172:	b082      	sub	sp, #8
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    c178:	46c0      	nop			; (mov r8, r8)
    c17a:	687b      	ldr	r3, [r7, #4]
    c17c:	1c18      	adds	r0, r3, #0
    c17e:	4b04      	ldr	r3, [pc, #16]	; (c190 <_i2c_master_wait_for_sync+0x20>)
    c180:	4798      	blx	r3
    c182:	1c03      	adds	r3, r0, #0
    c184:	2b00      	cmp	r3, #0
    c186:	d1f8      	bne.n	c17a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    c188:	46bd      	mov	sp, r7
    c18a:	b002      	add	sp, #8
    c18c:	bd80      	pop	{r7, pc}
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	0000c145 	.word	0x0000c145

0000c194 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    c194:	b580      	push	{r7, lr}
    c196:	b082      	sub	sp, #8
    c198:	af00      	add	r7, sp, #0
    c19a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = 300;   //I2C_MASTER_BAUD_RATE_100KHZ;
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	2296      	movs	r2, #150	; 0x96
    c1a0:	0052      	lsls	r2, r2, #1
    c1a2:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	2200      	movs	r2, #0
    c1a8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby   = false;
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	2200      	movs	r2, #0
    c1ae:	741a      	strb	r2, [r3, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	2280      	movs	r2, #128	; 0x80
    c1b4:	0392      	lsls	r2, r2, #14
    c1b6:	609a      	str	r2, [r3, #8]
	config->buffer_timeout   = 65535;
    c1b8:	687b      	ldr	r3, [r7, #4]
    c1ba:	2201      	movs	r2, #1
    c1bc:	4252      	negs	r2, r2
    c1be:	81da      	strh	r2, [r3, #14]
	config->unknown_bus_state_timeout = 65535;
    c1c0:	687b      	ldr	r3, [r7, #4]
    c1c2:	2201      	movs	r2, #1
    c1c4:	4252      	negs	r2, r2
    c1c6:	819a      	strh	r2, [r3, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    c1c8:	687b      	ldr	r3, [r7, #4]
    c1ca:	2200      	movs	r2, #0
    c1cc:	615a      	str	r2, [r3, #20]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    c1ce:	687b      	ldr	r3, [r7, #4]
    c1d0:	2200      	movs	r2, #0
    c1d2:	619a      	str	r2, [r3, #24]
	config->scl_low_timeout  = false;
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	2200      	movs	r2, #0
    c1d8:	771a      	strb	r2, [r3, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c1da:	687b      	ldr	r3, [r7, #4]
    c1dc:	2200      	movs	r2, #0
    c1de:	621a      	str	r2, [r3, #32]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
}
    c1e0:	46bd      	mov	sp, r7
    c1e2:	b002      	add	sp, #8
    c1e4:	bd80      	pop	{r7, pc}
    c1e6:	46c0      	nop			; (mov r8, r8)

0000c1e8 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    c1e8:	b580      	push	{r7, lr}
    c1ea:	b084      	sub	sp, #16
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c1f0:	687b      	ldr	r3, [r7, #4]
    c1f2:	681b      	ldr	r3, [r3, #0]
    c1f4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    c1f6:	2300      	movs	r3, #0
    c1f8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    c1fa:	687b      	ldr	r3, [r7, #4]
    c1fc:	1c18      	adds	r0, r3, #0
    c1fe:	4b10      	ldr	r3, [pc, #64]	; (c240 <i2c_master_enable+0x58>)
    c200:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c202:	68bb      	ldr	r3, [r7, #8]
    c204:	681b      	ldr	r3, [r3, #0]
    c206:	2202      	movs	r2, #2
    c208:	431a      	orrs	r2, r3
    c20a:	68bb      	ldr	r3, [r7, #8]
    c20c:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c20e:	e00c      	b.n	c22a <i2c_master_enable+0x42>
		timeout_counter++;
    c210:	68fb      	ldr	r3, [r7, #12]
    c212:	3301      	adds	r3, #1
    c214:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	88db      	ldrh	r3, [r3, #6]
    c21a:	1c1a      	adds	r2, r3, #0
    c21c:	68fb      	ldr	r3, [r7, #12]
    c21e:	429a      	cmp	r2, r3
    c220:	d803      	bhi.n	c22a <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c222:	68bb      	ldr	r3, [r7, #8]
    c224:	2210      	movs	r2, #16
    c226:	821a      	strh	r2, [r3, #16]
			/* Workaround #1 */
			return;
    c228:	e006      	b.n	c238 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c22a:	68bb      	ldr	r3, [r7, #8]
    c22c:	8a1b      	ldrh	r3, [r3, #16]
    c22e:	b29b      	uxth	r3, r3
    c230:	1c1a      	adds	r2, r3, #0
    c232:	2310      	movs	r3, #16
    c234:	4013      	ands	r3, r2
    c236:	d0eb      	beq.n	c210 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    c238:	46bd      	mov	sp, r7
    c23a:	b004      	add	sp, #16
    c23c:	bd80      	pop	{r7, pc}
    c23e:	46c0      	nop			; (mov r8, r8)
    c240:	0000c171 	.word	0x0000c171

0000c244 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    c244:	b580      	push	{r7, lr}
    c246:	b084      	sub	sp, #16
    c248:	af00      	add	r7, sp, #0
    c24a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c24c:	687b      	ldr	r3, [r7, #4]
    c24e:	681b      	ldr	r3, [r3, #0]
    c250:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    c252:	687b      	ldr	r3, [r7, #4]
    c254:	1c18      	adds	r0, r3, #0
    c256:	4b06      	ldr	r3, [pc, #24]	; (c270 <i2c_master_disable+0x2c>)
    c258:	4798      	blx	r3

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    c25a:	68fb      	ldr	r3, [r7, #12]
    c25c:	681b      	ldr	r3, [r3, #0]
    c25e:	2202      	movs	r2, #2
    c260:	1c19      	adds	r1, r3, #0
    c262:	4391      	bics	r1, r2
    c264:	1c0a      	adds	r2, r1, #0
    c266:	68fb      	ldr	r3, [r7, #12]
    c268:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Disable module interrupts */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif
}
    c26a:	46bd      	mov	sp, r7
    c26c:	b004      	add	sp, #16
    c26e:	bd80      	pop	{r7, pc}
    c270:	0000c171 	.word	0x0000c171

0000c274 <RecoverI2C>:
	
//---------------------LOCAL FUNCTION PROTOTYPES--------------------------   
void configure_i2c_master(void);

void RecoverI2C(void)
{
    c274:	b580      	push	{r7, lr}
    c276:	b082      	sub	sp, #8
    c278:	af00      	add	r7, sp, #0
	uint8_t i; 
	struct port_config pin_conf;
 
	i2c_master_disable(&i2c_master_instance);
    c27a:	4b33      	ldr	r3, [pc, #204]	; (c348 <RecoverI2C+0xd4>)
    c27c:	1c18      	adds	r0, r3, #0
    c27e:	4b33      	ldr	r3, [pc, #204]	; (c34c <RecoverI2C+0xd8>)
    c280:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    c282:	1d3b      	adds	r3, r7, #4
    c284:	1c18      	adds	r0, r3, #0
    c286:	4b32      	ldr	r3, [pc, #200]	; (c350 <RecoverI2C+0xdc>)
    c288:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c28a:	1d3b      	adds	r3, r7, #4
    c28c:	2201      	movs	r2, #1
    c28e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    c290:	1d3b      	adds	r3, r7, #4
    c292:	200c      	movs	r0, #12
    c294:	1c19      	adds	r1, r3, #0
    c296:	4b2f      	ldr	r3, [pc, #188]	; (c354 <RecoverI2C+0xe0>)
    c298:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    c29a:	200c      	movs	r0, #12
    c29c:	2100      	movs	r1, #0
    c29e:	4b2e      	ldr	r3, [pc, #184]	; (c358 <RecoverI2C+0xe4>)
    c2a0:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c2a2:	1d3b      	adds	r3, r7, #4
    c2a4:	2201      	movs	r2, #1
    c2a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    c2a8:	1d3b      	adds	r3, r7, #4
    c2aa:	200d      	movs	r0, #13
    c2ac:	1c19      	adds	r1, r3, #0
    c2ae:	4b29      	ldr	r3, [pc, #164]	; (c354 <RecoverI2C+0xe0>)
    c2b0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    c2b2:	200d      	movs	r0, #13
    c2b4:	2100      	movs	r1, #0
    c2b6:	4b28      	ldr	r3, [pc, #160]	; (c358 <RecoverI2C+0xe4>)
    c2b8:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c2ba:	1d3b      	adds	r3, r7, #4
    c2bc:	2201      	movs	r2, #1
    c2be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    c2c0:	1d3b      	adds	r3, r7, #4
    c2c2:	200d      	movs	r0, #13
    c2c4:	1c19      	adds	r1, r3, #0
    c2c6:	4b23      	ldr	r3, [pc, #140]	; (c354 <RecoverI2C+0xe0>)
    c2c8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    c2ca:	200d      	movs	r0, #13
    c2cc:	2101      	movs	r1, #1
    c2ce:	4b22      	ldr	r3, [pc, #136]	; (c358 <RecoverI2C+0xe4>)
    c2d0:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c2d2:	1d3b      	adds	r3, r7, #4
    c2d4:	2201      	movs	r2, #1
    c2d6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    c2d8:	1d3b      	adds	r3, r7, #4
    c2da:	200c      	movs	r0, #12
    c2dc:	1c19      	adds	r1, r3, #0
    c2de:	4b1d      	ldr	r3, [pc, #116]	; (c354 <RecoverI2C+0xe0>)
    c2e0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    c2e2:	200c      	movs	r0, #12
    c2e4:	2101      	movs	r1, #1
    c2e6:	4b1c      	ldr	r3, [pc, #112]	; (c358 <RecoverI2C+0xe4>)
    c2e8:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    c2ea:	1dfb      	adds	r3, r7, #7
    c2ec:	2200      	movs	r2, #0
    c2ee:	701a      	strb	r2, [r3, #0]
    c2f0:	e020      	b.n	c334 <RecoverI2C+0xc0>
	{
		HardDelay();
    c2f2:	4b1a      	ldr	r3, [pc, #104]	; (c35c <RecoverI2C+0xe8>)
    c2f4:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c2f6:	1d3b      	adds	r3, r7, #4
    c2f8:	2201      	movs	r2, #1
    c2fa:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    c2fc:	1d3b      	adds	r3, r7, #4
    c2fe:	200d      	movs	r0, #13
    c300:	1c19      	adds	r1, r3, #0
    c302:	4b14      	ldr	r3, [pc, #80]	; (c354 <RecoverI2C+0xe0>)
    c304:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    c306:	200d      	movs	r0, #13
    c308:	2100      	movs	r1, #0
    c30a:	4b13      	ldr	r3, [pc, #76]	; (c358 <RecoverI2C+0xe4>)
    c30c:	4798      	blx	r3
		HardDelay();
    c30e:	4b13      	ldr	r3, [pc, #76]	; (c35c <RecoverI2C+0xe8>)
    c310:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c312:	1d3b      	adds	r3, r7, #4
    c314:	2201      	movs	r2, #1
    c316:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    c318:	1d3b      	adds	r3, r7, #4
    c31a:	200d      	movs	r0, #13
    c31c:	1c19      	adds	r1, r3, #0
    c31e:	4b0d      	ldr	r3, [pc, #52]	; (c354 <RecoverI2C+0xe0>)
    c320:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    c322:	200d      	movs	r0, #13
    c324:	2101      	movs	r1, #1
    c326:	4b0c      	ldr	r3, [pc, #48]	; (c358 <RecoverI2C+0xe4>)
    c328:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    c32a:	1dfb      	adds	r3, r7, #7
    c32c:	781a      	ldrb	r2, [r3, #0]
    c32e:	1dfb      	adds	r3, r7, #7
    c330:	3201      	adds	r2, #1
    c332:	701a      	strb	r2, [r3, #0]
    c334:	1dfb      	adds	r3, r7, #7
    c336:	781b      	ldrb	r3, [r3, #0]
    c338:	2b0f      	cmp	r3, #15
    c33a:	d9da      	bls.n	c2f2 <RecoverI2C+0x7e>
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
		port_pin_set_config(PIN_PA13, &pin_conf);
		port_pin_set_output_level(PIN_PA13, TRUE);		
	}
	
	configure_i2c_master();
    c33c:	4b08      	ldr	r3, [pc, #32]	; (c360 <RecoverI2C+0xec>)
    c33e:	4798      	blx	r3
}
    c340:	46bd      	mov	sp, r7
    c342:	b002      	add	sp, #8
    c344:	bd80      	pop	{r7, pc}
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	200030a8 	.word	0x200030a8
    c34c:	0000c245 	.word	0x0000c245
    c350:	0000c0d1 	.word	0x0000c0d1
    c354:	00011dbd 	.word	0x00011dbd
    c358:	0000c0f1 	.word	0x0000c0f1
    c35c:	0000ed25 	.word	0x0000ed25
    c360:	0000c8e5 	.word	0x0000c8e5

0000c364 <I2CAccelBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    c364:	b580      	push	{r7, lr}
    c366:	b084      	sub	sp, #16
    c368:	af00      	add	r7, sp, #0
    c36a:	6078      	str	r0, [r7, #4]
    c36c:	1cfb      	adds	r3, r7, #3
    c36e:	7019      	strb	r1, [r3, #0]
    c370:	1cbb      	adds	r3, r7, #2
    c372:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    c374:	1c3b      	adds	r3, r7, #0
    c376:	330f      	adds	r3, #15
    c378:	2200      	movs	r2, #0
    c37a:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    c37c:	4b52      	ldr	r3, [pc, #328]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c37e:	2219      	movs	r2, #25
    c380:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c382:	4b51      	ldr	r3, [pc, #324]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c384:	4a51      	ldr	r2, [pc, #324]	; (c4cc <I2CAccelBufferRead+0x168>)
    c386:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c388:	4b4f      	ldr	r3, [pc, #316]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c38a:	2200      	movs	r2, #0
    c38c:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c38e:	4b4e      	ldr	r3, [pc, #312]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c390:	2200      	movs	r2, #0
    c392:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    c394:	4b4c      	ldr	r3, [pc, #304]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c396:	2200      	movs	r2, #0
    c398:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    c39a:	4b4b      	ldr	r3, [pc, #300]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c39c:	2201      	movs	r2, #1
    c39e:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c3a0:	4b4a      	ldr	r3, [pc, #296]	; (c4cc <I2CAccelBufferRead+0x168>)
    c3a2:	1cfa      	adds	r2, r7, #3
    c3a4:	7812      	ldrb	r2, [r2, #0]
    c3a6:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    c3a8:	1c3b      	adds	r3, r7, #0
    c3aa:	330e      	adds	r3, #14
    c3ac:	2200      	movs	r2, #0
    c3ae:	701a      	strb	r2, [r3, #0]
	done = 0; 
    c3b0:	1c3b      	adds	r3, r7, #0
    c3b2:	330d      	adds	r3, #13
    c3b4:	2200      	movs	r2, #0
    c3b6:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c3b8:	e020      	b.n	c3fc <I2CAccelBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    c3ba:	4a45      	ldr	r2, [pc, #276]	; (c4d0 <I2CAccelBufferRead+0x16c>)
    c3bc:	4b42      	ldr	r3, [pc, #264]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c3be:	1c10      	adds	r0, r2, #0
    c3c0:	1c19      	adds	r1, r3, #0
    c3c2:	4b44      	ldr	r3, [pc, #272]	; (c4d4 <I2CAccelBufferRead+0x170>)
    c3c4:	4798      	blx	r3
    c3c6:	1c03      	adds	r3, r0, #0
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d10a      	bne.n	c3e2 <I2CAccelBufferRead+0x7e>
		{
			done = 1; 
    c3cc:	1c3b      	adds	r3, r7, #0
    c3ce:	330d      	adds	r3, #13
    c3d0:	2201      	movs	r2, #1
    c3d2:	701a      	strb	r2, [r3, #0]
    c3d4:	1c3b      	adds	r3, r7, #0
    c3d6:	330e      	adds	r3, #14
    c3d8:	1c3a      	adds	r2, r7, #0
    c3da:	320e      	adds	r2, #14
    c3dc:	7812      	ldrb	r2, [r2, #0]
    c3de:	701a      	strb	r2, [r3, #0]
    c3e0:	e00c      	b.n	c3fc <I2CAccelBufferRead+0x98>
		}
		else
		{
			tries++;
    c3e2:	1c3b      	adds	r3, r7, #0
    c3e4:	330e      	adds	r3, #14
    c3e6:	781a      	ldrb	r2, [r3, #0]
    c3e8:	1c3b      	adds	r3, r7, #0
    c3ea:	330e      	adds	r3, #14
    c3ec:	3201      	adds	r2, #1
    c3ee:	701a      	strb	r2, [r3, #0]
    c3f0:	1c3b      	adds	r3, r7, #0
    c3f2:	330d      	adds	r3, #13
    c3f4:	1c3a      	adds	r2, r7, #0
    c3f6:	320d      	adds	r2, #13
    c3f8:	7812      	ldrb	r2, [r2, #0]
    c3fa:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    c3fc:	1c3b      	adds	r3, r7, #0
    c3fe:	330d      	adds	r3, #13
    c400:	781b      	ldrb	r3, [r3, #0]
    c402:	2b00      	cmp	r3, #0
    c404:	d104      	bne.n	c410 <I2CAccelBufferRead+0xac>
    c406:	1c3b      	adds	r3, r7, #0
    c408:	330e      	adds	r3, #14
    c40a:	781b      	ldrb	r3, [r3, #0]
    c40c:	2bc7      	cmp	r3, #199	; 0xc7
    c40e:	d9d4      	bls.n	c3ba <I2CAccelBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c410:	1c3b      	adds	r3, r7, #0
    c412:	330d      	adds	r3, #13
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	2b01      	cmp	r3, #1
    c418:	d144      	bne.n	c4a4 <I2CAccelBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    c41a:	1cbb      	adds	r3, r7, #2
    c41c:	781b      	ldrb	r3, [r3, #0]
    c41e:	b29a      	uxth	r2, r3
    c420:	4b29      	ldr	r3, [pc, #164]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c422:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    c424:	4b28      	ldr	r3, [pc, #160]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c426:	687a      	ldr	r2, [r7, #4]
    c428:	605a      	str	r2, [r3, #4]
		tries = 0;
    c42a:	1c3b      	adds	r3, r7, #0
    c42c:	330e      	adds	r3, #14
    c42e:	2200      	movs	r2, #0
    c430:	701a      	strb	r2, [r3, #0]
		done = 0;
    c432:	1c3b      	adds	r3, r7, #0
    c434:	330d      	adds	r3, #13
    c436:	2200      	movs	r2, #0
    c438:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    c43a:	e020      	b.n	c47e <I2CAccelBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c43c:	4a24      	ldr	r2, [pc, #144]	; (c4d0 <I2CAccelBufferRead+0x16c>)
    c43e:	4b22      	ldr	r3, [pc, #136]	; (c4c8 <I2CAccelBufferRead+0x164>)
    c440:	1c10      	adds	r0, r2, #0
    c442:	1c19      	adds	r1, r3, #0
    c444:	4b24      	ldr	r3, [pc, #144]	; (c4d8 <I2CAccelBufferRead+0x174>)
    c446:	4798      	blx	r3
    c448:	1c03      	adds	r3, r0, #0
    c44a:	2b00      	cmp	r3, #0
    c44c:	d10a      	bne.n	c464 <I2CAccelBufferRead+0x100>
			{
				done = 1;
    c44e:	1c3b      	adds	r3, r7, #0
    c450:	330d      	adds	r3, #13
    c452:	2201      	movs	r2, #1
    c454:	701a      	strb	r2, [r3, #0]
    c456:	1c3b      	adds	r3, r7, #0
    c458:	330e      	adds	r3, #14
    c45a:	1c3a      	adds	r2, r7, #0
    c45c:	320e      	adds	r2, #14
    c45e:	7812      	ldrb	r2, [r2, #0]
    c460:	701a      	strb	r2, [r3, #0]
    c462:	e00c      	b.n	c47e <I2CAccelBufferRead+0x11a>
			}
			else
			{
				tries++;
    c464:	1c3b      	adds	r3, r7, #0
    c466:	330e      	adds	r3, #14
    c468:	781a      	ldrb	r2, [r3, #0]
    c46a:	1c3b      	adds	r3, r7, #0
    c46c:	330e      	adds	r3, #14
    c46e:	3201      	adds	r2, #1
    c470:	701a      	strb	r2, [r3, #0]
    c472:	1c3b      	adds	r3, r7, #0
    c474:	330d      	adds	r3, #13
    c476:	1c3a      	adds	r2, r7, #0
    c478:	320d      	adds	r2, #13
    c47a:	7812      	ldrb	r2, [r2, #0]
    c47c:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    c47e:	1c3b      	adds	r3, r7, #0
    c480:	330d      	adds	r3, #13
    c482:	781b      	ldrb	r3, [r3, #0]
    c484:	2b00      	cmp	r3, #0
    c486:	d104      	bne.n	c492 <I2CAccelBufferRead+0x12e>
    c488:	1c3b      	adds	r3, r7, #0
    c48a:	330e      	adds	r3, #14
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	2bc7      	cmp	r3, #199	; 0xc7
    c490:	d9d4      	bls.n	c43c <I2CAccelBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    c492:	1c3b      	adds	r3, r7, #0
    c494:	330d      	adds	r3, #13
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	2b01      	cmp	r3, #1
    c49a:	d103      	bne.n	c4a4 <I2CAccelBufferRead+0x140>
		{
			status = 1; 
    c49c:	1c3b      	adds	r3, r7, #0
    c49e:	330f      	adds	r3, #15
    c4a0:	2201      	movs	r2, #1
    c4a2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    c4a4:	1c3b      	adds	r3, r7, #0
    c4a6:	330f      	adds	r3, #15
    c4a8:	781b      	ldrb	r3, [r3, #0]
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d104      	bne.n	c4b8 <I2CAccelBufferRead+0x154>
	{
		i2cError = 1; 
    c4ae:	4b0b      	ldr	r3, [pc, #44]	; (c4dc <I2CAccelBufferRead+0x178>)
    c4b0:	2201      	movs	r2, #1
    c4b2:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c4b4:	4b0a      	ldr	r3, [pc, #40]	; (c4e0 <I2CAccelBufferRead+0x17c>)
    c4b6:	4798      	blx	r3
	}
	return status; 	
    c4b8:	1c3b      	adds	r3, r7, #0
    c4ba:	330f      	adds	r3, #15
    c4bc:	781b      	ldrb	r3, [r3, #0]
}; 
    c4be:	1c18      	adds	r0, r3, #0
    c4c0:	46bd      	mov	sp, r7
    c4c2:	b004      	add	sp, #16
    c4c4:	bd80      	pop	{r7, pc}
    c4c6:	46c0      	nop			; (mov r8, r8)
    c4c8:	200030d0 	.word	0x200030d0
    c4cc:	200030dc 	.word	0x200030dc
    c4d0:	200030a8 	.word	0x200030a8
    c4d4:	000124fd 	.word	0x000124fd
    c4d8:	000123b1 	.word	0x000123b1
    c4dc:	200030a4 	.word	0x200030a4
    c4e0:	0000c275 	.word	0x0000c275

0000c4e4 <I2CAccelBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b086      	sub	sp, #24
    c4e8:	af00      	add	r7, sp, #0
    c4ea:	6078      	str	r0, [r7, #4]
    c4ec:	1cfb      	adds	r3, r7, #3
    c4ee:	7019      	strb	r1, [r3, #0]
    c4f0:	1cbb      	adds	r3, r7, #2
    c4f2:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    c4f4:	1c3b      	adds	r3, r7, #0
    c4f6:	3317      	adds	r3, #23
    c4f8:	2200      	movs	r2, #0
    c4fa:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    c4fc:	687b      	ldr	r3, [r7, #4]
    c4fe:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    c500:	4b42      	ldr	r3, [pc, #264]	; (c60c <I2CAccelBufferWrite+0x128>)
    c502:	2219      	movs	r2, #25
    c504:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c506:	4b41      	ldr	r3, [pc, #260]	; (c60c <I2CAccelBufferWrite+0x128>)
    c508:	4a41      	ldr	r2, [pc, #260]	; (c610 <I2CAccelBufferWrite+0x12c>)
    c50a:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c50c:	4b3f      	ldr	r3, [pc, #252]	; (c60c <I2CAccelBufferWrite+0x128>)
    c50e:	2200      	movs	r2, #0
    c510:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c512:	4b3e      	ldr	r3, [pc, #248]	; (c60c <I2CAccelBufferWrite+0x128>)
    c514:	2200      	movs	r2, #0
    c516:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    c518:	4b3c      	ldr	r3, [pc, #240]	; (c60c <I2CAccelBufferWrite+0x128>)
    c51a:	2200      	movs	r2, #0
    c51c:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    c51e:	1cbb      	adds	r3, r7, #2
    c520:	781b      	ldrb	r3, [r3, #0]
    c522:	b29b      	uxth	r3, r3
    c524:	3301      	adds	r3, #1
    c526:	b29a      	uxth	r2, r3
    c528:	4b38      	ldr	r3, [pc, #224]	; (c60c <I2CAccelBufferWrite+0x128>)
    c52a:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c52c:	4b38      	ldr	r3, [pc, #224]	; (c610 <I2CAccelBufferWrite+0x12c>)
    c52e:	1cfa      	adds	r2, r7, #3
    c530:	7812      	ldrb	r2, [r2, #0]
    c532:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    c534:	1c3b      	adds	r3, r7, #0
    c536:	330f      	adds	r3, #15
    c538:	2200      	movs	r2, #0
    c53a:	701a      	strb	r2, [r3, #0]
    c53c:	e010      	b.n	c560 <I2CAccelBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    c53e:	1c3b      	adds	r3, r7, #0
    c540:	330f      	adds	r3, #15
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	1c5a      	adds	r2, r3, #1
    c546:	693b      	ldr	r3, [r7, #16]
    c548:	1c59      	adds	r1, r3, #1
    c54a:	6139      	str	r1, [r7, #16]
    c54c:	7819      	ldrb	r1, [r3, #0]
    c54e:	4b30      	ldr	r3, [pc, #192]	; (c610 <I2CAccelBufferWrite+0x12c>)
    c550:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    c552:	1c3b      	adds	r3, r7, #0
    c554:	330f      	adds	r3, #15
    c556:	781a      	ldrb	r2, [r3, #0]
    c558:	1c3b      	adds	r3, r7, #0
    c55a:	330f      	adds	r3, #15
    c55c:	3201      	adds	r2, #1
    c55e:	701a      	strb	r2, [r3, #0]
    c560:	1c3a      	adds	r2, r7, #0
    c562:	320f      	adds	r2, #15
    c564:	1cbb      	adds	r3, r7, #2
    c566:	7812      	ldrb	r2, [r2, #0]
    c568:	781b      	ldrb	r3, [r3, #0]
    c56a:	429a      	cmp	r2, r3
    c56c:	d3e7      	bcc.n	c53e <I2CAccelBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    c56e:	1c3b      	adds	r3, r7, #0
    c570:	3316      	adds	r3, #22
    c572:	2200      	movs	r2, #0
    c574:	701a      	strb	r2, [r3, #0]
	done = 0;
    c576:	1c3b      	adds	r3, r7, #0
    c578:	3315      	adds	r3, #21
    c57a:	2200      	movs	r2, #0
    c57c:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c57e:	e020      	b.n	c5c2 <I2CAccelBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c580:	4a24      	ldr	r2, [pc, #144]	; (c614 <I2CAccelBufferWrite+0x130>)
    c582:	4b22      	ldr	r3, [pc, #136]	; (c60c <I2CAccelBufferWrite+0x128>)
    c584:	1c10      	adds	r0, r2, #0
    c586:	1c19      	adds	r1, r3, #0
    c588:	4b23      	ldr	r3, [pc, #140]	; (c618 <I2CAccelBufferWrite+0x134>)
    c58a:	4798      	blx	r3
    c58c:	1c03      	adds	r3, r0, #0
    c58e:	2b00      	cmp	r3, #0
    c590:	d10a      	bne.n	c5a8 <I2CAccelBufferWrite+0xc4>
		{
			done = 1;
    c592:	1c3b      	adds	r3, r7, #0
    c594:	3315      	adds	r3, #21
    c596:	2201      	movs	r2, #1
    c598:	701a      	strb	r2, [r3, #0]
    c59a:	1c3b      	adds	r3, r7, #0
    c59c:	3316      	adds	r3, #22
    c59e:	1c3a      	adds	r2, r7, #0
    c5a0:	3216      	adds	r2, #22
    c5a2:	7812      	ldrb	r2, [r2, #0]
    c5a4:	701a      	strb	r2, [r3, #0]
    c5a6:	e00c      	b.n	c5c2 <I2CAccelBufferWrite+0xde>
		}
		else
		{
			tries++;
    c5a8:	1c3b      	adds	r3, r7, #0
    c5aa:	3316      	adds	r3, #22
    c5ac:	781a      	ldrb	r2, [r3, #0]
    c5ae:	1c3b      	adds	r3, r7, #0
    c5b0:	3316      	adds	r3, #22
    c5b2:	3201      	adds	r2, #1
    c5b4:	701a      	strb	r2, [r3, #0]
    c5b6:	1c3b      	adds	r3, r7, #0
    c5b8:	3315      	adds	r3, #21
    c5ba:	1c3a      	adds	r2, r7, #0
    c5bc:	3215      	adds	r2, #21
    c5be:	7812      	ldrb	r2, [r2, #0]
    c5c0:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    c5c2:	1c3b      	adds	r3, r7, #0
    c5c4:	3315      	adds	r3, #21
    c5c6:	781b      	ldrb	r3, [r3, #0]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d104      	bne.n	c5d6 <I2CAccelBufferWrite+0xf2>
    c5cc:	1c3b      	adds	r3, r7, #0
    c5ce:	3316      	adds	r3, #22
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	2bc7      	cmp	r3, #199	; 0xc7
    c5d4:	d9d4      	bls.n	c580 <I2CAccelBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c5d6:	1c3b      	adds	r3, r7, #0
    c5d8:	3315      	adds	r3, #21
    c5da:	781b      	ldrb	r3, [r3, #0]
    c5dc:	2b01      	cmp	r3, #1
    c5de:	d103      	bne.n	c5e8 <I2CAccelBufferWrite+0x104>
	{
		status = 1;
    c5e0:	1c3b      	adds	r3, r7, #0
    c5e2:	3317      	adds	r3, #23
    c5e4:	2201      	movs	r2, #1
    c5e6:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    c5e8:	1c3b      	adds	r3, r7, #0
    c5ea:	3317      	adds	r3, #23
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d104      	bne.n	c5fc <I2CAccelBufferWrite+0x118>
	{
		i2cError = 1; 
    c5f2:	4b0a      	ldr	r3, [pc, #40]	; (c61c <I2CAccelBufferWrite+0x138>)
    c5f4:	2201      	movs	r2, #1
    c5f6:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c5f8:	4b09      	ldr	r3, [pc, #36]	; (c620 <I2CAccelBufferWrite+0x13c>)
    c5fa:	4798      	blx	r3
	}	
	return status;
    c5fc:	1c3b      	adds	r3, r7, #0
    c5fe:	3317      	adds	r3, #23
    c600:	781b      	ldrb	r3, [r3, #0]
};
    c602:	1c18      	adds	r0, r3, #0
    c604:	46bd      	mov	sp, r7
    c606:	b006      	add	sp, #24
    c608:	bd80      	pop	{r7, pc}
    c60a:	46c0      	nop			; (mov r8, r8)
    c60c:	200030d0 	.word	0x200030d0
    c610:	200030dc 	.word	0x200030dc
    c614:	200030a8 	.word	0x200030a8
    c618:	000124fd 	.word	0x000124fd
    c61c:	200030a4 	.word	0x200030a4
    c620:	0000c275 	.word	0x0000c275

0000c624 <I2CEEPROMBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    c624:	b580      	push	{r7, lr}
    c626:	b084      	sub	sp, #16
    c628:	af00      	add	r7, sp, #0
    c62a:	6078      	str	r0, [r7, #4]
    c62c:	1cfb      	adds	r3, r7, #3
    c62e:	7019      	strb	r1, [r3, #0]
    c630:	1cbb      	adds	r3, r7, #2
    c632:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    c634:	1c3b      	adds	r3, r7, #0
    c636:	330f      	adds	r3, #15
    c638:	2200      	movs	r2, #0
    c63a:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    c63c:	4b52      	ldr	r3, [pc, #328]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c63e:	2250      	movs	r2, #80	; 0x50
    c640:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c642:	4b51      	ldr	r3, [pc, #324]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c644:	4a51      	ldr	r2, [pc, #324]	; (c78c <I2CEEPROMBufferRead+0x168>)
    c646:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c648:	4b4f      	ldr	r3, [pc, #316]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c64a:	2200      	movs	r2, #0
    c64c:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c64e:	4b4e      	ldr	r3, [pc, #312]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c650:	2200      	movs	r2, #0
    c652:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    c654:	4b4c      	ldr	r3, [pc, #304]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c656:	2200      	movs	r2, #0
    c658:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    c65a:	4b4b      	ldr	r3, [pc, #300]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c65c:	2201      	movs	r2, #1
    c65e:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c660:	4b4a      	ldr	r3, [pc, #296]	; (c78c <I2CEEPROMBufferRead+0x168>)
    c662:	1cfa      	adds	r2, r7, #3
    c664:	7812      	ldrb	r2, [r2, #0]
    c666:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    c668:	1c3b      	adds	r3, r7, #0
    c66a:	330e      	adds	r3, #14
    c66c:	2200      	movs	r2, #0
    c66e:	701a      	strb	r2, [r3, #0]
	done = 0; 
    c670:	1c3b      	adds	r3, r7, #0
    c672:	330d      	adds	r3, #13
    c674:	2200      	movs	r2, #0
    c676:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c678:	e020      	b.n	c6bc <I2CEEPROMBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    c67a:	4a45      	ldr	r2, [pc, #276]	; (c790 <I2CEEPROMBufferRead+0x16c>)
    c67c:	4b42      	ldr	r3, [pc, #264]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c67e:	1c10      	adds	r0, r2, #0
    c680:	1c19      	adds	r1, r3, #0
    c682:	4b44      	ldr	r3, [pc, #272]	; (c794 <I2CEEPROMBufferRead+0x170>)
    c684:	4798      	blx	r3
    c686:	1c03      	adds	r3, r0, #0
    c688:	2b00      	cmp	r3, #0
    c68a:	d10a      	bne.n	c6a2 <I2CEEPROMBufferRead+0x7e>
		{
			done = 1; 
    c68c:	1c3b      	adds	r3, r7, #0
    c68e:	330d      	adds	r3, #13
    c690:	2201      	movs	r2, #1
    c692:	701a      	strb	r2, [r3, #0]
    c694:	1c3b      	adds	r3, r7, #0
    c696:	330e      	adds	r3, #14
    c698:	1c3a      	adds	r2, r7, #0
    c69a:	320e      	adds	r2, #14
    c69c:	7812      	ldrb	r2, [r2, #0]
    c69e:	701a      	strb	r2, [r3, #0]
    c6a0:	e00c      	b.n	c6bc <I2CEEPROMBufferRead+0x98>
		}
		else
		{
			tries++;
    c6a2:	1c3b      	adds	r3, r7, #0
    c6a4:	330e      	adds	r3, #14
    c6a6:	781a      	ldrb	r2, [r3, #0]
    c6a8:	1c3b      	adds	r3, r7, #0
    c6aa:	330e      	adds	r3, #14
    c6ac:	3201      	adds	r2, #1
    c6ae:	701a      	strb	r2, [r3, #0]
    c6b0:	1c3b      	adds	r3, r7, #0
    c6b2:	330d      	adds	r3, #13
    c6b4:	1c3a      	adds	r2, r7, #0
    c6b6:	320d      	adds	r2, #13
    c6b8:	7812      	ldrb	r2, [r2, #0]
    c6ba:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    c6bc:	1c3b      	adds	r3, r7, #0
    c6be:	330d      	adds	r3, #13
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d104      	bne.n	c6d0 <I2CEEPROMBufferRead+0xac>
    c6c6:	1c3b      	adds	r3, r7, #0
    c6c8:	330e      	adds	r3, #14
    c6ca:	781b      	ldrb	r3, [r3, #0]
    c6cc:	2bc7      	cmp	r3, #199	; 0xc7
    c6ce:	d9d4      	bls.n	c67a <I2CEEPROMBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c6d0:	1c3b      	adds	r3, r7, #0
    c6d2:	330d      	adds	r3, #13
    c6d4:	781b      	ldrb	r3, [r3, #0]
    c6d6:	2b01      	cmp	r3, #1
    c6d8:	d144      	bne.n	c764 <I2CEEPROMBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    c6da:	1cbb      	adds	r3, r7, #2
    c6dc:	781b      	ldrb	r3, [r3, #0]
    c6de:	b29a      	uxth	r2, r3
    c6e0:	4b29      	ldr	r3, [pc, #164]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c6e2:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    c6e4:	4b28      	ldr	r3, [pc, #160]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c6e6:	687a      	ldr	r2, [r7, #4]
    c6e8:	605a      	str	r2, [r3, #4]
		tries = 0;
    c6ea:	1c3b      	adds	r3, r7, #0
    c6ec:	330e      	adds	r3, #14
    c6ee:	2200      	movs	r2, #0
    c6f0:	701a      	strb	r2, [r3, #0]
		done = 0;
    c6f2:	1c3b      	adds	r3, r7, #0
    c6f4:	330d      	adds	r3, #13
    c6f6:	2200      	movs	r2, #0
    c6f8:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    c6fa:	e020      	b.n	c73e <I2CEEPROMBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c6fc:	4a24      	ldr	r2, [pc, #144]	; (c790 <I2CEEPROMBufferRead+0x16c>)
    c6fe:	4b22      	ldr	r3, [pc, #136]	; (c788 <I2CEEPROMBufferRead+0x164>)
    c700:	1c10      	adds	r0, r2, #0
    c702:	1c19      	adds	r1, r3, #0
    c704:	4b24      	ldr	r3, [pc, #144]	; (c798 <I2CEEPROMBufferRead+0x174>)
    c706:	4798      	blx	r3
    c708:	1c03      	adds	r3, r0, #0
    c70a:	2b00      	cmp	r3, #0
    c70c:	d10a      	bne.n	c724 <I2CEEPROMBufferRead+0x100>
			{
				done = 1;
    c70e:	1c3b      	adds	r3, r7, #0
    c710:	330d      	adds	r3, #13
    c712:	2201      	movs	r2, #1
    c714:	701a      	strb	r2, [r3, #0]
    c716:	1c3b      	adds	r3, r7, #0
    c718:	330e      	adds	r3, #14
    c71a:	1c3a      	adds	r2, r7, #0
    c71c:	320e      	adds	r2, #14
    c71e:	7812      	ldrb	r2, [r2, #0]
    c720:	701a      	strb	r2, [r3, #0]
    c722:	e00c      	b.n	c73e <I2CEEPROMBufferRead+0x11a>
			}
			else
			{
				tries++;
    c724:	1c3b      	adds	r3, r7, #0
    c726:	330e      	adds	r3, #14
    c728:	781a      	ldrb	r2, [r3, #0]
    c72a:	1c3b      	adds	r3, r7, #0
    c72c:	330e      	adds	r3, #14
    c72e:	3201      	adds	r2, #1
    c730:	701a      	strb	r2, [r3, #0]
    c732:	1c3b      	adds	r3, r7, #0
    c734:	330d      	adds	r3, #13
    c736:	1c3a      	adds	r2, r7, #0
    c738:	320d      	adds	r2, #13
    c73a:	7812      	ldrb	r2, [r2, #0]
    c73c:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    c73e:	1c3b      	adds	r3, r7, #0
    c740:	330d      	adds	r3, #13
    c742:	781b      	ldrb	r3, [r3, #0]
    c744:	2b00      	cmp	r3, #0
    c746:	d104      	bne.n	c752 <I2CEEPROMBufferRead+0x12e>
    c748:	1c3b      	adds	r3, r7, #0
    c74a:	330e      	adds	r3, #14
    c74c:	781b      	ldrb	r3, [r3, #0]
    c74e:	2bc7      	cmp	r3, #199	; 0xc7
    c750:	d9d4      	bls.n	c6fc <I2CEEPROMBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    c752:	1c3b      	adds	r3, r7, #0
    c754:	330d      	adds	r3, #13
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	2b01      	cmp	r3, #1
    c75a:	d103      	bne.n	c764 <I2CEEPROMBufferRead+0x140>
		{
			status = 1; 
    c75c:	1c3b      	adds	r3, r7, #0
    c75e:	330f      	adds	r3, #15
    c760:	2201      	movs	r2, #1
    c762:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    c764:	1c3b      	adds	r3, r7, #0
    c766:	330f      	adds	r3, #15
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	2b00      	cmp	r3, #0
    c76c:	d104      	bne.n	c778 <I2CEEPROMBufferRead+0x154>
	{
		i2cError = 1; 
    c76e:	4b0b      	ldr	r3, [pc, #44]	; (c79c <I2CEEPROMBufferRead+0x178>)
    c770:	2201      	movs	r2, #1
    c772:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c774:	4b0a      	ldr	r3, [pc, #40]	; (c7a0 <I2CEEPROMBufferRead+0x17c>)
    c776:	4798      	blx	r3
	}
	return status; 	
    c778:	1c3b      	adds	r3, r7, #0
    c77a:	330f      	adds	r3, #15
    c77c:	781b      	ldrb	r3, [r3, #0]
}; 
    c77e:	1c18      	adds	r0, r3, #0
    c780:	46bd      	mov	sp, r7
    c782:	b004      	add	sp, #16
    c784:	bd80      	pop	{r7, pc}
    c786:	46c0      	nop			; (mov r8, r8)
    c788:	200030d0 	.word	0x200030d0
    c78c:	200030dc 	.word	0x200030dc
    c790:	200030a8 	.word	0x200030a8
    c794:	000124fd 	.word	0x000124fd
    c798:	000123b1 	.word	0x000123b1
    c79c:	200030a4 	.word	0x200030a4
    c7a0:	0000c275 	.word	0x0000c275

0000c7a4 <I2CEEPROMBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    c7a4:	b580      	push	{r7, lr}
    c7a6:	b086      	sub	sp, #24
    c7a8:	af00      	add	r7, sp, #0
    c7aa:	6078      	str	r0, [r7, #4]
    c7ac:	1cfb      	adds	r3, r7, #3
    c7ae:	7019      	strb	r1, [r3, #0]
    c7b0:	1cbb      	adds	r3, r7, #2
    c7b2:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    c7b4:	1c3b      	adds	r3, r7, #0
    c7b6:	3317      	adds	r3, #23
    c7b8:	2200      	movs	r2, #0
    c7ba:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    c7c0:	4b42      	ldr	r3, [pc, #264]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7c2:	2250      	movs	r2, #80	; 0x50
    c7c4:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c7c6:	4b41      	ldr	r3, [pc, #260]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7c8:	4a41      	ldr	r2, [pc, #260]	; (c8d0 <I2CEEPROMBufferWrite+0x12c>)
    c7ca:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c7cc:	4b3f      	ldr	r3, [pc, #252]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7ce:	2200      	movs	r2, #0
    c7d0:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c7d2:	4b3e      	ldr	r3, [pc, #248]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7d4:	2200      	movs	r2, #0
    c7d6:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    c7d8:	4b3c      	ldr	r3, [pc, #240]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7da:	2200      	movs	r2, #0
    c7dc:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    c7de:	1cbb      	adds	r3, r7, #2
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	b29b      	uxth	r3, r3
    c7e4:	3301      	adds	r3, #1
    c7e6:	b29a      	uxth	r2, r3
    c7e8:	4b38      	ldr	r3, [pc, #224]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c7ea:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c7ec:	4b38      	ldr	r3, [pc, #224]	; (c8d0 <I2CEEPROMBufferWrite+0x12c>)
    c7ee:	1cfa      	adds	r2, r7, #3
    c7f0:	7812      	ldrb	r2, [r2, #0]
    c7f2:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    c7f4:	1c3b      	adds	r3, r7, #0
    c7f6:	330f      	adds	r3, #15
    c7f8:	2200      	movs	r2, #0
    c7fa:	701a      	strb	r2, [r3, #0]
    c7fc:	e010      	b.n	c820 <I2CEEPROMBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    c7fe:	1c3b      	adds	r3, r7, #0
    c800:	330f      	adds	r3, #15
    c802:	781b      	ldrb	r3, [r3, #0]
    c804:	1c5a      	adds	r2, r3, #1
    c806:	693b      	ldr	r3, [r7, #16]
    c808:	1c59      	adds	r1, r3, #1
    c80a:	6139      	str	r1, [r7, #16]
    c80c:	7819      	ldrb	r1, [r3, #0]
    c80e:	4b30      	ldr	r3, [pc, #192]	; (c8d0 <I2CEEPROMBufferWrite+0x12c>)
    c810:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    c812:	1c3b      	adds	r3, r7, #0
    c814:	330f      	adds	r3, #15
    c816:	781a      	ldrb	r2, [r3, #0]
    c818:	1c3b      	adds	r3, r7, #0
    c81a:	330f      	adds	r3, #15
    c81c:	3201      	adds	r2, #1
    c81e:	701a      	strb	r2, [r3, #0]
    c820:	1c3a      	adds	r2, r7, #0
    c822:	320f      	adds	r2, #15
    c824:	1cbb      	adds	r3, r7, #2
    c826:	7812      	ldrb	r2, [r2, #0]
    c828:	781b      	ldrb	r3, [r3, #0]
    c82a:	429a      	cmp	r2, r3
    c82c:	d3e7      	bcc.n	c7fe <I2CEEPROMBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    c82e:	1c3b      	adds	r3, r7, #0
    c830:	3316      	adds	r3, #22
    c832:	2200      	movs	r2, #0
    c834:	701a      	strb	r2, [r3, #0]
	done = 0;
    c836:	1c3b      	adds	r3, r7, #0
    c838:	3315      	adds	r3, #21
    c83a:	2200      	movs	r2, #0
    c83c:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c83e:	e020      	b.n	c882 <I2CEEPROMBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c840:	4a24      	ldr	r2, [pc, #144]	; (c8d4 <I2CEEPROMBufferWrite+0x130>)
    c842:	4b22      	ldr	r3, [pc, #136]	; (c8cc <I2CEEPROMBufferWrite+0x128>)
    c844:	1c10      	adds	r0, r2, #0
    c846:	1c19      	adds	r1, r3, #0
    c848:	4b23      	ldr	r3, [pc, #140]	; (c8d8 <I2CEEPROMBufferWrite+0x134>)
    c84a:	4798      	blx	r3
    c84c:	1c03      	adds	r3, r0, #0
    c84e:	2b00      	cmp	r3, #0
    c850:	d10a      	bne.n	c868 <I2CEEPROMBufferWrite+0xc4>
		{
			done = 1;
    c852:	1c3b      	adds	r3, r7, #0
    c854:	3315      	adds	r3, #21
    c856:	2201      	movs	r2, #1
    c858:	701a      	strb	r2, [r3, #0]
    c85a:	1c3b      	adds	r3, r7, #0
    c85c:	3316      	adds	r3, #22
    c85e:	1c3a      	adds	r2, r7, #0
    c860:	3216      	adds	r2, #22
    c862:	7812      	ldrb	r2, [r2, #0]
    c864:	701a      	strb	r2, [r3, #0]
    c866:	e00c      	b.n	c882 <I2CEEPROMBufferWrite+0xde>
		}
		else
		{
			tries++;
    c868:	1c3b      	adds	r3, r7, #0
    c86a:	3316      	adds	r3, #22
    c86c:	781a      	ldrb	r2, [r3, #0]
    c86e:	1c3b      	adds	r3, r7, #0
    c870:	3316      	adds	r3, #22
    c872:	3201      	adds	r2, #1
    c874:	701a      	strb	r2, [r3, #0]
    c876:	1c3b      	adds	r3, r7, #0
    c878:	3315      	adds	r3, #21
    c87a:	1c3a      	adds	r2, r7, #0
    c87c:	3215      	adds	r2, #21
    c87e:	7812      	ldrb	r2, [r2, #0]
    c880:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    c882:	1c3b      	adds	r3, r7, #0
    c884:	3315      	adds	r3, #21
    c886:	781b      	ldrb	r3, [r3, #0]
    c888:	2b00      	cmp	r3, #0
    c88a:	d104      	bne.n	c896 <I2CEEPROMBufferWrite+0xf2>
    c88c:	1c3b      	adds	r3, r7, #0
    c88e:	3316      	adds	r3, #22
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	2bc7      	cmp	r3, #199	; 0xc7
    c894:	d9d4      	bls.n	c840 <I2CEEPROMBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c896:	1c3b      	adds	r3, r7, #0
    c898:	3315      	adds	r3, #21
    c89a:	781b      	ldrb	r3, [r3, #0]
    c89c:	2b01      	cmp	r3, #1
    c89e:	d103      	bne.n	c8a8 <I2CEEPROMBufferWrite+0x104>
	{
		status = 1;
    c8a0:	1c3b      	adds	r3, r7, #0
    c8a2:	3317      	adds	r3, #23
    c8a4:	2201      	movs	r2, #1
    c8a6:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    c8a8:	1c3b      	adds	r3, r7, #0
    c8aa:	3317      	adds	r3, #23
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d104      	bne.n	c8bc <I2CEEPROMBufferWrite+0x118>
	{
		i2cError = 1; 
    c8b2:	4b0a      	ldr	r3, [pc, #40]	; (c8dc <I2CEEPROMBufferWrite+0x138>)
    c8b4:	2201      	movs	r2, #1
    c8b6:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c8b8:	4b09      	ldr	r3, [pc, #36]	; (c8e0 <I2CEEPROMBufferWrite+0x13c>)
    c8ba:	4798      	blx	r3
	}	
	return status;
    c8bc:	1c3b      	adds	r3, r7, #0
    c8be:	3317      	adds	r3, #23
    c8c0:	781b      	ldrb	r3, [r3, #0]
};
    c8c2:	1c18      	adds	r0, r3, #0
    c8c4:	46bd      	mov	sp, r7
    c8c6:	b006      	add	sp, #24
    c8c8:	bd80      	pop	{r7, pc}
    c8ca:	46c0      	nop			; (mov r8, r8)
    c8cc:	200030d0 	.word	0x200030d0
    c8d0:	200030dc 	.word	0x200030dc
    c8d4:	200030a8 	.word	0x200030a8
    c8d8:	000124fd 	.word	0x000124fd
    c8dc:	200030a4 	.word	0x200030a4
    c8e0:	0000c275 	.word	0x0000c275

0000c8e4 <configure_i2c_master>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_i2c_master(void)
{
    c8e4:	b580      	push	{r7, lr}
    c8e6:	b08a      	sub	sp, #40	; 0x28
    c8e8:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	
	//---------------------------------------
	// Initialize config structure and software module.
	//---------------------------------------	
	i2c_master_get_config_defaults(&config_i2c_master);
    c8ea:	1d3b      	adds	r3, r7, #4
    c8ec:	1c18      	adds	r0, r3, #0
    c8ee:	4b0d      	ldr	r3, [pc, #52]	; (c924 <configure_i2c_master+0x40>)
    c8f0:	4798      	blx	r3
	
	//--------------------------------------- 
	// Change buffer timeout to something longer. 
	//---------------------------------------
	config_i2c_master.buffer_timeout = 100;  //was 10000
    c8f2:	1d3b      	adds	r3, r7, #4
    c8f4:	2264      	movs	r2, #100	; 0x64
    c8f6:	81da      	strh	r2, [r3, #14]
	
	//---------------------------------------
	//  
	//---------------------------------------
	config_i2c_master.pinmux_pad0 = EXT2_I2C_SERCOM_PINMUX_PAD0;
    c8f8:	1d3b      	adds	r3, r7, #4
    c8fa:	4a0b      	ldr	r2, [pc, #44]	; (c928 <configure_i2c_master+0x44>)
    c8fc:	615a      	str	r2, [r3, #20]
	config_i2c_master.pinmux_pad1 = EXT2_I2C_SERCOM_PINMUX_PAD1;
    c8fe:	1d3b      	adds	r3, r7, #4
    c900:	4a0a      	ldr	r2, [pc, #40]	; (c92c <configure_i2c_master+0x48>)
    c902:	619a      	str	r2, [r3, #24]
	//---------------------------------------
	// Initialize and enable device with config
	//---------------------------------------	
	i2c_master_init(&i2c_master_instance, SERCOM4, &config_i2c_master);
    c904:	490a      	ldr	r1, [pc, #40]	; (c930 <configure_i2c_master+0x4c>)
    c906:	4a0b      	ldr	r2, [pc, #44]	; (c934 <configure_i2c_master+0x50>)
    c908:	1d3b      	adds	r3, r7, #4
    c90a:	1c08      	adds	r0, r1, #0
    c90c:	1c11      	adds	r1, r2, #0
    c90e:	1c1a      	adds	r2, r3, #0
    c910:	4b09      	ldr	r3, [pc, #36]	; (c938 <configure_i2c_master+0x54>)
    c912:	4798      	blx	r3
	//---------------------------------------
	//
	//---------------------------------------
	i2c_master_enable(&i2c_master_instance);
    c914:	4b06      	ldr	r3, [pc, #24]	; (c930 <configure_i2c_master+0x4c>)
    c916:	1c18      	adds	r0, r3, #0
    c918:	4b08      	ldr	r3, [pc, #32]	; (c93c <configure_i2c_master+0x58>)
    c91a:	4798      	blx	r3
	 
}
    c91c:	46bd      	mov	sp, r7
    c91e:	b00a      	add	sp, #40	; 0x28
    c920:	bd80      	pop	{r7, pc}
    c922:	46c0      	nop			; (mov r8, r8)
    c924:	0000c195 	.word	0x0000c195
    c928:	000c0003 	.word	0x000c0003
    c92c:	000d0003 	.word	0x000d0003
    c930:	200030a8 	.word	0x200030a8
    c934:	42001800 	.word	0x42001800
    c938:	000120cd 	.word	0x000120cd
    c93c:	0000c1e9 	.word	0x0000c1e9

0000c940 <I2Cmain>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void I2Cmain(void)
{
    c940:	b580      	push	{r7, lr}
    c942:	b084      	sub	sp, #16
    c944:	af00      	add	r7, sp, #0
	uint8_t testBuffer[10],n; 
	//---------------------------------------
	// Configure device and enable.
	//---------------------------------------
	configure_i2c_master();
    c946:	4b66      	ldr	r3, [pc, #408]	; (cae0 <I2Cmain+0x1a0>)
    c948:	4798      	blx	r3
	//--------------------------------------
	// read in the EEPROM header and see if CREED 
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,0);	
    c94a:	2003      	movs	r0, #3
    c94c:	2102      	movs	r1, #2
    c94e:	2200      	movs	r2, #0
    c950:	4b64      	ldr	r3, [pc, #400]	; (cae4 <I2Cmain+0x1a4>)
    c952:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    c954:	2003      	movs	r0, #3
    c956:	2101      	movs	r1, #1
    c958:	2200      	movs	r2, #0
    c95a:	4b62      	ldr	r3, [pc, #392]	; (cae4 <I2Cmain+0x1a4>)
    c95c:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
    c95e:	2003      	movs	r0, #3
    c960:	2104      	movs	r1, #4
    c962:	2200      	movs	r2, #0
    c964:	4b5f      	ldr	r3, [pc, #380]	; (cae4 <I2Cmain+0x1a4>)
    c966:	4798      	blx	r3
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    c968:	1c3b      	adds	r3, r7, #0
    c96a:	330f      	adds	r3, #15
    c96c:	2200      	movs	r2, #0
    c96e:	701a      	strb	r2, [r3, #0]
    c970:	e00c      	b.n	c98c <I2Cmain+0x4c>
	{
		eepromManDevSerial[n] = 0; 
    c972:	1c3b      	adds	r3, r7, #0
    c974:	330f      	adds	r3, #15
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	4a5b      	ldr	r2, [pc, #364]	; (cae8 <I2Cmain+0x1a8>)
    c97a:	2100      	movs	r1, #0
    c97c:	54d1      	strb	r1, [r2, r3]
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    c97e:	1c3b      	adds	r3, r7, #0
    c980:	330f      	adds	r3, #15
    c982:	781a      	ldrb	r2, [r3, #0]
    c984:	1c3b      	adds	r3, r7, #0
    c986:	330f      	adds	r3, #15
    c988:	3201      	adds	r2, #1
    c98a:	701a      	strb	r2, [r3, #0]
    c98c:	1c3b      	adds	r3, r7, #0
    c98e:	330f      	adds	r3, #15
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	2b05      	cmp	r3, #5
    c994:	d9ed      	bls.n	c972 <I2Cmain+0x32>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    c996:	4b54      	ldr	r3, [pc, #336]	; (cae8 <I2Cmain+0x1a8>)
    c998:	1c18      	adds	r0, r3, #0
    c99a:	21fa      	movs	r1, #250	; 0xfa
    c99c:	2206      	movs	r2, #6
    c99e:	4b53      	ldr	r3, [pc, #332]	; (caec <I2Cmain+0x1ac>)
    c9a0:	4798      	blx	r3
    c9a2:	1c03      	adds	r3, r0, #0
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d020      	beq.n	c9ea <I2Cmain+0xaa>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    c9a8:	2003      	movs	r0, #3
    c9aa:	2101      	movs	r1, #1
    c9ac:	2201      	movs	r2, #1
    c9ae:	4b4d      	ldr	r3, [pc, #308]	; (cae4 <I2Cmain+0x1a4>)
    c9b0:	4798      	blx	r3
		for (n=0;n<6;n++)
    c9b2:	1c3b      	adds	r3, r7, #0
    c9b4:	330f      	adds	r3, #15
    c9b6:	2200      	movs	r2, #0
    c9b8:	701a      	strb	r2, [r3, #0]
    c9ba:	e011      	b.n	c9e0 <I2Cmain+0xa0>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    c9bc:	1c3b      	adds	r3, r7, #0
    c9be:	330f      	adds	r3, #15
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	1c3a      	adds	r2, r7, #0
    c9c4:	320f      	adds	r2, #15
    c9c6:	7812      	ldrb	r2, [r2, #0]
    c9c8:	4947      	ldr	r1, [pc, #284]	; (cae8 <I2Cmain+0x1a8>)
    c9ca:	5c8a      	ldrb	r2, [r1, r2]
    c9cc:	4948      	ldr	r1, [pc, #288]	; (caf0 <I2Cmain+0x1b0>)
    c9ce:	18cb      	adds	r3, r1, r3
    c9d0:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    c9d2:	1c3b      	adds	r3, r7, #0
    c9d4:	330f      	adds	r3, #15
    c9d6:	781a      	ldrb	r2, [r3, #0]
    c9d8:	1c3b      	adds	r3, r7, #0
    c9da:	330f      	adds	r3, #15
    c9dc:	3201      	adds	r2, #1
    c9de:	701a      	strb	r2, [r3, #0]
    c9e0:	1c3b      	adds	r3, r7, #0
    c9e2:	330f      	adds	r3, #15
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	2b05      	cmp	r3, #5
    c9e8:	d9e8      	bls.n	c9bc <I2Cmain+0x7c>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
		}	
	}
	if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    c9ea:	1d3b      	adds	r3, r7, #4
    c9ec:	1c18      	adds	r0, r3, #0
    c9ee:	2102      	movs	r1, #2
    c9f0:	220a      	movs	r2, #10
    c9f2:	4b3e      	ldr	r3, [pc, #248]	; (caec <I2Cmain+0x1ac>)
    c9f4:	4798      	blx	r3
    c9f6:	1c03      	adds	r3, r0, #0
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d03f      	beq.n	ca7c <I2Cmain+0x13c>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    c9fc:	2003      	movs	r0, #3
    c9fe:	2101      	movs	r1, #1
    ca00:	2201      	movs	r2, #1
    ca02:	4b38      	ldr	r3, [pc, #224]	; (cae4 <I2Cmain+0x1a4>)
    ca04:	4798      	blx	r3
		//------------------------
		// check the HEADER
		if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E'))
    ca06:	1d3b      	adds	r3, r7, #4
    ca08:	781b      	ldrb	r3, [r3, #0]
    ca0a:	2b43      	cmp	r3, #67	; 0x43
    ca0c:	d112      	bne.n	ca34 <I2Cmain+0xf4>
    ca0e:	1d3b      	adds	r3, r7, #4
    ca10:	785b      	ldrb	r3, [r3, #1]
    ca12:	2b52      	cmp	r3, #82	; 0x52
    ca14:	d10e      	bne.n	ca34 <I2Cmain+0xf4>
    ca16:	1d3b      	adds	r3, r7, #4
    ca18:	789b      	ldrb	r3, [r3, #2]
    ca1a:	2b45      	cmp	r3, #69	; 0x45
    ca1c:	d10a      	bne.n	ca34 <I2Cmain+0xf4>
		{
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);	
    ca1e:	2003      	movs	r0, #3
    ca20:	2102      	movs	r1, #2
    ca22:	2201      	movs	r2, #1
    ca24:	4b2f      	ldr	r3, [pc, #188]	; (cae4 <I2Cmain+0x1a4>)
    ca26:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,1);	
    ca28:	2003      	movs	r0, #3
    ca2a:	2104      	movs	r1, #4
    ca2c:	2201      	movs	r2, #1
    ca2e:	4b2d      	ldr	r3, [pc, #180]	; (cae4 <I2Cmain+0x1a4>)
    ca30:	4798      	blx	r3
    ca32:	e051      	b.n	cad8 <I2Cmain+0x198>
		}	
		else
		{
			//-----------------------
			// do a simple test. 
			testBuffer[0] = 0x46;
    ca34:	1d3b      	adds	r3, r7, #4
    ca36:	2246      	movs	r2, #70	; 0x46
    ca38:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0x72; 
    ca3a:	1d3b      	adds	r3, r7, #4
    ca3c:	2272      	movs	r2, #114	; 0x72
    ca3e:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    ca40:	1d3b      	adds	r3, r7, #4
    ca42:	1c18      	adds	r0, r3, #0
    ca44:	2100      	movs	r1, #0
    ca46:	2202      	movs	r2, #2
    ca48:	4b2a      	ldr	r3, [pc, #168]	; (caf4 <I2Cmain+0x1b4>)
    ca4a:	4798      	blx	r3
    ca4c:	1c03      	adds	r3, r0, #0
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d042      	beq.n	cad8 <I2Cmain+0x198>
			{
				testBuffer[0] = 0;
    ca52:	1d3b      	adds	r3, r7, #4
    ca54:	2200      	movs	r2, #0
    ca56:	701a      	strb	r2, [r3, #0]
				testBuffer[1] = 0; 
    ca58:	1d3b      	adds	r3, r7, #4
    ca5a:	2200      	movs	r2, #0
    ca5c:	705a      	strb	r2, [r3, #1]
				if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    ca5e:	1d3b      	adds	r3, r7, #4
    ca60:	1c18      	adds	r0, r3, #0
    ca62:	2100      	movs	r1, #0
    ca64:	2202      	movs	r2, #2
    ca66:	4b21      	ldr	r3, [pc, #132]	; (caec <I2Cmain+0x1ac>)
    ca68:	4798      	blx	r3
    ca6a:	1c03      	adds	r3, r0, #0
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d033      	beq.n	cad8 <I2Cmain+0x198>
				{
					//-----------------------------
					// it worked!!
					AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);					
    ca70:	2003      	movs	r0, #3
    ca72:	2102      	movs	r1, #2
    ca74:	2201      	movs	r2, #1
    ca76:	4b1b      	ldr	r3, [pc, #108]	; (cae4 <I2Cmain+0x1a4>)
    ca78:	4798      	blx	r3
    ca7a:	e02d      	b.n	cad8 <I2Cmain+0x198>
			}			
		}
	}
	else
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    ca7c:	2003      	movs	r0, #3
    ca7e:	2101      	movs	r1, #1
    ca80:	2201      	movs	r2, #1
    ca82:	4b18      	ldr	r3, [pc, #96]	; (cae4 <I2Cmain+0x1a4>)
    ca84:	4798      	blx	r3
		//-----------------------
		// do a simple test. 
		testBuffer[0] = 0x46;
    ca86:	1d3b      	adds	r3, r7, #4
    ca88:	2246      	movs	r2, #70	; 0x46
    ca8a:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 0x72; 
    ca8c:	1d3b      	adds	r3, r7, #4
    ca8e:	2272      	movs	r2, #114	; 0x72
    ca90:	705a      	strb	r2, [r3, #1]
		if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    ca92:	1d3b      	adds	r3, r7, #4
    ca94:	1c18      	adds	r0, r3, #0
    ca96:	2100      	movs	r1, #0
    ca98:	2202      	movs	r2, #2
    ca9a:	4b16      	ldr	r3, [pc, #88]	; (caf4 <I2Cmain+0x1b4>)
    ca9c:	4798      	blx	r3
    ca9e:	1c03      	adds	r3, r0, #0
    caa0:	2b00      	cmp	r3, #0
    caa2:	d014      	beq.n	cace <I2Cmain+0x18e>
		{
			testBuffer[0] = 0;
    caa4:	1d3b      	adds	r3, r7, #4
    caa6:	2200      	movs	r2, #0
    caa8:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0; 
    caaa:	1d3b      	adds	r3, r7, #4
    caac:	2200      	movs	r2, #0
    caae:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    cab0:	1d3b      	adds	r3, r7, #4
    cab2:	1c18      	adds	r0, r3, #0
    cab4:	2100      	movs	r1, #0
    cab6:	2202      	movs	r2, #2
    cab8:	4b0c      	ldr	r3, [pc, #48]	; (caec <I2Cmain+0x1ac>)
    caba:	4798      	blx	r3
    cabc:	1c03      	adds	r3, r0, #0
    cabe:	2b00      	cmp	r3, #0
    cac0:	d00a      	beq.n	cad8 <I2Cmain+0x198>
			{
				//-----------------------------
				// it worked!!
				AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);
    cac2:	2003      	movs	r0, #3
    cac4:	2102      	movs	r1, #2
    cac6:	2201      	movs	r2, #1
    cac8:	4b06      	ldr	r3, [pc, #24]	; (cae4 <I2Cmain+0x1a4>)
    caca:	4798      	blx	r3
    cacc:	e004      	b.n	cad8 <I2Cmain+0x198>
			}
		}
		else
		{
			//----------real failure	
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    cace:	2003      	movs	r0, #3
    cad0:	2101      	movs	r1, #1
    cad2:	2200      	movs	r2, #0
    cad4:	4b03      	ldr	r3, [pc, #12]	; (cae4 <I2Cmain+0x1a4>)
    cad6:	4798      	blx	r3
		}
	}
}
    cad8:	46bd      	mov	sp, r7
    cada:	b004      	add	sp, #16
    cadc:	bd80      	pop	{r7, pc}
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	0000c8e5 	.word	0x0000c8e5
    cae4:	0000f635 	.word	0x0000f635
    cae8:	200030c8 	.word	0x200030c8
    caec:	0000c625 	.word	0x0000c625
    caf0:	20002fb8 	.word	0x20002fb8
    caf4:	0000c7a5 	.word	0x0000c7a5

0000caf8 <ProgramMemory>:
 */
extern unsigned char programming; 
void deconfigure_wdt(void);
void configure_wdt(void);
void ProgramMemory(uint32_t address, uint8_t *buffer, uint16_t len)
{
    caf8:	b580      	push	{r7, lr}
    cafa:	b086      	sub	sp, #24
    cafc:	af00      	add	r7, sp, #0
    cafe:	60f8      	str	r0, [r7, #12]
    cb00:	60b9      	str	r1, [r7, #8]
    cb02:	1dbb      	adds	r3, r7, #6
    cb04:	801a      	strh	r2, [r3, #0]
	 programming = 1; 
    cb06:	4b2b      	ldr	r3, [pc, #172]	; (cbb4 <ProgramMemory+0xbc>)
    cb08:	2201      	movs	r2, #1
    cb0a:	701a      	strb	r2, [r3, #0]
	 deconfigure_wdt();
    cb0c:	4b2a      	ldr	r3, [pc, #168]	; (cbb8 <ProgramMemory+0xc0>)
    cb0e:	4798      	blx	r3
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
    cb10:	1dbb      	adds	r3, r7, #6
    cb12:	881b      	ldrh	r3, [r3, #0]
    cb14:	2b40      	cmp	r3, #64	; 0x40
    cb16:	d933      	bls.n	cb80 <ProgramMemory+0x88>
		uint32_t offset = 0;
    cb18:	2300      	movs	r3, #0
    cb1a:	617b      	str	r3, [r7, #20]

		while (len > NVMCTRL_PAGE_SIZE) {
    cb1c:	e01b      	b.n	cb56 <ProgramMemory+0x5e>
			/* Check if it is first page of a row */
			if ((address & 0xFF) == 0) {
    cb1e:	68fa      	ldr	r2, [r7, #12]
    cb20:	23ff      	movs	r3, #255	; 0xff
    cb22:	4013      	ands	r3, r2
    cb24:	d103      	bne.n	cb2e <ProgramMemory+0x36>
				/* Erase row */
				nvm_erase_row(address);
    cb26:	68fb      	ldr	r3, [r7, #12]
    cb28:	1c18      	adds	r0, r3, #0
    cb2a:	4b24      	ldr	r3, [pc, #144]	; (cbbc <ProgramMemory+0xc4>)
    cb2c:	4798      	blx	r3
			}
			/* Write one page data to flash */
			nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    cb2e:	68ba      	ldr	r2, [r7, #8]
    cb30:	697b      	ldr	r3, [r7, #20]
    cb32:	18d3      	adds	r3, r2, r3
    cb34:	68fa      	ldr	r2, [r7, #12]
    cb36:	1c10      	adds	r0, r2, #0
    cb38:	1c19      	adds	r1, r3, #0
    cb3a:	2240      	movs	r2, #64	; 0x40
    cb3c:	4b20      	ldr	r3, [pc, #128]	; (cbc0 <ProgramMemory+0xc8>)
    cb3e:	4798      	blx	r3
			/* Increment the address to be programmed */
			address += NVMCTRL_PAGE_SIZE;
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	3340      	adds	r3, #64	; 0x40
    cb44:	60fb      	str	r3, [r7, #12]
			/* Increment the offset of the buffer containing data */
			offset += NVMCTRL_PAGE_SIZE;
    cb46:	697b      	ldr	r3, [r7, #20]
    cb48:	3340      	adds	r3, #64	; 0x40
    cb4a:	617b      	str	r3, [r7, #20]
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
    cb4c:	1dbb      	adds	r3, r7, #6
    cb4e:	1dba      	adds	r2, r7, #6
    cb50:	8812      	ldrh	r2, [r2, #0]
    cb52:	3a40      	subs	r2, #64	; 0x40
    cb54:	801a      	strh	r2, [r3, #0]
	 deconfigure_wdt();
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
		uint32_t offset = 0;

		while (len > NVMCTRL_PAGE_SIZE) {
    cb56:	1dbb      	adds	r3, r7, #6
    cb58:	881b      	ldrh	r3, [r3, #0]
    cb5a:	2b40      	cmp	r3, #64	; 0x40
    cb5c:	d8df      	bhi.n	cb1e <ProgramMemory+0x26>
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
		}

		/* Check if there is data remaining to be programmed */
		if (len > 0) {
    cb5e:	1dbb      	adds	r3, r7, #6
    cb60:	881b      	ldrh	r3, [r3, #0]
    cb62:	2b00      	cmp	r3, #0
    cb64:	d00b      	beq.n	cb7e <ProgramMemory+0x86>
			/* Write the data to flash */
			nvm_write_buffer(address, buffer + offset, len);
    cb66:	68ba      	ldr	r2, [r7, #8]
    cb68:	697b      	ldr	r3, [r7, #20]
    cb6a:	18d2      	adds	r2, r2, r3
    cb6c:	68f9      	ldr	r1, [r7, #12]
    cb6e:	1dbb      	adds	r3, r7, #6
    cb70:	881b      	ldrh	r3, [r3, #0]
    cb72:	1c08      	adds	r0, r1, #0
    cb74:	1c11      	adds	r1, r2, #0
    cb76:	1c1a      	adds	r2, r3, #0
    cb78:	4b11      	ldr	r3, [pc, #68]	; (cbc0 <ProgramMemory+0xc8>)
    cb7a:	4798      	blx	r3
    cb7c:	e011      	b.n	cba2 <ProgramMemory+0xaa>
    cb7e:	e010      	b.n	cba2 <ProgramMemory+0xaa>
		}
	} else {
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) {
    cb80:	68fa      	ldr	r2, [r7, #12]
    cb82:	23ff      	movs	r3, #255	; 0xff
    cb84:	4013      	ands	r3, r2
    cb86:	d103      	bne.n	cb90 <ProgramMemory+0x98>
			/* Erase row */
			nvm_erase_row(address);
    cb88:	68fb      	ldr	r3, [r7, #12]
    cb8a:	1c18      	adds	r0, r3, #0
    cb8c:	4b0b      	ldr	r3, [pc, #44]	; (cbbc <ProgramMemory+0xc4>)
    cb8e:	4798      	blx	r3
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
    cb90:	68f9      	ldr	r1, [r7, #12]
    cb92:	68ba      	ldr	r2, [r7, #8]
    cb94:	1dbb      	adds	r3, r7, #6
    cb96:	881b      	ldrh	r3, [r3, #0]
    cb98:	1c08      	adds	r0, r1, #0
    cb9a:	1c11      	adds	r1, r2, #0
    cb9c:	1c1a      	adds	r2, r3, #0
    cb9e:	4b08      	ldr	r3, [pc, #32]	; (cbc0 <ProgramMemory+0xc8>)
    cba0:	4798      	blx	r3
	}
	programming = 0; 
    cba2:	4b04      	ldr	r3, [pc, #16]	; (cbb4 <ProgramMemory+0xbc>)
    cba4:	2200      	movs	r2, #0
    cba6:	701a      	strb	r2, [r3, #0]
	configure_wdt(); 
    cba8:	4b06      	ldr	r3, [pc, #24]	; (cbc4 <ProgramMemory+0xcc>)
    cbaa:	4798      	blx	r3
}
    cbac:	46bd      	mov	sp, r7
    cbae:	b006      	add	sp, #24
    cbb0:	bd80      	pop	{r7, pc}
    cbb2:	46c0      	nop			; (mov r8, r8)
    cbb4:	200004da 	.word	0x200004da
    cbb8:	0000ece9 	.word	0x0000ece9
    cbbc:	000046e1 	.word	0x000046e1
    cbc0:	000045a5 	.word	0x000045a5
    cbc4:	0000ecb1 	.word	0x0000ecb1

0000cbc8 <PressureUpdateTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 	
void PressureUpdateTask(void)
{
    cbc8:	b580      	push	{r7, lr}
    cbca:	b084      	sub	sp, #16
    cbcc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    cbce:	1c3b      	adds	r3, r7, #0
    cbd0:	330f      	adds	r3, #15
    cbd2:	2200      	movs	r2, #0
    cbd4:	701a      	strb	r2, [r3, #0]
    cbd6:	e0b7      	b.n	cd48 <PressureUpdateTask+0x180>
	{
		if ((sensorDynamic[i].Change != 0)&&(sensorDynamic[i].ID[0]!= 0))
    cbd8:	1c3b      	adds	r3, r7, #0
    cbda:	330f      	adds	r3, #15
    cbdc:	781b      	ldrb	r3, [r3, #0]
    cbde:	4a5f      	ldr	r2, [pc, #380]	; (cd5c <PressureUpdateTask+0x194>)
    cbe0:	011b      	lsls	r3, r3, #4
    cbe2:	18d3      	adds	r3, r2, r3
    cbe4:	791b      	ldrb	r3, [r3, #4]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d100      	bne.n	cbec <PressureUpdateTask+0x24>
    cbea:	e0a6      	b.n	cd3a <PressureUpdateTask+0x172>
    cbec:	1c3b      	adds	r3, r7, #0
    cbee:	330f      	adds	r3, #15
    cbf0:	781a      	ldrb	r2, [r3, #0]
    cbf2:	4b5a      	ldr	r3, [pc, #360]	; (cd5c <PressureUpdateTask+0x194>)
    cbf4:	0112      	lsls	r2, r2, #4
    cbf6:	5cd3      	ldrb	r3, [r2, r3]
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d100      	bne.n	cbfe <PressureUpdateTask+0x36>
    cbfc:	e09d      	b.n	cd3a <PressureUpdateTask+0x172>
		{
			//------------------------
			// following for testing status values on the sensors
			// usually this should be disabled. 
			if (nextTestStatus >= MAX_TEST_STATUS)
    cbfe:	4b58      	ldr	r3, [pc, #352]	; (cd60 <PressureUpdateTask+0x198>)
    cc00:	781b      	ldrb	r3, [r3, #0]
    cc02:	2b07      	cmp	r3, #7
    cc04:	d902      	bls.n	cc0c <PressureUpdateTask+0x44>
			{
				nextTestStatus= 0; 
    cc06:	4b56      	ldr	r3, [pc, #344]	; (cd60 <PressureUpdateTask+0x198>)
    cc08:	2200      	movs	r2, #0
    cc0a:	701a      	strb	r2, [r3, #0]
			}			
			testStatus[nextTestStatus++] = sensorDynamic[i].LastPacket[5]; 
    cc0c:	4b54      	ldr	r3, [pc, #336]	; (cd60 <PressureUpdateTask+0x198>)
    cc0e:	781b      	ldrb	r3, [r3, #0]
    cc10:	1c5a      	adds	r2, r3, #1
    cc12:	b2d1      	uxtb	r1, r2
    cc14:	4a52      	ldr	r2, [pc, #328]	; (cd60 <PressureUpdateTask+0x198>)
    cc16:	7011      	strb	r1, [r2, #0]
    cc18:	1c3a      	adds	r2, r7, #0
    cc1a:	320f      	adds	r2, #15
    cc1c:	7812      	ldrb	r2, [r2, #0]
    cc1e:	494f      	ldr	r1, [pc, #316]	; (cd5c <PressureUpdateTask+0x194>)
    cc20:	0112      	lsls	r2, r2, #4
    cc22:	188a      	adds	r2, r1, r2
    cc24:	3205      	adds	r2, #5
    cc26:	7951      	ldrb	r1, [r2, #5]
    cc28:	4a4e      	ldr	r2, [pc, #312]	; (cd64 <PressureUpdateTask+0x19c>)
    cc2a:	54d1      	strb	r1, [r2, r3]
			//-------------------------------- 				
			sensorDynamic[i].Change = 0;
    cc2c:	1c3b      	adds	r3, r7, #0
    cc2e:	330f      	adds	r3, #15
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	4a4a      	ldr	r2, [pc, #296]	; (cd5c <PressureUpdateTask+0x194>)
    cc34:	011b      	lsls	r3, r3, #4
    cc36:	18d3      	adds	r3, r2, r3
    cc38:	2200      	movs	r2, #0
    cc3a:	711a      	strb	r2, [r3, #4]
			//--------------------------
			// handle the temperature 
			// * subtract 40 and you get the Celcius
			sensorDynamic[i].Temperature = sensorDynamic[i].LastPacket[4];
    cc3c:	1c3b      	adds	r3, r7, #0
    cc3e:	330f      	adds	r3, #15
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	1c3a      	adds	r2, r7, #0
    cc44:	320f      	adds	r2, #15
    cc46:	7812      	ldrb	r2, [r2, #0]
    cc48:	4944      	ldr	r1, [pc, #272]	; (cd5c <PressureUpdateTask+0x194>)
    cc4a:	0112      	lsls	r2, r2, #4
    cc4c:	188a      	adds	r2, r1, r2
    cc4e:	3204      	adds	r2, #4
    cc50:	7952      	ldrb	r2, [r2, #5]
    cc52:	4942      	ldr	r1, [pc, #264]	; (cd5c <PressureUpdateTask+0x194>)
    cc54:	011b      	lsls	r3, r3, #4
    cc56:	18cb      	adds	r3, r1, r3
    cc58:	3308      	adds	r3, #8
    cc5a:	719a      	strb	r2, [r3, #6]
			sensorDynamic[i].Temperature -= 40; 
    cc5c:	1c3b      	adds	r3, r7, #0
    cc5e:	330f      	adds	r3, #15
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	1c3a      	adds	r2, r7, #0
    cc64:	320f      	adds	r2, #15
    cc66:	7812      	ldrb	r2, [r2, #0]
    cc68:	493c      	ldr	r1, [pc, #240]	; (cd5c <PressureUpdateTask+0x194>)
    cc6a:	0112      	lsls	r2, r2, #4
    cc6c:	188a      	adds	r2, r1, r2
    cc6e:	3208      	adds	r2, #8
    cc70:	7992      	ldrb	r2, [r2, #6]
    cc72:	3a28      	subs	r2, #40	; 0x28
    cc74:	b2d2      	uxtb	r2, r2
    cc76:	4939      	ldr	r1, [pc, #228]	; (cd5c <PressureUpdateTask+0x194>)
    cc78:	011b      	lsls	r3, r3, #4
    cc7a:	18cb      	adds	r3, r1, r3
    cc7c:	3308      	adds	r3, #8
    cc7e:	719a      	strb	r2, [r3, #6]
			//---------------------------
			// handle the Pressure 
			// 
			sensorDynamic[i].Pressure = 0;
    cc80:	1c3b      	adds	r3, r7, #0
    cc82:	330f      	adds	r3, #15
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	4a35      	ldr	r2, [pc, #212]	; (cd5c <PressureUpdateTask+0x194>)
    cc88:	011b      	lsls	r3, r3, #4
    cc8a:	18d3      	adds	r3, r2, r3
    cc8c:	3308      	adds	r3, #8
    cc8e:	2200      	movs	r2, #0
    cc90:	809a      	strh	r2, [r3, #4]
			itemp = sensorDynamic[i].LastPacket[5]<<4;
    cc92:	1c3b      	adds	r3, r7, #0
    cc94:	330f      	adds	r3, #15
    cc96:	781b      	ldrb	r3, [r3, #0]
    cc98:	4a30      	ldr	r2, [pc, #192]	; (cd5c <PressureUpdateTask+0x194>)
    cc9a:	011b      	lsls	r3, r3, #4
    cc9c:	18d3      	adds	r3, r2, r3
    cc9e:	3305      	adds	r3, #5
    cca0:	795b      	ldrb	r3, [r3, #5]
    cca2:	1c1a      	adds	r2, r3, #0
    cca4:	1c3b      	adds	r3, r7, #0
    cca6:	330c      	adds	r3, #12
    cca8:	0112      	lsls	r2, r2, #4
    ccaa:	801a      	strh	r2, [r3, #0]
			itemp &= 0x0700;
    ccac:	1c3b      	adds	r3, r7, #0
    ccae:	330c      	adds	r3, #12
    ccb0:	1c3a      	adds	r2, r7, #0
    ccb2:	320c      	adds	r2, #12
    ccb4:	8811      	ldrh	r1, [r2, #0]
    ccb6:	22e0      	movs	r2, #224	; 0xe0
    ccb8:	00d2      	lsls	r2, r2, #3
    ccba:	400a      	ands	r2, r1
    ccbc:	801a      	strh	r2, [r3, #0]
			itemp2 = sensorDynamic[i].LastPacket[3];
    ccbe:	1c3b      	adds	r3, r7, #0
    ccc0:	330f      	adds	r3, #15
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	4a25      	ldr	r2, [pc, #148]	; (cd5c <PressureUpdateTask+0x194>)
    ccc6:	011b      	lsls	r3, r3, #4
    ccc8:	18d3      	adds	r3, r2, r3
    ccca:	3303      	adds	r3, #3
    cccc:	795a      	ldrb	r2, [r3, #5]
    ccce:	1c3b      	adds	r3, r7, #0
    ccd0:	330a      	adds	r3, #10
    ccd2:	801a      	strh	r2, [r3, #0]
			itemp |= itemp2; 
    ccd4:	1c3b      	adds	r3, r7, #0
    ccd6:	330c      	adds	r3, #12
    ccd8:	1c39      	adds	r1, r7, #0
    ccda:	310c      	adds	r1, #12
    ccdc:	1c3a      	adds	r2, r7, #0
    ccde:	320a      	adds	r2, #10
    cce0:	8809      	ldrh	r1, [r1, #0]
    cce2:	8812      	ldrh	r2, [r2, #0]
    cce4:	430a      	orrs	r2, r1
    cce6:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp;
    cce8:	1c3b      	adds	r3, r7, #0
    ccea:	330f      	adds	r3, #15
    ccec:	781b      	ldrb	r3, [r3, #0]
    ccee:	4a1b      	ldr	r2, [pc, #108]	; (cd5c <PressureUpdateTask+0x194>)
    ccf0:	011b      	lsls	r3, r3, #4
    ccf2:	18d3      	adds	r3, r2, r3
    ccf4:	3308      	adds	r3, #8
    ccf6:	1c3a      	adds	r2, r7, #0
    ccf8:	320c      	adds	r2, #12
    ccfa:	8812      	ldrh	r2, [r2, #0]
    ccfc:	809a      	strh	r2, [r3, #4]
			ltemp = itemp; 
    ccfe:	1c3b      	adds	r3, r7, #0
    cd00:	330c      	adds	r3, #12
    cd02:	881b      	ldrh	r3, [r3, #0]
    cd04:	607b      	str	r3, [r7, #4]
			ltemp = ltemp * 145038;
    cd06:	687b      	ldr	r3, [r7, #4]
    cd08:	4a17      	ldr	r2, [pc, #92]	; (cd68 <PressureUpdateTask+0x1a0>)
    cd0a:	4353      	muls	r3, r2
    cd0c:	607b      	str	r3, [r7, #4]
			ltemp = ltemp/1000000;
    cd0e:	687a      	ldr	r2, [r7, #4]
    cd10:	4b16      	ldr	r3, [pc, #88]	; (cd6c <PressureUpdateTask+0x1a4>)
    cd12:	1c10      	adds	r0, r2, #0
    cd14:	4916      	ldr	r1, [pc, #88]	; (cd70 <PressureUpdateTask+0x1a8>)
    cd16:	4798      	blx	r3
    cd18:	1c03      	adds	r3, r0, #0
    cd1a:	607b      	str	r3, [r7, #4]
			itemp = ltemp;
    cd1c:	1c3b      	adds	r3, r7, #0
    cd1e:	330c      	adds	r3, #12
    cd20:	687a      	ldr	r2, [r7, #4]
    cd22:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp; 	
    cd24:	1c3b      	adds	r3, r7, #0
    cd26:	330f      	adds	r3, #15
    cd28:	781b      	ldrb	r3, [r3, #0]
    cd2a:	4a0c      	ldr	r2, [pc, #48]	; (cd5c <PressureUpdateTask+0x194>)
    cd2c:	011b      	lsls	r3, r3, #4
    cd2e:	18d3      	adds	r3, r2, r3
    cd30:	3308      	adds	r3, #8
    cd32:	1c3a      	adds	r2, r7, #0
    cd34:	320c      	adds	r2, #12
    cd36:	8812      	ldrh	r2, [r2, #0]
    cd38:	809a      	strh	r2, [r3, #4]
{
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    cd3a:	1c3b      	adds	r3, r7, #0
    cd3c:	330f      	adds	r3, #15
    cd3e:	781a      	ldrb	r2, [r3, #0]
    cd40:	1c3b      	adds	r3, r7, #0
    cd42:	330f      	adds	r3, #15
    cd44:	3201      	adds	r2, #1
    cd46:	701a      	strb	r2, [r3, #0]
    cd48:	1c3b      	adds	r3, r7, #0
    cd4a:	330f      	adds	r3, #15
    cd4c:	781b      	ldrb	r3, [r3, #0]
    cd4e:	2b0b      	cmp	r3, #11
    cd50:	d800      	bhi.n	cd54 <PressureUpdateTask+0x18c>
    cd52:	e741      	b.n	cbd8 <PressureUpdateTask+0x10>
#if BRAKEBOARD 
//			AppRadioCarRadioReadingIn(i,TRUE);
#endif				
		}
	}		
}
    cd54:	46bd      	mov	sp, r7
    cd56:	b004      	add	sp, #16
    cd58:	bd80      	pop	{r7, pc}
    cd5a:	46c0      	nop			; (mov r8, r8)
    cd5c:	200033b4 	.word	0x200033b4
    cd60:	200004d8 	.word	0x200004d8
    cd64:	20003490 	.word	0x20003490
    cd68:	0002368e 	.word	0x0002368e
    cd6c:	000157d9 	.word	0x000157d9
    cd70:	000f4240 	.word	0x000f4240

0000cd74 <RF433Task>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433Task(void)
{	
    cd74:	b580      	push	{r7, lr}
    cd76:	af00      	add	r7, sp, #0
		RF433ReadEvents();
    cd78:	4b28      	ldr	r3, [pc, #160]	; (ce1c <RF433Task+0xa8>)
    cd7a:	4798      	blx	r3
		
		systemChange = 0;
    cd7c:	4b28      	ldr	r3, [pc, #160]	; (ce20 <RF433Task+0xac>)
    cd7e:	2200      	movs	r2, #0
    cd80:	701a      	strb	r2, [r3, #0]
		eventsChange = 0;
    cd82:	4b28      	ldr	r3, [pc, #160]	; (ce24 <RF433Task+0xb0>)
    cd84:	2200      	movs	r2, #0
    cd86:	701a      	strb	r2, [r3, #0]
		powerChange = 0;
    cd88:	4b27      	ldr	r3, [pc, #156]	; (ce28 <RF433Task+0xb4>)
    cd8a:	2200      	movs	r2, #0
    cd8c:	701a      	strb	r2, [r3, #0]
		if (tpsEvents[0] != 0)
    cd8e:	4b27      	ldr	r3, [pc, #156]	; (ce2c <RF433Task+0xb8>)
    cd90:	781b      	ldrb	r3, [r3, #0]
    cd92:	2b00      	cmp	r3, #0
    cd94:	d002      	beq.n	cd9c <RF433Task+0x28>
		{
			systemChange = 1;
    cd96:	4b22      	ldr	r3, [pc, #136]	; (ce20 <RF433Task+0xac>)
    cd98:	2201      	movs	r2, #1
    cd9a:	701a      	strb	r2, [r3, #0]
				}				
				rssiBuffer[rssiOffset++] = tempBuffer[4];
*/				
			}
		}
		if (tpsEvents[1] != 0)
    cd9c:	4b23      	ldr	r3, [pc, #140]	; (ce2c <RF433Task+0xb8>)
    cd9e:	785b      	ldrb	r3, [r3, #1]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d031      	beq.n	ce08 <RF433Task+0x94>
		{
			eventsChange = 1;
    cda4:	4b1f      	ldr	r3, [pc, #124]	; (ce24 <RF433Task+0xb0>)
    cda6:	2201      	movs	r2, #1
    cda8:	701a      	strb	r2, [r3, #0]
			if ((tpsEvents[1] & 0x10)!= 0)
    cdaa:	4b20      	ldr	r3, [pc, #128]	; (ce2c <RF433Task+0xb8>)
    cdac:	785b      	ldrb	r3, [r3, #1]
    cdae:	1c1a      	adds	r2, r3, #0
    cdb0:	2310      	movs	r3, #16
    cdb2:	4013      	ands	r3, r2
    cdb4:	d028      	beq.n	ce08 <RF433Task+0x94>
			{
				RF433ReadRXLevel();
    cdb6:	4b1e      	ldr	r3, [pc, #120]	; (ce30 <RF433Task+0xbc>)
    cdb8:	4798      	blx	r3
				while (tpsRXLevel >0)
    cdba:	e021      	b.n	ce00 <RF433Task+0x8c>
				{
					if (tpsRXLevel >10)
    cdbc:	4b1d      	ldr	r3, [pc, #116]	; (ce34 <RF433Task+0xc0>)
    cdbe:	781b      	ldrb	r3, [r3, #0]
    cdc0:	2b0a      	cmp	r3, #10
    cdc2:	d90e      	bls.n	cde2 <RF433Task+0x6e>
					{
						RF433ReadRXBuffer(tempBuffer,10);
    cdc4:	4b1c      	ldr	r3, [pc, #112]	; (ce38 <RF433Task+0xc4>)
    cdc6:	1c18      	adds	r0, r3, #0
    cdc8:	210a      	movs	r1, #10
    cdca:	4b1c      	ldr	r3, [pc, #112]	; (ce3c <RF433Task+0xc8>)
    cdcc:	4798      	blx	r3
						RF433ProcessPacket(10);
    cdce:	200a      	movs	r0, #10
    cdd0:	4b1b      	ldr	r3, [pc, #108]	; (ce40 <RF433Task+0xcc>)
    cdd2:	4798      	blx	r3
						tpsRXLevel -= 10;
    cdd4:	4b17      	ldr	r3, [pc, #92]	; (ce34 <RF433Task+0xc0>)
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	3b0a      	subs	r3, #10
    cdda:	b2da      	uxtb	r2, r3
    cddc:	4b15      	ldr	r3, [pc, #84]	; (ce34 <RF433Task+0xc0>)
    cdde:	701a      	strb	r2, [r3, #0]
    cde0:	e00e      	b.n	ce00 <RF433Task+0x8c>
					}
					else
					{
						RF433ReadRXBuffer(tempBuffer,tpsRXLevel);
    cde2:	4b14      	ldr	r3, [pc, #80]	; (ce34 <RF433Task+0xc0>)
    cde4:	781b      	ldrb	r3, [r3, #0]
    cde6:	4a14      	ldr	r2, [pc, #80]	; (ce38 <RF433Task+0xc4>)
    cde8:	1c10      	adds	r0, r2, #0
    cdea:	1c19      	adds	r1, r3, #0
    cdec:	4b13      	ldr	r3, [pc, #76]	; (ce3c <RF433Task+0xc8>)
    cdee:	4798      	blx	r3
						RF433ProcessPacket(tpsRXLevel);
    cdf0:	4b10      	ldr	r3, [pc, #64]	; (ce34 <RF433Task+0xc0>)
    cdf2:	781b      	ldrb	r3, [r3, #0]
    cdf4:	1c18      	adds	r0, r3, #0
    cdf6:	4b12      	ldr	r3, [pc, #72]	; (ce40 <RF433Task+0xcc>)
    cdf8:	4798      	blx	r3
						tpsRXLevel = 0;
    cdfa:	4b0e      	ldr	r3, [pc, #56]	; (ce34 <RF433Task+0xc0>)
    cdfc:	2200      	movs	r2, #0
    cdfe:	701a      	strb	r2, [r3, #0]
		{
			eventsChange = 1;
			if ((tpsEvents[1] & 0x10)!= 0)
			{
				RF433ReadRXLevel();
				while (tpsRXLevel >0)
    ce00:	4b0c      	ldr	r3, [pc, #48]	; (ce34 <RF433Task+0xc0>)
    ce02:	781b      	ldrb	r3, [r3, #0]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d1d9      	bne.n	cdbc <RF433Task+0x48>
						tpsRXLevel = 0;
					}
				}
			}
		}
		if (tpsEvents[2] != 0)
    ce08:	4b08      	ldr	r3, [pc, #32]	; (ce2c <RF433Task+0xb8>)
    ce0a:	789b      	ldrb	r3, [r3, #2]
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d002      	beq.n	ce16 <RF433Task+0xa2>
		{
			powerChange = 1;
    ce10:	4b05      	ldr	r3, [pc, #20]	; (ce28 <RF433Task+0xb4>)
    ce12:	2201      	movs	r2, #1
    ce14:	701a      	strb	r2, [r3, #0]
		}	
}
    ce16:	46bd      	mov	sp, r7
    ce18:	bd80      	pop	{r7, pc}
    ce1a:	46c0      	nop			; (mov r8, r8)
    ce1c:	0000d3fd 	.word	0x0000d3fd
    ce20:	20003474 	.word	0x20003474
    ce24:	20003124 	.word	0x20003124
    ce28:	200030f0 	.word	0x200030f0
    ce2c:	200030f4 	.word	0x200030f4
    ce30:	0000d3c5 	.word	0x0000d3c5
    ce34:	20003394 	.word	0x20003394
    ce38:	20003110 	.word	0x20003110
    ce3c:	0000d315 	.word	0x0000d315
    ce40:	0000ce45 	.word	0x0000ce45

0000ce44 <RF433ProcessPacket>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433ProcessPacket(uint8_t length)
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b084      	sub	sp, #16
    ce48:	af00      	add	r7, sp, #0
    ce4a:	1c02      	adds	r2, r0, #0
    ce4c:	1dfb      	adds	r3, r7, #7
    ce4e:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,j;
	//----------------------------
	// add the bytes to the end of the 
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
    ce50:	4bc1      	ldr	r3, [pc, #772]	; (d158 <RF433ProcessPacket+0x314>)
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	1c1a      	adds	r2, r3, #0
    ce56:	1dfb      	adds	r3, r7, #7
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	18d3      	adds	r3, r2, r3
    ce5c:	2b13      	cmp	r3, #19
    ce5e:	dd02      	ble.n	ce66 <RF433ProcessPacket+0x22>
	{
		rf433BuildOffset = 0;
    ce60:	4bbd      	ldr	r3, [pc, #756]	; (d158 <RF433ProcessPacket+0x314>)
    ce62:	2200      	movs	r2, #0
    ce64:	701a      	strb	r2, [r3, #0]
	}
	for (i=0;i<length;i++)
    ce66:	1c3b      	adds	r3, r7, #0
    ce68:	330e      	adds	r3, #14
    ce6a:	2200      	movs	r2, #0
    ce6c:	701a      	strb	r2, [r3, #0]
    ce6e:	e013      	b.n	ce98 <RF433ProcessPacket+0x54>
	{
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
    ce70:	4bb9      	ldr	r3, [pc, #740]	; (d158 <RF433ProcessPacket+0x314>)
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	1c5a      	adds	r2, r3, #1
    ce76:	b2d1      	uxtb	r1, r2
    ce78:	4ab7      	ldr	r2, [pc, #732]	; (d158 <RF433ProcessPacket+0x314>)
    ce7a:	7011      	strb	r1, [r2, #0]
    ce7c:	1c3a      	adds	r2, r7, #0
    ce7e:	320e      	adds	r2, #14
    ce80:	7812      	ldrb	r2, [r2, #0]
    ce82:	49b6      	ldr	r1, [pc, #728]	; (d15c <RF433ProcessPacket+0x318>)
    ce84:	5c89      	ldrb	r1, [r1, r2]
    ce86:	4ab6      	ldr	r2, [pc, #728]	; (d160 <RF433ProcessPacket+0x31c>)
    ce88:	54d1      	strb	r1, [r2, r3]
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
	{
		rf433BuildOffset = 0;
	}
	for (i=0;i<length;i++)
    ce8a:	1c3b      	adds	r3, r7, #0
    ce8c:	330e      	adds	r3, #14
    ce8e:	781a      	ldrb	r2, [r3, #0]
    ce90:	1c3b      	adds	r3, r7, #0
    ce92:	330e      	adds	r3, #14
    ce94:	3201      	adds	r2, #1
    ce96:	701a      	strb	r2, [r3, #0]
    ce98:	1c3a      	adds	r2, r7, #0
    ce9a:	320e      	adds	r2, #14
    ce9c:	1dfb      	adds	r3, r7, #7
    ce9e:	7812      	ldrb	r2, [r2, #0]
    cea0:	781b      	ldrb	r3, [r3, #0]
    cea2:	429a      	cmp	r2, r3
    cea4:	d3e4      	bcc.n	ce70 <RF433ProcessPacket+0x2c>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    cea6:	e14e      	b.n	d146 <RF433ProcessPacket+0x302>
	{
		tpsCRC = CRC8 (&rf433BuildBuffer[0],6);
    cea8:	4bad      	ldr	r3, [pc, #692]	; (d160 <RF433ProcessPacket+0x31c>)
    ceaa:	1c18      	adds	r0, r3, #0
    ceac:	2106      	movs	r1, #6
    ceae:	4bad      	ldr	r3, [pc, #692]	; (d164 <RF433ProcessPacket+0x320>)
    ceb0:	4798      	blx	r3
    ceb2:	1c03      	adds	r3, r0, #0
    ceb4:	1c1a      	adds	r2, r3, #0
    ceb6:	4bac      	ldr	r3, [pc, #688]	; (d168 <RF433ProcessPacket+0x324>)
    ceb8:	701a      	strb	r2, [r3, #0]
		if (tpsCRC == rf433BuildBuffer[6])
    ceba:	4ba9      	ldr	r3, [pc, #676]	; (d160 <RF433ProcessPacket+0x31c>)
    cebc:	799a      	ldrb	r2, [r3, #6]
    cebe:	4baa      	ldr	r3, [pc, #680]	; (d168 <RF433ProcessPacket+0x324>)
    cec0:	781b      	ldrb	r3, [r3, #0]
    cec2:	429a      	cmp	r2, r3
    cec4:	d000      	beq.n	cec8 <RF433ProcessPacket+0x84>
    cec6:	e11a      	b.n	d0fe <RF433ProcessPacket+0x2ba>
		{
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_RXPACKET,1);
    cec8:	2001      	movs	r0, #1
    ceca:	2102      	movs	r1, #2
    cecc:	2201      	movs	r2, #1
    cece:	4ba7      	ldr	r3, [pc, #668]	; (d16c <RF433ProcessPacket+0x328>)
    ced0:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_COMMGOOD,1);
    ced2:	2001      	movs	r0, #1
    ced4:	2104      	movs	r1, #4
    ced6:	2201      	movs	r2, #1
    ced8:	4ba4      	ldr	r3, [pc, #656]	; (d16c <RF433ProcessPacket+0x328>)
    ceda:	4798      	blx	r3
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
    cedc:	1c3b      	adds	r3, r7, #0
    cede:	330e      	adds	r3, #14
    cee0:	2200      	movs	r2, #0
    cee2:	701a      	strb	r2, [r3, #0]
			done = 0; 
    cee4:	1c3b      	adds	r3, r7, #0
    cee6:	330f      	adds	r3, #15
    cee8:	2200      	movs	r2, #0
    ceea:	701a      	strb	r2, [r3, #0]
			while ((i<MAXSENSORS)&&(done==0))
    ceec:	e077      	b.n	cfde <RF433ProcessPacket+0x19a>
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    ceee:	1c3b      	adds	r3, r7, #0
    cef0:	330e      	adds	r3, #14
    cef2:	781b      	ldrb	r3, [r3, #0]
    cef4:	4a9e      	ldr	r2, [pc, #632]	; (d170 <RF433ProcessPacket+0x32c>)
    cef6:	011b      	lsls	r3, r3, #4
    cef8:	18d3      	adds	r3, r2, r3
    cefa:	3301      	adds	r3, #1
    cefc:	781a      	ldrb	r2, [r3, #0]
    cefe:	4b98      	ldr	r3, [pc, #608]	; (d160 <RF433ProcessPacket+0x31c>)
    cf00:	785b      	ldrb	r3, [r3, #1]
    cf02:	429a      	cmp	r2, r3
    cf04:	d164      	bne.n	cfd0 <RF433ProcessPacket+0x18c>
    cf06:	1c3b      	adds	r3, r7, #0
    cf08:	330e      	adds	r3, #14
    cf0a:	781a      	ldrb	r2, [r3, #0]
    cf0c:	4b98      	ldr	r3, [pc, #608]	; (d170 <RF433ProcessPacket+0x32c>)
    cf0e:	0112      	lsls	r2, r2, #4
    cf10:	5cd2      	ldrb	r2, [r2, r3]
    cf12:	4b93      	ldr	r3, [pc, #588]	; (d160 <RF433ProcessPacket+0x31c>)
    cf14:	781b      	ldrb	r3, [r3, #0]
    cf16:	429a      	cmp	r2, r3
    cf18:	d15a      	bne.n	cfd0 <RF433ProcessPacket+0x18c>
					(sensorDynamic[i].ID[2] == rf433BuildBuffer[2]))
    cf1a:	1c3b      	adds	r3, r7, #0
    cf1c:	330e      	adds	r3, #14
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	4a93      	ldr	r2, [pc, #588]	; (d170 <RF433ProcessPacket+0x32c>)
    cf22:	011b      	lsls	r3, r3, #4
    cf24:	18d3      	adds	r3, r2, r3
    cf26:	3302      	adds	r3, #2
    cf28:	781a      	ldrb	r2, [r3, #0]
    cf2a:	4b8d      	ldr	r3, [pc, #564]	; (d160 <RF433ProcessPacket+0x31c>)
    cf2c:	789b      	ldrb	r3, [r3, #2]
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    cf2e:	429a      	cmp	r2, r3
    cf30:	d14e      	bne.n	cfd0 <RF433ProcessPacket+0x18c>
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    cf32:	1c3b      	adds	r3, r7, #0
    cf34:	330d      	adds	r3, #13
    cf36:	2200      	movs	r2, #0
    cf38:	701a      	strb	r2, [r3, #0]
    cf3a:	e031      	b.n	cfa0 <RF433ProcessPacket+0x15c>
					{
						if (sensorDynamic[i].LastPacket[j] != rf433BuildBuffer[j])
    cf3c:	1c3b      	adds	r3, r7, #0
    cf3e:	330e      	adds	r3, #14
    cf40:	7819      	ldrb	r1, [r3, #0]
    cf42:	1c3b      	adds	r3, r7, #0
    cf44:	330d      	adds	r3, #13
    cf46:	781b      	ldrb	r3, [r3, #0]
    cf48:	4a89      	ldr	r2, [pc, #548]	; (d170 <RF433ProcessPacket+0x32c>)
    cf4a:	0109      	lsls	r1, r1, #4
    cf4c:	18cb      	adds	r3, r1, r3
    cf4e:	18d3      	adds	r3, r2, r3
    cf50:	795a      	ldrb	r2, [r3, #5]
    cf52:	1c3b      	adds	r3, r7, #0
    cf54:	330d      	adds	r3, #13
    cf56:	781b      	ldrb	r3, [r3, #0]
    cf58:	4981      	ldr	r1, [pc, #516]	; (d160 <RF433ProcessPacket+0x31c>)
    cf5a:	5ccb      	ldrb	r3, [r1, r3]
    cf5c:	429a      	cmp	r2, r3
    cf5e:	d008      	beq.n	cf72 <RF433ProcessPacket+0x12e>
						{
							sensorDynamic[i].NewValue =1; 
    cf60:	1c3b      	adds	r3, r7, #0
    cf62:	330e      	adds	r3, #14
    cf64:	781b      	ldrb	r3, [r3, #0]
    cf66:	4a82      	ldr	r2, [pc, #520]	; (d170 <RF433ProcessPacket+0x32c>)
    cf68:	011b      	lsls	r3, r3, #4
    cf6a:	18d3      	adds	r3, r2, r3
    cf6c:	3308      	adds	r3, #8
    cf6e:	2201      	movs	r2, #1
    cf70:	71da      	strb	r2, [r3, #7]
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    cf72:	1c3b      	adds	r3, r7, #0
    cf74:	330e      	adds	r3, #14
    cf76:	7818      	ldrb	r0, [r3, #0]
    cf78:	1c3b      	adds	r3, r7, #0
    cf7a:	330d      	adds	r3, #13
    cf7c:	781b      	ldrb	r3, [r3, #0]
    cf7e:	1c3a      	adds	r2, r7, #0
    cf80:	320d      	adds	r2, #13
    cf82:	7812      	ldrb	r2, [r2, #0]
    cf84:	4976      	ldr	r1, [pc, #472]	; (d160 <RF433ProcessPacket+0x31c>)
    cf86:	5c8a      	ldrb	r2, [r1, r2]
    cf88:	4979      	ldr	r1, [pc, #484]	; (d170 <RF433ProcessPacket+0x32c>)
    cf8a:	0100      	lsls	r0, r0, #4
    cf8c:	18c3      	adds	r3, r0, r3
    cf8e:	18cb      	adds	r3, r1, r3
    cf90:	715a      	strb	r2, [r3, #5]
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    cf92:	1c3b      	adds	r3, r7, #0
    cf94:	330d      	adds	r3, #13
    cf96:	781a      	ldrb	r2, [r3, #0]
    cf98:	1c3b      	adds	r3, r7, #0
    cf9a:	330d      	adds	r3, #13
    cf9c:	3201      	adds	r2, #1
    cf9e:	701a      	strb	r2, [r3, #0]
    cfa0:	1c3b      	adds	r3, r7, #0
    cfa2:	330d      	adds	r3, #13
    cfa4:	781b      	ldrb	r3, [r3, #0]
    cfa6:	2b06      	cmp	r3, #6
    cfa8:	d9c8      	bls.n	cf3c <RF433ProcessPacket+0xf8>
						{
							sensorDynamic[i].NewValue =1; 
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
					}
					sensorDynamic[i].Change = 1; 
    cfaa:	1c3b      	adds	r3, r7, #0
    cfac:	330e      	adds	r3, #14
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	4a6f      	ldr	r2, [pc, #444]	; (d170 <RF433ProcessPacket+0x32c>)
    cfb2:	011b      	lsls	r3, r3, #4
    cfb4:	18d3      	adds	r3, r2, r3
    cfb6:	2201      	movs	r2, #1
    cfb8:	711a      	strb	r2, [r3, #4]
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    cfba:	4b6e      	ldr	r3, [pc, #440]	; (d174 <RF433ProcessPacket+0x330>)
    cfbc:	681b      	ldr	r3, [r3, #0]
    cfbe:	2280      	movs	r2, #128	; 0x80
    cfc0:	0052      	lsls	r2, r2, #1
    cfc2:	431a      	orrs	r2, r3
    cfc4:	4b6b      	ldr	r3, [pc, #428]	; (d174 <RF433ProcessPacket+0x330>)
    cfc6:	601a      	str	r2, [r3, #0]
					done = 1; 
    cfc8:	1c3b      	adds	r3, r7, #0
    cfca:	330f      	adds	r3, #15
    cfcc:	2201      	movs	r2, #1
    cfce:	701a      	strb	r2, [r3, #0]
				}
				i++;
    cfd0:	1c3b      	adds	r3, r7, #0
    cfd2:	330e      	adds	r3, #14
    cfd4:	781a      	ldrb	r2, [r3, #0]
    cfd6:	1c3b      	adds	r3, r7, #0
    cfd8:	330e      	adds	r3, #14
    cfda:	3201      	adds	r2, #1
    cfdc:	701a      	strb	r2, [r3, #0]
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
    cfde:	1c3b      	adds	r3, r7, #0
    cfe0:	330e      	adds	r3, #14
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	2b0b      	cmp	r3, #11
    cfe6:	d805      	bhi.n	cff4 <RF433ProcessPacket+0x1b0>
    cfe8:	1c3b      	adds	r3, r7, #0
    cfea:	330f      	adds	r3, #15
    cfec:	781b      	ldrb	r3, [r3, #0]
    cfee:	2b00      	cmp	r3, #0
    cff0:	d100      	bne.n	cff4 <RF433ProcessPacket+0x1b0>
    cff2:	e77c      	b.n	ceee <RF433ProcessPacket+0xaa>
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
					done = 1; 
				}
				i++;
			}
			if (done == 0)
    cff4:	1c3b      	adds	r3, r7, #0
    cff6:	330f      	adds	r3, #15
    cff8:	781b      	ldrb	r3, [r3, #0]
    cffa:	2b00      	cmp	r3, #0
    cffc:	d000      	beq.n	d000 <RF433ProcessPacket+0x1bc>
    cffe:	e077      	b.n	d0f0 <RF433ProcessPacket+0x2ac>
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
    d000:	1c3b      	adds	r3, r7, #0
    d002:	330e      	adds	r3, #14
    d004:	2200      	movs	r2, #0
    d006:	701a      	strb	r2, [r3, #0]
				while ((i<MAXSENSORS)&&(done==0))
    d008:	e068      	b.n	d0dc <RF433ProcessPacket+0x298>
				{
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
    d00a:	1c3b      	adds	r3, r7, #0
    d00c:	330e      	adds	r3, #14
    d00e:	781a      	ldrb	r2, [r3, #0]
    d010:	4b57      	ldr	r3, [pc, #348]	; (d170 <RF433ProcessPacket+0x32c>)
    d012:	0112      	lsls	r2, r2, #4
    d014:	5cd3      	ldrb	r3, [r2, r3]
    d016:	2b00      	cmp	r3, #0
    d018:	d159      	bne.n	d0ce <RF433ProcessPacket+0x28a>
    d01a:	1c3b      	adds	r3, r7, #0
    d01c:	330e      	adds	r3, #14
    d01e:	781b      	ldrb	r3, [r3, #0]
    d020:	4a53      	ldr	r2, [pc, #332]	; (d170 <RF433ProcessPacket+0x32c>)
    d022:	011b      	lsls	r3, r3, #4
    d024:	18d3      	adds	r3, r2, r3
    d026:	3301      	adds	r3, #1
    d028:	781b      	ldrb	r3, [r3, #0]
    d02a:	2b00      	cmp	r3, #0
    d02c:	d14f      	bne.n	d0ce <RF433ProcessPacket+0x28a>
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    d02e:	1c3b      	adds	r3, r7, #0
    d030:	330d      	adds	r3, #13
    d032:	2200      	movs	r2, #0
    d034:	701a      	strb	r2, [r3, #0]
    d036:	e016      	b.n	d066 <RF433ProcessPacket+0x222>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    d038:	1c3b      	adds	r3, r7, #0
    d03a:	330e      	adds	r3, #14
    d03c:	7818      	ldrb	r0, [r3, #0]
    d03e:	1c3b      	adds	r3, r7, #0
    d040:	330d      	adds	r3, #13
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	1c3a      	adds	r2, r7, #0
    d046:	320d      	adds	r2, #13
    d048:	7812      	ldrb	r2, [r2, #0]
    d04a:	4945      	ldr	r1, [pc, #276]	; (d160 <RF433ProcessPacket+0x31c>)
    d04c:	5c8a      	ldrb	r2, [r1, r2]
    d04e:	4948      	ldr	r1, [pc, #288]	; (d170 <RF433ProcessPacket+0x32c>)
    d050:	0100      	lsls	r0, r0, #4
    d052:	18c3      	adds	r3, r0, r3
    d054:	18cb      	adds	r3, r1, r3
    d056:	715a      	strb	r2, [r3, #5]
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    d058:	1c3b      	adds	r3, r7, #0
    d05a:	330d      	adds	r3, #13
    d05c:	781a      	ldrb	r2, [r3, #0]
    d05e:	1c3b      	adds	r3, r7, #0
    d060:	330d      	adds	r3, #13
    d062:	3201      	adds	r2, #1
    d064:	701a      	strb	r2, [r3, #0]
    d066:	1c3b      	adds	r3, r7, #0
    d068:	330d      	adds	r3, #13
    d06a:	781b      	ldrb	r3, [r3, #0]
    d06c:	2b06      	cmp	r3, #6
    d06e:	d9e3      	bls.n	d038 <RF433ProcessPacket+0x1f4>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
						}
						sensorDynamic[i].Change = 1;
    d070:	1c3b      	adds	r3, r7, #0
    d072:	330e      	adds	r3, #14
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	4a3e      	ldr	r2, [pc, #248]	; (d170 <RF433ProcessPacket+0x32c>)
    d078:	011b      	lsls	r3, r3, #4
    d07a:	18d3      	adds	r3, r2, r3
    d07c:	2201      	movs	r2, #1
    d07e:	711a      	strb	r2, [r3, #4]
						sensorDynamic[i].ID[0] = rf433BuildBuffer[0]; 
    d080:	1c3b      	adds	r3, r7, #0
    d082:	330e      	adds	r3, #14
    d084:	781a      	ldrb	r2, [r3, #0]
    d086:	4b36      	ldr	r3, [pc, #216]	; (d160 <RF433ProcessPacket+0x31c>)
    d088:	7819      	ldrb	r1, [r3, #0]
    d08a:	4b39      	ldr	r3, [pc, #228]	; (d170 <RF433ProcessPacket+0x32c>)
    d08c:	0112      	lsls	r2, r2, #4
    d08e:	54d1      	strb	r1, [r2, r3]
						sensorDynamic[i].ID[1] = rf433BuildBuffer[1]; 
    d090:	1c3b      	adds	r3, r7, #0
    d092:	330e      	adds	r3, #14
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	4a32      	ldr	r2, [pc, #200]	; (d160 <RF433ProcessPacket+0x31c>)
    d098:	7852      	ldrb	r2, [r2, #1]
    d09a:	4935      	ldr	r1, [pc, #212]	; (d170 <RF433ProcessPacket+0x32c>)
    d09c:	011b      	lsls	r3, r3, #4
    d09e:	18cb      	adds	r3, r1, r3
    d0a0:	3301      	adds	r3, #1
    d0a2:	701a      	strb	r2, [r3, #0]
						sensorDynamic[i].ID[2] = rf433BuildBuffer[2]; 												
    d0a4:	1c3b      	adds	r3, r7, #0
    d0a6:	330e      	adds	r3, #14
    d0a8:	781b      	ldrb	r3, [r3, #0]
    d0aa:	4a2d      	ldr	r2, [pc, #180]	; (d160 <RF433ProcessPacket+0x31c>)
    d0ac:	7892      	ldrb	r2, [r2, #2]
    d0ae:	4930      	ldr	r1, [pc, #192]	; (d170 <RF433ProcessPacket+0x32c>)
    d0b0:	011b      	lsls	r3, r3, #4
    d0b2:	18cb      	adds	r3, r1, r3
    d0b4:	3302      	adds	r3, #2
    d0b6:	701a      	strb	r2, [r3, #0]
						schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    d0b8:	4b2e      	ldr	r3, [pc, #184]	; (d174 <RF433ProcessPacket+0x330>)
    d0ba:	681b      	ldr	r3, [r3, #0]
    d0bc:	2280      	movs	r2, #128	; 0x80
    d0be:	0052      	lsls	r2, r2, #1
    d0c0:	431a      	orrs	r2, r3
    d0c2:	4b2c      	ldr	r3, [pc, #176]	; (d174 <RF433ProcessPacket+0x330>)
    d0c4:	601a      	str	r2, [r3, #0]
						done = 1; 
    d0c6:	1c3b      	adds	r3, r7, #0
    d0c8:	330f      	adds	r3, #15
    d0ca:	2201      	movs	r2, #1
    d0cc:	701a      	strb	r2, [r3, #0]
					}
					i++;
    d0ce:	1c3b      	adds	r3, r7, #0
    d0d0:	330e      	adds	r3, #14
    d0d2:	781a      	ldrb	r2, [r3, #0]
    d0d4:	1c3b      	adds	r3, r7, #0
    d0d6:	330e      	adds	r3, #14
    d0d8:	3201      	adds	r2, #1
    d0da:	701a      	strb	r2, [r3, #0]
			if (done == 0)
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
				while ((i<MAXSENSORS)&&(done==0))
    d0dc:	1c3b      	adds	r3, r7, #0
    d0de:	330e      	adds	r3, #14
    d0e0:	781b      	ldrb	r3, [r3, #0]
    d0e2:	2b0b      	cmp	r3, #11
    d0e4:	d804      	bhi.n	d0f0 <RF433ProcessPacket+0x2ac>
    d0e6:	1c3b      	adds	r3, r7, #0
    d0e8:	330f      	adds	r3, #15
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d08c      	beq.n	d00a <RF433ProcessPacket+0x1c6>
					}
					i++;
				}				 
				
			}
			rf433BuildOffset = rf433BuildOffset-7;
    d0f0:	4b19      	ldr	r3, [pc, #100]	; (d158 <RF433ProcessPacket+0x314>)
    d0f2:	781b      	ldrb	r3, [r3, #0]
    d0f4:	3b07      	subs	r3, #7
    d0f6:	b2da      	uxtb	r2, r3
    d0f8:	4b17      	ldr	r3, [pc, #92]	; (d158 <RF433ProcessPacket+0x314>)
    d0fa:	701a      	strb	r2, [r3, #0]
    d0fc:	e023      	b.n	d146 <RF433ProcessPacket+0x302>
		}	
		else
		{
			rf433BuildOffset--;
    d0fe:	4b16      	ldr	r3, [pc, #88]	; (d158 <RF433ProcessPacket+0x314>)
    d100:	781b      	ldrb	r3, [r3, #0]
    d102:	3b01      	subs	r3, #1
    d104:	b2da      	uxtb	r2, r3
    d106:	4b14      	ldr	r3, [pc, #80]	; (d158 <RF433ProcessPacket+0x314>)
    d108:	701a      	strb	r2, [r3, #0]
			for (i=0;i<rf433BuildOffset;i++)
    d10a:	1c3b      	adds	r3, r7, #0
    d10c:	330e      	adds	r3, #14
    d10e:	2200      	movs	r2, #0
    d110:	701a      	strb	r2, [r3, #0]
    d112:	e011      	b.n	d138 <RF433ProcessPacket+0x2f4>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
    d114:	1c3b      	adds	r3, r7, #0
    d116:	330e      	adds	r3, #14
    d118:	781b      	ldrb	r3, [r3, #0]
    d11a:	1c3a      	adds	r2, r7, #0
    d11c:	320e      	adds	r2, #14
    d11e:	7812      	ldrb	r2, [r2, #0]
    d120:	3201      	adds	r2, #1
    d122:	490f      	ldr	r1, [pc, #60]	; (d160 <RF433ProcessPacket+0x31c>)
    d124:	5c89      	ldrb	r1, [r1, r2]
    d126:	4a0e      	ldr	r2, [pc, #56]	; (d160 <RF433ProcessPacket+0x31c>)
    d128:	54d1      	strb	r1, [r2, r3]
			rf433BuildOffset = rf433BuildOffset-7;
		}	
		else
		{
			rf433BuildOffset--;
			for (i=0;i<rf433BuildOffset;i++)
    d12a:	1c3b      	adds	r3, r7, #0
    d12c:	330e      	adds	r3, #14
    d12e:	781a      	ldrb	r2, [r3, #0]
    d130:	1c3b      	adds	r3, r7, #0
    d132:	330e      	adds	r3, #14
    d134:	3201      	adds	r2, #1
    d136:	701a      	strb	r2, [r3, #0]
    d138:	4b07      	ldr	r3, [pc, #28]	; (d158 <RF433ProcessPacket+0x314>)
    d13a:	781b      	ldrb	r3, [r3, #0]
    d13c:	1c3a      	adds	r2, r7, #0
    d13e:	320e      	adds	r2, #14
    d140:	7812      	ldrb	r2, [r2, #0]
    d142:	429a      	cmp	r2, r3
    d144:	d3e6      	bcc.n	d114 <RF433ProcessPacket+0x2d0>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    d146:	4b04      	ldr	r3, [pc, #16]	; (d158 <RF433ProcessPacket+0x314>)
    d148:	781b      	ldrb	r3, [r3, #0]
    d14a:	2b06      	cmp	r3, #6
    d14c:	d900      	bls.n	d150 <RF433ProcessPacket+0x30c>
    d14e:	e6ab      	b.n	cea8 <RF433ProcessPacket+0x64>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
			}	
		}		
	}
}
    d150:	46bd      	mov	sp, r7
    d152:	b004      	add	sp, #16
    d154:	bd80      	pop	{r7, pc}
    d156:	46c0      	nop			; (mov r8, r8)
    d158:	2000339b 	.word	0x2000339b
    d15c:	20003498 	.word	0x20003498
    d160:	20003478 	.word	0x20003478
    d164:	0000d25d 	.word	0x0000d25d
    d168:	20003395 	.word	0x20003395
    d16c:	0000f635 	.word	0x0000f635
    d170:	200033b4 	.word	0x200033b4
    d174:	2000369c 	.word	0x2000369c

0000d178 <SPITInOut>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 int SPITInOut(uint8_t *buffer,uint8_t size)
 {
    d178:	b590      	push	{r4, r7, lr}
    d17a:	b087      	sub	sp, #28
    d17c:	af00      	add	r7, sp, #0
    d17e:	6078      	str	r0, [r7, #4]
    d180:	1c0a      	adds	r2, r1, #0
    d182:	1cfb      	adds	r3, r7, #3
    d184:	701a      	strb	r2, [r3, #0]
	 uint8_t i,*ptr; 
	 ptr = buffer; 
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    d18a:	2300      	movs	r3, #0
    d18c:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
    d18e:	1cfb      	adds	r3, r7, #3
    d190:	781b      	ldrb	r3, [r3, #0]
    d192:	2b0d      	cmp	r3, #13
    d194:	d851      	bhi.n	d23a <SPITInOut+0xc2>
	 {
		 success = 1; 
    d196:	2301      	movs	r3, #1
    d198:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spit_master_instance, &slavet, true);
    d19a:	4a2a      	ldr	r2, [pc, #168]	; (d244 <SPITInOut+0xcc>)
    d19c:	4b2a      	ldr	r3, [pc, #168]	; (d248 <SPITInOut+0xd0>)
    d19e:	1c10      	adds	r0, r2, #0
    d1a0:	1c19      	adds	r1, r3, #0
    d1a2:	2201      	movs	r2, #1
    d1a4:	4b29      	ldr	r3, [pc, #164]	; (d24c <SPITInOut+0xd4>)
    d1a6:	4798      	blx	r3
		 for (i=0;i<size;i++)
    d1a8:	1c3b      	adds	r3, r7, #0
    d1aa:	3317      	adds	r3, #23
    d1ac:	2200      	movs	r2, #0
    d1ae:	701a      	strb	r2, [r3, #0]
    d1b0:	e00f      	b.n	d1d2 <SPITInOut+0x5a>
		 {
			txBuffT[i] = *ptr++;
    d1b2:	1c3b      	adds	r3, r7, #0
    d1b4:	3317      	adds	r3, #23
    d1b6:	781a      	ldrb	r2, [r3, #0]
    d1b8:	693b      	ldr	r3, [r7, #16]
    d1ba:	1c59      	adds	r1, r3, #1
    d1bc:	6139      	str	r1, [r7, #16]
    d1be:	7819      	ldrb	r1, [r3, #0]
    d1c0:	4b23      	ldr	r3, [pc, #140]	; (d250 <SPITInOut+0xd8>)
    d1c2:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spit_master_instance, &slavet, true);
		 for (i=0;i<size;i++)
    d1c4:	1c3b      	adds	r3, r7, #0
    d1c6:	3317      	adds	r3, #23
    d1c8:	781a      	ldrb	r2, [r3, #0]
    d1ca:	1c3b      	adds	r3, r7, #0
    d1cc:	3317      	adds	r3, #23
    d1ce:	3201      	adds	r2, #1
    d1d0:	701a      	strb	r2, [r3, #0]
    d1d2:	1c3a      	adds	r2, r7, #0
    d1d4:	3217      	adds	r2, #23
    d1d6:	1cfb      	adds	r3, r7, #3
    d1d8:	7812      	ldrb	r2, [r2, #0]
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	429a      	cmp	r2, r3
    d1de:	d3e8      	bcc.n	d1b2 <SPITInOut+0x3a>
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
    d1e0:	1cfb      	adds	r3, r7, #3
    d1e2:	781b      	ldrb	r3, [r3, #0]
    d1e4:	b29b      	uxth	r3, r3
    d1e6:	4817      	ldr	r0, [pc, #92]	; (d244 <SPITInOut+0xcc>)
    d1e8:	4919      	ldr	r1, [pc, #100]	; (d250 <SPITInOut+0xd8>)
    d1ea:	4a1a      	ldr	r2, [pc, #104]	; (d254 <SPITInOut+0xdc>)
    d1ec:	4c1a      	ldr	r4, [pc, #104]	; (d258 <SPITInOut+0xe0>)
    d1ee:	47a0      	blx	r4
		 ptr = buffer; 
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	613b      	str	r3, [r7, #16]
		 for (i=0;i<size;i++)
    d1f4:	1c3b      	adds	r3, r7, #0
    d1f6:	3317      	adds	r3, #23
    d1f8:	2200      	movs	r2, #0
    d1fa:	701a      	strb	r2, [r3, #0]
    d1fc:	e00f      	b.n	d21e <SPITInOut+0xa6>
		 {
			 *ptr++ = rxBuffT[i]; 
    d1fe:	693b      	ldr	r3, [r7, #16]
    d200:	1c5a      	adds	r2, r3, #1
    d202:	613a      	str	r2, [r7, #16]
    d204:	1c3a      	adds	r2, r7, #0
    d206:	3217      	adds	r2, #23
    d208:	7812      	ldrb	r2, [r2, #0]
    d20a:	4912      	ldr	r1, [pc, #72]	; (d254 <SPITInOut+0xdc>)
    d20c:	5c8a      	ldrb	r2, [r1, r2]
    d20e:	701a      	strb	r2, [r3, #0]
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
		 ptr = buffer; 
		 for (i=0;i<size;i++)
    d210:	1c3b      	adds	r3, r7, #0
    d212:	3317      	adds	r3, #23
    d214:	781a      	ldrb	r2, [r3, #0]
    d216:	1c3b      	adds	r3, r7, #0
    d218:	3317      	adds	r3, #23
    d21a:	3201      	adds	r2, #1
    d21c:	701a      	strb	r2, [r3, #0]
    d21e:	1c3a      	adds	r2, r7, #0
    d220:	3217      	adds	r2, #23
    d222:	1cfb      	adds	r3, r7, #3
    d224:	7812      	ldrb	r2, [r2, #0]
    d226:	781b      	ldrb	r3, [r3, #0]
    d228:	429a      	cmp	r2, r3
    d22a:	d3e8      	bcc.n	d1fe <SPITInOut+0x86>
		 {
			 *ptr++ = rxBuffT[i]; 
		 }
		 
		 spi_select_slave(&spit_master_instance, &slavet, false);
    d22c:	4a05      	ldr	r2, [pc, #20]	; (d244 <SPITInOut+0xcc>)
    d22e:	4b06      	ldr	r3, [pc, #24]	; (d248 <SPITInOut+0xd0>)
    d230:	1c10      	adds	r0, r2, #0
    d232:	1c19      	adds	r1, r3, #0
    d234:	2200      	movs	r2, #0
    d236:	4b05      	ldr	r3, [pc, #20]	; (d24c <SPITInOut+0xd4>)
    d238:	4798      	blx	r3
	 } 
	 return success; 
    d23a:	68fb      	ldr	r3, [r7, #12]
 }
    d23c:	1c18      	adds	r0, r3, #0
    d23e:	46bd      	mov	sp, r7
    d240:	b007      	add	sp, #28
    d242:	bd90      	pop	{r4, r7, pc}
    d244:	200033ac 	.word	0x200033ac
    d248:	20003398 	.word	0x20003398
    d24c:	00013311 	.word	0x00013311
    d250:	20003100 	.word	0x20003100
    d254:	2000339c 	.word	0x2000339c
    d258:	000133ed 	.word	0x000133ed

0000d25c <CRC8>:
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
    d25c:	b580      	push	{r7, lr}
    d25e:	b084      	sub	sp, #16
    d260:	af00      	add	r7, sp, #0
    d262:	6078      	str	r0, [r7, #4]
    d264:	1c0a      	adds	r2, r1, #0
    d266:	1cfb      	adds	r3, r7, #3
    d268:	701a      	strb	r2, [r3, #0]
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
    d26a:	1c3b      	adds	r3, r7, #0
    d26c:	330a      	adds	r3, #10
    d26e:	2200      	movs	r2, #0
    d270:	801a      	strh	r2, [r3, #0]
	 while (len--) {
    d272:	e03f      	b.n	d2f4 <CRC8+0x98>
		 extract = *data++;
    d274:	687b      	ldr	r3, [r7, #4]
    d276:	1c5a      	adds	r2, r3, #1
    d278:	607a      	str	r2, [r7, #4]
    d27a:	781a      	ldrb	r2, [r3, #0]
    d27c:	1c3b      	adds	r3, r7, #0
    d27e:	330c      	adds	r3, #12
    d280:	801a      	strh	r2, [r3, #0]
		 for (tempI = 8; tempI; tempI--) {
    d282:	1c3b      	adds	r3, r7, #0
    d284:	330e      	adds	r3, #14
    d286:	2208      	movs	r2, #8
    d288:	801a      	strh	r2, [r3, #0]
    d28a:	e02e      	b.n	d2ea <CRC8+0x8e>
			 sum = (crc ^ extract) & 0x80; //01;
    d28c:	1c3a      	adds	r2, r7, #0
    d28e:	320a      	adds	r2, #10
    d290:	1c3b      	adds	r3, r7, #0
    d292:	330c      	adds	r3, #12
    d294:	8812      	ldrh	r2, [r2, #0]
    d296:	881b      	ldrh	r3, [r3, #0]
    d298:	4053      	eors	r3, r2
    d29a:	b299      	uxth	r1, r3
    d29c:	1c3b      	adds	r3, r7, #0
    d29e:	3308      	adds	r3, #8
    d2a0:	2280      	movs	r2, #128	; 0x80
    d2a2:	400a      	ands	r2, r1
    d2a4:	801a      	strh	r2, [r3, #0]
			 crc <<=1;  //>>= 1;
    d2a6:	1c3a      	adds	r2, r7, #0
    d2a8:	320a      	adds	r2, #10
    d2aa:	1c3b      	adds	r3, r7, #0
    d2ac:	330a      	adds	r3, #10
    d2ae:	881b      	ldrh	r3, [r3, #0]
    d2b0:	18db      	adds	r3, r3, r3
    d2b2:	8013      	strh	r3, [r2, #0]
			 if (sum) {
    d2b4:	1c3b      	adds	r3, r7, #0
    d2b6:	3308      	adds	r3, #8
    d2b8:	881b      	ldrh	r3, [r3, #0]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d007      	beq.n	d2ce <CRC8+0x72>
				 crc ^= 0x31;  //8C;
    d2be:	1c3b      	adds	r3, r7, #0
    d2c0:	330a      	adds	r3, #10
    d2c2:	1c3a      	adds	r2, r7, #0
    d2c4:	320a      	adds	r2, #10
    d2c6:	8812      	ldrh	r2, [r2, #0]
    d2c8:	2131      	movs	r1, #49	; 0x31
    d2ca:	404a      	eors	r2, r1
    d2cc:	801a      	strh	r2, [r3, #0]
			 }
			 extract <<=1; //>>= 1;
    d2ce:	1c3a      	adds	r2, r7, #0
    d2d0:	320c      	adds	r2, #12
    d2d2:	1c3b      	adds	r3, r7, #0
    d2d4:	330c      	adds	r3, #12
    d2d6:	881b      	ldrh	r3, [r3, #0]
    d2d8:	18db      	adds	r3, r3, r3
    d2da:	8013      	strh	r3, [r2, #0]
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
		 extract = *data++;
		 for (tempI = 8; tempI; tempI--) {
    d2dc:	1c3b      	adds	r3, r7, #0
    d2de:	330e      	adds	r3, #14
    d2e0:	881a      	ldrh	r2, [r3, #0]
    d2e2:	1c3b      	adds	r3, r7, #0
    d2e4:	330e      	adds	r3, #14
    d2e6:	3a01      	subs	r2, #1
    d2e8:	801a      	strh	r2, [r3, #0]
    d2ea:	1c3b      	adds	r3, r7, #0
    d2ec:	330e      	adds	r3, #14
    d2ee:	881b      	ldrh	r3, [r3, #0]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d1cb      	bne.n	d28c <CRC8+0x30>
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
    d2f4:	1cfb      	adds	r3, r7, #3
    d2f6:	781b      	ldrb	r3, [r3, #0]
    d2f8:	1cfa      	adds	r2, r7, #3
    d2fa:	1e59      	subs	r1, r3, #1
    d2fc:	7011      	strb	r1, [r2, #0]
    d2fe:	2b00      	cmp	r3, #0
    d300:	d1b8      	bne.n	d274 <CRC8+0x18>
				 crc ^= 0x31;  //8C;
			 }
			 extract <<=1; //>>= 1;
		 }
	 }
	 return crc;
    d302:	1c3b      	adds	r3, r7, #0
    d304:	330a      	adds	r3, #10
    d306:	881b      	ldrh	r3, [r3, #0]
    d308:	b2db      	uxtb	r3, r3
 }
    d30a:	1c18      	adds	r0, r3, #0
    d30c:	46bd      	mov	sp, r7
    d30e:	b004      	add	sp, #16
    d310:	bd80      	pop	{r7, pc}
    d312:	46c0      	nop			; (mov r8, r8)

0000d314 <RF433ReadRXBuffer>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
    d314:	b580      	push	{r7, lr}
    d316:	b084      	sub	sp, #16
    d318:	af00      	add	r7, sp, #0
    d31a:	6078      	str	r0, [r7, #4]
    d31c:	1c0a      	adds	r2, r1, #0
    d31e:	1cfb      	adds	r3, r7, #3
    d320:	701a      	strb	r2, [r3, #0]
	uint8_t i; 
	
	for (i=0;i<length;i++)
    d322:	1c3b      	adds	r3, r7, #0
    d324:	330f      	adds	r3, #15
    d326:	2200      	movs	r2, #0
    d328:	701a      	strb	r2, [r3, #0]
    d32a:	e00d      	b.n	d348 <RF433ReadRXBuffer+0x34>
	{
		buffer[i] = 0x00;
    d32c:	1c3b      	adds	r3, r7, #0
    d32e:	330f      	adds	r3, #15
    d330:	781b      	ldrb	r3, [r3, #0]
    d332:	687a      	ldr	r2, [r7, #4]
    d334:	18d3      	adds	r3, r2, r3
    d336:	2200      	movs	r2, #0
    d338:	701a      	strb	r2, [r3, #0]
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
	uint8_t i; 
	
	for (i=0;i<length;i++)
    d33a:	1c3b      	adds	r3, r7, #0
    d33c:	330f      	adds	r3, #15
    d33e:	781a      	ldrb	r2, [r3, #0]
    d340:	1c3b      	adds	r3, r7, #0
    d342:	330f      	adds	r3, #15
    d344:	3201      	adds	r2, #1
    d346:	701a      	strb	r2, [r3, #0]
    d348:	1c3a      	adds	r2, r7, #0
    d34a:	320f      	adds	r2, #15
    d34c:	1cfb      	adds	r3, r7, #3
    d34e:	7812      	ldrb	r2, [r2, #0]
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	429a      	cmp	r2, r3
    d354:	d3ea      	bcc.n	d32c <RF433ReadRXBuffer+0x18>
	{
		buffer[i] = 0x00;
	}
	buffer[0] = 0x06;
    d356:	687b      	ldr	r3, [r7, #4]
    d358:	2206      	movs	r2, #6
    d35a:	701a      	strb	r2, [r3, #0]
	buffer[1] = length;
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	3301      	adds	r3, #1
    d360:	1cfa      	adds	r2, r7, #3
    d362:	7812      	ldrb	r2, [r2, #0]
    d364:	701a      	strb	r2, [r3, #0]
	SPITInOut(buffer,length+3);
    d366:	1cfb      	adds	r3, r7, #3
    d368:	781b      	ldrb	r3, [r3, #0]
    d36a:	3303      	adds	r3, #3
    d36c:	b2db      	uxtb	r3, r3
    d36e:	687a      	ldr	r2, [r7, #4]
    d370:	1c10      	adds	r0, r2, #0
    d372:	1c19      	adds	r1, r3, #0
    d374:	4b11      	ldr	r3, [pc, #68]	; (d3bc <RF433ReadRXBuffer+0xa8>)
    d376:	4798      	blx	r3
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    d378:	1c3b      	adds	r3, r7, #0
    d37a:	330f      	adds	r3, #15
    d37c:	2200      	movs	r2, #0
    d37e:	701a      	strb	r2, [r3, #0]
    d380:	e012      	b.n	d3a8 <RF433ReadRXBuffer+0x94>
	{
		tpsRXBuffer[i] = buffer[i+3];
    d382:	1c3b      	adds	r3, r7, #0
    d384:	330f      	adds	r3, #15
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	1c3a      	adds	r2, r7, #0
    d38a:	320f      	adds	r2, #15
    d38c:	7812      	ldrb	r2, [r2, #0]
    d38e:	3203      	adds	r2, #3
    d390:	6879      	ldr	r1, [r7, #4]
    d392:	188a      	adds	r2, r1, r2
    d394:	7811      	ldrb	r1, [r2, #0]
    d396:	4a0a      	ldr	r2, [pc, #40]	; (d3c0 <RF433ReadRXBuffer+0xac>)
    d398:	54d1      	strb	r1, [r2, r3]
	buffer[1] = length;
	SPITInOut(buffer,length+3);
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    d39a:	1c3b      	adds	r3, r7, #0
    d39c:	330f      	adds	r3, #15
    d39e:	781a      	ldrb	r2, [r3, #0]
    d3a0:	1c3b      	adds	r3, r7, #0
    d3a2:	330f      	adds	r3, #15
    d3a4:	3201      	adds	r2, #1
    d3a6:	701a      	strb	r2, [r3, #0]
    d3a8:	1c3a      	adds	r2, r7, #0
    d3aa:	320f      	adds	r2, #15
    d3ac:	1cfb      	adds	r3, r7, #3
    d3ae:	7812      	ldrb	r2, [r2, #0]
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	429a      	cmp	r2, r3
    d3b4:	d3e5      	bcc.n	d382 <RF433ReadRXBuffer+0x6e>
	{
		tpsRXBuffer[i] = buffer[i+3];
	}  
}  
    d3b6:	46bd      	mov	sp, r7
    d3b8:	b004      	add	sp, #16
    d3ba:	bd80      	pop	{r7, pc}
    d3bc:	0000d179 	.word	0x0000d179
    d3c0:	20003498 	.word	0x20003498

0000d3c4 <RF433ReadRXLevel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXLevel(void)
{
    d3c4:	b580      	push	{r7, lr}
    d3c6:	b082      	sub	sp, #8
    d3c8:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[3];
	
	commandBuffer[0] = 0x01;
    d3ca:	1d3b      	adds	r3, r7, #4
    d3cc:	2201      	movs	r2, #1
    d3ce:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;
    d3d0:	1d3b      	adds	r3, r7, #4
    d3d2:	2200      	movs	r2, #0
    d3d4:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00;
    d3d6:	1d3b      	adds	r3, r7, #4
    d3d8:	2200      	movs	r2, #0
    d3da:	709a      	strb	r2, [r3, #2]
	SPITInOut(commandBuffer,3);
    d3dc:	1d3b      	adds	r3, r7, #4
    d3de:	1c18      	adds	r0, r3, #0
    d3e0:	2103      	movs	r1, #3
    d3e2:	4b04      	ldr	r3, [pc, #16]	; (d3f4 <RF433ReadRXLevel+0x30>)
    d3e4:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte
	//--------------------------
 	tpsRXLevel = commandBuffer[2];
    d3e6:	1d3b      	adds	r3, r7, #4
    d3e8:	789a      	ldrb	r2, [r3, #2]
    d3ea:	4b03      	ldr	r3, [pc, #12]	; (d3f8 <RF433ReadRXLevel+0x34>)
    d3ec:	701a      	strb	r2, [r3, #0]
} 
    d3ee:	46bd      	mov	sp, r7
    d3f0:	b002      	add	sp, #8
    d3f2:	bd80      	pop	{r7, pc}
    d3f4:	0000d179 	.word	0x0000d179
    d3f8:	20003394 	.word	0x20003394

0000d3fc <RF433ReadEvents>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadEvents(void)
{
    d3fc:	b580      	push	{r7, lr}
    d3fe:	b082      	sub	sp, #8
    d400:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[5];
	uint8_t i; 
	
	commandBuffer[0] = 0x04;
    d402:	1c3b      	adds	r3, r7, #0
    d404:	2204      	movs	r2, #4
    d406:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;  	
    d408:	1c3b      	adds	r3, r7, #0
    d40a:	2200      	movs	r2, #0
    d40c:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00; 
    d40e:	1c3b      	adds	r3, r7, #0
    d410:	2200      	movs	r2, #0
    d412:	709a      	strb	r2, [r3, #2]
	commandBuffer[3] = 0x00;
    d414:	1c3b      	adds	r3, r7, #0
    d416:	2200      	movs	r2, #0
    d418:	70da      	strb	r2, [r3, #3]
	commandBuffer[4] = 0x00; 
    d41a:	1c3b      	adds	r3, r7, #0
    d41c:	2200      	movs	r2, #0
    d41e:	711a      	strb	r2, [r3, #4]
	SPITInOut(commandBuffer,4);
    d420:	1c3b      	adds	r3, r7, #0
    d422:	1c18      	adds	r0, r3, #0
    d424:	2104      	movs	r1, #4
    d426:	4b0d      	ldr	r3, [pc, #52]	; (d45c <RF433ReadEvents+0x60>)
    d428:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    d42a:	1dfb      	adds	r3, r7, #7
    d42c:	2200      	movs	r2, #0
    d42e:	701a      	strb	r2, [r3, #0]
    d430:	e00c      	b.n	d44c <RF433ReadEvents+0x50>
	{
		tpsEvents[i] = commandBuffer[i];
    d432:	1dfb      	adds	r3, r7, #7
    d434:	781b      	ldrb	r3, [r3, #0]
    d436:	1dfa      	adds	r2, r7, #7
    d438:	7812      	ldrb	r2, [r2, #0]
    d43a:	1c39      	adds	r1, r7, #0
    d43c:	5c89      	ldrb	r1, [r1, r2]
    d43e:	4a08      	ldr	r2, [pc, #32]	; (d460 <RF433ReadEvents+0x64>)
    d440:	54d1      	strb	r1, [r2, r3]
	commandBuffer[4] = 0x00; 
	SPITInOut(commandBuffer,4);
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    d442:	1dfb      	adds	r3, r7, #7
    d444:	781a      	ldrb	r2, [r3, #0]
    d446:	1dfb      	adds	r3, r7, #7
    d448:	3201      	adds	r2, #1
    d44a:	701a      	strb	r2, [r3, #0]
    d44c:	1dfb      	adds	r3, r7, #7
    d44e:	781b      	ldrb	r3, [r3, #0]
    d450:	2b03      	cmp	r3, #3
    d452:	d9ee      	bls.n	d432 <RF433ReadEvents+0x36>
	{
		tpsEvents[i] = commandBuffer[i];
	}
}
    d454:	46bd      	mov	sp, r7
    d456:	b002      	add	sp, #8
    d458:	bd80      	pop	{r7, pc}
    d45a:	46c0      	nop			; (mov r8, r8)
    d45c:	0000d179 	.word	0x0000d179
    d460:	200030f4 	.word	0x200030f4

0000d464 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    d464:	b580      	push	{r7, lr}
    d466:	b082      	sub	sp, #8
    d468:	af00      	add	r7, sp, #0
    d46a:	1c02      	adds	r2, r0, #0
    d46c:	1dfb      	adds	r3, r7, #7
    d46e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d470:	4b06      	ldr	r3, [pc, #24]	; (d48c <system_interrupt_enable+0x28>)
    d472:	1dfa      	adds	r2, r7, #7
    d474:	7812      	ldrb	r2, [r2, #0]
    d476:	1c11      	adds	r1, r2, #0
    d478:	221f      	movs	r2, #31
    d47a:	400a      	ands	r2, r1
    d47c:	2101      	movs	r1, #1
    d47e:	1c08      	adds	r0, r1, #0
    d480:	4090      	lsls	r0, r2
    d482:	1c02      	adds	r2, r0, #0
    d484:	601a      	str	r2, [r3, #0]
}
    d486:	46bd      	mov	sp, r7
    d488:	b002      	add	sp, #8
    d48a:	bd80      	pop	{r7, pc}
    d48c:	e000e100 	.word	0xe000e100

0000d490 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	1c02      	adds	r2, r0, #0
    d498:	1dfb      	adds	r3, r7, #7
    d49a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d49c:	4a07      	ldr	r2, [pc, #28]	; (d4bc <system_interrupt_disable+0x2c>)
    d49e:	1dfb      	adds	r3, r7, #7
    d4a0:	781b      	ldrb	r3, [r3, #0]
    d4a2:	1c19      	adds	r1, r3, #0
    d4a4:	231f      	movs	r3, #31
    d4a6:	400b      	ands	r3, r1
    d4a8:	2101      	movs	r1, #1
    d4aa:	1c08      	adds	r0, r1, #0
    d4ac:	4098      	lsls	r0, r3
    d4ae:	1c03      	adds	r3, r0, #0
    d4b0:	1c19      	adds	r1, r3, #0
    d4b2:	2380      	movs	r3, #128	; 0x80
    d4b4:	50d1      	str	r1, [r2, r3]
}
    d4b6:	46bd      	mov	sp, r7
    d4b8:	b002      	add	sp, #8
    d4ba:	bd80      	pop	{r7, pc}
    d4bc:	e000e100 	.word	0xe000e100

0000d4c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    d4c0:	b580      	push	{r7, lr}
    d4c2:	b084      	sub	sp, #16
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	8a1b      	ldrh	r3, [r3, #16]
    d4d2:	b29b      	uxth	r3, r3
    d4d4:	1c1a      	adds	r2, r3, #0
    d4d6:	2380      	movs	r3, #128	; 0x80
    d4d8:	021b      	lsls	r3, r3, #8
    d4da:	4013      	ands	r3, r2
    d4dc:	1e5a      	subs	r2, r3, #1
    d4de:	4193      	sbcs	r3, r2
    d4e0:	b2db      	uxtb	r3, r3
#endif
}
    d4e2:	1c18      	adds	r0, r3, #0
    d4e4:	46bd      	mov	sp, r7
    d4e6:	b004      	add	sp, #16
    d4e8:	bd80      	pop	{r7, pc}
    d4ea:	46c0      	nop			; (mov r8, r8)

0000d4ec <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    d4ec:	b580      	push	{r7, lr}
    d4ee:	b082      	sub	sp, #8
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    d4f4:	46c0      	nop			; (mov r8, r8)
    d4f6:	687b      	ldr	r3, [r7, #4]
    d4f8:	1c18      	adds	r0, r3, #0
    d4fa:	4b04      	ldr	r3, [pc, #16]	; (d50c <_usart_wait_for_sync+0x20>)
    d4fc:	4798      	blx	r3
    d4fe:	1c03      	adds	r3, r0, #0
    d500:	2b00      	cmp	r3, #0
    d502:	d1f8      	bne.n	d4f6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    d504:	46bd      	mov	sp, r7
    d506:	b002      	add	sp, #8
    d508:	bd80      	pop	{r7, pc}
    d50a:	46c0      	nop			; (mov r8, r8)
    d50c:	0000d4c1 	.word	0x0000d4c1

0000d510 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    d510:	b580      	push	{r7, lr}
    d512:	b082      	sub	sp, #8
    d514:	af00      	add	r7, sp, #0
    d516:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d518:	687b      	ldr	r3, [r7, #4]
    d51a:	2280      	movs	r2, #128	; 0x80
    d51c:	05d2      	lsls	r2, r2, #23
    d51e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d520:	687b      	ldr	r3, [r7, #4]
    d522:	2200      	movs	r2, #0
    d524:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    d526:	687b      	ldr	r3, [r7, #4]
    d528:	22ff      	movs	r2, #255	; 0xff
    d52a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	2200      	movs	r2, #0
    d530:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d532:	687b      	ldr	r3, [r7, #4]
    d534:	2200      	movs	r2, #0
    d536:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    d538:	687b      	ldr	r3, [r7, #4]
    d53a:	2296      	movs	r2, #150	; 0x96
    d53c:	0192      	lsls	r2, r2, #6
    d53e:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	2201      	movs	r2, #1
    d544:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
    d546:	687b      	ldr	r3, [r7, #4]
    d548:	2201      	movs	r2, #1
    d54a:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
    d54c:	687b      	ldr	r3, [r7, #4]
    d54e:	2200      	movs	r2, #0
    d550:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	2200      	movs	r2, #0
    d556:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    d558:	687b      	ldr	r3, [r7, #4]
    d55a:	2200      	movs	r2, #0
    d55c:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    d55e:	687b      	ldr	r3, [r7, #4]
    d560:	2288      	movs	r2, #136	; 0x88
    d562:	0352      	lsls	r2, r2, #13
    d564:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    d566:	687b      	ldr	r3, [r7, #4]
    d568:	2200      	movs	r2, #0
    d56a:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	2200      	movs	r2, #0
    d570:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	2200      	movs	r2, #0
    d576:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d578:	687b      	ldr	r3, [r7, #4]
    d57a:	2200      	movs	r2, #0
    d57c:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
    d57e:	687b      	ldr	r3, [r7, #4]
    d580:	2200      	movs	r2, #0
    d582:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
    d584:	687b      	ldr	r3, [r7, #4]
    d586:	2200      	movs	r2, #0
    d588:	62da      	str	r2, [r3, #44]	; 0x2c
	config->receive_pulse_length                        = 19;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
#endif
}
    d58a:	46bd      	mov	sp, r7
    d58c:	b002      	add	sp, #8
    d58e:	bd80      	pop	{r7, pc}

0000d590 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    d590:	b580      	push	{r7, lr}
    d592:	b084      	sub	sp, #16
    d594:	af00      	add	r7, sp, #0
    d596:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d598:	687b      	ldr	r3, [r7, #4]
    d59a:	681b      	ldr	r3, [r3, #0]
    d59c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	681b      	ldr	r3, [r3, #0]
    d5a2:	1c18      	adds	r0, r3, #0
    d5a4:	4b09      	ldr	r3, [pc, #36]	; (d5cc <usart_enable+0x3c>)
    d5a6:	4798      	blx	r3
    d5a8:	1c03      	adds	r3, r0, #0
    d5aa:	1c18      	adds	r0, r3, #0
    d5ac:	4b08      	ldr	r3, [pc, #32]	; (d5d0 <usart_enable+0x40>)
    d5ae:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d5b0:	687b      	ldr	r3, [r7, #4]
    d5b2:	1c18      	adds	r0, r3, #0
    d5b4:	4b07      	ldr	r3, [pc, #28]	; (d5d4 <usart_enable+0x44>)
    d5b6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d5b8:	68fb      	ldr	r3, [r7, #12]
    d5ba:	681b      	ldr	r3, [r3, #0]
    d5bc:	2202      	movs	r2, #2
    d5be:	431a      	orrs	r2, r3
    d5c0:	68fb      	ldr	r3, [r7, #12]
    d5c2:	601a      	str	r2, [r3, #0]
}
    d5c4:	46bd      	mov	sp, r7
    d5c6:	b004      	add	sp, #16
    d5c8:	bd80      	pop	{r7, pc}
    d5ca:	46c0      	nop			; (mov r8, r8)
    d5cc:	00012a65 	.word	0x00012a65
    d5d0:	0000d465 	.word	0x0000d465
    d5d4:	0000d4ed 	.word	0x0000d4ed

0000d5d8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    d5d8:	b580      	push	{r7, lr}
    d5da:	b084      	sub	sp, #16
    d5dc:	af00      	add	r7, sp, #0
    d5de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5e0:	687b      	ldr	r3, [r7, #4]
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    d5e6:	687b      	ldr	r3, [r7, #4]
    d5e8:	681b      	ldr	r3, [r3, #0]
    d5ea:	1c18      	adds	r0, r3, #0
    d5ec:	4b0a      	ldr	r3, [pc, #40]	; (d618 <usart_disable+0x40>)
    d5ee:	4798      	blx	r3
    d5f0:	1c03      	adds	r3, r0, #0
    d5f2:	1c18      	adds	r0, r3, #0
    d5f4:	4b09      	ldr	r3, [pc, #36]	; (d61c <usart_disable+0x44>)
    d5f6:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d5f8:	687b      	ldr	r3, [r7, #4]
    d5fa:	1c18      	adds	r0, r3, #0
    d5fc:	4b08      	ldr	r3, [pc, #32]	; (d620 <usart_disable+0x48>)
    d5fe:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    d600:	68fb      	ldr	r3, [r7, #12]
    d602:	681b      	ldr	r3, [r3, #0]
    d604:	2202      	movs	r2, #2
    d606:	1c19      	adds	r1, r3, #0
    d608:	4391      	bics	r1, r2
    d60a:	1c0a      	adds	r2, r1, #0
    d60c:	68fb      	ldr	r3, [r7, #12]
    d60e:	601a      	str	r2, [r3, #0]
}
    d610:	46bd      	mov	sp, r7
    d612:	b004      	add	sp, #16
    d614:	bd80      	pop	{r7, pc}
    d616:	46c0      	nop			; (mov r8, r8)
    d618:	00012a65 	.word	0x00012a65
    d61c:	0000d491 	.word	0x0000d491
    d620:	0000d4ed 	.word	0x0000d4ed

0000d624 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    d624:	b580      	push	{r7, lr}
    d626:	b082      	sub	sp, #8
    d628:	af00      	add	r7, sp, #0
    d62a:	6078      	str	r0, [r7, #4]
    d62c:	1c0a      	adds	r2, r1, #0
    d62e:	1cfb      	adds	r3, r7, #3
    d630:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    d632:	687a      	ldr	r2, [r7, #4]
    d634:	2321      	movs	r3, #33	; 0x21
    d636:	5cd3      	ldrb	r3, [r2, r3]
    d638:	b2da      	uxtb	r2, r3
    d63a:	1cfb      	adds	r3, r7, #3
    d63c:	781b      	ldrb	r3, [r3, #0]
    d63e:	2101      	movs	r1, #1
    d640:	1c08      	adds	r0, r1, #0
    d642:	4098      	lsls	r0, r3
    d644:	1c03      	adds	r3, r0, #0
    d646:	b2db      	uxtb	r3, r3
    d648:	4313      	orrs	r3, r2
    d64a:	b2db      	uxtb	r3, r3
    d64c:	b2d9      	uxtb	r1, r3
    d64e:	687a      	ldr	r2, [r7, #4]
    d650:	2321      	movs	r3, #33	; 0x21
    d652:	54d1      	strb	r1, [r2, r3]

}
    d654:	46bd      	mov	sp, r7
    d656:	b002      	add	sp, #8
    d658:	bd80      	pop	{r7, pc}
    d65a:	46c0      	nop			; (mov r8, r8)

0000d65c <UsartSendData>:
#define COMMAND_DS 0x4453	//second generation files - remote



void UsartSendData(uint16_t value)
{
    d65c:	b580      	push	{r7, lr}
    d65e:	b082      	sub	sp, #8
    d660:	af00      	add	r7, sp, #0
    d662:	1c02      	adds	r2, r0, #0
    d664:	1dbb      	adds	r3, r7, #6
    d666:	801a      	strh	r2, [r3, #0]
//	if ((action == EXTENDING)||(action == EXTENDING_BY_ENCODER))
//	{
		BTTransmit(txBluetoothBuffer,11,TRUE);
//	}
#endif
}
    d668:	46bd      	mov	sp, r7
    d66a:	b002      	add	sp, #8
    d66c:	bd80      	pop	{r7, pc}
    d66e:	46c0      	nop			; (mov r8, r8)

0000d670 <usart_read_callback>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void usart_read_callback(const struct usart_module *const usart_module)
{
    d670:	b580      	push	{r7, lr}
    d672:	b086      	sub	sp, #24
    d674:	af00      	add	r7, sp, #0
    d676:	6078      	str	r0, [r7, #4]
	uint16_t itemp,itemp2;
	uint32_t ltemp,ltemp2; 
	 
//	usart_write_buffer_job(&usart_instance,
//			(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	receiveIntercharTimeout = TRUE; 
    d678:	4bd9      	ldr	r3, [pc, #868]	; (d9e0 <usart_read_callback+0x370>)
    d67a:	2201      	movs	r2, #1
    d67c:	701a      	strb	r2, [r3, #0]
	receiveLength = usart_instance.rxBufferCount;
    d67e:	4bd9      	ldr	r3, [pc, #868]	; (d9e4 <usart_read_callback+0x374>)
    d680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    d682:	b29a      	uxth	r2, r3
    d684:	4bd8      	ldr	r3, [pc, #864]	; (d9e8 <usart_read_callback+0x378>)
    d686:	801a      	strh	r2, [r3, #0]
	itemp = general_buffer[3];
    d688:	4bd8      	ldr	r3, [pc, #864]	; (d9ec <usart_read_callback+0x37c>)
    d68a:	78da      	ldrb	r2, [r3, #3]
    d68c:	1c3b      	adds	r3, r7, #0
    d68e:	3316      	adds	r3, #22
    d690:	801a      	strh	r2, [r3, #0]
	itemp = itemp<<8;
    d692:	1c3b      	adds	r3, r7, #0
    d694:	3316      	adds	r3, #22
    d696:	1c3a      	adds	r2, r7, #0
    d698:	3216      	adds	r2, #22
    d69a:	8812      	ldrh	r2, [r2, #0]
    d69c:	0212      	lsls	r2, r2, #8
    d69e:	801a      	strh	r2, [r3, #0]
	itemp2 = general_buffer[4];
    d6a0:	4bd2      	ldr	r3, [pc, #840]	; (d9ec <usart_read_callback+0x37c>)
    d6a2:	791a      	ldrb	r2, [r3, #4]
    d6a4:	1c3b      	adds	r3, r7, #0
    d6a6:	3314      	adds	r3, #20
    d6a8:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    d6aa:	1c3b      	adds	r3, r7, #0
    d6ac:	3316      	adds	r3, #22
    d6ae:	1c39      	adds	r1, r7, #0
    d6b0:	3116      	adds	r1, #22
    d6b2:	1c3a      	adds	r2, r7, #0
    d6b4:	3214      	adds	r2, #20
    d6b6:	8809      	ldrh	r1, [r1, #0]
    d6b8:	8812      	ldrh	r2, [r2, #0]
    d6ba:	430a      	orrs	r2, r1
    d6bc:	801a      	strh	r2, [r3, #0]
	
	txBluetoothBuffer[0]='#';
    d6be:	4bcc      	ldr	r3, [pc, #816]	; (d9f0 <usart_read_callback+0x380>)
    d6c0:	2223      	movs	r2, #35	; 0x23
    d6c2:	701a      	strb	r2, [r3, #0]
	if (receiveLength >5)
    d6c4:	4bc8      	ldr	r3, [pc, #800]	; (d9e8 <usart_read_callback+0x378>)
    d6c6:	881b      	ldrh	r3, [r3, #0]
    d6c8:	2b05      	cmp	r3, #5
    d6ca:	d801      	bhi.n	d6d0 <usart_read_callback+0x60>
    d6cc:	f000 fd18 	bl	e100 <usart_read_callback+0xa90>
	{
		switch(itemp)
    d6d0:	1c3b      	adds	r3, r7, #0
    d6d2:	3316      	adds	r3, #22
    d6d4:	881b      	ldrh	r3, [r3, #0]
    d6d6:	4ac7      	ldr	r2, [pc, #796]	; (d9f4 <usart_read_callback+0x384>)
    d6d8:	4293      	cmp	r3, r2
    d6da:	d100      	bne.n	d6de <usart_read_callback+0x6e>
    d6dc:	e2c6      	b.n	dc6c <usart_read_callback+0x5fc>
    d6de:	4ac5      	ldr	r2, [pc, #788]	; (d9f4 <usart_read_callback+0x384>)
    d6e0:	4293      	cmp	r3, r2
    d6e2:	dc07      	bgt.n	d6f4 <usart_read_callback+0x84>
    d6e4:	4ac4      	ldr	r2, [pc, #784]	; (d9f8 <usart_read_callback+0x388>)
    d6e6:	4293      	cmp	r3, r2
    d6e8:	d03c      	beq.n	d764 <usart_read_callback+0xf4>
    d6ea:	4ac4      	ldr	r2, [pc, #784]	; (d9fc <usart_read_callback+0x38c>)
    d6ec:	4293      	cmp	r3, r2
    d6ee:	d05f      	beq.n	d7b0 <usart_read_callback+0x140>
    d6f0:	f000 fd06 	bl	e100 <usart_read_callback+0xa90>
    d6f4:	4ac2      	ldr	r2, [pc, #776]	; (da00 <usart_read_callback+0x390>)
    d6f6:	4293      	cmp	r3, r2
    d6f8:	d101      	bne.n	d6fe <usart_read_callback+0x8e>
    d6fa:	f000 fbe9 	bl	ded0 <usart_read_callback+0x860>
    d6fe:	4ac1      	ldr	r2, [pc, #772]	; (da04 <usart_read_callback+0x394>)
    d700:	4293      	cmp	r3, r2
    d702:	d005      	beq.n	d710 <usart_read_callback+0xa0>
    d704:	4ac0      	ldr	r2, [pc, #768]	; (da08 <usart_read_callback+0x398>)
    d706:	4293      	cmp	r3, r2
    d708:	d100      	bne.n	d70c <usart_read_callback+0x9c>
    d70a:	e197      	b.n	da3c <usart_read_callback+0x3cc>
    d70c:	f000 fcf8 	bl	e100 <usart_read_callback+0xa90>
		{
			case COMMAND_RV:
			{
				txBluetoothBuffer[1] = 0;
    d710:	4bb7      	ldr	r3, [pc, #732]	; (d9f0 <usart_read_callback+0x380>)
    d712:	2200      	movs	r2, #0
    d714:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d716:	4bb6      	ldr	r3, [pc, #728]	; (d9f0 <usart_read_callback+0x380>)
    d718:	2209      	movs	r2, #9
    d71a:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'r';
    d71c:	4bb4      	ldr	r3, [pc, #720]	; (d9f0 <usart_read_callback+0x380>)
    d71e:	2272      	movs	r2, #114	; 0x72
    d720:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    d722:	4bb3      	ldr	r3, [pc, #716]	; (d9f0 <usart_read_callback+0x380>)
    d724:	2276      	movs	r2, #118	; 0x76
    d726:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = remoteVersionToReport[0];
    d728:	4bb8      	ldr	r3, [pc, #736]	; (da0c <usart_read_callback+0x39c>)
    d72a:	781a      	ldrb	r2, [r3, #0]
    d72c:	4bb0      	ldr	r3, [pc, #704]	; (d9f0 <usart_read_callback+0x380>)
    d72e:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = remoteVersionToReport[1];
    d730:	4bb6      	ldr	r3, [pc, #728]	; (da0c <usart_read_callback+0x39c>)
    d732:	785a      	ldrb	r2, [r3, #1]
    d734:	4bae      	ldr	r3, [pc, #696]	; (d9f0 <usart_read_callback+0x380>)
    d736:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';		
    d738:	4bad      	ldr	r3, [pc, #692]	; (d9f0 <usart_read_callback+0x380>)
    d73a:	222e      	movs	r2, #46	; 0x2e
    d73c:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = remoteVersionToReport[2];
    d73e:	4bb3      	ldr	r3, [pc, #716]	; (da0c <usart_read_callback+0x39c>)
    d740:	789a      	ldrb	r2, [r3, #2]
    d742:	4bab      	ldr	r3, [pc, #684]	; (d9f0 <usart_read_callback+0x380>)
    d744:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = remoteVersionToReport[3];
    d746:	4bb1      	ldr	r3, [pc, #708]	; (da0c <usart_read_callback+0x39c>)
    d748:	78da      	ldrb	r2, [r3, #3]
    d74a:	4ba9      	ldr	r3, [pc, #676]	; (d9f0 <usart_read_callback+0x380>)
    d74c:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d74e:	4ba8      	ldr	r3, [pc, #672]	; (d9f0 <usart_read_callback+0x380>)
    d750:	220d      	movs	r2, #13
    d752:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);												
    d754:	4ba6      	ldr	r3, [pc, #664]	; (d9f0 <usart_read_callback+0x380>)
    d756:	1c18      	adds	r0, r3, #0
    d758:	210b      	movs	r1, #11
    d75a:	2201      	movs	r2, #1
    d75c:	4bac      	ldr	r3, [pc, #688]	; (da10 <usart_read_callback+0x3a0>)
    d75e:	4798      	blx	r3
				break;
    d760:	f000 fcce 	bl	e100 <usart_read_callback+0xa90>
			}
			case COMMAND_BV:
			{
				txBluetoothBuffer[1] = 0;
    d764:	4ba2      	ldr	r3, [pc, #648]	; (d9f0 <usart_read_callback+0x380>)
    d766:	2200      	movs	r2, #0
    d768:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d76a:	4ba1      	ldr	r3, [pc, #644]	; (d9f0 <usart_read_callback+0x380>)
    d76c:	2209      	movs	r2, #9
    d76e:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'b';
    d770:	4b9f      	ldr	r3, [pc, #636]	; (d9f0 <usart_read_callback+0x380>)
    d772:	2262      	movs	r2, #98	; 0x62
    d774:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    d776:	4b9e      	ldr	r3, [pc, #632]	; (d9f0 <usart_read_callback+0x380>)
    d778:	2276      	movs	r2, #118	; 0x76
    d77a:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    d77c:	4b9c      	ldr	r3, [pc, #624]	; (d9f0 <usart_read_callback+0x380>)
    d77e:	2230      	movs	r2, #48	; 0x30
    d780:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    d782:	4b9b      	ldr	r3, [pc, #620]	; (d9f0 <usart_read_callback+0x380>)
    d784:	2231      	movs	r2, #49	; 0x31
    d786:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';
    d788:	4b99      	ldr	r3, [pc, #612]	; (d9f0 <usart_read_callback+0x380>)
    d78a:	222e      	movs	r2, #46	; 0x2e
    d78c:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = FWVER1;
    d78e:	4b98      	ldr	r3, [pc, #608]	; (d9f0 <usart_read_callback+0x380>)
    d790:	2239      	movs	r2, #57	; 0x39
    d792:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = FWVER0;
    d794:	4b96      	ldr	r3, [pc, #600]	; (d9f0 <usart_read_callback+0x380>)
    d796:	2233      	movs	r2, #51	; 0x33
    d798:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d79a:	4b95      	ldr	r3, [pc, #596]	; (d9f0 <usart_read_callback+0x380>)
    d79c:	220d      	movs	r2, #13
    d79e:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    d7a0:	4b93      	ldr	r3, [pc, #588]	; (d9f0 <usart_read_callback+0x380>)
    d7a2:	1c18      	adds	r0, r3, #0
    d7a4:	210b      	movs	r1, #11
    d7a6:	2201      	movs	r2, #1
    d7a8:	4b99      	ldr	r3, [pc, #612]	; (da10 <usart_read_callback+0x3a0>)
    d7aa:	4798      	blx	r3
				break;
    d7ac:	f000 fca8 	bl	e100 <usart_read_callback+0xa90>
			}	
			case COMMAND_DB:
			{
				downloadPacketNumber = general_buffer[5];
    d7b0:	4b8e      	ldr	r3, [pc, #568]	; (d9ec <usart_read_callback+0x37c>)
    d7b2:	795a      	ldrb	r2, [r3, #5]
    d7b4:	4b97      	ldr	r3, [pc, #604]	; (da14 <usart_read_callback+0x3a4>)
    d7b6:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    d7b8:	4b96      	ldr	r3, [pc, #600]	; (da14 <usart_read_callback+0x3a4>)
    d7ba:	781b      	ldrb	r3, [r3, #0]
    d7bc:	2b00      	cmp	r3, #0
    d7be:	d000      	beq.n	d7c2 <usart_read_callback+0x152>
    d7c0:	e08e      	b.n	d8e0 <usart_read_callback+0x270>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    d7c2:	4b8a      	ldr	r3, [pc, #552]	; (d9ec <usart_read_callback+0x37c>)
    d7c4:	799b      	ldrb	r3, [r3, #6]
    d7c6:	061b      	lsls	r3, r3, #24
    d7c8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    d7ca:	4b88      	ldr	r3, [pc, #544]	; (d9ec <usart_read_callback+0x37c>)
    d7cc:	79db      	ldrb	r3, [r3, #7]
    d7ce:	041b      	lsls	r3, r3, #16
    d7d0:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    d7d2:	693a      	ldr	r2, [r7, #16]
    d7d4:	68fb      	ldr	r3, [r7, #12]
    d7d6:	4313      	orrs	r3, r2
    d7d8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    d7da:	4b84      	ldr	r3, [pc, #528]	; (d9ec <usart_read_callback+0x37c>)
    d7dc:	7a1b      	ldrb	r3, [r3, #8]
    d7de:	021b      	lsls	r3, r3, #8
    d7e0:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d7e2:	693a      	ldr	r2, [r7, #16]
    d7e4:	68fb      	ldr	r3, [r7, #12]
    d7e6:	4313      	orrs	r3, r2
    d7e8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    d7ea:	4b80      	ldr	r3, [pc, #512]	; (d9ec <usart_read_callback+0x37c>)
    d7ec:	7a5b      	ldrb	r3, [r3, #9]
    d7ee:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    d7f0:	693a      	ldr	r2, [r7, #16]
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	4313      	orrs	r3, r2
    d7f6:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp; 
    d7f8:	4b87      	ldr	r3, [pc, #540]	; (da18 <usart_read_callback+0x3a8>)
    d7fa:	693a      	ldr	r2, [r7, #16]
    d7fc:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    d7fe:	4b7b      	ldr	r3, [pc, #492]	; (d9ec <usart_read_callback+0x37c>)
    d800:	7a9b      	ldrb	r3, [r3, #10]
    d802:	061b      	lsls	r3, r3, #24
    d804:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    d806:	4b79      	ldr	r3, [pc, #484]	; (d9ec <usart_read_callback+0x37c>)
    d808:	7adb      	ldrb	r3, [r3, #11]
    d80a:	041b      	lsls	r3, r3, #16
    d80c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d80e:	693a      	ldr	r2, [r7, #16]
    d810:	68fb      	ldr	r3, [r7, #12]
    d812:	4313      	orrs	r3, r2
    d814:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    d816:	4b75      	ldr	r3, [pc, #468]	; (d9ec <usart_read_callback+0x37c>)
    d818:	7b1b      	ldrb	r3, [r3, #12]
    d81a:	021b      	lsls	r3, r3, #8
    d81c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d81e:	693a      	ldr	r2, [r7, #16]
    d820:	68fb      	ldr	r3, [r7, #12]
    d822:	4313      	orrs	r3, r2
    d824:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    d826:	4b71      	ldr	r3, [pc, #452]	; (d9ec <usart_read_callback+0x37c>)
    d828:	7b5b      	ldrb	r3, [r3, #13]
    d82a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d82c:	693a      	ldr	r2, [r7, #16]
    d82e:	68fb      	ldr	r3, [r7, #12]
    d830:	4313      	orrs	r3, r2
    d832:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;					
    d834:	4b78      	ldr	r3, [pc, #480]	; (da18 <usart_read_callback+0x3a8>)
    d836:	693a      	ldr	r2, [r7, #16]
    d838:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    d83a:	4b6c      	ldr	r3, [pc, #432]	; (d9ec <usart_read_callback+0x37c>)
    d83c:	7b9b      	ldrb	r3, [r3, #14]
    d83e:	061b      	lsls	r3, r3, #24
    d840:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    d842:	4b6a      	ldr	r3, [pc, #424]	; (d9ec <usart_read_callback+0x37c>)
    d844:	7bdb      	ldrb	r3, [r3, #15]
    d846:	041b      	lsls	r3, r3, #16
    d848:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d84a:	693a      	ldr	r2, [r7, #16]
    d84c:	68fb      	ldr	r3, [r7, #12]
    d84e:	4313      	orrs	r3, r2
    d850:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    d852:	4b66      	ldr	r3, [pc, #408]	; (d9ec <usart_read_callback+0x37c>)
    d854:	7c1b      	ldrb	r3, [r3, #16]
    d856:	021b      	lsls	r3, r3, #8
    d858:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d85a:	693a      	ldr	r2, [r7, #16]
    d85c:	68fb      	ldr	r3, [r7, #12]
    d85e:	4313      	orrs	r3, r2
    d860:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    d862:	4b62      	ldr	r3, [pc, #392]	; (d9ec <usart_read_callback+0x37c>)
    d864:	7c5b      	ldrb	r3, [r3, #17]
    d866:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d868:	693a      	ldr	r2, [r7, #16]
    d86a:	68fb      	ldr	r3, [r7, #12]
    d86c:	4313      	orrs	r3, r2
    d86e:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;	
    d870:	4b69      	ldr	r3, [pc, #420]	; (da18 <usart_read_callback+0x3a8>)
    d872:	693a      	ldr	r2, [r7, #16]
    d874:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    d876:	4b5d      	ldr	r3, [pc, #372]	; (d9ec <usart_read_callback+0x37c>)
    d878:	7c9b      	ldrb	r3, [r3, #18]
    d87a:	061b      	lsls	r3, r3, #24
    d87c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    d87e:	4b5b      	ldr	r3, [pc, #364]	; (d9ec <usart_read_callback+0x37c>)
    d880:	7cdb      	ldrb	r3, [r3, #19]
    d882:	041b      	lsls	r3, r3, #16
    d884:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d886:	693a      	ldr	r2, [r7, #16]
    d888:	68fb      	ldr	r3, [r7, #12]
    d88a:	4313      	orrs	r3, r2
    d88c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    d88e:	4b57      	ldr	r3, [pc, #348]	; (d9ec <usart_read_callback+0x37c>)
    d890:	7d1b      	ldrb	r3, [r3, #20]
    d892:	021b      	lsls	r3, r3, #8
    d894:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d896:	693a      	ldr	r2, [r7, #16]
    d898:	68fb      	ldr	r3, [r7, #12]
    d89a:	4313      	orrs	r3, r2
    d89c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    d89e:	4b53      	ldr	r3, [pc, #332]	; (d9ec <usart_read_callback+0x37c>)
    d8a0:	7d5b      	ldrb	r3, [r3, #21]
    d8a2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d8a4:	693a      	ldr	r2, [r7, #16]
    d8a6:	68fb      	ldr	r3, [r7, #12]
    d8a8:	4313      	orrs	r3, r2
    d8aa:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;		
    d8ac:	4b5a      	ldr	r3, [pc, #360]	; (da18 <usart_read_callback+0x3a8>)
    d8ae:	693a      	ldr	r2, [r7, #16]
    d8b0:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    d8b2:	4b4e      	ldr	r3, [pc, #312]	; (d9ec <usart_read_callback+0x37c>)
    d8b4:	7d9a      	ldrb	r2, [r3, #22]
    d8b6:	4b59      	ldr	r3, [pc, #356]	; (da1c <usart_read_callback+0x3ac>)
    d8b8:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    d8ba:	4b59      	ldr	r3, [pc, #356]	; (da20 <usart_read_callback+0x3b0>)
    d8bc:	2200      	movs	r2, #0
    d8be:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    d8c0:	4b58      	ldr	r3, [pc, #352]	; (da24 <usart_read_callback+0x3b4>)
    d8c2:	2201      	movs	r2, #1
    d8c4:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    d8c6:	4b58      	ldr	r3, [pc, #352]	; (da28 <usart_read_callback+0x3b8>)
    d8c8:	2200      	movs	r2, #0
    d8ca:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    d8cc:	4b57      	ldr	r3, [pc, #348]	; (da2c <usart_read_callback+0x3bc>)
    d8ce:	2200      	movs	r2, #0
    d8d0:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    d8d2:	4b56      	ldr	r3, [pc, #344]	; (da2c <usart_read_callback+0x3bc>)
    d8d4:	2200      	movs	r2, #0
    d8d6:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0; 					
    d8d8:	4b54      	ldr	r3, [pc, #336]	; (da2c <usart_read_callback+0x3bc>)
    d8da:	2200      	movs	r2, #0
    d8dc:	609a      	str	r2, [r3, #8]
    d8de:	e058      	b.n	d992 <usart_read_callback+0x322>
				}
				else
				{
					itemp = general_buffer[1];
    d8e0:	4b42      	ldr	r3, [pc, #264]	; (d9ec <usart_read_callback+0x37c>)
    d8e2:	785a      	ldrb	r2, [r3, #1]
    d8e4:	1c3b      	adds	r3, r7, #0
    d8e6:	3316      	adds	r3, #22
    d8e8:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    d8ea:	1c3b      	adds	r3, r7, #0
    d8ec:	3316      	adds	r3, #22
    d8ee:	1c3a      	adds	r2, r7, #0
    d8f0:	3216      	adds	r2, #22
    d8f2:	8812      	ldrh	r2, [r2, #0]
    d8f4:	0212      	lsls	r2, r2, #8
    d8f6:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    d8f8:	4b3c      	ldr	r3, [pc, #240]	; (d9ec <usart_read_callback+0x37c>)
    d8fa:	789a      	ldrb	r2, [r3, #2]
    d8fc:	1c3b      	adds	r3, r7, #0
    d8fe:	3314      	adds	r3, #20
    d900:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    d902:	1c3b      	adds	r3, r7, #0
    d904:	3316      	adds	r3, #22
    d906:	1c39      	adds	r1, r7, #0
    d908:	3116      	adds	r1, #22
    d90a:	1c3a      	adds	r2, r7, #0
    d90c:	3214      	adds	r2, #20
    d90e:	8809      	ldrh	r1, [r1, #0]
    d910:	8812      	ldrh	r2, [r2, #0]
    d912:	430a      	orrs	r2, r1
    d914:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    d916:	1c3b      	adds	r3, r7, #0
    d918:	3316      	adds	r3, #22
    d91a:	1c3a      	adds	r2, r7, #0
    d91c:	3216      	adds	r2, #22
    d91e:	8812      	ldrh	r2, [r2, #0]
    d920:	3a07      	subs	r2, #7
    d922:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    d924:	4b3b      	ldr	r3, [pc, #236]	; (da14 <usart_read_callback+0x3a4>)
    d926:	781a      	ldrb	r2, [r3, #0]
    d928:	4b3e      	ldr	r3, [pc, #248]	; (da24 <usart_read_callback+0x3b4>)
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	429a      	cmp	r2, r3
    d92e:	d130      	bne.n	d992 <usart_read_callback+0x322>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    d930:	4b38      	ldr	r3, [pc, #224]	; (da14 <usart_read_callback+0x3a4>)
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	1c1a      	adds	r2, r3, #0
    d936:	4b39      	ldr	r3, [pc, #228]	; (da1c <usart_read_callback+0x3ac>)
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	3301      	adds	r3, #1
    d93c:	429a      	cmp	r2, r3
    d93e:	da0d      	bge.n	d95c <usart_read_callback+0x2ec>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    d940:	4b39      	ldr	r3, [pc, #228]	; (da28 <usart_read_callback+0x3b8>)
    d942:	681b      	ldr	r3, [r3, #0]
    d944:	2284      	movs	r2, #132	; 0x84
    d946:	0292      	lsls	r2, r2, #10
    d948:	1899      	adds	r1, r3, r2
    d94a:	4a39      	ldr	r2, [pc, #228]	; (da30 <usart_read_callback+0x3c0>)
    d94c:	1c3b      	adds	r3, r7, #0
    d94e:	3316      	adds	r3, #22
    d950:	881b      	ldrh	r3, [r3, #0]
    d952:	1c08      	adds	r0, r1, #0
    d954:	1c11      	adds	r1, r2, #0
    d956:	1c1a      	adds	r2, r3, #0
    d958:	4b36      	ldr	r3, [pc, #216]	; (da34 <usart_read_callback+0x3c4>)
    d95a:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    d95c:	4b2d      	ldr	r3, [pc, #180]	; (da14 <usart_read_callback+0x3a4>)
    d95e:	781a      	ldrb	r2, [r3, #0]
    d960:	4b2e      	ldr	r3, [pc, #184]	; (da1c <usart_read_callback+0x3ac>)
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	429a      	cmp	r2, r3
    d966:	d106      	bne.n	d976 <usart_read_callback+0x306>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    d968:	4b33      	ldr	r3, [pc, #204]	; (da38 <usart_read_callback+0x3c8>)
    d96a:	681b      	ldr	r3, [r3, #0]
    d96c:	2280      	movs	r2, #128	; 0x80
    d96e:	01d2      	lsls	r2, r2, #7
    d970:	431a      	orrs	r2, r3
    d972:	4b31      	ldr	r3, [pc, #196]	; (da38 <usart_read_callback+0x3c8>)
    d974:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    d976:	1c3b      	adds	r3, r7, #0
    d978:	3316      	adds	r3, #22
    d97a:	881a      	ldrh	r2, [r3, #0]
    d97c:	4b2a      	ldr	r3, [pc, #168]	; (da28 <usart_read_callback+0x3b8>)
    d97e:	681b      	ldr	r3, [r3, #0]
    d980:	18d2      	adds	r2, r2, r3
    d982:	4b29      	ldr	r3, [pc, #164]	; (da28 <usart_read_callback+0x3b8>)
    d984:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    d986:	4b27      	ldr	r3, [pc, #156]	; (da24 <usart_read_callback+0x3b4>)
    d988:	781b      	ldrb	r3, [r3, #0]
    d98a:	3301      	adds	r3, #1
    d98c:	b2da      	uxtb	r2, r3
    d98e:	4b25      	ldr	r3, [pc, #148]	; (da24 <usart_read_callback+0x3b4>)
    d990:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    d992:	4b17      	ldr	r3, [pc, #92]	; (d9f0 <usart_read_callback+0x380>)
    d994:	2200      	movs	r2, #0
    d996:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d998:	4b15      	ldr	r3, [pc, #84]	; (d9f0 <usart_read_callback+0x380>)
    d99a:	2209      	movs	r2, #9
    d99c:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    d99e:	4b14      	ldr	r3, [pc, #80]	; (d9f0 <usart_read_callback+0x380>)
    d9a0:	2264      	movs	r2, #100	; 0x64
    d9a2:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'b';
    d9a4:	4b12      	ldr	r3, [pc, #72]	; (d9f0 <usart_read_callback+0x380>)
    d9a6:	2262      	movs	r2, #98	; 0x62
    d9a8:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    d9aa:	4b11      	ldr	r3, [pc, #68]	; (d9f0 <usart_read_callback+0x380>)
    d9ac:	2230      	movs	r2, #48	; 0x30
    d9ae:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    d9b0:	4b0f      	ldr	r3, [pc, #60]	; (d9f0 <usart_read_callback+0x380>)
    d9b2:	2231      	movs	r2, #49	; 0x31
    d9b4:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    d9b6:	4b17      	ldr	r3, [pc, #92]	; (da14 <usart_read_callback+0x3a4>)
    d9b8:	781a      	ldrb	r2, [r3, #0]
    d9ba:	4b0d      	ldr	r3, [pc, #52]	; (d9f0 <usart_read_callback+0x380>)
    d9bc:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    d9be:	4b17      	ldr	r3, [pc, #92]	; (da1c <usart_read_callback+0x3ac>)
    d9c0:	781a      	ldrb	r2, [r3, #0]
    d9c2:	4b0b      	ldr	r3, [pc, #44]	; (d9f0 <usart_read_callback+0x380>)
    d9c4:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    d9c6:	4b0a      	ldr	r3, [pc, #40]	; (d9f0 <usart_read_callback+0x380>)
    d9c8:	2200      	movs	r2, #0
    d9ca:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d9cc:	4b08      	ldr	r3, [pc, #32]	; (d9f0 <usart_read_callback+0x380>)
    d9ce:	220d      	movs	r2, #13
    d9d0:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    d9d2:	4b07      	ldr	r3, [pc, #28]	; (d9f0 <usart_read_callback+0x380>)
    d9d4:	1c18      	adds	r0, r3, #0
    d9d6:	210b      	movs	r1, #11
    d9d8:	2201      	movs	r2, #1
    d9da:	4b0d      	ldr	r3, [pc, #52]	; (da10 <usart_read_callback+0x3a0>)
    d9dc:	4798      	blx	r3
				break;
    d9de:	e38f      	b.n	e100 <usart_read_callback+0xa90>
    d9e0:	2000066b 	.word	0x2000066b
    d9e4:	200034bc 	.word	0x200034bc
    d9e8:	200034b8 	.word	0x200034b8
    d9ec:	20000a8c 	.word	0x20000a8c
    d9f0:	2000350c 	.word	0x2000350c
    d9f4:	00004443 	.word	0x00004443
    d9f8:	00004256 	.word	0x00004256
    d9fc:	00004442 	.word	0x00004442
    da00:	00004453 	.word	0x00004453
    da04:	00005256 	.word	0x00005256
    da08:	00004452 	.word	0x00004452
    da0c:	20002efc 	.word	0x20002efc
    da10:	0000e2c5 	.word	0x0000e2c5
    da14:	20003539 	.word	0x20003539
    da18:	2000353c 	.word	0x2000353c
    da1c:	20003509 	.word	0x20003509
    da20:	2000350a 	.word	0x2000350a
    da24:	20003538 	.word	0x20003538
    da28:	20003534 	.word	0x20003534
    da2c:	200034ec 	.word	0x200034ec
    da30:	20000a92 	.word	0x20000a92
    da34:	0000caf9 	.word	0x0000caf9
    da38:	2000369c 	.word	0x2000369c
			}			
			case COMMAND_DR:
			{
				downloadPacketNumber = general_buffer[5];
    da3c:	4bd7      	ldr	r3, [pc, #860]	; (dd9c <usart_read_callback+0x72c>)
    da3e:	795a      	ldrb	r2, [r3, #5]
    da40:	4bd7      	ldr	r3, [pc, #860]	; (dda0 <usart_read_callback+0x730>)
    da42:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    da44:	4bd6      	ldr	r3, [pc, #856]	; (dda0 <usart_read_callback+0x730>)
    da46:	781b      	ldrb	r3, [r3, #0]
    da48:	2b00      	cmp	r3, #0
    da4a:	d000      	beq.n	da4e <usart_read_callback+0x3de>
    da4c:	e08e      	b.n	db6c <usart_read_callback+0x4fc>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    da4e:	4bd3      	ldr	r3, [pc, #844]	; (dd9c <usart_read_callback+0x72c>)
    da50:	799b      	ldrb	r3, [r3, #6]
    da52:	061b      	lsls	r3, r3, #24
    da54:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    da56:	4bd1      	ldr	r3, [pc, #836]	; (dd9c <usart_read_callback+0x72c>)
    da58:	79db      	ldrb	r3, [r3, #7]
    da5a:	041b      	lsls	r3, r3, #16
    da5c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    da5e:	693a      	ldr	r2, [r7, #16]
    da60:	68fb      	ldr	r3, [r7, #12]
    da62:	4313      	orrs	r3, r2
    da64:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    da66:	4bcd      	ldr	r3, [pc, #820]	; (dd9c <usart_read_callback+0x72c>)
    da68:	7a1b      	ldrb	r3, [r3, #8]
    da6a:	021b      	lsls	r3, r3, #8
    da6c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da6e:	693a      	ldr	r2, [r7, #16]
    da70:	68fb      	ldr	r3, [r7, #12]
    da72:	4313      	orrs	r3, r2
    da74:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    da76:	4bc9      	ldr	r3, [pc, #804]	; (dd9c <usart_read_callback+0x72c>)
    da78:	7a5b      	ldrb	r3, [r3, #9]
    da7a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    da7c:	693a      	ldr	r2, [r7, #16]
    da7e:	68fb      	ldr	r3, [r7, #12]
    da80:	4313      	orrs	r3, r2
    da82:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp; 
    da84:	4bc7      	ldr	r3, [pc, #796]	; (dda4 <usart_read_callback+0x734>)
    da86:	693a      	ldr	r2, [r7, #16]
    da88:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    da8a:	4bc4      	ldr	r3, [pc, #784]	; (dd9c <usart_read_callback+0x72c>)
    da8c:	7a9b      	ldrb	r3, [r3, #10]
    da8e:	061b      	lsls	r3, r3, #24
    da90:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    da92:	4bc2      	ldr	r3, [pc, #776]	; (dd9c <usart_read_callback+0x72c>)
    da94:	7adb      	ldrb	r3, [r3, #11]
    da96:	041b      	lsls	r3, r3, #16
    da98:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da9a:	693a      	ldr	r2, [r7, #16]
    da9c:	68fb      	ldr	r3, [r7, #12]
    da9e:	4313      	orrs	r3, r2
    daa0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    daa2:	4bbe      	ldr	r3, [pc, #760]	; (dd9c <usart_read_callback+0x72c>)
    daa4:	7b1b      	ldrb	r3, [r3, #12]
    daa6:	021b      	lsls	r3, r3, #8
    daa8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    daaa:	693a      	ldr	r2, [r7, #16]
    daac:	68fb      	ldr	r3, [r7, #12]
    daae:	4313      	orrs	r3, r2
    dab0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    dab2:	4bba      	ldr	r3, [pc, #744]	; (dd9c <usart_read_callback+0x72c>)
    dab4:	7b5b      	ldrb	r3, [r3, #13]
    dab6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dab8:	693a      	ldr	r2, [r7, #16]
    daba:	68fb      	ldr	r3, [r7, #12]
    dabc:	4313      	orrs	r3, r2
    dabe:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;					
    dac0:	4bb8      	ldr	r3, [pc, #736]	; (dda4 <usart_read_callback+0x734>)
    dac2:	693a      	ldr	r2, [r7, #16]
    dac4:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    dac6:	4bb5      	ldr	r3, [pc, #724]	; (dd9c <usart_read_callback+0x72c>)
    dac8:	7b9b      	ldrb	r3, [r3, #14]
    daca:	061b      	lsls	r3, r3, #24
    dacc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    dace:	4bb3      	ldr	r3, [pc, #716]	; (dd9c <usart_read_callback+0x72c>)
    dad0:	7bdb      	ldrb	r3, [r3, #15]
    dad2:	041b      	lsls	r3, r3, #16
    dad4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dad6:	693a      	ldr	r2, [r7, #16]
    dad8:	68fb      	ldr	r3, [r7, #12]
    dada:	4313      	orrs	r3, r2
    dadc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    dade:	4baf      	ldr	r3, [pc, #700]	; (dd9c <usart_read_callback+0x72c>)
    dae0:	7c1b      	ldrb	r3, [r3, #16]
    dae2:	021b      	lsls	r3, r3, #8
    dae4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dae6:	693a      	ldr	r2, [r7, #16]
    dae8:	68fb      	ldr	r3, [r7, #12]
    daea:	4313      	orrs	r3, r2
    daec:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    daee:	4bab      	ldr	r3, [pc, #684]	; (dd9c <usart_read_callback+0x72c>)
    daf0:	7c5b      	ldrb	r3, [r3, #17]
    daf2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    daf4:	693a      	ldr	r2, [r7, #16]
    daf6:	68fb      	ldr	r3, [r7, #12]
    daf8:	4313      	orrs	r3, r2
    dafa:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;	
    dafc:	4ba9      	ldr	r3, [pc, #676]	; (dda4 <usart_read_callback+0x734>)
    dafe:	693a      	ldr	r2, [r7, #16]
    db00:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    db02:	4ba6      	ldr	r3, [pc, #664]	; (dd9c <usart_read_callback+0x72c>)
    db04:	7c9b      	ldrb	r3, [r3, #18]
    db06:	061b      	lsls	r3, r3, #24
    db08:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    db0a:	4ba4      	ldr	r3, [pc, #656]	; (dd9c <usart_read_callback+0x72c>)
    db0c:	7cdb      	ldrb	r3, [r3, #19]
    db0e:	041b      	lsls	r3, r3, #16
    db10:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    db12:	693a      	ldr	r2, [r7, #16]
    db14:	68fb      	ldr	r3, [r7, #12]
    db16:	4313      	orrs	r3, r2
    db18:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    db1a:	4ba0      	ldr	r3, [pc, #640]	; (dd9c <usart_read_callback+0x72c>)
    db1c:	7d1b      	ldrb	r3, [r3, #20]
    db1e:	021b      	lsls	r3, r3, #8
    db20:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    db22:	693a      	ldr	r2, [r7, #16]
    db24:	68fb      	ldr	r3, [r7, #12]
    db26:	4313      	orrs	r3, r2
    db28:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    db2a:	4b9c      	ldr	r3, [pc, #624]	; (dd9c <usart_read_callback+0x72c>)
    db2c:	7d5b      	ldrb	r3, [r3, #21]
    db2e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    db30:	693a      	ldr	r2, [r7, #16]
    db32:	68fb      	ldr	r3, [r7, #12]
    db34:	4313      	orrs	r3, r2
    db36:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;		
    db38:	4b9a      	ldr	r3, [pc, #616]	; (dda4 <usart_read_callback+0x734>)
    db3a:	693a      	ldr	r2, [r7, #16]
    db3c:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    db3e:	4b97      	ldr	r3, [pc, #604]	; (dd9c <usart_read_callback+0x72c>)
    db40:	7d9a      	ldrb	r2, [r3, #22]
    db42:	4b99      	ldr	r3, [pc, #612]	; (dda8 <usart_read_callback+0x738>)
    db44:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    db46:	4b99      	ldr	r3, [pc, #612]	; (ddac <usart_read_callback+0x73c>)
    db48:	2200      	movs	r2, #0
    db4a:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    db4c:	4b98      	ldr	r3, [pc, #608]	; (ddb0 <usart_read_callback+0x740>)
    db4e:	2201      	movs	r2, #1
    db50:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    db52:	4b98      	ldr	r3, [pc, #608]	; (ddb4 <usart_read_callback+0x744>)
    db54:	2200      	movs	r2, #0
    db56:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    db58:	4b97      	ldr	r3, [pc, #604]	; (ddb8 <usart_read_callback+0x748>)
    db5a:	2200      	movs	r2, #0
    db5c:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    db5e:	4b96      	ldr	r3, [pc, #600]	; (ddb8 <usart_read_callback+0x748>)
    db60:	2200      	movs	r2, #0
    db62:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0; 					
    db64:	4b94      	ldr	r3, [pc, #592]	; (ddb8 <usart_read_callback+0x748>)
    db66:	2200      	movs	r2, #0
    db68:	609a      	str	r2, [r3, #8]
    db6a:	e058      	b.n	dc1e <usart_read_callback+0x5ae>
				}
				else
				{
					itemp = general_buffer[1];
    db6c:	4b8b      	ldr	r3, [pc, #556]	; (dd9c <usart_read_callback+0x72c>)
    db6e:	785a      	ldrb	r2, [r3, #1]
    db70:	1c3b      	adds	r3, r7, #0
    db72:	3316      	adds	r3, #22
    db74:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    db76:	1c3b      	adds	r3, r7, #0
    db78:	3316      	adds	r3, #22
    db7a:	1c3a      	adds	r2, r7, #0
    db7c:	3216      	adds	r2, #22
    db7e:	8812      	ldrh	r2, [r2, #0]
    db80:	0212      	lsls	r2, r2, #8
    db82:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    db84:	4b85      	ldr	r3, [pc, #532]	; (dd9c <usart_read_callback+0x72c>)
    db86:	789a      	ldrb	r2, [r3, #2]
    db88:	1c3b      	adds	r3, r7, #0
    db8a:	3314      	adds	r3, #20
    db8c:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    db8e:	1c3b      	adds	r3, r7, #0
    db90:	3316      	adds	r3, #22
    db92:	1c39      	adds	r1, r7, #0
    db94:	3116      	adds	r1, #22
    db96:	1c3a      	adds	r2, r7, #0
    db98:	3214      	adds	r2, #20
    db9a:	8809      	ldrh	r1, [r1, #0]
    db9c:	8812      	ldrh	r2, [r2, #0]
    db9e:	430a      	orrs	r2, r1
    dba0:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    dba2:	1c3b      	adds	r3, r7, #0
    dba4:	3316      	adds	r3, #22
    dba6:	1c3a      	adds	r2, r7, #0
    dba8:	3216      	adds	r2, #22
    dbaa:	8812      	ldrh	r2, [r2, #0]
    dbac:	3a07      	subs	r2, #7
    dbae:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    dbb0:	4b7b      	ldr	r3, [pc, #492]	; (dda0 <usart_read_callback+0x730>)
    dbb2:	781a      	ldrb	r2, [r3, #0]
    dbb4:	4b7e      	ldr	r3, [pc, #504]	; (ddb0 <usart_read_callback+0x740>)
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	429a      	cmp	r2, r3
    dbba:	d130      	bne.n	dc1e <usart_read_callback+0x5ae>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    dbbc:	4b78      	ldr	r3, [pc, #480]	; (dda0 <usart_read_callback+0x730>)
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	1c1a      	adds	r2, r3, #0
    dbc2:	4b79      	ldr	r3, [pc, #484]	; (dda8 <usart_read_callback+0x738>)
    dbc4:	781b      	ldrb	r3, [r3, #0]
    dbc6:	3301      	adds	r3, #1
    dbc8:	429a      	cmp	r2, r3
    dbca:	da0d      	bge.n	dbe8 <usart_read_callback+0x578>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    dbcc:	4b79      	ldr	r3, [pc, #484]	; (ddb4 <usart_read_callback+0x744>)
    dbce:	681b      	ldr	r3, [r3, #0]
    dbd0:	2284      	movs	r2, #132	; 0x84
    dbd2:	0292      	lsls	r2, r2, #10
    dbd4:	1899      	adds	r1, r3, r2
    dbd6:	4a79      	ldr	r2, [pc, #484]	; (ddbc <usart_read_callback+0x74c>)
    dbd8:	1c3b      	adds	r3, r7, #0
    dbda:	3316      	adds	r3, #22
    dbdc:	881b      	ldrh	r3, [r3, #0]
    dbde:	1c08      	adds	r0, r1, #0
    dbe0:	1c11      	adds	r1, r2, #0
    dbe2:	1c1a      	adds	r2, r3, #0
    dbe4:	4b76      	ldr	r3, [pc, #472]	; (ddc0 <usart_read_callback+0x750>)
    dbe6:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    dbe8:	4b6d      	ldr	r3, [pc, #436]	; (dda0 <usart_read_callback+0x730>)
    dbea:	781a      	ldrb	r2, [r3, #0]
    dbec:	4b6e      	ldr	r3, [pc, #440]	; (dda8 <usart_read_callback+0x738>)
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	429a      	cmp	r2, r3
    dbf2:	d106      	bne.n	dc02 <usart_read_callback+0x592>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    dbf4:	4b73      	ldr	r3, [pc, #460]	; (ddc4 <usart_read_callback+0x754>)
    dbf6:	681b      	ldr	r3, [r3, #0]
    dbf8:	2280      	movs	r2, #128	; 0x80
    dbfa:	01d2      	lsls	r2, r2, #7
    dbfc:	431a      	orrs	r2, r3
    dbfe:	4b71      	ldr	r3, [pc, #452]	; (ddc4 <usart_read_callback+0x754>)
    dc00:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    dc02:	1c3b      	adds	r3, r7, #0
    dc04:	3316      	adds	r3, #22
    dc06:	881a      	ldrh	r2, [r3, #0]
    dc08:	4b6a      	ldr	r3, [pc, #424]	; (ddb4 <usart_read_callback+0x744>)
    dc0a:	681b      	ldr	r3, [r3, #0]
    dc0c:	18d2      	adds	r2, r2, r3
    dc0e:	4b69      	ldr	r3, [pc, #420]	; (ddb4 <usart_read_callback+0x744>)
    dc10:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    dc12:	4b67      	ldr	r3, [pc, #412]	; (ddb0 <usart_read_callback+0x740>)
    dc14:	781b      	ldrb	r3, [r3, #0]
    dc16:	3301      	adds	r3, #1
    dc18:	b2da      	uxtb	r2, r3
    dc1a:	4b65      	ldr	r3, [pc, #404]	; (ddb0 <usart_read_callback+0x740>)
    dc1c:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    dc1e:	4b6a      	ldr	r3, [pc, #424]	; (ddc8 <usart_read_callback+0x758>)
    dc20:	2200      	movs	r2, #0
    dc22:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    dc24:	4b68      	ldr	r3, [pc, #416]	; (ddc8 <usart_read_callback+0x758>)
    dc26:	2209      	movs	r2, #9
    dc28:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    dc2a:	4b67      	ldr	r3, [pc, #412]	; (ddc8 <usart_read_callback+0x758>)
    dc2c:	2264      	movs	r2, #100	; 0x64
    dc2e:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'r';
    dc30:	4b65      	ldr	r3, [pc, #404]	; (ddc8 <usart_read_callback+0x758>)
    dc32:	2272      	movs	r2, #114	; 0x72
    dc34:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    dc36:	4b64      	ldr	r3, [pc, #400]	; (ddc8 <usart_read_callback+0x758>)
    dc38:	2230      	movs	r2, #48	; 0x30
    dc3a:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    dc3c:	4b62      	ldr	r3, [pc, #392]	; (ddc8 <usart_read_callback+0x758>)
    dc3e:	2231      	movs	r2, #49	; 0x31
    dc40:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    dc42:	4b57      	ldr	r3, [pc, #348]	; (dda0 <usart_read_callback+0x730>)
    dc44:	781a      	ldrb	r2, [r3, #0]
    dc46:	4b60      	ldr	r3, [pc, #384]	; (ddc8 <usart_read_callback+0x758>)
    dc48:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    dc4a:	4b57      	ldr	r3, [pc, #348]	; (dda8 <usart_read_callback+0x738>)
    dc4c:	781a      	ldrb	r2, [r3, #0]
    dc4e:	4b5e      	ldr	r3, [pc, #376]	; (ddc8 <usart_read_callback+0x758>)
    dc50:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    dc52:	4b5d      	ldr	r3, [pc, #372]	; (ddc8 <usart_read_callback+0x758>)
    dc54:	2200      	movs	r2, #0
    dc56:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    dc58:	4b5b      	ldr	r3, [pc, #364]	; (ddc8 <usart_read_callback+0x758>)
    dc5a:	220d      	movs	r2, #13
    dc5c:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    dc5e:	4b5a      	ldr	r3, [pc, #360]	; (ddc8 <usart_read_callback+0x758>)
    dc60:	1c18      	adds	r0, r3, #0
    dc62:	210b      	movs	r1, #11
    dc64:	2201      	movs	r2, #1
    dc66:	4b59      	ldr	r3, [pc, #356]	; (ddcc <usart_read_callback+0x75c>)
    dc68:	4798      	blx	r3
				break;
    dc6a:	e249      	b.n	e100 <usart_read_callback+0xa90>
			}		
//----------------------- second generation 
			case COMMAND_DC:
			{
				downloadPacketNumber = general_buffer[5];
    dc6c:	4b4b      	ldr	r3, [pc, #300]	; (dd9c <usart_read_callback+0x72c>)
    dc6e:	795a      	ldrb	r2, [r3, #5]
    dc70:	4b4b      	ldr	r3, [pc, #300]	; (dda0 <usart_read_callback+0x730>)
    dc72:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    dc74:	4b4a      	ldr	r3, [pc, #296]	; (dda0 <usart_read_callback+0x730>)
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d000      	beq.n	dc7e <usart_read_callback+0x60e>
    dc7c:	e0a8      	b.n	ddd0 <usart_read_callback+0x760>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    dc7e:	4b47      	ldr	r3, [pc, #284]	; (dd9c <usart_read_callback+0x72c>)
    dc80:	799b      	ldrb	r3, [r3, #6]
    dc82:	061b      	lsls	r3, r3, #24
    dc84:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    dc86:	4b45      	ldr	r3, [pc, #276]	; (dd9c <usart_read_callback+0x72c>)
    dc88:	79db      	ldrb	r3, [r3, #7]
    dc8a:	041b      	lsls	r3, r3, #16
    dc8c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc8e:	693a      	ldr	r2, [r7, #16]
    dc90:	68fb      	ldr	r3, [r7, #12]
    dc92:	4313      	orrs	r3, r2
    dc94:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    dc96:	4b41      	ldr	r3, [pc, #260]	; (dd9c <usart_read_callback+0x72c>)
    dc98:	7a1b      	ldrb	r3, [r3, #8]
    dc9a:	021b      	lsls	r3, r3, #8
    dc9c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc9e:	693a      	ldr	r2, [r7, #16]
    dca0:	68fb      	ldr	r3, [r7, #12]
    dca2:	4313      	orrs	r3, r2
    dca4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    dca6:	4b3d      	ldr	r3, [pc, #244]	; (dd9c <usart_read_callback+0x72c>)
    dca8:	7a5b      	ldrb	r3, [r3, #9]
    dcaa:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dcac:	693a      	ldr	r2, [r7, #16]
    dcae:	68fb      	ldr	r3, [r7, #12]
    dcb0:	4313      	orrs	r3, r2
    dcb2:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp;
    dcb4:	4b40      	ldr	r3, [pc, #256]	; (ddb8 <usart_read_callback+0x748>)
    dcb6:	693a      	ldr	r2, [r7, #16]
    dcb8:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    dcba:	4b38      	ldr	r3, [pc, #224]	; (dd9c <usart_read_callback+0x72c>)
    dcbc:	7a9b      	ldrb	r3, [r3, #10]
    dcbe:	061b      	lsls	r3, r3, #24
    dcc0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    dcc2:	4b36      	ldr	r3, [pc, #216]	; (dd9c <usart_read_callback+0x72c>)
    dcc4:	7adb      	ldrb	r3, [r3, #11]
    dcc6:	041b      	lsls	r3, r3, #16
    dcc8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dcca:	693a      	ldr	r2, [r7, #16]
    dccc:	68fb      	ldr	r3, [r7, #12]
    dcce:	4313      	orrs	r3, r2
    dcd0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    dcd2:	4b32      	ldr	r3, [pc, #200]	; (dd9c <usart_read_callback+0x72c>)
    dcd4:	7b1b      	ldrb	r3, [r3, #12]
    dcd6:	021b      	lsls	r3, r3, #8
    dcd8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dcda:	693a      	ldr	r2, [r7, #16]
    dcdc:	68fb      	ldr	r3, [r7, #12]
    dcde:	4313      	orrs	r3, r2
    dce0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    dce2:	4b2e      	ldr	r3, [pc, #184]	; (dd9c <usart_read_callback+0x72c>)
    dce4:	7b5b      	ldrb	r3, [r3, #13]
    dce6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dce8:	693a      	ldr	r2, [r7, #16]
    dcea:	68fb      	ldr	r3, [r7, #12]
    dcec:	4313      	orrs	r3, r2
    dcee:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;
    dcf0:	4b31      	ldr	r3, [pc, #196]	; (ddb8 <usart_read_callback+0x748>)
    dcf2:	693a      	ldr	r2, [r7, #16]
    dcf4:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    dcf6:	4b29      	ldr	r3, [pc, #164]	; (dd9c <usart_read_callback+0x72c>)
    dcf8:	7b9b      	ldrb	r3, [r3, #14]
    dcfa:	061b      	lsls	r3, r3, #24
    dcfc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    dcfe:	4b27      	ldr	r3, [pc, #156]	; (dd9c <usart_read_callback+0x72c>)
    dd00:	7bdb      	ldrb	r3, [r3, #15]
    dd02:	041b      	lsls	r3, r3, #16
    dd04:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd06:	693a      	ldr	r2, [r7, #16]
    dd08:	68fb      	ldr	r3, [r7, #12]
    dd0a:	4313      	orrs	r3, r2
    dd0c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    dd0e:	4b23      	ldr	r3, [pc, #140]	; (dd9c <usart_read_callback+0x72c>)
    dd10:	7c1b      	ldrb	r3, [r3, #16]
    dd12:	021b      	lsls	r3, r3, #8
    dd14:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd16:	693a      	ldr	r2, [r7, #16]
    dd18:	68fb      	ldr	r3, [r7, #12]
    dd1a:	4313      	orrs	r3, r2
    dd1c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    dd1e:	4b1f      	ldr	r3, [pc, #124]	; (dd9c <usart_read_callback+0x72c>)
    dd20:	7c5b      	ldrb	r3, [r3, #17]
    dd22:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd24:	693a      	ldr	r2, [r7, #16]
    dd26:	68fb      	ldr	r3, [r7, #12]
    dd28:	4313      	orrs	r3, r2
    dd2a:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;
    dd2c:	4b22      	ldr	r3, [pc, #136]	; (ddb8 <usart_read_callback+0x748>)
    dd2e:	693a      	ldr	r2, [r7, #16]
    dd30:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    dd32:	4b1a      	ldr	r3, [pc, #104]	; (dd9c <usart_read_callback+0x72c>)
    dd34:	7c9b      	ldrb	r3, [r3, #18]
    dd36:	061b      	lsls	r3, r3, #24
    dd38:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    dd3a:	4b18      	ldr	r3, [pc, #96]	; (dd9c <usart_read_callback+0x72c>)
    dd3c:	7cdb      	ldrb	r3, [r3, #19]
    dd3e:	041b      	lsls	r3, r3, #16
    dd40:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd42:	693a      	ldr	r2, [r7, #16]
    dd44:	68fb      	ldr	r3, [r7, #12]
    dd46:	4313      	orrs	r3, r2
    dd48:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    dd4a:	4b14      	ldr	r3, [pc, #80]	; (dd9c <usart_read_callback+0x72c>)
    dd4c:	7d1b      	ldrb	r3, [r3, #20]
    dd4e:	021b      	lsls	r3, r3, #8
    dd50:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd52:	693a      	ldr	r2, [r7, #16]
    dd54:	68fb      	ldr	r3, [r7, #12]
    dd56:	4313      	orrs	r3, r2
    dd58:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    dd5a:	4b10      	ldr	r3, [pc, #64]	; (dd9c <usart_read_callback+0x72c>)
    dd5c:	7d5b      	ldrb	r3, [r3, #21]
    dd5e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dd60:	693a      	ldr	r2, [r7, #16]
    dd62:	68fb      	ldr	r3, [r7, #12]
    dd64:	4313      	orrs	r3, r2
    dd66:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;
    dd68:	4b13      	ldr	r3, [pc, #76]	; (ddb8 <usart_read_callback+0x748>)
    dd6a:	693a      	ldr	r2, [r7, #16]
    dd6c:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    dd6e:	4b0b      	ldr	r3, [pc, #44]	; (dd9c <usart_read_callback+0x72c>)
    dd70:	7d9a      	ldrb	r2, [r3, #22]
    dd72:	4b0d      	ldr	r3, [pc, #52]	; (dda8 <usart_read_callback+0x738>)
    dd74:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    dd76:	4b0d      	ldr	r3, [pc, #52]	; (ddac <usart_read_callback+0x73c>)
    dd78:	2200      	movs	r2, #0
    dd7a:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    dd7c:	4b0c      	ldr	r3, [pc, #48]	; (ddb0 <usart_read_callback+0x740>)
    dd7e:	2201      	movs	r2, #1
    dd80:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    dd82:	4b0c      	ldr	r3, [pc, #48]	; (ddb4 <usart_read_callback+0x744>)
    dd84:	2200      	movs	r2, #0
    dd86:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    dd88:	4b06      	ldr	r3, [pc, #24]	; (dda4 <usart_read_callback+0x734>)
    dd8a:	2200      	movs	r2, #0
    dd8c:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    dd8e:	4b05      	ldr	r3, [pc, #20]	; (dda4 <usart_read_callback+0x734>)
    dd90:	2200      	movs	r2, #0
    dd92:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0;
    dd94:	4b03      	ldr	r3, [pc, #12]	; (dda4 <usart_read_callback+0x734>)
    dd96:	2200      	movs	r2, #0
    dd98:	609a      	str	r2, [r3, #8]
    dd9a:	e072      	b.n	de82 <usart_read_callback+0x812>
    dd9c:	20000a8c 	.word	0x20000a8c
    dda0:	20003539 	.word	0x20003539
    dda4:	200034ec 	.word	0x200034ec
    dda8:	20003509 	.word	0x20003509
    ddac:	2000350a 	.word	0x2000350a
    ddb0:	20003538 	.word	0x20003538
    ddb4:	20003534 	.word	0x20003534
    ddb8:	2000353c 	.word	0x2000353c
    ddbc:	20000a92 	.word	0x20000a92
    ddc0:	0000caf9 	.word	0x0000caf9
    ddc4:	2000369c 	.word	0x2000369c
    ddc8:	2000350c 	.word	0x2000350c
    ddcc:	0000e2c5 	.word	0x0000e2c5
				}
				else
				{
					itemp = general_buffer[1];
    ddd0:	4bce      	ldr	r3, [pc, #824]	; (e10c <usart_read_callback+0xa9c>)
    ddd2:	785a      	ldrb	r2, [r3, #1]
    ddd4:	1c3b      	adds	r3, r7, #0
    ddd6:	3316      	adds	r3, #22
    ddd8:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    ddda:	1c3b      	adds	r3, r7, #0
    dddc:	3316      	adds	r3, #22
    ddde:	1c3a      	adds	r2, r7, #0
    dde0:	3216      	adds	r2, #22
    dde2:	8812      	ldrh	r2, [r2, #0]
    dde4:	0212      	lsls	r2, r2, #8
    dde6:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    dde8:	4bc8      	ldr	r3, [pc, #800]	; (e10c <usart_read_callback+0xa9c>)
    ddea:	789a      	ldrb	r2, [r3, #2]
    ddec:	1c3b      	adds	r3, r7, #0
    ddee:	3314      	adds	r3, #20
    ddf0:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    ddf2:	1c3b      	adds	r3, r7, #0
    ddf4:	3316      	adds	r3, #22
    ddf6:	1c39      	adds	r1, r7, #0
    ddf8:	3116      	adds	r1, #22
    ddfa:	1c3a      	adds	r2, r7, #0
    ddfc:	3214      	adds	r2, #20
    ddfe:	8809      	ldrh	r1, [r1, #0]
    de00:	8812      	ldrh	r2, [r2, #0]
    de02:	430a      	orrs	r2, r1
    de04:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    de06:	1c3b      	adds	r3, r7, #0
    de08:	3316      	adds	r3, #22
    de0a:	1c3a      	adds	r2, r7, #0
    de0c:	3216      	adds	r2, #22
    de0e:	8812      	ldrh	r2, [r2, #0]
    de10:	3a07      	subs	r2, #7
    de12:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    de14:	4bbe      	ldr	r3, [pc, #760]	; (e110 <usart_read_callback+0xaa0>)
    de16:	781a      	ldrb	r2, [r3, #0]
    de18:	4bbe      	ldr	r3, [pc, #760]	; (e114 <usart_read_callback+0xaa4>)
    de1a:	781b      	ldrb	r3, [r3, #0]
    de1c:	429a      	cmp	r2, r3
    de1e:	d130      	bne.n	de82 <usart_read_callback+0x812>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    de20:	4bbb      	ldr	r3, [pc, #748]	; (e110 <usart_read_callback+0xaa0>)
    de22:	781b      	ldrb	r3, [r3, #0]
    de24:	1c1a      	adds	r2, r3, #0
    de26:	4bbc      	ldr	r3, [pc, #752]	; (e118 <usart_read_callback+0xaa8>)
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	3301      	adds	r3, #1
    de2c:	429a      	cmp	r2, r3
    de2e:	da0d      	bge.n	de4c <usart_read_callback+0x7dc>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    de30:	4bba      	ldr	r3, [pc, #744]	; (e11c <usart_read_callback+0xaac>)
    de32:	681b      	ldr	r3, [r3, #0]
    de34:	2284      	movs	r2, #132	; 0x84
    de36:	0292      	lsls	r2, r2, #10
    de38:	1899      	adds	r1, r3, r2
    de3a:	4ab9      	ldr	r2, [pc, #740]	; (e120 <usart_read_callback+0xab0>)
    de3c:	1c3b      	adds	r3, r7, #0
    de3e:	3316      	adds	r3, #22
    de40:	881b      	ldrh	r3, [r3, #0]
    de42:	1c08      	adds	r0, r1, #0
    de44:	1c11      	adds	r1, r2, #0
    de46:	1c1a      	adds	r2, r3, #0
    de48:	4bb6      	ldr	r3, [pc, #728]	; (e124 <usart_read_callback+0xab4>)
    de4a:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    de4c:	4bb0      	ldr	r3, [pc, #704]	; (e110 <usart_read_callback+0xaa0>)
    de4e:	781a      	ldrb	r2, [r3, #0]
    de50:	4bb1      	ldr	r3, [pc, #708]	; (e118 <usart_read_callback+0xaa8>)
    de52:	781b      	ldrb	r3, [r3, #0]
    de54:	429a      	cmp	r2, r3
    de56:	d106      	bne.n	de66 <usart_read_callback+0x7f6>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    de58:	4bb3      	ldr	r3, [pc, #716]	; (e128 <usart_read_callback+0xab8>)
    de5a:	681b      	ldr	r3, [r3, #0]
    de5c:	2280      	movs	r2, #128	; 0x80
    de5e:	01d2      	lsls	r2, r2, #7
    de60:	431a      	orrs	r2, r3
    de62:	4bb1      	ldr	r3, [pc, #708]	; (e128 <usart_read_callback+0xab8>)
    de64:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    de66:	1c3b      	adds	r3, r7, #0
    de68:	3316      	adds	r3, #22
    de6a:	881a      	ldrh	r2, [r3, #0]
    de6c:	4bab      	ldr	r3, [pc, #684]	; (e11c <usart_read_callback+0xaac>)
    de6e:	681b      	ldr	r3, [r3, #0]
    de70:	18d2      	adds	r2, r2, r3
    de72:	4baa      	ldr	r3, [pc, #680]	; (e11c <usart_read_callback+0xaac>)
    de74:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    de76:	4ba7      	ldr	r3, [pc, #668]	; (e114 <usart_read_callback+0xaa4>)
    de78:	781b      	ldrb	r3, [r3, #0]
    de7a:	3301      	adds	r3, #1
    de7c:	b2da      	uxtb	r2, r3
    de7e:	4ba5      	ldr	r3, [pc, #660]	; (e114 <usart_read_callback+0xaa4>)
    de80:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    de82:	4baa      	ldr	r3, [pc, #680]	; (e12c <usart_read_callback+0xabc>)
    de84:	2200      	movs	r2, #0
    de86:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    de88:	4ba8      	ldr	r3, [pc, #672]	; (e12c <usart_read_callback+0xabc>)
    de8a:	2209      	movs	r2, #9
    de8c:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    de8e:	4ba7      	ldr	r3, [pc, #668]	; (e12c <usart_read_callback+0xabc>)
    de90:	2264      	movs	r2, #100	; 0x64
    de92:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'c';
    de94:	4ba5      	ldr	r3, [pc, #660]	; (e12c <usart_read_callback+0xabc>)
    de96:	2263      	movs	r2, #99	; 0x63
    de98:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    de9a:	4ba4      	ldr	r3, [pc, #656]	; (e12c <usart_read_callback+0xabc>)
    de9c:	2230      	movs	r2, #48	; 0x30
    de9e:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    dea0:	4ba2      	ldr	r3, [pc, #648]	; (e12c <usart_read_callback+0xabc>)
    dea2:	2231      	movs	r2, #49	; 0x31
    dea4:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    dea6:	4b9a      	ldr	r3, [pc, #616]	; (e110 <usart_read_callback+0xaa0>)
    dea8:	781a      	ldrb	r2, [r3, #0]
    deaa:	4ba0      	ldr	r3, [pc, #640]	; (e12c <usart_read_callback+0xabc>)
    deac:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    deae:	4b9a      	ldr	r3, [pc, #616]	; (e118 <usart_read_callback+0xaa8>)
    deb0:	781a      	ldrb	r2, [r3, #0]
    deb2:	4b9e      	ldr	r3, [pc, #632]	; (e12c <usart_read_callback+0xabc>)
    deb4:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    deb6:	4b9d      	ldr	r3, [pc, #628]	; (e12c <usart_read_callback+0xabc>)
    deb8:	2200      	movs	r2, #0
    deba:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    debc:	4b9b      	ldr	r3, [pc, #620]	; (e12c <usart_read_callback+0xabc>)
    debe:	220d      	movs	r2, #13
    dec0:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    dec2:	4b9a      	ldr	r3, [pc, #616]	; (e12c <usart_read_callback+0xabc>)
    dec4:	1c18      	adds	r0, r3, #0
    dec6:	210b      	movs	r1, #11
    dec8:	2201      	movs	r2, #1
    deca:	4b99      	ldr	r3, [pc, #612]	; (e130 <usart_read_callback+0xac0>)
    decc:	4798      	blx	r3
				break;
    dece:	e117      	b.n	e100 <usart_read_callback+0xa90>
			}
			case COMMAND_DS:
			{
				downloadPacketNumber = general_buffer[5];
    ded0:	4b8e      	ldr	r3, [pc, #568]	; (e10c <usart_read_callback+0xa9c>)
    ded2:	795a      	ldrb	r2, [r3, #5]
    ded4:	4b8e      	ldr	r3, [pc, #568]	; (e110 <usart_read_callback+0xaa0>)
    ded6:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    ded8:	4b8d      	ldr	r3, [pc, #564]	; (e110 <usart_read_callback+0xaa0>)
    deda:	781b      	ldrb	r3, [r3, #0]
    dedc:	2b00      	cmp	r3, #0
    dede:	d000      	beq.n	dee2 <usart_read_callback+0x872>
    dee0:	e08e      	b.n	e000 <usart_read_callback+0x990>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    dee2:	4b8a      	ldr	r3, [pc, #552]	; (e10c <usart_read_callback+0xa9c>)
    dee4:	799b      	ldrb	r3, [r3, #6]
    dee6:	061b      	lsls	r3, r3, #24
    dee8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    deea:	4b88      	ldr	r3, [pc, #544]	; (e10c <usart_read_callback+0xa9c>)
    deec:	79db      	ldrb	r3, [r3, #7]
    deee:	041b      	lsls	r3, r3, #16
    def0:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    def2:	693a      	ldr	r2, [r7, #16]
    def4:	68fb      	ldr	r3, [r7, #12]
    def6:	4313      	orrs	r3, r2
    def8:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    defa:	4b84      	ldr	r3, [pc, #528]	; (e10c <usart_read_callback+0xa9c>)
    defc:	7a1b      	ldrb	r3, [r3, #8]
    defe:	021b      	lsls	r3, r3, #8
    df00:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df02:	693a      	ldr	r2, [r7, #16]
    df04:	68fb      	ldr	r3, [r7, #12]
    df06:	4313      	orrs	r3, r2
    df08:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    df0a:	4b80      	ldr	r3, [pc, #512]	; (e10c <usart_read_callback+0xa9c>)
    df0c:	7a5b      	ldrb	r3, [r3, #9]
    df0e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df10:	693a      	ldr	r2, [r7, #16]
    df12:	68fb      	ldr	r3, [r7, #12]
    df14:	4313      	orrs	r3, r2
    df16:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp;
    df18:	4b86      	ldr	r3, [pc, #536]	; (e134 <usart_read_callback+0xac4>)
    df1a:	693a      	ldr	r2, [r7, #16]
    df1c:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    df1e:	4b7b      	ldr	r3, [pc, #492]	; (e10c <usart_read_callback+0xa9c>)
    df20:	7a9b      	ldrb	r3, [r3, #10]
    df22:	061b      	lsls	r3, r3, #24
    df24:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    df26:	4b79      	ldr	r3, [pc, #484]	; (e10c <usart_read_callback+0xa9c>)
    df28:	7adb      	ldrb	r3, [r3, #11]
    df2a:	041b      	lsls	r3, r3, #16
    df2c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df2e:	693a      	ldr	r2, [r7, #16]
    df30:	68fb      	ldr	r3, [r7, #12]
    df32:	4313      	orrs	r3, r2
    df34:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    df36:	4b75      	ldr	r3, [pc, #468]	; (e10c <usart_read_callback+0xa9c>)
    df38:	7b1b      	ldrb	r3, [r3, #12]
    df3a:	021b      	lsls	r3, r3, #8
    df3c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df3e:	693a      	ldr	r2, [r7, #16]
    df40:	68fb      	ldr	r3, [r7, #12]
    df42:	4313      	orrs	r3, r2
    df44:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    df46:	4b71      	ldr	r3, [pc, #452]	; (e10c <usart_read_callback+0xa9c>)
    df48:	7b5b      	ldrb	r3, [r3, #13]
    df4a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df4c:	693a      	ldr	r2, [r7, #16]
    df4e:	68fb      	ldr	r3, [r7, #12]
    df50:	4313      	orrs	r3, r2
    df52:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;
    df54:	4b77      	ldr	r3, [pc, #476]	; (e134 <usart_read_callback+0xac4>)
    df56:	693a      	ldr	r2, [r7, #16]
    df58:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    df5a:	4b6c      	ldr	r3, [pc, #432]	; (e10c <usart_read_callback+0xa9c>)
    df5c:	7b9b      	ldrb	r3, [r3, #14]
    df5e:	061b      	lsls	r3, r3, #24
    df60:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    df62:	4b6a      	ldr	r3, [pc, #424]	; (e10c <usart_read_callback+0xa9c>)
    df64:	7bdb      	ldrb	r3, [r3, #15]
    df66:	041b      	lsls	r3, r3, #16
    df68:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df6a:	693a      	ldr	r2, [r7, #16]
    df6c:	68fb      	ldr	r3, [r7, #12]
    df6e:	4313      	orrs	r3, r2
    df70:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    df72:	4b66      	ldr	r3, [pc, #408]	; (e10c <usart_read_callback+0xa9c>)
    df74:	7c1b      	ldrb	r3, [r3, #16]
    df76:	021b      	lsls	r3, r3, #8
    df78:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df7a:	693a      	ldr	r2, [r7, #16]
    df7c:	68fb      	ldr	r3, [r7, #12]
    df7e:	4313      	orrs	r3, r2
    df80:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    df82:	4b62      	ldr	r3, [pc, #392]	; (e10c <usart_read_callback+0xa9c>)
    df84:	7c5b      	ldrb	r3, [r3, #17]
    df86:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df88:	693a      	ldr	r2, [r7, #16]
    df8a:	68fb      	ldr	r3, [r7, #12]
    df8c:	4313      	orrs	r3, r2
    df8e:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;
    df90:	4b68      	ldr	r3, [pc, #416]	; (e134 <usart_read_callback+0xac4>)
    df92:	693a      	ldr	r2, [r7, #16]
    df94:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    df96:	4b5d      	ldr	r3, [pc, #372]	; (e10c <usart_read_callback+0xa9c>)
    df98:	7c9b      	ldrb	r3, [r3, #18]
    df9a:	061b      	lsls	r3, r3, #24
    df9c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    df9e:	4b5b      	ldr	r3, [pc, #364]	; (e10c <usart_read_callback+0xa9c>)
    dfa0:	7cdb      	ldrb	r3, [r3, #19]
    dfa2:	041b      	lsls	r3, r3, #16
    dfa4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dfa6:	693a      	ldr	r2, [r7, #16]
    dfa8:	68fb      	ldr	r3, [r7, #12]
    dfaa:	4313      	orrs	r3, r2
    dfac:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    dfae:	4b57      	ldr	r3, [pc, #348]	; (e10c <usart_read_callback+0xa9c>)
    dfb0:	7d1b      	ldrb	r3, [r3, #20]
    dfb2:	021b      	lsls	r3, r3, #8
    dfb4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dfb6:	693a      	ldr	r2, [r7, #16]
    dfb8:	68fb      	ldr	r3, [r7, #12]
    dfba:	4313      	orrs	r3, r2
    dfbc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    dfbe:	4b53      	ldr	r3, [pc, #332]	; (e10c <usart_read_callback+0xa9c>)
    dfc0:	7d5b      	ldrb	r3, [r3, #21]
    dfc2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dfc4:	693a      	ldr	r2, [r7, #16]
    dfc6:	68fb      	ldr	r3, [r7, #12]
    dfc8:	4313      	orrs	r3, r2
    dfca:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;
    dfcc:	4b59      	ldr	r3, [pc, #356]	; (e134 <usart_read_callback+0xac4>)
    dfce:	693a      	ldr	r2, [r7, #16]
    dfd0:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    dfd2:	4b4e      	ldr	r3, [pc, #312]	; (e10c <usart_read_callback+0xa9c>)
    dfd4:	7d9a      	ldrb	r2, [r3, #22]
    dfd6:	4b50      	ldr	r3, [pc, #320]	; (e118 <usart_read_callback+0xaa8>)
    dfd8:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    dfda:	4b57      	ldr	r3, [pc, #348]	; (e138 <usart_read_callback+0xac8>)
    dfdc:	2200      	movs	r2, #0
    dfde:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    dfe0:	4b4c      	ldr	r3, [pc, #304]	; (e114 <usart_read_callback+0xaa4>)
    dfe2:	2201      	movs	r2, #1
    dfe4:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    dfe6:	4b4d      	ldr	r3, [pc, #308]	; (e11c <usart_read_callback+0xaac>)
    dfe8:	2200      	movs	r2, #0
    dfea:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    dfec:	4b53      	ldr	r3, [pc, #332]	; (e13c <usart_read_callback+0xacc>)
    dfee:	2200      	movs	r2, #0
    dff0:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    dff2:	4b52      	ldr	r3, [pc, #328]	; (e13c <usart_read_callback+0xacc>)
    dff4:	2200      	movs	r2, #0
    dff6:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0;
    dff8:	4b50      	ldr	r3, [pc, #320]	; (e13c <usart_read_callback+0xacc>)
    dffa:	2200      	movs	r2, #0
    dffc:	609a      	str	r2, [r3, #8]
    dffe:	e058      	b.n	e0b2 <usart_read_callback+0xa42>
				}
				else
				{
					itemp = general_buffer[1];
    e000:	4b42      	ldr	r3, [pc, #264]	; (e10c <usart_read_callback+0xa9c>)
    e002:	785a      	ldrb	r2, [r3, #1]
    e004:	1c3b      	adds	r3, r7, #0
    e006:	3316      	adds	r3, #22
    e008:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    e00a:	1c3b      	adds	r3, r7, #0
    e00c:	3316      	adds	r3, #22
    e00e:	1c3a      	adds	r2, r7, #0
    e010:	3216      	adds	r2, #22
    e012:	8812      	ldrh	r2, [r2, #0]
    e014:	0212      	lsls	r2, r2, #8
    e016:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    e018:	4b3c      	ldr	r3, [pc, #240]	; (e10c <usart_read_callback+0xa9c>)
    e01a:	789a      	ldrb	r2, [r3, #2]
    e01c:	1c3b      	adds	r3, r7, #0
    e01e:	3314      	adds	r3, #20
    e020:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    e022:	1c3b      	adds	r3, r7, #0
    e024:	3316      	adds	r3, #22
    e026:	1c39      	adds	r1, r7, #0
    e028:	3116      	adds	r1, #22
    e02a:	1c3a      	adds	r2, r7, #0
    e02c:	3214      	adds	r2, #20
    e02e:	8809      	ldrh	r1, [r1, #0]
    e030:	8812      	ldrh	r2, [r2, #0]
    e032:	430a      	orrs	r2, r1
    e034:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    e036:	1c3b      	adds	r3, r7, #0
    e038:	3316      	adds	r3, #22
    e03a:	1c3a      	adds	r2, r7, #0
    e03c:	3216      	adds	r2, #22
    e03e:	8812      	ldrh	r2, [r2, #0]
    e040:	3a07      	subs	r2, #7
    e042:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    e044:	4b32      	ldr	r3, [pc, #200]	; (e110 <usart_read_callback+0xaa0>)
    e046:	781a      	ldrb	r2, [r3, #0]
    e048:	4b32      	ldr	r3, [pc, #200]	; (e114 <usart_read_callback+0xaa4>)
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	429a      	cmp	r2, r3
    e04e:	d130      	bne.n	e0b2 <usart_read_callback+0xa42>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    e050:	4b2f      	ldr	r3, [pc, #188]	; (e110 <usart_read_callback+0xaa0>)
    e052:	781b      	ldrb	r3, [r3, #0]
    e054:	1c1a      	adds	r2, r3, #0
    e056:	4b30      	ldr	r3, [pc, #192]	; (e118 <usart_read_callback+0xaa8>)
    e058:	781b      	ldrb	r3, [r3, #0]
    e05a:	3301      	adds	r3, #1
    e05c:	429a      	cmp	r2, r3
    e05e:	da0d      	bge.n	e07c <usart_read_callback+0xa0c>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    e060:	4b2e      	ldr	r3, [pc, #184]	; (e11c <usart_read_callback+0xaac>)
    e062:	681b      	ldr	r3, [r3, #0]
    e064:	2284      	movs	r2, #132	; 0x84
    e066:	0292      	lsls	r2, r2, #10
    e068:	1899      	adds	r1, r3, r2
    e06a:	4a2d      	ldr	r2, [pc, #180]	; (e120 <usart_read_callback+0xab0>)
    e06c:	1c3b      	adds	r3, r7, #0
    e06e:	3316      	adds	r3, #22
    e070:	881b      	ldrh	r3, [r3, #0]
    e072:	1c08      	adds	r0, r1, #0
    e074:	1c11      	adds	r1, r2, #0
    e076:	1c1a      	adds	r2, r3, #0
    e078:	4b2a      	ldr	r3, [pc, #168]	; (e124 <usart_read_callback+0xab4>)
    e07a:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    e07c:	4b24      	ldr	r3, [pc, #144]	; (e110 <usart_read_callback+0xaa0>)
    e07e:	781a      	ldrb	r2, [r3, #0]
    e080:	4b25      	ldr	r3, [pc, #148]	; (e118 <usart_read_callback+0xaa8>)
    e082:	781b      	ldrb	r3, [r3, #0]
    e084:	429a      	cmp	r2, r3
    e086:	d106      	bne.n	e096 <usart_read_callback+0xa26>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    e088:	4b27      	ldr	r3, [pc, #156]	; (e128 <usart_read_callback+0xab8>)
    e08a:	681b      	ldr	r3, [r3, #0]
    e08c:	2280      	movs	r2, #128	; 0x80
    e08e:	01d2      	lsls	r2, r2, #7
    e090:	431a      	orrs	r2, r3
    e092:	4b25      	ldr	r3, [pc, #148]	; (e128 <usart_read_callback+0xab8>)
    e094:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    e096:	1c3b      	adds	r3, r7, #0
    e098:	3316      	adds	r3, #22
    e09a:	881a      	ldrh	r2, [r3, #0]
    e09c:	4b1f      	ldr	r3, [pc, #124]	; (e11c <usart_read_callback+0xaac>)
    e09e:	681b      	ldr	r3, [r3, #0]
    e0a0:	18d2      	adds	r2, r2, r3
    e0a2:	4b1e      	ldr	r3, [pc, #120]	; (e11c <usart_read_callback+0xaac>)
    e0a4:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    e0a6:	4b1b      	ldr	r3, [pc, #108]	; (e114 <usart_read_callback+0xaa4>)
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	3301      	adds	r3, #1
    e0ac:	b2da      	uxtb	r2, r3
    e0ae:	4b19      	ldr	r3, [pc, #100]	; (e114 <usart_read_callback+0xaa4>)
    e0b0:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    e0b2:	4b1e      	ldr	r3, [pc, #120]	; (e12c <usart_read_callback+0xabc>)
    e0b4:	2200      	movs	r2, #0
    e0b6:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    e0b8:	4b1c      	ldr	r3, [pc, #112]	; (e12c <usart_read_callback+0xabc>)
    e0ba:	2209      	movs	r2, #9
    e0bc:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    e0be:	4b1b      	ldr	r3, [pc, #108]	; (e12c <usart_read_callback+0xabc>)
    e0c0:	2264      	movs	r2, #100	; 0x64
    e0c2:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 's';
    e0c4:	4b19      	ldr	r3, [pc, #100]	; (e12c <usart_read_callback+0xabc>)
    e0c6:	2273      	movs	r2, #115	; 0x73
    e0c8:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    e0ca:	4b18      	ldr	r3, [pc, #96]	; (e12c <usart_read_callback+0xabc>)
    e0cc:	2230      	movs	r2, #48	; 0x30
    e0ce:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    e0d0:	4b16      	ldr	r3, [pc, #88]	; (e12c <usart_read_callback+0xabc>)
    e0d2:	2231      	movs	r2, #49	; 0x31
    e0d4:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    e0d6:	4b0e      	ldr	r3, [pc, #56]	; (e110 <usart_read_callback+0xaa0>)
    e0d8:	781a      	ldrb	r2, [r3, #0]
    e0da:	4b14      	ldr	r3, [pc, #80]	; (e12c <usart_read_callback+0xabc>)
    e0dc:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    e0de:	4b0e      	ldr	r3, [pc, #56]	; (e118 <usart_read_callback+0xaa8>)
    e0e0:	781a      	ldrb	r2, [r3, #0]
    e0e2:	4b12      	ldr	r3, [pc, #72]	; (e12c <usart_read_callback+0xabc>)
    e0e4:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    e0e6:	4b11      	ldr	r3, [pc, #68]	; (e12c <usart_read_callback+0xabc>)
    e0e8:	2200      	movs	r2, #0
    e0ea:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    e0ec:	4b0f      	ldr	r3, [pc, #60]	; (e12c <usart_read_callback+0xabc>)
    e0ee:	220d      	movs	r2, #13
    e0f0:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    e0f2:	4b0e      	ldr	r3, [pc, #56]	; (e12c <usart_read_callback+0xabc>)
    e0f4:	1c18      	adds	r0, r3, #0
    e0f6:	210b      	movs	r1, #11
    e0f8:	2201      	movs	r2, #1
    e0fa:	4b0d      	ldr	r3, [pc, #52]	; (e130 <usart_read_callback+0xac0>)
    e0fc:	4798      	blx	r3
				break;
    e0fe:	46c0      	nop			; (mov r8, r8)
			}
			
									
		}		
	}
	BTReceive();        
    e100:	4b0f      	ldr	r3, [pc, #60]	; (e140 <usart_read_callback+0xad0>)
    e102:	4798      	blx	r3
}
    e104:	46bd      	mov	sp, r7
    e106:	b006      	add	sp, #24
    e108:	bd80      	pop	{r7, pc}
    e10a:	46c0      	nop			; (mov r8, r8)
    e10c:	20000a8c 	.word	0x20000a8c
    e110:	20003539 	.word	0x20003539
    e114:	20003538 	.word	0x20003538
    e118:	20003509 	.word	0x20003509
    e11c:	20003534 	.word	0x20003534
    e120:	20000a92 	.word	0x20000a92
    e124:	0000caf9 	.word	0x0000caf9
    e128:	2000369c 	.word	0x2000369c
    e12c:	2000350c 	.word	0x2000350c
    e130:	0000e2c5 	.word	0x0000e2c5
    e134:	200034ec 	.word	0x200034ec
    e138:	2000350a 	.word	0x2000350a
    e13c:	2000353c 	.word	0x2000353c
    e140:	0000e299 	.word	0x0000e299

0000e144 <usart_write_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void usart_write_callback(const struct usart_module *const usart_module)
{
    e144:	b580      	push	{r7, lr}
    e146:	b082      	sub	sp, #8
    e148:	af00      	add	r7, sp, #0
    e14a:	6078      	str	r0, [r7, #4]
	
    general_buffer[0] = 0x01; 
    e14c:	4b0b      	ldr	r3, [pc, #44]	; (e17c <usart_write_callback+0x38>)
    e14e:	2201      	movs	r2, #1
    e150:	701a      	strb	r2, [r3, #0]
    general_buffer[1] = 0x29; 
    e152:	4b0a      	ldr	r3, [pc, #40]	; (e17c <usart_write_callback+0x38>)
    e154:	2229      	movs	r2, #41	; 0x29
    e156:	705a      	strb	r2, [r3, #1]
    general_buffer[2] = 0xFC; 
    e158:	4b08      	ldr	r3, [pc, #32]	; (e17c <usart_write_callback+0x38>)
    e15a:	22fc      	movs	r2, #252	; 0xfc
    e15c:	709a      	strb	r2, [r3, #2]
    general_buffer[3] = 0x03; 
    e15e:	4b07      	ldr	r3, [pc, #28]	; (e17c <usart_write_callback+0x38>)
    e160:	2203      	movs	r2, #3
    e162:	70da      	strb	r2, [r3, #3]
    general_buffer[4] = 0x00;
    e164:	4b05      	ldr	r3, [pc, #20]	; (e17c <usart_write_callback+0x38>)
    e166:	2200      	movs	r2, #0
    e168:	711a      	strb	r2, [r3, #4]
    general_buffer[5] = 0x00; 
    e16a:	4b04      	ldr	r3, [pc, #16]	; (e17c <usart_write_callback+0x38>)
    e16c:	2200      	movs	r2, #0
    e16e:	715a      	strb	r2, [r3, #5]
    general_buffer[6] = 0x06; 
    e170:	4b02      	ldr	r3, [pc, #8]	; (e17c <usart_write_callback+0x38>)
    e172:	2206      	movs	r2, #6
    e174:	719a      	strb	r2, [r3, #6]
    general_buffer[5] = 0x36;
    general_buffer[6] = 0x37;
*/		
//	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,3);
//	usart_write_buffer_job(&usart_instance, general_buffer,7); 
}
    e176:	46bd      	mov	sp, r7
    e178:	b002      	add	sp, #8
    e17a:	bd80      	pop	{r7, pc}
    e17c:	20000a8c 	.word	0x20000a8c

0000e180 <configure_usart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void configure_usart(void)
{
    e180:	b580      	push	{r7, lr}
    e182:	b08c      	sub	sp, #48	; 0x30
    e184:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
 
	usart_get_config_defaults(&config_usart);
    e186:	1c3b      	adds	r3, r7, #0
    e188:	1c18      	adds	r0, r3, #0
    e18a:	4b17      	ldr	r3, [pc, #92]	; (e1e8 <configure_usart+0x68>)
    e18c:	4798      	blx	r3
 
	config_usart.baudrate    = 115200;
    e18e:	1c3b      	adds	r3, r7, #0
    e190:	22e1      	movs	r2, #225	; 0xe1
    e192:	0252      	lsls	r2, r2, #9
    e194:	611a      	str	r2, [r3, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    e196:	1c3b      	adds	r3, r7, #0
    e198:	22c4      	movs	r2, #196	; 0xc4
    e19a:	0392      	lsls	r2, r2, #14
    e19c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    e19e:	1c3b      	adds	r3, r7, #0
    e1a0:	2201      	movs	r2, #1
    e1a2:	4252      	negs	r2, r2
    e1a4:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    e1a6:	1c3b      	adds	r3, r7, #0
    e1a8:	2201      	movs	r2, #1
    e1aa:	4252      	negs	r2, r2
    e1ac:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    e1ae:	1c3b      	adds	r3, r7, #0
    e1b0:	4a0e      	ldr	r2, [pc, #56]	; (e1ec <configure_usart+0x6c>)
    e1b2:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    e1b4:	1c3b      	adds	r3, r7, #0
    e1b6:	4a0e      	ldr	r2, [pc, #56]	; (e1f0 <configure_usart+0x70>)
    e1b8:	62da      	str	r2, [r3, #44]	; 0x2c
	config_usart.generator_source = GCLK_GENERATOR_3; 
    e1ba:	1c3b      	adds	r3, r7, #0
    e1bc:	2203      	movs	r2, #3
    e1be:	775a      	strb	r2, [r3, #29]
 
	while (usart_init(&usart_instance,
    e1c0:	46c0      	nop			; (mov r8, r8)
    e1c2:	490c      	ldr	r1, [pc, #48]	; (e1f4 <configure_usart+0x74>)
    e1c4:	4a0c      	ldr	r2, [pc, #48]	; (e1f8 <configure_usart+0x78>)
    e1c6:	1c3b      	adds	r3, r7, #0
    e1c8:	1c08      	adds	r0, r1, #0
    e1ca:	1c11      	adds	r1, r2, #0
    e1cc:	1c1a      	adds	r2, r3, #0
    e1ce:	4b0b      	ldr	r3, [pc, #44]	; (e1fc <configure_usart+0x7c>)
    e1d0:	4798      	blx	r3
    e1d2:	1c03      	adds	r3, r0, #0
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d1f4      	bne.n	e1c2 <configure_usart+0x42>
			EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
 
	usart_enable(&usart_instance);
    e1d8:	4b06      	ldr	r3, [pc, #24]	; (e1f4 <configure_usart+0x74>)
    e1da:	1c18      	adds	r0, r3, #0
    e1dc:	4b08      	ldr	r3, [pc, #32]	; (e200 <configure_usart+0x80>)
    e1de:	4798      	blx	r3
 
}
    e1e0:	46bd      	mov	sp, r7
    e1e2:	b00c      	add	sp, #48	; 0x30
    e1e4:	bd80      	pop	{r7, pc}
    e1e6:	46c0      	nop			; (mov r8, r8)
    e1e8:	0000d511 	.word	0x0000d511
    e1ec:	000a0003 	.word	0x000a0003
    e1f0:	000b0003 	.word	0x000b0003
    e1f4:	200034bc 	.word	0x200034bc
    e1f8:	42001000 	.word	0x42001000
    e1fc:	00004a51 	.word	0x00004a51
    e200:	0000d591 	.word	0x0000d591

0000e204 <USARTDisable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTDisable(void)
{
    e204:	b580      	push	{r7, lr}
    e206:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);	
    e208:	4b02      	ldr	r3, [pc, #8]	; (e214 <USARTDisable+0x10>)
    e20a:	1c18      	adds	r0, r3, #0
    e20c:	4b02      	ldr	r3, [pc, #8]	; (e218 <USARTDisable+0x14>)
    e20e:	4798      	blx	r3
}
    e210:	46bd      	mov	sp, r7
    e212:	bd80      	pop	{r7, pc}
    e214:	200034bc 	.word	0x200034bc
    e218:	0000d5d9 	.word	0x0000d5d9

0000e21c <USARTEnable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTEnable(void)
{
    e21c:	b580      	push	{r7, lr}
    e21e:	af00      	add	r7, sp, #0
	usart_enable(&usart_instance);
    e220:	4b02      	ldr	r3, [pc, #8]	; (e22c <USARTEnable+0x10>)
    e222:	1c18      	adds	r0, r3, #0
    e224:	4b02      	ldr	r3, [pc, #8]	; (e230 <USARTEnable+0x14>)
    e226:	4798      	blx	r3
}
    e228:	46bd      	mov	sp, r7
    e22a:	bd80      	pop	{r7, pc}
    e22c:	200034bc 	.word	0x200034bc
    e230:	0000d591 	.word	0x0000d591

0000e234 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    e234:	b580      	push	{r7, lr}
    e236:	af00      	add	r7, sp, #0
//! [setup_register_callbacks]
	usart_register_callback(&usart_instance,
    e238:	4a0c      	ldr	r2, [pc, #48]	; (e26c <configure_usart_callbacks+0x38>)
    e23a:	4b0d      	ldr	r3, [pc, #52]	; (e270 <configure_usart_callbacks+0x3c>)
    e23c:	1c10      	adds	r0, r2, #0
    e23e:	1c19      	adds	r1, r3, #0
    e240:	2200      	movs	r2, #0
    e242:	4b0c      	ldr	r3, [pc, #48]	; (e274 <configure_usart_callbacks+0x40>)
    e244:	4798      	blx	r3
			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    e246:	4a09      	ldr	r2, [pc, #36]	; (e26c <configure_usart_callbacks+0x38>)
    e248:	4b0b      	ldr	r3, [pc, #44]	; (e278 <configure_usart_callbacks+0x44>)
    e24a:	1c10      	adds	r0, r2, #0
    e24c:	1c19      	adds	r1, r3, #0
    e24e:	2201      	movs	r2, #1
    e250:	4b08      	ldr	r3, [pc, #32]	; (e274 <configure_usart_callbacks+0x40>)
    e252:	4798      	blx	r3
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
//! [setup_register_callbacks]

//! [setup_enable_callbacks]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    e254:	4b05      	ldr	r3, [pc, #20]	; (e26c <configure_usart_callbacks+0x38>)
    e256:	1c18      	adds	r0, r3, #0
    e258:	2100      	movs	r1, #0
    e25a:	4b08      	ldr	r3, [pc, #32]	; (e27c <configure_usart_callbacks+0x48>)
    e25c:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    e25e:	4b03      	ldr	r3, [pc, #12]	; (e26c <configure_usart_callbacks+0x38>)
    e260:	1c18      	adds	r0, r3, #0
    e262:	2101      	movs	r1, #1
    e264:	4b05      	ldr	r3, [pc, #20]	; (e27c <configure_usart_callbacks+0x48>)
    e266:	4798      	blx	r3
//! [setup_enable_callbacks]
}
    e268:	46bd      	mov	sp, r7
    e26a:	bd80      	pop	{r7, pc}
    e26c:	200034bc 	.word	0x200034bc
    e270:	0000e145 	.word	0x0000e145
    e274:	00004d8d 	.word	0x00004d8d
    e278:	0000d671 	.word	0x0000d671
    e27c:	0000d625 	.word	0x0000d625

0000e280 <UsartMain>:
//! [setup]

void UsartMain(void)
{
    e280:	b580      	push	{r7, lr}
    e282:	af00      	add	r7, sp, #0
	configure_usart();
    e284:	4b02      	ldr	r3, [pc, #8]	; (e290 <UsartMain+0x10>)
    e286:	4798      	blx	r3
	configure_usart_callbacks();
    e288:	4b02      	ldr	r3, [pc, #8]	; (e294 <UsartMain+0x14>)
    e28a:	4798      	blx	r3
}
    e28c:	46bd      	mov	sp, r7
    e28e:	bd80      	pop	{r7, pc}
    e290:	0000e181 	.word	0x0000e181
    e294:	0000e235 	.word	0x0000e235

0000e298 <BTReceive>:

void BTReceive(void)
{
    e298:	b580      	push	{r7, lr}
    e29a:	af00      	add	r7, sp, #0
	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,5);
    e29c:	4a05      	ldr	r2, [pc, #20]	; (e2b4 <BTReceive+0x1c>)
    e29e:	4b06      	ldr	r3, [pc, #24]	; (e2b8 <BTReceive+0x20>)
    e2a0:	1c10      	adds	r0, r2, #0
    e2a2:	1c19      	adds	r1, r3, #0
    e2a4:	2205      	movs	r2, #5
    e2a6:	4b05      	ldr	r3, [pc, #20]	; (e2bc <BTReceive+0x24>)
    e2a8:	4798      	blx	r3
	receiveIntercharTimeout = FALSE;        
    e2aa:	4b05      	ldr	r3, [pc, #20]	; (e2c0 <BTReceive+0x28>)
    e2ac:	2200      	movs	r2, #0
    e2ae:	701a      	strb	r2, [r3, #0]
}
    e2b0:	46bd      	mov	sp, r7
    e2b2:	bd80      	pop	{r7, pc}
    e2b4:	200034bc 	.word	0x200034bc
    e2b8:	20000a8c 	.word	0x20000a8c
    e2bc:	00004e2d 	.word	0x00004e2d
    e2c0:	2000066b 	.word	0x2000066b

0000e2c4 <BTTransmit>:

void BTTransmit(uint8_t *buffer,uint8_t length,uint8_t state)
{
    e2c4:	b580      	push	{r7, lr}
    e2c6:	b082      	sub	sp, #8
    e2c8:	af00      	add	r7, sp, #0
    e2ca:	6078      	str	r0, [r7, #4]
    e2cc:	1cfb      	adds	r3, r7, #3
    e2ce:	7019      	strb	r1, [r3, #0]
    e2d0:	1cbb      	adds	r3, r7, #2
    e2d2:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_instance, buffer, length); 
    e2d4:	1cfb      	adds	r3, r7, #3
    e2d6:	781b      	ldrb	r3, [r3, #0]
    e2d8:	b29b      	uxth	r3, r3
    e2da:	4905      	ldr	r1, [pc, #20]	; (e2f0 <BTTransmit+0x2c>)
    e2dc:	687a      	ldr	r2, [r7, #4]
    e2de:	1c08      	adds	r0, r1, #0
    e2e0:	1c11      	adds	r1, r2, #0
    e2e2:	1c1a      	adds	r2, r3, #0
    e2e4:	4b03      	ldr	r3, [pc, #12]	; (e2f4 <BTTransmit+0x30>)
    e2e6:	4798      	blx	r3
	
}
    e2e8:	46bd      	mov	sp, r7
    e2ea:	b002      	add	sp, #8
    e2ec:	bd80      	pop	{r7, pc}
    e2ee:	46c0      	nop			; (mov r8, r8)
    e2f0:	200034bc 	.word	0x200034bc
    e2f4:	00004dd1 	.word	0x00004dd1

0000e2f8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e2f8:	b580      	push	{r7, lr}
    e2fa:	b084      	sub	sp, #16
    e2fc:	af00      	add	r7, sp, #0
    e2fe:	1c02      	adds	r2, r0, #0
    e300:	1dfb      	adds	r3, r7, #7
    e302:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e304:	1c3b      	adds	r3, r7, #0
    e306:	330f      	adds	r3, #15
    e308:	1dfa      	adds	r2, r7, #7
    e30a:	7812      	ldrb	r2, [r2, #0]
    e30c:	09d2      	lsrs	r2, r2, #7
    e30e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e310:	1c3b      	adds	r3, r7, #0
    e312:	330e      	adds	r3, #14
    e314:	1dfa      	adds	r2, r7, #7
    e316:	7812      	ldrb	r2, [r2, #0]
    e318:	0952      	lsrs	r2, r2, #5
    e31a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e31c:	4b0d      	ldr	r3, [pc, #52]	; (e354 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e31e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    e320:	1c3b      	adds	r3, r7, #0
    e322:	330f      	adds	r3, #15
    e324:	781b      	ldrb	r3, [r3, #0]
    e326:	2b00      	cmp	r3, #0
    e328:	d10e      	bne.n	e348 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    e32a:	1c3b      	adds	r3, r7, #0
    e32c:	330f      	adds	r3, #15
    e32e:	781b      	ldrb	r3, [r3, #0]
    e330:	009b      	lsls	r3, r3, #2
    e332:	2210      	movs	r2, #16
    e334:	19d2      	adds	r2, r2, r7
    e336:	18d3      	adds	r3, r2, r3
    e338:	3b08      	subs	r3, #8
    e33a:	681a      	ldr	r2, [r3, #0]
    e33c:	1c3b      	adds	r3, r7, #0
    e33e:	330e      	adds	r3, #14
    e340:	781b      	ldrb	r3, [r3, #0]
    e342:	01db      	lsls	r3, r3, #7
    e344:	18d3      	adds	r3, r2, r3
    e346:	e000      	b.n	e34a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    e348:	2300      	movs	r3, #0
	}
}
    e34a:	1c18      	adds	r0, r3, #0
    e34c:	46bd      	mov	sp, r7
    e34e:	b004      	add	sp, #16
    e350:	bd80      	pop	{r7, pc}
    e352:	46c0      	nop			; (mov r8, r8)
    e354:	41004400 	.word	0x41004400

0000e358 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e358:	b580      	push	{r7, lr}
    e35a:	b082      	sub	sp, #8
    e35c:	af00      	add	r7, sp, #0
    e35e:	1c02      	adds	r2, r0, #0
    e360:	1dfb      	adds	r3, r7, #7
    e362:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e364:	1dfb      	adds	r3, r7, #7
    e366:	781b      	ldrb	r3, [r3, #0]
    e368:	1c18      	adds	r0, r3, #0
    e36a:	4b03      	ldr	r3, [pc, #12]	; (e378 <port_get_group_from_gpio_pin+0x20>)
    e36c:	4798      	blx	r3
    e36e:	1c03      	adds	r3, r0, #0
}
    e370:	1c18      	adds	r0, r3, #0
    e372:	46bd      	mov	sp, r7
    e374:	b002      	add	sp, #8
    e376:	bd80      	pop	{r7, pc}
    e378:	0000e2f9 	.word	0x0000e2f9

0000e37c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    e37c:	b580      	push	{r7, lr}
    e37e:	b082      	sub	sp, #8
    e380:	af00      	add	r7, sp, #0
    e382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	2200      	movs	r2, #0
    e388:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e38a:	687b      	ldr	r3, [r7, #4]
    e38c:	2201      	movs	r2, #1
    e38e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	2200      	movs	r2, #0
    e394:	709a      	strb	r2, [r3, #2]
}
    e396:	46bd      	mov	sp, r7
    e398:	b002      	add	sp, #8
    e39a:	bd80      	pop	{r7, pc}

0000e39c <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    e39c:	b580      	push	{r7, lr}
    e39e:	b084      	sub	sp, #16
    e3a0:	af00      	add	r7, sp, #0
    e3a2:	1c0a      	adds	r2, r1, #0
    e3a4:	1dfb      	adds	r3, r7, #7
    e3a6:	1c01      	adds	r1, r0, #0
    e3a8:	7019      	strb	r1, [r3, #0]
    e3aa:	1dbb      	adds	r3, r7, #6
    e3ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e3ae:	1dfb      	adds	r3, r7, #7
    e3b0:	781b      	ldrb	r3, [r3, #0]
    e3b2:	1c18      	adds	r0, r3, #0
    e3b4:	4b0d      	ldr	r3, [pc, #52]	; (e3ec <port_pin_set_output_level+0x50>)
    e3b6:	4798      	blx	r3
    e3b8:	1c03      	adds	r3, r0, #0
    e3ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e3bc:	1dfb      	adds	r3, r7, #7
    e3be:	781a      	ldrb	r2, [r3, #0]
    e3c0:	231f      	movs	r3, #31
    e3c2:	4013      	ands	r3, r2
    e3c4:	2201      	movs	r2, #1
    e3c6:	1c11      	adds	r1, r2, #0
    e3c8:	4099      	lsls	r1, r3
    e3ca:	1c0b      	adds	r3, r1, #0
    e3cc:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    e3ce:	1dbb      	adds	r3, r7, #6
    e3d0:	781b      	ldrb	r3, [r3, #0]
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d003      	beq.n	e3de <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	68ba      	ldr	r2, [r7, #8]
    e3da:	619a      	str	r2, [r3, #24]
    e3dc:	e002      	b.n	e3e4 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    e3de:	68fb      	ldr	r3, [r7, #12]
    e3e0:	68ba      	ldr	r2, [r7, #8]
    e3e2:	615a      	str	r2, [r3, #20]
	}
}
    e3e4:	46bd      	mov	sp, r7
    e3e6:	b004      	add	sp, #16
    e3e8:	bd80      	pop	{r7, pc}
    e3ea:	46c0      	nop			; (mov r8, r8)
    e3ec:	0000e359 	.word	0x0000e359

0000e3f0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b084      	sub	sp, #16
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e3f8:	687b      	ldr	r3, [r7, #4]
    e3fa:	681b      	ldr	r3, [r3, #0]
    e3fc:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    e3fe:	68fb      	ldr	r3, [r7, #12]
    e400:	8a1b      	ldrh	r3, [r3, #16]
    e402:	b29b      	uxth	r3, r3
    e404:	1c1a      	adds	r2, r3, #0
    e406:	2380      	movs	r3, #128	; 0x80
    e408:	021b      	lsls	r3, r3, #8
    e40a:	4013      	ands	r3, r2
    e40c:	1e5a      	subs	r2, r3, #1
    e40e:	4193      	sbcs	r3, r2
    e410:	b2db      	uxtb	r3, r3
#  endif
}
    e412:	1c18      	adds	r0, r3, #0
    e414:	46bd      	mov	sp, r7
    e416:	b004      	add	sp, #16
    e418:	bd80      	pop	{r7, pc}
    e41a:	46c0      	nop			; (mov r8, r8)

0000e41c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    e41c:	b580      	push	{r7, lr}
    e41e:	b082      	sub	sp, #8
    e420:	af00      	add	r7, sp, #0
    e422:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	2201      	movs	r2, #1
    e428:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	2200      	movs	r2, #0
    e42e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;  //BBBBBBBBBBBBBBBB0;
    e430:	687b      	ldr	r3, [r7, #4]
    e432:	2200      	movs	r2, #0
    e434:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	22c0      	movs	r2, #192	; 0xc0
    e43a:	0392      	lsls	r2, r2, #14
    e43c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	2200      	movs	r2, #0
    e442:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	2200      	movs	r2, #0
    e448:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	2201      	movs	r2, #1
    e44e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_1;  //0;
    e450:	687a      	ldr	r2, [r7, #4]
    e452:	2320      	movs	r3, #32
    e454:	2101      	movs	r1, #1
    e456:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	3314      	adds	r3, #20
    e45c:	1c18      	adds	r0, r3, #0
    e45e:	2100      	movs	r1, #0
    e460:	220c      	movs	r2, #12
    e462:	4b0a      	ldr	r3, [pc, #40]	; (e48c <spi_get_config_defaults+0x70>)
    e464:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	4a09      	ldr	r2, [pc, #36]	; (e490 <spi_get_config_defaults+0x74>)
    e46a:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	2200      	movs	r2, #0
    e470:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    e472:	687b      	ldr	r3, [r7, #4]
    e474:	2200      	movs	r2, #0
    e476:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    e478:	687b      	ldr	r3, [r7, #4]
    e47a:	2200      	movs	r2, #0
    e47c:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    e47e:	687b      	ldr	r3, [r7, #4]
    e480:	2200      	movs	r2, #0
    e482:	631a      	str	r2, [r3, #48]	; 0x30

};
    e484:	46bd      	mov	sp, r7
    e486:	b002      	add	sp, #8
    e488:	bd80      	pop	{r7, pc}
    e48a:	46c0      	nop			; (mov r8, r8)
    e48c:	00017f21 	.word	0x00017f21
    e490:	000186a0 	.word	0x000186a0

0000e494 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    e494:	b580      	push	{r7, lr}
    e496:	b082      	sub	sp, #8
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	220a      	movs	r2, #10
    e4a0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    e4a2:	687b      	ldr	r3, [r7, #4]
    e4a4:	2200      	movs	r2, #0
    e4a6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	2200      	movs	r2, #0
    e4ac:	709a      	strb	r2, [r3, #2]
}
    e4ae:	46bd      	mov	sp, r7
    e4b0:	b002      	add	sp, #8
    e4b2:	bd80      	pop	{r7, pc}

0000e4b4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    e4b4:	b580      	push	{r7, lr}
    e4b6:	b084      	sub	sp, #16
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	6078      	str	r0, [r7, #4]
    e4bc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    e4be:	683b      	ldr	r3, [r7, #0]
    e4c0:	781a      	ldrb	r2, [r3, #0]
    e4c2:	687b      	ldr	r3, [r7, #4]
    e4c4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    e4c6:	683b      	ldr	r3, [r7, #0]
    e4c8:	785a      	ldrb	r2, [r3, #1]
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    e4ce:	683b      	ldr	r3, [r7, #0]
    e4d0:	789a      	ldrb	r2, [r3, #2]
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    e4d6:	1c3b      	adds	r3, r7, #0
    e4d8:	330c      	adds	r3, #12
    e4da:	1c18      	adds	r0, r3, #0
    e4dc:	4b0b      	ldr	r3, [pc, #44]	; (e50c <spi_attach_slave+0x58>)
    e4de:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    e4e0:	1c3b      	adds	r3, r7, #0
    e4e2:	330c      	adds	r3, #12
    e4e4:	2201      	movs	r2, #1
    e4e6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	781a      	ldrb	r2, [r3, #0]
    e4ec:	1c3b      	adds	r3, r7, #0
    e4ee:	330c      	adds	r3, #12
    e4f0:	1c10      	adds	r0, r2, #0
    e4f2:	1c19      	adds	r1, r3, #0
    e4f4:	4b06      	ldr	r3, [pc, #24]	; (e510 <spi_attach_slave+0x5c>)
    e4f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    e4f8:	687b      	ldr	r3, [r7, #4]
    e4fa:	781b      	ldrb	r3, [r3, #0]
    e4fc:	1c18      	adds	r0, r3, #0
    e4fe:	2101      	movs	r1, #1
    e500:	4b04      	ldr	r3, [pc, #16]	; (e514 <spi_attach_slave+0x60>)
    e502:	4798      	blx	r3
}
    e504:	46bd      	mov	sp, r7
    e506:	b004      	add	sp, #16
    e508:	bd80      	pop	{r7, pc}
    e50a:	46c0      	nop			; (mov r8, r8)
    e50c:	0000e37d 	.word	0x0000e37d
    e510:	00011dbd 	.word	0x00011dbd
    e514:	0000e39d 	.word	0x0000e39d

0000e518 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    e518:	b580      	push	{r7, lr}
    e51a:	b084      	sub	sp, #16
    e51c:	af00      	add	r7, sp, #0
    e51e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e520:	687b      	ldr	r3, [r7, #4]
    e522:	681b      	ldr	r3, [r3, #0]
    e524:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    e526:	46c0      	nop			; (mov r8, r8)
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	1c18      	adds	r0, r3, #0
    e52c:	4b06      	ldr	r3, [pc, #24]	; (e548 <spi_enable+0x30>)
    e52e:	4798      	blx	r3
    e530:	1c03      	adds	r3, r0, #0
    e532:	2b00      	cmp	r3, #0
    e534:	d1f8      	bne.n	e528 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	681b      	ldr	r3, [r3, #0]
    e53a:	2202      	movs	r2, #2
    e53c:	431a      	orrs	r2, r3
    e53e:	68fb      	ldr	r3, [r7, #12]
    e540:	601a      	str	r2, [r3, #0]
}
    e542:	46bd      	mov	sp, r7
    e544:	b004      	add	sp, #16
    e546:	bd80      	pop	{r7, pc}
    e548:	0000e3f1 	.word	0x0000e3f1

0000e54c <SPIXConfigure>:
 
//----------------------------------------------------------------------------
//		SPIXConfigure
//---------------------------------------------------------------------------- 
void SPIXConfigure(void)
{
    e54c:	b580      	push	{r7, lr}
    e54e:	b08e      	sub	sp, #56	; 0x38
    e550:	af00      	add	r7, sp, #0
 
	//-----------------------------------
	// Configure and initialize software device 
	// instance of peripheral slave 
	//-----------------------------------
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    e552:	1c3b      	adds	r3, r7, #0
    e554:	1c18      	adds	r0, r3, #0
    e556:	4b17      	ldr	r3, [pc, #92]	; (e5b4 <SPIXConfigure+0x68>)
    e558:	4798      	blx	r3
	slave_dev_config.ss_pin = XSLAVE_SELECT_PIN;
    e55a:	1c3b      	adds	r3, r7, #0
    e55c:	2206      	movs	r2, #6
    e55e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slavex, &slave_dev_config);
    e560:	4a15      	ldr	r2, [pc, #84]	; (e5b8 <SPIXConfigure+0x6c>)
    e562:	1c3b      	adds	r3, r7, #0
    e564:	1c10      	adds	r0, r2, #0
    e566:	1c19      	adds	r1, r3, #0
    e568:	4b14      	ldr	r3, [pc, #80]	; (e5bc <SPIXConfigure+0x70>)
    e56a:	4798      	blx	r3
	//------------------------------------
	// Configure, initialize and enable SERCOM SPI module 
	//------------------------------------
	spi_get_config_defaults(&config_spi_master);
    e56c:	1d3b      	adds	r3, r7, #4
    e56e:	1c18      	adds	r0, r3, #0
    e570:	4b13      	ldr	r3, [pc, #76]	; (e5c0 <SPIXConfigure+0x74>)
    e572:	4798      	blx	r3
	config_spi_master.mux_setting = EXT2_SPI_SERCOM_MUX_SETTING;
    e574:	1d3b      	adds	r3, r7, #4
    e576:	22c0      	movs	r2, #192	; 0xc0
    e578:	0392      	lsls	r2, r2, #14
    e57a:	60da      	str	r2, [r3, #12]

	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EXT2_SPI_SERCOM_PINMUX_PAD0;
    e57c:	1d3b      	adds	r3, r7, #4
    e57e:	4a11      	ldr	r2, [pc, #68]	; (e5c4 <SPIXConfigure+0x78>)
    e580:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 = EXT2_SPI_SERCOM_PINMUX_PAD1;
    e582:	1d3b      	adds	r3, r7, #4
    e584:	4a10      	ldr	r2, [pc, #64]	; (e5c8 <SPIXConfigure+0x7c>)
    e586:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    e588:	1d3b      	adds	r3, r7, #4
    e58a:	2201      	movs	r2, #1
    e58c:	4252      	negs	r2, r2
    e58e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EXT2_SPI_SERCOM_PINMUX_PAD3;
    e590:	1d3b      	adds	r3, r7, #4
    e592:	4a0e      	ldr	r2, [pc, #56]	; (e5cc <SPIXConfigure+0x80>)
    e594:	631a      	str	r2, [r3, #48]	; 0x30
	spi_init(&spix_master_instance, EXT2_SPI_MODULE, &config_spi_master);
    e596:	490e      	ldr	r1, [pc, #56]	; (e5d0 <SPIXConfigure+0x84>)
    e598:	4a0e      	ldr	r2, [pc, #56]	; (e5d4 <SPIXConfigure+0x88>)
    e59a:	1d3b      	adds	r3, r7, #4
    e59c:	1c08      	adds	r0, r1, #0
    e59e:	1c11      	adds	r1, r2, #0
    e5a0:	1c1a      	adds	r2, r3, #0
    e5a2:	4b0d      	ldr	r3, [pc, #52]	; (e5d8 <SPIXConfigure+0x8c>)
    e5a4:	4798      	blx	r3
	spi_enable(&spix_master_instance);
    e5a6:	4b0a      	ldr	r3, [pc, #40]	; (e5d0 <SPIXConfigure+0x84>)
    e5a8:	1c18      	adds	r0, r3, #0
    e5aa:	4b0c      	ldr	r3, [pc, #48]	; (e5dc <SPIXConfigure+0x90>)
    e5ac:	4798      	blx	r3
 
}
    e5ae:	46bd      	mov	sp, r7
    e5b0:	b00e      	add	sp, #56	; 0x38
    e5b2:	bd80      	pop	{r7, pc}
    e5b4:	0000e495 	.word	0x0000e495
    e5b8:	200035ec 	.word	0x200035ec
    e5bc:	0000e4b5 	.word	0x0000e4b5
    e5c0:	0000e41d 	.word	0x0000e41d
    e5c4:	00040003 	.word	0x00040003
    e5c8:	00050003 	.word	0x00050003
    e5cc:	00070003 	.word	0x00070003
    e5d0:	20003688 	.word	0x20003688
    e5d4:	42000800 	.word	0x42000800
    e5d8:	0001321d 	.word	0x0001321d
    e5dc:	0000e519 	.word	0x0000e519

0000e5e0 <SPIXMain>:
 //		SPIXMain
 //----------------------------------------------------------------------------
uint8_t rxBuffX[MAX_SPIX_BUFFER_SIZE];
uint8_t txBuffX[MAX_SPIX_BUFFER_SIZE];
int SPIXMain(void)
{
    e5e0:	b598      	push	{r3, r4, r7, lr}
    e5e2:	af00      	add	r7, sp, #0
//	system_init();
 
//	SPIXConfigure();
// while (true)
// {
	spi_select_slave(&spix_master_instance, &slavex, true);
    e5e4:	4a21      	ldr	r2, [pc, #132]	; (e66c <SPIXMain+0x8c>)
    e5e6:	4b22      	ldr	r3, [pc, #136]	; (e670 <SPIXMain+0x90>)
    e5e8:	1c10      	adds	r0, r2, #0
    e5ea:	1c19      	adds	r1, r3, #0
    e5ec:	2201      	movs	r2, #1
    e5ee:	4b21      	ldr	r3, [pc, #132]	; (e674 <SPIXMain+0x94>)
    e5f0:	4798      	blx	r3
 
	txBuffX[0] = 0x42;
    e5f2:	4b21      	ldr	r3, [pc, #132]	; (e678 <SPIXMain+0x98>)
    e5f4:	2242      	movs	r2, #66	; 0x42
    e5f6:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    e5f8:	4b1f      	ldr	r3, [pc, #124]	; (e678 <SPIXMain+0x98>)
    e5fa:	2200      	movs	r2, #0
    e5fc:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    e5fe:	4b1e      	ldr	r3, [pc, #120]	; (e678 <SPIXMain+0x98>)
    e600:	2200      	movs	r2, #0
    e602:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],2);
    e604:	4919      	ldr	r1, [pc, #100]	; (e66c <SPIXMain+0x8c>)
    e606:	4a1c      	ldr	r2, [pc, #112]	; (e678 <SPIXMain+0x98>)
    e608:	4b1c      	ldr	r3, [pc, #112]	; (e67c <SPIXMain+0x9c>)
    e60a:	1c08      	adds	r0, r1, #0
    e60c:	1c11      	adds	r1, r2, #0
    e60e:	1c1a      	adds	r2, r3, #0
    e610:	2302      	movs	r3, #2
    e612:	4c1b      	ldr	r4, [pc, #108]	; (e680 <SPIXMain+0xa0>)
    e614:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    e616:	4a15      	ldr	r2, [pc, #84]	; (e66c <SPIXMain+0x8c>)
    e618:	4b15      	ldr	r3, [pc, #84]	; (e670 <SPIXMain+0x90>)
    e61a:	1c10      	adds	r0, r2, #0
    e61c:	1c19      	adds	r1, r3, #0
    e61e:	2200      	movs	r2, #0
    e620:	4b14      	ldr	r3, [pc, #80]	; (e674 <SPIXMain+0x94>)
    e622:	4798      	blx	r3
// }
//	while (true) {
//		/* Infinite loop */
//	}

	spi_select_slave(&spix_master_instance, &slavex, true);
    e624:	4a11      	ldr	r2, [pc, #68]	; (e66c <SPIXMain+0x8c>)
    e626:	4b12      	ldr	r3, [pc, #72]	; (e670 <SPIXMain+0x90>)
    e628:	1c10      	adds	r0, r2, #0
    e62a:	1c19      	adds	r1, r3, #0
    e62c:	2201      	movs	r2, #1
    e62e:	4b11      	ldr	r3, [pc, #68]	; (e674 <SPIXMain+0x94>)
    e630:	4798      	blx	r3
 
	txBuffX[0] = 0x01;
    e632:	4b11      	ldr	r3, [pc, #68]	; (e678 <SPIXMain+0x98>)
    e634:	2201      	movs	r2, #1
    e636:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    e638:	4b0f      	ldr	r3, [pc, #60]	; (e678 <SPIXMain+0x98>)
    e63a:	2200      	movs	r2, #0
    e63c:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    e63e:	4b0e      	ldr	r3, [pc, #56]	; (e678 <SPIXMain+0x98>)
    e640:	2200      	movs	r2, #0
    e642:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],4);
    e644:	4909      	ldr	r1, [pc, #36]	; (e66c <SPIXMain+0x8c>)
    e646:	4a0c      	ldr	r2, [pc, #48]	; (e678 <SPIXMain+0x98>)
    e648:	4b0c      	ldr	r3, [pc, #48]	; (e67c <SPIXMain+0x9c>)
    e64a:	1c08      	adds	r0, r1, #0
    e64c:	1c11      	adds	r1, r2, #0
    e64e:	1c1a      	adds	r2, r3, #0
    e650:	2304      	movs	r3, #4
    e652:	4c0b      	ldr	r4, [pc, #44]	; (e680 <SPIXMain+0xa0>)
    e654:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    e656:	4a05      	ldr	r2, [pc, #20]	; (e66c <SPIXMain+0x8c>)
    e658:	4b05      	ldr	r3, [pc, #20]	; (e670 <SPIXMain+0x90>)
    e65a:	1c10      	adds	r0, r2, #0
    e65c:	1c19      	adds	r1, r3, #0
    e65e:	2200      	movs	r2, #0
    e660:	4b04      	ldr	r3, [pc, #16]	; (e674 <SPIXMain+0x94>)
    e662:	4798      	blx	r3
	return 1; 
    e664:	2301      	movs	r3, #1
 
}
    e666:	1c18      	adds	r0, r3, #0
    e668:	46bd      	mov	sp, r7
    e66a:	bd98      	pop	{r3, r4, r7, pc}
    e66c:	20003688 	.word	0x20003688
    e670:	200035ec 	.word	0x200035ec
    e674:	00013311 	.word	0x00013311
    e678:	200035f0 	.word	0x200035f0
    e67c:	20003554 	.word	0x20003554
    e680:	000133ed 	.word	0x000133ed

0000e684 <SPIXInOut>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    e684:	b590      	push	{r4, r7, lr}
    e686:	b087      	sub	sp, #28
    e688:	af00      	add	r7, sp, #0
    e68a:	6039      	str	r1, [r7, #0]
    e68c:	1dfb      	adds	r3, r7, #7
    e68e:	1c01      	adds	r1, r0, #0
    e690:	7019      	strb	r1, [r3, #0]
    e692:	1d3b      	adds	r3, r7, #4
    e694:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    e696:	683b      	ldr	r3, [r7, #0]
    e698:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    e69a:	2300      	movs	r3, #0
    e69c:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    e69e:	1d3b      	adds	r3, r7, #4
    e6a0:	881b      	ldrh	r3, [r3, #0]
    e6a2:	2b94      	cmp	r3, #148	; 0x94
    e6a4:	d858      	bhi.n	e758 <SPIXInOut+0xd4>
	 {
		 success = 1; 
    e6a6:	2301      	movs	r3, #1
    e6a8:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    e6aa:	4a2e      	ldr	r2, [pc, #184]	; (e764 <SPIXInOut+0xe0>)
    e6ac:	4b2e      	ldr	r3, [pc, #184]	; (e768 <SPIXInOut+0xe4>)
    e6ae:	1c10      	adds	r0, r2, #0
    e6b0:	1c19      	adds	r1, r3, #0
    e6b2:	2201      	movs	r2, #1
    e6b4:	4b2d      	ldr	r3, [pc, #180]	; (e76c <SPIXInOut+0xe8>)
    e6b6:	4798      	blx	r3
		 for (i=0;i<size;i++)
    e6b8:	1c3b      	adds	r3, r7, #0
    e6ba:	3316      	adds	r3, #22
    e6bc:	2200      	movs	r2, #0
    e6be:	801a      	strh	r2, [r3, #0]
    e6c0:	e010      	b.n	e6e4 <SPIXInOut+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    e6c2:	1c3b      	adds	r3, r7, #0
    e6c4:	3316      	adds	r3, #22
    e6c6:	881b      	ldrh	r3, [r3, #0]
    e6c8:	1c5a      	adds	r2, r3, #1
    e6ca:	693b      	ldr	r3, [r7, #16]
    e6cc:	1c59      	adds	r1, r3, #1
    e6ce:	6139      	str	r1, [r7, #16]
    e6d0:	7819      	ldrb	r1, [r3, #0]
    e6d2:	4b27      	ldr	r3, [pc, #156]	; (e770 <SPIXInOut+0xec>)
    e6d4:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    e6d6:	1c3b      	adds	r3, r7, #0
    e6d8:	3316      	adds	r3, #22
    e6da:	881a      	ldrh	r2, [r3, #0]
    e6dc:	1c3b      	adds	r3, r7, #0
    e6de:	3316      	adds	r3, #22
    e6e0:	3201      	adds	r2, #1
    e6e2:	801a      	strh	r2, [r3, #0]
    e6e4:	1c3a      	adds	r2, r7, #0
    e6e6:	3216      	adds	r2, #22
    e6e8:	1d3b      	adds	r3, r7, #4
    e6ea:	8812      	ldrh	r2, [r2, #0]
    e6ec:	881b      	ldrh	r3, [r3, #0]
    e6ee:	429a      	cmp	r2, r3
    e6f0:	d3e7      	bcc.n	e6c2 <SPIXInOut+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 
		 txBuffX[0] = addr; 
    e6f2:	4b1f      	ldr	r3, [pc, #124]	; (e770 <SPIXInOut+0xec>)
    e6f4:	1dfa      	adds	r2, r7, #7
    e6f6:	7812      	ldrb	r2, [r2, #0]
    e6f8:	701a      	strb	r2, [r3, #0]
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    e6fa:	1d3b      	adds	r3, r7, #4
    e6fc:	881b      	ldrh	r3, [r3, #0]
    e6fe:	3301      	adds	r3, #1
    e700:	b29b      	uxth	r3, r3
    e702:	4818      	ldr	r0, [pc, #96]	; (e764 <SPIXInOut+0xe0>)
    e704:	491a      	ldr	r1, [pc, #104]	; (e770 <SPIXInOut+0xec>)
    e706:	4a1b      	ldr	r2, [pc, #108]	; (e774 <SPIXInOut+0xf0>)
    e708:	4c1b      	ldr	r4, [pc, #108]	; (e778 <SPIXInOut+0xf4>)
    e70a:	47a0      	blx	r4
		 ptr = buffer; 
    e70c:	683b      	ldr	r3, [r7, #0]
    e70e:	613b      	str	r3, [r7, #16]
		 for (i=0;i<(size+1);i++)
    e710:	1c3b      	adds	r3, r7, #0
    e712:	3316      	adds	r3, #22
    e714:	2200      	movs	r2, #0
    e716:	801a      	strh	r2, [r3, #0]
    e718:	e00f      	b.n	e73a <SPIXInOut+0xb6>
		 {
			 *ptr++ = rxBuffX[i]; 
    e71a:	693b      	ldr	r3, [r7, #16]
    e71c:	1c5a      	adds	r2, r3, #1
    e71e:	613a      	str	r2, [r7, #16]
    e720:	1c3a      	adds	r2, r7, #0
    e722:	3216      	adds	r2, #22
    e724:	8812      	ldrh	r2, [r2, #0]
    e726:	4913      	ldr	r1, [pc, #76]	; (e774 <SPIXInOut+0xf0>)
    e728:	5c8a      	ldrb	r2, [r1, r2]
    e72a:	701a      	strb	r2, [r3, #0]
		 }
		 
		 txBuffX[0] = addr; 
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
		 ptr = buffer; 
		 for (i=0;i<(size+1);i++)
    e72c:	1c3b      	adds	r3, r7, #0
    e72e:	3316      	adds	r3, #22
    e730:	881a      	ldrh	r2, [r3, #0]
    e732:	1c3b      	adds	r3, r7, #0
    e734:	3316      	adds	r3, #22
    e736:	3201      	adds	r2, #1
    e738:	801a      	strh	r2, [r3, #0]
    e73a:	1c3b      	adds	r3, r7, #0
    e73c:	3316      	adds	r3, #22
    e73e:	881a      	ldrh	r2, [r3, #0]
    e740:	1d3b      	adds	r3, r7, #4
    e742:	881b      	ldrh	r3, [r3, #0]
    e744:	3301      	adds	r3, #1
    e746:	429a      	cmp	r2, r3
    e748:	dbe7      	blt.n	e71a <SPIXInOut+0x96>
		 {
			 *ptr++ = rxBuffX[i]; 
		 } 
		 spi_select_slave(&spix_master_instance, &slavex, false);
    e74a:	4a06      	ldr	r2, [pc, #24]	; (e764 <SPIXInOut+0xe0>)
    e74c:	4b06      	ldr	r3, [pc, #24]	; (e768 <SPIXInOut+0xe4>)
    e74e:	1c10      	adds	r0, r2, #0
    e750:	1c19      	adds	r1, r3, #0
    e752:	2200      	movs	r2, #0
    e754:	4b05      	ldr	r3, [pc, #20]	; (e76c <SPIXInOut+0xe8>)
    e756:	4798      	blx	r3
	 } 
	 return success; 
    e758:	68fb      	ldr	r3, [r7, #12]
 }
    e75a:	1c18      	adds	r0, r3, #0
    e75c:	46bd      	mov	sp, r7
    e75e:	b007      	add	sp, #28
    e760:	bd90      	pop	{r4, r7, pc}
    e762:	46c0      	nop			; (mov r8, r8)
    e764:	20003688 	.word	0x20003688
    e768:	200035ec 	.word	0x200035ec
    e76c:	00013311 	.word	0x00013311
    e770:	200035f0 	.word	0x200035f0
    e774:	20003554 	.word	0x20003554
    e778:	000133ed 	.word	0x000133ed

0000e77c <SPIXInOut2>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut2(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    e77c:	b590      	push	{r4, r7, lr}
    e77e:	b087      	sub	sp, #28
    e780:	af00      	add	r7, sp, #0
    e782:	6039      	str	r1, [r7, #0]
    e784:	1dfb      	adds	r3, r7, #7
    e786:	1c01      	adds	r1, r0, #0
    e788:	7019      	strb	r1, [r3, #0]
    e78a:	1d3b      	adds	r3, r7, #4
    e78c:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    e78e:	683b      	ldr	r3, [r7, #0]
    e790:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    e792:	2300      	movs	r3, #0
    e794:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    e796:	1d3b      	adds	r3, r7, #4
    e798:	881b      	ldrh	r3, [r3, #0]
    e79a:	2b94      	cmp	r3, #148	; 0x94
    e79c:	d869      	bhi.n	e872 <SPIXInOut2+0xf6>
	 {
		 success = 1; 
    e79e:	2301      	movs	r3, #1
    e7a0:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    e7a2:	4a36      	ldr	r2, [pc, #216]	; (e87c <SPIXInOut2+0x100>)
    e7a4:	4b36      	ldr	r3, [pc, #216]	; (e880 <SPIXInOut2+0x104>)
    e7a6:	1c10      	adds	r0, r2, #0
    e7a8:	1c19      	adds	r1, r3, #0
    e7aa:	2201      	movs	r2, #1
    e7ac:	4b35      	ldr	r3, [pc, #212]	; (e884 <SPIXInOut2+0x108>)
    e7ae:	4798      	blx	r3
		 for (i=0;i<size;i++)
    e7b0:	1c3b      	adds	r3, r7, #0
    e7b2:	3316      	adds	r3, #22
    e7b4:	2200      	movs	r2, #0
    e7b6:	801a      	strh	r2, [r3, #0]
    e7b8:	e010      	b.n	e7dc <SPIXInOut2+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    e7ba:	1c3b      	adds	r3, r7, #0
    e7bc:	3316      	adds	r3, #22
    e7be:	881b      	ldrh	r3, [r3, #0]
    e7c0:	1c5a      	adds	r2, r3, #1
    e7c2:	693b      	ldr	r3, [r7, #16]
    e7c4:	1c59      	adds	r1, r3, #1
    e7c6:	6139      	str	r1, [r7, #16]
    e7c8:	7819      	ldrb	r1, [r3, #0]
    e7ca:	4b2f      	ldr	r3, [pc, #188]	; (e888 <SPIXInOut2+0x10c>)
    e7cc:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    e7ce:	1c3b      	adds	r3, r7, #0
    e7d0:	3316      	adds	r3, #22
    e7d2:	881a      	ldrh	r2, [r3, #0]
    e7d4:	1c3b      	adds	r3, r7, #0
    e7d6:	3316      	adds	r3, #22
    e7d8:	3201      	adds	r2, #1
    e7da:	801a      	strh	r2, [r3, #0]
    e7dc:	1c3a      	adds	r2, r7, #0
    e7de:	3216      	adds	r2, #22
    e7e0:	1d3b      	adds	r3, r7, #4
    e7e2:	8812      	ldrh	r2, [r2, #0]
    e7e4:	881b      	ldrh	r3, [r3, #0]
    e7e6:	429a      	cmp	r2, r3
    e7e8:	d3e7      	bcc.n	e7ba <SPIXInOut2+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 ptr = buffer; 
    e7ea:	683b      	ldr	r3, [r7, #0]
    e7ec:	613b      	str	r3, [r7, #16]
		 txBuffX[0] = addr; 
    e7ee:	4b26      	ldr	r3, [pc, #152]	; (e888 <SPIXInOut2+0x10c>)
    e7f0:	1dfa      	adds	r2, r7, #7
    e7f2:	7812      	ldrb	r2, [r2, #0]
    e7f4:	701a      	strb	r2, [r3, #0]
		 if ((addr & 0x80)!= 0)
    e7f6:	1dfb      	adds	r3, r7, #7
    e7f8:	781b      	ldrb	r3, [r3, #0]
    e7fa:	b25b      	sxtb	r3, r3
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	da09      	bge.n	e814 <SPIXInOut2+0x98>
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    e800:	1d3b      	adds	r3, r7, #4
    e802:	881b      	ldrh	r3, [r3, #0]
    e804:	3301      	adds	r3, #1
    e806:	b29b      	uxth	r3, r3
    e808:	481c      	ldr	r0, [pc, #112]	; (e87c <SPIXInOut2+0x100>)
    e80a:	491f      	ldr	r1, [pc, #124]	; (e888 <SPIXInOut2+0x10c>)
    e80c:	4a1f      	ldr	r2, [pc, #124]	; (e88c <SPIXInOut2+0x110>)
    e80e:	4c20      	ldr	r4, [pc, #128]	; (e890 <SPIXInOut2+0x114>)
    e810:	47a0      	blx	r4
    e812:	e027      	b.n	e864 <SPIXInOut2+0xe8>
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
    e814:	1d3b      	adds	r3, r7, #4
    e816:	881b      	ldrh	r3, [r3, #0]
    e818:	3301      	adds	r3, #1
    e81a:	b29b      	uxth	r3, r3
    e81c:	4817      	ldr	r0, [pc, #92]	; (e87c <SPIXInOut2+0x100>)
    e81e:	491a      	ldr	r1, [pc, #104]	; (e888 <SPIXInOut2+0x10c>)
    e820:	4a1a      	ldr	r2, [pc, #104]	; (e88c <SPIXInOut2+0x110>)
    e822:	4c1b      	ldr	r4, [pc, #108]	; (e890 <SPIXInOut2+0x114>)
    e824:	47a0      	blx	r4
			 ptr = buffer; 
    e826:	683b      	ldr	r3, [r7, #0]
    e828:	613b      	str	r3, [r7, #16]
			 for (i=0;i<size;i++)
    e82a:	1c3b      	adds	r3, r7, #0
    e82c:	3316      	adds	r3, #22
    e82e:	2200      	movs	r2, #0
    e830:	801a      	strh	r2, [r3, #0]
    e832:	e010      	b.n	e856 <SPIXInOut2+0xda>
			 {
				*ptr++ = rxBuffX[i+1];
    e834:	693b      	ldr	r3, [r7, #16]
    e836:	1c5a      	adds	r2, r3, #1
    e838:	613a      	str	r2, [r7, #16]
    e83a:	1c3a      	adds	r2, r7, #0
    e83c:	3216      	adds	r2, #22
    e83e:	8812      	ldrh	r2, [r2, #0]
    e840:	3201      	adds	r2, #1
    e842:	4912      	ldr	r1, [pc, #72]	; (e88c <SPIXInOut2+0x110>)
    e844:	5c8a      	ldrb	r2, [r1, r2]
    e846:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
			 ptr = buffer; 
			 for (i=0;i<size;i++)
    e848:	1c3b      	adds	r3, r7, #0
    e84a:	3316      	adds	r3, #22
    e84c:	881a      	ldrh	r2, [r3, #0]
    e84e:	1c3b      	adds	r3, r7, #0
    e850:	3316      	adds	r3, #22
    e852:	3201      	adds	r2, #1
    e854:	801a      	strh	r2, [r3, #0]
    e856:	1c3a      	adds	r2, r7, #0
    e858:	3216      	adds	r2, #22
    e85a:	1d3b      	adds	r3, r7, #4
    e85c:	8812      	ldrh	r2, [r2, #0]
    e85e:	881b      	ldrh	r3, [r3, #0]
    e860:	429a      	cmp	r2, r3
    e862:	d3e7      	bcc.n	e834 <SPIXInOut2+0xb8>
			 {
				*ptr++ = rxBuffX[i+1];
			 }
		 }
		 spi_select_slave(&spix_master_instance, &slavex, false);
    e864:	4a05      	ldr	r2, [pc, #20]	; (e87c <SPIXInOut2+0x100>)
    e866:	4b06      	ldr	r3, [pc, #24]	; (e880 <SPIXInOut2+0x104>)
    e868:	1c10      	adds	r0, r2, #0
    e86a:	1c19      	adds	r1, r3, #0
    e86c:	2200      	movs	r2, #0
    e86e:	4b05      	ldr	r3, [pc, #20]	; (e884 <SPIXInOut2+0x108>)
    e870:	4798      	blx	r3
	 } 
	 return success; 
    e872:	68fb      	ldr	r3, [r7, #12]
 }
    e874:	1c18      	adds	r0, r3, #0
    e876:	46bd      	mov	sp, r7
    e878:	b007      	add	sp, #28
    e87a:	bd90      	pop	{r4, r7, pc}
    e87c:	20003688 	.word	0x20003688
    e880:	200035ec 	.word	0x200035ec
    e884:	00013311 	.word	0x00013311
    e888:	200035f0 	.word	0x200035f0
    e88c:	20003554 	.word	0x20003554
    e890:	000133ed 	.word	0x000133ed

0000e894 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e894:	b580      	push	{r7, lr}
    e896:	b084      	sub	sp, #16
    e898:	af00      	add	r7, sp, #0
    e89a:	1c02      	adds	r2, r0, #0
    e89c:	1dfb      	adds	r3, r7, #7
    e89e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e8a0:	1c3b      	adds	r3, r7, #0
    e8a2:	330f      	adds	r3, #15
    e8a4:	1dfa      	adds	r2, r7, #7
    e8a6:	7812      	ldrb	r2, [r2, #0]
    e8a8:	09d2      	lsrs	r2, r2, #7
    e8aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e8ac:	1c3b      	adds	r3, r7, #0
    e8ae:	330e      	adds	r3, #14
    e8b0:	1dfa      	adds	r2, r7, #7
    e8b2:	7812      	ldrb	r2, [r2, #0]
    e8b4:	0952      	lsrs	r2, r2, #5
    e8b6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e8b8:	4b0d      	ldr	r3, [pc, #52]	; (e8f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e8ba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    e8bc:	1c3b      	adds	r3, r7, #0
    e8be:	330f      	adds	r3, #15
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d10e      	bne.n	e8e4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    e8c6:	1c3b      	adds	r3, r7, #0
    e8c8:	330f      	adds	r3, #15
    e8ca:	781b      	ldrb	r3, [r3, #0]
    e8cc:	009b      	lsls	r3, r3, #2
    e8ce:	2210      	movs	r2, #16
    e8d0:	19d2      	adds	r2, r2, r7
    e8d2:	18d3      	adds	r3, r2, r3
    e8d4:	3b08      	subs	r3, #8
    e8d6:	681a      	ldr	r2, [r3, #0]
    e8d8:	1c3b      	adds	r3, r7, #0
    e8da:	330e      	adds	r3, #14
    e8dc:	781b      	ldrb	r3, [r3, #0]
    e8de:	01db      	lsls	r3, r3, #7
    e8e0:	18d3      	adds	r3, r2, r3
    e8e2:	e000      	b.n	e8e6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    e8e4:	2300      	movs	r3, #0
	}
}
    e8e6:	1c18      	adds	r0, r3, #0
    e8e8:	46bd      	mov	sp, r7
    e8ea:	b004      	add	sp, #16
    e8ec:	bd80      	pop	{r7, pc}
    e8ee:	46c0      	nop			; (mov r8, r8)
    e8f0:	41004400 	.word	0x41004400

0000e8f4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    e8f4:	b580      	push	{r7, lr}
    e8f6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    e8f8:	4b03      	ldr	r3, [pc, #12]	; (e908 <system_interrupt_enable_global+0x14>)
    e8fa:	2201      	movs	r2, #1
    e8fc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    e8fe:	f3bf 8f5f 	dmb	sy
    e902:	b662      	cpsie	i
}
    e904:	46bd      	mov	sp, r7
    e906:	bd80      	pop	{r7, pc}
    e908:	20000044 	.word	0x20000044

0000e90c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    e910:	b672      	cpsid	i
    e912:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e916:	4b02      	ldr	r3, [pc, #8]	; (e920 <system_interrupt_disable_global+0x14>)
    e918:	2200      	movs	r2, #0
    e91a:	701a      	strb	r2, [r3, #0]
}
    e91c:	46bd      	mov	sp, r7
    e91e:	bd80      	pop	{r7, pc}
    e920:	20000044 	.word	0x20000044

0000e924 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    e924:	b580      	push	{r7, lr}
    e926:	b082      	sub	sp, #8
    e928:	af00      	add	r7, sp, #0
    e92a:	1c02      	adds	r2, r0, #0
    e92c:	1dfb      	adds	r3, r7, #7
    e92e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e930:	4b06      	ldr	r3, [pc, #24]	; (e94c <system_interrupt_enable+0x28>)
    e932:	1dfa      	adds	r2, r7, #7
    e934:	7812      	ldrb	r2, [r2, #0]
    e936:	1c11      	adds	r1, r2, #0
    e938:	221f      	movs	r2, #31
    e93a:	400a      	ands	r2, r1
    e93c:	2101      	movs	r1, #1
    e93e:	1c08      	adds	r0, r1, #0
    e940:	4090      	lsls	r0, r2
    e942:	1c02      	adds	r2, r0, #0
    e944:	601a      	str	r2, [r3, #0]
}
    e946:	46bd      	mov	sp, r7
    e948:	b002      	add	sp, #8
    e94a:	bd80      	pop	{r7, pc}
    e94c:	e000e100 	.word	0xe000e100

0000e950 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e950:	b580      	push	{r7, lr}
    e952:	b082      	sub	sp, #8
    e954:	af00      	add	r7, sp, #0
    e956:	1c02      	adds	r2, r0, #0
    e958:	1dfb      	adds	r3, r7, #7
    e95a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e95c:	1dfb      	adds	r3, r7, #7
    e95e:	781b      	ldrb	r3, [r3, #0]
    e960:	1c18      	adds	r0, r3, #0
    e962:	4b03      	ldr	r3, [pc, #12]	; (e970 <port_get_group_from_gpio_pin+0x20>)
    e964:	4798      	blx	r3
    e966:	1c03      	adds	r3, r0, #0
}
    e968:	1c18      	adds	r0, r3, #0
    e96a:	46bd      	mov	sp, r7
    e96c:	b002      	add	sp, #8
    e96e:	bd80      	pop	{r7, pc}
    e970:	0000e895 	.word	0x0000e895

0000e974 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    e974:	b580      	push	{r7, lr}
    e976:	b082      	sub	sp, #8
    e978:	af00      	add	r7, sp, #0
    e97a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    e97c:	687b      	ldr	r3, [r7, #4]
    e97e:	2200      	movs	r2, #0
    e980:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e982:	687b      	ldr	r3, [r7, #4]
    e984:	2201      	movs	r2, #1
    e986:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	2200      	movs	r2, #0
    e98c:	709a      	strb	r2, [r3, #2]
}
    e98e:	46bd      	mov	sp, r7
    e990:	b002      	add	sp, #8
    e992:	bd80      	pop	{r7, pc}

0000e994 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    e994:	b580      	push	{r7, lr}
    e996:	b084      	sub	sp, #16
    e998:	af00      	add	r7, sp, #0
    e99a:	1c0a      	adds	r2, r1, #0
    e99c:	1dfb      	adds	r3, r7, #7
    e99e:	1c01      	adds	r1, r0, #0
    e9a0:	7019      	strb	r1, [r3, #0]
    e9a2:	1dbb      	adds	r3, r7, #6
    e9a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e9a6:	1dfb      	adds	r3, r7, #7
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	1c18      	adds	r0, r3, #0
    e9ac:	4b0d      	ldr	r3, [pc, #52]	; (e9e4 <port_pin_set_output_level+0x50>)
    e9ae:	4798      	blx	r3
    e9b0:	1c03      	adds	r3, r0, #0
    e9b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e9b4:	1dfb      	adds	r3, r7, #7
    e9b6:	781a      	ldrb	r2, [r3, #0]
    e9b8:	231f      	movs	r3, #31
    e9ba:	4013      	ands	r3, r2
    e9bc:	2201      	movs	r2, #1
    e9be:	1c11      	adds	r1, r2, #0
    e9c0:	4099      	lsls	r1, r3
    e9c2:	1c0b      	adds	r3, r1, #0
    e9c4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    e9c6:	1dbb      	adds	r3, r7, #6
    e9c8:	781b      	ldrb	r3, [r3, #0]
    e9ca:	2b00      	cmp	r3, #0
    e9cc:	d003      	beq.n	e9d6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    e9ce:	68fb      	ldr	r3, [r7, #12]
    e9d0:	68ba      	ldr	r2, [r7, #8]
    e9d2:	619a      	str	r2, [r3, #24]
    e9d4:	e002      	b.n	e9dc <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    e9d6:	68fb      	ldr	r3, [r7, #12]
    e9d8:	68ba      	ldr	r2, [r7, #8]
    e9da:	615a      	str	r2, [r3, #20]
	}
}
    e9dc:	46bd      	mov	sp, r7
    e9de:	b004      	add	sp, #16
    e9e0:	bd80      	pop	{r7, pc}
    e9e2:	46c0      	nop			; (mov r8, r8)
    e9e4:	0000e951 	.word	0x0000e951

0000e9e8 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    e9e8:	b580      	push	{r7, lr}
    e9ea:	b084      	sub	sp, #16
    e9ec:	af00      	add	r7, sp, #0
    e9ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	681b      	ldr	r3, [r3, #0]
    e9f4:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    e9f6:	68fb      	ldr	r3, [r7, #12]
    e9f8:	7bdb      	ldrb	r3, [r3, #15]
    e9fa:	b2db      	uxtb	r3, r3
    e9fc:	1c1a      	adds	r2, r3, #0
    e9fe:	2380      	movs	r3, #128	; 0x80
    ea00:	4013      	ands	r3, r2
    ea02:	1e5a      	subs	r2, r3, #1
    ea04:	4193      	sbcs	r3, r2
    ea06:	b2db      	uxtb	r3, r3
}
    ea08:	1c18      	adds	r0, r3, #0
    ea0a:	46bd      	mov	sp, r7
    ea0c:	b004      	add	sp, #16
    ea0e:	bd80      	pop	{r7, pc}

0000ea10 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b082      	sub	sp, #8
    ea14:	af00      	add	r7, sp, #0
    ea16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    ea18:	687b      	ldr	r3, [r7, #4]
    ea1a:	2200      	movs	r2, #0
    ea1c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    ea1e:	687b      	ldr	r3, [r7, #4]
    ea20:	2200      	movs	r2, #0
    ea22:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    ea24:	687b      	ldr	r3, [r7, #4]
    ea26:	2200      	movs	r2, #0
    ea28:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    ea2a:	687b      	ldr	r3, [r7, #4]
    ea2c:	2200      	movs	r2, #0
    ea2e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    ea30:	687b      	ldr	r3, [r7, #4]
    ea32:	2200      	movs	r2, #0
    ea34:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    ea36:	687b      	ldr	r3, [r7, #4]
    ea38:	2200      	movs	r2, #0
    ea3a:	705a      	strb	r2, [r3, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    ea3c:	687b      	ldr	r3, [r7, #4]
    ea3e:	2200      	movs	r2, #0
    ea40:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    ea42:	687b      	ldr	r3, [r7, #4]
    ea44:	2200      	movs	r2, #0
    ea46:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	2200      	movs	r2, #0
    ea4c:	731a      	strb	r2, [r3, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    ea4e:	687b      	ldr	r3, [r7, #4]
    ea50:	2200      	movs	r2, #0
    ea52:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    ea54:	687b      	ldr	r3, [r7, #4]
    ea56:	2200      	movs	r2, #0
    ea58:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    ea5a:	687b      	ldr	r3, [r7, #4]
    ea5c:	2200      	movs	r2, #0
    ea5e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	2200      	movs	r2, #0
    ea64:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    ea66:	687b      	ldr	r3, [r7, #4]
    ea68:	2200      	movs	r2, #0
    ea6a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    ea6c:	687b      	ldr	r3, [r7, #4]
    ea6e:	2200      	movs	r2, #0
    ea70:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	2200      	movs	r2, #0
    ea76:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    ea78:	687b      	ldr	r3, [r7, #4]
    ea7a:	2200      	movs	r2, #0
    ea7c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    ea7e:	687b      	ldr	r3, [r7, #4]
    ea80:	2200      	movs	r2, #0
    ea82:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    ea84:	687b      	ldr	r3, [r7, #4]
    ea86:	2200      	movs	r2, #0
    ea88:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    ea8a:	687b      	ldr	r3, [r7, #4]
    ea8c:	2200      	movs	r2, #0
    ea8e:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    ea90:	46bd      	mov	sp, r7
    ea92:	b002      	add	sp, #8
    ea94:	bd80      	pop	{r7, pc}
    ea96:	46c0      	nop			; (mov r8, r8)

0000ea98 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    ea98:	b580      	push	{r7, lr}
    ea9a:	b084      	sub	sp, #16
    ea9c:	af00      	add	r7, sp, #0
    ea9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    eaa0:	687b      	ldr	r3, [r7, #4]
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    eaa6:	46c0      	nop			; (mov r8, r8)
    eaa8:	687b      	ldr	r3, [r7, #4]
    eaaa:	1c18      	adds	r0, r3, #0
    eaac:	4b07      	ldr	r3, [pc, #28]	; (eacc <tc_enable+0x34>)
    eaae:	4798      	blx	r3
    eab0:	1c03      	adds	r3, r0, #0
    eab2:	2b00      	cmp	r3, #0
    eab4:	d1f8      	bne.n	eaa8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    eab6:	68fb      	ldr	r3, [r7, #12]
    eab8:	881b      	ldrh	r3, [r3, #0]
    eaba:	b29b      	uxth	r3, r3
    eabc:	2202      	movs	r2, #2
    eabe:	4313      	orrs	r3, r2
    eac0:	b29a      	uxth	r2, r3
    eac2:	68fb      	ldr	r3, [r7, #12]
    eac4:	801a      	strh	r2, [r3, #0]
}
    eac6:	46bd      	mov	sp, r7
    eac8:	b004      	add	sp, #16
    eaca:	bd80      	pop	{r7, pc}
    eacc:	0000e9e9 	.word	0x0000e9e9

0000ead0 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    ead0:	b580      	push	{r7, lr}
    ead2:	b082      	sub	sp, #8
    ead4:	af00      	add	r7, sp, #0
    ead6:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ead8:	4a04      	ldr	r2, [pc, #16]	; (eaec <_tc_interrupt_get_interrupt_vector+0x1c>)
    eada:	687b      	ldr	r3, [r7, #4]
    eadc:	18d3      	adds	r3, r2, r3
    eade:	781b      	ldrb	r3, [r3, #0]
    eae0:	b2db      	uxtb	r3, r3
    eae2:	b25b      	sxtb	r3, r3
}
    eae4:	1c18      	adds	r0, r3, #0
    eae6:	46bd      	mov	sp, r7
    eae8:	b002      	add	sp, #8
    eaea:	bd80      	pop	{r7, pc}
    eaec:	20000004 	.word	0x20000004

0000eaf0 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b082      	sub	sp, #8
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	6078      	str	r0, [r7, #4]
    eaf8:	1c0a      	adds	r2, r1, #0
    eafa:	1cfb      	adds	r3, r7, #3
    eafc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    eafe:	687b      	ldr	r3, [r7, #4]
    eb00:	681b      	ldr	r3, [r3, #0]
    eb02:	1c18      	adds	r0, r3, #0
    eb04:	4b22      	ldr	r3, [pc, #136]	; (eb90 <tc_enable_callback+0xa0>)
    eb06:	4798      	blx	r3
    eb08:	1c03      	adds	r3, r0, #0
    eb0a:	1c18      	adds	r0, r3, #0
    eb0c:	4b21      	ldr	r3, [pc, #132]	; (eb94 <tc_enable_callback+0xa4>)
    eb0e:	4798      	blx	r3
    eb10:	1c03      	adds	r3, r0, #0
    eb12:	1c18      	adds	r0, r3, #0
    eb14:	4b20      	ldr	r3, [pc, #128]	; (eb98 <tc_enable_callback+0xa8>)
    eb16:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    eb18:	1cfb      	adds	r3, r7, #3
    eb1a:	781b      	ldrb	r3, [r3, #0]
    eb1c:	2b02      	cmp	r3, #2
    eb1e:	d10b      	bne.n	eb38 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    eb20:	687b      	ldr	r3, [r7, #4]
    eb22:	7e5b      	ldrb	r3, [r3, #25]
    eb24:	2210      	movs	r2, #16
    eb26:	4313      	orrs	r3, r2
    eb28:	b2da      	uxtb	r2, r3
    eb2a:	687b      	ldr	r3, [r7, #4]
    eb2c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    eb2e:	687b      	ldr	r3, [r7, #4]
    eb30:	681b      	ldr	r3, [r3, #0]
    eb32:	2210      	movs	r2, #16
    eb34:	735a      	strb	r2, [r3, #13]
    eb36:	e028      	b.n	eb8a <tc_enable_callback+0x9a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    eb38:	1cfb      	adds	r3, r7, #3
    eb3a:	781b      	ldrb	r3, [r3, #0]
    eb3c:	2b03      	cmp	r3, #3
    eb3e:	d10b      	bne.n	eb58 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    eb40:	687b      	ldr	r3, [r7, #4]
    eb42:	7e5b      	ldrb	r3, [r3, #25]
    eb44:	2220      	movs	r2, #32
    eb46:	4313      	orrs	r3, r2
    eb48:	b2da      	uxtb	r2, r3
    eb4a:	687b      	ldr	r3, [r7, #4]
    eb4c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	681b      	ldr	r3, [r3, #0]
    eb52:	2220      	movs	r2, #32
    eb54:	735a      	strb	r2, [r3, #13]
    eb56:	e018      	b.n	eb8a <tc_enable_callback+0x9a>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    eb58:	687b      	ldr	r3, [r7, #4]
    eb5a:	7e5b      	ldrb	r3, [r3, #25]
    eb5c:	b2da      	uxtb	r2, r3
    eb5e:	1cfb      	adds	r3, r7, #3
    eb60:	781b      	ldrb	r3, [r3, #0]
    eb62:	2101      	movs	r1, #1
    eb64:	1c08      	adds	r0, r1, #0
    eb66:	4098      	lsls	r0, r3
    eb68:	1c03      	adds	r3, r0, #0
    eb6a:	b2db      	uxtb	r3, r3
    eb6c:	4313      	orrs	r3, r2
    eb6e:	b2db      	uxtb	r3, r3
    eb70:	b2da      	uxtb	r2, r3
    eb72:	687b      	ldr	r3, [r7, #4]
    eb74:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    eb76:	687b      	ldr	r3, [r7, #4]
    eb78:	681b      	ldr	r3, [r3, #0]
    eb7a:	1cfa      	adds	r2, r7, #3
    eb7c:	7812      	ldrb	r2, [r2, #0]
    eb7e:	2101      	movs	r1, #1
    eb80:	1c08      	adds	r0, r1, #0
    eb82:	4090      	lsls	r0, r2
    eb84:	1c02      	adds	r2, r0, #0
    eb86:	b2d2      	uxtb	r2, r2
    eb88:	735a      	strb	r2, [r3, #13]
	}
}
    eb8a:	46bd      	mov	sp, r7
    eb8c:	b002      	add	sp, #8
    eb8e:	bd80      	pop	{r7, pc}
    eb90:	00005281 	.word	0x00005281
    eb94:	0000ead1 	.word	0x0000ead1
    eb98:	0000e925 	.word	0x0000e925

0000eb9c <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    eb9c:	b580      	push	{r7, lr}
    eb9e:	b082      	sub	sp, #8
    eba0:	af00      	add	r7, sp, #0
    eba2:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    eba4:	687b      	ldr	r3, [r7, #4]
    eba6:	2200      	movs	r2, #0
    eba8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = false;
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	2200      	movs	r2, #0
    ebae:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ebb0:	4b09      	ldr	r3, [pc, #36]	; (ebd8 <nvm_get_config_defaults+0x3c>)
    ebb2:	685b      	ldr	r3, [r3, #4]
    ebb4:	085b      	lsrs	r3, r3, #1
    ebb6:	1c1a      	adds	r2, r3, #0
    ebb8:	230f      	movs	r3, #15
    ebba:	4013      	ands	r3, r2
    ebbc:	b2db      	uxtb	r3, r3
    ebbe:	1c1a      	adds	r2, r3, #0
    ebc0:	687b      	ldr	r3, [r7, #4]
    ebc2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	2200      	movs	r2, #0
    ebc8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ebca:	687b      	ldr	r3, [r7, #4]
    ebcc:	2200      	movs	r2, #0
    ebce:	711a      	strb	r2, [r3, #4]
}
    ebd0:	46bd      	mov	sp, r7
    ebd2:	b002      	add	sp, #8
    ebd4:	bd80      	pop	{r7, pc}
    ebd6:	46c0      	nop			; (mov r8, r8)
    ebd8:	41004000 	.word	0x41004000

0000ebdc <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
    ebdc:	b580      	push	{r7, lr}
    ebde:	b082      	sub	sp, #8
    ebe0:	af00      	add	r7, sp, #0
    ebe2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    ebe4:	687b      	ldr	r3, [r7, #4]
    ebe6:	2200      	movs	r2, #0
    ebe8:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    ebea:	687b      	ldr	r3, [r7, #4]
    ebec:	2201      	movs	r2, #1
    ebee:	705a      	strb	r2, [r3, #1]
#if !(SAML21)
	config->clock_source         = GCLK_GENERATOR_4;
    ebf0:	687b      	ldr	r3, [r7, #4]
    ebf2:	2204      	movs	r2, #4
    ebf4:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    ebf6:	687b      	ldr	r3, [r7, #4]
    ebf8:	220c      	movs	r2, #12
    ebfa:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    ebfc:	687b      	ldr	r3, [r7, #4]
    ebfe:	2200      	movs	r2, #0
    ec00:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    ec02:	687b      	ldr	r3, [r7, #4]
    ec04:	2200      	movs	r2, #0
    ec06:	715a      	strb	r2, [r3, #5]
}
    ec08:	46bd      	mov	sp, r7
    ec0a:	b002      	add	sp, #8
    ec0c:	bd80      	pop	{r7, pc}
    ec0e:	46c0      	nop			; (mov r8, r8)

0000ec10 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    ec10:	b580      	push	{r7, lr}
    ec12:	b082      	sub	sp, #8
    ec14:	af00      	add	r7, sp, #0
    ec16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    ec18:	687b      	ldr	r3, [r7, #4]
    ec1a:	2200      	movs	r2, #0
    ec1c:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    ec1e:	687b      	ldr	r3, [r7, #4]
    ec20:	2200      	movs	r2, #0
    ec22:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    ec24:	687b      	ldr	r3, [r7, #4]
    ec26:	2208      	movs	r2, #8
    ec28:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    ec2a:	687b      	ldr	r3, [r7, #4]
    ec2c:	2227      	movs	r2, #39	; 0x27
    ec2e:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	2201      	movs	r2, #1
    ec34:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    ec36:	687b      	ldr	r3, [r7, #4]
    ec38:	2201      	movs	r2, #1
    ec3a:	71da      	strb	r2, [r3, #7]
}
    ec3c:	46bd      	mov	sp, r7
    ec3e:	b002      	add	sp, #8
    ec40:	bd80      	pop	{r7, pc}
    ec42:	46c0      	nop			; (mov r8, r8)

0000ec44 <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    ec44:	b580      	push	{r7, lr}
    ec46:	b082      	sub	sp, #8
    ec48:	af00      	add	r7, sp, #0
    ec4a:	1c02      	adds	r2, r0, #0
    ec4c:	1dfb      	adds	r3, r7, #7
    ec4e:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    ec50:	1dfb      	adds	r3, r7, #7
    ec52:	781b      	ldrb	r3, [r3, #0]
    ec54:	2b00      	cmp	r3, #0
    ec56:	d108      	bne.n	ec6a <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    ec58:	4b06      	ldr	r3, [pc, #24]	; (ec74 <bod_enable+0x30>)
    ec5a:	4a06      	ldr	r2, [pc, #24]	; (ec74 <bod_enable+0x30>)
    ec5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ec5e:	2102      	movs	r1, #2
    ec60:	430a      	orrs	r2, r1
    ec62:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    ec64:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    ec66:	2300      	movs	r3, #0
    ec68:	e000      	b.n	ec6c <bod_enable+0x28>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    ec6a:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    ec6c:	1c18      	adds	r0, r3, #0
    ec6e:	46bd      	mov	sp, r7
    ec70:	b002      	add	sp, #8
    ec72:	bd80      	pop	{r7, pc}
    ec74:	40000800 	.word	0x40000800

0000ec78 <EmptyTask>:
void CommSupTask(void);
void EmptyTask(void);


void EmptyTask(void)
{
    ec78:	b580      	push	{r7, lr}
    ec7a:	af00      	add	r7, sp, #0
	
}
    ec7c:	46bd      	mov	sp, r7
    ec7e:	bd80      	pop	{r7, pc}

0000ec80 <configure_bod33>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
static void configure_bod33(void)
{
    ec80:	b580      	push	{r7, lr}
    ec82:	b082      	sub	sp, #8
    ec84:	af00      	add	r7, sp, #0
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    ec86:	1c3b      	adds	r3, r7, #0
    ec88:	1c18      	adds	r0, r3, #0
    ec8a:	4b06      	ldr	r3, [pc, #24]	; (eca4 <configure_bod33+0x24>)
    ec8c:	4798      	blx	r3
	bod_set_config(BOD_BOD33, &config_bod33);
    ec8e:	1c3b      	adds	r3, r7, #0
    ec90:	2000      	movs	r0, #0
    ec92:	1c19      	adds	r1, r3, #0
    ec94:	4b04      	ldr	r3, [pc, #16]	; (eca8 <configure_bod33+0x28>)
    ec96:	4798      	blx	r3
	bod_enable(BOD_BOD33);
    ec98:	2000      	movs	r0, #0
    ec9a:	4b04      	ldr	r3, [pc, #16]	; (ecac <configure_bod33+0x2c>)
    ec9c:	4798      	blx	r3
}
    ec9e:	46bd      	mov	sp, r7
    eca0:	b002      	add	sp, #8
    eca2:	bd80      	pop	{r7, pc}
    eca4:	0000ec11 	.word	0x0000ec11
    eca8:	00003d19 	.word	0x00003d19
    ecac:	0000ec45 	.word	0x0000ec45

0000ecb0 <configure_wdt>:
//	else {
//		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
//	}
//==============================================================================
void configure_wdt(void)
{
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b082      	sub	sp, #8
    ecb4:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    ecb6:	1c3b      	adds	r3, r7, #0
    ecb8:	1c18      	adds	r0, r3, #0
    ecba:	4b09      	ldr	r3, [pc, #36]	; (ece0 <configure_wdt+0x30>)
    ecbc:	4798      	blx	r3
	 
	config_wdt.always_on      = false;
    ecbe:	1c3b      	adds	r3, r7, #0
    ecc0:	2200      	movs	r2, #0
    ecc2:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    ecc4:	1c3b      	adds	r3, r7, #0
    ecc6:	2204      	movs	r2, #4
    ecc8:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    ecca:	1c3b      	adds	r3, r7, #0
    eccc:	220c      	movs	r2, #12
    ecce:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    ecd0:	1c3b      	adds	r3, r7, #0
    ecd2:	1c18      	adds	r0, r3, #0
    ecd4:	4b03      	ldr	r3, [pc, #12]	; (ece4 <configure_wdt+0x34>)
    ecd6:	4798      	blx	r3
 
}
    ecd8:	46bd      	mov	sp, r7
    ecda:	b002      	add	sp, #8
    ecdc:	bd80      	pop	{r7, pc}
    ecde:	46c0      	nop			; (mov r8, r8)
    ece0:	0000ebdd 	.word	0x0000ebdd
    ece4:	000059d1 	.word	0x000059d1

0000ece8 <deconfigure_wdt>:
 

void deconfigure_wdt(void)
{
    ece8:	b580      	push	{r7, lr}
    ecea:	b082      	sub	sp, #8
    ecec:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    ecee:	1c3b      	adds	r3, r7, #0
    ecf0:	1c18      	adds	r0, r3, #0
    ecf2:	4b0a      	ldr	r3, [pc, #40]	; (ed1c <deconfigure_wdt+0x34>)
    ecf4:	4798      	blx	r3
	config_wdt.enable               = false;
    ecf6:	1c3b      	adds	r3, r7, #0
    ecf8:	2200      	movs	r2, #0
    ecfa:	705a      	strb	r2, [r3, #1]
	config_wdt.always_on      = false;
    ecfc:	1c3b      	adds	r3, r7, #0
    ecfe:	2200      	movs	r2, #0
    ed00:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    ed02:	1c3b      	adds	r3, r7, #0
    ed04:	2204      	movs	r2, #4
    ed06:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    ed08:	1c3b      	adds	r3, r7, #0
    ed0a:	220c      	movs	r2, #12
    ed0c:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    ed0e:	1c3b      	adds	r3, r7, #0
    ed10:	1c18      	adds	r0, r3, #0
    ed12:	4b03      	ldr	r3, [pc, #12]	; (ed20 <deconfigure_wdt+0x38>)
    ed14:	4798      	blx	r3
 
}
    ed16:	46bd      	mov	sp, r7
    ed18:	b002      	add	sp, #8
    ed1a:	bd80      	pop	{r7, pc}
    ed1c:	0000ebdd 	.word	0x0000ebdd
    ed20:	000059d1 	.word	0x000059d1

0000ed24 <HardDelay>:
uint8_t motorTest; 	
uint8_t message;

uint8_t testI2C;
void HardDelay(void)
{
    ed24:	b580      	push	{r7, lr}
    ed26:	b082      	sub	sp, #8
    ed28:	af00      	add	r7, sp, #0
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    ed2a:	2300      	movs	r3, #0
    ed2c:	607b      	str	r3, [r7, #4]
    ed2e:	e008      	b.n	ed42 <HardDelay+0x1e>
	{
		testI2C++;
    ed30:	4b07      	ldr	r3, [pc, #28]	; (ed50 <HardDelay+0x2c>)
    ed32:	781b      	ldrb	r3, [r3, #0]
    ed34:	3301      	adds	r3, #1
    ed36:	b2da      	uxtb	r2, r3
    ed38:	4b05      	ldr	r3, [pc, #20]	; (ed50 <HardDelay+0x2c>)
    ed3a:	701a      	strb	r2, [r3, #0]

uint8_t testI2C;
void HardDelay(void)
{
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    ed3c:	687b      	ldr	r3, [r7, #4]
    ed3e:	3301      	adds	r3, #1
    ed40:	607b      	str	r3, [r7, #4]
    ed42:	687b      	ldr	r3, [r7, #4]
    ed44:	2b7f      	cmp	r3, #127	; 0x7f
    ed46:	d9f3      	bls.n	ed30 <HardDelay+0xc>
	{
		testI2C++;
	}
	
}
    ed48:	46bd      	mov	sp, r7
    ed4a:	b002      	add	sp, #8
    ed4c:	bd80      	pop	{r7, pc}
    ed4e:	46c0      	nop			; (mov r8, r8)
    ed50:	200036c9 	.word	0x200036c9

0000ed54 <main>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
int main(void)
{
    ed54:	b590      	push	{r4, r7, lr}
    ed56:	b085      	sub	sp, #20
    ed58:	af00      	add	r7, sp, #0
	uint8_t button,i; 
	struct nvm_config config;
	enum status_code error_code; 		
	struct port_config pin_conf;
	
	system_interrupt_disable_global();
    ed5a:	4be3      	ldr	r3, [pc, #908]	; (f0e8 <main+0x394>)
    ed5c:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    ed5e:	1d3b      	adds	r3, r7, #4
    ed60:	1c18      	adds	r0, r3, #0
    ed62:	4be2      	ldr	r3, [pc, #904]	; (f0ec <main+0x398>)
    ed64:	4798      	blx	r3
	//-------------------------------
	// Initialize the SAM system 
    //-------------------------------
#if BRAKEBOARD //CLK_FIX
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ed66:	1d3b      	adds	r3, r7, #4
    ed68:	2200      	movs	r2, #0
    ed6a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    ed6c:	1d3b      	adds	r3, r7, #4
    ed6e:	2201      	movs	r2, #1
    ed70:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_SETUP, &pin_conf);
    ed72:	1d3b      	adds	r3, r7, #4
    ed74:	200f      	movs	r0, #15
    ed76:	1c19      	adds	r1, r3, #0
    ed78:	4bdd      	ldr	r3, [pc, #884]	; (f0f0 <main+0x39c>)
    ed7a:	4798      	blx	r3
	port_pin_set_config(BUTTON_POWER, &pin_conf);
    ed7c:	1d3b      	adds	r3, r7, #4
    ed7e:	200e      	movs	r0, #14
    ed80:	1c19      	adds	r1, r3, #0
    ed82:	4bdb      	ldr	r3, [pc, #876]	; (f0f0 <main+0x39c>)
    ed84:	4798      	blx	r3
#endif	

    system_init();	
    ed86:	4bdb      	ldr	r3, [pc, #876]	; (f0f4 <main+0x3a0>)
    ed88:	4798      	blx	r3

	configure_bod33();	
    ed8a:	4bdb      	ldr	r3, [pc, #876]	; (f0f8 <main+0x3a4>)
    ed8c:	4798      	blx	r3
	//-------------------------------
	// initialize the status data before 
	// initializing any of the interfaces. 
	//------------------------------
	AppStatusInitialization(); 
    ed8e:	4bdb      	ldr	r3, [pc, #876]	; (f0fc <main+0x3a8>)
    ed90:	4798      	blx	r3
#if (TEST_BRAKE_SUP | TEST_TIMER)
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;  //CLK_FIX
	port_pin_set_config(PIN_PB22, &pin_conf);   //CLK_FIX
	port_pin_set_output_level(PIN_PB22, FALSE); //CLK_FIX
#endif		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed92:	1d3b      	adds	r3, r7, #4
    ed94:	2201      	movs	r2, #1
    ed96:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    ed98:	1d3b      	adds	r3, r7, #4
    ed9a:	200c      	movs	r0, #12
    ed9c:	1c19      	adds	r1, r3, #0
    ed9e:	4bd4      	ldr	r3, [pc, #848]	; (f0f0 <main+0x39c>)
    eda0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    eda2:	200c      	movs	r0, #12
    eda4:	2100      	movs	r1, #0
    eda6:	4bd6      	ldr	r3, [pc, #856]	; (f100 <main+0x3ac>)
    eda8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    edaa:	1d3b      	adds	r3, r7, #4
    edac:	2201      	movs	r2, #1
    edae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    edb0:	1d3b      	adds	r3, r7, #4
    edb2:	200d      	movs	r0, #13
    edb4:	1c19      	adds	r1, r3, #0
    edb6:	4bce      	ldr	r3, [pc, #824]	; (f0f0 <main+0x39c>)
    edb8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    edba:	200d      	movs	r0, #13
    edbc:	2100      	movs	r1, #0
    edbe:	4bd0      	ldr	r3, [pc, #832]	; (f100 <main+0x3ac>)
    edc0:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    edc2:	1d3b      	adds	r3, r7, #4
    edc4:	2201      	movs	r2, #1
    edc6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    edc8:	1d3b      	adds	r3, r7, #4
    edca:	200d      	movs	r0, #13
    edcc:	1c19      	adds	r1, r3, #0
    edce:	4bc8      	ldr	r3, [pc, #800]	; (f0f0 <main+0x39c>)
    edd0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    edd2:	200d      	movs	r0, #13
    edd4:	2101      	movs	r1, #1
    edd6:	4bca      	ldr	r3, [pc, #808]	; (f100 <main+0x3ac>)
    edd8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    edda:	1d3b      	adds	r3, r7, #4
    eddc:	2201      	movs	r2, #1
    edde:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    ede0:	1d3b      	adds	r3, r7, #4
    ede2:	200c      	movs	r0, #12
    ede4:	1c19      	adds	r1, r3, #0
    ede6:	4bc2      	ldr	r3, [pc, #776]	; (f0f0 <main+0x39c>)
    ede8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    edea:	200c      	movs	r0, #12
    edec:	2101      	movs	r1, #1
    edee:	4bc4      	ldr	r3, [pc, #784]	; (f100 <main+0x3ac>)
    edf0:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    edf2:	1c3b      	adds	r3, r7, #0
    edf4:	330f      	adds	r3, #15
    edf6:	2200      	movs	r2, #0
    edf8:	701a      	strb	r2, [r3, #0]
    edfa:	e022      	b.n	ee42 <main+0xee>
	{
		HardDelay();
    edfc:	4bc1      	ldr	r3, [pc, #772]	; (f104 <main+0x3b0>)
    edfe:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ee00:	1d3b      	adds	r3, r7, #4
    ee02:	2201      	movs	r2, #1
    ee04:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    ee06:	1d3b      	adds	r3, r7, #4
    ee08:	200d      	movs	r0, #13
    ee0a:	1c19      	adds	r1, r3, #0
    ee0c:	4bb8      	ldr	r3, [pc, #736]	; (f0f0 <main+0x39c>)
    ee0e:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    ee10:	200d      	movs	r0, #13
    ee12:	2100      	movs	r1, #0
    ee14:	4bba      	ldr	r3, [pc, #744]	; (f100 <main+0x3ac>)
    ee16:	4798      	blx	r3
		HardDelay();
    ee18:	4bba      	ldr	r3, [pc, #744]	; (f104 <main+0x3b0>)
    ee1a:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ee1c:	1d3b      	adds	r3, r7, #4
    ee1e:	2201      	movs	r2, #1
    ee20:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    ee22:	1d3b      	adds	r3, r7, #4
    ee24:	200d      	movs	r0, #13
    ee26:	1c19      	adds	r1, r3, #0
    ee28:	4bb1      	ldr	r3, [pc, #708]	; (f0f0 <main+0x39c>)
    ee2a:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    ee2c:	200d      	movs	r0, #13
    ee2e:	2101      	movs	r1, #1
    ee30:	4bb3      	ldr	r3, [pc, #716]	; (f100 <main+0x3ac>)
    ee32:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    ee34:	1c3b      	adds	r3, r7, #0
    ee36:	330f      	adds	r3, #15
    ee38:	781a      	ldrb	r2, [r3, #0]
    ee3a:	1c3b      	adds	r3, r7, #0
    ee3c:	330f      	adds	r3, #15
    ee3e:	3201      	adds	r2, #1
    ee40:	701a      	strb	r2, [r3, #0]
    ee42:	1c3b      	adds	r3, r7, #0
    ee44:	330f      	adds	r3, #15
    ee46:	781b      	ldrb	r3, [r3, #0]
    ee48:	2b0f      	cmp	r3, #15
    ee4a:	d9d7      	bls.n	edfc <main+0xa8>
	}


	//-------LEDS off
	//  
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ee4c:	1d3b      	adds	r3, r7, #4
    ee4e:	2201      	movs	r2, #1
    ee50:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BIGREEN_PIN, &pin_conf);
    ee52:	1d3b      	adds	r3, r7, #4
    ee54:	202e      	movs	r0, #46	; 0x2e
    ee56:	1c19      	adds	r1, r3, #0
    ee58:	4ba5      	ldr	r3, [pc, #660]	; (f0f0 <main+0x39c>)
    ee5a:	4798      	blx	r3
	port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ee5c:	202e      	movs	r0, #46	; 0x2e
    ee5e:	2101      	movs	r1, #1
    ee60:	4ba7      	ldr	r3, [pc, #668]	; (f100 <main+0x3ac>)
    ee62:	4798      	blx	r3
	port_pin_set_config(LED_BIRED_PIN, &pin_conf);
    ee64:	1d3b      	adds	r3, r7, #4
    ee66:	202f      	movs	r0, #47	; 0x2f
    ee68:	1c19      	adds	r1, r3, #0
    ee6a:	4ba1      	ldr	r3, [pc, #644]	; (f0f0 <main+0x39c>)
    ee6c:	4798      	blx	r3
	port_pin_set_output_level(LED_BIRED_PIN, true);	
    ee6e:	202f      	movs	r0, #47	; 0x2f
    ee70:	2101      	movs	r1, #1
    ee72:	4ba3      	ldr	r3, [pc, #652]	; (f100 <main+0x3ac>)
    ee74:	4798      	blx	r3
	ledBiGreen = 1;
    ee76:	4ba4      	ldr	r3, [pc, #656]	; (f108 <main+0x3b4>)
    ee78:	2201      	movs	r2, #1
    ee7a:	701a      	strb	r2, [r3, #0]
	ledBiRed = 1; 
    ee7c:	4ba3      	ldr	r3, [pc, #652]	; (f10c <main+0x3b8>)
    ee7e:	2201      	movs	r2, #1
    ee80:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BLUE_PIN, &pin_conf);
    ee82:	1d3b      	adds	r3, r7, #4
    ee84:	202c      	movs	r0, #44	; 0x2c
    ee86:	1c19      	adds	r1, r3, #0
    ee88:	4b99      	ldr	r3, [pc, #612]	; (f0f0 <main+0x39c>)
    ee8a:	4798      	blx	r3
	port_pin_set_output_level(LED_BLUE_PIN, true);
    ee8c:	202c      	movs	r0, #44	; 0x2c
    ee8e:	2101      	movs	r1, #1
    ee90:	4b9b      	ldr	r3, [pc, #620]	; (f100 <main+0x3ac>)
    ee92:	4798      	blx	r3
	port_pin_set_config(LED_RED_PIN, &pin_conf);
    ee94:	1d3b      	adds	r3, r7, #4
    ee96:	202d      	movs	r0, #45	; 0x2d
    ee98:	1c19      	adds	r1, r3, #0
    ee9a:	4b95      	ldr	r3, [pc, #596]	; (f0f0 <main+0x39c>)
    ee9c:	4798      	blx	r3
	port_pin_set_output_level(LED_RED_PIN, true);	
    ee9e:	202d      	movs	r0, #45	; 0x2d
    eea0:	2101      	movs	r1, #1
    eea2:	4b97      	ldr	r3, [pc, #604]	; (f100 <main+0x3ac>)
    eea4:	4798      	blx	r3
	 
	ledRed = 2; 
    eea6:	4b9a      	ldr	r3, [pc, #616]	; (f110 <main+0x3bc>)
    eea8:	2202      	movs	r2, #2
    eeaa:	701a      	strb	r2, [r3, #0]
	// PA16 PWMIN
	// PA18 EDa
	// PA19 INa
	// PB24 EDb
	// PB25 INb 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    eeac:	1d3b      	adds	r3, r7, #4
    eeae:	2201      	movs	r2, #1
    eeb0:	701a      	strb	r2, [r3, #0]
	//---------- EDb
	port_pin_set_config(ENb, &pin_conf);
    eeb2:	1d3b      	adds	r3, r7, #4
    eeb4:	2018      	movs	r0, #24
    eeb6:	1c19      	adds	r1, r3, #0
    eeb8:	4b8d      	ldr	r3, [pc, #564]	; (f0f0 <main+0x39c>)
    eeba:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    eebc:	2018      	movs	r0, #24
    eebe:	2100      	movs	r1, #0
    eec0:	4b8f      	ldr	r3, [pc, #572]	; (f100 <main+0x3ac>)
    eec2:	4798      	blx	r3
	//--------- INb
	port_pin_set_config(INb, &pin_conf);
    eec4:	1d3b      	adds	r3, r7, #4
    eec6:	2019      	movs	r0, #25
    eec8:	1c19      	adds	r1, r3, #0
    eeca:	4b89      	ldr	r3, [pc, #548]	; (f0f0 <main+0x39c>)
    eecc:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    eece:	2019      	movs	r0, #25
    eed0:	2100      	movs	r1, #0
    eed2:	4b8b      	ldr	r3, [pc, #556]	; (f100 <main+0x3ac>)
    eed4:	4798      	blx	r3
	//----------EDa
	port_pin_set_config(ENa, &pin_conf);
    eed6:	1d3b      	adds	r3, r7, #4
    eed8:	2012      	movs	r0, #18
    eeda:	1c19      	adds	r1, r3, #0
    eedc:	4b84      	ldr	r3, [pc, #528]	; (f0f0 <main+0x39c>)
    eede:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    eee0:	2012      	movs	r0, #18
    eee2:	2100      	movs	r1, #0
    eee4:	4b86      	ldr	r3, [pc, #536]	; (f100 <main+0x3ac>)
    eee6:	4798      	blx	r3
	//---------INa
	port_pin_set_config(INa, &pin_conf);
    eee8:	1d3b      	adds	r3, r7, #4
    eeea:	2013      	movs	r0, #19
    eeec:	1c19      	adds	r1, r3, #0
    eeee:	4b80      	ldr	r3, [pc, #512]	; (f0f0 <main+0x39c>)
    eef0:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    eef2:	2013      	movs	r0, #19
    eef4:	2100      	movs	r1, #0
    eef6:	4b82      	ldr	r3, [pc, #520]	; (f100 <main+0x3ac>)
    eef8:	4798      	blx	r3
	//-------- PWmin
	port_pin_set_config(PIN_PA16, &pin_conf);
    eefa:	1d3b      	adds	r3, r7, #4
    eefc:	2010      	movs	r0, #16
    eefe:	1c19      	adds	r1, r3, #0
    ef00:	4b7b      	ldr	r3, [pc, #492]	; (f0f0 <main+0x39c>)
    ef02:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA16, true); //false);	
    ef04:	2010      	movs	r0, #16
    ef06:	2101      	movs	r1, #1
    ef08:	4b7d      	ldr	r3, [pc, #500]	; (f100 <main+0x3ac>)
    ef0a:	4798      	blx	r3
	//-----------------------------
	// MOTOR PIN INITIALIZATION - INPUTS
	// PA3 CS - CURRENT SENSE
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ef0c:	1d3b      	adds	r3, r7, #4
    ef0e:	2200      	movs	r2, #0
    ef10:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    ef12:	1d3b      	adds	r3, r7, #4
    ef14:	2200      	movs	r2, #0
    ef16:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA03, &pin_conf);
    ef18:	1d3b      	adds	r3, r7, #4
    ef1a:	2003      	movs	r0, #3
    ef1c:	1c19      	adds	r1, r3, #0
    ef1e:	4b74      	ldr	r3, [pc, #464]	; (f0f0 <main+0x39c>)
    ef20:	4798      	blx	r3
 
	
	//-------MOTOR OFF 
	// ENa,ENb, INa, INb all 0 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ef22:	1d3b      	adds	r3, r7, #4
    ef24:	2201      	movs	r2, #1
    ef26:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);	
    ef28:	1d3b      	adds	r3, r7, #4
    ef2a:	2012      	movs	r0, #18
    ef2c:	1c19      	adds	r1, r3, #0
    ef2e:	4b70      	ldr	r3, [pc, #448]	; (f0f0 <main+0x39c>)
    ef30:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    ef32:	2012      	movs	r0, #18
    ef34:	2100      	movs	r1, #0
    ef36:	4b72      	ldr	r3, [pc, #456]	; (f100 <main+0x3ac>)
    ef38:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);	
    ef3a:	1d3b      	adds	r3, r7, #4
    ef3c:	2018      	movs	r0, #24
    ef3e:	1c19      	adds	r1, r3, #0
    ef40:	4b6b      	ldr	r3, [pc, #428]	; (f0f0 <main+0x39c>)
    ef42:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    ef44:	2018      	movs	r0, #24
    ef46:	2100      	movs	r1, #0
    ef48:	4b6d      	ldr	r3, [pc, #436]	; (f100 <main+0x3ac>)
    ef4a:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);		
    ef4c:	1d3b      	adds	r3, r7, #4
    ef4e:	2013      	movs	r0, #19
    ef50:	1c19      	adds	r1, r3, #0
    ef52:	4b67      	ldr	r3, [pc, #412]	; (f0f0 <main+0x39c>)
    ef54:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    ef56:	2013      	movs	r0, #19
    ef58:	2100      	movs	r1, #0
    ef5a:	4b69      	ldr	r3, [pc, #420]	; (f100 <main+0x3ac>)
    ef5c:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);		
    ef5e:	1d3b      	adds	r3, r7, #4
    ef60:	2019      	movs	r0, #25
    ef62:	1c19      	adds	r1, r3, #0
    ef64:	4b62      	ldr	r3, [pc, #392]	; (f0f0 <main+0x39c>)
    ef66:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    ef68:	2019      	movs	r0, #25
    ef6a:	2100      	movs	r1, #0
    ef6c:	4b64      	ldr	r3, [pc, #400]	; (f100 <main+0x3ac>)
    ef6e:	4798      	blx	r3
 
	//-----------motor inputs
	// FLIMIT - 
	// HLIMIT
	// ENCODER 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ef70:	1d3b      	adds	r3, r7, #4
    ef72:	2201      	movs	r2, #1
    ef74:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(IRLEDEN, &pin_conf);	
    ef76:	1d3b      	adds	r3, r7, #4
    ef78:	201b      	movs	r0, #27
    ef7a:	1c19      	adds	r1, r3, #0
    ef7c:	4b5c      	ldr	r3, [pc, #368]	; (f0f0 <main+0x39c>)
    ef7e:	4798      	blx	r3
	port_pin_set_output_level(IRLEDEN, true);	
    ef80:	201b      	movs	r0, #27
    ef82:	2101      	movs	r1, #1
    ef84:	4b5e      	ldr	r3, [pc, #376]	; (f100 <main+0x3ac>)
    ef86:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ef88:	1d3b      	adds	r3, r7, #4
    ef8a:	2200      	movs	r2, #0
    ef8c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    ef8e:	1d3b      	adds	r3, r7, #4
    ef90:	2200      	movs	r2, #0
    ef92:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(FLIMIT, &pin_conf);
    ef94:	1d3b      	adds	r3, r7, #4
    ef96:	2015      	movs	r0, #21
    ef98:	1c19      	adds	r1, r3, #0
    ef9a:	4b55      	ldr	r3, [pc, #340]	; (f0f0 <main+0x39c>)
    ef9c:	4798      	blx	r3
	port_pin_set_config(HLIMIT, &pin_conf);
    ef9e:	1d3b      	adds	r3, r7, #4
    efa0:	2014      	movs	r0, #20
    efa2:	1c19      	adds	r1, r3, #0
    efa4:	4b52      	ldr	r3, [pc, #328]	; (f0f0 <main+0x39c>)
    efa6:	4798      	blx	r3
	port_pin_set_config(ENCODER, &pin_conf);		 
    efa8:	1d3b      	adds	r3, r7, #4
    efaa:	202b      	movs	r0, #43	; 0x2b
    efac:	1c19      	adds	r1, r3, #0
    efae:	4b50      	ldr	r3, [pc, #320]	; (f0f0 <main+0x39c>)
    efb0:	4798      	blx	r3
 

 
	MotorInit(); 
    efb2:	4b58      	ldr	r3, [pc, #352]	; (f114 <main+0x3c0>)
    efb4:	4798      	blx	r3
 
	//-------SUPER CAP enable
	// 1 is on
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    efb6:	1d3b      	adds	r3, r7, #4
    efb8:	2201      	movs	r2, #1
    efba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SUPERCAPEN, &pin_conf);	
    efbc:	1d3b      	adds	r3, r7, #4
    efbe:	2025      	movs	r0, #37	; 0x25
    efc0:	1c19      	adds	r1, r3, #0
    efc2:	4b4b      	ldr	r3, [pc, #300]	; (f0f0 <main+0x39c>)
    efc4:	4798      	blx	r3
	port_pin_set_output_level(SUPERCAPEN, false);  
    efc6:	2025      	movs	r0, #37	; 0x25
    efc8:	2100      	movs	r1, #0
    efca:	4b4d      	ldr	r3, [pc, #308]	; (f100 <main+0x3ac>)
    efcc:	4798      	blx	r3
	chargingSupercap  = 0; 
    efce:	4b52      	ldr	r3, [pc, #328]	; (f118 <main+0x3c4>)
    efd0:	2200      	movs	r2, #0
    efd2:	701a      	strb	r2, [r3, #0]
	supercapState = true; 
    efd4:	4b51      	ldr	r3, [pc, #324]	; (f11c <main+0x3c8>)
    efd6:	2201      	movs	r2, #1
    efd8:	701a      	strb	r2, [r3, #0]
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    efda:	1d3b      	adds	r3, r7, #4
    efdc:	2200      	movs	r2, #0
    efde:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    efe0:	1d3b      	adds	r3, r7, #4
    efe2:	2200      	movs	r2, #0
    efe4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    efe6:	1d3b      	adds	r3, r7, #4
    efe8:	2002      	movs	r0, #2
    efea:	1c19      	adds	r1, r3, #0
    efec:	4b40      	ldr	r3, [pc, #256]	; (f0f0 <main+0x39c>)
    efee:	4798      	blx	r3
	port_pin_set_config(PIN_PA28, &pin_conf);
    eff0:	1d3b      	adds	r3, r7, #4
    eff2:	201c      	movs	r0, #28
    eff4:	1c19      	adds	r1, r3, #0
    eff6:	4b3e      	ldr	r3, [pc, #248]	; (f0f0 <main+0x39c>)
    eff8:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_TIP, &pin_conf);
    effa:	1d3b      	adds	r3, r7, #4
    effc:	2017      	movs	r0, #23
    effe:	1c19      	adds	r1, r3, #0
    f000:	4b3b      	ldr	r3, [pc, #236]	; (f0f0 <main+0x39c>)
    f002:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_RING, &pin_conf);	
    f004:	1d3b      	adds	r3, r7, #4
    f006:	2016      	movs	r0, #22
    f008:	1c19      	adds	r1, r3, #0
    f00a:	4b39      	ldr	r3, [pc, #228]	; (f0f0 <main+0x39c>)
    f00c:	4798      	blx	r3
	
	//--------------------------
	// BUTTON INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f00e:	1d3b      	adds	r3, r7, #4
    f010:	2200      	movs	r2, #0
    f012:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f014:	1d3b      	adds	r3, r7, #4
    f016:	2201      	movs	r2, #1
    f018:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_SETUP, &pin_conf);
    f01a:	1d3b      	adds	r3, r7, #4
    f01c:	200f      	movs	r0, #15
    f01e:	1c19      	adds	r1, r3, #0
    f020:	4b33      	ldr	r3, [pc, #204]	; (f0f0 <main+0x39c>)
    f022:	4798      	blx	r3
	port_pin_set_config(BUTTON_POWER, &pin_conf);
    f024:	1d3b      	adds	r3, r7, #4
    f026:	200e      	movs	r0, #14
    f028:	1c19      	adds	r1, r3, #0
    f02a:	4b31      	ldr	r3, [pc, #196]	; (f0f0 <main+0x39c>)
    f02c:	4798      	blx	r3
	//-------------------------
	// ADC
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f02e:	1d3b      	adds	r3, r7, #4
    f030:	2200      	movs	r2, #0
    f032:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    f034:	1d3b      	adds	r3, r7, #4
    f036:	2200      	movs	r2, #0
    f038:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    f03a:	1d3b      	adds	r3, r7, #4
    f03c:	2002      	movs	r0, #2
    f03e:	1c19      	adds	r1, r3, #0
    f040:	4b2b      	ldr	r3, [pc, #172]	; (f0f0 <main+0x39c>)
    f042:	4798      	blx	r3
	port_pin_set_config(PIN_PA03, &pin_conf);
    f044:	1d3b      	adds	r3, r7, #4
    f046:	2003      	movs	r0, #3
    f048:	1c19      	adds	r1, r3, #0
    f04a:	4b29      	ldr	r3, [pc, #164]	; (f0f0 <main+0x39c>)
    f04c:	4798      	blx	r3
	port_pin_set_config(PIN_PB04, &pin_conf);
    f04e:	1d3b      	adds	r3, r7, #4
    f050:	2024      	movs	r0, #36	; 0x24
    f052:	1c19      	adds	r1, r3, #0
    f054:	4b26      	ldr	r3, [pc, #152]	; (f0f0 <main+0x39c>)
    f056:	4798      	blx	r3
	port_pin_set_config(PIN_PB06, &pin_conf); 
    f058:	1d3b      	adds	r3, r7, #4
    f05a:	2026      	movs	r0, #38	; 0x26
    f05c:	1c19      	adds	r1, r3, #0
    f05e:	4b24      	ldr	r3, [pc, #144]	; (f0f0 <main+0x39c>)
    f060:	4798      	blx	r3
	port_pin_set_config(PIN_PB07, &pin_conf); 	
    f062:	1d3b      	adds	r3, r7, #4
    f064:	2027      	movs	r0, #39	; 0x27
    f066:	1c19      	adds	r1, r3, #0
    f068:	4b21      	ldr	r3, [pc, #132]	; (f0f0 <main+0x39c>)
    f06a:	4798      	blx	r3
	
	//--------------------------
	// BLUETOOTH INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f06c:	1d3b      	adds	r3, r7, #4
    f06e:	2200      	movs	r2, #0
    f070:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f072:	1d3b      	adds	r3, r7, #4
    f074:	2201      	movs	r2, #1
    f076:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    f078:	1d3b      	adds	r3, r7, #4
    f07a:	2008      	movs	r0, #8
    f07c:	1c19      	adds	r1, r3, #0
    f07e:	4b1c      	ldr	r3, [pc, #112]	; (f0f0 <main+0x39c>)
    f080:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    f082:	1d3b      	adds	r3, r7, #4
    f084:	2200      	movs	r2, #0
    f086:	705a      	strb	r2, [r3, #1]
//	port_pin_set_config(BLUETOOTH_RX, &pin_conf);	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f088:	1d3b      	adds	r3, r7, #4
    f08a:	2201      	movs	r2, #1
    f08c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    f08e:	1d3b      	adds	r3, r7, #4
    f090:	2009      	movs	r0, #9
    f092:	1c19      	adds	r1, r3, #0
    f094:	4b16      	ldr	r3, [pc, #88]	; (f0f0 <main+0x39c>)
    f096:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    f098:	2009      	movs	r0, #9
    f09a:	2101      	movs	r1, #1
    f09c:	4b18      	ldr	r3, [pc, #96]	; (f100 <main+0x3ac>)
    f09e:	4798      	blx	r3
	port_pin_set_config(PIN_PB23, &pin_conf); 	
#endif	

	//----------------------------
	// FCC PINS 
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f0a0:	1d3b      	adds	r3, r7, #4
    f0a2:	2200      	movs	r2, #0
    f0a4:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f0a6:	1d3b      	adds	r3, r7, #4
    f0a8:	2201      	movs	r2, #1
    f0aa:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CONSTANTTX, &pin_conf);
    f0ac:	1d3b      	adds	r3, r7, #4
    f0ae:	2000      	movs	r0, #0
    f0b0:	1c19      	adds	r1, r3, #0
    f0b2:	4b0f      	ldr	r3, [pc, #60]	; (f0f0 <main+0x39c>)
    f0b4:	4798      	blx	r3
	port_pin_set_config(CONSTANTRX, &pin_conf);	 
    f0b6:	1d3b      	adds	r3, r7, #4
    f0b8:	2001      	movs	r0, #1
    f0ba:	1c19      	adds	r1, r3, #0
    f0bc:	4b0c      	ldr	r3, [pc, #48]	; (f0f0 <main+0x39c>)
    f0be:	4798      	blx	r3
	port_pin_set_config(CONSTANTCW, &pin_conf);
    f0c0:	1d3b      	adds	r3, r7, #4
    f0c2:	2036      	movs	r0, #54	; 0x36
    f0c4:	1c19      	adds	r1, r3, #0
    f0c6:	4b0a      	ldr	r3, [pc, #40]	; (f0f0 <main+0x39c>)
    f0c8:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
    f0ca:	4b15      	ldr	r3, [pc, #84]	; (f120 <main+0x3cc>)
    f0cc:	2200      	movs	r2, #0
    f0ce:	701a      	strb	r2, [r3, #0]
	setCW = 0;
    f0d0:	4b14      	ldr	r3, [pc, #80]	; (f124 <main+0x3d0>)
    f0d2:	2200      	movs	r2, #0
    f0d4:	701a      	strb	r2, [r3, #0]
	setRXContinuous = 0;	
    f0d6:	4b14      	ldr	r3, [pc, #80]	; (f128 <main+0x3d4>)
    f0d8:	2200      	movs	r2, #0
    f0da:	701a      	strb	r2, [r3, #0]
	for (i=0;i<10;i++)
    f0dc:	1c3b      	adds	r3, r7, #0
    f0de:	330f      	adds	r3, #15
    f0e0:	2200      	movs	r2, #0
    f0e2:	701a      	strb	r2, [r3, #0]
    f0e4:	e02b      	b.n	f13e <main+0x3ea>
    f0e6:	46c0      	nop			; (mov r8, r8)
    f0e8:	0000e90d 	.word	0x0000e90d
    f0ec:	0000e975 	.word	0x0000e975
    f0f0:	00011dbd 	.word	0x00011dbd
    f0f4:	000143c1 	.word	0x000143c1
    f0f8:	0000ec81 	.word	0x0000ec81
    f0fc:	0000f5d1 	.word	0x0000f5d1
    f100:	0000e995 	.word	0x0000e995
    f104:	0000ed25 	.word	0x0000ed25
    f108:	200036a0 	.word	0x200036a0
    f10c:	200036fe 	.word	0x200036fe
    f110:	200036c8 	.word	0x200036c8
    f114:	00009aed 	.word	0x00009aed
    f118:	200004ab 	.word	0x200004ab
    f11c:	200036f4 	.word	0x200036f4
    f120:	20003693 	.word	0x20003693
    f124:	20003690 	.word	0x20003690
    f128:	20003691 	.word	0x20003691
	{
		FCCSample();
    f12c:	4b94      	ldr	r3, [pc, #592]	; (f380 <main+0x62c>)
    f12e:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
	setCW = 0;
	setRXContinuous = 0;	
	for (i=0;i<10;i++)
    f130:	1c3b      	adds	r3, r7, #0
    f132:	330f      	adds	r3, #15
    f134:	781a      	ldrb	r2, [r3, #0]
    f136:	1c3b      	adds	r3, r7, #0
    f138:	330f      	adds	r3, #15
    f13a:	3201      	adds	r2, #1
    f13c:	701a      	strb	r2, [r3, #0]
    f13e:	1c3b      	adds	r3, r7, #0
    f140:	330f      	adds	r3, #15
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	2b09      	cmp	r3, #9
    f146:	d9f1      	bls.n	f12c <main+0x3d8>
	{
		FCCSample();
	}
	if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    f148:	4b8e      	ldr	r3, [pc, #568]	; (f384 <main+0x630>)
    f14a:	881b      	ldrh	r3, [r3, #0]
    f14c:	2b00      	cmp	r3, #0
    f14e:	d00a      	beq.n	f166 <main+0x412>
    f150:	4b8d      	ldr	r3, [pc, #564]	; (f388 <main+0x634>)
    f152:	881b      	ldrh	r3, [r3, #0]
    f154:	2b00      	cmp	r3, #0
    f156:	d106      	bne.n	f166 <main+0x412>
    f158:	4b8c      	ldr	r3, [pc, #560]	; (f38c <main+0x638>)
    f15a:	881b      	ldrh	r3, [r3, #0]
    f15c:	2b00      	cmp	r3, #0
    f15e:	d102      	bne.n	f166 <main+0x412>
	{
		setTXContinuous = 1; 
    f160:	4b8b      	ldr	r3, [pc, #556]	; (f390 <main+0x63c>)
    f162:	2201      	movs	r2, #1
    f164:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    f166:	4b87      	ldr	r3, [pc, #540]	; (f384 <main+0x630>)
    f168:	881b      	ldrh	r3, [r3, #0]
    f16a:	2b00      	cmp	r3, #0
    f16c:	d10a      	bne.n	f184 <main+0x430>
    f16e:	4b86      	ldr	r3, [pc, #536]	; (f388 <main+0x634>)
    f170:	881b      	ldrh	r3, [r3, #0]
    f172:	2b00      	cmp	r3, #0
    f174:	d006      	beq.n	f184 <main+0x430>
    f176:	4b85      	ldr	r3, [pc, #532]	; (f38c <main+0x638>)
    f178:	881b      	ldrh	r3, [r3, #0]
    f17a:	2b00      	cmp	r3, #0
    f17c:	d102      	bne.n	f184 <main+0x430>
	{
		setRXContinuous = 1; 
    f17e:	4b85      	ldr	r3, [pc, #532]	; (f394 <main+0x640>)
    f180:	2201      	movs	r2, #1
    f182:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    f184:	4b7f      	ldr	r3, [pc, #508]	; (f384 <main+0x630>)
    f186:	881b      	ldrh	r3, [r3, #0]
    f188:	2b00      	cmp	r3, #0
    f18a:	d10a      	bne.n	f1a2 <main+0x44e>
    f18c:	4b7e      	ldr	r3, [pc, #504]	; (f388 <main+0x634>)
    f18e:	881b      	ldrh	r3, [r3, #0]
    f190:	2b00      	cmp	r3, #0
    f192:	d106      	bne.n	f1a2 <main+0x44e>
    f194:	4b7d      	ldr	r3, [pc, #500]	; (f38c <main+0x638>)
    f196:	881b      	ldrh	r3, [r3, #0]
    f198:	2b00      	cmp	r3, #0
    f19a:	d002      	beq.n	f1a2 <main+0x44e>
	{
		setCW = 1; 
    f19c:	4b7e      	ldr	r3, [pc, #504]	; (f398 <main+0x644>)
    f19e:	2201      	movs	r2, #1
    f1a0:	701a      	strb	r2, [r3, #0]
	}		
	//--------------------------------
	// speaker PB16 and PB17
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f1a2:	1d3b      	adds	r3, r7, #4
    f1a4:	2201      	movs	r2, #1
    f1a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB16, &pin_conf);
    f1a8:	1d3b      	adds	r3, r7, #4
    f1aa:	2030      	movs	r0, #48	; 0x30
    f1ac:	1c19      	adds	r1, r3, #0
    f1ae:	4b7b      	ldr	r3, [pc, #492]	; (f39c <main+0x648>)
    f1b0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB16, false);
    f1b2:	2030      	movs	r0, #48	; 0x30
    f1b4:	2100      	movs	r1, #0
    f1b6:	4b7a      	ldr	r3, [pc, #488]	; (f3a0 <main+0x64c>)
    f1b8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f1ba:	1d3b      	adds	r3, r7, #4
    f1bc:	2201      	movs	r2, #1
    f1be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB17, &pin_conf);
    f1c0:	1d3b      	adds	r3, r7, #4
    f1c2:	2031      	movs	r0, #49	; 0x31
    f1c4:	1c19      	adds	r1, r3, #0
    f1c6:	4b75      	ldr	r3, [pc, #468]	; (f39c <main+0x648>)
    f1c8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB17, false);
    f1ca:	2031      	movs	r0, #49	; 0x31
    f1cc:	2100      	movs	r1, #0
    f1ce:	4b74      	ldr	r3, [pc, #464]	; (f3a0 <main+0x64c>)
    f1d0:	4798      	blx	r3
				
	//---------------------
	// i2c setup for EEPROM - COMMON
	//---------------------
	I2Cmain();
    f1d2:	4b74      	ldr	r3, [pc, #464]	; (f3a4 <main+0x650>)
    f1d4:	4798      	blx	r3
	ConfigInit(); 
    f1d6:	4b74      	ldr	r3, [pc, #464]	; (f3a8 <main+0x654>)
    f1d8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB22, TRUE); //CLK_FIX
	port_pin_set_output_level(PIN_PB23, TRUE); //CLK_FIX	
#endif 	
#endif			
#if BRAKEBOARD	
	AccelInit(); 
    f1da:	4b74      	ldr	r3, [pc, #464]	; (f3ac <main+0x658>)
    f1dc:	4798      	blx	r3
#if BRAKEBOARD
 
#endif
	//----------Timer Initialization
	//		
	configure_tc();
    f1de:	4b74      	ldr	r3, [pc, #464]	; (f3b0 <main+0x65c>)
    f1e0:	4798      	blx	r3
	configure_tc_callbacks();
    f1e2:	4b74      	ldr	r3, [pc, #464]	; (f3b4 <main+0x660>)
    f1e4:	4798      	blx	r3

	//-----ADC--------------
	ADCInit();
    f1e6:	4b74      	ldr	r3, [pc, #464]	; (f3b8 <main+0x664>)
    f1e8:	4798      	blx	r3
	
	//---------------LORA/FSK radio 
	whichRadio = WHICHRADIO_LORA; 
    f1ea:	4b74      	ldr	r3, [pc, #464]	; (f3bc <main+0x668>)
    f1ec:	2299      	movs	r2, #153	; 0x99
    f1ee:	701a      	strb	r2, [r3, #0]
	CommInit();
    f1f0:	4b73      	ldr	r3, [pc, #460]	; (f3c0 <main+0x66c>)
    f1f2:	4798      	blx	r3
#if REMOTEBOARD
	BacklightSet(table0.Item.BackLightOn);	
	BacklightSetHomeColor(table0.Item.ScreenColor);
#endif

	system_interrupt_enable_global();
    f1f4:	4b73      	ldr	r3, [pc, #460]	; (f3c4 <main+0x670>)
    f1f6:	4798      	blx	r3
	Enable_global_interrupt();
    f1f8:	4b73      	ldr	r3, [pc, #460]	; (f3c8 <main+0x674>)
    f1fa:	2201      	movs	r2, #1
    f1fc:	701a      	strb	r2, [r3, #0]
    f1fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    f202:	b662      	cpsie	i
	
	ADCStart(); 
    f204:	4b71      	ldr	r3, [pc, #452]	; (f3cc <main+0x678>)
    f206:	4798      	blx	r3

#if BRAKEBOARD
	BrakeInit();
    f208:	4b71      	ldr	r3, [pc, #452]	; (f3d0 <main+0x67c>)
    f20a:	4798      	blx	r3
	UsartMain();
    f20c:	4b71      	ldr	r3, [pc, #452]	; (f3d4 <main+0x680>)
    f20e:	4798      	blx	r3
	USARTDisable();
    f210:	4b71      	ldr	r3, [pc, #452]	; (f3d8 <main+0x684>)
    f212:	4798      	blx	r3
	BluetoothSleep();
    f214:	4b71      	ldr	r3, [pc, #452]	; (f3dc <main+0x688>)
    f216:	4798      	blx	r3
//	BluetoothWakeUp();	
#if TESTUARTDATA
	USARTEnable();
	BluetoothWakeUp();
#endif	 
	nvm_get_config_defaults(&config);
    f218:	1c3b      	adds	r3, r7, #0
    f21a:	3308      	adds	r3, #8
    f21c:	1c18      	adds	r0, r3, #0
    f21e:	4b70      	ldr	r3, [pc, #448]	; (f3e0 <main+0x68c>)
    f220:	4798      	blx	r3
	nvm_set_config(&config);
    f222:	1c3b      	adds	r3, r7, #0
    f224:	3308      	adds	r3, #8
    f226:	1c18      	adds	r0, r3, #0
    f228:	4b6e      	ldr	r3, [pc, #440]	; (f3e4 <main+0x690>)
    f22a:	4798      	blx	r3
		 general_buffer, NVMCTRL_PAGE_SIZE);
	 } while (error_code == STATUS_BUSY);
#endif	
#endif		

	button = ButtonChanged(); 
    f22c:	1c3c      	adds	r4, r7, #0
    f22e:	340e      	adds	r4, #14
    f230:	4b6d      	ldr	r3, [pc, #436]	; (f3e8 <main+0x694>)
    f232:	4798      	blx	r3
    f234:	1c03      	adds	r3, r0, #0
    f236:	7023      	strb	r3, [r4, #0]
	configure_wdt();
    f238:	4b6c      	ldr	r3, [pc, #432]	; (f3ec <main+0x698>)
    f23a:	4798      	blx	r3
    while (1) 
    {
//		wdt_reset_count();

		schedDone = 0;
    f23c:	4b6c      	ldr	r3, [pc, #432]	; (f3f0 <main+0x69c>)
    f23e:	2200      	movs	r2, #0
    f240:	701a      	strb	r2, [r3, #0]
		schedCount = 0;
    f242:	4b6c      	ldr	r3, [pc, #432]	; (f3f4 <main+0x6a0>)
    f244:	2200      	movs	r2, #0
    f246:	701a      	strb	r2, [r3, #0]
		while ((schedCount <16) && (schedDone ==0))
    f248:	e090      	b.n	f36c <main+0x618>
		{
			mainLineTask = 0; 
    f24a:	4b6b      	ldr	r3, [pc, #428]	; (f3f8 <main+0x6a4>)
    f24c:	2200      	movs	r2, #0
    f24e:	701a      	strb	r2, [r3, #0]
			if ((schedByte & (1<<schedCount))!= 0)
    f250:	4b68      	ldr	r3, [pc, #416]	; (f3f4 <main+0x6a0>)
    f252:	781b      	ldrb	r3, [r3, #0]
    f254:	2201      	movs	r2, #1
    f256:	1c11      	adds	r1, r2, #0
    f258:	4099      	lsls	r1, r3
    f25a:	1c0b      	adds	r3, r1, #0
    f25c:	1c1a      	adds	r2, r3, #0
    f25e:	4b67      	ldr	r3, [pc, #412]	; (f3fc <main+0x6a8>)
    f260:	681b      	ldr	r3, [r3, #0]
    f262:	4013      	ands	r3, r2
    f264:	d100      	bne.n	f268 <main+0x514>
    f266:	e07b      	b.n	f360 <main+0x60c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    f268:	b672      	cpsid	i
    f26a:	f3bf 8f5f 	dmb	sy
			{
				//-------------------
				// disable interrupt
				//-------------------
				Disable_global_interrupt();			
    f26e:	4b56      	ldr	r3, [pc, #344]	; (f3c8 <main+0x674>)
    f270:	2200      	movs	r2, #0
    f272:	701a      	strb	r2, [r3, #0]
				schedByte &= (~(1<<schedCount));			
    f274:	4b5f      	ldr	r3, [pc, #380]	; (f3f4 <main+0x6a0>)
    f276:	781b      	ldrb	r3, [r3, #0]
    f278:	2201      	movs	r2, #1
    f27a:	1c11      	adds	r1, r2, #0
    f27c:	4099      	lsls	r1, r3
    f27e:	1c0b      	adds	r3, r1, #0
    f280:	43db      	mvns	r3, r3
    f282:	1c1a      	adds	r2, r3, #0
    f284:	4b5d      	ldr	r3, [pc, #372]	; (f3fc <main+0x6a8>)
    f286:	681b      	ldr	r3, [r3, #0]
    f288:	401a      	ands	r2, r3
    f28a:	4b5c      	ldr	r3, [pc, #368]	; (f3fc <main+0x6a8>)
    f28c:	601a      	str	r2, [r3, #0]
				Enable_global_interrupt();
    f28e:	4b4e      	ldr	r3, [pc, #312]	; (f3c8 <main+0x674>)
    f290:	2201      	movs	r2, #1
    f292:	701a      	strb	r2, [r3, #0]
    f294:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    f298:	b662      	cpsie	i
						 SpeakerOn();
					}				
*/				
#endif			
#if BRAKEBOARD				
				if (poweredUp != 0)
    f29a:	4b59      	ldr	r3, [pc, #356]	; (f400 <main+0x6ac>)
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	2b00      	cmp	r3, #0
    f2a0:	d007      	beq.n	f2b2 <main+0x55e>
				{
					SwTaskList[schedCount]();
    f2a2:	4b54      	ldr	r3, [pc, #336]	; (f3f4 <main+0x6a0>)
    f2a4:	781b      	ldrb	r3, [r3, #0]
    f2a6:	1c1a      	adds	r2, r3, #0
    f2a8:	4b56      	ldr	r3, [pc, #344]	; (f404 <main+0x6b0>)
    f2aa:	0092      	lsls	r2, r2, #2
    f2ac:	58d3      	ldr	r3, [r2, r3]
    f2ae:	4798      	blx	r3
    f2b0:	e056      	b.n	f360 <main+0x60c>
				}
				else
				{
					switch(schedCount)
    f2b2:	4b50      	ldr	r3, [pc, #320]	; (f3f4 <main+0x6a0>)
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	2b0e      	cmp	r3, #14
    f2b8:	d820      	bhi.n	f2fc <main+0x5a8>
    f2ba:	009a      	lsls	r2, r3, #2
    f2bc:	4b52      	ldr	r3, [pc, #328]	; (f408 <main+0x6b4>)
    f2be:	18d3      	adds	r3, r2, r3
    f2c0:	681b      	ldr	r3, [r3, #0]
    f2c2:	469f      	mov	pc, r3
					{
						case 14:
						{
							DownloadDoneTask();
    f2c4:	4b51      	ldr	r3, [pc, #324]	; (f40c <main+0x6b8>)
    f2c6:	4798      	blx	r3
							break;
    f2c8:	e018      	b.n	f2fc <main+0x5a8>
						}
						case 13:
						case 10:
						{
							if (newRemoteDownloadNeeded == TRUE)
    f2ca:	4b51      	ldr	r3, [pc, #324]	; (f410 <main+0x6bc>)
    f2cc:	781b      	ldrb	r3, [r3, #0]
    f2ce:	2b01      	cmp	r3, #1
    f2d0:	d107      	bne.n	f2e2 <main+0x58e>
							{
								SwTaskList[schedCount]();	
    f2d2:	4b48      	ldr	r3, [pc, #288]	; (f3f4 <main+0x6a0>)
    f2d4:	781b      	ldrb	r3, [r3, #0]
    f2d6:	1c1a      	adds	r2, r3, #0
    f2d8:	4b4a      	ldr	r3, [pc, #296]	; (f404 <main+0x6b0>)
    f2da:	0092      	lsls	r2, r2, #2
    f2dc:	58d3      	ldr	r3, [r2, r3]
    f2de:	4798      	blx	r3
							}
							break;
    f2e0:	e00c      	b.n	f2fc <main+0x5a8>
    f2e2:	e00b      	b.n	f2fc <main+0x5a8>
						}
						case 0:
						{
							BrakeSupervisorytask();
    f2e4:	4b4b      	ldr	r3, [pc, #300]	; (f414 <main+0x6c0>)
    f2e6:	4798      	blx	r3
							break;
    f2e8:	e008      	b.n	f2fc <main+0x5a8>
						}
						case 6:
						{
							BrakeBoardStateMachineTask();
    f2ea:	4b4b      	ldr	r3, [pc, #300]	; (f418 <main+0x6c4>)
    f2ec:	4798      	blx	r3
							break;
    f2ee:	e005      	b.n	f2fc <main+0x5a8>
						}		
						case 5:
						{
							ADCTask();
    f2f0:	4b4a      	ldr	r3, [pc, #296]	; (f41c <main+0x6c8>)
    f2f2:	4798      	blx	r3
							break;
    f2f4:	e002      	b.n	f2fc <main+0x5a8>
						}								
						case 3:
						{
							ButtonSample();
    f2f6:	4b4a      	ldr	r3, [pc, #296]	; (f420 <main+0x6cc>)
    f2f8:	4798      	blx	r3
							break;
    f2fa:	46c0      	nop			; (mov r8, r8)
					//------------------------
					// if not powered up and 
					// setup is pressed, will RESET the 
					// bluetooth to wake it up.
					//------------------------
					button = ButtonChanged();
    f2fc:	1c3c      	adds	r4, r7, #0
    f2fe:	340e      	adds	r4, #14
    f300:	4b39      	ldr	r3, [pc, #228]	; (f3e8 <main+0x694>)
    f302:	4798      	blx	r3
    f304:	1c03      	adds	r3, r0, #0
    f306:	7023      	strb	r3, [r4, #0]
					if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
    f308:	1c3b      	adds	r3, r7, #0
    f30a:	330e      	adds	r3, #14
    f30c:	781a      	ldrb	r2, [r3, #0]
    f30e:	2301      	movs	r3, #1
    f310:	4013      	ands	r3, r2
    f312:	d006      	beq.n	f322 <main+0x5ce>
    f314:	4b43      	ldr	r3, [pc, #268]	; (f424 <main+0x6d0>)
    f316:	881b      	ldrh	r3, [r3, #0]
    f318:	2b00      	cmp	r3, #0
    f31a:	d002      	beq.n	f322 <main+0x5ce>
					{
						bluetoothHoldTimer100msec = 30; 
    f31c:	4b42      	ldr	r3, [pc, #264]	; (f428 <main+0x6d4>)
    f31e:	221e      	movs	r2, #30
    f320:	701a      	strb	r2, [r3, #0]
					}
					if (setup_pressed != 0)
    f322:	4b40      	ldr	r3, [pc, #256]	; (f424 <main+0x6d0>)
    f324:	881b      	ldrh	r3, [r3, #0]
    f326:	2b00      	cmp	r3, #0
    f328:	d013      	beq.n	f352 <main+0x5fe>
					{
						if (bluetoothHoldTimer100msec == 1)
    f32a:	4b3f      	ldr	r3, [pc, #252]	; (f428 <main+0x6d4>)
    f32c:	781b      	ldrb	r3, [r3, #0]
    f32e:	2b01      	cmp	r3, #1
    f330:	d10f      	bne.n	f352 <main+0x5fe>
						{
							bluetoothHoldTimer100msec = 0;
    f332:	4b3d      	ldr	r3, [pc, #244]	; (f428 <main+0x6d4>)
    f334:	2200      	movs	r2, #0
    f336:	701a      	strb	r2, [r3, #0]
							if(bluetoothAwake != 0)
    f338:	4b3c      	ldr	r3, [pc, #240]	; (f42c <main+0x6d8>)
    f33a:	781b      	ldrb	r3, [r3, #0]
    f33c:	2b00      	cmp	r3, #0
    f33e:	d004      	beq.n	f34a <main+0x5f6>
							{
#if TESTUARTDATA								
#else
								USARTDisable();
    f340:	4b25      	ldr	r3, [pc, #148]	; (f3d8 <main+0x684>)
    f342:	4798      	blx	r3
								BluetoothSleep();
    f344:	4b25      	ldr	r3, [pc, #148]	; (f3dc <main+0x688>)
    f346:	4798      	blx	r3
    f348:	e003      	b.n	f352 <main+0x5fe>
							}
							else
							{
#if TESTUARTDATA
#else
								USARTEnable();
    f34a:	4b39      	ldr	r3, [pc, #228]	; (f430 <main+0x6dc>)
    f34c:	4798      	blx	r3
								BluetoothWakeUp();
    f34e:	4b39      	ldr	r3, [pc, #228]	; (f434 <main+0x6e0>)
    f350:	4798      	blx	r3
#endif
							}
						}
					}
					if (setup_pressed ==0)
    f352:	4b34      	ldr	r3, [pc, #208]	; (f424 <main+0x6d0>)
    f354:	881b      	ldrh	r3, [r3, #0]
    f356:	2b00      	cmp	r3, #0
    f358:	d102      	bne.n	f360 <main+0x60c>
					{
						bluetoothHoldTimer100msec = 0;
    f35a:	4b33      	ldr	r3, [pc, #204]	; (f428 <main+0x6d4>)
    f35c:	2200      	movs	r2, #0
    f35e:	701a      	strb	r2, [r3, #0]
					}

				}
#endif	
			}
			schedCount++;
    f360:	4b24      	ldr	r3, [pc, #144]	; (f3f4 <main+0x6a0>)
    f362:	781b      	ldrb	r3, [r3, #0]
    f364:	3301      	adds	r3, #1
    f366:	b2da      	uxtb	r2, r3
    f368:	4b22      	ldr	r3, [pc, #136]	; (f3f4 <main+0x6a0>)
    f36a:	701a      	strb	r2, [r3, #0]
    {
//		wdt_reset_count();

		schedDone = 0;
		schedCount = 0;
		while ((schedCount <16) && (schedDone ==0))
    f36c:	4b21      	ldr	r3, [pc, #132]	; (f3f4 <main+0x6a0>)
    f36e:	781b      	ldrb	r3, [r3, #0]
    f370:	2b0f      	cmp	r3, #15
    f372:	d804      	bhi.n	f37e <main+0x62a>
    f374:	4b1e      	ldr	r3, [pc, #120]	; (f3f0 <main+0x69c>)
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	2b00      	cmp	r3, #0
    f37a:	d100      	bne.n	f37e <main+0x62a>
    f37c:	e765      	b.n	f24a <main+0x4f6>

		
#endif 
 
		
    }
    f37e:	e75d      	b.n	f23c <main+0x4e8>
    f380:	0000bbb9 	.word	0x0000bbb9
    f384:	200004c4 	.word	0x200004c4
    f388:	200004c6 	.word	0x200004c6
    f38c:	200004c8 	.word	0x200004c8
    f390:	20003693 	.word	0x20003693
    f394:	20003691 	.word	0x20003691
    f398:	20003690 	.word	0x20003690
    f39c:	00011dbd 	.word	0x00011dbd
    f3a0:	0000e995 	.word	0x0000e995
    f3a4:	0000c941 	.word	0x0000c941
    f3a8:	0000af61 	.word	0x0000af61
    f3ac:	00005de9 	.word	0x00005de9
    f3b0:	0000fd41 	.word	0x0000fd41
    f3b4:	0000fd9d 	.word	0x0000fd9d
    f3b8:	0000b935 	.word	0x0000b935
    f3bc:	200036d2 	.word	0x200036d2
    f3c0:	0000f4fd 	.word	0x0000f4fd
    f3c4:	0000e8f5 	.word	0x0000e8f5
    f3c8:	20000044 	.word	0x20000044
    f3cc:	0000b9c9 	.word	0x0000b9c9
    f3d0:	000068fd 	.word	0x000068fd
    f3d4:	0000e281 	.word	0x0000e281
    f3d8:	0000e205 	.word	0x0000e205
    f3dc:	00006375 	.word	0x00006375
    f3e0:	0000eb9d 	.word	0x0000eb9d
    f3e4:	000043cd 	.word	0x000043cd
    f3e8:	0000bc75 	.word	0x0000bc75
    f3ec:	0000ecb1 	.word	0x0000ecb1
    f3f0:	200036d1 	.word	0x200036d1
    f3f4:	20003699 	.word	0x20003699
    f3f8:	200004db 	.word	0x200004db
    f3fc:	2000369c 	.word	0x2000369c
    f400:	200036b5 	.word	0x200036b5
    f404:	000184c0 	.word	0x000184c0
    f408:	00018500 	.word	0x00018500
    f40c:	0000bfd1 	.word	0x0000bfd1
    f410:	200004bb 	.word	0x200004bb
    f414:	00006d01 	.word	0x00006d01
    f418:	00006ef5 	.word	0x00006ef5
    f41c:	0000b73d 	.word	0x0000b73d
    f420:	0000bc99 	.word	0x0000bc99
    f424:	2000306e 	.word	0x2000306e
    f428:	200004e2 	.word	0x200004e2
    f42c:	200004a4 	.word	0x200004a4
    f430:	0000e21d 	.word	0x0000e21d
    f434:	000062dd 	.word	0x000062dd

0000f438 <CommSupTask>:
//------------------------------------------------------------------------------
// This function
//whichRadio = WHICHRADIO_LORA;  hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh will need to add back if comm loss
//==============================================================================
void CommSupTask(void)
{
    f438:	b580      	push	{r7, lr}
    f43a:	af00      	add	r7, sp, #0
 	
	if ((setCW == 0)&&(setTXContinuous==0)&&(setRXContinuous==0))
    f43c:	4b23      	ldr	r3, [pc, #140]	; (f4cc <CommSupTask+0x94>)
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	2b00      	cmp	r3, #0
    f442:	d141      	bne.n	f4c8 <CommSupTask+0x90>
    f444:	4b22      	ldr	r3, [pc, #136]	; (f4d0 <CommSupTask+0x98>)
    f446:	781b      	ldrb	r3, [r3, #0]
    f448:	2b00      	cmp	r3, #0
    f44a:	d13d      	bne.n	f4c8 <CommSupTask+0x90>
    f44c:	4b21      	ldr	r3, [pc, #132]	; (f4d4 <CommSupTask+0x9c>)
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	2b00      	cmp	r3, #0
    f452:	d139      	bne.n	f4c8 <CommSupTask+0x90>
	{
		commErrorCount++;
    f454:	4b20      	ldr	r3, [pc, #128]	; (f4d8 <CommSupTask+0xa0>)
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	3301      	adds	r3, #1
    f45a:	b2da      	uxtb	r2, r3
    f45c:	4b1e      	ldr	r3, [pc, #120]	; (f4d8 <CommSupTask+0xa0>)
    f45e:	701a      	strb	r2, [r3, #0]
		if (commErrorCount > 20)
    f460:	4b1d      	ldr	r3, [pc, #116]	; (f4d8 <CommSupTask+0xa0>)
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	2b14      	cmp	r3, #20
    f466:	d92b      	bls.n	f4c0 <CommSupTask+0x88>
		{
			commErrorCount = 0; 
    f468:	4b1b      	ldr	r3, [pc, #108]	; (f4d8 <CommSupTask+0xa0>)
    f46a:	2200      	movs	r2, #0
    f46c:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_COMMERROR; 
    f46e:	4b1b      	ldr	r3, [pc, #108]	; (f4dc <CommSupTask+0xa4>)
    f470:	791b      	ldrb	r3, [r3, #4]
    f472:	2201      	movs	r2, #1
    f474:	4313      	orrs	r3, r2
    f476:	b2da      	uxtb	r2, r3
    f478:	4b18      	ldr	r3, [pc, #96]	; (f4dc <CommSupTask+0xa4>)
    f47a:	711a      	strb	r2, [r3, #4]
	#if REMOTEBOARD		
			eventMessageReceived = 1; 
			AppScreenUpdateHome();	
	#endif	
			CommInit();	
    f47c:	4b18      	ldr	r3, [pc, #96]	; (f4e0 <CommSupTask+0xa8>)
    f47e:	4798      	blx	r3
			SX1272Init(whichRadio);
    f480:	4b18      	ldr	r3, [pc, #96]	; (f4e4 <CommSupTask+0xac>)
    f482:	781b      	ldrb	r3, [r3, #0]
    f484:	1c18      	adds	r0, r3, #0
    f486:	4b18      	ldr	r3, [pc, #96]	; (f4e8 <CommSupTask+0xb0>)
    f488:	4798      	blx	r3
	#if BRAKEBOARD	
		
			if (whichRadio == WHICHRADIO_LORA)
    f48a:	4b16      	ldr	r3, [pc, #88]	; (f4e4 <CommSupTask+0xac>)
    f48c:	781b      	ldrb	r3, [r3, #0]
    f48e:	2b99      	cmp	r3, #153	; 0x99
    f490:	d102      	bne.n	f498 <CommSupTask+0x60>
			{					 
				AppLoraReceiveStart();
    f492:	4b16      	ldr	r3, [pc, #88]	; (f4ec <CommSupTask+0xb4>)
    f494:	4798      	blx	r3
    f496:	e001      	b.n	f49c <CommSupTask+0x64>
			}
			else
			{
				AppFskReceiveStart();
    f498:	4b15      	ldr	r3, [pc, #84]	; (f4f0 <CommSupTask+0xb8>)
    f49a:	4798      	blx	r3
			}
			commSupTimer = COMM_SUP_TIME; 
    f49c:	4b15      	ldr	r3, [pc, #84]	; (f4f4 <CommSupTask+0xbc>)
    f49e:	22fa      	movs	r2, #250	; 0xfa
    f4a0:	0052      	lsls	r2, r2, #1
    f4a2:	801a      	strh	r2, [r3, #0]
	#endif
			commFailureCount++;
    f4a4:	4b14      	ldr	r3, [pc, #80]	; (f4f8 <CommSupTask+0xc0>)
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	3301      	adds	r3, #1
    f4aa:	b2da      	uxtb	r2, r3
    f4ac:	4b12      	ldr	r3, [pc, #72]	; (f4f8 <CommSupTask+0xc0>)
    f4ae:	701a      	strb	r2, [r3, #0]
			if (commFailureCount>30)
    f4b0:	4b11      	ldr	r3, [pc, #68]	; (f4f8 <CommSupTask+0xc0>)
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	2b1e      	cmp	r3, #30
    f4b6:	d907      	bls.n	f4c8 <CommSupTask+0x90>
			{
				commFailureCount =  0;
    f4b8:	4b0f      	ldr	r3, [pc, #60]	; (f4f8 <CommSupTask+0xc0>)
    f4ba:	2200      	movs	r2, #0
    f4bc:	701a      	strb	r2, [r3, #0]
    f4be:	e003      	b.n	f4c8 <CommSupTask+0x90>
			}	
		}	
		else
		{
	#if BRAKEBOARD	
			commSupTimer = COMM_SUP_TIME; 
    f4c0:	4b0c      	ldr	r3, [pc, #48]	; (f4f4 <CommSupTask+0xbc>)
    f4c2:	22fa      	movs	r2, #250	; 0xfa
    f4c4:	0052      	lsls	r2, r2, #1
    f4c6:	801a      	strh	r2, [r3, #0]
	#endif		
		}
	}
}
    f4c8:	46bd      	mov	sp, r7
    f4ca:	bd80      	pop	{r7, pc}
    f4cc:	20003690 	.word	0x20003690
    f4d0:	20003693 	.word	0x20003693
    f4d4:	20003691 	.word	0x20003691
    f4d8:	200036b1 	.word	0x200036b1
    f4dc:	20003694 	.word	0x20003694
    f4e0:	0000f4fd 	.word	0x0000f4fd
    f4e4:	200036d2 	.word	0x200036d2
    f4e8:	00011b3d 	.word	0x00011b3d
    f4ec:	00011041 	.word	0x00011041
    f4f0:	00010265 	.word	0x00010265
    f4f4:	200036ba 	.word	0x200036ba
    f4f8:	200036b8 	.word	0x200036b8

0000f4fc <CommInit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void CommInit(void)
{
    f4fc:	b580      	push	{r7, lr}
    f4fe:	b082      	sub	sp, #8
    f500:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	if ((setCW != 0))
    f502:	4b25      	ldr	r3, [pc, #148]	; (f598 <CommInit+0x9c>)
    f504:	781b      	ldrb	r3, [r3, #0]
    f506:	2b00      	cmp	r3, #0
    f508:	d002      	beq.n	f510 <CommInit+0x14>
	{
		whichRadio = WHICHRADIO_FSK;
    f50a:	4b24      	ldr	r3, [pc, #144]	; (f59c <CommInit+0xa0>)
    f50c:	2288      	movs	r2, #136	; 0x88
    f50e:	701a      	strb	r2, [r3, #0]
	}
		
//	whichRadio = WHICHRADIO_FSK;  //TESTTINTGGGGGT
	port_get_config_defaults(&pin_conf);
    f510:	1d3b      	adds	r3, r7, #4
    f512:	1c18      	adds	r0, r3, #0
    f514:	4b22      	ldr	r3, [pc, #136]	; (f5a0 <CommInit+0xa4>)
    f516:	4798      	blx	r3
	// X-MOSI = output = PA4
	// X-MISO = input = PA7
	// X-SCK = output = PA5
	// X-DIO0 = input ? = PB9
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f518:	1d3b      	adds	r3, r7, #4
    f51a:	2201      	movs	r2, #1
    f51c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
    f51e:	1d3b      	adds	r3, r7, #4
    f520:	2028      	movs	r0, #40	; 0x28
    f522:	1c19      	adds	r1, r3, #0
    f524:	4b1f      	ldr	r3, [pc, #124]	; (f5a4 <CommInit+0xa8>)
    f526:	4798      	blx	r3
	port_pin_set_output_level(LORA_XRESET, 0);
    f528:	2028      	movs	r0, #40	; 0x28
    f52a:	2100      	movs	r1, #0
    f52c:	4b1e      	ldr	r3, [pc, #120]	; (f5a8 <CommInit+0xac>)
    f52e:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f530:	1d3b      	adds	r3, r7, #4
    f532:	2200      	movs	r2, #0
    f534:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XDIO0, &pin_conf);
    f536:	1d3b      	adds	r3, r7, #4
    f538:	2029      	movs	r0, #41	; 0x29
    f53a:	1c19      	adds	r1, r3, #0
    f53c:	4b19      	ldr	r3, [pc, #100]	; (f5a4 <CommInit+0xa8>)
    f53e:	4798      	blx	r3
	port_pin_set_config(LORA_XDIO1, &pin_conf);
    f540:	1d3b      	adds	r3, r7, #4
    f542:	2011      	movs	r0, #17
    f544:	1c19      	adds	r1, r3, #0
    f546:	4b17      	ldr	r3, [pc, #92]	; (f5a4 <CommInit+0xa8>)
    f548:	4798      	blx	r3
	SPIXConfigure();
    f54a:	4b18      	ldr	r3, [pc, #96]	; (f5ac <CommInit+0xb0>)
    f54c:	4798      	blx	r3
	SPIXMain();
    f54e:	4b18      	ldr	r3, [pc, #96]	; (f5b0 <CommInit+0xb4>)
    f550:	4798      	blx	r3

	SX1272Init(whichRadio); 
    f552:	4b12      	ldr	r3, [pc, #72]	; (f59c <CommInit+0xa0>)
    f554:	781b      	ldrb	r3, [r3, #0]
    f556:	1c18      	adds	r0, r3, #0
    f558:	4b16      	ldr	r3, [pc, #88]	; (f5b4 <CommInit+0xb8>)
    f55a:	4798      	blx	r3
	if ((setCW == 0))	
    f55c:	4b0e      	ldr	r3, [pc, #56]	; (f598 <CommInit+0x9c>)
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	2b00      	cmp	r3, #0
    f562:	d108      	bne.n	f576 <CommInit+0x7a>
	{
		if (whichRadio == WHICHRADIO_LORA)
    f564:	4b0d      	ldr	r3, [pc, #52]	; (f59c <CommInit+0xa0>)
    f566:	781b      	ldrb	r3, [r3, #0]
    f568:	2b99      	cmp	r3, #153	; 0x99
    f56a:	d102      	bne.n	f572 <CommInit+0x76>
		{
			AppLoraReceiveStart();
    f56c:	4b12      	ldr	r3, [pc, #72]	; (f5b8 <CommInit+0xbc>)
    f56e:	4798      	blx	r3
    f570:	e001      	b.n	f576 <CommInit+0x7a>
		}
		else
		{
			AppFskReceiveStart();
    f572:	4b12      	ldr	r3, [pc, #72]	; (f5bc <CommInit+0xc0>)
    f574:	4798      	blx	r3
		}
	}
	if (setTXContinuous!=0)
    f576:	4b12      	ldr	r3, [pc, #72]	; (f5c0 <CommInit+0xc4>)
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	2b00      	cmp	r3, #0
    f57c:	d001      	beq.n	f582 <CommInit+0x86>
	{	
		SendOneMessage();
    f57e:	4b11      	ldr	r3, [pc, #68]	; (f5c4 <CommInit+0xc8>)
    f580:	4798      	blx	r3
#if REMOTEBOARD
	commSupTimer = 0; 
	commErrorCount = 2; 	
#endif
#if BRAKEBOARD
	commSupTimer = COMM_SUP_TIME; 
    f582:	4b11      	ldr	r3, [pc, #68]	; (f5c8 <CommInit+0xcc>)
    f584:	22fa      	movs	r2, #250	; 0xfa
    f586:	0052      	lsls	r2, r2, #1
    f588:	801a      	strh	r2, [r3, #0]
	commErrorCount = 0; 	
    f58a:	4b10      	ldr	r3, [pc, #64]	; (f5cc <CommInit+0xd0>)
    f58c:	2200      	movs	r2, #0
    f58e:	701a      	strb	r2, [r3, #0]
#endif	

}
    f590:	46bd      	mov	sp, r7
    f592:	b002      	add	sp, #8
    f594:	bd80      	pop	{r7, pc}
    f596:	46c0      	nop			; (mov r8, r8)
    f598:	20003690 	.word	0x20003690
    f59c:	200036d2 	.word	0x200036d2
    f5a0:	0000e975 	.word	0x0000e975
    f5a4:	00011dbd 	.word	0x00011dbd
    f5a8:	0000e995 	.word	0x0000e995
    f5ac:	0000e54d 	.word	0x0000e54d
    f5b0:	0000e5e1 	.word	0x0000e5e1
    f5b4:	00011b3d 	.word	0x00011b3d
    f5b8:	00011041 	.word	0x00011041
    f5bc:	00010265 	.word	0x00010265
    f5c0:	20003693 	.word	0x20003693
    f5c4:	0000aee1 	.word	0x0000aee1
    f5c8:	200036ba 	.word	0x200036ba
    f5cc:	200036b1 	.word	0x200036b1

0000f5d0 <AppStatusInitialization>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusInitialization(void)
{
    f5d0:	b580      	push	{r7, lr}
    f5d2:	af00      	add	r7, sp, #0
	//-----------------------
	// Tire radio status 
	// bit 0 = init of the tire radio has been done
	// bit 1 = successful comm with the RF433 chip 
	// bit 2 = received a packet via the RF433 chip 
	statusData.TireRadio = 0; 
    f5d4:	4b14      	ldr	r3, [pc, #80]	; (f628 <AppStatusInitialization+0x58>)
    f5d6:	2200      	movs	r2, #0
    f5d8:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusData.Accelerometer = 0;
    f5da:	4b13      	ldr	r3, [pc, #76]	; (f628 <AppStatusInitialization+0x58>)
    f5dc:	2200      	movs	r2, #0
    f5de:	70da      	strb	r2, [r3, #3]
	statusData.EEPROM = 0;
    f5e0:	4b11      	ldr	r3, [pc, #68]	; (f628 <AppStatusInitialization+0x58>)
    f5e2:	2200      	movs	r2, #0
    f5e4:	709a      	strb	r2, [r3, #2]
	statusData.ExtRadio = 0;
    f5e6:	4b10      	ldr	r3, [pc, #64]	; (f628 <AppStatusInitialization+0x58>)
    f5e8:	2200      	movs	r2, #0
    f5ea:	705a      	strb	r2, [r3, #1]

	statusBrake.TireRadio = 0;
    f5ec:	4b0f      	ldr	r3, [pc, #60]	; (f62c <AppStatusInitialization+0x5c>)
    f5ee:	2200      	movs	r2, #0
    f5f0:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusBrake.Accelerometer = 0;
    f5f2:	4b0e      	ldr	r3, [pc, #56]	; (f62c <AppStatusInitialization+0x5c>)
    f5f4:	2200      	movs	r2, #0
    f5f6:	70da      	strb	r2, [r3, #3]
	statusBrake.EEPROM = 0;
    f5f8:	4b0c      	ldr	r3, [pc, #48]	; (f62c <AppStatusInitialization+0x5c>)
    f5fa:	2200      	movs	r2, #0
    f5fc:	709a      	strb	r2, [r3, #2]
	statusBrake.ExtRadio = 0;	
    f5fe:	4b0b      	ldr	r3, [pc, #44]	; (f62c <AppStatusInitialization+0x5c>)
    f600:	2200      	movs	r2, #0
    f602:	705a      	strb	r2, [r3, #1]
	//----------------brake status 
	brakeStatus.VoltageInput = 0;
    f604:	4b0a      	ldr	r3, [pc, #40]	; (f630 <AppStatusInitialization+0x60>)
    f606:	2200      	movs	r2, #0
    f608:	701a      	strb	r2, [r3, #0]
	brakeStatus.AccelerometerStatus = 0;
    f60a:	4b09      	ldr	r3, [pc, #36]	; (f630 <AppStatusInitialization+0x60>)
    f60c:	2200      	movs	r2, #0
    f60e:	70da      	strb	r2, [r3, #3]
	brakeStatus.ActuatorStatus = 0; 
    f610:	4b07      	ldr	r3, [pc, #28]	; (f630 <AppStatusInitialization+0x60>)
    f612:	2200      	movs	r2, #0
    f614:	709a      	strb	r2, [r3, #2]
	brakeStatus.BrakeState = 0;
    f616:	4b06      	ldr	r3, [pc, #24]	; (f630 <AppStatusInitialization+0x60>)
    f618:	2200      	movs	r2, #0
    f61a:	711a      	strb	r2, [r3, #4]
	brakeStatus.VoltageSupercap = 0; 
    f61c:	4b04      	ldr	r3, [pc, #16]	; (f630 <AppStatusInitialization+0x60>)
    f61e:	2200      	movs	r2, #0
    f620:	705a      	strb	r2, [r3, #1]
}
    f622:	46bd      	mov	sp, r7
    f624:	bd80      	pop	{r7, pc}
    f626:	46c0      	nop			; (mov r8, r8)
    f628:	200036cc 	.word	0x200036cc
    f62c:	200036ac 	.word	0x200036ac
    f630:	20003694 	.word	0x20003694

0000f634 <AppStatusUpdate>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusUpdate(uint8_t whichInterface,uint8_t statusUpdate,uint8_t good)
{
    f634:	b580      	push	{r7, lr}
    f636:	b082      	sub	sp, #8
    f638:	af00      	add	r7, sp, #0
    f63a:	1dfb      	adds	r3, r7, #7
    f63c:	7018      	strb	r0, [r3, #0]
    f63e:	1dbb      	adds	r3, r7, #6
    f640:	7019      	strb	r1, [r3, #0]
    f642:	1d7b      	adds	r3, r7, #5
    f644:	701a      	strb	r2, [r3, #0]
	switch (whichInterface)
    f646:	1dfb      	adds	r3, r7, #7
    f648:	781b      	ldrb	r3, [r3, #0]
    f64a:	2b03      	cmp	r3, #3
    f64c:	d01d      	beq.n	f68a <AppStatusUpdate+0x56>
    f64e:	2b04      	cmp	r3, #4
    f650:	d035      	beq.n	f6be <AppStatusUpdate+0x8a>
    f652:	2b01      	cmp	r3, #1
    f654:	d14d      	bne.n	f6f2 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f656:	1d7b      	adds	r3, r7, #5
    f658:	781b      	ldrb	r3, [r3, #0]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d008      	beq.n	f670 <AppStatusUpdate+0x3c>
			{
				statusData.TireRadio |= statusUpdate; 
    f65e:	4b26      	ldr	r3, [pc, #152]	; (f6f8 <AppStatusUpdate+0xc4>)
    f660:	781a      	ldrb	r2, [r3, #0]
    f662:	1dbb      	adds	r3, r7, #6
    f664:	781b      	ldrb	r3, [r3, #0]
    f666:	4313      	orrs	r3, r2
    f668:	b2da      	uxtb	r2, r3
    f66a:	4b23      	ldr	r3, [pc, #140]	; (f6f8 <AppStatusUpdate+0xc4>)
    f66c:	701a      	strb	r2, [r3, #0]
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
			}
			break;
    f66e:	e040      	b.n	f6f2 <AppStatusUpdate+0xbe>
			{
				statusData.TireRadio |= statusUpdate; 
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
    f670:	4b21      	ldr	r3, [pc, #132]	; (f6f8 <AppStatusUpdate+0xc4>)
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	b2db      	uxtb	r3, r3
    f676:	1dba      	adds	r2, r7, #6
    f678:	7812      	ldrb	r2, [r2, #0]
    f67a:	43d2      	mvns	r2, r2
    f67c:	b2d2      	uxtb	r2, r2
    f67e:	4013      	ands	r3, r2
    f680:	b2db      	uxtb	r3, r3
    f682:	b2da      	uxtb	r2, r3
    f684:	4b1c      	ldr	r3, [pc, #112]	; (f6f8 <AppStatusUpdate+0xc4>)
    f686:	701a      	strb	r2, [r3, #0]
			}
			break;
    f688:	e033      	b.n	f6f2 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f68a:	1d7b      	adds	r3, r7, #5
    f68c:	781b      	ldrb	r3, [r3, #0]
    f68e:	2b00      	cmp	r3, #0
    f690:	d008      	beq.n	f6a4 <AppStatusUpdate+0x70>
			{
				statusData.EEPROM |= statusUpdate; 
    f692:	4b19      	ldr	r3, [pc, #100]	; (f6f8 <AppStatusUpdate+0xc4>)
    f694:	789a      	ldrb	r2, [r3, #2]
    f696:	1dbb      	adds	r3, r7, #6
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	4313      	orrs	r3, r2
    f69c:	b2da      	uxtb	r2, r3
    f69e:	4b16      	ldr	r3, [pc, #88]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6a0:	709a      	strb	r2, [r3, #2]
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
			}
			break;
    f6a2:	e026      	b.n	f6f2 <AppStatusUpdate+0xbe>
			{
				statusData.EEPROM |= statusUpdate; 
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
    f6a4:	4b14      	ldr	r3, [pc, #80]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6a6:	789b      	ldrb	r3, [r3, #2]
    f6a8:	b2db      	uxtb	r3, r3
    f6aa:	1dba      	adds	r2, r7, #6
    f6ac:	7812      	ldrb	r2, [r2, #0]
    f6ae:	43d2      	mvns	r2, r2
    f6b0:	b2d2      	uxtb	r2, r2
    f6b2:	4013      	ands	r3, r2
    f6b4:	b2db      	uxtb	r3, r3
    f6b6:	b2da      	uxtb	r2, r3
    f6b8:	4b0f      	ldr	r3, [pc, #60]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6ba:	709a      	strb	r2, [r3, #2]
			}
			break;
    f6bc:	e019      	b.n	f6f2 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f6be:	1d7b      	adds	r3, r7, #5
    f6c0:	781b      	ldrb	r3, [r3, #0]
    f6c2:	2b00      	cmp	r3, #0
    f6c4:	d008      	beq.n	f6d8 <AppStatusUpdate+0xa4>
			{
				statusData.Accelerometer |= statusUpdate; 
    f6c6:	4b0c      	ldr	r3, [pc, #48]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6c8:	78da      	ldrb	r2, [r3, #3]
    f6ca:	1dbb      	adds	r3, r7, #6
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	4313      	orrs	r3, r2
    f6d0:	b2da      	uxtb	r2, r3
    f6d2:	4b09      	ldr	r3, [pc, #36]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6d4:	70da      	strb	r2, [r3, #3]
    f6d6:	e00b      	b.n	f6f0 <AppStatusUpdate+0xbc>
			}		
			else
			{
				statusData.Accelerometer &= ~statusUpdate; 
    f6d8:	4b07      	ldr	r3, [pc, #28]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6da:	78db      	ldrb	r3, [r3, #3]
    f6dc:	b2db      	uxtb	r3, r3
    f6de:	1dba      	adds	r2, r7, #6
    f6e0:	7812      	ldrb	r2, [r2, #0]
    f6e2:	43d2      	mvns	r2, r2
    f6e4:	b2d2      	uxtb	r2, r2
    f6e6:	4013      	ands	r3, r2
    f6e8:	b2db      	uxtb	r3, r3
    f6ea:	b2da      	uxtb	r2, r3
    f6ec:	4b02      	ldr	r3, [pc, #8]	; (f6f8 <AppStatusUpdate+0xc4>)
    f6ee:	70da      	strb	r2, [r3, #3]
			}
			break;
    f6f0:	46c0      	nop			; (mov r8, r8)
		}					
	}
}
    f6f2:	46bd      	mov	sp, r7
    f6f4:	b002      	add	sp, #8
    f6f6:	bd80      	pop	{r7, pc}
    f6f8:	200036cc 	.word	0x200036cc

0000f6fc <tc_callback_to_toggle_led>:
//
//============================================================================== 
uint8_t minute=0;
uint8_t toggle; 
void tc_callback_to_toggle_led(struct tc_module *const module_inst)
{
    f6fc:	b580      	push	{r7, lr}
    f6fe:	b082      	sub	sp, #8
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
	wdt_reset_count();
    f704:	4bca      	ldr	r3, [pc, #808]	; (fa30 <tc_callback_to_toggle_led+0x334>)
    f706:	4798      	blx	r3
	{
		timerAccelerometer = 0;
		schedByte |= SCHEDBYTE_ACCELEROMETER;
	}	
#else
	schedByte |= SCHEDBYTE_ACCELEROMETER;
    f708:	4bca      	ldr	r3, [pc, #808]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f70a:	681b      	ldr	r3, [r3, #0]
    f70c:	2280      	movs	r2, #128	; 0x80
    f70e:	0152      	lsls	r2, r2, #5
    f710:	431a      	orrs	r2, r3
    f712:	4bc8      	ldr	r3, [pc, #800]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f714:	601a      	str	r2, [r3, #0]
#endif
#if BRAKEBOARD
	schedByte |= SCHEDBYTE_BRAKESUP;
    f716:	4bc7      	ldr	r3, [pc, #796]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f718:	681b      	ldr	r3, [r3, #0]
    f71a:	2201      	movs	r2, #1
    f71c:	431a      	orrs	r2, r3
    f71e:	4bc5      	ldr	r3, [pc, #788]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f720:	601a      	str	r2, [r3, #0]
	if (fastVoltageBadTime < VOLTAGEFAST_BAD_TIME)
    f722:	4bc5      	ldr	r3, [pc, #788]	; (fa38 <tc_callback_to_toggle_led+0x33c>)
    f724:	881b      	ldrh	r3, [r3, #0]
    f726:	2b31      	cmp	r3, #49	; 0x31
    f728:	d805      	bhi.n	f736 <tc_callback_to_toggle_led+0x3a>
	{
		fastVoltageBadTime++;
    f72a:	4bc3      	ldr	r3, [pc, #780]	; (fa38 <tc_callback_to_toggle_led+0x33c>)
    f72c:	881b      	ldrh	r3, [r3, #0]
    f72e:	3301      	adds	r3, #1
    f730:	b29a      	uxth	r2, r3
    f732:	4bc1      	ldr	r3, [pc, #772]	; (fa38 <tc_callback_to_toggle_led+0x33c>)
    f734:	801a      	strh	r2, [r3, #0]
	}
	if (brakeHoldOffTime >0)
    f736:	4bc1      	ldr	r3, [pc, #772]	; (fa3c <tc_callback_to_toggle_led+0x340>)
    f738:	881b      	ldrh	r3, [r3, #0]
    f73a:	2b00      	cmp	r3, #0
    f73c:	d005      	beq.n	f74a <tc_callback_to_toggle_led+0x4e>
	{
		brakeHoldOffTime--;
    f73e:	4bbf      	ldr	r3, [pc, #764]	; (fa3c <tc_callback_to_toggle_led+0x340>)
    f740:	881b      	ldrh	r3, [r3, #0]
    f742:	3b01      	subs	r3, #1
    f744:	b29a      	uxth	r2, r3
    f746:	4bbd      	ldr	r3, [pc, #756]	; (fa3c <tc_callback_to_toggle_led+0x340>)
    f748:	801a      	strh	r2, [r3, #0]
	}
	if (blockingTime >0)
    f74a:	4bbd      	ldr	r3, [pc, #756]	; (fa40 <tc_callback_to_toggle_led+0x344>)
    f74c:	881b      	ldrh	r3, [r3, #0]
    f74e:	2b00      	cmp	r3, #0
    f750:	d005      	beq.n	f75e <tc_callback_to_toggle_led+0x62>
	{
		blockingTime--;
    f752:	4bbb      	ldr	r3, [pc, #748]	; (fa40 <tc_callback_to_toggle_led+0x344>)
    f754:	881b      	ldrh	r3, [r3, #0]
    f756:	3b01      	subs	r3, #1
    f758:	b29a      	uxth	r2, r3
    f75a:	4bb9      	ldr	r3, [pc, #740]	; (fa40 <tc_callback_to_toggle_led+0x344>)
    f75c:	801a      	strh	r2, [r3, #0]
	}
	if (loadTime >0)
    f75e:	4bb9      	ldr	r3, [pc, #740]	; (fa44 <tc_callback_to_toggle_led+0x348>)
    f760:	881b      	ldrh	r3, [r3, #0]
    f762:	2b00      	cmp	r3, #0
    f764:	d005      	beq.n	f772 <tc_callback_to_toggle_led+0x76>
	{
		loadTime--;
    f766:	4bb7      	ldr	r3, [pc, #732]	; (fa44 <tc_callback_to_toggle_led+0x348>)
    f768:	881b      	ldrh	r3, [r3, #0]
    f76a:	3b01      	subs	r3, #1
    f76c:	b29a      	uxth	r2, r3
    f76e:	4bb5      	ldr	r3, [pc, #724]	; (fa44 <tc_callback_to_toggle_led+0x348>)
    f770:	801a      	strh	r2, [r3, #0]
#endif	
#endif
//-------------------
// 25 msec tasks
//-------------------	
	twentyfiveMSec++;
    f772:	4bb5      	ldr	r3, [pc, #724]	; (fa48 <tc_callback_to_toggle_led+0x34c>)
    f774:	781b      	ldrb	r3, [r3, #0]
    f776:	3301      	adds	r3, #1
    f778:	b2da      	uxtb	r2, r3
    f77a:	4bb3      	ldr	r3, [pc, #716]	; (fa48 <tc_callback_to_toggle_led+0x34c>)
    f77c:	701a      	strb	r2, [r3, #0]
	if (twentyfiveMSec >= 25)
    f77e:	4bb2      	ldr	r3, [pc, #712]	; (fa48 <tc_callback_to_toggle_led+0x34c>)
    f780:	781b      	ldrb	r3, [r3, #0]
    f782:	2b18      	cmp	r3, #24
    f784:	d919      	bls.n	f7ba <tc_callback_to_toggle_led+0xbe>
	{
#if BRAKEBOARD		
		schedByte|= SCHEDBYTE_BRAKETASK; 
    f786:	4bab      	ldr	r3, [pc, #684]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f788:	681b      	ldr	r3, [r3, #0]
    f78a:	2240      	movs	r2, #64	; 0x40
    f78c:	431a      	orrs	r2, r3
    f78e:	4ba9      	ldr	r3, [pc, #676]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f790:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_TABLESAMPLE; 
    f792:	4bae      	ldr	r3, [pc, #696]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	2204      	movs	r2, #4
    f798:	4313      	orrs	r3, r2
    f79a:	b2da      	uxtb	r2, r3
    f79c:	4bab      	ldr	r3, [pc, #684]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f79e:	701a      	strb	r2, [r3, #0]
		
		if (breakawayHoldTimer > 0)
    f7a0:	4bab      	ldr	r3, [pc, #684]	; (fa50 <tc_callback_to_toggle_led+0x354>)
    f7a2:	881b      	ldrh	r3, [r3, #0]
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d005      	beq.n	f7b4 <tc_callback_to_toggle_led+0xb8>
		{
			breakawayHoldTimer++;
    f7a8:	4ba9      	ldr	r3, [pc, #676]	; (fa50 <tc_callback_to_toggle_led+0x354>)
    f7aa:	881b      	ldrh	r3, [r3, #0]
    f7ac:	3301      	adds	r3, #1
    f7ae:	b29a      	uxth	r2, r3
    f7b0:	4ba7      	ldr	r3, [pc, #668]	; (fa50 <tc_callback_to_toggle_led+0x354>)
    f7b2:	801a      	strh	r2, [r3, #0]
		}
#endif		

		twentyfiveMSec = 0;
    f7b4:	4ba4      	ldr	r3, [pc, #656]	; (fa48 <tc_callback_to_toggle_led+0x34c>)
    f7b6:	2200      	movs	r2, #0
    f7b8:	701a      	strb	r2, [r3, #0]
	}
#if BRAKEBOARD			 
	if (motorOn == TRUE)
    f7ba:	4ba6      	ldr	r3, [pc, #664]	; (fa54 <tc_callback_to_toggle_led+0x358>)
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	2b01      	cmp	r3, #1
    f7c0:	d105      	bne.n	f7ce <tc_callback_to_toggle_led+0xd2>
	{
		schedByte |= SCHEDBYTE_BRAKETASK;
    f7c2:	4b9c      	ldr	r3, [pc, #624]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f7c4:	681b      	ldr	r3, [r3, #0]
    f7c6:	2240      	movs	r2, #64	; 0x40
    f7c8:	431a      	orrs	r2, r3
    f7ca:	4b9a      	ldr	r3, [pc, #616]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f7cc:	601a      	str	r2, [r3, #0]
	}
#endif		
#if BRAKEBOARD	
	ditherTimer++;
    f7ce:	4ba2      	ldr	r3, [pc, #648]	; (fa58 <tc_callback_to_toggle_led+0x35c>)
    f7d0:	881b      	ldrh	r3, [r3, #0]
    f7d2:	3301      	adds	r3, #1
    f7d4:	b29a      	uxth	r2, r3
    f7d6:	4ba0      	ldr	r3, [pc, #640]	; (fa58 <tc_callback_to_toggle_led+0x35c>)
    f7d8:	801a      	strh	r2, [r3, #0]
	if (ditherTimer >= DITHER_TIME)
    f7da:	4b9f      	ldr	r3, [pc, #636]	; (fa58 <tc_callback_to_toggle_led+0x35c>)
    f7dc:	881a      	ldrh	r2, [r3, #0]
    f7de:	4b9f      	ldr	r3, [pc, #636]	; (fa5c <tc_callback_to_toggle_led+0x360>)
    f7e0:	429a      	cmp	r2, r3
    f7e2:	d90f      	bls.n	f804 <tc_callback_to_toggle_led+0x108>
	{	
		ditherTimer = 0;		
    f7e4:	4b9c      	ldr	r3, [pc, #624]	; (fa58 <tc_callback_to_toggle_led+0x35c>)
    f7e6:	2200      	movs	r2, #0
    f7e8:	801a      	strh	r2, [r3, #0]
		schedByte|= SCHEDBYTE_BRAKETASK; 
    f7ea:	4b92      	ldr	r3, [pc, #584]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f7ec:	681b      	ldr	r3, [r3, #0]
    f7ee:	2240      	movs	r2, #64	; 0x40
    f7f0:	431a      	orrs	r2, r3
    f7f2:	4b90      	ldr	r3, [pc, #576]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f7f4:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_DITHER; 
    f7f6:	4b95      	ldr	r3, [pc, #596]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f7f8:	781b      	ldrb	r3, [r3, #0]
    f7fa:	2210      	movs	r2, #16
    f7fc:	4313      	orrs	r3, r2
    f7fe:	b2da      	uxtb	r2, r3
    f800:	4b92      	ldr	r3, [pc, #584]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f802:	701a      	strb	r2, [r3, #0]
	}
#endif 
	
	hundredMSec++;
    f804:	4b96      	ldr	r3, [pc, #600]	; (fa60 <tc_callback_to_toggle_led+0x364>)
    f806:	781b      	ldrb	r3, [r3, #0]
    f808:	3301      	adds	r3, #1
    f80a:	b2da      	uxtb	r2, r3
    f80c:	4b94      	ldr	r3, [pc, #592]	; (fa60 <tc_callback_to_toggle_led+0x364>)
    f80e:	701a      	strb	r2, [r3, #0]
	if (hundredMSec >= 100)
    f810:	4b93      	ldr	r3, [pc, #588]	; (fa60 <tc_callback_to_toggle_led+0x364>)
    f812:	781b      	ldrb	r3, [r3, #0]
    f814:	2b63      	cmp	r3, #99	; 0x63
    f816:	d955      	bls.n	f8c4 <tc_callback_to_toggle_led+0x1c8>
	{
#if BRAKEBOARD
		schedByte |= SCHEDBYTE_TESTSEND;
    f818:	4b86      	ldr	r3, [pc, #536]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f81a:	681b      	ldr	r3, [r3, #0]
    f81c:	2280      	movs	r2, #128	; 0x80
    f81e:	431a      	orrs	r2, r3
    f820:	4b84      	ldr	r3, [pc, #528]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f822:	601a      	str	r2, [r3, #0]
		if (brakeSupTime >0)
    f824:	4b8f      	ldr	r3, [pc, #572]	; (fa64 <tc_callback_to_toggle_led+0x368>)
    f826:	881b      	ldrh	r3, [r3, #0]
    f828:	2b00      	cmp	r3, #0
    f82a:	d010      	beq.n	f84e <tc_callback_to_toggle_led+0x152>
		{
			brakeSupTime--;
    f82c:	4b8d      	ldr	r3, [pc, #564]	; (fa64 <tc_callback_to_toggle_led+0x368>)
    f82e:	881b      	ldrh	r3, [r3, #0]
    f830:	3b01      	subs	r3, #1
    f832:	b29a      	uxth	r2, r3
    f834:	4b8b      	ldr	r3, [pc, #556]	; (fa64 <tc_callback_to_toggle_led+0x368>)
    f836:	801a      	strh	r2, [r3, #0]
			if (brakeSupTime ==0)
    f838:	4b8a      	ldr	r3, [pc, #552]	; (fa64 <tc_callback_to_toggle_led+0x368>)
    f83a:	881b      	ldrh	r3, [r3, #0]
    f83c:	2b00      	cmp	r3, #0
    f83e:	d106      	bne.n	f84e <tc_callback_to_toggle_led+0x152>
			{
				brakeChange |= BRAKECHANGE_SUPTIME;
    f840:	4b82      	ldr	r3, [pc, #520]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f842:	781b      	ldrb	r3, [r3, #0]
    f844:	2202      	movs	r2, #2
    f846:	4313      	orrs	r3, r2
    f848:	b2da      	uxtb	r2, r3
    f84a:	4b80      	ldr	r3, [pc, #512]	; (fa4c <tc_callback_to_toggle_led+0x350>)
    f84c:	701a      	strb	r2, [r3, #0]
			}
		}

#endif		
#if BRAKEBOARD 
		if ((brakeState != BRAKESTATE_RESET)&&(programming ==0))
    f84e:	4b86      	ldr	r3, [pc, #536]	; (fa68 <tc_callback_to_toggle_led+0x36c>)
    f850:	781b      	ldrb	r3, [r3, #0]
    f852:	2b00      	cmp	r3, #0
    f854:	d009      	beq.n	f86a <tc_callback_to_toggle_led+0x16e>
    f856:	4b85      	ldr	r3, [pc, #532]	; (fa6c <tc_callback_to_toggle_led+0x370>)
    f858:	781b      	ldrb	r3, [r3, #0]
    f85a:	2b00      	cmp	r3, #0
    f85c:	d105      	bne.n	f86a <tc_callback_to_toggle_led+0x16e>
		{	
			mainLineTask++;
    f85e:	4b84      	ldr	r3, [pc, #528]	; (fa70 <tc_callback_to_toggle_led+0x374>)
    f860:	781b      	ldrb	r3, [r3, #0]
    f862:	3301      	adds	r3, #1
    f864:	b2da      	uxtb	r2, r3
    f866:	4b82      	ldr	r3, [pc, #520]	; (fa70 <tc_callback_to_toggle_led+0x374>)
    f868:	701a      	strb	r2, [r3, #0]
		if ((programming ==0))
		{
			mainLineTask++;
		}
#endif 		
		if (mainLineTask>10)
    f86a:	4b81      	ldr	r3, [pc, #516]	; (fa70 <tc_callback_to_toggle_led+0x374>)
    f86c:	781b      	ldrb	r3, [r3, #0]
    f86e:	2b0a      	cmp	r3, #10
    f870:	d900      	bls.n	f874 <tc_callback_to_toggle_led+0x178>
		{
			while (1)
			{
				
			}
    f872:	e7fe      	b.n	f872 <tc_callback_to_toggle_led+0x176>
			downloadTimer = 0;
			downloadTime = TRUE; 
		}
		
#endif
		hundredMSec = 0;
    f874:	4b7a      	ldr	r3, [pc, #488]	; (fa60 <tc_callback_to_toggle_led+0x364>)
    f876:	2200      	movs	r2, #0
    f878:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD	
		if (bluetoothHoldTimer100msec > 1)
    f87a:	4b7e      	ldr	r3, [pc, #504]	; (fa74 <tc_callback_to_toggle_led+0x378>)
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	2b01      	cmp	r3, #1
    f880:	d905      	bls.n	f88e <tc_callback_to_toggle_led+0x192>
		{
			bluetoothHoldTimer100msec--;
    f882:	4b7c      	ldr	r3, [pc, #496]	; (fa74 <tc_callback_to_toggle_led+0x378>)
    f884:	781b      	ldrb	r3, [r3, #0]
    f886:	3b01      	subs	r3, #1
    f888:	b2da      	uxtb	r2, r3
    f88a:	4b7a      	ldr	r3, [pc, #488]	; (fa74 <tc_callback_to_toggle_led+0x378>)
    f88c:	701a      	strb	r2, [r3, #0]
		}			
		if (voltageBadTime < VOLTAGE_BAD_TIME)
    f88e:	4b7a      	ldr	r3, [pc, #488]	; (fa78 <tc_callback_to_toggle_led+0x37c>)
    f890:	881b      	ldrh	r3, [r3, #0]
    f892:	2b04      	cmp	r3, #4
    f894:	d805      	bhi.n	f8a2 <tc_callback_to_toggle_led+0x1a6>
		{
			voltageBadTime++;
    f896:	4b78      	ldr	r3, [pc, #480]	; (fa78 <tc_callback_to_toggle_led+0x37c>)
    f898:	881b      	ldrh	r3, [r3, #0]
    f89a:	3301      	adds	r3, #1
    f89c:	b29a      	uxth	r2, r3
    f89e:	4b76      	ldr	r3, [pc, #472]	; (fa78 <tc_callback_to_toggle_led+0x37c>)
    f8a0:	801a      	strh	r2, [r3, #0]
		}
		if (needNewBaselineTimer >0)
    f8a2:	4b76      	ldr	r3, [pc, #472]	; (fa7c <tc_callback_to_toggle_led+0x380>)
    f8a4:	881b      	ldrh	r3, [r3, #0]
    f8a6:	2b00      	cmp	r3, #0
    f8a8:	d009      	beq.n	f8be <tc_callback_to_toggle_led+0x1c2>
		{
			needNewBaselineTimer--;
    f8aa:	4b74      	ldr	r3, [pc, #464]	; (fa7c <tc_callback_to_toggle_led+0x380>)
    f8ac:	881b      	ldrh	r3, [r3, #0]
    f8ae:	3b01      	subs	r3, #1
    f8b0:	b29a      	uxth	r2, r3
    f8b2:	4b72      	ldr	r3, [pc, #456]	; (fa7c <tc_callback_to_toggle_led+0x380>)
    f8b4:	801a      	strh	r2, [r3, #0]
			needNewBaseline = 1; 
    f8b6:	4b72      	ldr	r3, [pc, #456]	; (fa80 <tc_callback_to_toggle_led+0x384>)
    f8b8:	2201      	movs	r2, #1
    f8ba:	701a      	strb	r2, [r3, #0]
    f8bc:	e002      	b.n	f8c4 <tc_callback_to_toggle_led+0x1c8>
		}
		else
		{
			needNewBaseline = 0;
    f8be:	4b70      	ldr	r3, [pc, #448]	; (fa80 <tc_callback_to_toggle_led+0x384>)
    f8c0:	2200      	movs	r2, #0
    f8c2:	701a      	strb	r2, [r3, #0]
		}
#endif		
	}
	timerSecond++;
    f8c4:	4b6f      	ldr	r3, [pc, #444]	; (fa84 <tc_callback_to_toggle_led+0x388>)
    f8c6:	881b      	ldrh	r3, [r3, #0]
    f8c8:	3301      	adds	r3, #1
    f8ca:	b29a      	uxth	r2, r3
    f8cc:	4b6d      	ldr	r3, [pc, #436]	; (fa84 <tc_callback_to_toggle_led+0x388>)
    f8ce:	801a      	strh	r2, [r3, #0]
	if (timerSecond >= 1000)
    f8d0:	4b6c      	ldr	r3, [pc, #432]	; (fa84 <tc_callback_to_toggle_led+0x388>)
    f8d2:	881a      	ldrh	r2, [r3, #0]
    f8d4:	4b61      	ldr	r3, [pc, #388]	; (fa5c <tc_callback_to_toggle_led+0x360>)
    f8d6:	429a      	cmp	r2, r3
    f8d8:	d922      	bls.n	f920 <tc_callback_to_toggle_led+0x224>
	{
#if BRAKEBOARD
//		schedByte |= SCHEDBYTE_TESTSEND;
#endif				
		timerSecond = 0;
    f8da:	4b6a      	ldr	r3, [pc, #424]	; (fa84 <tc_callback_to_toggle_led+0x388>)
    f8dc:	2200      	movs	r2, #0
    f8de:	801a      	strh	r2, [r3, #0]
		minute++;
    f8e0:	4b69      	ldr	r3, [pc, #420]	; (fa88 <tc_callback_to_toggle_led+0x38c>)
    f8e2:	781b      	ldrb	r3, [r3, #0]
    f8e4:	3301      	adds	r3, #1
    f8e6:	b2da      	uxtb	r2, r3
    f8e8:	4b67      	ldr	r3, [pc, #412]	; (fa88 <tc_callback_to_toggle_led+0x38c>)
    f8ea:	701a      	strb	r2, [r3, #0]
		if (minute >= 60)
    f8ec:	4b66      	ldr	r3, [pc, #408]	; (fa88 <tc_callback_to_toggle_led+0x38c>)
    f8ee:	781b      	ldrb	r3, [r3, #0]
    f8f0:	2b3b      	cmp	r3, #59	; 0x3b
    f8f2:	d902      	bls.n	f8fa <tc_callback_to_toggle_led+0x1fe>
		{
			minute = 0;
    f8f4:	4b64      	ldr	r3, [pc, #400]	; (fa88 <tc_callback_to_toggle_led+0x38c>)
    f8f6:	2200      	movs	r2, #0
    f8f8:	701a      	strb	r2, [r3, #0]
		}
//		port_pin_toggle_output_level(BL_KEY_PIN);

		//-----------------one second timer 
		timerRF433++;
    f8fa:	4b64      	ldr	r3, [pc, #400]	; (fa8c <tc_callback_to_toggle_led+0x390>)
    f8fc:	881b      	ldrh	r3, [r3, #0]
    f8fe:	3301      	adds	r3, #1
    f900:	b29a      	uxth	r2, r3
    f902:	4b62      	ldr	r3, [pc, #392]	; (fa8c <tc_callback_to_toggle_led+0x390>)
    f904:	801a      	strh	r2, [r3, #0]
		if (timerRF433>= 30)
    f906:	4b61      	ldr	r3, [pc, #388]	; (fa8c <tc_callback_to_toggle_led+0x390>)
    f908:	881b      	ldrh	r3, [r3, #0]
    f90a:	2b1d      	cmp	r3, #29
    f90c:	d908      	bls.n	f920 <tc_callback_to_toggle_led+0x224>
		{
			timerRF433 = 0;
    f90e:	4b5f      	ldr	r3, [pc, #380]	; (fa8c <tc_callback_to_toggle_led+0x390>)
    f910:	2200      	movs	r2, #0
    f912:	801a      	strh	r2, [r3, #0]
			schedByte |= SCHEDBYTE_RF433;
    f914:	4b47      	ldr	r3, [pc, #284]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f916:	681b      	ldr	r3, [r3, #0]
    f918:	2210      	movs	r2, #16
    f91a:	431a      	orrs	r2, r3
    f91c:	4b45      	ldr	r3, [pc, #276]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f91e:	601a      	str	r2, [r3, #0]
		}

	}
	TickCounter++;
    f920:	4b5b      	ldr	r3, [pc, #364]	; (fa90 <tc_callback_to_toggle_led+0x394>)
    f922:	681b      	ldr	r3, [r3, #0]
    f924:	1c5a      	adds	r2, r3, #1
    f926:	4b5a      	ldr	r3, [pc, #360]	; (fa90 <tc_callback_to_toggle_led+0x394>)
    f928:	601a      	str	r2, [r3, #0]
	if (TickCounter > 20)
    f92a:	4b59      	ldr	r3, [pc, #356]	; (fa90 <tc_callback_to_toggle_led+0x394>)
    f92c:	681b      	ldr	r3, [r3, #0]
    f92e:	2b14      	cmp	r3, #20
    f930:	d908      	bls.n	f944 <tc_callback_to_toggle_led+0x248>
	{
		TickCounter = 0;
    f932:	4b57      	ldr	r3, [pc, #348]	; (fa90 <tc_callback_to_toggle_led+0x394>)
    f934:	2200      	movs	r2, #0
    f936:	601a      	str	r2, [r3, #0]
		schedByte |= SCHEDBYTE_BUTTON;
    f938:	4b3e      	ldr	r3, [pc, #248]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f93a:	681b      	ldr	r3, [r3, #0]
    f93c:	2208      	movs	r2, #8
    f93e:	431a      	orrs	r2, r3
    f940:	4b3c      	ldr	r3, [pc, #240]	; (fa34 <tc_callback_to_toggle_led+0x338>)
    f942:	601a      	str	r2, [r3, #0]
	}
	if (wdog >0)
    f944:	4b53      	ldr	r3, [pc, #332]	; (fa94 <tc_callback_to_toggle_led+0x398>)
    f946:	881b      	ldrh	r3, [r3, #0]
    f948:	2b00      	cmp	r3, #0
    f94a:	d005      	beq.n	f958 <tc_callback_to_toggle_led+0x25c>
	{
		wdog--;
    f94c:	4b51      	ldr	r3, [pc, #324]	; (fa94 <tc_callback_to_toggle_led+0x398>)
    f94e:	881b      	ldrh	r3, [r3, #0]
    f950:	3b01      	subs	r3, #1
    f952:	b29a      	uxth	r2, r3
    f954:	4b4f      	ldr	r3, [pc, #316]	; (fa94 <tc_callback_to_toggle_led+0x398>)
    f956:	801a      	strh	r2, [r3, #0]
		schedByte |= SCHEDBYTE_COMMTOBRAKE;
	}	
#endif	

#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENFLICKER)
    f958:	4b4f      	ldr	r3, [pc, #316]	; (fa98 <tc_callback_to_toggle_led+0x39c>)
    f95a:	781b      	ldrb	r3, [r3, #0]
    f95c:	2b01      	cmp	r3, #1
    f95e:	d123      	bne.n	f9a8 <tc_callback_to_toggle_led+0x2ac>
	{
		flickTimer++;
    f960:	4b4e      	ldr	r3, [pc, #312]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f962:	881b      	ldrh	r3, [r3, #0]
    f964:	3301      	adds	r3, #1
    f966:	b29a      	uxth	r2, r3
    f968:	4b4c      	ldr	r3, [pc, #304]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f96a:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    f96c:	4b4b      	ldr	r3, [pc, #300]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f96e:	881a      	ldrh	r2, [r3, #0]
    f970:	4b3a      	ldr	r3, [pc, #232]	; (fa5c <tc_callback_to_toggle_led+0x360>)
    f972:	429a      	cmp	r2, r3
    f974:	d90b      	bls.n	f98e <tc_callback_to_toggle_led+0x292>
		{
			flickTimer = 0;
    f976:	4b49      	ldr	r3, [pc, #292]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f978:	2200      	movs	r2, #0
    f97a:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    f97c:	202e      	movs	r0, #46	; 0x2e
    f97e:	2100      	movs	r1, #0
    f980:	4b47      	ldr	r3, [pc, #284]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f982:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);			
    f984:	202f      	movs	r0, #47	; 0x2f
    f986:	2101      	movs	r1, #1
    f988:	4b45      	ldr	r3, [pc, #276]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f98a:	4798      	blx	r3
    f98c:	e00c      	b.n	f9a8 <tc_callback_to_toggle_led+0x2ac>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    f98e:	4b43      	ldr	r3, [pc, #268]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f990:	881a      	ldrh	r2, [r3, #0]
    f992:	4b44      	ldr	r3, [pc, #272]	; (faa4 <tc_callback_to_toggle_led+0x3a8>)
    f994:	429a      	cmp	r2, r3
    f996:	d907      	bls.n	f9a8 <tc_callback_to_toggle_led+0x2ac>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    f998:	202e      	movs	r0, #46	; 0x2e
    f99a:	2101      	movs	r1, #1
    f99c:	4b40      	ldr	r3, [pc, #256]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f99e:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    f9a0:	202f      	movs	r0, #47	; 0x2f
    f9a2:	2101      	movs	r1, #1
    f9a4:	4b3e      	ldr	r3, [pc, #248]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f9a6:	4798      	blx	r3
			}
		}
	}	
	if (brakeBiLED == BRAKEBILED_YELLOWFLICKER)
    f9a8:	4b3b      	ldr	r3, [pc, #236]	; (fa98 <tc_callback_to_toggle_led+0x39c>)
    f9aa:	781b      	ldrb	r3, [r3, #0]
    f9ac:	2b07      	cmp	r3, #7
    f9ae:	d123      	bne.n	f9f8 <tc_callback_to_toggle_led+0x2fc>
	{
		flickTimer++;
    f9b0:	4b3a      	ldr	r3, [pc, #232]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f9b2:	881b      	ldrh	r3, [r3, #0]
    f9b4:	3301      	adds	r3, #1
    f9b6:	b29a      	uxth	r2, r3
    f9b8:	4b38      	ldr	r3, [pc, #224]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f9ba:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    f9bc:	4b37      	ldr	r3, [pc, #220]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f9be:	881a      	ldrh	r2, [r3, #0]
    f9c0:	4b26      	ldr	r3, [pc, #152]	; (fa5c <tc_callback_to_toggle_led+0x360>)
    f9c2:	429a      	cmp	r2, r3
    f9c4:	d90b      	bls.n	f9de <tc_callback_to_toggle_led+0x2e2>
		{
			flickTimer = 0;
    f9c6:	4b35      	ldr	r3, [pc, #212]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f9c8:	2200      	movs	r2, #0
    f9ca:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    f9cc:	202e      	movs	r0, #46	; 0x2e
    f9ce:	2100      	movs	r1, #0
    f9d0:	4b33      	ldr	r3, [pc, #204]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f9d2:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, false);			
    f9d4:	202f      	movs	r0, #47	; 0x2f
    f9d6:	2100      	movs	r1, #0
    f9d8:	4b31      	ldr	r3, [pc, #196]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f9da:	4798      	blx	r3
    f9dc:	e00c      	b.n	f9f8 <tc_callback_to_toggle_led+0x2fc>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    f9de:	4b2f      	ldr	r3, [pc, #188]	; (fa9c <tc_callback_to_toggle_led+0x3a0>)
    f9e0:	881a      	ldrh	r2, [r3, #0]
    f9e2:	4b30      	ldr	r3, [pc, #192]	; (faa4 <tc_callback_to_toggle_led+0x3a8>)
    f9e4:	429a      	cmp	r2, r3
    f9e6:	d907      	bls.n	f9f8 <tc_callback_to_toggle_led+0x2fc>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    f9e8:	202e      	movs	r0, #46	; 0x2e
    f9ea:	2101      	movs	r1, #1
    f9ec:	4b2c      	ldr	r3, [pc, #176]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f9ee:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    f9f0:	202f      	movs	r0, #47	; 0x2f
    f9f2:	2101      	movs	r1, #1
    f9f4:	4b2a      	ldr	r3, [pc, #168]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    f9f6:	4798      	blx	r3
			}
		}
	}		
#endif	
#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENSTROBE)
    f9f8:	4b27      	ldr	r3, [pc, #156]	; (fa98 <tc_callback_to_toggle_led+0x39c>)
    f9fa:	781b      	ldrb	r3, [r3, #0]
    f9fc:	2b05      	cmp	r3, #5
    f9fe:	d163      	bne.n	fac8 <tc_callback_to_toggle_led+0x3cc>
	{
		strobeTimer++;
    fa00:	4b29      	ldr	r3, [pc, #164]	; (faa8 <tc_callback_to_toggle_led+0x3ac>)
    fa02:	881b      	ldrh	r3, [r3, #0]
    fa04:	3301      	adds	r3, #1
    fa06:	b29a      	uxth	r2, r3
    fa08:	4b27      	ldr	r3, [pc, #156]	; (faa8 <tc_callback_to_toggle_led+0x3ac>)
    fa0a:	801a      	strh	r2, [r3, #0]
		if (strobeTimer >= STROBETIME)
    fa0c:	4b26      	ldr	r3, [pc, #152]	; (faa8 <tc_callback_to_toggle_led+0x3ac>)
    fa0e:	881a      	ldrh	r2, [r3, #0]
    fa10:	4b26      	ldr	r3, [pc, #152]	; (faac <tc_callback_to_toggle_led+0x3b0>)
    fa12:	429a      	cmp	r2, r3
    fa14:	d94c      	bls.n	fab0 <tc_callback_to_toggle_led+0x3b4>
		{
			strobeTimer = 0;
    fa16:	4b24      	ldr	r3, [pc, #144]	; (faa8 <tc_callback_to_toggle_led+0x3ac>)
    fa18:	2200      	movs	r2, #0
    fa1a:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fa1c:	202e      	movs	r0, #46	; 0x2e
    fa1e:	2100      	movs	r1, #0
    fa20:	4b1f      	ldr	r3, [pc, #124]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    fa22:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);
    fa24:	202f      	movs	r0, #47	; 0x2f
    fa26:	2101      	movs	r1, #1
    fa28:	4b1d      	ldr	r3, [pc, #116]	; (faa0 <tc_callback_to_toggle_led+0x3a4>)
    fa2a:	4798      	blx	r3
    fa2c:	e04c      	b.n	fac8 <tc_callback_to_toggle_led+0x3cc>
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	00005b51 	.word	0x00005b51
    fa34:	2000369c 	.word	0x2000369c
    fa38:	20002ed6 	.word	0x20002ed6
    fa3c:	200036c0 	.word	0x200036c0
    fa40:	200036fc 	.word	0x200036fc
    fa44:	200004b4 	.word	0x200004b4
    fa48:	200036b7 	.word	0x200036b7
    fa4c:	20002eee 	.word	0x20002eee
    fa50:	20002ef2 	.word	0x20002ef2
    fa54:	200004b0 	.word	0x200004b0
    fa58:	20002ed4 	.word	0x20002ed4
    fa5c:	000003e7 	.word	0x000003e7
    fa60:	200036f8 	.word	0x200036f8
    fa64:	200036c4 	.word	0x200036c4
    fa68:	20002ebf 	.word	0x20002ebf
    fa6c:	200004da 	.word	0x200004da
    fa70:	200004db 	.word	0x200004db
    fa74:	200004e2 	.word	0x200004e2
    fa78:	20002ed8 	.word	0x20002ed8
    fa7c:	20000644 	.word	0x20000644
    fa80:	20000000 	.word	0x20000000
    fa84:	200036f6 	.word	0x200036f6
    fa88:	200004e3 	.word	0x200004e3
    fa8c:	200004e0 	.word	0x200004e0
    fa90:	200004dc 	.word	0x200004dc
    fa94:	200036be 	.word	0x200036be
    fa98:	20002ee8 	.word	0x20002ee8
    fa9c:	200036b2 	.word	0x200036b2
    faa0:	0000e995 	.word	0x0000e995
    faa4:	00000383 	.word	0x00000383
    faa8:	200036c6 	.word	0x200036c6
    faac:	000007cf 	.word	0x000007cf
		}
		else
		{
			if (strobeTimer >= STROBEOFF)
    fab0:	4b94      	ldr	r3, [pc, #592]	; (fd04 <tc_callback_to_toggle_led+0x608>)
    fab2:	881b      	ldrh	r3, [r3, #0]
    fab4:	2b63      	cmp	r3, #99	; 0x63
    fab6:	d907      	bls.n	fac8 <tc_callback_to_toggle_led+0x3cc>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fab8:	202e      	movs	r0, #46	; 0x2e
    faba:	2101      	movs	r1, #1
    fabc:	4b92      	ldr	r3, [pc, #584]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fabe:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    fac0:	202f      	movs	r0, #47	; 0x2f
    fac2:	2101      	movs	r1, #1
    fac4:	4b90      	ldr	r3, [pc, #576]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fac6:	4798      	blx	r3
			}
		}
	}
#endif
	blinkTimer++;
    fac8:	4b90      	ldr	r3, [pc, #576]	; (fd0c <tc_callback_to_toggle_led+0x610>)
    faca:	881b      	ldrh	r3, [r3, #0]
    facc:	3301      	adds	r3, #1
    face:	b29a      	uxth	r2, r3
    fad0:	4b8e      	ldr	r3, [pc, #568]	; (fd0c <tc_callback_to_toggle_led+0x610>)
    fad2:	801a      	strh	r2, [r3, #0]
	if (blinkTimer >= BLINKTIME)
    fad4:	4b8d      	ldr	r3, [pc, #564]	; (fd0c <tc_callback_to_toggle_led+0x610>)
    fad6:	881b      	ldrh	r3, [r3, #0]
    fad8:	2bf9      	cmp	r3, #249	; 0xf9
    fada:	d800      	bhi.n	fade <tc_callback_to_toggle_led+0x3e2>
    fadc:	e0d8      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
	{
		blinkTimer = 0;
    fade:	4b8b      	ldr	r3, [pc, #556]	; (fd0c <tc_callback_to_toggle_led+0x610>)
    fae0:	2200      	movs	r2, #0
    fae2:	801a      	strh	r2, [r3, #0]
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
    fae4:	4b8a      	ldr	r3, [pc, #552]	; (fd10 <tc_callback_to_toggle_led+0x614>)
    fae6:	781b      	ldrb	r3, [r3, #0]
    fae8:	2b03      	cmp	r3, #3
    faea:	d003      	beq.n	faf4 <tc_callback_to_toggle_led+0x3f8>
    faec:	4b88      	ldr	r3, [pc, #544]	; (fd10 <tc_callback_to_toggle_led+0x614>)
    faee:	781b      	ldrb	r3, [r3, #0]
    faf0:	2b00      	cmp	r3, #0
    faf2:	d12c      	bne.n	fb4e <tc_callback_to_toggle_led+0x452>
		{
			if (ledBlue == 0)
    faf4:	4b87      	ldr	r3, [pc, #540]	; (fd14 <tc_callback_to_toggle_led+0x618>)
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	2b00      	cmp	r3, #0
    fafa:	d118      	bne.n	fb2e <tc_callback_to_toggle_led+0x432>
			{
				ledBlue = 1; 
    fafc:	4b85      	ldr	r3, [pc, #532]	; (fd14 <tc_callback_to_toggle_led+0x618>)
    fafe:	2201      	movs	r2, #1
    fb00:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, true);
    fb02:	202c      	movs	r0, #44	; 0x2c
    fb04:	2101      	movs	r1, #1
    fb06:	4b80      	ldr	r3, [pc, #512]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb08:	4798      	blx	r3
				if (brakeBlueLED == BRAKEBLUELED_ALTGREEN)
    fb0a:	4b81      	ldr	r3, [pc, #516]	; (fd10 <tc_callback_to_toggle_led+0x614>)
    fb0c:	781b      	ldrb	r3, [r3, #0]
    fb0e:	2b03      	cmp	r3, #3
    fb10:	d104      	bne.n	fb1c <tc_callback_to_toggle_led+0x420>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fb12:	202e      	movs	r0, #46	; 0x2e
    fb14:	2100      	movs	r1, #0
    fb16:	4b7c      	ldr	r3, [pc, #496]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb18:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fb1a:	e0b9      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
				}
				else
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fb1c:	202e      	movs	r0, #46	; 0x2e
    fb1e:	2100      	movs	r1, #0
    fb20:	4b79      	ldr	r3, [pc, #484]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb22:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, false);
    fb24:	202f      	movs	r0, #47	; 0x2f
    fb26:	2100      	movs	r1, #0
    fb28:	4b77      	ldr	r3, [pc, #476]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb2a:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fb2c:	e0b0      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
					port_pin_set_output_level(LED_BIRED_PIN, false);
				}
			}	
			else
			{
				ledBlue = 0;
    fb2e:	4b79      	ldr	r3, [pc, #484]	; (fd14 <tc_callback_to_toggle_led+0x618>)
    fb30:	2200      	movs	r2, #0
    fb32:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, false);
    fb34:	202c      	movs	r0, #44	; 0x2c
    fb36:	2100      	movs	r1, #0
    fb38:	4b73      	ldr	r3, [pc, #460]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb3a:	4798      	blx	r3
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fb3c:	202e      	movs	r0, #46	; 0x2e
    fb3e:	2101      	movs	r1, #1
    fb40:	4b71      	ldr	r3, [pc, #452]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb42:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    fb44:	202f      	movs	r0, #47	; 0x2f
    fb46:	2101      	movs	r1, #1
    fb48:	4b6f      	ldr	r3, [pc, #444]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb4a:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fb4c:	e0a0      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
				port_pin_set_output_level(LED_BIRED_PIN, true);
			}
		}
		else
		{
			switch (brakeBiLED)
    fb4e:	4b72      	ldr	r3, [pc, #456]	; (fd18 <tc_callback_to_toggle_led+0x61c>)
    fb50:	781b      	ldrb	r3, [r3, #0]
    fb52:	2b08      	cmp	r3, #8
    fb54:	d900      	bls.n	fb58 <tc_callback_to_toggle_led+0x45c>
    fb56:	e07a      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
    fb58:	009a      	lsls	r2, r3, #2
    fb5a:	4b70      	ldr	r3, [pc, #448]	; (fd1c <tc_callback_to_toggle_led+0x620>)
    fb5c:	18d3      	adds	r3, r2, r3
    fb5e:	681b      	ldr	r3, [r3, #0]
    fb60:	469f      	mov	pc, r3
			{
				case BRAKEBILED_REDFLASH:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fb62:	202e      	movs	r0, #46	; 0x2e
    fb64:	2101      	movs	r1, #1
    fb66:	4b68      	ldr	r3, [pc, #416]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb68:	4798      	blx	r3
					if (ledBiRed != 0)
    fb6a:	4b6d      	ldr	r3, [pc, #436]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fb6c:	781b      	ldrb	r3, [r3, #0]
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d007      	beq.n	fb82 <tc_callback_to_toggle_led+0x486>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    fb72:	202f      	movs	r0, #47	; 0x2f
    fb74:	2100      	movs	r1, #0
    fb76:	4b64      	ldr	r3, [pc, #400]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb78:	4798      	blx	r3
						ledBiRed = 0;
    fb7a:	4b69      	ldr	r3, [pc, #420]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fb7c:	2200      	movs	r2, #0
    fb7e:	701a      	strb	r2, [r3, #0]
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
						ledBiRed = 1;
					}	
					break;
    fb80:	e065      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
						port_pin_set_output_level(LED_BIRED_PIN, false);
						ledBiRed = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    fb82:	202f      	movs	r0, #47	; 0x2f
    fb84:	2101      	movs	r1, #1
    fb86:	4b60      	ldr	r3, [pc, #384]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb88:	4798      	blx	r3
						ledBiRed = 1;
    fb8a:	4b65      	ldr	r3, [pc, #404]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fb8c:	2201      	movs	r2, #1
    fb8e:	701a      	strb	r2, [r3, #0]
					}	
					break;
    fb90:	e05d      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
				}
				case BRAKEBILED_YELLOWSOLID:
				{
		 			port_pin_set_output_level(LED_BIRED_PIN, false);
    fb92:	202f      	movs	r0, #47	; 0x2f
    fb94:	2100      	movs	r1, #0
    fb96:	4b5c      	ldr	r3, [pc, #368]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fb98:	4798      	blx	r3
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fb9a:	202e      	movs	r0, #46	; 0x2e
    fb9c:	2100      	movs	r1, #0
    fb9e:	4b5a      	ldr	r3, [pc, #360]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fba0:	4798      	blx	r3
					ledBiRed = 0;
    fba2:	4b5f      	ldr	r3, [pc, #380]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fba4:	2200      	movs	r2, #0
    fba6:	701a      	strb	r2, [r3, #0]
					ledBiGreen = 0;
    fba8:	4b5e      	ldr	r3, [pc, #376]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fbaa:	2200      	movs	r2, #0
    fbac:	701a      	strb	r2, [r3, #0]
					break;
    fbae:	e04e      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
				}	
				case BRAKEBILED_YELLOWFLASH:
				{
					if (ledBiRed != 0)
    fbb0:	4b5b      	ldr	r3, [pc, #364]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d00e      	beq.n	fbd6 <tc_callback_to_toggle_led+0x4da>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    fbb8:	202f      	movs	r0, #47	; 0x2f
    fbba:	2100      	movs	r1, #0
    fbbc:	4b52      	ldr	r3, [pc, #328]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fbbe:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fbc0:	202e      	movs	r0, #46	; 0x2e
    fbc2:	2100      	movs	r1, #0
    fbc4:	4b50      	ldr	r3, [pc, #320]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fbc6:	4798      	blx	r3
						ledBiRed = 0;
    fbc8:	4b55      	ldr	r3, [pc, #340]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fbca:	2200      	movs	r2, #0
    fbcc:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 0;
    fbce:	4b55      	ldr	r3, [pc, #340]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fbd0:	2200      	movs	r2, #0
    fbd2:	701a      	strb	r2, [r3, #0]
						port_pin_set_output_level(LED_BIRED_PIN, true);
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
						ledBiRed = 1;
						ledBiGreen = 1;
					}
					break;
    fbd4:	e03b      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
						ledBiRed = 0;
						ledBiGreen = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    fbd6:	202f      	movs	r0, #47	; 0x2f
    fbd8:	2101      	movs	r1, #1
    fbda:	4b4b      	ldr	r3, [pc, #300]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fbdc:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fbde:	202e      	movs	r0, #46	; 0x2e
    fbe0:	2101      	movs	r1, #1
    fbe2:	4b49      	ldr	r3, [pc, #292]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fbe4:	4798      	blx	r3
						ledBiRed = 1;
    fbe6:	4b4e      	ldr	r3, [pc, #312]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fbe8:	2201      	movs	r2, #1
    fbea:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 1;
    fbec:	4b4d      	ldr	r3, [pc, #308]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fbee:	2201      	movs	r2, #1
    fbf0:	701a      	strb	r2, [r3, #0]
					}
					break;
    fbf2:	e02c      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
				}													
				case BRAKEBILED_OFF:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fbf4:	202e      	movs	r0, #46	; 0x2e
    fbf6:	2101      	movs	r1, #1
    fbf8:	4b43      	ldr	r3, [pc, #268]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fbfa:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    fbfc:	202f      	movs	r0, #47	; 0x2f
    fbfe:	2101      	movs	r1, #1
    fc00:	4b41      	ldr	r3, [pc, #260]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc02:	4798      	blx	r3
					ledBiGreen = 1;
    fc04:	4b47      	ldr	r3, [pc, #284]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fc06:	2201      	movs	r2, #1
    fc08:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    fc0a:	4b45      	ldr	r3, [pc, #276]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fc0c:	2201      	movs	r2, #1
    fc0e:	701a      	strb	r2, [r3, #0]
					break;
    fc10:	e01d      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
				}		
				case BRAKEBILED_GREENSOLID:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fc12:	202e      	movs	r0, #46	; 0x2e
    fc14:	2100      	movs	r1, #0
    fc16:	4b3c      	ldr	r3, [pc, #240]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc18:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    fc1a:	202f      	movs	r0, #47	; 0x2f
    fc1c:	2101      	movs	r1, #1
    fc1e:	4b3a      	ldr	r3, [pc, #232]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc20:	4798      	blx	r3
					ledBiGreen = 0;
    fc22:	4b40      	ldr	r3, [pc, #256]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fc24:	2200      	movs	r2, #0
    fc26:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    fc28:	4b3d      	ldr	r3, [pc, #244]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fc2a:	2201      	movs	r2, #1
    fc2c:	701a      	strb	r2, [r3, #0]
					break;
    fc2e:	e00e      	b.n	fc4e <tc_callback_to_toggle_led+0x552>
				}		
				//------ boc V01_23 added red solid
				case BRAKEBILED_REDSOLID:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fc30:	202e      	movs	r0, #46	; 0x2e
    fc32:	2101      	movs	r1, #1
    fc34:	4b34      	ldr	r3, [pc, #208]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc36:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, false);
    fc38:	202f      	movs	r0, #47	; 0x2f
    fc3a:	2100      	movs	r1, #0
    fc3c:	4b32      	ldr	r3, [pc, #200]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc3e:	4798      	blx	r3
					ledBiGreen = 1;
    fc40:	4b38      	ldr	r3, [pc, #224]	; (fd24 <tc_callback_to_toggle_led+0x628>)
    fc42:	2201      	movs	r2, #1
    fc44:	701a      	strb	r2, [r3, #0]
					ledBiRed = 0;
    fc46:	4b36      	ldr	r3, [pc, #216]	; (fd20 <tc_callback_to_toggle_led+0x624>)
    fc48:	2200      	movs	r2, #0
    fc4a:	701a      	strb	r2, [r3, #0]
					break;
    fc4c:	46c0      	nop			; (mov r8, r8)
				}						
			}
			switch (brakeBlueLED)
    fc4e:	4b30      	ldr	r3, [pc, #192]	; (fd10 <tc_callback_to_toggle_led+0x614>)
    fc50:	781b      	ldrb	r3, [r3, #0]
    fc52:	2b01      	cmp	r3, #1
    fc54:	d006      	beq.n	fc64 <tc_callback_to_toggle_led+0x568>
    fc56:	2b02      	cmp	r3, #2
    fc58:	d109      	bne.n	fc6e <tc_callback_to_toggle_led+0x572>
			{
				case BRAKEBLUELED_OFF:
				{
					port_pin_set_output_level(LED_BLUE_PIN, true);
    fc5a:	202c      	movs	r0, #44	; 0x2c
    fc5c:	2101      	movs	r1, #1
    fc5e:	4b2a      	ldr	r3, [pc, #168]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc60:	4798      	blx	r3
					break;
    fc62:	e004      	b.n	fc6e <tc_callback_to_toggle_led+0x572>
				}
				case BRAKEBLUELED_SOLID:
				{
					port_pin_set_output_level(LED_BLUE_PIN, false);
    fc64:	202c      	movs	r0, #44	; 0x2c
    fc66:	2100      	movs	r1, #0
    fc68:	4b27      	ldr	r3, [pc, #156]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc6a:	4798      	blx	r3
					break;
    fc6c:	46c0      	nop			; (mov r8, r8)
				}
			}	
			switch (brakeRedLED)
    fc6e:	4b2e      	ldr	r3, [pc, #184]	; (fd28 <tc_callback_to_toggle_led+0x62c>)
    fc70:	781b      	ldrb	r3, [r3, #0]
    fc72:	2b01      	cmp	r3, #1
    fc74:	d002      	beq.n	fc7c <tc_callback_to_toggle_led+0x580>
    fc76:	2b02      	cmp	r3, #2
    fc78:	d005      	beq.n	fc86 <tc_callback_to_toggle_led+0x58a>
    fc7a:	e009      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
			{
				case BRAKEREDLED_OFF:
				{
					port_pin_set_output_level(LED_RED_PIN, true);
    fc7c:	202d      	movs	r0, #45	; 0x2d
    fc7e:	2101      	movs	r1, #1
    fc80:	4b21      	ldr	r3, [pc, #132]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc82:	4798      	blx	r3
					break;
    fc84:	e004      	b.n	fc90 <tc_callback_to_toggle_led+0x594>
				}
				case BRAKEREDLED_SOLID:
				{
					port_pin_set_output_level(LED_RED_PIN, false);
    fc86:	202d      	movs	r0, #45	; 0x2d
    fc88:	2100      	movs	r1, #0
    fc8a:	4b1f      	ldr	r3, [pc, #124]	; (fd08 <tc_callback_to_toggle_led+0x60c>)
    fc8c:	4798      	blx	r3
					break;
    fc8e:	46c0      	nop			; (mov r8, r8)
				}
			}			
		}
#endif	
	}
	if (adcTimer >0)
    fc90:	4b26      	ldr	r3, [pc, #152]	; (fd2c <tc_callback_to_toggle_led+0x630>)
    fc92:	881b      	ldrh	r3, [r3, #0]
    fc94:	2b00      	cmp	r3, #0
    fc96:	d012      	beq.n	fcbe <tc_callback_to_toggle_led+0x5c2>
	{
		adcTimer--;
    fc98:	4b24      	ldr	r3, [pc, #144]	; (fd2c <tc_callback_to_toggle_led+0x630>)
    fc9a:	881b      	ldrh	r3, [r3, #0]
    fc9c:	3b01      	subs	r3, #1
    fc9e:	b29a      	uxth	r2, r3
    fca0:	4b22      	ldr	r3, [pc, #136]	; (fd2c <tc_callback_to_toggle_led+0x630>)
    fca2:	801a      	strh	r2, [r3, #0]
		if (adcTimer == 0)
    fca4:	4b21      	ldr	r3, [pc, #132]	; (fd2c <tc_callback_to_toggle_led+0x630>)
    fca6:	881b      	ldrh	r3, [r3, #0]
    fca8:	2b00      	cmp	r3, #0
    fcaa:	d108      	bne.n	fcbe <tc_callback_to_toggle_led+0x5c2>
		{
			adcTimeout = 1; 
    fcac:	4b20      	ldr	r3, [pc, #128]	; (fd30 <tc_callback_to_toggle_led+0x634>)
    fcae:	2201      	movs	r2, #1
    fcb0:	701a      	strb	r2, [r3, #0]
			schedByte |= SCHEDBYTE_ADC; 
    fcb2:	4b20      	ldr	r3, [pc, #128]	; (fd34 <tc_callback_to_toggle_led+0x638>)
    fcb4:	681b      	ldr	r3, [r3, #0]
    fcb6:	2220      	movs	r2, #32
    fcb8:	431a      	orrs	r2, r3
    fcba:	4b1e      	ldr	r3, [pc, #120]	; (fd34 <tc_callback_to_toggle_led+0x638>)
    fcbc:	601a      	str	r2, [r3, #0]
		}
	}
		if (commSupTimer>0)
    fcbe:	4b1e      	ldr	r3, [pc, #120]	; (fd38 <tc_callback_to_toggle_led+0x63c>)
    fcc0:	881b      	ldrh	r3, [r3, #0]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d010      	beq.n	fce8 <tc_callback_to_toggle_led+0x5ec>
		{
			commSupTimer--;
    fcc6:	4b1c      	ldr	r3, [pc, #112]	; (fd38 <tc_callback_to_toggle_led+0x63c>)
    fcc8:	881b      	ldrh	r3, [r3, #0]
    fcca:	3b01      	subs	r3, #1
    fccc:	b29a      	uxth	r2, r3
    fcce:	4b1a      	ldr	r3, [pc, #104]	; (fd38 <tc_callback_to_toggle_led+0x63c>)
    fcd0:	801a      	strh	r2, [r3, #0]
			if (commSupTimer == 0)
    fcd2:	4b19      	ldr	r3, [pc, #100]	; (fd38 <tc_callback_to_toggle_led+0x63c>)
    fcd4:	881b      	ldrh	r3, [r3, #0]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d106      	bne.n	fce8 <tc_callback_to_toggle_led+0x5ec>
			{
				schedByte |= SCHEDBYTE_COMMSUP; 	
    fcda:	4b16      	ldr	r3, [pc, #88]	; (fd34 <tc_callback_to_toggle_led+0x638>)
    fcdc:	681b      	ldr	r3, [r3, #0]
    fcde:	2280      	movs	r2, #128	; 0x80
    fce0:	0192      	lsls	r2, r2, #6
    fce2:	431a      	orrs	r2, r3
    fce4:	4b13      	ldr	r3, [pc, #76]	; (fd34 <tc_callback_to_toggle_led+0x638>)
    fce6:	601a      	str	r2, [r3, #0]
			}
		}	
#if BRAKEBOARD		
	if (motorRunTime >0)
    fce8:	4b14      	ldr	r3, [pc, #80]	; (fd3c <tc_callback_to_toggle_led+0x640>)
    fcea:	881b      	ldrh	r3, [r3, #0]
    fcec:	2b00      	cmp	r3, #0
    fcee:	d005      	beq.n	fcfc <tc_callback_to_toggle_led+0x600>
	{
		motorRunTime--;
    fcf0:	4b12      	ldr	r3, [pc, #72]	; (fd3c <tc_callback_to_toggle_led+0x640>)
    fcf2:	881b      	ldrh	r3, [r3, #0]
    fcf4:	3b01      	subs	r3, #1
    fcf6:	b29a      	uxth	r2, r3
    fcf8:	4b10      	ldr	r3, [pc, #64]	; (fd3c <tc_callback_to_toggle_led+0x640>)
    fcfa:	801a      	strh	r2, [r3, #0]
	}		
#endif		
}
    fcfc:	46bd      	mov	sp, r7
    fcfe:	b002      	add	sp, #8
    fd00:	bd80      	pop	{r7, pc}
    fd02:	46c0      	nop			; (mov r8, r8)
    fd04:	200036c6 	.word	0x200036c6
    fd08:	0000e995 	.word	0x0000e995
    fd0c:	200036bc 	.word	0x200036bc
    fd10:	20002eb6 	.word	0x20002eb6
    fd14:	20003692 	.word	0x20003692
    fd18:	20002ee8 	.word	0x20002ee8
    fd1c:	0001853c 	.word	0x0001853c
    fd20:	200036fe 	.word	0x200036fe
    fd24:	200036a0 	.word	0x200036a0
    fd28:	20002eb0 	.word	0x20002eb0
    fd2c:	20003030 	.word	0x20003030
    fd30:	2000300c 	.word	0x2000300c
    fd34:	2000369c 	.word	0x2000369c
    fd38:	200036ba 	.word	0x200036ba
    fd3c:	20002eb2 	.word	0x20002eb2

0000fd40 <configure_tc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc(void)
{
    fd40:	b580      	push	{r7, lr}
    fd42:	b08e      	sub	sp, #56	; 0x38
    fd44:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
 
	tc_get_config_defaults(&config_tc);
    fd46:	1d3b      	adds	r3, r7, #4
    fd48:	1c18      	adds	r0, r3, #0
    fd4a:	4b0f      	ldr	r3, [pc, #60]	; (fd88 <configure_tc+0x48>)
    fd4c:	4798      	blx	r3
 
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    fd4e:	1d3b      	adds	r3, r7, #4
    fd50:	2204      	movs	r2, #4
    fd52:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
    fd54:	1d3b      	adds	r3, r7, #4
    fd56:	2201      	movs	r2, #1
    fd58:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    fd5a:	1d3b      	adds	r3, r7, #4
    fd5c:	22e0      	movs	r2, #224	; 0xe0
    fd5e:	00d2      	lsls	r2, r2, #3
    fd60:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 8;  //9;
    fd62:	1d3a      	adds	r2, r7, #4
    fd64:	2329      	movs	r3, #41	; 0x29
    fd66:	2108      	movs	r1, #8
    fd68:	54d1      	strb	r1, [r2, r3]
//	config_tc.counter_16_bit.value = 200;
//	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
//	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	 
	tc_init(&tc_instance, TC3, &config_tc);
    fd6a:	4908      	ldr	r1, [pc, #32]	; (fd8c <configure_tc+0x4c>)
    fd6c:	4a08      	ldr	r2, [pc, #32]	; (fd90 <configure_tc+0x50>)
    fd6e:	1d3b      	adds	r3, r7, #4
    fd70:	1c08      	adds	r0, r1, #0
    fd72:	1c11      	adds	r1, r2, #0
    fd74:	1c1a      	adds	r2, r3, #0
    fd76:	4b07      	ldr	r3, [pc, #28]	; (fd94 <configure_tc+0x54>)
    fd78:	4798      	blx	r3
	tc_enable(&tc_instance);
    fd7a:	4b04      	ldr	r3, [pc, #16]	; (fd8c <configure_tc+0x4c>)
    fd7c:	1c18      	adds	r0, r3, #0
    fd7e:	4b06      	ldr	r3, [pc, #24]	; (fd98 <configure_tc+0x58>)
    fd80:	4798      	blx	r3
}
    fd82:	46bd      	mov	sp, r7
    fd84:	b00e      	add	sp, #56	; 0x38
    fd86:	bd80      	pop	{r7, pc}
    fd88:	0000ea11 	.word	0x0000ea11
    fd8c:	200036d8 	.word	0x200036d8
    fd90:	42002c00 	.word	0x42002c00
    fd94:	000052d1 	.word	0x000052d1
    fd98:	0000ea99 	.word	0x0000ea99

0000fd9c <configure_tc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc_callbacks(void)
{
    fd9c:	b580      	push	{r7, lr}
    fd9e:	af00      	add	r7, sp, #0
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
    fda0:	4a06      	ldr	r2, [pc, #24]	; (fdbc <configure_tc_callbacks+0x20>)
    fda2:	4b07      	ldr	r3, [pc, #28]	; (fdc0 <configure_tc_callbacks+0x24>)
    fda4:	1c10      	adds	r0, r2, #0
    fda6:	1c19      	adds	r1, r3, #0
    fda8:	2200      	movs	r2, #0
    fdaa:	4b06      	ldr	r3, [pc, #24]	; (fdc4 <configure_tc_callbacks+0x28>)
    fdac:	4798      	blx	r3
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    fdae:	4b03      	ldr	r3, [pc, #12]	; (fdbc <configure_tc_callbacks+0x20>)
    fdb0:	1c18      	adds	r0, r3, #0
    fdb2:	2100      	movs	r1, #0
    fdb4:	4b04      	ldr	r3, [pc, #16]	; (fdc8 <configure_tc_callbacks+0x2c>)
    fdb6:	4798      	blx	r3
}
    fdb8:	46bd      	mov	sp, r7
    fdba:	bd80      	pop	{r7, pc}
    fdbc:	200036d8 	.word	0x200036d8
    fdc0:	0000f6fd 	.word	0x0000f6fd
    fdc4:	00005755 	.word	0x00005755
    fdc8:	0000eaf1 	.word	0x0000eaf1

0000fdcc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    fdcc:	b580      	push	{r7, lr}
    fdce:	b082      	sub	sp, #8
    fdd0:	af00      	add	r7, sp, #0
    fdd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fdd4:	687b      	ldr	r3, [r7, #4]
    fdd6:	2200      	movs	r2, #0
    fdd8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    fdda:	687b      	ldr	r3, [r7, #4]
    fddc:	2200      	movs	r2, #0
    fdde:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	2201      	movs	r2, #1
    fde4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    fde6:	687b      	ldr	r3, [r7, #4]
    fde8:	2201      	movs	r2, #1
    fdea:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    fdec:	687b      	ldr	r3, [r7, #4]
    fdee:	2200      	movs	r2, #0
    fdf0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fdf2:	687b      	ldr	r3, [r7, #4]
    fdf4:	2202      	movs	r2, #2
    fdf6:	72da      	strb	r2, [r3, #11]
}
    fdf8:	46bd      	mov	sp, r7
    fdfa:	b002      	add	sp, #8
    fdfc:	bd80      	pop	{r7, pc}
    fdfe:	46c0      	nop			; (mov r8, r8)

0000fe00 <SX1272FskInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272FskInit( void )
{
    fe00:	b580      	push	{r7, lr}
    fe02:	af00      	add	r7, sp, #0
    RFState = RF_STATE_IDLE;
    fe04:	4b77      	ldr	r3, [pc, #476]	; (ffe4 <SX1272FskInit+0x1e4>)
    fe06:	2200      	movs	r2, #0
    fe08:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio 
	//------------------------
    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fe0a:	4b77      	ldr	r3, [pc, #476]	; (ffe8 <SX1272FskInit+0x1e8>)
    fe0c:	2001      	movs	r0, #1
    fe0e:	1c19      	adds	r1, r3, #0
    fe10:	226f      	movs	r2, #111	; 0x6f
    fe12:	4b76      	ldr	r3, [pc, #472]	; (ffec <SX1272FskInit+0x1ec>)
    fe14:	4798      	blx	r3
//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );	 
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fe16:	4b74      	ldr	r3, [pc, #464]	; (ffe8 <SX1272FskInit+0x1e8>)
    fe18:	2001      	movs	r0, #1
    fe1a:	1c19      	adds	r1, r3, #0
    fe1c:	226f      	movs	r2, #111	; 0x6f
    fe1e:	4b73      	ldr	r3, [pc, #460]	; (ffec <SX1272FskInit+0x1ec>)
    fe20:	4798      	blx	r3
	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
    fe22:	2000      	movs	r0, #0
    fe24:	4b72      	ldr	r3, [pc, #456]	; (fff0 <SX1272FskInit+0x1f0>)
    fe26:	4798      	blx	r3
    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
    fe28:	4b72      	ldr	r3, [pc, #456]	; (fff4 <SX1272FskInit+0x1f4>)
    fe2a:	681a      	ldr	r2, [r3, #0]
    fe2c:	4b71      	ldr	r3, [pc, #452]	; (fff4 <SX1272FskInit+0x1f4>)
    fe2e:	681b      	ldr	r3, [r3, #0]
    fe30:	7859      	ldrb	r1, [r3, #1]
    fe32:	237f      	movs	r3, #127	; 0x7f
    fe34:	400b      	ands	r3, r1
    fe36:	b2db      	uxtb	r3, r3
    fe38:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );    
    fe3a:	4b6e      	ldr	r3, [pc, #440]	; (fff4 <SX1272FskInit+0x1f4>)
    fe3c:	681b      	ldr	r3, [r3, #0]
    fe3e:	785b      	ldrb	r3, [r3, #1]
    fe40:	2001      	movs	r0, #1
    fe42:	1c19      	adds	r1, r3, #0
    fe44:	4b6c      	ldr	r3, [pc, #432]	; (fff8 <SX1272FskInit+0x1f8>)
    fe46:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
    fe48:	4b67      	ldr	r3, [pc, #412]	; (ffe8 <SX1272FskInit+0x1e8>)
    fe4a:	2001      	movs	r0, #1
    fe4c:	1c19      	adds	r1, r3, #0
    fe4e:	226f      	movs	r2, #111	; 0x6f
    fe50:	4b66      	ldr	r3, [pc, #408]	; (ffec <SX1272FskInit+0x1ec>)
    fe52:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register 
	// structure with the value of our setup
	//--------------------------------------
    SX1272->RegPaConfig = ( SX1272->RegPaConfig & ~RF_PACONFIG_PASELECT_PABOOST ) | RF_PACONFIG_PASELECT_PABOOST;
    fe54:	4b67      	ldr	r3, [pc, #412]	; (fff4 <SX1272FskInit+0x1f4>)
    fe56:	681a      	ldr	r2, [r3, #0]
    fe58:	4b66      	ldr	r3, [pc, #408]	; (fff4 <SX1272FskInit+0x1f4>)
    fe5a:	681b      	ldr	r3, [r3, #0]
    fe5c:	7a5b      	ldrb	r3, [r3, #9]
    fe5e:	2180      	movs	r1, #128	; 0x80
    fe60:	4249      	negs	r1, r1
    fe62:	430b      	orrs	r3, r1
    fe64:	b2db      	uxtb	r3, r3
    fe66:	7253      	strb	r3, [r2, #9]
    SX1272->RegLna = RF_LNA_GAIN_G1 | RF_LNA_BOOST_ON;
    fe68:	4b62      	ldr	r3, [pc, #392]	; (fff4 <SX1272FskInit+0x1f4>)
    fe6a:	681b      	ldr	r3, [r3, #0]
    fe6c:	2223      	movs	r2, #35	; 0x23
    fe6e:	731a      	strb	r2, [r3, #12]

    if( FskSettings.AfcOn == true )
    fe70:	4b62      	ldr	r3, [pc, #392]	; (fffc <SX1272FskInit+0x1fc>)
    fe72:	7e5b      	ldrb	r3, [r3, #25]
    fe74:	2b00      	cmp	r3, #0
    fe76:	d004      	beq.n	fe82 <SX1272FskInit+0x82>
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_ON |
    fe78:	4b5e      	ldr	r3, [pc, #376]	; (fff4 <SX1272FskInit+0x1f4>)
    fe7a:	681b      	ldr	r3, [r3, #0]
    fe7c:	221e      	movs	r2, #30
    fe7e:	735a      	strb	r2, [r3, #13]
    fe80:	e003      	b.n	fe8a <SX1272FskInit+0x8a>
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }
    else
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_OFF |
    fe82:	4b5c      	ldr	r3, [pc, #368]	; (fff4 <SX1272FskInit+0x1f4>)
    fe84:	681b      	ldr	r3, [r3, #0]
    fe86:	220e      	movs	r2, #14
    fe88:	735a      	strb	r2, [r3, #13]
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }

    SX1272->RegPreambleLsb = 8;
    fe8a:	4b5a      	ldr	r3, [pc, #360]	; (fff4 <SX1272FskInit+0x1f4>)
    fe8c:	681a      	ldr	r2, [r3, #0]
    fe8e:	2326      	movs	r3, #38	; 0x26
    fe90:	2108      	movs	r1, #8
    fe92:	54d1      	strb	r1, [r2, r3]
    
    SX1272->RegPreambleDetect = RF_PREAMBLEDETECT_DETECTOR_ON | RF_PREAMBLEDETECT_DETECTORSIZE_2 |
    fe94:	4b57      	ldr	r3, [pc, #348]	; (fff4 <SX1272FskInit+0x1f4>)
    fe96:	681b      	ldr	r3, [r3, #0]
    fe98:	22aa      	movs	r2, #170	; 0xaa
    fe9a:	77da      	strb	r2, [r3, #31]
                                RF_PREAMBLEDETECT_DETECTORTOL_10;
    
    SX1272->RegRssiThresh = 0xFF;
    fe9c:	4b55      	ldr	r3, [pc, #340]	; (fff4 <SX1272FskInit+0x1f4>)
    fe9e:	681b      	ldr	r3, [r3, #0]
    fea0:	22ff      	movs	r2, #255	; 0xff
    fea2:	741a      	strb	r2, [r3, #16]

    SX1272->RegSyncConfig = RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON | RF_SYNCCONFIG_PREAMBLEPOLARITY_AA |
    fea4:	4b53      	ldr	r3, [pc, #332]	; (fff4 <SX1272FskInit+0x1f4>)
    fea6:	681a      	ldr	r2, [r3, #0]
    fea8:	2327      	movs	r3, #39	; 0x27
    feaa:	2193      	movs	r1, #147	; 0x93
    feac:	54d1      	strb	r1, [r2, r3]
                            RF_SYNCCONFIG_SYNC_ON | RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO |
                            RF_SYNCCONFIG_SYNCSIZE_4;

    SX1272->RegSyncValue1 = 0x69;
    feae:	4b51      	ldr	r3, [pc, #324]	; (fff4 <SX1272FskInit+0x1f4>)
    feb0:	681a      	ldr	r2, [r3, #0]
    feb2:	2328      	movs	r3, #40	; 0x28
    feb4:	2169      	movs	r1, #105	; 0x69
    feb6:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue2 = 0x81;
    feb8:	4b4e      	ldr	r3, [pc, #312]	; (fff4 <SX1272FskInit+0x1f4>)
    feba:	681a      	ldr	r2, [r3, #0]
    febc:	2329      	movs	r3, #41	; 0x29
    febe:	2181      	movs	r1, #129	; 0x81
    fec0:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue3 = 0x7E;
    fec2:	4b4c      	ldr	r3, [pc, #304]	; (fff4 <SX1272FskInit+0x1f4>)
    fec4:	681a      	ldr	r2, [r3, #0]
    fec6:	232a      	movs	r3, #42	; 0x2a
    fec8:	217e      	movs	r1, #126	; 0x7e
    feca:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue4 = 0x96;
    fecc:	4b49      	ldr	r3, [pc, #292]	; (fff4 <SX1272FskInit+0x1f4>)
    fece:	681a      	ldr	r2, [r3, #0]
    fed0:	232b      	movs	r3, #43	; 0x2b
    fed2:	2196      	movs	r1, #150	; 0x96
    fed4:	54d1      	strb	r1, [r2, r3]

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    fed6:	4b47      	ldr	r3, [pc, #284]	; (fff4 <SX1272FskInit+0x1f4>)
    fed8:	681a      	ldr	r2, [r3, #0]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
    feda:	4b48      	ldr	r3, [pc, #288]	; (fffc <SX1272FskInit+0x1fc>)
    fedc:	7e1b      	ldrb	r3, [r3, #24]
    fede:	011b      	lsls	r3, r3, #4
    SX1272->RegSyncValue1 = 0x69;
    SX1272->RegSyncValue2 = 0x81;
    SX1272->RegSyncValue3 = 0x7E;
    SX1272->RegSyncValue4 = 0x96;

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    fee0:	b2db      	uxtb	r3, r3
    fee2:	2180      	movs	r1, #128	; 0x80
    fee4:	4249      	negs	r1, r1
    fee6:	430b      	orrs	r3, r1
    fee8:	b2db      	uxtb	r3, r3
    feea:	b2d9      	uxtb	r1, r3
    feec:	2330      	movs	r3, #48	; 0x30
    feee:	54d1      	strb	r1, [r2, r3]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
                               RF_PACKETCONFIG1_ADDRSFILTERING_OFF | RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT;
    SX1272FskGetPacketCrcOn( ); 
    fef0:	4b43      	ldr	r3, [pc, #268]	; (10000 <SX1272FskInit+0x200>)
    fef2:	4798      	blx	r3

    SX1272->RegPayloadLength = FskSettings.PayloadLength;
    fef4:	4b3f      	ldr	r3, [pc, #252]	; (fff4 <SX1272FskInit+0x1f4>)
    fef6:	681a      	ldr	r2, [r3, #0]
    fef8:	4b40      	ldr	r3, [pc, #256]	; (fffc <SX1272FskInit+0x1fc>)
    fefa:	7e99      	ldrb	r1, [r3, #26]
    fefc:	2332      	movs	r3, #50	; 0x32
    fefe:	54d1      	strb	r1, [r2, r3]
	//------------------------------------------------------
    // we can now update the registers with our configuration
    SX1272WriteBuffer( REG_OPMODE, SX1272Regs + 1, 0x70 - 1 );
    ff00:	4b39      	ldr	r3, [pc, #228]	; (ffe8 <SX1272FskInit+0x1e8>)
    ff02:	2001      	movs	r0, #1
    ff04:	1c19      	adds	r1, r3, #0
    ff06:	226f      	movs	r2, #111	; 0x6f
    ff08:	4b3e      	ldr	r3, [pc, #248]	; (10004 <SX1272FskInit+0x204>)
    ff0a:	4798      	blx	r3
	//-------------------------------------
    // then we need to set the RF settings 
    SX1272FskSetRFFrequency( FskSettings.RFFrequency );
    ff0c:	4b3b      	ldr	r3, [pc, #236]	; (fffc <SX1272FskInit+0x1fc>)
    ff0e:	681b      	ldr	r3, [r3, #0]
    ff10:	1c18      	adds	r0, r3, #0
    ff12:	4b3d      	ldr	r3, [pc, #244]	; (10008 <SX1272FskInit+0x208>)
    ff14:	4798      	blx	r3
    SX1272FskSetBitrate( FskSettings.Bitrate );
    ff16:	4b39      	ldr	r3, [pc, #228]	; (fffc <SX1272FskInit+0x1fc>)
    ff18:	685b      	ldr	r3, [r3, #4]
    ff1a:	1c18      	adds	r0, r3, #0
    ff1c:	4b3b      	ldr	r3, [pc, #236]	; (1000c <SX1272FskInit+0x20c>)
    ff1e:	4798      	blx	r3
    SX1272FskSetFdev( FskSettings.Fdev );
    ff20:	4b36      	ldr	r3, [pc, #216]	; (fffc <SX1272FskInit+0x1fc>)
    ff22:	689b      	ldr	r3, [r3, #8]
    ff24:	1c18      	adds	r0, r3, #0
    ff26:	4b3a      	ldr	r3, [pc, #232]	; (10010 <SX1272FskInit+0x210>)
    ff28:	4798      	blx	r3
    SX1272FskSetPa20dBm( true );
    ff2a:	2001      	movs	r0, #1
    ff2c:	4b39      	ldr	r3, [pc, #228]	; (10014 <SX1272FskInit+0x214>)
    ff2e:	4798      	blx	r3
    SX1272FskSetRFPower( FskSettings.Power );
    ff30:	4b32      	ldr	r3, [pc, #200]	; (fffc <SX1272FskInit+0x1fc>)
    ff32:	7b1b      	ldrb	r3, [r3, #12]
    ff34:	b25b      	sxtb	r3, r3
    ff36:	1c18      	adds	r0, r3, #0
    ff38:	4b37      	ldr	r3, [pc, #220]	; (10018 <SX1272FskInit+0x218>)
    ff3a:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegRxBw, 0, FskSettings.RxBw );
    ff3c:	4b2d      	ldr	r3, [pc, #180]	; (fff4 <SX1272FskInit+0x1f4>)
    ff3e:	681b      	ldr	r3, [r3, #0]
    ff40:	1c1a      	adds	r2, r3, #0
    ff42:	3212      	adds	r2, #18
    ff44:	4b2d      	ldr	r3, [pc, #180]	; (fffc <SX1272FskInit+0x1fc>)
    ff46:	691b      	ldr	r3, [r3, #16]
    ff48:	1c10      	adds	r0, r2, #0
    ff4a:	2100      	movs	r1, #0
    ff4c:	1c1a      	adds	r2, r3, #0
    ff4e:	4b33      	ldr	r3, [pc, #204]	; (1001c <SX1272FskInit+0x21c>)
    ff50:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegAfcBw, 0, FskSettings.RxBwAfc );
    ff52:	4b28      	ldr	r3, [pc, #160]	; (fff4 <SX1272FskInit+0x1f4>)
    ff54:	681b      	ldr	r3, [r3, #0]
    ff56:	1c1a      	adds	r2, r3, #0
    ff58:	3213      	adds	r2, #19
    ff5a:	4b28      	ldr	r3, [pc, #160]	; (fffc <SX1272FskInit+0x1fc>)
    ff5c:	695b      	ldr	r3, [r3, #20]
    ff5e:	1c10      	adds	r0, r2, #0
    ff60:	2100      	movs	r1, #0
    ff62:	1c1a      	adds	r2, r3, #0
    ff64:	4b2d      	ldr	r3, [pc, #180]	; (1001c <SX1272FskInit+0x21c>)
    ff66:	4798      	blx	r3
    SX1272FskSetRssiOffset( -6 );
    ff68:	2306      	movs	r3, #6
    ff6a:	425b      	negs	r3, r3
    ff6c:	1c18      	adds	r0, r3, #0
    ff6e:	4b2c      	ldr	r3, [pc, #176]	; (10020 <SX1272FskInit+0x220>)
    ff70:	4798      	blx	r3
	SX1272->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | 0x18; // 24 bytes of data
    ff72:	4b20      	ldr	r3, [pc, #128]	; (fff4 <SX1272FskInit+0x1f4>)
    ff74:	681a      	ldr	r2, [r3, #0]
    ff76:	2335      	movs	r3, #53	; 0x35
    ff78:	2198      	movs	r1, #152	; 0x98
    ff7a:	54d1      	strb	r1, [r2, r3]
	SX1272Write( REG_FIFOTHRESH, SX1272->RegFifoThresh );	
    ff7c:	4b1d      	ldr	r3, [pc, #116]	; (fff4 <SX1272FskInit+0x1f4>)
    ff7e:	681a      	ldr	r2, [r3, #0]
    ff80:	2335      	movs	r3, #53	; 0x35
    ff82:	5cd3      	ldrb	r3, [r2, r3]
    ff84:	2035      	movs	r0, #53	; 0x35
    ff86:	1c19      	adds	r1, r3, #0
    ff88:	4b1b      	ldr	r3, [pc, #108]	; (fff8 <SX1272FskInit+0x1f8>)
    ff8a:	4798      	blx	r3

	if (setCW != 0)
    ff8c:	4b25      	ldr	r3, [pc, #148]	; (10024 <SX1272FskInit+0x224>)
    ff8e:	781b      	ldrb	r3, [r3, #0]
    ff90:	2b00      	cmp	r3, #0
    ff92:	d002      	beq.n	ff9a <SX1272FskInit+0x19a>
	{
		SX1272FskSetPacketConfig2(1);  //if non-zero, continuous
    ff94:	2001      	movs	r0, #1
    ff96:	4b24      	ldr	r3, [pc, #144]	; (10028 <SX1272FskInit+0x228>)
    ff98:	4798      	blx	r3
	}

	SX1272FskSetOpMode( RF_OPMODE_STANDBY );
    ff9a:	2001      	movs	r0, #1
    ff9c:	4b14      	ldr	r3, [pc, #80]	; (fff0 <SX1272FskInit+0x1f0>)
    ff9e:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );	
    ffa0:	4b11      	ldr	r3, [pc, #68]	; (ffe8 <SX1272FskInit+0x1e8>)
    ffa2:	2001      	movs	r0, #1
    ffa4:	1c19      	adds	r1, r3, #0
    ffa6:	226f      	movs	r2, #111	; 0x6f
    ffa8:	4b10      	ldr	r3, [pc, #64]	; (ffec <SX1272FskInit+0x1ec>)
    ffaa:	4798      	blx	r3

 
	
	if (setCW != 0)
    ffac:	4b1d      	ldr	r3, [pc, #116]	; (10024 <SX1272FskInit+0x224>)
    ffae:	781b      	ldrb	r3, [r3, #0]
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d014      	beq.n	ffde <SX1272FskInit+0x1de>
	{
//		SX1272FskSetOpMode(RF_OPMODE_TRANSMITTER);
	//------------------
	// turn on transmitter
		SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
    ffb4:	4b0f      	ldr	r3, [pc, #60]	; (fff4 <SX1272FskInit+0x1f4>)
    ffb6:	681a      	ldr	r2, [r3, #0]
    ffb8:	4b0e      	ldr	r3, [pc, #56]	; (fff4 <SX1272FskInit+0x1f4>)
    ffba:	681b      	ldr	r3, [r3, #0]
    ffbc:	785b      	ldrb	r3, [r3, #1]
    ffbe:	b2db      	uxtb	r3, r3
    ffc0:	2107      	movs	r1, #7
    ffc2:	438b      	bics	r3, r1
    ffc4:	b2db      	uxtb	r3, r3
    ffc6:	2103      	movs	r1, #3
    ffc8:	430b      	orrs	r3, r1
    ffca:	b2db      	uxtb	r3, r3
    ffcc:	b2db      	uxtb	r3, r3
    ffce:	7053      	strb	r3, [r2, #1]
		SX1272Write( REG_OPMODE, SX1272->RegOpMode );    		
    ffd0:	4b08      	ldr	r3, [pc, #32]	; (fff4 <SX1272FskInit+0x1f4>)
    ffd2:	681b      	ldr	r3, [r3, #0]
    ffd4:	785b      	ldrb	r3, [r3, #1]
    ffd6:	2001      	movs	r0, #1
    ffd8:	1c19      	adds	r1, r3, #0
    ffda:	4b07      	ldr	r3, [pc, #28]	; (fff8 <SX1272FskInit+0x1f8>)
    ffdc:	4798      	blx	r3
	} 
}
    ffde:	46bd      	mov	sp, r7
    ffe0:	bd80      	pop	{r7, pc}
    ffe2:	46c0      	nop			; (mov r8, r8)
    ffe4:	200004e4 	.word	0x200004e4
    ffe8:	20003909 	.word	0x20003909
    ffec:	00011ab5 	.word	0x00011ab5
    fff0:	0001002d 	.word	0x0001002d
    fff4:	20003700 	.word	0x20003700
    fff8:	00011a0d 	.word	0x00011a0d
    fffc:	2000000c 	.word	0x2000000c
   10000:	00010a95 	.word	0x00010a95
   10004:	00011a7d 	.word	0x00011a7d
   10008:	00010519 	.word	0x00010519
   1000c:	000105a9 	.word	0x000105a9
   10010:	00010631 	.word	0x00010631
   10014:	00010ad9 	.word	0x00010ad9
   10018:	000106b9 	.word	0x000106b9
   1001c:	00010981 	.word	0x00010981
   10020:	00010b35 	.word	0x00010b35
   10024:	20003690 	.word	0x20003690
   10028:	000104d9 	.word	0x000104d9

0001002c <SX1272FskSetOpMode>:

void SX1272FskSetOpMode( uint8_t opMode )
{
   1002c:	b580      	push	{r7, lr}
   1002e:	b082      	sub	sp, #8
   10030:	af00      	add	r7, sp, #0
   10032:	1c02      	adds	r2, r0, #0
   10034:	1dfb      	adds	r3, r7, #7
   10036:	701a      	strb	r2, [r3, #0]
  
        SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | opMode;
   10038:	4b0c      	ldr	r3, [pc, #48]	; (1006c <SX1272FskSetOpMode+0x40>)
   1003a:	681a      	ldr	r2, [r3, #0]
   1003c:	4b0b      	ldr	r3, [pc, #44]	; (1006c <SX1272FskSetOpMode+0x40>)
   1003e:	681b      	ldr	r3, [r3, #0]
   10040:	785b      	ldrb	r3, [r3, #1]
   10042:	b2db      	uxtb	r3, r3
   10044:	2107      	movs	r1, #7
   10046:	438b      	bics	r3, r1
   10048:	b2d9      	uxtb	r1, r3
   1004a:	1dfb      	adds	r3, r7, #7
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	430b      	orrs	r3, r1
   10050:	b2db      	uxtb	r3, r3
   10052:	b2db      	uxtb	r3, r3
   10054:	7053      	strb	r3, [r2, #1]

        SX1272Write( REG_OPMODE, SX1272->RegOpMode );        
   10056:	4b05      	ldr	r3, [pc, #20]	; (1006c <SX1272FskSetOpMode+0x40>)
   10058:	681b      	ldr	r3, [r3, #0]
   1005a:	785b      	ldrb	r3, [r3, #1]
   1005c:	2001      	movs	r0, #1
   1005e:	1c19      	adds	r1, r3, #0
   10060:	4b03      	ldr	r3, [pc, #12]	; (10070 <SX1272FskSetOpMode+0x44>)
   10062:	4798      	blx	r3
}
   10064:	46bd      	mov	sp, r7
   10066:	b002      	add	sp, #8
   10068:	bd80      	pop	{r7, pc}
   1006a:	46c0      	nop			; (mov r8, r8)
   1006c:	20003700 	.word	0x20003700
   10070:	00011a0d 	.word	0x00011a0d

00010074 <configure_extintFSK_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_channel(void)
{
   10074:	b580      	push	{r7, lr}
   10076:	b084      	sub	sp, #16
   10078:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1007a:	1d3b      	adds	r3, r7, #4
   1007c:	1c18      	adds	r0, r3, #0
   1007e:	4b0b      	ldr	r3, [pc, #44]	; (100ac <configure_extintFSK_channel+0x38>)
   10080:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
   10082:	1d3b      	adds	r3, r7, #4
   10084:	2229      	movs	r2, #41	; 0x29
   10086:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
   10088:	1d3b      	adds	r3, r7, #4
   1008a:	2200      	movs	r2, #0
   1008c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1008e:	1d3b      	adds	r3, r7, #4
   10090:	2201      	movs	r2, #1
   10092:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
   10094:	1d3b      	adds	r3, r7, #4
   10096:	2201      	movs	r2, #1
   10098:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
   1009a:	1d3b      	adds	r3, r7, #4
   1009c:	2009      	movs	r0, #9
   1009e:	1c19      	adds	r1, r3, #0
   100a0:	4b03      	ldr	r3, [pc, #12]	; (100b0 <configure_extintFSK_channel+0x3c>)
   100a2:	4798      	blx	r3
}
   100a4:	46bd      	mov	sp, r7
   100a6:	b004      	add	sp, #16
   100a8:	bd80      	pop	{r7, pc}
   100aa:	46c0      	nop			; (mov r8, r8)
   100ac:	0000fdcd 	.word	0x0000fdcd
   100b0:	0000406d 	.word	0x0000406d

000100b4 <configure_extintFSK_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_callbacks(void)
{
   100b4:	b580      	push	{r7, lr}
   100b6:	af00      	add	r7, sp, #0
	extint_register_callback(extintFSK_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
   100b8:	4b05      	ldr	r3, [pc, #20]	; (100d0 <configure_extintFSK_callbacks+0x1c>)
   100ba:	1c18      	adds	r0, r3, #0
   100bc:	2109      	movs	r1, #9
   100be:	2200      	movs	r2, #0
   100c0:	4b04      	ldr	r3, [pc, #16]	; (100d4 <configure_extintFSK_callbacks+0x20>)
   100c2:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   100c4:	2009      	movs	r0, #9
   100c6:	2100      	movs	r1, #0
   100c8:	4b03      	ldr	r3, [pc, #12]	; (100d8 <configure_extintFSK_callbacks+0x24>)
   100ca:	4798      	blx	r3
}
   100cc:	46bd      	mov	sp, r7
   100ce:	bd80      	pop	{r7, pc}
   100d0:	000100dd 	.word	0x000100dd
   100d4:	00004239 	.word	0x00004239
   100d8:	00004295 	.word	0x00004295

000100dc <extintFSK_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintFSK_detection_callback(void)
{
   100dc:	b580      	push	{r7, lr}
   100de:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFFSK;
   100e0:	4b07      	ldr	r3, [pc, #28]	; (10100 <extintFSK_detection_callback+0x24>)
   100e2:	681b      	ldr	r3, [r3, #0]
   100e4:	2280      	movs	r2, #128	; 0x80
   100e6:	0092      	lsls	r2, r2, #2
   100e8:	431a      	orrs	r2, r3
   100ea:	4b05      	ldr	r3, [pc, #20]	; (10100 <extintFSK_detection_callback+0x24>)
   100ec:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFLORA;
   100ee:	4b04      	ldr	r3, [pc, #16]	; (10100 <extintFSK_detection_callback+0x24>)
   100f0:	681b      	ldr	r3, [r3, #0]
   100f2:	2280      	movs	r2, #128	; 0x80
   100f4:	00d2      	lsls	r2, r2, #3
   100f6:	431a      	orrs	r2, r3
   100f8:	4b01      	ldr	r3, [pc, #4]	; (10100 <extintFSK_detection_callback+0x24>)
   100fa:	601a      	str	r2, [r3, #0]
}
   100fc:	46bd      	mov	sp, r7
   100fe:	bd80      	pop	{r7, pc}
   10100:	2000369c 	.word	0x2000369c

00010104 <AppFskTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskTask(void)
{
   10104:	b580      	push	{r7, lr}
   10106:	af00      	add	r7, sp, #0
	if ((setCW == 0)&&(whichRadio == WHICHRADIO_FSK))
   10108:	4b47      	ldr	r3, [pc, #284]	; (10228 <AppFskTask+0x124>)
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	2b00      	cmp	r3, #0
   1010e:	d000      	beq.n	10112 <AppFskTask+0xe>
   10110:	e087      	b.n	10222 <AppFskTask+0x11e>
   10112:	4b46      	ldr	r3, [pc, #280]	; (1022c <AppFskTask+0x128>)
   10114:	781b      	ldrb	r3, [r3, #0]
   10116:	2b88      	cmp	r3, #136	; 0x88
   10118:	d000      	beq.n	1011c <AppFskTask+0x18>
   1011a:	e082      	b.n	10222 <AppFskTask+0x11e>
	{	 
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   1011c:	4b44      	ldr	r3, [pc, #272]	; (10230 <AppFskTask+0x12c>)
   1011e:	681b      	ldr	r3, [r3, #0]
   10120:	333e      	adds	r3, #62	; 0x3e
   10122:	203e      	movs	r0, #62	; 0x3e
   10124:	1c19      	adds	r1, r3, #0
   10126:	4b43      	ldr	r3, [pc, #268]	; (10234 <AppFskTask+0x130>)
   10128:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
   1012a:	4b41      	ldr	r3, [pc, #260]	; (10230 <AppFskTask+0x12c>)
   1012c:	681b      	ldr	r3, [r3, #0]
   1012e:	333f      	adds	r3, #63	; 0x3f
   10130:	203f      	movs	r0, #63	; 0x3f
   10132:	1c19      	adds	r1, r3, #0
   10134:	4b3f      	ldr	r3, [pc, #252]	; (10234 <AppFskTask+0x130>)
   10136:	4798      	blx	r3
	//----------------------------
	/// see if payload ready for a receive event 
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x04)!= 0) // PayloadReady/CrcOk
   10138:	4b3d      	ldr	r3, [pc, #244]	; (10230 <AppFskTask+0x12c>)
   1013a:	681a      	ldr	r2, [r3, #0]
   1013c:	233f      	movs	r3, #63	; 0x3f
   1013e:	5cd3      	ldrb	r3, [r2, r3]
   10140:	1c1a      	adds	r2, r3, #0
   10142:	2304      	movs	r3, #4
   10144:	4013      	ands	r3, r2
   10146:	d054      	beq.n	101f2 <AppFskTask+0xee>
	{
		fskReceiveCount++;
   10148:	4b3b      	ldr	r3, [pc, #236]	; (10238 <AppFskTask+0x134>)
   1014a:	881b      	ldrh	r3, [r3, #0]
   1014c:	3301      	adds	r3, #1
   1014e:	b29a      	uxth	r2, r3
   10150:	4b39      	ldr	r3, [pc, #228]	; (10238 <AppFskTask+0x134>)
   10152:	801a      	strh	r2, [r3, #0]
		SX1272ReadFifo(RFBuffer,1);
   10154:	4b39      	ldr	r3, [pc, #228]	; (1023c <AppFskTask+0x138>)
   10156:	1c18      	adds	r0, r3, #0
   10158:	2101      	movs	r1, #1
   1015a:	4b39      	ldr	r3, [pc, #228]	; (10240 <AppFskTask+0x13c>)
   1015c:	4798      	blx	r3
		RxPacketSize = RFBuffer[0];				
   1015e:	4b37      	ldr	r3, [pc, #220]	; (1023c <AppFskTask+0x138>)
   10160:	781b      	ldrb	r3, [r3, #0]
   10162:	1c1a      	adds	r2, r3, #0
   10164:	4b37      	ldr	r3, [pc, #220]	; (10244 <AppFskTask+0x140>)
   10166:	801a      	strh	r2, [r3, #0]
//				RxPacketSize = SX1272->RegPayloadLength;	 
		SX1272ReadFifo(RFBuffer+1, RxPacketSize+1 );
   10168:	4b36      	ldr	r3, [pc, #216]	; (10244 <AppFskTask+0x140>)
   1016a:	881b      	ldrh	r3, [r3, #0]
   1016c:	3301      	adds	r3, #1
   1016e:	b29b      	uxth	r3, r3
   10170:	4a35      	ldr	r2, [pc, #212]	; (10248 <AppFskTask+0x144>)
   10172:	1c10      	adds	r0, r2, #0
   10174:	1c19      	adds	r1, r3, #0
   10176:	4b32      	ldr	r3, [pc, #200]	; (10240 <AppFskTask+0x13c>)
   10178:	4798      	blx	r3
				done = 1; 
			}
			i++;					
		}
*/		
		if (testRFBufferOffset >= MAXPACKETS2)
   1017a:	4b34      	ldr	r3, [pc, #208]	; (1024c <AppFskTask+0x148>)
   1017c:	781b      	ldrb	r3, [r3, #0]
   1017e:	2b03      	cmp	r3, #3
   10180:	d902      	bls.n	10188 <AppFskTask+0x84>
		{
			testRFBufferOffset = 0; 
   10182:	4b32      	ldr	r3, [pc, #200]	; (1024c <AppFskTask+0x148>)
   10184:	2200      	movs	r2, #0
   10186:	701a      	strb	r2, [r3, #0]
		}
		testRFBuffer[testRFBufferOffset].Length = RFBuffer[0];
   10188:	4b30      	ldr	r3, [pc, #192]	; (1024c <AppFskTask+0x148>)
   1018a:	781b      	ldrb	r3, [r3, #0]
   1018c:	1c1a      	adds	r2, r3, #0
   1018e:	4b2b      	ldr	r3, [pc, #172]	; (1023c <AppFskTask+0x138>)
   10190:	7818      	ldrb	r0, [r3, #0]
   10192:	492f      	ldr	r1, [pc, #188]	; (10250 <AppFskTask+0x14c>)
   10194:	1c13      	adds	r3, r2, #0
   10196:	005b      	lsls	r3, r3, #1
   10198:	189b      	adds	r3, r3, r2
   1019a:	1c02      	adds	r2, r0, #0
   1019c:	545a      	strb	r2, [r3, r1]
		testRFBuffer[testRFBufferOffset].Command[0] = RFBuffer[2]; 
   1019e:	4b2b      	ldr	r3, [pc, #172]	; (1024c <AppFskTask+0x148>)
   101a0:	781b      	ldrb	r3, [r3, #0]
   101a2:	1c1a      	adds	r2, r3, #0
   101a4:	4b25      	ldr	r3, [pc, #148]	; (1023c <AppFskTask+0x138>)
   101a6:	7899      	ldrb	r1, [r3, #2]
   101a8:	4829      	ldr	r0, [pc, #164]	; (10250 <AppFskTask+0x14c>)
   101aa:	1c13      	adds	r3, r2, #0
   101ac:	005b      	lsls	r3, r3, #1
   101ae:	189b      	adds	r3, r3, r2
   101b0:	18c3      	adds	r3, r0, r3
   101b2:	1c0a      	adds	r2, r1, #0
   101b4:	705a      	strb	r2, [r3, #1]
		testRFBuffer[testRFBufferOffset].Command[1] = RFBuffer[3]; 
   101b6:	4b25      	ldr	r3, [pc, #148]	; (1024c <AppFskTask+0x148>)
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	1c1a      	adds	r2, r3, #0
   101bc:	4b1f      	ldr	r3, [pc, #124]	; (1023c <AppFskTask+0x138>)
   101be:	78d9      	ldrb	r1, [r3, #3]
   101c0:	4823      	ldr	r0, [pc, #140]	; (10250 <AppFskTask+0x14c>)
   101c2:	1c13      	adds	r3, r2, #0
   101c4:	005b      	lsls	r3, r3, #1
   101c6:	189b      	adds	r3, r3, r2
   101c8:	18c3      	adds	r3, r0, r3
   101ca:	3301      	adds	r3, #1
   101cc:	1c0a      	adds	r2, r1, #0
   101ce:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD		
		AppScreenFSKReadingIn(RFBuffer,testRFBufferOffset);
#endif		
		testRFBufferOffset++;	
   101d0:	4b1e      	ldr	r3, [pc, #120]	; (1024c <AppFskTask+0x148>)
   101d2:	781b      	ldrb	r3, [r3, #0]
   101d4:	3301      	adds	r3, #1
   101d6:	b2da      	uxtb	r2, r3
   101d8:	4b1c      	ldr	r3, [pc, #112]	; (1024c <AppFskTask+0x148>)
   101da:	701a      	strb	r2, [r3, #0]
		if (testRFBufferOffset >= MAXPACKETS2)
   101dc:	4b1b      	ldr	r3, [pc, #108]	; (1024c <AppFskTask+0x148>)
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	2b03      	cmp	r3, #3
   101e2:	d902      	bls.n	101ea <AppFskTask+0xe6>
		{
			testRFBufferOffset = 0;
   101e4:	4b19      	ldr	r3, [pc, #100]	; (1024c <AppFskTask+0x148>)
   101e6:	2200      	movs	r2, #0
   101e8:	701a      	strb	r2, [r3, #0]
		}	
#if BRAKEBOARD		
		AppProtocolBrake(RFBuffer);
   101ea:	4b14      	ldr	r3, [pc, #80]	; (1023c <AppFskTask+0x138>)
   101ec:	1c18      	adds	r0, r3, #0
   101ee:	4b19      	ldr	r3, [pc, #100]	; (10254 <AppFskTask+0x150>)
   101f0:	4798      	blx	r3
#endif						
	}
	//----------------------------
	/// see if packetSent
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x08)!= 0)  
   101f2:	4b0f      	ldr	r3, [pc, #60]	; (10230 <AppFskTask+0x12c>)
   101f4:	681a      	ldr	r2, [r3, #0]
   101f6:	233f      	movs	r3, #63	; 0x3f
   101f8:	5cd3      	ldrb	r3, [r2, r3]
   101fa:	1c1a      	adds	r2, r3, #0
   101fc:	2308      	movs	r3, #8
   101fe:	4013      	ands	r3, r2
   10200:	d00f      	beq.n	10222 <AppFskTask+0x11e>
	{
         SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
   10202:	2005      	movs	r0, #5
   10204:	4b14      	ldr	r3, [pc, #80]	; (10258 <AppFskTask+0x154>)
   10206:	4798      	blx	r3
#if REMOTEBOARD
		commSupTimer = COMM_SUP_TIME_REMOTE;
#endif		 
		if (switchOnTransmit != 0)
   10208:	4b14      	ldr	r3, [pc, #80]	; (1025c <AppFskTask+0x158>)
   1020a:	781b      	ldrb	r3, [r3, #0]
   1020c:	2b00      	cmp	r3, #0
   1020e:	d008      	beq.n	10222 <AppFskTask+0x11e>
		{
			whichRadio = switchOnTransmit; 
   10210:	4b12      	ldr	r3, [pc, #72]	; (1025c <AppFskTask+0x158>)
   10212:	781a      	ldrb	r2, [r3, #0]
   10214:	4b05      	ldr	r3, [pc, #20]	; (1022c <AppFskTask+0x128>)
   10216:	701a      	strb	r2, [r3, #0]
			CommInit();
   10218:	4b11      	ldr	r3, [pc, #68]	; (10260 <AppFskTask+0x15c>)
   1021a:	4798      	blx	r3
			switchOnTransmit = 0; 
   1021c:	4b0f      	ldr	r3, [pc, #60]	; (1025c <AppFskTask+0x158>)
   1021e:	2200      	movs	r2, #0
   10220:	701a      	strb	r2, [r3, #0]
		}
	}
	}
}
   10222:	46bd      	mov	sp, r7
   10224:	bd80      	pop	{r7, pc}
   10226:	46c0      	nop			; (mov r8, r8)
   10228:	20003690 	.word	0x20003690
   1022c:	200036d2 	.word	0x200036d2
   10230:	20003700 	.word	0x20003700
   10234:	00011a41 	.word	0x00011a41
   10238:	200004ec 	.word	0x200004ec
   1023c:	20003704 	.word	0x20003704
   10240:	00011b15 	.word	0x00011b15
   10244:	200004e6 	.word	0x200004e6
   10248:	20003705 	.word	0x20003705
   1024c:	200004f8 	.word	0x200004f8
   10250:	20003980 	.word	0x20003980
   10254:	00009f2d 	.word	0x00009f2d
   10258:	0001002d 	.word	0x0001002d
   1025c:	200004d9 	.word	0x200004d9
   10260:	0000f4fd 	.word	0x0000f4fd

00010264 <AppFskReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskReceiveStart(void)
{
   10264:	b580      	push	{r7, lr}
   10266:	b082      	sub	sp, #8
   10268:	af00      	add	r7, sp, #0
 
 
	//------------------------
	// set up receive.
	//------------------------
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   1026a:	4b29      	ldr	r3, [pc, #164]	; (10310 <AppFskReceiveStart+0xac>)
   1026c:	681b      	ldr	r3, [r3, #0]
   1026e:	333e      	adds	r3, #62	; 0x3e
   10270:	203e      	movs	r0, #62	; 0x3e
   10272:	1c19      	adds	r1, r3, #0
   10274:	4b27      	ldr	r3, [pc, #156]	; (10314 <AppFskReceiveStart+0xb0>)
   10276:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
   10278:	4b25      	ldr	r3, [pc, #148]	; (10310 <AppFskReceiveStart+0xac>)
   1027a:	681b      	ldr	r3, [r3, #0]
   1027c:	333f      	adds	r3, #63	; 0x3f
   1027e:	203f      	movs	r0, #63	; 0x3f
   10280:	1c19      	adds	r1, r3, #0
   10282:	4b24      	ldr	r3, [pc, #144]	; (10314 <AppFskReceiveStart+0xb0>)
   10284:	4798      	blx	r3
        
    memset( RFBuffer, 0, ( size_t )RF_BUFFER_SIZE );
   10286:	4a24      	ldr	r2, [pc, #144]	; (10318 <AppFskReceiveStart+0xb4>)
   10288:	2380      	movs	r3, #128	; 0x80
   1028a:	005b      	lsls	r3, r3, #1
   1028c:	1c10      	adds	r0, r2, #0
   1028e:	2100      	movs	r1, #0
   10290:	1c1a      	adds	r2, r3, #0
   10292:	4b22      	ldr	r3, [pc, #136]	; (1031c <AppFskReceiveStart+0xb8>)
   10294:	4798      	blx	r3
	
	//--------------------------------
	// set interrupt pin to processor
    //           PayloadReady
    SX1272->RegDioMapping1 = RF_DIOMAPPING1_DIO0_00 |RF_DIOMAPPING1_DIO1_11 ;
   10296:	4b1e      	ldr	r3, [pc, #120]	; (10310 <AppFskReceiveStart+0xac>)
   10298:	681a      	ldr	r2, [r3, #0]
   1029a:	2340      	movs	r3, #64	; 0x40
   1029c:	2130      	movs	r1, #48	; 0x30
   1029e:	54d1      	strb	r1, [r2, r3]
    SX1272->RegDioMapping2 = 0;
   102a0:	4b1b      	ldr	r3, [pc, #108]	; (10310 <AppFskReceiveStart+0xac>)
   102a2:	681a      	ldr	r2, [r3, #0]
   102a4:	2341      	movs	r3, #65	; 0x41
   102a6:	2100      	movs	r1, #0
   102a8:	54d1      	strb	r1, [r2, r3]
    SX1272WriteBuffer( REG_DIOMAPPING1, &SX1272->RegDioMapping1, 2);           	
   102aa:	4b19      	ldr	r3, [pc, #100]	; (10310 <AppFskReceiveStart+0xac>)
   102ac:	681b      	ldr	r3, [r3, #0]
   102ae:	3340      	adds	r3, #64	; 0x40
   102b0:	2040      	movs	r0, #64	; 0x40
   102b2:	1c19      	adds	r1, r3, #0
   102b4:	2202      	movs	r2, #2
   102b6:	4b1a      	ldr	r3, [pc, #104]	; (10320 <AppFskReceiveStart+0xbc>)
   102b8:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintFSK_channel();
   102ba:	4b1a      	ldr	r3, [pc, #104]	; (10324 <AppFskReceiveStart+0xc0>)
   102bc:	4798      	blx	r3
	configure_extintFSK_callbacks();
   102be:	4b1a      	ldr	r3, [pc, #104]	; (10328 <AppFskReceiveStart+0xc4>)
   102c0:	4798      	blx	r3

    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
   102c2:	2001      	movs	r0, #1
   102c4:	4b19      	ldr	r3, [pc, #100]	; (1032c <AppFskReceiveStart+0xc8>)
   102c6:	4798      	blx	r3
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
   102c8:	1dfb      	adds	r3, r7, #7
   102ca:	2200      	movs	r2, #0
   102cc:	701a      	strb	r2, [r3, #0]
	while (done == 0)
   102ce:	e015      	b.n	102fc <AppFskReceiveStart+0x98>
	{
		SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   102d0:	4b0f      	ldr	r3, [pc, #60]	; (10310 <AppFskReceiveStart+0xac>)
   102d2:	681b      	ldr	r3, [r3, #0]
   102d4:	333e      	adds	r3, #62	; 0x3e
   102d6:	203e      	movs	r0, #62	; 0x3e
   102d8:	1c19      	adds	r1, r3, #0
   102da:	4b0e      	ldr	r3, [pc, #56]	; (10314 <AppFskReceiveStart+0xb0>)
   102dc:	4798      	blx	r3
		if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
   102de:	4b0c      	ldr	r3, [pc, #48]	; (10310 <AppFskReceiveStart+0xac>)
   102e0:	681a      	ldr	r2, [r3, #0]
   102e2:	233e      	movs	r3, #62	; 0x3e
   102e4:	5cd3      	ldrb	r3, [r2, r3]
   102e6:	b2db      	uxtb	r3, r3
   102e8:	1dfa      	adds	r2, r7, #7
   102ea:	1df9      	adds	r1, r7, #7
   102ec:	7809      	ldrb	r1, [r1, #0]
   102ee:	7011      	strb	r1, [r2, #0]
   102f0:	b25b      	sxtb	r3, r3
   102f2:	2b00      	cmp	r3, #0
   102f4:	da02      	bge.n	102fc <AppFskReceiveStart+0x98>
		{
			done = 1;	
   102f6:	1dfb      	adds	r3, r7, #7
   102f8:	2201      	movs	r2, #1
   102fa:	701a      	strb	r2, [r3, #0]
    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
	while (done == 0)
   102fc:	1dfb      	adds	r3, r7, #7
   102fe:	781b      	ldrb	r3, [r3, #0]
   10300:	2b00      	cmp	r3, #0
   10302:	d0e5      	beq.n	102d0 <AppFskReceiveStart+0x6c>
		{
			done = 1;	
		}				
	}
  
    SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
   10304:	2005      	movs	r0, #5
   10306:	4b09      	ldr	r3, [pc, #36]	; (1032c <AppFskReceiveStart+0xc8>)
   10308:	4798      	blx	r3
}
   1030a:	46bd      	mov	sp, r7
   1030c:	b002      	add	sp, #8
   1030e:	bd80      	pop	{r7, pc}
   10310:	20003700 	.word	0x20003700
   10314:	00011a41 	.word	0x00011a41
   10318:	20003704 	.word	0x20003704
   1031c:	00017f21 	.word	0x00017f21
   10320:	00011a7d 	.word	0x00011a7d
   10324:	00010075 	.word	0x00010075
   10328:	000100b5 	.word	0x000100b5
   1032c:	0001002d 	.word	0x0001002d

00010330 <SX1272FskTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272FskTransmit(uint8_t *txBuffer,uint8_t length)
{
   10330:	b580      	push	{r7, lr}
   10332:	b086      	sub	sp, #24
   10334:	af00      	add	r7, sp, #0
   10336:	6078      	str	r0, [r7, #4]
   10338:	1c0a      	adds	r2, r1, #0
   1033a:	1cfb      	adds	r3, r7, #3
   1033c:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,*ptr; 
    uint8_t status; 
	status = 1; 
   1033e:	1c3b      	adds	r3, r7, #0
   10340:	330f      	adds	r3, #15
   10342:	2201      	movs	r2, #1
   10344:	701a      	strb	r2, [r3, #0]
 		  
	fskTransmitCount++;	   
   10346:	4b5a      	ldr	r3, [pc, #360]	; (104b0 <SX1272FskTransmit+0x180>)
   10348:	881b      	ldrh	r3, [r3, #0]
   1034a:	3301      	adds	r3, #1
   1034c:	b29a      	uxth	r2, r3
   1034e:	4b58      	ldr	r3, [pc, #352]	; (104b0 <SX1272FskTransmit+0x180>)
   10350:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_OPMODE, &SX1272->RegOpMode );   		
   10352:	4b58      	ldr	r3, [pc, #352]	; (104b4 <SX1272FskTransmit+0x184>)
   10354:	681b      	ldr	r3, [r3, #0]
   10356:	3301      	adds	r3, #1
   10358:	2001      	movs	r0, #1
   1035a:	1c19      	adds	r1, r3, #0
   1035c:	4b56      	ldr	r3, [pc, #344]	; (104b8 <SX1272FskTransmit+0x188>)
   1035e:	4798      	blx	r3
	if ((SX1272->RegOpMode & ~RF_OPMODE_MASK)!= 0x001)
   10360:	4b54      	ldr	r3, [pc, #336]	; (104b4 <SX1272FskTransmit+0x184>)
   10362:	681b      	ldr	r3, [r3, #0]
   10364:	785b      	ldrb	r3, [r3, #1]
   10366:	22f8      	movs	r2, #248	; 0xf8
   10368:	4393      	bics	r3, r2
   1036a:	2b01      	cmp	r3, #1
   1036c:	d025      	beq.n	103ba <SX1272FskTransmit+0x8a>
	{	 
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
   1036e:	2001      	movs	r0, #1
   10370:	4b52      	ldr	r3, [pc, #328]	; (104bc <SX1272FskTransmit+0x18c>)
   10372:	4798      	blx	r3
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
   10374:	1c3b      	adds	r3, r7, #0
   10376:	3317      	adds	r3, #23
   10378:	2200      	movs	r2, #0
   1037a:	701a      	strb	r2, [r3, #0]
		while (done == 0)
   1037c:	e018      	b.n	103b0 <SX1272FskTransmit+0x80>
		{
			SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   1037e:	4b4d      	ldr	r3, [pc, #308]	; (104b4 <SX1272FskTransmit+0x184>)
   10380:	681b      	ldr	r3, [r3, #0]
   10382:	333e      	adds	r3, #62	; 0x3e
   10384:	203e      	movs	r0, #62	; 0x3e
   10386:	1c19      	adds	r1, r3, #0
   10388:	4b4b      	ldr	r3, [pc, #300]	; (104b8 <SX1272FskTransmit+0x188>)
   1038a:	4798      	blx	r3
			if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
   1038c:	4b49      	ldr	r3, [pc, #292]	; (104b4 <SX1272FskTransmit+0x184>)
   1038e:	681a      	ldr	r2, [r3, #0]
   10390:	233e      	movs	r3, #62	; 0x3e
   10392:	5cd3      	ldrb	r3, [r2, r3]
   10394:	b2db      	uxtb	r3, r3
   10396:	1c3a      	adds	r2, r7, #0
   10398:	3217      	adds	r2, #23
   1039a:	1c39      	adds	r1, r7, #0
   1039c:	3117      	adds	r1, #23
   1039e:	7809      	ldrb	r1, [r1, #0]
   103a0:	7011      	strb	r1, [r2, #0]
   103a2:	b25b      	sxtb	r3, r3
   103a4:	2b00      	cmp	r3, #0
   103a6:	da03      	bge.n	103b0 <SX1272FskTransmit+0x80>
			{
				done = 1;	
   103a8:	1c3b      	adds	r3, r7, #0
   103aa:	3317      	adds	r3, #23
   103ac:	2201      	movs	r2, #1
   103ae:	701a      	strb	r2, [r3, #0]
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
		while (done == 0)
   103b0:	1c3b      	adds	r3, r7, #0
   103b2:	3317      	adds	r3, #23
   103b4:	781b      	ldrb	r3, [r3, #0]
   103b6:	2b00      	cmp	r3, #0
   103b8:	d0e1      	beq.n	1037e <SX1272FskTransmit+0x4e>
  		
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
   103ba:	687b      	ldr	r3, [r7, #4]
   103bc:	613b      	str	r3, [r7, #16]
	RFBuffer[0] = length;
   103be:	4b40      	ldr	r3, [pc, #256]	; (104c0 <SX1272FskTransmit+0x190>)
   103c0:	1cfa      	adds	r2, r7, #3
   103c2:	7812      	ldrb	r2, [r2, #0]
   103c4:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
   103c6:	1c3b      	adds	r3, r7, #0
   103c8:	3316      	adds	r3, #22
   103ca:	2200      	movs	r2, #0
   103cc:	701a      	strb	r2, [r3, #0]
   103ce:	e010      	b.n	103f2 <SX1272FskTransmit+0xc2>
	{
		RFBuffer[i+1] = *ptr++;
   103d0:	1c3b      	adds	r3, r7, #0
   103d2:	3316      	adds	r3, #22
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	1c5a      	adds	r2, r3, #1
   103d8:	693b      	ldr	r3, [r7, #16]
   103da:	1c59      	adds	r1, r3, #1
   103dc:	6139      	str	r1, [r7, #16]
   103de:	7819      	ldrb	r1, [r3, #0]
   103e0:	4b37      	ldr	r3, [pc, #220]	; (104c0 <SX1272FskTransmit+0x190>)
   103e2:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBuffer[0] = length;
	for (i=0;i<length;i++)
   103e4:	1c3b      	adds	r3, r7, #0
   103e6:	3316      	adds	r3, #22
   103e8:	781a      	ldrb	r2, [r3, #0]
   103ea:	1c3b      	adds	r3, r7, #0
   103ec:	3316      	adds	r3, #22
   103ee:	3201      	adds	r2, #1
   103f0:	701a      	strb	r2, [r3, #0]
   103f2:	1c3a      	adds	r2, r7, #0
   103f4:	3216      	adds	r2, #22
   103f6:	1cfb      	adds	r3, r7, #3
   103f8:	7812      	ldrb	r2, [r2, #0]
   103fa:	781b      	ldrb	r3, [r3, #0]
   103fc:	429a      	cmp	r2, r3
   103fe:	d3e7      	bcc.n	103d0 <SX1272FskTransmit+0xa0>
	{
		RFBuffer[i+1] = *ptr++;
	}
    TxPacketSize = length; 
   10400:	1cfb      	adds	r3, r7, #3
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	b29a      	uxth	r2, r3
   10406:	4b2f      	ldr	r3, [pc, #188]	; (104c4 <SX1272FskTransmit+0x194>)
   10408:	801a      	strh	r2, [r3, #0]
//	SX1272WriteFifo( ( uint8_t* )&TxPacketSize, 1 );
	SX1272WriteFifo( RFBuffer, TxPacketSize+1);		
   1040a:	4b2e      	ldr	r3, [pc, #184]	; (104c4 <SX1272FskTransmit+0x194>)
   1040c:	881b      	ldrh	r3, [r3, #0]
   1040e:	3301      	adds	r3, #1
   10410:	b29b      	uxth	r3, r3
   10412:	4a2b      	ldr	r2, [pc, #172]	; (104c0 <SX1272FskTransmit+0x190>)
   10414:	1c10      	adds	r0, r2, #0
   10416:	1c19      	adds	r1, r3, #0
   10418:	4b2b      	ldr	r3, [pc, #172]	; (104c8 <SX1272FskTransmit+0x198>)
   1041a:	4798      	blx	r3
	//------------------
	// turn on transmitter
	SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
   1041c:	4b25      	ldr	r3, [pc, #148]	; (104b4 <SX1272FskTransmit+0x184>)
   1041e:	681a      	ldr	r2, [r3, #0]
   10420:	4b24      	ldr	r3, [pc, #144]	; (104b4 <SX1272FskTransmit+0x184>)
   10422:	681b      	ldr	r3, [r3, #0]
   10424:	785b      	ldrb	r3, [r3, #1]
   10426:	b2db      	uxtb	r3, r3
   10428:	2107      	movs	r1, #7
   1042a:	438b      	bics	r3, r1
   1042c:	b2db      	uxtb	r3, r3
   1042e:	2103      	movs	r1, #3
   10430:	430b      	orrs	r3, r1
   10432:	b2db      	uxtb	r3, r3
   10434:	b2db      	uxtb	r3, r3
   10436:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );       		
   10438:	4b1e      	ldr	r3, [pc, #120]	; (104b4 <SX1272FskTransmit+0x184>)
   1043a:	681b      	ldr	r3, [r3, #0]
   1043c:	785b      	ldrb	r3, [r3, #1]
   1043e:	2001      	movs	r0, #1
   10440:	1c19      	adds	r1, r3, #0
   10442:	4b22      	ldr	r3, [pc, #136]	; (104cc <SX1272FskTransmit+0x19c>)
   10444:	4798      	blx	r3
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
   10446:	1c3b      	adds	r3, r7, #0
   10448:	3317      	adds	r3, #23
   1044a:	2200      	movs	r2, #0
   1044c:	701a      	strb	r2, [r3, #0]
	wdog = 0x00ff; 
   1044e:	4b20      	ldr	r3, [pc, #128]	; (104d0 <SX1272FskTransmit+0x1a0>)
   10450:	22ff      	movs	r2, #255	; 0xff
   10452:	801a      	strh	r2, [r3, #0]
    while ((done == 0)&&(wdog>0))
   10454:	e019      	b.n	1048a <SX1272FskTransmit+0x15a>
    {
	       SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   10456:	4b17      	ldr	r3, [pc, #92]	; (104b4 <SX1272FskTransmit+0x184>)
   10458:	681b      	ldr	r3, [r3, #0]
   1045a:	333e      	adds	r3, #62	; 0x3e
   1045c:	203e      	movs	r0, #62	; 0x3e
   1045e:	1c19      	adds	r1, r3, #0
   10460:	4b15      	ldr	r3, [pc, #84]	; (104b8 <SX1272FskTransmit+0x188>)
   10462:	4798      	blx	r3
	       if ((SX1272->RegIrqFlags1 & 0x20)!= 0)
   10464:	4b13      	ldr	r3, [pc, #76]	; (104b4 <SX1272FskTransmit+0x184>)
   10466:	681a      	ldr	r2, [r3, #0]
   10468:	233e      	movs	r3, #62	; 0x3e
   1046a:	5cd3      	ldrb	r3, [r2, r3]
   1046c:	1c1a      	adds	r2, r3, #0
   1046e:	2320      	movs	r3, #32
   10470:	4013      	ands	r3, r2
   10472:	1c3a      	adds	r2, r7, #0
   10474:	3217      	adds	r2, #23
   10476:	1c39      	adds	r1, r7, #0
   10478:	3117      	adds	r1, #23
   1047a:	7809      	ldrb	r1, [r1, #0]
   1047c:	7011      	strb	r1, [r2, #0]
   1047e:	2b00      	cmp	r3, #0
   10480:	d003      	beq.n	1048a <SX1272FskTransmit+0x15a>
	        {
		        done = 1;
   10482:	1c3b      	adds	r3, r7, #0
   10484:	3317      	adds	r3, #23
   10486:	2201      	movs	r2, #1
   10488:	701a      	strb	r2, [r3, #0]
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
	wdog = 0x00ff; 
    while ((done == 0)&&(wdog>0))
   1048a:	1c3b      	adds	r3, r7, #0
   1048c:	3317      	adds	r3, #23
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	2b00      	cmp	r3, #0
   10492:	d103      	bne.n	1049c <SX1272FskTransmit+0x16c>
   10494:	4b0e      	ldr	r3, [pc, #56]	; (104d0 <SX1272FskTransmit+0x1a0>)
   10496:	881b      	ldrh	r3, [r3, #0]
   10498:	2b00      	cmp	r3, #0
   1049a:	d1dc      	bne.n	10456 <SX1272FskTransmit+0x126>
	        {
		        done = 1;
	        }
    }

    RFState = RF_STATE_TX_RUNNING;
   1049c:	4b0d      	ldr	r3, [pc, #52]	; (104d4 <SX1272FskTransmit+0x1a4>)
   1049e:	2209      	movs	r2, #9
   104a0:	701a      	strb	r2, [r3, #0]
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
   104a2:	1c3b      	adds	r3, r7, #0
   104a4:	330f      	adds	r3, #15
   104a6:	781b      	ldrb	r3, [r3, #0]
}
   104a8:	1c18      	adds	r0, r3, #0
   104aa:	46bd      	mov	sp, r7
   104ac:	b006      	add	sp, #24
   104ae:	bd80      	pop	{r7, pc}
   104b0:	200004ea 	.word	0x200004ea
   104b4:	20003700 	.word	0x20003700
   104b8:	00011a41 	.word	0x00011a41
   104bc:	0001002d 	.word	0x0001002d
   104c0:	20003704 	.word	0x20003704
   104c4:	200004e8 	.word	0x200004e8
   104c8:	00011aed 	.word	0x00011aed
   104cc:	00011a0d 	.word	0x00011a0d
   104d0:	200036be 	.word	0x200036be
   104d4:	200004e4 	.word	0x200004e4

000104d8 <SX1272FskSetPacketConfig2>:

extern tFskSettings FskSettings;

//BETH - ADDED
void SX1272FskSetPacketConfig2(uint8_t continuous )
{
   104d8:	b580      	push	{r7, lr}
   104da:	b084      	sub	sp, #16
   104dc:	af00      	add	r7, sp, #0
   104de:	1c02      	adds	r2, r0, #0
   104e0:	1dfb      	adds	r3, r7, #7
   104e2:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = 0x40; 
   104e4:	1c3b      	adds	r3, r7, #0
   104e6:	330f      	adds	r3, #15
   104e8:	2240      	movs	r2, #64	; 0x40
   104ea:	701a      	strb	r2, [r3, #0]
	if (continuous != 0)
   104ec:	1dfb      	adds	r3, r7, #7
   104ee:	781b      	ldrb	r3, [r3, #0]
   104f0:	2b00      	cmp	r3, #0
   104f2:	d003      	beq.n	104fc <SX1272FskSetPacketConfig2+0x24>
	{
		temp = 0; 
   104f4:	1c3b      	adds	r3, r7, #0
   104f6:	330f      	adds	r3, #15
   104f8:	2200      	movs	r2, #0
   104fa:	701a      	strb	r2, [r3, #0]
	}
	
	SX1272Write(REG_PACKETCONFIG2, temp);
   104fc:	1c3b      	adds	r3, r7, #0
   104fe:	330f      	adds	r3, #15
   10500:	781b      	ldrb	r3, [r3, #0]
   10502:	2031      	movs	r0, #49	; 0x31
   10504:	1c19      	adds	r1, r3, #0
   10506:	4b02      	ldr	r3, [pc, #8]	; (10510 <SX1272FskSetPacketConfig2+0x38>)
   10508:	4798      	blx	r3
}
   1050a:	46bd      	mov	sp, r7
   1050c:	b004      	add	sp, #16
   1050e:	bd80      	pop	{r7, pc}
   10510:	00011a0d 	.word	0x00011a0d
   10514:	00000000 	.word	0x00000000

00010518 <SX1272FskSetRFFrequency>:

void SX1272FskSetRFFrequency( uint32_t freq )
{
   10518:	b5b0      	push	{r4, r5, r7, lr}
   1051a:	b082      	sub	sp, #8
   1051c:	af00      	add	r7, sp, #0
   1051e:	6078      	str	r0, [r7, #4]
    FskSettings.RFFrequency = freq;
   10520:	4b1b      	ldr	r3, [pc, #108]	; (10590 <SX1272FskSetRFFrequency+0x78>)
   10522:	687a      	ldr	r2, [r7, #4]
   10524:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   10526:	4b1b      	ldr	r3, [pc, #108]	; (10594 <SX1272FskSetRFFrequency+0x7c>)
   10528:	6878      	ldr	r0, [r7, #4]
   1052a:	4798      	blx	r3
   1052c:	1c03      	adds	r3, r0, #0
   1052e:	1c0c      	adds	r4, r1, #0
   10530:	4d19      	ldr	r5, [pc, #100]	; (10598 <SX1272FskSetRFFrequency+0x80>)
   10532:	1c18      	adds	r0, r3, #0
   10534:	1c21      	adds	r1, r4, #0
   10536:	4b15      	ldr	r3, [pc, #84]	; (1058c <SX1272FskSetRFFrequency+0x74>)
   10538:	4a13      	ldr	r2, [pc, #76]	; (10588 <SX1272FskSetRFFrequency+0x70>)
   1053a:	47a8      	blx	r5
   1053c:	1c03      	adds	r3, r0, #0
   1053e:	1c0c      	adds	r4, r1, #0
   10540:	4a16      	ldr	r2, [pc, #88]	; (1059c <SX1272FskSetRFFrequency+0x84>)
   10542:	1c18      	adds	r0, r3, #0
   10544:	1c21      	adds	r1, r4, #0
   10546:	4790      	blx	r2
   10548:	1c03      	adds	r3, r0, #0
   1054a:	607b      	str	r3, [r7, #4]
    SX1272->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
   1054c:	4b14      	ldr	r3, [pc, #80]	; (105a0 <SX1272FskSetRFFrequency+0x88>)
   1054e:	681b      	ldr	r3, [r3, #0]
   10550:	687a      	ldr	r2, [r7, #4]
   10552:	0c12      	lsrs	r2, r2, #16
   10554:	b2d2      	uxtb	r2, r2
   10556:	719a      	strb	r2, [r3, #6]
    SX1272->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
   10558:	4b11      	ldr	r3, [pc, #68]	; (105a0 <SX1272FskSetRFFrequency+0x88>)
   1055a:	681b      	ldr	r3, [r3, #0]
   1055c:	687a      	ldr	r2, [r7, #4]
   1055e:	0a12      	lsrs	r2, r2, #8
   10560:	b2d2      	uxtb	r2, r2
   10562:	71da      	strb	r2, [r3, #7]
    SX1272->RegFrfLsb = ( uint8_t )( freq & 0xFF );
   10564:	4b0e      	ldr	r3, [pc, #56]	; (105a0 <SX1272FskSetRFFrequency+0x88>)
   10566:	681b      	ldr	r3, [r3, #0]
   10568:	687a      	ldr	r2, [r7, #4]
   1056a:	b2d2      	uxtb	r2, r2
   1056c:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_FRFMSB, &SX1272->RegFrfMsb, 3 );
   1056e:	4b0c      	ldr	r3, [pc, #48]	; (105a0 <SX1272FskSetRFFrequency+0x88>)
   10570:	681b      	ldr	r3, [r3, #0]
   10572:	3306      	adds	r3, #6
   10574:	2006      	movs	r0, #6
   10576:	1c19      	adds	r1, r3, #0
   10578:	2203      	movs	r2, #3
   1057a:	4b0a      	ldr	r3, [pc, #40]	; (105a4 <SX1272FskSetRFFrequency+0x8c>)
   1057c:	4798      	blx	r3
}
   1057e:	46bd      	mov	sp, r7
   10580:	b002      	add	sp, #8
   10582:	bdb0      	pop	{r4, r5, r7, pc}
   10584:	46c0      	nop			; (mov r8, r8)
   10586:	46c0      	nop			; (mov r8, r8)
   10588:	00000000 	.word	0x00000000
   1058c:	404e8480 	.word	0x404e8480
   10590:	2000000c 	.word	0x2000000c
   10594:	00017669 	.word	0x00017669
   10598:	00016129 	.word	0x00016129
   1059c:	00015a39 	.word	0x00015a39
   105a0:	20003700 	.word	0x20003700
   105a4:	00011a7d 	.word	0x00011a7d

000105a8 <SX1272FskSetBitrate>:
//bb    startTick = GET_TICK_COUNT( );
//bb    while( ( GET_TICK_COUNT( ) - startTick ) < TICK_RATE_MS( 8 ) );    
}

void SX1272FskSetBitrate( uint32_t bitrate )
{
   105a8:	b5b0      	push	{r4, r5, r7, lr}
   105aa:	b082      	sub	sp, #8
   105ac:	af00      	add	r7, sp, #0
   105ae:	6078      	str	r0, [r7, #4]
    FskSettings.Bitrate = bitrate;
   105b0:	4b19      	ldr	r3, [pc, #100]	; (10618 <SX1272FskSetBitrate+0x70>)
   105b2:	687a      	ldr	r2, [r7, #4]
   105b4:	605a      	str	r2, [r3, #4]
    
    bitrate = ( uint16_t )( ( double )XTAL_FREQ / ( double )bitrate );
   105b6:	4b19      	ldr	r3, [pc, #100]	; (1061c <SX1272FskSetBitrate+0x74>)
   105b8:	6878      	ldr	r0, [r7, #4]
   105ba:	4798      	blx	r3
   105bc:	1c03      	adds	r3, r0, #0
   105be:	1c0c      	adds	r4, r1, #0
   105c0:	4d17      	ldr	r5, [pc, #92]	; (10620 <SX1272FskSetBitrate+0x78>)
   105c2:	4914      	ldr	r1, [pc, #80]	; (10614 <SX1272FskSetBitrate+0x6c>)
   105c4:	4812      	ldr	r0, [pc, #72]	; (10610 <SX1272FskSetBitrate+0x68>)
   105c6:	1c1a      	adds	r2, r3, #0
   105c8:	1c23      	adds	r3, r4, #0
   105ca:	47a8      	blx	r5
   105cc:	1c03      	adds	r3, r0, #0
   105ce:	1c0c      	adds	r4, r1, #0
   105d0:	4a14      	ldr	r2, [pc, #80]	; (10624 <SX1272FskSetBitrate+0x7c>)
   105d2:	1c18      	adds	r0, r3, #0
   105d4:	1c21      	adds	r1, r4, #0
   105d6:	4790      	blx	r2
   105d8:	1c03      	adds	r3, r0, #0
   105da:	b29b      	uxth	r3, r3
   105dc:	607b      	str	r3, [r7, #4]
    SX1272->RegBitrateMsb    = ( uint8_t )( bitrate >> 8 );
   105de:	4b12      	ldr	r3, [pc, #72]	; (10628 <SX1272FskSetBitrate+0x80>)
   105e0:	681b      	ldr	r3, [r3, #0]
   105e2:	687a      	ldr	r2, [r7, #4]
   105e4:	0a12      	lsrs	r2, r2, #8
   105e6:	b2d2      	uxtb	r2, r2
   105e8:	709a      	strb	r2, [r3, #2]
    SX1272->RegBitrateLsb    = ( uint8_t )( bitrate & 0xFF );
   105ea:	4b0f      	ldr	r3, [pc, #60]	; (10628 <SX1272FskSetBitrate+0x80>)
   105ec:	681b      	ldr	r3, [r3, #0]
   105ee:	687a      	ldr	r2, [r7, #4]
   105f0:	b2d2      	uxtb	r2, r2
   105f2:	70da      	strb	r2, [r3, #3]
    SX1272WriteBuffer( REG_BITRATEMSB, &SX1272->RegBitrateMsb, 2 );    
   105f4:	4b0c      	ldr	r3, [pc, #48]	; (10628 <SX1272FskSetBitrate+0x80>)
   105f6:	681b      	ldr	r3, [r3, #0]
   105f8:	3302      	adds	r3, #2
   105fa:	2002      	movs	r0, #2
   105fc:	1c19      	adds	r1, r3, #0
   105fe:	2202      	movs	r2, #2
   10600:	4b0a      	ldr	r3, [pc, #40]	; (1062c <SX1272FskSetBitrate+0x84>)
   10602:	4798      	blx	r3
}
   10604:	46bd      	mov	sp, r7
   10606:	b002      	add	sp, #8
   10608:	bdb0      	pop	{r4, r5, r7, pc}
   1060a:	46c0      	nop			; (mov r8, r8)
   1060c:	46c0      	nop			; (mov r8, r8)
   1060e:	46c0      	nop			; (mov r8, r8)
   10610:	00000000 	.word	0x00000000
   10614:	417e8480 	.word	0x417e8480
   10618:	2000000c 	.word	0x2000000c
   1061c:	00017669 	.word	0x00017669
   10620:	00016129 	.word	0x00016129
   10624:	00015a39 	.word	0x00015a39
   10628:	20003700 	.word	0x20003700
   1062c:	00011a7d 	.word	0x00011a7d

00010630 <SX1272FskSetFdev>:

    return FskSettings.Bitrate;
}

void SX1272FskSetFdev( uint32_t fdev )
{
   10630:	b5b0      	push	{r4, r5, r7, lr}
   10632:	b082      	sub	sp, #8
   10634:	af00      	add	r7, sp, #0
   10636:	6078      	str	r0, [r7, #4]
    FskSettings.Fdev = fdev;
   10638:	4b19      	ldr	r3, [pc, #100]	; (106a0 <SX1272FskSetFdev+0x70>)
   1063a:	687a      	ldr	r2, [r7, #4]
   1063c:	609a      	str	r2, [r3, #8]

    fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
   1063e:	4b19      	ldr	r3, [pc, #100]	; (106a4 <SX1272FskSetFdev+0x74>)
   10640:	6878      	ldr	r0, [r7, #4]
   10642:	4798      	blx	r3
   10644:	1c03      	adds	r3, r0, #0
   10646:	1c0c      	adds	r4, r1, #0
   10648:	4d17      	ldr	r5, [pc, #92]	; (106a8 <SX1272FskSetFdev+0x78>)
   1064a:	1c18      	adds	r0, r3, #0
   1064c:	1c21      	adds	r1, r4, #0
   1064e:	4b13      	ldr	r3, [pc, #76]	; (1069c <SX1272FskSetFdev+0x6c>)
   10650:	4a11      	ldr	r2, [pc, #68]	; (10698 <SX1272FskSetFdev+0x68>)
   10652:	47a8      	blx	r5
   10654:	1c03      	adds	r3, r0, #0
   10656:	1c0c      	adds	r4, r1, #0
   10658:	4a14      	ldr	r2, [pc, #80]	; (106ac <SX1272FskSetFdev+0x7c>)
   1065a:	1c18      	adds	r0, r3, #0
   1065c:	1c21      	adds	r1, r4, #0
   1065e:	4790      	blx	r2
   10660:	1c03      	adds	r3, r0, #0
   10662:	b29b      	uxth	r3, r3
   10664:	607b      	str	r3, [r7, #4]
    SX1272->RegFdevMsb    = ( uint8_t )( fdev >> 8 );
   10666:	4b12      	ldr	r3, [pc, #72]	; (106b0 <SX1272FskSetFdev+0x80>)
   10668:	681b      	ldr	r3, [r3, #0]
   1066a:	687a      	ldr	r2, [r7, #4]
   1066c:	0a12      	lsrs	r2, r2, #8
   1066e:	b2d2      	uxtb	r2, r2
   10670:	711a      	strb	r2, [r3, #4]
    SX1272->RegFdevLsb    = ( uint8_t )( fdev & 0xFF );
   10672:	4b0f      	ldr	r3, [pc, #60]	; (106b0 <SX1272FskSetFdev+0x80>)
   10674:	681b      	ldr	r3, [r3, #0]
   10676:	687a      	ldr	r2, [r7, #4]
   10678:	b2d2      	uxtb	r2, r2
   1067a:	715a      	strb	r2, [r3, #5]
    SX1272WriteBuffer( REG_FDEVMSB, &SX1272->RegFdevMsb, 2 );    
   1067c:	4b0c      	ldr	r3, [pc, #48]	; (106b0 <SX1272FskSetFdev+0x80>)
   1067e:	681b      	ldr	r3, [r3, #0]
   10680:	3304      	adds	r3, #4
   10682:	2004      	movs	r0, #4
   10684:	1c19      	adds	r1, r3, #0
   10686:	2202      	movs	r2, #2
   10688:	4b0a      	ldr	r3, [pc, #40]	; (106b4 <SX1272FskSetFdev+0x84>)
   1068a:	4798      	blx	r3
}
   1068c:	46bd      	mov	sp, r7
   1068e:	b002      	add	sp, #8
   10690:	bdb0      	pop	{r4, r5, r7, pc}
   10692:	46c0      	nop			; (mov r8, r8)
   10694:	46c0      	nop			; (mov r8, r8)
   10696:	46c0      	nop			; (mov r8, r8)
   10698:	00000000 	.word	0x00000000
   1069c:	404e8480 	.word	0x404e8480
   106a0:	2000000c 	.word	0x2000000c
   106a4:	00017669 	.word	0x00017669
   106a8:	00016129 	.word	0x00016129
   106ac:	00015a39 	.word	0x00015a39
   106b0:	20003700 	.word	0x20003700
   106b4:	00011a7d 	.word	0x00011a7d

000106b8 <SX1272FskSetRFPower>:

    return FskSettings.Fdev;
}

void SX1272FskSetRFPower( int8_t power )
{
   106b8:	b580      	push	{r7, lr}
   106ba:	b082      	sub	sp, #8
   106bc:	af00      	add	r7, sp, #0
   106be:	1c02      	adds	r2, r0, #0
   106c0:	1dfb      	adds	r3, r7, #7
   106c2:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PACONFIG, &SX1272->RegPaConfig );
   106c4:	4b4f      	ldr	r3, [pc, #316]	; (10804 <SX1272FskSetRFPower+0x14c>)
   106c6:	681b      	ldr	r3, [r3, #0]
   106c8:	3309      	adds	r3, #9
   106ca:	2009      	movs	r0, #9
   106cc:	1c19      	adds	r1, r3, #0
   106ce:	4b4e      	ldr	r3, [pc, #312]	; (10808 <SX1272FskSetRFPower+0x150>)
   106d0:	4798      	blx	r3
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
   106d2:	4b4c      	ldr	r3, [pc, #304]	; (10804 <SX1272FskSetRFPower+0x14c>)
   106d4:	681b      	ldr	r3, [r3, #0]
   106d6:	335a      	adds	r3, #90	; 0x5a
   106d8:	205a      	movs	r0, #90	; 0x5a
   106da:	1c19      	adds	r1, r3, #0
   106dc:	4b4a      	ldr	r3, [pc, #296]	; (10808 <SX1272FskSetRFPower+0x150>)
   106de:	4798      	blx	r3
    
    if( ( SX1272->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
   106e0:	4b48      	ldr	r3, [pc, #288]	; (10804 <SX1272FskSetRFPower+0x14c>)
   106e2:	681b      	ldr	r3, [r3, #0]
   106e4:	7a5b      	ldrb	r3, [r3, #9]
   106e6:	b2db      	uxtb	r3, r3
   106e8:	b25b      	sxtb	r3, r3
   106ea:	2b00      	cmp	r3, #0
   106ec:	da56      	bge.n	1079c <SX1272FskSetRFPower+0xe4>
    {
        if( ( SX1272->RegPaDac & 0x07 ) == 0x07 )
   106ee:	4b45      	ldr	r3, [pc, #276]	; (10804 <SX1272FskSetRFPower+0x14c>)
   106f0:	681a      	ldr	r2, [r3, #0]
   106f2:	235a      	movs	r3, #90	; 0x5a
   106f4:	5cd3      	ldrb	r3, [r2, r3]
   106f6:	1c1a      	adds	r2, r3, #0
   106f8:	2307      	movs	r3, #7
   106fa:	4013      	ands	r3, r2
   106fc:	2b07      	cmp	r3, #7
   106fe:	d126      	bne.n	1074e <SX1272FskSetRFPower+0x96>
        {
            if( power < 5 )
   10700:	1dfb      	adds	r3, r7, #7
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	b25b      	sxtb	r3, r3
   10706:	2b04      	cmp	r3, #4
   10708:	dc02      	bgt.n	10710 <SX1272FskSetRFPower+0x58>
            {
                power = 5;
   1070a:	1dfb      	adds	r3, r7, #7
   1070c:	2205      	movs	r2, #5
   1070e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
   10710:	1dfb      	adds	r3, r7, #7
   10712:	781b      	ldrb	r3, [r3, #0]
   10714:	b25b      	sxtb	r3, r3
   10716:	2b14      	cmp	r3, #20
   10718:	dd02      	ble.n	10720 <SX1272FskSetRFPower+0x68>
            {
                power = 20;
   1071a:	1dfb      	adds	r3, r7, #7
   1071c:	2214      	movs	r2, #20
   1071e:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
   10720:	4b38      	ldr	r3, [pc, #224]	; (10804 <SX1272FskSetRFPower+0x14c>)
   10722:	681a      	ldr	r2, [r3, #0]
   10724:	4b37      	ldr	r3, [pc, #220]	; (10804 <SX1272FskSetRFPower+0x14c>)
   10726:	681b      	ldr	r3, [r3, #0]
   10728:	7a5b      	ldrb	r3, [r3, #9]
   1072a:	b2db      	uxtb	r3, r3
   1072c:	210f      	movs	r1, #15
   1072e:	438b      	bics	r3, r1
   10730:	b2d9      	uxtb	r1, r3
   10732:	1dfb      	adds	r3, r7, #7
   10734:	781b      	ldrb	r3, [r3, #0]
   10736:	3b05      	subs	r3, #5
   10738:	b2db      	uxtb	r3, r3
   1073a:	b2db      	uxtb	r3, r3
   1073c:	1c18      	adds	r0, r3, #0
   1073e:	230f      	movs	r3, #15
   10740:	4003      	ands	r3, r0
   10742:	b2db      	uxtb	r3, r3
   10744:	430b      	orrs	r3, r1
   10746:	b2db      	uxtb	r3, r3
   10748:	b2db      	uxtb	r3, r3
   1074a:	7253      	strb	r3, [r2, #9]
   1074c:	e04c      	b.n	107e8 <SX1272FskSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
   1074e:	1dfb      	adds	r3, r7, #7
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	b25b      	sxtb	r3, r3
   10754:	2b01      	cmp	r3, #1
   10756:	dc02      	bgt.n	1075e <SX1272FskSetRFPower+0xa6>
            {
                power = 2;
   10758:	1dfb      	adds	r3, r7, #7
   1075a:	2202      	movs	r2, #2
   1075c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
   1075e:	1dfb      	adds	r3, r7, #7
   10760:	781b      	ldrb	r3, [r3, #0]
   10762:	b25b      	sxtb	r3, r3
   10764:	2b11      	cmp	r3, #17
   10766:	dd02      	ble.n	1076e <SX1272FskSetRFPower+0xb6>
            {
                power = 17;
   10768:	1dfb      	adds	r3, r7, #7
   1076a:	2211      	movs	r2, #17
   1076c:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
   1076e:	4b25      	ldr	r3, [pc, #148]	; (10804 <SX1272FskSetRFPower+0x14c>)
   10770:	681a      	ldr	r2, [r3, #0]
   10772:	4b24      	ldr	r3, [pc, #144]	; (10804 <SX1272FskSetRFPower+0x14c>)
   10774:	681b      	ldr	r3, [r3, #0]
   10776:	7a5b      	ldrb	r3, [r3, #9]
   10778:	b2db      	uxtb	r3, r3
   1077a:	210f      	movs	r1, #15
   1077c:	438b      	bics	r3, r1
   1077e:	b2d9      	uxtb	r1, r3
   10780:	1dfb      	adds	r3, r7, #7
   10782:	781b      	ldrb	r3, [r3, #0]
   10784:	3b02      	subs	r3, #2
   10786:	b2db      	uxtb	r3, r3
   10788:	b2db      	uxtb	r3, r3
   1078a:	1c18      	adds	r0, r3, #0
   1078c:	230f      	movs	r3, #15
   1078e:	4003      	ands	r3, r0
   10790:	b2db      	uxtb	r3, r3
   10792:	430b      	orrs	r3, r1
   10794:	b2db      	uxtb	r3, r3
   10796:	b2db      	uxtb	r3, r3
   10798:	7253      	strb	r3, [r2, #9]
   1079a:	e025      	b.n	107e8 <SX1272FskSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
   1079c:	1dfb      	adds	r3, r7, #7
   1079e:	781b      	ldrb	r3, [r3, #0]
   107a0:	b25b      	sxtb	r3, r3
   107a2:	3301      	adds	r3, #1
   107a4:	da02      	bge.n	107ac <SX1272FskSetRFPower+0xf4>
        {
            power = -1;
   107a6:	1dfb      	adds	r3, r7, #7
   107a8:	22ff      	movs	r2, #255	; 0xff
   107aa:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
   107ac:	1dfb      	adds	r3, r7, #7
   107ae:	781b      	ldrb	r3, [r3, #0]
   107b0:	b25b      	sxtb	r3, r3
   107b2:	2b0e      	cmp	r3, #14
   107b4:	dd02      	ble.n	107bc <SX1272FskSetRFPower+0x104>
        {
            power = 14;
   107b6:	1dfb      	adds	r3, r7, #7
   107b8:	220e      	movs	r2, #14
   107ba:	701a      	strb	r2, [r3, #0]
        }
        SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
   107bc:	4b11      	ldr	r3, [pc, #68]	; (10804 <SX1272FskSetRFPower+0x14c>)
   107be:	681a      	ldr	r2, [r3, #0]
   107c0:	4b10      	ldr	r3, [pc, #64]	; (10804 <SX1272FskSetRFPower+0x14c>)
   107c2:	681b      	ldr	r3, [r3, #0]
   107c4:	7a5b      	ldrb	r3, [r3, #9]
   107c6:	b2db      	uxtb	r3, r3
   107c8:	210f      	movs	r1, #15
   107ca:	438b      	bics	r3, r1
   107cc:	b2d9      	uxtb	r1, r3
   107ce:	1dfb      	adds	r3, r7, #7
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	3301      	adds	r3, #1
   107d4:	b2db      	uxtb	r3, r3
   107d6:	b2db      	uxtb	r3, r3
   107d8:	1c18      	adds	r0, r3, #0
   107da:	230f      	movs	r3, #15
   107dc:	4003      	ands	r3, r0
   107de:	b2db      	uxtb	r3, r3
   107e0:	430b      	orrs	r3, r1
   107e2:	b2db      	uxtb	r3, r3
   107e4:	b2db      	uxtb	r3, r3
   107e6:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_PACONFIG, SX1272->RegPaConfig );
   107e8:	4b06      	ldr	r3, [pc, #24]	; (10804 <SX1272FskSetRFPower+0x14c>)
   107ea:	681b      	ldr	r3, [r3, #0]
   107ec:	7a5b      	ldrb	r3, [r3, #9]
   107ee:	2009      	movs	r0, #9
   107f0:	1c19      	adds	r1, r3, #0
   107f2:	4b06      	ldr	r3, [pc, #24]	; (1080c <SX1272FskSetRFPower+0x154>)
   107f4:	4798      	blx	r3
    FskSettings.Power = power;
   107f6:	4b06      	ldr	r3, [pc, #24]	; (10810 <SX1272FskSetRFPower+0x158>)
   107f8:	1dfa      	adds	r2, r7, #7
   107fa:	7812      	ldrb	r2, [r2, #0]
   107fc:	731a      	strb	r2, [r3, #12]
}
   107fe:	46bd      	mov	sp, r7
   10800:	b002      	add	sp, #8
   10802:	bd80      	pop	{r7, pc}
   10804:	20003700 	.word	0x20003700
   10808:	00011a41 	.word	0x00011a41
   1080c:	00011a0d 	.word	0x00011a0d
   10810:	2000000c 	.word	0x2000000c
   10814:	00000000 	.word	0x00000000

00010818 <SX1272FskComputeRxBwMantExp>:
 * \param [IN] rxBwValue Bandwidth value
 * \param [OUT] mantisse Mantisse of the bandwidth value
 * \param [OUT] exponent Exponent of the bandwidth value
 */
static void SX1272FskComputeRxBwMantExp( uint32_t rxBwValue, uint8_t* mantisse, uint8_t* exponent )
{
   10818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1081a:	b08d      	sub	sp, #52	; 0x34
   1081c:	af00      	add	r7, sp, #0
   1081e:	6178      	str	r0, [r7, #20]
   10820:	6139      	str	r1, [r7, #16]
   10822:	60fa      	str	r2, [r7, #12]
    uint8_t tmpExp = 0;
   10824:	1c3b      	adds	r3, r7, #0
   10826:	332f      	adds	r3, #47	; 0x2f
   10828:	2200      	movs	r2, #0
   1082a:	701a      	strb	r2, [r3, #0]
    uint8_t tmpMant = 0;
   1082c:	1c3b      	adds	r3, r7, #0
   1082e:	332e      	adds	r3, #46	; 0x2e
   10830:	2200      	movs	r2, #0
   10832:	701a      	strb	r2, [r3, #0]

    double tmpRxBw = 0;
   10834:	4b43      	ldr	r3, [pc, #268]	; (10944 <SX1272FskComputeRxBwMantExp+0x12c>)
   10836:	4a42      	ldr	r2, [pc, #264]	; (10940 <SX1272FskComputeRxBwMantExp+0x128>)
   10838:	61ba      	str	r2, [r7, #24]
   1083a:	61fb      	str	r3, [r7, #28]
    double rxBwMin = 10e6;
   1083c:	4a42      	ldr	r2, [pc, #264]	; (10948 <SX1272FskComputeRxBwMantExp+0x130>)
   1083e:	4b43      	ldr	r3, [pc, #268]	; (1094c <SX1272FskComputeRxBwMantExp+0x134>)
   10840:	623a      	str	r2, [r7, #32]
   10842:	627b      	str	r3, [r7, #36]	; 0x24

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
   10844:	1c3b      	adds	r3, r7, #0
   10846:	332f      	adds	r3, #47	; 0x2f
   10848:	2200      	movs	r2, #0
   1084a:	701a      	strb	r2, [r3, #0]
   1084c:	e06e      	b.n	1092c <SX1272FskComputeRxBwMantExp+0x114>
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
   1084e:	1c3b      	adds	r3, r7, #0
   10850:	332e      	adds	r3, #46	; 0x2e
   10852:	2210      	movs	r2, #16
   10854:	701a      	strb	r2, [r3, #0]
   10856:	e05d      	b.n	10914 <SX1272FskComputeRxBwMantExp+0xfc>
        {
            if( ( SX1272->RegOpMode & RF_OPMODE_MODULATIONTYPE_FSK ) == RF_OPMODE_MODULATIONTYPE_FSK )
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 2 ) );
   10858:	1c3b      	adds	r3, r7, #0
   1085a:	332e      	adds	r3, #46	; 0x2e
   1085c:	781a      	ldrb	r2, [r3, #0]
   1085e:	4b40      	ldr	r3, [pc, #256]	; (10960 <SX1272FskComputeRxBwMantExp+0x148>)
   10860:	1c10      	adds	r0, r2, #0
   10862:	4798      	blx	r3
   10864:	6038      	str	r0, [r7, #0]
   10866:	6079      	str	r1, [r7, #4]
   10868:	1c3b      	adds	r3, r7, #0
   1086a:	332f      	adds	r3, #47	; 0x2f
   1086c:	781b      	ldrb	r3, [r3, #0]
   1086e:	1c9a      	adds	r2, r3, #2
   10870:	4b3b      	ldr	r3, [pc, #236]	; (10960 <SX1272FskComputeRxBwMantExp+0x148>)
   10872:	1c10      	adds	r0, r2, #0
   10874:	4798      	blx	r3
   10876:	1c02      	adds	r2, r0, #0
   10878:	1c0b      	adds	r3, r1, #0
   1087a:	4835      	ldr	r0, [pc, #212]	; (10950 <SX1272FskComputeRxBwMantExp+0x138>)
   1087c:	4935      	ldr	r1, [pc, #212]	; (10954 <SX1272FskComputeRxBwMantExp+0x13c>)
   1087e:	4e39      	ldr	r6, [pc, #228]	; (10964 <SX1272FskComputeRxBwMantExp+0x14c>)
   10880:	47b0      	blx	r6
   10882:	1c02      	adds	r2, r0, #0
   10884:	1c0b      	adds	r3, r1, #0
   10886:	4e38      	ldr	r6, [pc, #224]	; (10968 <SX1272FskComputeRxBwMantExp+0x150>)
   10888:	6838      	ldr	r0, [r7, #0]
   1088a:	6879      	ldr	r1, [r7, #4]
   1088c:	47b0      	blx	r6
   1088e:	1c02      	adds	r2, r0, #0
   10890:	1c0b      	adds	r3, r1, #0
   10892:	4e36      	ldr	r6, [pc, #216]	; (1096c <SX1272FskComputeRxBwMantExp+0x154>)
   10894:	4830      	ldr	r0, [pc, #192]	; (10958 <SX1272FskComputeRxBwMantExp+0x140>)
   10896:	4931      	ldr	r1, [pc, #196]	; (1095c <SX1272FskComputeRxBwMantExp+0x144>)
   10898:	47b0      	blx	r6
   1089a:	1c02      	adds	r2, r0, #0
   1089c:	1c0b      	adds	r3, r1, #0
   1089e:	61ba      	str	r2, [r7, #24]
   108a0:	61fb      	str	r3, [r7, #28]
            }
            else
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 3 ) );
            }
            if( fabs( tmpRxBw - rxBwValue ) < rxBwMin )
   108a2:	4b33      	ldr	r3, [pc, #204]	; (10970 <SX1272FskComputeRxBwMantExp+0x158>)
   108a4:	6978      	ldr	r0, [r7, #20]
   108a6:	4798      	blx	r3
   108a8:	1c02      	adds	r2, r0, #0
   108aa:	1c0b      	adds	r3, r1, #0
   108ac:	4e31      	ldr	r6, [pc, #196]	; (10974 <SX1272FskComputeRxBwMantExp+0x15c>)
   108ae:	69b8      	ldr	r0, [r7, #24]
   108b0:	69f9      	ldr	r1, [r7, #28]
   108b2:	47b0      	blx	r6
   108b4:	1c02      	adds	r2, r0, #0
   108b6:	1c0b      	adds	r3, r1, #0
   108b8:	1c11      	adds	r1, r2, #0
   108ba:	1c0c      	adds	r4, r1, #0
   108bc:	005b      	lsls	r3, r3, #1
   108be:	085d      	lsrs	r5, r3, #1
   108c0:	4e2d      	ldr	r6, [pc, #180]	; (10978 <SX1272FskComputeRxBwMantExp+0x160>)
   108c2:	1c20      	adds	r0, r4, #0
   108c4:	1c29      	adds	r1, r5, #0
   108c6:	6a3a      	ldr	r2, [r7, #32]
   108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108ca:	47b0      	blx	r6
   108cc:	1c03      	adds	r3, r0, #0
   108ce:	2b00      	cmp	r3, #0
   108d0:	d019      	beq.n	10906 <SX1272FskComputeRxBwMantExp+0xee>
            {
                rxBwMin = fabs( tmpRxBw - rxBwValue );
   108d2:	4b27      	ldr	r3, [pc, #156]	; (10970 <SX1272FskComputeRxBwMantExp+0x158>)
   108d4:	6978      	ldr	r0, [r7, #20]
   108d6:	4798      	blx	r3
   108d8:	1c02      	adds	r2, r0, #0
   108da:	1c0b      	adds	r3, r1, #0
   108dc:	4e25      	ldr	r6, [pc, #148]	; (10974 <SX1272FskComputeRxBwMantExp+0x15c>)
   108de:	69b8      	ldr	r0, [r7, #24]
   108e0:	69f9      	ldr	r1, [r7, #28]
   108e2:	47b0      	blx	r6
   108e4:	1c02      	adds	r2, r0, #0
   108e6:	1c0b      	adds	r3, r1, #0
   108e8:	1c11      	adds	r1, r2, #0
   108ea:	6239      	str	r1, [r7, #32]
   108ec:	005b      	lsls	r3, r3, #1
   108ee:	085b      	lsrs	r3, r3, #1
   108f0:	627b      	str	r3, [r7, #36]	; 0x24
                *mantisse = tmpMant;
   108f2:	693b      	ldr	r3, [r7, #16]
   108f4:	1c3a      	adds	r2, r7, #0
   108f6:	322e      	adds	r2, #46	; 0x2e
   108f8:	7812      	ldrb	r2, [r2, #0]
   108fa:	701a      	strb	r2, [r3, #0]
                *exponent = tmpExp;
   108fc:	68fb      	ldr	r3, [r7, #12]
   108fe:	1c3a      	adds	r2, r7, #0
   10900:	322f      	adds	r2, #47	; 0x2f
   10902:	7812      	ldrb	r2, [r2, #0]
   10904:	701a      	strb	r2, [r3, #0]
    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
   10906:	1c3b      	adds	r3, r7, #0
   10908:	332e      	adds	r3, #46	; 0x2e
   1090a:	1c3a      	adds	r2, r7, #0
   1090c:	322e      	adds	r2, #46	; 0x2e
   1090e:	7812      	ldrb	r2, [r2, #0]
   10910:	3204      	adds	r2, #4
   10912:	701a      	strb	r2, [r3, #0]
   10914:	1c3b      	adds	r3, r7, #0
   10916:	332e      	adds	r3, #46	; 0x2e
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	2b18      	cmp	r3, #24
   1091c:	d99c      	bls.n	10858 <SX1272FskComputeRxBwMantExp+0x40>
    uint8_t tmpMant = 0;

    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
   1091e:	1c3b      	adds	r3, r7, #0
   10920:	332f      	adds	r3, #47	; 0x2f
   10922:	781a      	ldrb	r2, [r3, #0]
   10924:	1c3b      	adds	r3, r7, #0
   10926:	332f      	adds	r3, #47	; 0x2f
   10928:	3201      	adds	r2, #1
   1092a:	701a      	strb	r2, [r3, #0]
   1092c:	1c3b      	adds	r3, r7, #0
   1092e:	332f      	adds	r3, #47	; 0x2f
   10930:	781b      	ldrb	r3, [r3, #0]
   10932:	2b07      	cmp	r3, #7
   10934:	d98b      	bls.n	1084e <SX1272FskComputeRxBwMantExp+0x36>
                *mantisse = tmpMant;
                *exponent = tmpExp;
            }
        }
    }
}
   10936:	46bd      	mov	sp, r7
   10938:	b00d      	add	sp, #52	; 0x34
   1093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1093c:	46c0      	nop			; (mov r8, r8)
   1093e:	46c0      	nop			; (mov r8, r8)
	...
   1094c:	416312d0 	.word	0x416312d0
   10950:	00000000 	.word	0x00000000
   10954:	40000000 	.word	0x40000000
   10958:	00000000 	.word	0x00000000
   1095c:	417e8480 	.word	0x417e8480
   10960:	000175ed 	.word	0x000175ed
   10964:	00014479 	.word	0x00014479
   10968:	000169fd 	.word	0x000169fd
   1096c:	00016129 	.word	0x00016129
   10970:	00017669 	.word	0x00017669
   10974:	00016f1d 	.word	0x00016f1d
   10978:	00015965 	.word	0x00015965
   1097c:	46c0      	nop			; (mov r8, r8)
   1097e:	46c0      	nop			; (mov r8, r8)

00010980 <SX1272FskSetDccBw>:

void SX1272FskSetDccBw( uint8_t* reg, uint32_t dccValue, uint32_t rxBwValue )
{
   10980:	b580      	push	{r7, lr}
   10982:	b086      	sub	sp, #24
   10984:	af00      	add	r7, sp, #0
   10986:	60f8      	str	r0, [r7, #12]
   10988:	60b9      	str	r1, [r7, #8]
   1098a:	607a      	str	r2, [r7, #4]
    uint8_t mantisse = 0;
   1098c:	1c3b      	adds	r3, r7, #0
   1098e:	3317      	adds	r3, #23
   10990:	2200      	movs	r2, #0
   10992:	701a      	strb	r2, [r3, #0]
    uint8_t exponent = 0;
   10994:	1c3b      	adds	r3, r7, #0
   10996:	3316      	adds	r3, #22
   10998:	2200      	movs	r2, #0
   1099a:	701a      	strb	r2, [r3, #0]
    
    if( reg == &SX1272->RegRxBw )
   1099c:	4b39      	ldr	r3, [pc, #228]	; (10a84 <SX1272FskSetDccBw+0x104>)
   1099e:	681b      	ldr	r3, [r3, #0]
   109a0:	1c1a      	adds	r2, r3, #0
   109a2:	3212      	adds	r2, #18
   109a4:	68fb      	ldr	r3, [r7, #12]
   109a6:	429a      	cmp	r2, r3
   109a8:	d107      	bne.n	109ba <SX1272FskSetDccBw+0x3a>
    {
        *reg = ( uint8_t )dccValue & 0x60;
   109aa:	68bb      	ldr	r3, [r7, #8]
   109ac:	b2da      	uxtb	r2, r3
   109ae:	2360      	movs	r3, #96	; 0x60
   109b0:	4013      	ands	r3, r2
   109b2:	b2da      	uxtb	r2, r3
   109b4:	68fb      	ldr	r3, [r7, #12]
   109b6:	701a      	strb	r2, [r3, #0]
   109b8:	e002      	b.n	109c0 <SX1272FskSetDccBw+0x40>
    }
    else
    {
        *reg = 0;
   109ba:	68fb      	ldr	r3, [r7, #12]
   109bc:	2200      	movs	r2, #0
   109be:	701a      	strb	r2, [r3, #0]
    }

    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );
   109c0:	6879      	ldr	r1, [r7, #4]
   109c2:	1c3a      	adds	r2, r7, #0
   109c4:	3217      	adds	r2, #23
   109c6:	1c3b      	adds	r3, r7, #0
   109c8:	3316      	adds	r3, #22
   109ca:	1c08      	adds	r0, r1, #0
   109cc:	1c11      	adds	r1, r2, #0
   109ce:	1c1a      	adds	r2, r3, #0
   109d0:	4b2d      	ldr	r3, [pc, #180]	; (10a88 <SX1272FskSetDccBw+0x108>)
   109d2:	4798      	blx	r3

    switch( mantisse )
   109d4:	1c3b      	adds	r3, r7, #0
   109d6:	3317      	adds	r3, #23
   109d8:	781b      	ldrb	r3, [r3, #0]
   109da:	2b14      	cmp	r3, #20
   109dc:	d015      	beq.n	10a0a <SX1272FskSetDccBw+0x8a>
   109de:	2b18      	cmp	r3, #24
   109e0:	d023      	beq.n	10a2a <SX1272FskSetDccBw+0xaa>
   109e2:	2b10      	cmp	r3, #16
   109e4:	d000      	beq.n	109e8 <SX1272FskSetDccBw+0x68>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
            break;
        default:
            // Something went terribely wrong
            break;
   109e6:	e030      	b.n	10a4a <SX1272FskSetDccBw+0xca>
    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );

    switch( mantisse )
    {
        case 16:
            *reg |= ( uint8_t )( 0x00 | ( exponent & 0x07 ) );
   109e8:	68fb      	ldr	r3, [r7, #12]
   109ea:	781b      	ldrb	r3, [r3, #0]
   109ec:	b2da      	uxtb	r2, r3
   109ee:	1c3b      	adds	r3, r7, #0
   109f0:	3316      	adds	r3, #22
   109f2:	781b      	ldrb	r3, [r3, #0]
   109f4:	b2db      	uxtb	r3, r3
   109f6:	1c19      	adds	r1, r3, #0
   109f8:	2307      	movs	r3, #7
   109fa:	400b      	ands	r3, r1
   109fc:	b2db      	uxtb	r3, r3
   109fe:	4313      	orrs	r3, r2
   10a00:	b2db      	uxtb	r3, r3
   10a02:	b2da      	uxtb	r2, r3
   10a04:	68fb      	ldr	r3, [r7, #12]
   10a06:	701a      	strb	r2, [r3, #0]
            break;
   10a08:	e01f      	b.n	10a4a <SX1272FskSetDccBw+0xca>
        case 20:
            *reg |= ( uint8_t )( 0x08 | ( exponent & 0x07 ) );
   10a0a:	68fb      	ldr	r3, [r7, #12]
   10a0c:	781a      	ldrb	r2, [r3, #0]
   10a0e:	1c3b      	adds	r3, r7, #0
   10a10:	3316      	adds	r3, #22
   10a12:	7819      	ldrb	r1, [r3, #0]
   10a14:	2307      	movs	r3, #7
   10a16:	400b      	ands	r3, r1
   10a18:	b2db      	uxtb	r3, r3
   10a1a:	4313      	orrs	r3, r2
   10a1c:	b2db      	uxtb	r3, r3
   10a1e:	2208      	movs	r2, #8
   10a20:	4313      	orrs	r3, r2
   10a22:	b2da      	uxtb	r2, r3
   10a24:	68fb      	ldr	r3, [r7, #12]
   10a26:	701a      	strb	r2, [r3, #0]
            break;
   10a28:	e00f      	b.n	10a4a <SX1272FskSetDccBw+0xca>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
   10a2a:	68fb      	ldr	r3, [r7, #12]
   10a2c:	781a      	ldrb	r2, [r3, #0]
   10a2e:	1c3b      	adds	r3, r7, #0
   10a30:	3316      	adds	r3, #22
   10a32:	7819      	ldrb	r1, [r3, #0]
   10a34:	2307      	movs	r3, #7
   10a36:	400b      	ands	r3, r1
   10a38:	b2db      	uxtb	r3, r3
   10a3a:	4313      	orrs	r3, r2
   10a3c:	b2db      	uxtb	r3, r3
   10a3e:	2210      	movs	r2, #16
   10a40:	4313      	orrs	r3, r2
   10a42:	b2da      	uxtb	r2, r3
   10a44:	68fb      	ldr	r3, [r7, #12]
   10a46:	701a      	strb	r2, [r3, #0]
            break;
   10a48:	46c0      	nop			; (mov r8, r8)
        default:
            // Something went terribely wrong
            break;
    }

    if( reg == &SX1272->RegRxBw )
   10a4a:	4b0e      	ldr	r3, [pc, #56]	; (10a84 <SX1272FskSetDccBw+0x104>)
   10a4c:	681b      	ldr	r3, [r3, #0]
   10a4e:	1c1a      	adds	r2, r3, #0
   10a50:	3212      	adds	r2, #18
   10a52:	68fb      	ldr	r3, [r7, #12]
   10a54:	429a      	cmp	r2, r3
   10a56:	d109      	bne.n	10a6c <SX1272FskSetDccBw+0xec>
    {
        SX1272Write( REG_RXBW, *reg );
   10a58:	68fb      	ldr	r3, [r7, #12]
   10a5a:	781b      	ldrb	r3, [r3, #0]
   10a5c:	2012      	movs	r0, #18
   10a5e:	1c19      	adds	r1, r3, #0
   10a60:	4b0a      	ldr	r3, [pc, #40]	; (10a8c <SX1272FskSetDccBw+0x10c>)
   10a62:	4798      	blx	r3
        FskSettings.RxBw = rxBwValue;
   10a64:	4b0a      	ldr	r3, [pc, #40]	; (10a90 <SX1272FskSetDccBw+0x110>)
   10a66:	687a      	ldr	r2, [r7, #4]
   10a68:	611a      	str	r2, [r3, #16]
   10a6a:	e008      	b.n	10a7e <SX1272FskSetDccBw+0xfe>
    }
    else
    {
        SX1272Write( REG_AFCBW, *reg );
   10a6c:	68fb      	ldr	r3, [r7, #12]
   10a6e:	781b      	ldrb	r3, [r3, #0]
   10a70:	2013      	movs	r0, #19
   10a72:	1c19      	adds	r1, r3, #0
   10a74:	4b05      	ldr	r3, [pc, #20]	; (10a8c <SX1272FskSetDccBw+0x10c>)
   10a76:	4798      	blx	r3
        FskSettings.RxBwAfc = rxBwValue;
   10a78:	4b05      	ldr	r3, [pc, #20]	; (10a90 <SX1272FskSetDccBw+0x110>)
   10a7a:	687a      	ldr	r2, [r7, #4]
   10a7c:	615a      	str	r2, [r3, #20]
    }
}
   10a7e:	46bd      	mov	sp, r7
   10a80:	b006      	add	sp, #24
   10a82:	bd80      	pop	{r7, pc}
   10a84:	20003700 	.word	0x20003700
   10a88:	00010819 	.word	0x00010819
   10a8c:	00011a0d 	.word	0x00011a0d
   10a90:	2000000c 	.word	0x2000000c

00010a94 <SX1272FskGetPacketCrcOn>:
    SX1272Write( REG_PACKETCONFIG1, SX1272->RegPacketConfig1 );
    FskSettings.CrcOn = enable;
}

bool SX1272FskGetPacketCrcOn( void )
{
   10a94:	b580      	push	{r7, lr}
   10a96:	af00      	add	r7, sp, #0
    SX1272Read( REG_PACKETCONFIG1, &SX1272->RegPacketConfig1 );
   10a98:	4b0c      	ldr	r3, [pc, #48]	; (10acc <SX1272FskGetPacketCrcOn+0x38>)
   10a9a:	681b      	ldr	r3, [r3, #0]
   10a9c:	3330      	adds	r3, #48	; 0x30
   10a9e:	2030      	movs	r0, #48	; 0x30
   10aa0:	1c19      	adds	r1, r3, #0
   10aa2:	4b0b      	ldr	r3, [pc, #44]	; (10ad0 <SX1272FskGetPacketCrcOn+0x3c>)
   10aa4:	4798      	blx	r3
    FskSettings.CrcOn = ( SX1272->RegPacketConfig1 & RF_PACKETCONFIG1_CRC_ON ) >> 4;
   10aa6:	4b09      	ldr	r3, [pc, #36]	; (10acc <SX1272FskGetPacketCrcOn+0x38>)
   10aa8:	681a      	ldr	r2, [r3, #0]
   10aaa:	2330      	movs	r3, #48	; 0x30
   10aac:	5cd3      	ldrb	r3, [r2, r3]
   10aae:	1c1a      	adds	r2, r3, #0
   10ab0:	2310      	movs	r3, #16
   10ab2:	4013      	ands	r3, r2
   10ab4:	111b      	asrs	r3, r3, #4
   10ab6:	1e5a      	subs	r2, r3, #1
   10ab8:	4193      	sbcs	r3, r2
   10aba:	b2da      	uxtb	r2, r3
   10abc:	4b05      	ldr	r3, [pc, #20]	; (10ad4 <SX1272FskGetPacketCrcOn+0x40>)
   10abe:	761a      	strb	r2, [r3, #24]
    return FskSettings.CrcOn;
   10ac0:	4b04      	ldr	r3, [pc, #16]	; (10ad4 <SX1272FskGetPacketCrcOn+0x40>)
   10ac2:	7e1b      	ldrb	r3, [r3, #24]
}
   10ac4:	1c18      	adds	r0, r3, #0
   10ac6:	46bd      	mov	sp, r7
   10ac8:	bd80      	pop	{r7, pc}
   10aca:	46c0      	nop			; (mov r8, r8)
   10acc:	20003700 	.word	0x20003700
   10ad0:	00011a41 	.word	0x00011a41
   10ad4:	2000000c 	.word	0x2000000c

00010ad8 <SX1272FskSetPa20dBm>:
    FskSettings.PayloadLength = SX1272->RegPayloadLength;
    return FskSettings.PayloadLength;
}

void SX1272FskSetPa20dBm( bool enale )
{
   10ad8:	b580      	push	{r7, lr}
   10ada:	b082      	sub	sp, #8
   10adc:	af00      	add	r7, sp, #0
   10ade:	1c02      	adds	r2, r0, #0
   10ae0:	1dfb      	adds	r3, r7, #7
   10ae2:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
   10ae4:	4b10      	ldr	r3, [pc, #64]	; (10b28 <SX1272FskSetPa20dBm+0x50>)
   10ae6:	681b      	ldr	r3, [r3, #0]
   10ae8:	335a      	adds	r3, #90	; 0x5a
   10aea:	205a      	movs	r0, #90	; 0x5a
   10aec:	1c19      	adds	r1, r3, #0
   10aee:	4b0f      	ldr	r3, [pc, #60]	; (10b2c <SX1272FskSetPa20dBm+0x54>)
   10af0:	4798      	blx	r3
    
    if( enale == true )
   10af2:	1dfb      	adds	r3, r7, #7
   10af4:	781b      	ldrb	r3, [r3, #0]
   10af6:	2b00      	cmp	r3, #0
   10af8:	d005      	beq.n	10b06 <SX1272FskSetPa20dBm+0x2e>
    {
        SX1272->RegPaDac = 0x87;
   10afa:	4b0b      	ldr	r3, [pc, #44]	; (10b28 <SX1272FskSetPa20dBm+0x50>)
   10afc:	681a      	ldr	r2, [r3, #0]
   10afe:	235a      	movs	r3, #90	; 0x5a
   10b00:	2187      	movs	r1, #135	; 0x87
   10b02:	54d1      	strb	r1, [r2, r3]
   10b04:	e004      	b.n	10b10 <SX1272FskSetPa20dBm+0x38>
    }
    else
    {
        SX1272->RegPaDac = 0x84;
   10b06:	4b08      	ldr	r3, [pc, #32]	; (10b28 <SX1272FskSetPa20dBm+0x50>)
   10b08:	681a      	ldr	r2, [r3, #0]
   10b0a:	235a      	movs	r3, #90	; 0x5a
   10b0c:	2184      	movs	r1, #132	; 0x84
   10b0e:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_PADAC, SX1272->RegPaDac );
   10b10:	4b05      	ldr	r3, [pc, #20]	; (10b28 <SX1272FskSetPa20dBm+0x50>)
   10b12:	681a      	ldr	r2, [r3, #0]
   10b14:	235a      	movs	r3, #90	; 0x5a
   10b16:	5cd3      	ldrb	r3, [r2, r3]
   10b18:	205a      	movs	r0, #90	; 0x5a
   10b1a:	1c19      	adds	r1, r3, #0
   10b1c:	4b04      	ldr	r3, [pc, #16]	; (10b30 <SX1272FskSetPa20dBm+0x58>)
   10b1e:	4798      	blx	r3
}
   10b20:	46bd      	mov	sp, r7
   10b22:	b002      	add	sp, #8
   10b24:	bd80      	pop	{r7, pc}
   10b26:	46c0      	nop			; (mov r8, r8)
   10b28:	20003700 	.word	0x20003700
   10b2c:	00011a41 	.word	0x00011a41
   10b30:	00011a0d 	.word	0x00011a0d

00010b34 <SX1272FskSetRssiOffset>:
    SX1272Read( REG_PARAMP, &SX1272->RegPaRamp );
    return SX1272->RegPaRamp & ~RF_PARAMP_MASK;
}

void SX1272FskSetRssiOffset( int8_t offset )
{
   10b34:	b580      	push	{r7, lr}
   10b36:	b082      	sub	sp, #8
   10b38:	af00      	add	r7, sp, #0
   10b3a:	1c02      	adds	r2, r0, #0
   10b3c:	1dfb      	adds	r3, r7, #7
   10b3e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_RSSICONFIG, &SX1272->RegRssiConfig );
   10b40:	4b1a      	ldr	r3, [pc, #104]	; (10bac <SX1272FskSetRssiOffset+0x78>)
   10b42:	681b      	ldr	r3, [r3, #0]
   10b44:	330e      	adds	r3, #14
   10b46:	200e      	movs	r0, #14
   10b48:	1c19      	adds	r1, r3, #0
   10b4a:	4b19      	ldr	r3, [pc, #100]	; (10bb0 <SX1272FskSetRssiOffset+0x7c>)
   10b4c:	4798      	blx	r3
    if( offset < 0 )
   10b4e:	1dfb      	adds	r3, r7, #7
   10b50:	781b      	ldrb	r3, [r3, #0]
   10b52:	2b7f      	cmp	r3, #127	; 0x7f
   10b54:	d914      	bls.n	10b80 <SX1272FskSetRssiOffset+0x4c>
    {
        offset = ( ~offset & 0x1F );
   10b56:	1dfb      	adds	r3, r7, #7
   10b58:	781b      	ldrb	r3, [r3, #0]
   10b5a:	43db      	mvns	r3, r3
   10b5c:	b2da      	uxtb	r2, r3
   10b5e:	1dfb      	adds	r3, r7, #7
   10b60:	1c11      	adds	r1, r2, #0
   10b62:	221f      	movs	r2, #31
   10b64:	400a      	ands	r2, r1
   10b66:	701a      	strb	r2, [r3, #0]
        offset += 1;
   10b68:	1dfb      	adds	r3, r7, #7
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	3301      	adds	r3, #1
   10b6e:	b2da      	uxtb	r2, r3
   10b70:	1dfb      	adds	r3, r7, #7
   10b72:	701a      	strb	r2, [r3, #0]
        offset = -offset;
   10b74:	1dfb      	adds	r3, r7, #7
   10b76:	781b      	ldrb	r3, [r3, #0]
   10b78:	425b      	negs	r3, r3
   10b7a:	b2da      	uxtb	r2, r3
   10b7c:	1dfb      	adds	r3, r7, #7
   10b7e:	701a      	strb	r2, [r3, #0]
    }
    SX1272->RegRssiConfig |= ( uint8_t )( ( offset & 0x1F ) << 3 );
   10b80:	4b0a      	ldr	r3, [pc, #40]	; (10bac <SX1272FskSetRssiOffset+0x78>)
   10b82:	681a      	ldr	r2, [r3, #0]
   10b84:	4b09      	ldr	r3, [pc, #36]	; (10bac <SX1272FskSetRssiOffset+0x78>)
   10b86:	681b      	ldr	r3, [r3, #0]
   10b88:	7b99      	ldrb	r1, [r3, #14]
   10b8a:	1dfb      	adds	r3, r7, #7
   10b8c:	781b      	ldrb	r3, [r3, #0]
   10b8e:	00db      	lsls	r3, r3, #3
   10b90:	b2db      	uxtb	r3, r3
   10b92:	430b      	orrs	r3, r1
   10b94:	b2db      	uxtb	r3, r3
   10b96:	7393      	strb	r3, [r2, #14]
    SX1272Write( REG_RSSICONFIG, SX1272->RegRssiConfig );
   10b98:	4b04      	ldr	r3, [pc, #16]	; (10bac <SX1272FskSetRssiOffset+0x78>)
   10b9a:	681b      	ldr	r3, [r3, #0]
   10b9c:	7b9b      	ldrb	r3, [r3, #14]
   10b9e:	200e      	movs	r0, #14
   10ba0:	1c19      	adds	r1, r3, #0
   10ba2:	4b04      	ldr	r3, [pc, #16]	; (10bb4 <SX1272FskSetRssiOffset+0x80>)
   10ba4:	4798      	blx	r3
}
   10ba6:	46bd      	mov	sp, r7
   10ba8:	b002      	add	sp, #8
   10baa:	bd80      	pop	{r7, pc}
   10bac:	20003700 	.word	0x20003700
   10bb0:	00011a41 	.word	0x00011a41
   10bb4:	00011a0d 	.word	0x00011a0d

00010bb8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   10bb8:	b580      	push	{r7, lr}
   10bba:	b082      	sub	sp, #8
   10bbc:	af00      	add	r7, sp, #0
   10bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   10bc0:	687b      	ldr	r3, [r7, #4]
   10bc2:	2200      	movs	r2, #0
   10bc4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   10bc6:	687b      	ldr	r3, [r7, #4]
   10bc8:	2200      	movs	r2, #0
   10bca:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   10bcc:	687b      	ldr	r3, [r7, #4]
   10bce:	2201      	movs	r2, #1
   10bd0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   10bd2:	687b      	ldr	r3, [r7, #4]
   10bd4:	2201      	movs	r2, #1
   10bd6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   10bd8:	687b      	ldr	r3, [r7, #4]
   10bda:	2200      	movs	r2, #0
   10bdc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   10bde:	687b      	ldr	r3, [r7, #4]
   10be0:	2202      	movs	r2, #2
   10be2:	72da      	strb	r2, [r3, #11]
}
   10be4:	46bd      	mov	sp, r7
   10be6:	b002      	add	sp, #8
   10be8:	bd80      	pop	{r7, pc}
   10bea:	46c0      	nop			; (mov r8, r8)

00010bec <SX1272LoRaInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272LoRaInit( void )
{
   10bec:	b580      	push	{r7, lr}
   10bee:	af00      	add	r7, sp, #0
    RFLRState = RFLR_STATE_IDLE;
   10bf0:	4b46      	ldr	r3, [pc, #280]	; (10d0c <SX1272LoRaInit+0x120>)
   10bf2:	2200      	movs	r2, #0
   10bf4:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio
	//------------------------
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10bf6:	4b46      	ldr	r3, [pc, #280]	; (10d10 <SX1272LoRaInit+0x124>)
   10bf8:	2001      	movs	r0, #1
   10bfa:	1c19      	adds	r1, r3, #0
   10bfc:	226f      	movs	r2, #111	; 0x6f
   10bfe:	4b45      	ldr	r3, [pc, #276]	; (10d14 <SX1272LoRaInit+0x128>)
   10c00:	4798      	blx	r3
	//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10c02:	4b43      	ldr	r3, [pc, #268]	; (10d10 <SX1272LoRaInit+0x124>)
   10c04:	2001      	movs	r0, #1
   10c06:	1c19      	adds	r1, r3, #0
   10c08:	226f      	movs	r2, #111	; 0x6f
   10c0a:	4b42      	ldr	r3, [pc, #264]	; (10d14 <SX1272LoRaInit+0x128>)
   10c0c:	4798      	blx	r3
 
 	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
   10c0e:	2000      	movs	r0, #0
   10c10:	4b41      	ldr	r3, [pc, #260]	; (10d18 <SX1272LoRaInit+0x12c>)
   10c12:	4798      	blx	r3
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
   10c14:	4b41      	ldr	r3, [pc, #260]	; (10d1c <SX1272LoRaInit+0x130>)
   10c16:	681a      	ldr	r2, [r3, #0]
   10c18:	4b40      	ldr	r3, [pc, #256]	; (10d1c <SX1272LoRaInit+0x130>)
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	785b      	ldrb	r3, [r3, #1]
   10c1e:	2180      	movs	r1, #128	; 0x80
   10c20:	4249      	negs	r1, r1
   10c22:	430b      	orrs	r3, r1
   10c24:	b2db      	uxtb	r3, r3
   10c26:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );    
   10c28:	4b3c      	ldr	r3, [pc, #240]	; (10d1c <SX1272LoRaInit+0x130>)
   10c2a:	681b      	ldr	r3, [r3, #0]
   10c2c:	785b      	ldrb	r3, [r3, #1]
   10c2e:	2001      	movs	r0, #1
   10c30:	1c19      	adds	r1, r3, #0
   10c32:	4b3b      	ldr	r3, [pc, #236]	; (10d20 <SX1272LoRaInit+0x134>)
   10c34:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
   10c36:	4b36      	ldr	r3, [pc, #216]	; (10d10 <SX1272LoRaInit+0x124>)
   10c38:	2001      	movs	r0, #1
   10c3a:	1c19      	adds	r1, r3, #0
   10c3c:	226f      	movs	r2, #111	; 0x6f
   10c3e:	4b35      	ldr	r3, [pc, #212]	; (10d14 <SX1272LoRaInit+0x128>)
   10c40:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register
    // structure with the value of our setup
    //--------------------------------------
    SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & ~RFLR_PACONFIG_PASELECT_PABOOST ) |
   10c42:	4b36      	ldr	r3, [pc, #216]	; (10d1c <SX1272LoRaInit+0x130>)
   10c44:	681a      	ldr	r2, [r3, #0]
   10c46:	4b35      	ldr	r3, [pc, #212]	; (10d1c <SX1272LoRaInit+0x130>)
   10c48:	681b      	ldr	r3, [r3, #0]
   10c4a:	7a5b      	ldrb	r3, [r3, #9]
   10c4c:	2180      	movs	r1, #128	; 0x80
   10c4e:	4249      	negs	r1, r1
   10c50:	430b      	orrs	r3, r1
   10c52:	b2db      	uxtb	r3, r3
   10c54:	7253      	strb	r3, [r2, #9]
                            RFLR_PACONFIG_PASELECT_PABOOST;
    SX1272LR->RegLna = RFLR_LNA_GAIN_G1 | RFLR_LNA_BOOST_ON;
   10c56:	4b31      	ldr	r3, [pc, #196]	; (10d1c <SX1272LoRaInit+0x130>)
   10c58:	681b      	ldr	r3, [r3, #0]
   10c5a:	2223      	movs	r2, #35	; 0x23
   10c5c:	731a      	strb	r2, [r3, #12]

    SX1272WriteBuffer( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10c5e:	4b2c      	ldr	r3, [pc, #176]	; (10d10 <SX1272LoRaInit+0x124>)
   10c60:	2001      	movs	r0, #1
   10c62:	1c19      	adds	r1, r3, #0
   10c64:	226f      	movs	r2, #111	; 0x6f
   10c66:	4b2f      	ldr	r3, [pc, #188]	; (10d24 <SX1272LoRaInit+0x138>)
   10c68:	4798      	blx	r3
	
    // set the RF settings 
    SX1272LoRaSetRFFrequency( LoRaSettings.RFFrequency );
   10c6a:	4b2f      	ldr	r3, [pc, #188]	; (10d28 <SX1272LoRaInit+0x13c>)
   10c6c:	681b      	ldr	r3, [r3, #0]
   10c6e:	1c18      	adds	r0, r3, #0
   10c70:	4b2e      	ldr	r3, [pc, #184]	; (10d2c <SX1272LoRaInit+0x140>)
   10c72:	4798      	blx	r3
    SX1272LoRaSetPa20dBm( true );
   10c74:	2001      	movs	r0, #1
   10c76:	4b2e      	ldr	r3, [pc, #184]	; (10d30 <SX1272LoRaInit+0x144>)
   10c78:	4798      	blx	r3
    SX1272LoRaSetRFPower( LoRaSettings.Power );
   10c7a:	4b2b      	ldr	r3, [pc, #172]	; (10d28 <SX1272LoRaInit+0x13c>)
   10c7c:	791b      	ldrb	r3, [r3, #4]
   10c7e:	b25b      	sxtb	r3, r3
   10c80:	1c18      	adds	r0, r3, #0
   10c82:	4b2c      	ldr	r3, [pc, #176]	; (10d34 <SX1272LoRaInit+0x148>)
   10c84:	4798      	blx	r3
    SX1272LoRaSetSpreadingFactor( LoRaSettings.SpreadingFactor ); // SF6 only operates in implicit header mode.
   10c86:	4b28      	ldr	r3, [pc, #160]	; (10d28 <SX1272LoRaInit+0x13c>)
   10c88:	799b      	ldrb	r3, [r3, #6]
   10c8a:	1c18      	adds	r0, r3, #0
   10c8c:	4b2a      	ldr	r3, [pc, #168]	; (10d38 <SX1272LoRaInit+0x14c>)
   10c8e:	4798      	blx	r3
    SX1272LoRaSetErrorCoding( LoRaSettings.ErrorCoding );
   10c90:	4b25      	ldr	r3, [pc, #148]	; (10d28 <SX1272LoRaInit+0x13c>)
   10c92:	79db      	ldrb	r3, [r3, #7]
   10c94:	1c18      	adds	r0, r3, #0
   10c96:	4b29      	ldr	r3, [pc, #164]	; (10d3c <SX1272LoRaInit+0x150>)
   10c98:	4798      	blx	r3
    SX1272LoRaSetPacketCrcOn( LoRaSettings.CrcOn );
   10c9a:	4b23      	ldr	r3, [pc, #140]	; (10d28 <SX1272LoRaInit+0x13c>)
   10c9c:	7a1b      	ldrb	r3, [r3, #8]
   10c9e:	1c18      	adds	r0, r3, #0
   10ca0:	4b27      	ldr	r3, [pc, #156]	; (10d40 <SX1272LoRaInit+0x154>)
   10ca2:	4798      	blx	r3
    SX1272LoRaSetSignalBandwidth( LoRaSettings.SignalBw );
   10ca4:	4b20      	ldr	r3, [pc, #128]	; (10d28 <SX1272LoRaInit+0x13c>)
   10ca6:	795b      	ldrb	r3, [r3, #5]
   10ca8:	1c18      	adds	r0, r3, #0
   10caa:	4b26      	ldr	r3, [pc, #152]	; (10d44 <SX1272LoRaInit+0x158>)
   10cac:	4798      	blx	r3
    
    SX1272LoRaSetImplicitHeaderOn( LoRaSettings.ImplicitHeaderOn );
   10cae:	4b1e      	ldr	r3, [pc, #120]	; (10d28 <SX1272LoRaInit+0x13c>)
   10cb0:	7a5b      	ldrb	r3, [r3, #9]
   10cb2:	1c18      	adds	r0, r3, #0
   10cb4:	4b24      	ldr	r3, [pc, #144]	; (10d48 <SX1272LoRaInit+0x15c>)
   10cb6:	4798      	blx	r3
    SX1272LoRaSetSymbTimeout( 0x3FF );
   10cb8:	4b24      	ldr	r3, [pc, #144]	; (10d4c <SX1272LoRaInit+0x160>)
   10cba:	1c18      	adds	r0, r3, #0
   10cbc:	4b24      	ldr	r3, [pc, #144]	; (10d50 <SX1272LoRaInit+0x164>)
   10cbe:	4798      	blx	r3
    SX1272LoRaSetPayloadLength( LoRaSettings.PayloadLength );
   10cc0:	4b19      	ldr	r3, [pc, #100]	; (10d28 <SX1272LoRaInit+0x13c>)
   10cc2:	7e1b      	ldrb	r3, [r3, #24]
   10cc4:	1c18      	adds	r0, r3, #0
   10cc6:	4b23      	ldr	r3, [pc, #140]	; (10d54 <SX1272LoRaInit+0x168>)
   10cc8:	4798      	blx	r3
    SX1272LoRaSetLowDatarateOptimize( true );
   10cca:	2001      	movs	r0, #1
   10ccc:	4b22      	ldr	r3, [pc, #136]	; (10d58 <SX1272LoRaInit+0x16c>)
   10cce:	4798      	blx	r3
	
 
	if (setCW != 0)
   10cd0:	4b22      	ldr	r3, [pc, #136]	; (10d5c <SX1272LoRaInit+0x170>)
   10cd2:	781b      	ldrb	r3, [r3, #0]
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	d003      	beq.n	10ce0 <SX1272LoRaInit+0xf4>
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON);
   10cd8:	2008      	movs	r0, #8
   10cda:	4b21      	ldr	r3, [pc, #132]	; (10d60 <SX1272LoRaInit+0x174>)
   10cdc:	4798      	blx	r3
   10cde:	e002      	b.n	10ce6 <SX1272LoRaInit+0xfa>
	}
	else
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF);
   10ce0:	2000      	movs	r0, #0
   10ce2:	4b1f      	ldr	r3, [pc, #124]	; (10d60 <SX1272LoRaInit+0x174>)
   10ce4:	4798      	blx	r3
	}

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10ce6:	2001      	movs	r0, #1
   10ce8:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <SX1272LoRaInit+0x12c>)
   10cea:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );		
   10cec:	4b08      	ldr	r3, [pc, #32]	; (10d10 <SX1272LoRaInit+0x124>)
   10cee:	2001      	movs	r0, #1
   10cf0:	1c19      	adds	r1, r3, #0
   10cf2:	226f      	movs	r2, #111	; 0x6f
   10cf4:	4b07      	ldr	r3, [pc, #28]	; (10d14 <SX1272LoRaInit+0x128>)
   10cf6:	4798      	blx	r3
	
	if (setCW != 0)
   10cf8:	4b18      	ldr	r3, [pc, #96]	; (10d5c <SX1272LoRaInit+0x170>)
   10cfa:	781b      	ldrb	r3, [r3, #0]
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d002      	beq.n	10d06 <SX1272LoRaInit+0x11a>
	{
		SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER);
   10d00:	2003      	movs	r0, #3
   10d02:	4b05      	ldr	r3, [pc, #20]	; (10d18 <SX1272LoRaInit+0x12c>)
   10d04:	4798      	blx	r3
	}
}
   10d06:	46bd      	mov	sp, r7
   10d08:	bd80      	pop	{r7, pc}
   10d0a:	46c0      	nop			; (mov r8, r8)
   10d0c:	200004ee 	.word	0x200004ee
   10d10:	20003909 	.word	0x20003909
   10d14:	00011ab5 	.word	0x00011ab5
   10d18:	00010d65 	.word	0x00010d65
   10d1c:	20003804 	.word	0x20003804
   10d20:	00011a0d 	.word	0x00011a0d
   10d24:	00011a7d 	.word	0x00011a7d
   10d28:	20000028 	.word	0x20000028
   10d2c:	000112b1 	.word	0x000112b1
   10d30:	00011729 	.word	0x00011729
   10d34:	00011341 	.word	0x00011341
   10d38:	00011509 	.word	0x00011509
   10d3c:	000115ad 	.word	0x000115ad
   10d40:	00011615 	.word	0x00011615
   10d44:	0001149d 	.word	0x0001149d
   10d48:	0001167d 	.word	0x0001167d
   10d4c:	000003ff 	.word	0x000003ff
   10d50:	000117e5 	.word	0x000117e5
   10d54:	000116e5 	.word	0x000116e5
   10d58:	0001185d 	.word	0x0001185d
   10d5c:	20003690 	.word	0x20003690
   10d60:	00011785 	.word	0x00011785

00010d64 <SX1272LoRaSetOpMode>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272LoRaSetOpMode( uint8_t opMode )
{
   10d64:	b580      	push	{r7, lr}
   10d66:	b082      	sub	sp, #8
   10d68:	af00      	add	r7, sp, #0
   10d6a:	1c02      	adds	r2, r0, #0
   10d6c:	1dfb      	adds	r3, r7, #7
   10d6e:	701a      	strb	r2, [r3, #0]
   
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_MASK ) | opMode;
   10d70:	4b0c      	ldr	r3, [pc, #48]	; (10da4 <SX1272LoRaSetOpMode+0x40>)
   10d72:	681a      	ldr	r2, [r3, #0]
   10d74:	4b0b      	ldr	r3, [pc, #44]	; (10da4 <SX1272LoRaSetOpMode+0x40>)
   10d76:	681b      	ldr	r3, [r3, #0]
   10d78:	785b      	ldrb	r3, [r3, #1]
   10d7a:	b2db      	uxtb	r3, r3
   10d7c:	2107      	movs	r1, #7
   10d7e:	438b      	bics	r3, r1
   10d80:	b2d9      	uxtb	r1, r3
   10d82:	1dfb      	adds	r3, r7, #7
   10d84:	781b      	ldrb	r3, [r3, #0]
   10d86:	430b      	orrs	r3, r1
   10d88:	b2db      	uxtb	r3, r3
   10d8a:	b2db      	uxtb	r3, r3
   10d8c:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );        
   10d8e:	4b05      	ldr	r3, [pc, #20]	; (10da4 <SX1272LoRaSetOpMode+0x40>)
   10d90:	681b      	ldr	r3, [r3, #0]
   10d92:	785b      	ldrb	r3, [r3, #1]
   10d94:	2001      	movs	r0, #1
   10d96:	1c19      	adds	r1, r3, #0
   10d98:	4b03      	ldr	r3, [pc, #12]	; (10da8 <SX1272LoRaSetOpMode+0x44>)
   10d9a:	4798      	blx	r3
}
   10d9c:	46bd      	mov	sp, r7
   10d9e:	b002      	add	sp, #8
   10da0:	bd80      	pop	{r7, pc}
   10da2:	46c0      	nop			; (mov r8, r8)
   10da4:	20003804 	.word	0x20003804
   10da8:	00011a0d 	.word	0x00011a0d

00010dac <configure_extintLORA_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_channel(void)
{
   10dac:	b580      	push	{r7, lr}
   10dae:	b084      	sub	sp, #16
   10db0:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   10db2:	1d3b      	adds	r3, r7, #4
   10db4:	1c18      	adds	r0, r3, #0
   10db6:	4b0b      	ldr	r3, [pc, #44]	; (10de4 <configure_extintLORA_channel+0x38>)
   10db8:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
   10dba:	1d3b      	adds	r3, r7, #4
   10dbc:	2229      	movs	r2, #41	; 0x29
   10dbe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
   10dc0:	1d3b      	adds	r3, r7, #4
   10dc2:	2200      	movs	r2, #0
   10dc4:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   10dc6:	1d3b      	adds	r3, r7, #4
   10dc8:	2201      	movs	r2, #1
   10dca:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
   10dcc:	1d3b      	adds	r3, r7, #4
   10dce:	2201      	movs	r2, #1
   10dd0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
   10dd2:	1d3b      	adds	r3, r7, #4
   10dd4:	2009      	movs	r0, #9
   10dd6:	1c19      	adds	r1, r3, #0
   10dd8:	4b03      	ldr	r3, [pc, #12]	; (10de8 <configure_extintLORA_channel+0x3c>)
   10dda:	4798      	blx	r3
}
   10ddc:	46bd      	mov	sp, r7
   10dde:	b004      	add	sp, #16
   10de0:	bd80      	pop	{r7, pc}
   10de2:	46c0      	nop			; (mov r8, r8)
   10de4:	00010bb9 	.word	0x00010bb9
   10de8:	0000406d 	.word	0x0000406d

00010dec <configure_extintLORA_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_callbacks(void)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	af00      	add	r7, sp, #0
	extint_register_callback(extintLORA_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
   10df0:	4b05      	ldr	r3, [pc, #20]	; (10e08 <configure_extintLORA_callbacks+0x1c>)
   10df2:	1c18      	adds	r0, r3, #0
   10df4:	2109      	movs	r1, #9
   10df6:	2200      	movs	r2, #0
   10df8:	4b04      	ldr	r3, [pc, #16]	; (10e0c <configure_extintLORA_callbacks+0x20>)
   10dfa:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   10dfc:	2009      	movs	r0, #9
   10dfe:	2100      	movs	r1, #0
   10e00:	4b03      	ldr	r3, [pc, #12]	; (10e10 <configure_extintLORA_callbacks+0x24>)
   10e02:	4798      	blx	r3
}
   10e04:	46bd      	mov	sp, r7
   10e06:	bd80      	pop	{r7, pc}
   10e08:	00010e15 	.word	0x00010e15
   10e0c:	00004239 	.word	0x00004239
   10e10:	00004295 	.word	0x00004295

00010e14 <extintLORA_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintLORA_detection_callback(void)
{
   10e14:	b580      	push	{r7, lr}
   10e16:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFLORA;
   10e18:	4b07      	ldr	r3, [pc, #28]	; (10e38 <extintLORA_detection_callback+0x24>)
   10e1a:	681b      	ldr	r3, [r3, #0]
   10e1c:	2280      	movs	r2, #128	; 0x80
   10e1e:	00d2      	lsls	r2, r2, #3
   10e20:	431a      	orrs	r2, r3
   10e22:	4b05      	ldr	r3, [pc, #20]	; (10e38 <extintLORA_detection_callback+0x24>)
   10e24:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFFSK;
   10e26:	4b04      	ldr	r3, [pc, #16]	; (10e38 <extintLORA_detection_callback+0x24>)
   10e28:	681b      	ldr	r3, [r3, #0]
   10e2a:	2280      	movs	r2, #128	; 0x80
   10e2c:	0092      	lsls	r2, r2, #2
   10e2e:	431a      	orrs	r2, r3
   10e30:	4b01      	ldr	r3, [pc, #4]	; (10e38 <extintLORA_detection_callback+0x24>)
   10e32:	601a      	str	r2, [r3, #0]
}
   10e34:	46bd      	mov	sp, r7
   10e36:	bd80      	pop	{r7, pc}
   10e38:	2000369c 	.word	0x2000369c

00010e3c <AppLoraTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraTask(void)
{
   10e3c:	b580      	push	{r7, lr}
   10e3e:	af00      	add	r7, sp, #0
		
	if ((setCW == 0)&&(setRXContinuous==0)&&(whichRadio == WHICHRADIO_LORA))
   10e40:	4b6a      	ldr	r3, [pc, #424]	; (10fec <AppLoraTask+0x1b0>)
   10e42:	781b      	ldrb	r3, [r3, #0]
   10e44:	2b00      	cmp	r3, #0
   10e46:	d000      	beq.n	10e4a <AppLoraTask+0xe>
   10e48:	e0ce      	b.n	10fe8 <AppLoraTask+0x1ac>
   10e4a:	4b69      	ldr	r3, [pc, #420]	; (10ff0 <AppLoraTask+0x1b4>)
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	2b00      	cmp	r3, #0
   10e50:	d000      	beq.n	10e54 <AppLoraTask+0x18>
   10e52:	e0c9      	b.n	10fe8 <AppLoraTask+0x1ac>
   10e54:	4b67      	ldr	r3, [pc, #412]	; (10ff4 <AppLoraTask+0x1b8>)
   10e56:	781b      	ldrb	r3, [r3, #0]
   10e58:	2b99      	cmp	r3, #153	; 0x99
   10e5a:	d000      	beq.n	10e5e <AppLoraTask+0x22>
   10e5c:	e0c4      	b.n	10fe8 <AppLoraTask+0x1ac>
	{	 
		if (whichRadio == WHICHRADIO_LORA)
   10e5e:	4b65      	ldr	r3, [pc, #404]	; (10ff4 <AppLoraTask+0x1b8>)
   10e60:	781b      	ldrb	r3, [r3, #0]
   10e62:	2b99      	cmp	r3, #153	; 0x99
   10e64:	d000      	beq.n	10e68 <AppLoraTask+0x2c>
   10e66:	e0bf      	b.n	10fe8 <AppLoraTask+0x1ac>
		{	
			SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
   10e68:	4b63      	ldr	r3, [pc, #396]	; (10ff8 <AppLoraTask+0x1bc>)
   10e6a:	681b      	ldr	r3, [r3, #0]
   10e6c:	3312      	adds	r3, #18
   10e6e:	2012      	movs	r0, #18
   10e70:	1c19      	adds	r1, r3, #0
   10e72:	4b62      	ldr	r3, [pc, #392]	; (10ffc <AppLoraTask+0x1c0>)
   10e74:	4798      	blx	r3
			//----------------------------
			/// see if RX DONE for a receive event 
			//----------------------------
 			if (((SX1272LR->RegIrqFlags & 0x40)!= 0) && (setTXContinuous==0))
   10e76:	4b60      	ldr	r3, [pc, #384]	; (10ff8 <AppLoraTask+0x1bc>)
   10e78:	681b      	ldr	r3, [r3, #0]
   10e7a:	7c9b      	ldrb	r3, [r3, #18]
   10e7c:	1c1a      	adds	r2, r3, #0
   10e7e:	2340      	movs	r3, #64	; 0x40
   10e80:	4013      	ands	r3, r2
   10e82:	d100      	bne.n	10e86 <AppLoraTask+0x4a>
   10e84:	e07a      	b.n	10f7c <AppLoraTask+0x140>
   10e86:	4b5e      	ldr	r3, [pc, #376]	; (11000 <AppLoraTask+0x1c4>)
   10e88:	781b      	ldrb	r3, [r3, #0]
   10e8a:	2b00      	cmp	r3, #0
   10e8c:	d176      	bne.n	10f7c <AppLoraTask+0x140>
 			{ 		
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
   10e8e:	2012      	movs	r0, #18
   10e90:	2140      	movs	r1, #64	; 0x40
   10e92:	4b5c      	ldr	r3, [pc, #368]	; (11004 <AppLoraTask+0x1c8>)
   10e94:	4798      	blx	r3
				RFLRState = RFLR_STATE_RX_DONE;		
   10e96:	4b5c      	ldr	r3, [pc, #368]	; (11008 <AppLoraTask+0x1cc>)
   10e98:	2203      	movs	r2, #3
   10e9a:	701a      	strb	r2, [r3, #0]
		
				loraReceiveCount++;
   10e9c:	4b5b      	ldr	r3, [pc, #364]	; (1100c <AppLoraTask+0x1d0>)
   10e9e:	881b      	ldrh	r3, [r3, #0]
   10ea0:	3301      	adds	r3, #1
   10ea2:	b29a      	uxth	r2, r3
   10ea4:	4b59      	ldr	r3, [pc, #356]	; (1100c <AppLoraTask+0x1d0>)
   10ea6:	801a      	strh	r2, [r3, #0]
				SX1272Read( REG_LR_FIFORXCURRENTADDR, &SX1272LR->RegFifoRxCurrentAddr );
   10ea8:	4b53      	ldr	r3, [pc, #332]	; (10ff8 <AppLoraTask+0x1bc>)
   10eaa:	681b      	ldr	r3, [r3, #0]
   10eac:	3310      	adds	r3, #16
   10eae:	2010      	movs	r0, #16
   10eb0:	1c19      	adds	r1, r3, #0
   10eb2:	4b52      	ldr	r3, [pc, #328]	; (10ffc <AppLoraTask+0x1c0>)
   10eb4:	4798      	blx	r3

 
				SX1272Read( REG_LR_NBRXBYTES, &SX1272LR->RegNbRxBytes );
   10eb6:	4b50      	ldr	r3, [pc, #320]	; (10ff8 <AppLoraTask+0x1bc>)
   10eb8:	681b      	ldr	r3, [r3, #0]
   10eba:	3313      	adds	r3, #19
   10ebc:	2013      	movs	r0, #19
   10ebe:	1c19      	adds	r1, r3, #0
   10ec0:	4b4e      	ldr	r3, [pc, #312]	; (10ffc <AppLoraTask+0x1c0>)
   10ec2:	4798      	blx	r3
				RxPacketSize = SX1272LR->RegNbRxBytes;
   10ec4:	4b4c      	ldr	r3, [pc, #304]	; (10ff8 <AppLoraTask+0x1bc>)
   10ec6:	681b      	ldr	r3, [r3, #0]
   10ec8:	7cdb      	ldrb	r3, [r3, #19]
   10eca:	1c1a      	adds	r2, r3, #0
   10ecc:	4b50      	ldr	r3, [pc, #320]	; (11010 <AppLoraTask+0x1d4>)
   10ece:	801a      	strh	r2, [r3, #0]
				RFBufferLora[0] = RxPacketSize; 
   10ed0:	4b4f      	ldr	r3, [pc, #316]	; (11010 <AppLoraTask+0x1d4>)
   10ed2:	881b      	ldrh	r3, [r3, #0]
   10ed4:	b2da      	uxtb	r2, r3
   10ed6:	4b4f      	ldr	r3, [pc, #316]	; (11014 <AppLoraTask+0x1d8>)
   10ed8:	701a      	strb	r2, [r3, #0]
				SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxCurrentAddr;
   10eda:	4b47      	ldr	r3, [pc, #284]	; (10ff8 <AppLoraTask+0x1bc>)
   10edc:	681a      	ldr	r2, [r3, #0]
   10ede:	4b46      	ldr	r3, [pc, #280]	; (10ff8 <AppLoraTask+0x1bc>)
   10ee0:	681b      	ldr	r3, [r3, #0]
   10ee2:	7c1b      	ldrb	r3, [r3, #16]
   10ee4:	7353      	strb	r3, [r2, #13]
				SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   10ee6:	4b44      	ldr	r3, [pc, #272]	; (10ff8 <AppLoraTask+0x1bc>)
   10ee8:	681b      	ldr	r3, [r3, #0]
   10eea:	7b5b      	ldrb	r3, [r3, #13]
   10eec:	200d      	movs	r0, #13
   10eee:	1c19      	adds	r1, r3, #0
   10ef0:	4b44      	ldr	r3, [pc, #272]	; (11004 <AppLoraTask+0x1c8>)
   10ef2:	4798      	blx	r3
				SX1272ReadFifo( RFBufferLora+1, SX1272LR->RegNbRxBytes );
   10ef4:	4b40      	ldr	r3, [pc, #256]	; (10ff8 <AppLoraTask+0x1bc>)
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	7cdb      	ldrb	r3, [r3, #19]
   10efa:	4a47      	ldr	r2, [pc, #284]	; (11018 <AppLoraTask+0x1dc>)
   10efc:	1c10      	adds	r0, r2, #0
   10efe:	1c19      	adds	r1, r3, #0
   10f00:	4b46      	ldr	r3, [pc, #280]	; (1101c <AppLoraTask+0x1e0>)
   10f02:	4798      	blx	r3
 
				if (testRFBufferOffset >= MAXPACKETS2)
   10f04:	4b46      	ldr	r3, [pc, #280]	; (11020 <AppLoraTask+0x1e4>)
   10f06:	781b      	ldrb	r3, [r3, #0]
   10f08:	2b03      	cmp	r3, #3
   10f0a:	d902      	bls.n	10f12 <AppLoraTask+0xd6>
				{
					testRFBufferOffset = 0; 
   10f0c:	4b44      	ldr	r3, [pc, #272]	; (11020 <AppLoraTask+0x1e4>)
   10f0e:	2200      	movs	r2, #0
   10f10:	701a      	strb	r2, [r3, #0]
				}
				testRFBuffer[testRFBufferOffset].Length = RFBufferLora[1];  //0];
   10f12:	4b43      	ldr	r3, [pc, #268]	; (11020 <AppLoraTask+0x1e4>)
   10f14:	781b      	ldrb	r3, [r3, #0]
   10f16:	1c1a      	adds	r2, r3, #0
   10f18:	4b3e      	ldr	r3, [pc, #248]	; (11014 <AppLoraTask+0x1d8>)
   10f1a:	7858      	ldrb	r0, [r3, #1]
   10f1c:	4941      	ldr	r1, [pc, #260]	; (11024 <AppLoraTask+0x1e8>)
   10f1e:	1c13      	adds	r3, r2, #0
   10f20:	005b      	lsls	r3, r3, #1
   10f22:	189b      	adds	r3, r3, r2
   10f24:	1c02      	adds	r2, r0, #0
   10f26:	545a      	strb	r2, [r3, r1]
				testRFBuffer[testRFBufferOffset].Command[0] = RFBufferLora[3]; //2]; 
   10f28:	4b3d      	ldr	r3, [pc, #244]	; (11020 <AppLoraTask+0x1e4>)
   10f2a:	781b      	ldrb	r3, [r3, #0]
   10f2c:	1c1a      	adds	r2, r3, #0
   10f2e:	4b39      	ldr	r3, [pc, #228]	; (11014 <AppLoraTask+0x1d8>)
   10f30:	78d9      	ldrb	r1, [r3, #3]
   10f32:	483c      	ldr	r0, [pc, #240]	; (11024 <AppLoraTask+0x1e8>)
   10f34:	1c13      	adds	r3, r2, #0
   10f36:	005b      	lsls	r3, r3, #1
   10f38:	189b      	adds	r3, r3, r2
   10f3a:	18c3      	adds	r3, r0, r3
   10f3c:	1c0a      	adds	r2, r1, #0
   10f3e:	705a      	strb	r2, [r3, #1]
				testRFBuffer[testRFBufferOffset].Command[1] = RFBufferLora[4]; //3]; 
   10f40:	4b37      	ldr	r3, [pc, #220]	; (11020 <AppLoraTask+0x1e4>)
   10f42:	781b      	ldrb	r3, [r3, #0]
   10f44:	1c1a      	adds	r2, r3, #0
   10f46:	4b33      	ldr	r3, [pc, #204]	; (11014 <AppLoraTask+0x1d8>)
   10f48:	7919      	ldrb	r1, [r3, #4]
   10f4a:	4836      	ldr	r0, [pc, #216]	; (11024 <AppLoraTask+0x1e8>)
   10f4c:	1c13      	adds	r3, r2, #0
   10f4e:	005b      	lsls	r3, r3, #1
   10f50:	189b      	adds	r3, r3, r2
   10f52:	18c3      	adds	r3, r0, r3
   10f54:	3301      	adds	r3, #1
   10f56:	1c0a      	adds	r2, r1, #0
   10f58:	705a      	strb	r2, [r3, #1]
		#if REMOTEBOARD		
				AppScreenFSKReadingIn(&RFBufferLora[1],testRFBufferOffset);
		#endif		
				testRFBufferOffset++;	
   10f5a:	4b31      	ldr	r3, [pc, #196]	; (11020 <AppLoraTask+0x1e4>)
   10f5c:	781b      	ldrb	r3, [r3, #0]
   10f5e:	3301      	adds	r3, #1
   10f60:	b2da      	uxtb	r2, r3
   10f62:	4b2f      	ldr	r3, [pc, #188]	; (11020 <AppLoraTask+0x1e4>)
   10f64:	701a      	strb	r2, [r3, #0]
				if (testRFBufferOffset >= MAXPACKETS2)
   10f66:	4b2e      	ldr	r3, [pc, #184]	; (11020 <AppLoraTask+0x1e4>)
   10f68:	781b      	ldrb	r3, [r3, #0]
   10f6a:	2b03      	cmp	r3, #3
   10f6c:	d902      	bls.n	10f74 <AppLoraTask+0x138>
				{
					testRFBufferOffset = 0;
   10f6e:	4b2c      	ldr	r3, [pc, #176]	; (11020 <AppLoraTask+0x1e4>)
   10f70:	2200      	movs	r2, #0
   10f72:	701a      	strb	r2, [r3, #0]
				}	
		#if BRAKEBOARD		
				AppProtocolBrake(&RFBufferLora[1]);
   10f74:	4b28      	ldr	r3, [pc, #160]	; (11018 <AppLoraTask+0x1dc>)
   10f76:	1c18      	adds	r0, r3, #0
   10f78:	4b2b      	ldr	r3, [pc, #172]	; (11028 <AppLoraTask+0x1ec>)
   10f7a:	4798      	blx	r3
		#endif						
			}
			//----------------------------
			/// see if packetSent
			//----------------------------
 			if ((SX1272LR->RegIrqFlags & 0x08)!= 0)  
   10f7c:	4b1e      	ldr	r3, [pc, #120]	; (10ff8 <AppLoraTask+0x1bc>)
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	7c9b      	ldrb	r3, [r3, #18]
   10f82:	1c1a      	adds	r2, r3, #0
   10f84:	2308      	movs	r3, #8
   10f86:	4013      	ands	r3, r2
   10f88:	d02e      	beq.n	10fe8 <AppLoraTask+0x1ac>
			{
				SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10f8a:	2001      	movs	r0, #1
   10f8c:	4b27      	ldr	r3, [pc, #156]	; (1102c <AppLoraTask+0x1f0>)
   10f8e:	4798      	blx	r3
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE  );	
   10f90:	2012      	movs	r0, #18
   10f92:	2108      	movs	r1, #8
   10f94:	4b1b      	ldr	r3, [pc, #108]	; (11004 <AppLoraTask+0x1c8>)
   10f96:	4798      	blx	r3
				//--------------------------------
				// set interrupt pin to processor
				SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
   10f98:	4b17      	ldr	r3, [pc, #92]	; (10ff8 <AppLoraTask+0x1bc>)
   10f9a:	681a      	ldr	r2, [r3, #0]
   10f9c:	233f      	movs	r3, #63	; 0x3f
   10f9e:	2100      	movs	r1, #0
   10fa0:	54d1      	strb	r1, [r2, r3]
				SX1272LR->RegDioMapping2 = 0;
   10fa2:	4b15      	ldr	r3, [pc, #84]	; (10ff8 <AppLoraTask+0x1bc>)
   10fa4:	681a      	ldr	r2, [r3, #0]
   10fa6:	2340      	movs	r3, #64	; 0x40
   10fa8:	2100      	movs	r1, #0
   10faa:	54d1      	strb	r1, [r2, r3]
				SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
   10fac:	4b12      	ldr	r3, [pc, #72]	; (10ff8 <AppLoraTask+0x1bc>)
   10fae:	681b      	ldr	r3, [r3, #0]
   10fb0:	333f      	adds	r3, #63	; 0x3f
   10fb2:	2040      	movs	r0, #64	; 0x40
   10fb4:	1c19      	adds	r1, r3, #0
   10fb6:	2202      	movs	r2, #2
   10fb8:	4b1d      	ldr	r3, [pc, #116]	; (11030 <AppLoraTask+0x1f4>)
   10fba:	4798      	blx	r3
				SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
   10fbc:	2005      	movs	r0, #5
   10fbe:	4b1b      	ldr	r3, [pc, #108]	; (1102c <AppLoraTask+0x1f0>)
   10fc0:	4798      	blx	r3
		#if REMOTEBOARD
				commSupTimer = COMM_SUP_TIME_REMOTE; 
		#endif		
				if (switchOnTransmit != 0)
   10fc2:	4b1c      	ldr	r3, [pc, #112]	; (11034 <AppLoraTask+0x1f8>)
   10fc4:	781b      	ldrb	r3, [r3, #0]
   10fc6:	2b00      	cmp	r3, #0
   10fc8:	d008      	beq.n	10fdc <AppLoraTask+0x1a0>
				{
					whichRadio = switchOnTransmit; 
   10fca:	4b1a      	ldr	r3, [pc, #104]	; (11034 <AppLoraTask+0x1f8>)
   10fcc:	781a      	ldrb	r2, [r3, #0]
   10fce:	4b09      	ldr	r3, [pc, #36]	; (10ff4 <AppLoraTask+0x1b8>)
   10fd0:	701a      	strb	r2, [r3, #0]
					CommInit();
   10fd2:	4b19      	ldr	r3, [pc, #100]	; (11038 <AppLoraTask+0x1fc>)
   10fd4:	4798      	blx	r3
					switchOnTransmit = 0; 
   10fd6:	4b17      	ldr	r3, [pc, #92]	; (11034 <AppLoraTask+0x1f8>)
   10fd8:	2200      	movs	r2, #0
   10fda:	701a      	strb	r2, [r3, #0]
				}
				if (setTXContinuous!=0)
   10fdc:	4b08      	ldr	r3, [pc, #32]	; (11000 <AppLoraTask+0x1c4>)
   10fde:	781b      	ldrb	r3, [r3, #0]
   10fe0:	2b00      	cmp	r3, #0
   10fe2:	d001      	beq.n	10fe8 <AppLoraTask+0x1ac>
				{
					SendOneMessage();
   10fe4:	4b15      	ldr	r3, [pc, #84]	; (1103c <AppLoraTask+0x200>)
   10fe6:	4798      	blx	r3
				}
			}
		}
	}
}
   10fe8:	46bd      	mov	sp, r7
   10fea:	bd80      	pop	{r7, pc}
   10fec:	20003690 	.word	0x20003690
   10ff0:	20003691 	.word	0x20003691
   10ff4:	200036d2 	.word	0x200036d2
   10ff8:	20003804 	.word	0x20003804
   10ffc:	00011a41 	.word	0x00011a41
   11000:	20003693 	.word	0x20003693
   11004:	00011a0d 	.word	0x00011a0d
   11008:	200004ee 	.word	0x200004ee
   1100c:	200004f6 	.word	0x200004f6
   11010:	200004f0 	.word	0x200004f0
   11014:	20003808 	.word	0x20003808
   11018:	20003809 	.word	0x20003809
   1101c:	00011b15 	.word	0x00011b15
   11020:	200004f8 	.word	0x200004f8
   11024:	20003980 	.word	0x20003980
   11028:	00009f2d 	.word	0x00009f2d
   1102c:	00010d65 	.word	0x00010d65
   11030:	00011a7d 	.word	0x00011a7d
   11034:	200004d9 	.word	0x200004d9
   11038:	0000f4fd 	.word	0x0000f4fd
   1103c:	0000aee1 	.word	0x0000aee1

00011040 <AppLoraReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraReceiveStart(void)
{
   11040:	b580      	push	{r7, lr}
   11042:	af00      	add	r7, sp, #0
	 
 
 	//------------------------
	// set up receive.
	//------------------------
	SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
   11044:	4b39      	ldr	r3, [pc, #228]	; (1112c <AppLoraReceiveStart+0xec>)
   11046:	681b      	ldr	r3, [r3, #0]
   11048:	3312      	adds	r3, #18
   1104a:	2012      	movs	r0, #18
   1104c:	1c19      	adds	r1, r3, #0
   1104e:	4b38      	ldr	r3, [pc, #224]	; (11130 <AppLoraReceiveStart+0xf0>)
   11050:	4798      	blx	r3
    memset( RFBufferLora, 0, ( size_t )RF_BUFFER_SIZE );
   11052:	4a38      	ldr	r2, [pc, #224]	; (11134 <AppLoraReceiveStart+0xf4>)
   11054:	2380      	movs	r3, #128	; 0x80
   11056:	005b      	lsls	r3, r3, #1
   11058:	1c10      	adds	r0, r2, #0
   1105a:	2100      	movs	r1, #0
   1105c:	1c1a      	adds	r2, r3, #0
   1105e:	4b36      	ldr	r3, [pc, #216]	; (11138 <AppLoraReceiveStart+0xf8>)
   11060:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintLORA_channel();
   11062:	4b36      	ldr	r3, [pc, #216]	; (1113c <AppLoraReceiveStart+0xfc>)
   11064:	4798      	blx	r3
	configure_extintLORA_callbacks();
   11066:	4b36      	ldr	r3, [pc, #216]	; (11140 <AppLoraReceiveStart+0x100>)
   11068:	4798      	blx	r3

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   1106a:	2001      	movs	r0, #1
   1106c:	4b35      	ldr	r3, [pc, #212]	; (11144 <AppLoraReceiveStart+0x104>)
   1106e:	4798      	blx	r3
 
	SX1272LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
   11070:	4b2e      	ldr	r3, [pc, #184]	; (1112c <AppLoraReceiveStart+0xec>)
   11072:	681b      	ldr	r3, [r3, #0]
   11074:	22b7      	movs	r2, #183	; 0xb7
   11076:	745a      	strb	r2, [r3, #17]
        RFLR_IRQFLAGS_VALIDHEADER |
        //RFLR_IRQFLAGS_TXDONE |
        RFLR_IRQFLAGS_CADDONE |
        RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
        RFLR_IRQFLAGS_CADDETECTED;
	SX1272Write( REG_LR_IRQFLAGSMASK, SX1272LR->RegIrqFlagsMask );	
   11078:	4b2c      	ldr	r3, [pc, #176]	; (1112c <AppLoraReceiveStart+0xec>)
   1107a:	681b      	ldr	r3, [r3, #0]
   1107c:	7c5b      	ldrb	r3, [r3, #17]
   1107e:	2011      	movs	r0, #17
   11080:	1c19      	adds	r1, r3, #0
   11082:	4b31      	ldr	r3, [pc, #196]	; (11148 <AppLoraReceiveStart+0x108>)
   11084:	4798      	blx	r3
    // Clear Irq
    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
   11086:	2012      	movs	r0, #18
   11088:	2140      	movs	r1, #64	; 0x40
   1108a:	4b2f      	ldr	r3, [pc, #188]	; (11148 <AppLoraReceiveStart+0x108>)
   1108c:	4798      	blx	r3
    
	if( LoRaSettings.FreqHopOn == true )
   1108e:	4b2f      	ldr	r3, [pc, #188]	; (1114c <AppLoraReceiveStart+0x10c>)
   11090:	7adb      	ldrb	r3, [r3, #11]
   11092:	2b00      	cmp	r3, #0
   11094:	d019      	beq.n	110ca <AppLoraReceiveStart+0x8a>
    {
	    SX1272LR->RegHopPeriod = LoRaSettings.HopPeriod;
   11096:	4b25      	ldr	r3, [pc, #148]	; (1112c <AppLoraReceiveStart+0xec>)
   11098:	681a      	ldr	r2, [r3, #0]
   1109a:	4b2c      	ldr	r3, [pc, #176]	; (1114c <AppLoraReceiveStart+0x10c>)
   1109c:	7b19      	ldrb	r1, [r3, #12]
   1109e:	2324      	movs	r3, #36	; 0x24
   110a0:	54d1      	strb	r1, [r2, r3]
		SX1272Read( REG_LR_HOPCHANNEL, &SX1272LR->RegHopChannel );
   110a2:	4b22      	ldr	r3, [pc, #136]	; (1112c <AppLoraReceiveStart+0xec>)
   110a4:	681b      	ldr	r3, [r3, #0]
   110a6:	331c      	adds	r3, #28
   110a8:	201c      	movs	r0, #28
   110aa:	1c19      	adds	r1, r3, #0
   110ac:	4b20      	ldr	r3, [pc, #128]	; (11130 <AppLoraReceiveStart+0xf0>)
   110ae:	4798      	blx	r3
		SX1272LoRaSetRFFrequency( HoppingFrequencies[SX1272LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
   110b0:	4b1e      	ldr	r3, [pc, #120]	; (1112c <AppLoraReceiveStart+0xec>)
   110b2:	681b      	ldr	r3, [r3, #0]
   110b4:	7f1b      	ldrb	r3, [r3, #28]
   110b6:	1c1a      	adds	r2, r3, #0
   110b8:	233f      	movs	r3, #63	; 0x3f
   110ba:	401a      	ands	r2, r3
   110bc:	4b24      	ldr	r3, [pc, #144]	; (11150 <AppLoraReceiveStart+0x110>)
   110be:	0092      	lsls	r2, r2, #2
   110c0:	58d3      	ldr	r3, [r2, r3]
   110c2:	1c18      	adds	r0, r3, #0
   110c4:	4b23      	ldr	r3, [pc, #140]	; (11154 <AppLoraReceiveStart+0x114>)
   110c6:	4798      	blx	r3
   110c8:	e004      	b.n	110d4 <AppLoraReceiveStart+0x94>
    }
    else
    {
		SX1272LR->RegHopPeriod = 255;   //or 0 with transmit
   110ca:	4b18      	ldr	r3, [pc, #96]	; (1112c <AppLoraReceiveStart+0xec>)
   110cc:	681a      	ldr	r2, [r3, #0]
   110ce:	2324      	movs	r3, #36	; 0x24
   110d0:	21ff      	movs	r1, #255	; 0xff
   110d2:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_HOPPERIOD, SX1272LR->RegHopPeriod );	
   110d4:	4b15      	ldr	r3, [pc, #84]	; (1112c <AppLoraReceiveStart+0xec>)
   110d6:	681a      	ldr	r2, [r3, #0]
   110d8:	2324      	movs	r3, #36	; 0x24
   110da:	5cd3      	ldrb	r3, [r2, r3]
   110dc:	2024      	movs	r0, #36	; 0x24
   110de:	1c19      	adds	r1, r3, #0
   110e0:	4b19      	ldr	r3, [pc, #100]	; (11148 <AppLoraReceiveStart+0x108>)
   110e2:	4798      	blx	r3
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
   110e4:	4b11      	ldr	r3, [pc, #68]	; (1112c <AppLoraReceiveStart+0xec>)
   110e6:	681a      	ldr	r2, [r3, #0]
   110e8:	233f      	movs	r3, #63	; 0x3f
   110ea:	2100      	movs	r1, #0
   110ec:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
   110ee:	4b0f      	ldr	r3, [pc, #60]	; (1112c <AppLoraReceiveStart+0xec>)
   110f0:	681a      	ldr	r2, [r3, #0]
   110f2:	2340      	movs	r3, #64	; 0x40
   110f4:	2100      	movs	r1, #0
   110f6:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );	
   110f8:	4b0c      	ldr	r3, [pc, #48]	; (1112c <AppLoraReceiveStart+0xec>)
   110fa:	681b      	ldr	r3, [r3, #0]
   110fc:	333f      	adds	r3, #63	; 0x3f
   110fe:	2040      	movs	r0, #64	; 0x40
   11100:	1c19      	adds	r1, r3, #0
   11102:	2202      	movs	r2, #2
   11104:	4b14      	ldr	r3, [pc, #80]	; (11158 <AppLoraReceiveStart+0x118>)
   11106:	4798      	blx	r3

    SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxBaseAddr;
   11108:	4b08      	ldr	r3, [pc, #32]	; (1112c <AppLoraReceiveStart+0xec>)
   1110a:	681a      	ldr	r2, [r3, #0]
   1110c:	4b07      	ldr	r3, [pc, #28]	; (1112c <AppLoraReceiveStart+0xec>)
   1110e:	681b      	ldr	r3, [r3, #0]
   11110:	7bdb      	ldrb	r3, [r3, #15]
   11112:	7353      	strb	r3, [r2, #13]
    SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   11114:	4b05      	ldr	r3, [pc, #20]	; (1112c <AppLoraReceiveStart+0xec>)
   11116:	681b      	ldr	r3, [r3, #0]
   11118:	7b5b      	ldrb	r3, [r3, #13]
   1111a:	200d      	movs	r0, #13
   1111c:	1c19      	adds	r1, r3, #0
   1111e:	4b0a      	ldr	r3, [pc, #40]	; (11148 <AppLoraReceiveStart+0x108>)
   11120:	4798      	blx	r3
    
    SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
   11122:	2005      	movs	r0, #5
   11124:	4b07      	ldr	r3, [pc, #28]	; (11144 <AppLoraReceiveStart+0x104>)
   11126:	4798      	blx	r3


}
   11128:	46bd      	mov	sp, r7
   1112a:	bd80      	pop	{r7, pc}
   1112c:	20003804 	.word	0x20003804
   11130:	00011a41 	.word	0x00011a41
   11134:	20003808 	.word	0x20003808
   11138:	00017f21 	.word	0x00017f21
   1113c:	00010dad 	.word	0x00010dad
   11140:	00010ded 	.word	0x00010ded
   11144:	00010d65 	.word	0x00010d65
   11148:	00011a0d 	.word	0x00011a0d
   1114c:	20000028 	.word	0x20000028
   11150:	00018560 	.word	0x00018560
   11154:	000112b1 	.word	0x000112b1
   11158:	00011a7d 	.word	0x00011a7d

0001115c <SX1272LoraTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272LoraTransmit(uint8_t *txBuffer,uint16_t length)
{
   1115c:	b580      	push	{r7, lr}
   1115e:	b086      	sub	sp, #24
   11160:	af00      	add	r7, sp, #0
   11162:	6078      	str	r0, [r7, #4]
   11164:	1c0a      	adds	r2, r1, #0
   11166:	1cbb      	adds	r3, r7, #2
   11168:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint8_t *ptr; 
    uint8_t status; 
	status = 1; 
   1116a:	1c3b      	adds	r3, r7, #0
   1116c:	330f      	adds	r3, #15
   1116e:	2201      	movs	r2, #1
   11170:	701a      	strb	r2, [r3, #0]
 		  
	loraTransmitCount++;	   
   11172:	4b45      	ldr	r3, [pc, #276]	; (11288 <SX1272LoraTransmit+0x12c>)
   11174:	881b      	ldrh	r3, [r3, #0]
   11176:	3301      	adds	r3, #1
   11178:	b29a      	uxth	r2, r3
   1117a:	4b43      	ldr	r3, [pc, #268]	; (11288 <SX1272LoraTransmit+0x12c>)
   1117c:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_LR_OPMODE, &SX1272LR->RegOpMode );   		
   1117e:	4b43      	ldr	r3, [pc, #268]	; (1128c <SX1272LoraTransmit+0x130>)
   11180:	681b      	ldr	r3, [r3, #0]
   11182:	3301      	adds	r3, #1
   11184:	2001      	movs	r0, #1
   11186:	1c19      	adds	r1, r3, #0
   11188:	4b41      	ldr	r3, [pc, #260]	; (11290 <SX1272LoraTransmit+0x134>)
   1118a:	4798      	blx	r3
	if ((SX1272LR->RegOpMode & ~RFLR_OPMODE_MASK)!= 0x01)
   1118c:	4b3f      	ldr	r3, [pc, #252]	; (1128c <SX1272LoraTransmit+0x130>)
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	785b      	ldrb	r3, [r3, #1]
   11192:	22f8      	movs	r2, #248	; 0xf8
   11194:	4393      	bics	r3, r2
   11196:	2b01      	cmp	r3, #1
   11198:	d002      	beq.n	111a0 <SX1272LoraTransmit+0x44>
	{	 
		SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );  		
   1119a:	2001      	movs	r0, #1
   1119c:	4b3d      	ldr	r3, [pc, #244]	; (11294 <SX1272LoraTransmit+0x138>)
   1119e:	4798      	blx	r3
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
   111a0:	687b      	ldr	r3, [r7, #4]
   111a2:	613b      	str	r3, [r7, #16]
	RFBufferLora[0] = length;
   111a4:	1cbb      	adds	r3, r7, #2
   111a6:	881b      	ldrh	r3, [r3, #0]
   111a8:	b2da      	uxtb	r2, r3
   111aa:	4b3b      	ldr	r3, [pc, #236]	; (11298 <SX1272LoraTransmit+0x13c>)
   111ac:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
   111ae:	1c3b      	adds	r3, r7, #0
   111b0:	3316      	adds	r3, #22
   111b2:	2200      	movs	r2, #0
   111b4:	801a      	strh	r2, [r3, #0]
   111b6:	e010      	b.n	111da <SX1272LoraTransmit+0x7e>
	{
		RFBufferLora[i+1] = *ptr++;
   111b8:	1c3b      	adds	r3, r7, #0
   111ba:	3316      	adds	r3, #22
   111bc:	881b      	ldrh	r3, [r3, #0]
   111be:	1c5a      	adds	r2, r3, #1
   111c0:	693b      	ldr	r3, [r7, #16]
   111c2:	1c59      	adds	r1, r3, #1
   111c4:	6139      	str	r1, [r7, #16]
   111c6:	7819      	ldrb	r1, [r3, #0]
   111c8:	4b33      	ldr	r3, [pc, #204]	; (11298 <SX1272LoraTransmit+0x13c>)
   111ca:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBufferLora[0] = length;
	for (i=0;i<length;i++)
   111cc:	1c3b      	adds	r3, r7, #0
   111ce:	3316      	adds	r3, #22
   111d0:	881a      	ldrh	r2, [r3, #0]
   111d2:	1c3b      	adds	r3, r7, #0
   111d4:	3316      	adds	r3, #22
   111d6:	3201      	adds	r2, #1
   111d8:	801a      	strh	r2, [r3, #0]
   111da:	1c3a      	adds	r2, r7, #0
   111dc:	3216      	adds	r2, #22
   111de:	1cbb      	adds	r3, r7, #2
   111e0:	8812      	ldrh	r2, [r2, #0]
   111e2:	881b      	ldrh	r3, [r3, #0]
   111e4:	429a      	cmp	r2, r3
   111e6:	d3e7      	bcc.n	111b8 <SX1272LoraTransmit+0x5c>
	{
		RFBufferLora[i+1] = *ptr++;
	}
	 
    TxPacketSize = length+1; 
   111e8:	1cbb      	adds	r3, r7, #2
   111ea:	881b      	ldrh	r3, [r3, #0]
   111ec:	3301      	adds	r3, #1
   111ee:	b29a      	uxth	r2, r3
   111f0:	4b2a      	ldr	r3, [pc, #168]	; (1129c <SX1272LoraTransmit+0x140>)
   111f2:	801a      	strh	r2, [r3, #0]
        // Initializes the payload size
        SX1272LR->RegPayloadLength = TxPacketSize;
   111f4:	4b25      	ldr	r3, [pc, #148]	; (1128c <SX1272LoraTransmit+0x130>)
   111f6:	681a      	ldr	r2, [r3, #0]
   111f8:	4b28      	ldr	r3, [pc, #160]	; (1129c <SX1272LoraTransmit+0x140>)
   111fa:	881b      	ldrh	r3, [r3, #0]
   111fc:	b2d9      	uxtb	r1, r3
   111fe:	2322      	movs	r3, #34	; 0x22
   11200:	54d1      	strb	r1, [r2, r3]
        SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   11202:	4b22      	ldr	r3, [pc, #136]	; (1128c <SX1272LoraTransmit+0x130>)
   11204:	681a      	ldr	r2, [r3, #0]
   11206:	2322      	movs	r3, #34	; 0x22
   11208:	5cd3      	ldrb	r3, [r2, r3]
   1120a:	2022      	movs	r0, #34	; 0x22
   1120c:	1c19      	adds	r1, r3, #0
   1120e:	4b24      	ldr	r3, [pc, #144]	; (112a0 <SX1272LoraTransmit+0x144>)
   11210:	4798      	blx	r3
        
        SX1272LR->RegFifoTxBaseAddr = 0x00; // Full buffer used for Tx
   11212:	4b1e      	ldr	r3, [pc, #120]	; (1128c <SX1272LoraTransmit+0x130>)
   11214:	681b      	ldr	r3, [r3, #0]
   11216:	2200      	movs	r2, #0
   11218:	739a      	strb	r2, [r3, #14]
        SX1272Write( REG_LR_FIFOTXBASEADDR, SX1272LR->RegFifoTxBaseAddr );
   1121a:	4b1c      	ldr	r3, [pc, #112]	; (1128c <SX1272LoraTransmit+0x130>)
   1121c:	681b      	ldr	r3, [r3, #0]
   1121e:	7b9b      	ldrb	r3, [r3, #14]
   11220:	200e      	movs	r0, #14
   11222:	1c19      	adds	r1, r3, #0
   11224:	4b1e      	ldr	r3, [pc, #120]	; (112a0 <SX1272LoraTransmit+0x144>)
   11226:	4798      	blx	r3

        SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoTxBaseAddr;
   11228:	4b18      	ldr	r3, [pc, #96]	; (1128c <SX1272LoraTransmit+0x130>)
   1122a:	681a      	ldr	r2, [r3, #0]
   1122c:	4b17      	ldr	r3, [pc, #92]	; (1128c <SX1272LoraTransmit+0x130>)
   1122e:	681b      	ldr	r3, [r3, #0]
   11230:	7b9b      	ldrb	r3, [r3, #14]
   11232:	7353      	strb	r3, [r2, #13]
        SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   11234:	4b15      	ldr	r3, [pc, #84]	; (1128c <SX1272LoraTransmit+0x130>)
   11236:	681b      	ldr	r3, [r3, #0]
   11238:	7b5b      	ldrb	r3, [r3, #13]
   1123a:	200d      	movs	r0, #13
   1123c:	1c19      	adds	r1, r3, #0
   1123e:	4b18      	ldr	r3, [pc, #96]	; (112a0 <SX1272LoraTransmit+0x144>)
   11240:	4798      	blx	r3
        
        // Write payload buffer to LORA modem
        SX1272WriteFifo( RFBufferLora, TxPacketSize);  //SX1272LR->RegPayloadLength );
   11242:	4b16      	ldr	r3, [pc, #88]	; (1129c <SX1272LoraTransmit+0x140>)
   11244:	881b      	ldrh	r3, [r3, #0]
   11246:	4a14      	ldr	r2, [pc, #80]	; (11298 <SX1272LoraTransmit+0x13c>)
   11248:	1c10      	adds	r0, r2, #0
   1124a:	1c19      	adds	r1, r3, #0
   1124c:	4b15      	ldr	r3, [pc, #84]	; (112a4 <SX1272LoraTransmit+0x148>)
   1124e:	4798      	blx	r3
		
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00| RFLR_DIOMAPPING1_DIO0_01;
   11250:	4b0e      	ldr	r3, [pc, #56]	; (1128c <SX1272LoraTransmit+0x130>)
   11252:	681a      	ldr	r2, [r3, #0]
   11254:	233f      	movs	r3, #63	; 0x3f
   11256:	2140      	movs	r1, #64	; 0x40
   11258:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
   1125a:	4b0c      	ldr	r3, [pc, #48]	; (1128c <SX1272LoraTransmit+0x130>)
   1125c:	681a      	ldr	r2, [r3, #0]
   1125e:	2340      	movs	r3, #64	; 0x40
   11260:	2100      	movs	r1, #0
   11262:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
   11264:	4b09      	ldr	r3, [pc, #36]	; (1128c <SX1272LoraTransmit+0x130>)
   11266:	681b      	ldr	r3, [r3, #0]
   11268:	333f      	adds	r3, #63	; 0x3f
   1126a:	2040      	movs	r0, #64	; 0x40
   1126c:	1c19      	adds	r1, r3, #0
   1126e:	2202      	movs	r2, #2
   11270:	4b0d      	ldr	r3, [pc, #52]	; (112a8 <SX1272LoraTransmit+0x14c>)
   11272:	4798      	blx	r3
	//------------------
	// turn on transmitter
    SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER );     		
   11274:	2003      	movs	r0, #3
   11276:	4b07      	ldr	r3, [pc, #28]	; (11294 <SX1272LoraTransmit+0x138>)
   11278:	4798      	blx	r3
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
   1127a:	1c3b      	adds	r3, r7, #0
   1127c:	330f      	adds	r3, #15
   1127e:	781b      	ldrb	r3, [r3, #0]
}
   11280:	1c18      	adds	r0, r3, #0
   11282:	46bd      	mov	sp, r7
   11284:	b006      	add	sp, #24
   11286:	bd80      	pop	{r7, pc}
   11288:	200004f4 	.word	0x200004f4
   1128c:	20003804 	.word	0x20003804
   11290:	00011a41 	.word	0x00011a41
   11294:	00010d65 	.word	0x00010d65
   11298:	20003808 	.word	0x20003808
   1129c:	200004f2 	.word	0x200004f2
   112a0:	00011a0d 	.word	0x00011a0d
   112a4:	00011aed 	.word	0x00011aed
   112a8:	00011a7d 	.word	0x00011a7d
   112ac:	00000000 	.word	0x00000000

000112b0 <SX1272LoRaSetRFFrequency>:
#define FREQ_STEP                                   61.03515625

extern tLoRaSettings LoRaSettings;

void SX1272LoRaSetRFFrequency( uint32_t freq )
{
   112b0:	b5b0      	push	{r4, r5, r7, lr}
   112b2:	b082      	sub	sp, #8
   112b4:	af00      	add	r7, sp, #0
   112b6:	6078      	str	r0, [r7, #4]
    LoRaSettings.RFFrequency = freq;
   112b8:	4b1b      	ldr	r3, [pc, #108]	; (11328 <SX1272LoRaSetRFFrequency+0x78>)
   112ba:	687a      	ldr	r2, [r7, #4]
   112bc:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   112be:	4b1b      	ldr	r3, [pc, #108]	; (1132c <SX1272LoRaSetRFFrequency+0x7c>)
   112c0:	6878      	ldr	r0, [r7, #4]
   112c2:	4798      	blx	r3
   112c4:	1c03      	adds	r3, r0, #0
   112c6:	1c0c      	adds	r4, r1, #0
   112c8:	4d19      	ldr	r5, [pc, #100]	; (11330 <SX1272LoRaSetRFFrequency+0x80>)
   112ca:	1c18      	adds	r0, r3, #0
   112cc:	1c21      	adds	r1, r4, #0
   112ce:	4b15      	ldr	r3, [pc, #84]	; (11324 <SX1272LoRaSetRFFrequency+0x74>)
   112d0:	4a13      	ldr	r2, [pc, #76]	; (11320 <SX1272LoRaSetRFFrequency+0x70>)
   112d2:	47a8      	blx	r5
   112d4:	1c03      	adds	r3, r0, #0
   112d6:	1c0c      	adds	r4, r1, #0
   112d8:	4a16      	ldr	r2, [pc, #88]	; (11334 <SX1272LoRaSetRFFrequency+0x84>)
   112da:	1c18      	adds	r0, r3, #0
   112dc:	1c21      	adds	r1, r4, #0
   112de:	4790      	blx	r2
   112e0:	1c03      	adds	r3, r0, #0
   112e2:	607b      	str	r3, [r7, #4]
    SX1272LR->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
   112e4:	4b14      	ldr	r3, [pc, #80]	; (11338 <SX1272LoRaSetRFFrequency+0x88>)
   112e6:	681b      	ldr	r3, [r3, #0]
   112e8:	687a      	ldr	r2, [r7, #4]
   112ea:	0c12      	lsrs	r2, r2, #16
   112ec:	b2d2      	uxtb	r2, r2
   112ee:	719a      	strb	r2, [r3, #6]
    SX1272LR->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
   112f0:	4b11      	ldr	r3, [pc, #68]	; (11338 <SX1272LoRaSetRFFrequency+0x88>)
   112f2:	681b      	ldr	r3, [r3, #0]
   112f4:	687a      	ldr	r2, [r7, #4]
   112f6:	0a12      	lsrs	r2, r2, #8
   112f8:	b2d2      	uxtb	r2, r2
   112fa:	71da      	strb	r2, [r3, #7]
    SX1272LR->RegFrfLsb = ( uint8_t )( freq & 0xFF );
   112fc:	4b0e      	ldr	r3, [pc, #56]	; (11338 <SX1272LoRaSetRFFrequency+0x88>)
   112fe:	681b      	ldr	r3, [r3, #0]
   11300:	687a      	ldr	r2, [r7, #4]
   11302:	b2d2      	uxtb	r2, r2
   11304:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_LR_FRFMSB, &SX1272LR->RegFrfMsb, 3 );
   11306:	4b0c      	ldr	r3, [pc, #48]	; (11338 <SX1272LoRaSetRFFrequency+0x88>)
   11308:	681b      	ldr	r3, [r3, #0]
   1130a:	3306      	adds	r3, #6
   1130c:	2006      	movs	r0, #6
   1130e:	1c19      	adds	r1, r3, #0
   11310:	2203      	movs	r2, #3
   11312:	4b0a      	ldr	r3, [pc, #40]	; (1133c <SX1272LoRaSetRFFrequency+0x8c>)
   11314:	4798      	blx	r3
}
   11316:	46bd      	mov	sp, r7
   11318:	b002      	add	sp, #8
   1131a:	bdb0      	pop	{r4, r5, r7, pc}
   1131c:	46c0      	nop			; (mov r8, r8)
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	00000000 	.word	0x00000000
   11324:	404e8480 	.word	0x404e8480
   11328:	20000028 	.word	0x20000028
   1132c:	00017669 	.word	0x00017669
   11330:	00016129 	.word	0x00016129
   11334:	00015a39 	.word	0x00015a39
   11338:	20003804 	.word	0x20003804
   1133c:	00011a7d 	.word	0x00011a7d

00011340 <SX1272LoRaSetRFPower>:

    return LoRaSettings.RFFrequency;
}

void SX1272LoRaSetRFPower( int8_t power )
{
   11340:	b580      	push	{r7, lr}
   11342:	b082      	sub	sp, #8
   11344:	af00      	add	r7, sp, #0
   11346:	1c02      	adds	r2, r0, #0
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PACONFIG, &SX1272LR->RegPaConfig );
   1134c:	4b4f      	ldr	r3, [pc, #316]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   1134e:	681b      	ldr	r3, [r3, #0]
   11350:	3309      	adds	r3, #9
   11352:	2009      	movs	r0, #9
   11354:	1c19      	adds	r1, r3, #0
   11356:	4b4e      	ldr	r3, [pc, #312]	; (11490 <SX1272LoRaSetRFPower+0x150>)
   11358:	4798      	blx	r3
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   1135a:	4b4c      	ldr	r3, [pc, #304]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   1135c:	681b      	ldr	r3, [r3, #0]
   1135e:	3359      	adds	r3, #89	; 0x59
   11360:	205a      	movs	r0, #90	; 0x5a
   11362:	1c19      	adds	r1, r3, #0
   11364:	4b4a      	ldr	r3, [pc, #296]	; (11490 <SX1272LoRaSetRFPower+0x150>)
   11366:	4798      	blx	r3
    
    if( ( SX1272LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
   11368:	4b48      	ldr	r3, [pc, #288]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   1136a:	681b      	ldr	r3, [r3, #0]
   1136c:	7a5b      	ldrb	r3, [r3, #9]
   1136e:	b2db      	uxtb	r3, r3
   11370:	b25b      	sxtb	r3, r3
   11372:	2b00      	cmp	r3, #0
   11374:	da56      	bge.n	11424 <SX1272LoRaSetRFPower+0xe4>
    {
        if( ( SX1272LR->RegPaDac & 0x07 ) == 0x07 )
   11376:	4b45      	ldr	r3, [pc, #276]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   11378:	681a      	ldr	r2, [r3, #0]
   1137a:	2359      	movs	r3, #89	; 0x59
   1137c:	5cd3      	ldrb	r3, [r2, r3]
   1137e:	1c1a      	adds	r2, r3, #0
   11380:	2307      	movs	r3, #7
   11382:	4013      	ands	r3, r2
   11384:	2b07      	cmp	r3, #7
   11386:	d126      	bne.n	113d6 <SX1272LoRaSetRFPower+0x96>
        {
            if( power < 5 )
   11388:	1dfb      	adds	r3, r7, #7
   1138a:	781b      	ldrb	r3, [r3, #0]
   1138c:	b25b      	sxtb	r3, r3
   1138e:	2b04      	cmp	r3, #4
   11390:	dc02      	bgt.n	11398 <SX1272LoRaSetRFPower+0x58>
            {
                power = 5;
   11392:	1dfb      	adds	r3, r7, #7
   11394:	2205      	movs	r2, #5
   11396:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
   11398:	1dfb      	adds	r3, r7, #7
   1139a:	781b      	ldrb	r3, [r3, #0]
   1139c:	b25b      	sxtb	r3, r3
   1139e:	2b14      	cmp	r3, #20
   113a0:	dd02      	ble.n	113a8 <SX1272LoRaSetRFPower+0x68>
            {
                power = 20;
   113a2:	1dfb      	adds	r3, r7, #7
   113a4:	2214      	movs	r2, #20
   113a6:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
   113a8:	4b38      	ldr	r3, [pc, #224]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   113aa:	681a      	ldr	r2, [r3, #0]
   113ac:	4b37      	ldr	r3, [pc, #220]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   113ae:	681b      	ldr	r3, [r3, #0]
   113b0:	7a5b      	ldrb	r3, [r3, #9]
   113b2:	b2db      	uxtb	r3, r3
   113b4:	210f      	movs	r1, #15
   113b6:	438b      	bics	r3, r1
   113b8:	b2d9      	uxtb	r1, r3
   113ba:	1dfb      	adds	r3, r7, #7
   113bc:	781b      	ldrb	r3, [r3, #0]
   113be:	3b05      	subs	r3, #5
   113c0:	b2db      	uxtb	r3, r3
   113c2:	b2db      	uxtb	r3, r3
   113c4:	1c18      	adds	r0, r3, #0
   113c6:	230f      	movs	r3, #15
   113c8:	4003      	ands	r3, r0
   113ca:	b2db      	uxtb	r3, r3
   113cc:	430b      	orrs	r3, r1
   113ce:	b2db      	uxtb	r3, r3
   113d0:	b2db      	uxtb	r3, r3
   113d2:	7253      	strb	r3, [r2, #9]
   113d4:	e04c      	b.n	11470 <SX1272LoRaSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
   113d6:	1dfb      	adds	r3, r7, #7
   113d8:	781b      	ldrb	r3, [r3, #0]
   113da:	b25b      	sxtb	r3, r3
   113dc:	2b01      	cmp	r3, #1
   113de:	dc02      	bgt.n	113e6 <SX1272LoRaSetRFPower+0xa6>
            {
                power = 2;
   113e0:	1dfb      	adds	r3, r7, #7
   113e2:	2202      	movs	r2, #2
   113e4:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
   113e6:	1dfb      	adds	r3, r7, #7
   113e8:	781b      	ldrb	r3, [r3, #0]
   113ea:	b25b      	sxtb	r3, r3
   113ec:	2b11      	cmp	r3, #17
   113ee:	dd02      	ble.n	113f6 <SX1272LoRaSetRFPower+0xb6>
            {
                power = 17;
   113f0:	1dfb      	adds	r3, r7, #7
   113f2:	2211      	movs	r2, #17
   113f4:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
   113f6:	4b25      	ldr	r3, [pc, #148]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   113f8:	681a      	ldr	r2, [r3, #0]
   113fa:	4b24      	ldr	r3, [pc, #144]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   113fc:	681b      	ldr	r3, [r3, #0]
   113fe:	7a5b      	ldrb	r3, [r3, #9]
   11400:	b2db      	uxtb	r3, r3
   11402:	210f      	movs	r1, #15
   11404:	438b      	bics	r3, r1
   11406:	b2d9      	uxtb	r1, r3
   11408:	1dfb      	adds	r3, r7, #7
   1140a:	781b      	ldrb	r3, [r3, #0]
   1140c:	3b02      	subs	r3, #2
   1140e:	b2db      	uxtb	r3, r3
   11410:	b2db      	uxtb	r3, r3
   11412:	1c18      	adds	r0, r3, #0
   11414:	230f      	movs	r3, #15
   11416:	4003      	ands	r3, r0
   11418:	b2db      	uxtb	r3, r3
   1141a:	430b      	orrs	r3, r1
   1141c:	b2db      	uxtb	r3, r3
   1141e:	b2db      	uxtb	r3, r3
   11420:	7253      	strb	r3, [r2, #9]
   11422:	e025      	b.n	11470 <SX1272LoRaSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
   11424:	1dfb      	adds	r3, r7, #7
   11426:	781b      	ldrb	r3, [r3, #0]
   11428:	b25b      	sxtb	r3, r3
   1142a:	3301      	adds	r3, #1
   1142c:	da02      	bge.n	11434 <SX1272LoRaSetRFPower+0xf4>
        {
            power = -1;
   1142e:	1dfb      	adds	r3, r7, #7
   11430:	22ff      	movs	r2, #255	; 0xff
   11432:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
   11434:	1dfb      	adds	r3, r7, #7
   11436:	781b      	ldrb	r3, [r3, #0]
   11438:	b25b      	sxtb	r3, r3
   1143a:	2b0e      	cmp	r3, #14
   1143c:	dd02      	ble.n	11444 <SX1272LoRaSetRFPower+0x104>
        {
            power = 14;
   1143e:	1dfb      	adds	r3, r7, #7
   11440:	220e      	movs	r2, #14
   11442:	701a      	strb	r2, [r3, #0]
        }
        SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
   11444:	4b11      	ldr	r3, [pc, #68]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   11446:	681a      	ldr	r2, [r3, #0]
   11448:	4b10      	ldr	r3, [pc, #64]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	7a5b      	ldrb	r3, [r3, #9]
   1144e:	b2db      	uxtb	r3, r3
   11450:	210f      	movs	r1, #15
   11452:	438b      	bics	r3, r1
   11454:	b2d9      	uxtb	r1, r3
   11456:	1dfb      	adds	r3, r7, #7
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	3301      	adds	r3, #1
   1145c:	b2db      	uxtb	r3, r3
   1145e:	b2db      	uxtb	r3, r3
   11460:	1c18      	adds	r0, r3, #0
   11462:	230f      	movs	r3, #15
   11464:	4003      	ands	r3, r0
   11466:	b2db      	uxtb	r3, r3
   11468:	430b      	orrs	r3, r1
   1146a:	b2db      	uxtb	r3, r3
   1146c:	b2db      	uxtb	r3, r3
   1146e:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_LR_PACONFIG, SX1272LR->RegPaConfig );
   11470:	4b06      	ldr	r3, [pc, #24]	; (1148c <SX1272LoRaSetRFPower+0x14c>)
   11472:	681b      	ldr	r3, [r3, #0]
   11474:	7a5b      	ldrb	r3, [r3, #9]
   11476:	2009      	movs	r0, #9
   11478:	1c19      	adds	r1, r3, #0
   1147a:	4b06      	ldr	r3, [pc, #24]	; (11494 <SX1272LoRaSetRFPower+0x154>)
   1147c:	4798      	blx	r3
    LoRaSettings.Power = power;
   1147e:	4b06      	ldr	r3, [pc, #24]	; (11498 <SX1272LoRaSetRFPower+0x158>)
   11480:	1dfa      	adds	r2, r7, #7
   11482:	7812      	ldrb	r2, [r2, #0]
   11484:	711a      	strb	r2, [r3, #4]
}
   11486:	46bd      	mov	sp, r7
   11488:	b002      	add	sp, #8
   1148a:	bd80      	pop	{r7, pc}
   1148c:	20003804 	.word	0x20003804
   11490:	00011a41 	.word	0x00011a41
   11494:	00011a0d 	.word	0x00011a0d
   11498:	20000028 	.word	0x20000028

0001149c <SX1272LoRaSetSignalBandwidth>:
    }
    return LoRaSettings.Power;
}

void SX1272LoRaSetSignalBandwidth( uint8_t bw )
{
   1149c:	b580      	push	{r7, lr}
   1149e:	b082      	sub	sp, #8
   114a0:	af00      	add	r7, sp, #0
   114a2:	1c02      	adds	r2, r0, #0
   114a4:	1dfb      	adds	r3, r7, #7
   114a6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   114a8:	4b13      	ldr	r3, [pc, #76]	; (114f8 <SX1272LoRaSetSignalBandwidth+0x5c>)
   114aa:	681b      	ldr	r3, [r3, #0]
   114ac:	331d      	adds	r3, #29
   114ae:	201d      	movs	r0, #29
   114b0:	1c19      	adds	r1, r3, #0
   114b2:	4b12      	ldr	r3, [pc, #72]	; (114fc <SX1272LoRaSetSignalBandwidth+0x60>)
   114b4:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_BW_MASK ) | ( bw << 6 );
   114b6:	4b10      	ldr	r3, [pc, #64]	; (114f8 <SX1272LoRaSetSignalBandwidth+0x5c>)
   114b8:	681a      	ldr	r2, [r3, #0]
   114ba:	4b0f      	ldr	r3, [pc, #60]	; (114f8 <SX1272LoRaSetSignalBandwidth+0x5c>)
   114bc:	681b      	ldr	r3, [r3, #0]
   114be:	7f5b      	ldrb	r3, [r3, #29]
   114c0:	b2db      	uxtb	r3, r3
   114c2:	1c19      	adds	r1, r3, #0
   114c4:	233f      	movs	r3, #63	; 0x3f
   114c6:	400b      	ands	r3, r1
   114c8:	b2d9      	uxtb	r1, r3
   114ca:	1dfb      	adds	r3, r7, #7
   114cc:	781b      	ldrb	r3, [r3, #0]
   114ce:	019b      	lsls	r3, r3, #6
   114d0:	b2db      	uxtb	r3, r3
   114d2:	430b      	orrs	r3, r1
   114d4:	b2db      	uxtb	r3, r3
   114d6:	b2db      	uxtb	r3, r3
   114d8:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <SX1272LoRaSetSignalBandwidth+0x5c>)
   114dc:	681b      	ldr	r3, [r3, #0]
   114de:	7f5b      	ldrb	r3, [r3, #29]
   114e0:	201d      	movs	r0, #29
   114e2:	1c19      	adds	r1, r3, #0
   114e4:	4b06      	ldr	r3, [pc, #24]	; (11500 <SX1272LoRaSetSignalBandwidth+0x64>)
   114e6:	4798      	blx	r3
    LoRaSettings.SignalBw = bw;
   114e8:	4b06      	ldr	r3, [pc, #24]	; (11504 <SX1272LoRaSetSignalBandwidth+0x68>)
   114ea:	1dfa      	adds	r2, r7, #7
   114ec:	7812      	ldrb	r2, [r2, #0]
   114ee:	715a      	strb	r2, [r3, #5]
}
   114f0:	46bd      	mov	sp, r7
   114f2:	b002      	add	sp, #8
   114f4:	bd80      	pop	{r7, pc}
   114f6:	46c0      	nop			; (mov r8, r8)
   114f8:	20003804 	.word	0x20003804
   114fc:	00011a41 	.word	0x00011a41
   11500:	00011a0d 	.word	0x00011a0d
   11504:	20000028 	.word	0x20000028

00011508 <SX1272LoRaSetSpreadingFactor>:
    LoRaSettings.SignalBw = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_BW_MASK ) >> 6;
    return LoRaSettings.SignalBw;
}

void SX1272LoRaSetSpreadingFactor( uint8_t factor )
{
   11508:	b580      	push	{r7, lr}
   1150a:	b082      	sub	sp, #8
   1150c:	af00      	add	r7, sp, #0
   1150e:	1c02      	adds	r2, r0, #0
   11510:	1dfb      	adds	r3, r7, #7
   11512:	701a      	strb	r2, [r3, #0]

    if( factor > 12 )
   11514:	1dfb      	adds	r3, r7, #7
   11516:	781b      	ldrb	r3, [r3, #0]
   11518:	2b0c      	cmp	r3, #12
   1151a:	d903      	bls.n	11524 <SX1272LoRaSetSpreadingFactor+0x1c>
    {
        factor = 12;
   1151c:	1dfb      	adds	r3, r7, #7
   1151e:	220c      	movs	r2, #12
   11520:	701a      	strb	r2, [r3, #0]
   11522:	e006      	b.n	11532 <SX1272LoRaSetSpreadingFactor+0x2a>
    }
    else if( factor < 6 )
   11524:	1dfb      	adds	r3, r7, #7
   11526:	781b      	ldrb	r3, [r3, #0]
   11528:	2b05      	cmp	r3, #5
   1152a:	d802      	bhi.n	11532 <SX1272LoRaSetSpreadingFactor+0x2a>
    {
        factor = 6;
   1152c:	1dfb      	adds	r3, r7, #7
   1152e:	2206      	movs	r2, #6
   11530:	701a      	strb	r2, [r3, #0]
    }
    
    if( factor == 6 )
   11532:	1dfb      	adds	r3, r7, #7
   11534:	781b      	ldrb	r3, [r3, #0]
   11536:	2b06      	cmp	r3, #6
   11538:	d103      	bne.n	11542 <SX1272LoRaSetSpreadingFactor+0x3a>
    {
        SX1272LoRaSetNbTrigPeaks( 5 );
   1153a:	2005      	movs	r0, #5
   1153c:	4b16      	ldr	r3, [pc, #88]	; (11598 <SX1272LoRaSetSpreadingFactor+0x90>)
   1153e:	4798      	blx	r3
   11540:	e002      	b.n	11548 <SX1272LoRaSetSpreadingFactor+0x40>
    }
    else
    {
        SX1272LoRaSetNbTrigPeaks( 3 );
   11542:	2003      	movs	r0, #3
   11544:	4b14      	ldr	r3, [pc, #80]	; (11598 <SX1272LoRaSetSpreadingFactor+0x90>)
   11546:	4798      	blx	r3
    }

    SX1272Read( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2 );    
   11548:	4b14      	ldr	r3, [pc, #80]	; (1159c <SX1272LoRaSetSpreadingFactor+0x94>)
   1154a:	681b      	ldr	r3, [r3, #0]
   1154c:	331e      	adds	r3, #30
   1154e:	201e      	movs	r0, #30
   11550:	1c19      	adds	r1, r3, #0
   11552:	4b13      	ldr	r3, [pc, #76]	; (115a0 <SX1272LoRaSetSpreadingFactor+0x98>)
   11554:	4798      	blx	r3
    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SF_MASK ) | ( factor << 4 );
   11556:	4b11      	ldr	r3, [pc, #68]	; (1159c <SX1272LoRaSetSpreadingFactor+0x94>)
   11558:	681a      	ldr	r2, [r3, #0]
   1155a:	4b10      	ldr	r3, [pc, #64]	; (1159c <SX1272LoRaSetSpreadingFactor+0x94>)
   1155c:	681b      	ldr	r3, [r3, #0]
   1155e:	7f9b      	ldrb	r3, [r3, #30]
   11560:	b2db      	uxtb	r3, r3
   11562:	1c19      	adds	r1, r3, #0
   11564:	230f      	movs	r3, #15
   11566:	400b      	ands	r3, r1
   11568:	b2d9      	uxtb	r1, r3
   1156a:	1dfb      	adds	r3, r7, #7
   1156c:	781b      	ldrb	r3, [r3, #0]
   1156e:	011b      	lsls	r3, r3, #4
   11570:	b2db      	uxtb	r3, r3
   11572:	430b      	orrs	r3, r1
   11574:	b2db      	uxtb	r3, r3
   11576:	b2db      	uxtb	r3, r3
   11578:	7793      	strb	r3, [r2, #30]
    SX1272Write( REG_LR_MODEMCONFIG2, SX1272LR->RegModemConfig2 );    
   1157a:	4b08      	ldr	r3, [pc, #32]	; (1159c <SX1272LoRaSetSpreadingFactor+0x94>)
   1157c:	681b      	ldr	r3, [r3, #0]
   1157e:	7f9b      	ldrb	r3, [r3, #30]
   11580:	201e      	movs	r0, #30
   11582:	1c19      	adds	r1, r3, #0
   11584:	4b07      	ldr	r3, [pc, #28]	; (115a4 <SX1272LoRaSetSpreadingFactor+0x9c>)
   11586:	4798      	blx	r3
    LoRaSettings.SpreadingFactor = factor;
   11588:	4b07      	ldr	r3, [pc, #28]	; (115a8 <SX1272LoRaSetSpreadingFactor+0xa0>)
   1158a:	1dfa      	adds	r2, r7, #7
   1158c:	7812      	ldrb	r2, [r2, #0]
   1158e:	719a      	strb	r2, [r3, #6]
}
   11590:	46bd      	mov	sp, r7
   11592:	b002      	add	sp, #8
   11594:	bd80      	pop	{r7, pc}
   11596:	46c0      	nop			; (mov r8, r8)
   11598:	000118b5 	.word	0x000118b5
   1159c:	20003804 	.word	0x20003804
   115a0:	00011a41 	.word	0x00011a41
   115a4:	00011a0d 	.word	0x00011a0d
   115a8:	20000028 	.word	0x20000028

000115ac <SX1272LoRaSetErrorCoding>:
    LoRaSettings.SpreadingFactor = ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SF_MASK ) >> 4;
    return LoRaSettings.SpreadingFactor;
}

void SX1272LoRaSetErrorCoding( uint8_t value )
{
   115ac:	b580      	push	{r7, lr}
   115ae:	b082      	sub	sp, #8
   115b0:	af00      	add	r7, sp, #0
   115b2:	1c02      	adds	r2, r0, #0
   115b4:	1dfb      	adds	r3, r7, #7
   115b6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   115b8:	4b12      	ldr	r3, [pc, #72]	; (11604 <SX1272LoRaSetErrorCoding+0x58>)
   115ba:	681b      	ldr	r3, [r3, #0]
   115bc:	331d      	adds	r3, #29
   115be:	201d      	movs	r0, #29
   115c0:	1c19      	adds	r1, r3, #0
   115c2:	4b11      	ldr	r3, [pc, #68]	; (11608 <SX1272LoRaSetErrorCoding+0x5c>)
   115c4:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_CODINGRATE_MASK ) | ( value << 3 );
   115c6:	4b0f      	ldr	r3, [pc, #60]	; (11604 <SX1272LoRaSetErrorCoding+0x58>)
   115c8:	681a      	ldr	r2, [r3, #0]
   115ca:	4b0e      	ldr	r3, [pc, #56]	; (11604 <SX1272LoRaSetErrorCoding+0x58>)
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	7f5b      	ldrb	r3, [r3, #29]
   115d0:	b2db      	uxtb	r3, r3
   115d2:	2138      	movs	r1, #56	; 0x38
   115d4:	438b      	bics	r3, r1
   115d6:	b2d9      	uxtb	r1, r3
   115d8:	1dfb      	adds	r3, r7, #7
   115da:	781b      	ldrb	r3, [r3, #0]
   115dc:	00db      	lsls	r3, r3, #3
   115de:	b2db      	uxtb	r3, r3
   115e0:	430b      	orrs	r3, r1
   115e2:	b2db      	uxtb	r3, r3
   115e4:	b2db      	uxtb	r3, r3
   115e6:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   115e8:	4b06      	ldr	r3, [pc, #24]	; (11604 <SX1272LoRaSetErrorCoding+0x58>)
   115ea:	681b      	ldr	r3, [r3, #0]
   115ec:	7f5b      	ldrb	r3, [r3, #29]
   115ee:	201d      	movs	r0, #29
   115f0:	1c19      	adds	r1, r3, #0
   115f2:	4b06      	ldr	r3, [pc, #24]	; (1160c <SX1272LoRaSetErrorCoding+0x60>)
   115f4:	4798      	blx	r3
    LoRaSettings.ErrorCoding = value;
   115f6:	4b06      	ldr	r3, [pc, #24]	; (11610 <SX1272LoRaSetErrorCoding+0x64>)
   115f8:	1dfa      	adds	r2, r7, #7
   115fa:	7812      	ldrb	r2, [r2, #0]
   115fc:	71da      	strb	r2, [r3, #7]
}
   115fe:	46bd      	mov	sp, r7
   11600:	b002      	add	sp, #8
   11602:	bd80      	pop	{r7, pc}
   11604:	20003804 	.word	0x20003804
   11608:	00011a41 	.word	0x00011a41
   1160c:	00011a0d 	.word	0x00011a0d
   11610:	20000028 	.word	0x20000028

00011614 <SX1272LoRaSetPacketCrcOn>:
    LoRaSettings.ErrorCoding = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_CODINGRATE_MASK ) >> 3;
    return LoRaSettings.ErrorCoding;
}

void SX1272LoRaSetPacketCrcOn( bool enable )
{
   11614:	b580      	push	{r7, lr}
   11616:	b082      	sub	sp, #8
   11618:	af00      	add	r7, sp, #0
   1161a:	1c02      	adds	r2, r0, #0
   1161c:	1dfb      	adds	r3, r7, #7
   1161e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   11620:	4b12      	ldr	r3, [pc, #72]	; (1166c <SX1272LoRaSetPacketCrcOn+0x58>)
   11622:	681b      	ldr	r3, [r3, #0]
   11624:	331d      	adds	r3, #29
   11626:	201d      	movs	r0, #29
   11628:	1c19      	adds	r1, r3, #0
   1162a:	4b11      	ldr	r3, [pc, #68]	; (11670 <SX1272LoRaSetPacketCrcOn+0x5c>)
   1162c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK ) | ( enable << 1 );
   1162e:	4b0f      	ldr	r3, [pc, #60]	; (1166c <SX1272LoRaSetPacketCrcOn+0x58>)
   11630:	681a      	ldr	r2, [r3, #0]
   11632:	4b0e      	ldr	r3, [pc, #56]	; (1166c <SX1272LoRaSetPacketCrcOn+0x58>)
   11634:	681b      	ldr	r3, [r3, #0]
   11636:	7f5b      	ldrb	r3, [r3, #29]
   11638:	b2db      	uxtb	r3, r3
   1163a:	2102      	movs	r1, #2
   1163c:	438b      	bics	r3, r1
   1163e:	b2d9      	uxtb	r1, r3
   11640:	1dfb      	adds	r3, r7, #7
   11642:	781b      	ldrb	r3, [r3, #0]
   11644:	005b      	lsls	r3, r3, #1
   11646:	b2db      	uxtb	r3, r3
   11648:	430b      	orrs	r3, r1
   1164a:	b2db      	uxtb	r3, r3
   1164c:	b2db      	uxtb	r3, r3
   1164e:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   11650:	4b06      	ldr	r3, [pc, #24]	; (1166c <SX1272LoRaSetPacketCrcOn+0x58>)
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	7f5b      	ldrb	r3, [r3, #29]
   11656:	201d      	movs	r0, #29
   11658:	1c19      	adds	r1, r3, #0
   1165a:	4b06      	ldr	r3, [pc, #24]	; (11674 <SX1272LoRaSetPacketCrcOn+0x60>)
   1165c:	4798      	blx	r3
    LoRaSettings.CrcOn = enable;
   1165e:	4b06      	ldr	r3, [pc, #24]	; (11678 <SX1272LoRaSetPacketCrcOn+0x64>)
   11660:	1dfa      	adds	r2, r7, #7
   11662:	7812      	ldrb	r2, [r2, #0]
   11664:	721a      	strb	r2, [r3, #8]
}
   11666:	46bd      	mov	sp, r7
   11668:	b002      	add	sp, #8
   1166a:	bd80      	pop	{r7, pc}
   1166c:	20003804 	.word	0x20003804
   11670:	00011a41 	.word	0x00011a41
   11674:	00011a0d 	.word	0x00011a0d
   11678:	20000028 	.word	0x20000028

0001167c <SX1272LoRaSetImplicitHeaderOn>:
    LoRaSettings.CrcOn = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_ON ) >> 1;
    return LoRaSettings.CrcOn;
}

void SX1272LoRaSetImplicitHeaderOn( bool enable )
{
   1167c:	b580      	push	{r7, lr}
   1167e:	b082      	sub	sp, #8
   11680:	af00      	add	r7, sp, #0
   11682:	1c02      	adds	r2, r0, #0
   11684:	1dfb      	adds	r3, r7, #7
   11686:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   11688:	4b12      	ldr	r3, [pc, #72]	; (116d4 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   1168a:	681b      	ldr	r3, [r3, #0]
   1168c:	331d      	adds	r3, #29
   1168e:	201d      	movs	r0, #29
   11690:	1c19      	adds	r1, r3, #0
   11692:	4b11      	ldr	r3, [pc, #68]	; (116d8 <SX1272LoRaSetImplicitHeaderOn+0x5c>)
   11694:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) | ( enable << 2 );
   11696:	4b0f      	ldr	r3, [pc, #60]	; (116d4 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   11698:	681a      	ldr	r2, [r3, #0]
   1169a:	4b0e      	ldr	r3, [pc, #56]	; (116d4 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   1169c:	681b      	ldr	r3, [r3, #0]
   1169e:	7f5b      	ldrb	r3, [r3, #29]
   116a0:	b2db      	uxtb	r3, r3
   116a2:	2104      	movs	r1, #4
   116a4:	438b      	bics	r3, r1
   116a6:	b2d9      	uxtb	r1, r3
   116a8:	1dfb      	adds	r3, r7, #7
   116aa:	781b      	ldrb	r3, [r3, #0]
   116ac:	009b      	lsls	r3, r3, #2
   116ae:	b2db      	uxtb	r3, r3
   116b0:	430b      	orrs	r3, r1
   116b2:	b2db      	uxtb	r3, r3
   116b4:	b2db      	uxtb	r3, r3
   116b6:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   116b8:	4b06      	ldr	r3, [pc, #24]	; (116d4 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   116ba:	681b      	ldr	r3, [r3, #0]
   116bc:	7f5b      	ldrb	r3, [r3, #29]
   116be:	201d      	movs	r0, #29
   116c0:	1c19      	adds	r1, r3, #0
   116c2:	4b06      	ldr	r3, [pc, #24]	; (116dc <SX1272LoRaSetImplicitHeaderOn+0x60>)
   116c4:	4798      	blx	r3
    LoRaSettings.ImplicitHeaderOn = enable;
   116c6:	4b06      	ldr	r3, [pc, #24]	; (116e0 <SX1272LoRaSetImplicitHeaderOn+0x64>)
   116c8:	1dfa      	adds	r2, r7, #7
   116ca:	7812      	ldrb	r2, [r2, #0]
   116cc:	725a      	strb	r2, [r3, #9]
}
   116ce:	46bd      	mov	sp, r7
   116d0:	b002      	add	sp, #8
   116d2:	bd80      	pop	{r7, pc}
   116d4:	20003804 	.word	0x20003804
   116d8:	00011a41 	.word	0x00011a41
   116dc:	00011a0d 	.word	0x00011a0d
   116e0:	20000028 	.word	0x20000028

000116e4 <SX1272LoRaSetPayloadLength>:
{
    return LoRaSettings.RxPacketTimeout;
}

void SX1272LoRaSetPayloadLength( uint8_t value )
{
   116e4:	b580      	push	{r7, lr}
   116e6:	b082      	sub	sp, #8
   116e8:	af00      	add	r7, sp, #0
   116ea:	1c02      	adds	r2, r0, #0
   116ec:	1dfb      	adds	r3, r7, #7
   116ee:	701a      	strb	r2, [r3, #0]
    SX1272LR->RegPayloadLength = value;
   116f0:	4b0a      	ldr	r3, [pc, #40]	; (1171c <SX1272LoRaSetPayloadLength+0x38>)
   116f2:	681a      	ldr	r2, [r3, #0]
   116f4:	1df9      	adds	r1, r7, #7
   116f6:	2322      	movs	r3, #34	; 0x22
   116f8:	7809      	ldrb	r1, [r1, #0]
   116fa:	54d1      	strb	r1, [r2, r3]
    SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   116fc:	4b07      	ldr	r3, [pc, #28]	; (1171c <SX1272LoRaSetPayloadLength+0x38>)
   116fe:	681a      	ldr	r2, [r3, #0]
   11700:	2322      	movs	r3, #34	; 0x22
   11702:	5cd3      	ldrb	r3, [r2, r3]
   11704:	2022      	movs	r0, #34	; 0x22
   11706:	1c19      	adds	r1, r3, #0
   11708:	4b05      	ldr	r3, [pc, #20]	; (11720 <SX1272LoRaSetPayloadLength+0x3c>)
   1170a:	4798      	blx	r3
    LoRaSettings.PayloadLength = value;
   1170c:	4b05      	ldr	r3, [pc, #20]	; (11724 <SX1272LoRaSetPayloadLength+0x40>)
   1170e:	1dfa      	adds	r2, r7, #7
   11710:	7812      	ldrb	r2, [r2, #0]
   11712:	761a      	strb	r2, [r3, #24]
}
   11714:	46bd      	mov	sp, r7
   11716:	b002      	add	sp, #8
   11718:	bd80      	pop	{r7, pc}
   1171a:	46c0      	nop			; (mov r8, r8)
   1171c:	20003804 	.word	0x20003804
   11720:	00011a0d 	.word	0x00011a0d
   11724:	20000028 	.word	0x20000028

00011728 <SX1272LoRaSetPa20dBm>:
    LoRaSettings.PayloadLength = SX1272LR->RegPayloadLength;
    return LoRaSettings.PayloadLength;
}

void SX1272LoRaSetPa20dBm( bool enale )
{
   11728:	b580      	push	{r7, lr}
   1172a:	b082      	sub	sp, #8
   1172c:	af00      	add	r7, sp, #0
   1172e:	1c02      	adds	r2, r0, #0
   11730:	1dfb      	adds	r3, r7, #7
   11732:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   11734:	4b10      	ldr	r3, [pc, #64]	; (11778 <SX1272LoRaSetPa20dBm+0x50>)
   11736:	681b      	ldr	r3, [r3, #0]
   11738:	3359      	adds	r3, #89	; 0x59
   1173a:	205a      	movs	r0, #90	; 0x5a
   1173c:	1c19      	adds	r1, r3, #0
   1173e:	4b0f      	ldr	r3, [pc, #60]	; (1177c <SX1272LoRaSetPa20dBm+0x54>)
   11740:	4798      	blx	r3
    
    if( enale == true )
   11742:	1dfb      	adds	r3, r7, #7
   11744:	781b      	ldrb	r3, [r3, #0]
   11746:	2b00      	cmp	r3, #0
   11748:	d005      	beq.n	11756 <SX1272LoRaSetPa20dBm+0x2e>
    {
        SX1272LR->RegPaDac = 0x87;
   1174a:	4b0b      	ldr	r3, [pc, #44]	; (11778 <SX1272LoRaSetPa20dBm+0x50>)
   1174c:	681a      	ldr	r2, [r3, #0]
   1174e:	2359      	movs	r3, #89	; 0x59
   11750:	2187      	movs	r1, #135	; 0x87
   11752:	54d1      	strb	r1, [r2, r3]
   11754:	e004      	b.n	11760 <SX1272LoRaSetPa20dBm+0x38>
    }
    else
    {
        SX1272LR->RegPaDac = 0x84;
   11756:	4b08      	ldr	r3, [pc, #32]	; (11778 <SX1272LoRaSetPa20dBm+0x50>)
   11758:	681a      	ldr	r2, [r3, #0]
   1175a:	2359      	movs	r3, #89	; 0x59
   1175c:	2184      	movs	r1, #132	; 0x84
   1175e:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_PADAC, SX1272LR->RegPaDac );
   11760:	4b05      	ldr	r3, [pc, #20]	; (11778 <SX1272LoRaSetPa20dBm+0x50>)
   11762:	681a      	ldr	r2, [r3, #0]
   11764:	2359      	movs	r3, #89	; 0x59
   11766:	5cd3      	ldrb	r3, [r2, r3]
   11768:	205a      	movs	r0, #90	; 0x5a
   1176a:	1c19      	adds	r1, r3, #0
   1176c:	4b04      	ldr	r3, [pc, #16]	; (11780 <SX1272LoRaSetPa20dBm+0x58>)
   1176e:	4798      	blx	r3
}
   11770:	46bd      	mov	sp, r7
   11772:	b002      	add	sp, #8
   11774:	bd80      	pop	{r7, pc}
   11776:	46c0      	nop			; (mov r8, r8)
   11778:	20003804 	.word	0x20003804
   1177c:	00011a41 	.word	0x00011a41
   11780:	00011a0d 	.word	0x00011a0d

00011784 <SX1272LoRaSetContinuousTx>:
    SX1272Read( REG_LR_PARAMP, &SX1272LR->RegPaRamp );
    return SX1272LR->RegPaRamp & ~RFLR_PARAMP_MASK;
}

void SX1272LoRaSetContinuousTx( uint16_t value )
{
   11784:	b580      	push	{r7, lr}
   11786:	b082      	sub	sp, #8
   11788:	af00      	add	r7, sp, #0
   1178a:	1c02      	adds	r2, r0, #0
   1178c:	1dbb      	adds	r3, r7, #6
   1178e:	801a      	strh	r2, [r3, #0]
	SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   11790:	4b11      	ldr	r3, [pc, #68]	; (117d8 <SX1272LoRaSetContinuousTx+0x54>)
   11792:	681b      	ldr	r3, [r3, #0]
   11794:	331e      	adds	r3, #30
   11796:	201e      	movs	r0, #30
   11798:	1c19      	adds	r1, r3, #0
   1179a:	2201      	movs	r2, #1
   1179c:	4b0f      	ldr	r3, [pc, #60]	; (117dc <SX1272LoRaSetContinuousTx+0x58>)
   1179e:	4798      	blx	r3

	SX1272LR->RegModemConfig2 = ((SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_MASK ) | (value));
   117a0:	4b0d      	ldr	r3, [pc, #52]	; (117d8 <SX1272LoRaSetContinuousTx+0x54>)
   117a2:	681a      	ldr	r2, [r3, #0]
   117a4:	4b0c      	ldr	r3, [pc, #48]	; (117d8 <SX1272LoRaSetContinuousTx+0x54>)
   117a6:	681b      	ldr	r3, [r3, #0]
   117a8:	7f9b      	ldrb	r3, [r3, #30]
   117aa:	b2db      	uxtb	r3, r3
   117ac:	2108      	movs	r1, #8
   117ae:	438b      	bics	r3, r1
   117b0:	b2d9      	uxtb	r1, r3
   117b2:	1dbb      	adds	r3, r7, #6
   117b4:	881b      	ldrh	r3, [r3, #0]
   117b6:	b2db      	uxtb	r3, r3
   117b8:	430b      	orrs	r3, r1
   117ba:	b2db      	uxtb	r3, r3
   117bc:	b2db      	uxtb	r3, r3
   117be:	7793      	strb	r3, [r2, #30]
	SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   117c0:	4b05      	ldr	r3, [pc, #20]	; (117d8 <SX1272LoRaSetContinuousTx+0x54>)
   117c2:	681b      	ldr	r3, [r3, #0]
   117c4:	331e      	adds	r3, #30
   117c6:	201e      	movs	r0, #30
   117c8:	1c19      	adds	r1, r3, #0
   117ca:	2201      	movs	r2, #1
   117cc:	4b04      	ldr	r3, [pc, #16]	; (117e0 <SX1272LoRaSetContinuousTx+0x5c>)
   117ce:	4798      	blx	r3
}
   117d0:	46bd      	mov	sp, r7
   117d2:	b002      	add	sp, #8
   117d4:	bd80      	pop	{r7, pc}
   117d6:	46c0      	nop			; (mov r8, r8)
   117d8:	20003804 	.word	0x20003804
   117dc:	00011ab5 	.word	0x00011ab5
   117e0:	00011a7d 	.word	0x00011a7d

000117e4 <SX1272LoRaSetSymbTimeout>:

void SX1272LoRaSetSymbTimeout( uint16_t value )
{
   117e4:	b580      	push	{r7, lr}
   117e6:	b082      	sub	sp, #8
   117e8:	af00      	add	r7, sp, #0
   117ea:	1c02      	adds	r2, r0, #0
   117ec:	1dbb      	adds	r3, r7, #6
   117ee:	801a      	strh	r2, [r3, #0]
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   117f0:	4b17      	ldr	r3, [pc, #92]	; (11850 <SX1272LoRaSetSymbTimeout+0x6c>)
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	331e      	adds	r3, #30
   117f6:	201e      	movs	r0, #30
   117f8:	1c19      	adds	r1, r3, #0
   117fa:	2202      	movs	r2, #2
   117fc:	4b15      	ldr	r3, [pc, #84]	; (11854 <SX1272LoRaSetSymbTimeout+0x70>)
   117fe:	4798      	blx	r3

    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) | ( ( value >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );
   11800:	4b13      	ldr	r3, [pc, #76]	; (11850 <SX1272LoRaSetSymbTimeout+0x6c>)
   11802:	681a      	ldr	r2, [r3, #0]
   11804:	4b12      	ldr	r3, [pc, #72]	; (11850 <SX1272LoRaSetSymbTimeout+0x6c>)
   11806:	681b      	ldr	r3, [r3, #0]
   11808:	7f9b      	ldrb	r3, [r3, #30]
   1180a:	b2db      	uxtb	r3, r3
   1180c:	2103      	movs	r1, #3
   1180e:	438b      	bics	r3, r1
   11810:	b2d9      	uxtb	r1, r3
   11812:	1dbb      	adds	r3, r7, #6
   11814:	881b      	ldrh	r3, [r3, #0]
   11816:	0a1b      	lsrs	r3, r3, #8
   11818:	b29b      	uxth	r3, r3
   1181a:	b2db      	uxtb	r3, r3
   1181c:	1c18      	adds	r0, r3, #0
   1181e:	2303      	movs	r3, #3
   11820:	4003      	ands	r3, r0
   11822:	b2db      	uxtb	r3, r3
   11824:	430b      	orrs	r3, r1
   11826:	b2db      	uxtb	r3, r3
   11828:	b2db      	uxtb	r3, r3
   1182a:	7793      	strb	r3, [r2, #30]
    SX1272LR->RegSymbTimeoutLsb = value & 0xFF;
   1182c:	4b08      	ldr	r3, [pc, #32]	; (11850 <SX1272LoRaSetSymbTimeout+0x6c>)
   1182e:	681b      	ldr	r3, [r3, #0]
   11830:	1dba      	adds	r2, r7, #6
   11832:	8812      	ldrh	r2, [r2, #0]
   11834:	b2d2      	uxtb	r2, r2
   11836:	77da      	strb	r2, [r3, #31]
    SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   11838:	4b05      	ldr	r3, [pc, #20]	; (11850 <SX1272LoRaSetSymbTimeout+0x6c>)
   1183a:	681b      	ldr	r3, [r3, #0]
   1183c:	331e      	adds	r3, #30
   1183e:	201e      	movs	r0, #30
   11840:	1c19      	adds	r1, r3, #0
   11842:	2202      	movs	r2, #2
   11844:	4b04      	ldr	r3, [pc, #16]	; (11858 <SX1272LoRaSetSymbTimeout+0x74>)
   11846:	4798      	blx	r3
}
   11848:	46bd      	mov	sp, r7
   1184a:	b002      	add	sp, #8
   1184c:	bd80      	pop	{r7, pc}
   1184e:	46c0      	nop			; (mov r8, r8)
   11850:	20003804 	.word	0x20003804
   11854:	00011ab5 	.word	0x00011ab5
   11858:	00011a7d 	.word	0x00011a7d

0001185c <SX1272LoRaSetLowDatarateOptimize>:
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
    return ( ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) << 8 ) | SX1272LR->RegSymbTimeoutLsb;
}

void SX1272LoRaSetLowDatarateOptimize( bool enable )
{
   1185c:	b580      	push	{r7, lr}
   1185e:	b082      	sub	sp, #8
   11860:	af00      	add	r7, sp, #0
   11862:	1c02      	adds	r2, r0, #0
   11864:	1dfb      	adds	r3, r7, #7
   11866:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   11868:	4b0f      	ldr	r3, [pc, #60]	; (118a8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   1186a:	681b      	ldr	r3, [r3, #0]
   1186c:	331d      	adds	r3, #29
   1186e:	201d      	movs	r0, #29
   11870:	1c19      	adds	r1, r3, #0
   11872:	4b0e      	ldr	r3, [pc, #56]	; (118ac <SX1272LoRaSetLowDatarateOptimize+0x50>)
   11874:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK ) | enable;
   11876:	4b0c      	ldr	r3, [pc, #48]	; (118a8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   11878:	681a      	ldr	r2, [r3, #0]
   1187a:	4b0b      	ldr	r3, [pc, #44]	; (118a8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   1187c:	681b      	ldr	r3, [r3, #0]
   1187e:	7f5b      	ldrb	r3, [r3, #29]
   11880:	b2db      	uxtb	r3, r3
   11882:	2101      	movs	r1, #1
   11884:	438b      	bics	r3, r1
   11886:	b2d9      	uxtb	r1, r3
   11888:	1dfb      	adds	r3, r7, #7
   1188a:	781b      	ldrb	r3, [r3, #0]
   1188c:	430b      	orrs	r3, r1
   1188e:	b2db      	uxtb	r3, r3
   11890:	b2db      	uxtb	r3, r3
   11892:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   11894:	4b04      	ldr	r3, [pc, #16]	; (118a8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	7f5b      	ldrb	r3, [r3, #29]
   1189a:	201d      	movs	r0, #29
   1189c:	1c19      	adds	r1, r3, #0
   1189e:	4b04      	ldr	r3, [pc, #16]	; (118b0 <SX1272LoRaSetLowDatarateOptimize+0x54>)
   118a0:	4798      	blx	r3
}
   118a2:	46bd      	mov	sp, r7
   118a4:	b002      	add	sp, #8
   118a6:	bd80      	pop	{r7, pc}
   118a8:	20003804 	.word	0x20003804
   118ac:	00011a41 	.word	0x00011a41
   118b0:	00011a0d 	.word	0x00011a0d

000118b4 <SX1272LoRaSetNbTrigPeaks>:
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
    return ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_ON );
}

void SX1272LoRaSetNbTrigPeaks( uint8_t value )
{
   118b4:	b580      	push	{r7, lr}
   118b6:	b082      	sub	sp, #8
   118b8:	af00      	add	r7, sp, #0
   118ba:	1c02      	adds	r2, r0, #0
   118bc:	1dfb      	adds	r3, r7, #7
   118be:	701a      	strb	r2, [r3, #0]
    SX1272Read( 0x31, &SX1272LR->RegTestReserved31 );
   118c0:	4b11      	ldr	r3, [pc, #68]	; (11908 <SX1272LoRaSetNbTrigPeaks+0x54>)
   118c2:	681b      	ldr	r3, [r3, #0]
   118c4:	3330      	adds	r3, #48	; 0x30
   118c6:	2031      	movs	r0, #49	; 0x31
   118c8:	1c19      	adds	r1, r3, #0
   118ca:	4b10      	ldr	r3, [pc, #64]	; (1190c <SX1272LoRaSetNbTrigPeaks+0x58>)
   118cc:	4798      	blx	r3
    SX1272LR->RegTestReserved31 = ( SX1272LR->RegTestReserved31 & 0xF8 ) | value;
   118ce:	4b0e      	ldr	r3, [pc, #56]	; (11908 <SX1272LoRaSetNbTrigPeaks+0x54>)
   118d0:	681a      	ldr	r2, [r3, #0]
   118d2:	4b0d      	ldr	r3, [pc, #52]	; (11908 <SX1272LoRaSetNbTrigPeaks+0x54>)
   118d4:	6819      	ldr	r1, [r3, #0]
   118d6:	2330      	movs	r3, #48	; 0x30
   118d8:	5ccb      	ldrb	r3, [r1, r3]
   118da:	b2db      	uxtb	r3, r3
   118dc:	2107      	movs	r1, #7
   118de:	438b      	bics	r3, r1
   118e0:	b2d9      	uxtb	r1, r3
   118e2:	1dfb      	adds	r3, r7, #7
   118e4:	781b      	ldrb	r3, [r3, #0]
   118e6:	430b      	orrs	r3, r1
   118e8:	b2db      	uxtb	r3, r3
   118ea:	b2d9      	uxtb	r1, r3
   118ec:	2330      	movs	r3, #48	; 0x30
   118ee:	54d1      	strb	r1, [r2, r3]
    SX1272Write( 0x31, SX1272LR->RegTestReserved31 );
   118f0:	4b05      	ldr	r3, [pc, #20]	; (11908 <SX1272LoRaSetNbTrigPeaks+0x54>)
   118f2:	681a      	ldr	r2, [r3, #0]
   118f4:	2330      	movs	r3, #48	; 0x30
   118f6:	5cd3      	ldrb	r3, [r2, r3]
   118f8:	2031      	movs	r0, #49	; 0x31
   118fa:	1c19      	adds	r1, r3, #0
   118fc:	4b04      	ldr	r3, [pc, #16]	; (11910 <SX1272LoRaSetNbTrigPeaks+0x5c>)
   118fe:	4798      	blx	r3
}
   11900:	46bd      	mov	sp, r7
   11902:	b002      	add	sp, #8
   11904:	bd80      	pop	{r7, pc}
   11906:	46c0      	nop			; (mov r8, r8)
   11908:	20003804 	.word	0x20003804
   1190c:	00011a41 	.word	0x00011a41
   11910:	00011a0d 	.word	0x00011a0d

00011914 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11914:	b580      	push	{r7, lr}
   11916:	b084      	sub	sp, #16
   11918:	af00      	add	r7, sp, #0
   1191a:	1c02      	adds	r2, r0, #0
   1191c:	1dfb      	adds	r3, r7, #7
   1191e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11920:	1c3b      	adds	r3, r7, #0
   11922:	330f      	adds	r3, #15
   11924:	1dfa      	adds	r2, r7, #7
   11926:	7812      	ldrb	r2, [r2, #0]
   11928:	09d2      	lsrs	r2, r2, #7
   1192a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1192c:	1c3b      	adds	r3, r7, #0
   1192e:	330e      	adds	r3, #14
   11930:	1dfa      	adds	r2, r7, #7
   11932:	7812      	ldrb	r2, [r2, #0]
   11934:	0952      	lsrs	r2, r2, #5
   11936:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11938:	4b0d      	ldr	r3, [pc, #52]	; (11970 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1193a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1193c:	1c3b      	adds	r3, r7, #0
   1193e:	330f      	adds	r3, #15
   11940:	781b      	ldrb	r3, [r3, #0]
   11942:	2b00      	cmp	r3, #0
   11944:	d10e      	bne.n	11964 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   11946:	1c3b      	adds	r3, r7, #0
   11948:	330f      	adds	r3, #15
   1194a:	781b      	ldrb	r3, [r3, #0]
   1194c:	009b      	lsls	r3, r3, #2
   1194e:	2210      	movs	r2, #16
   11950:	19d2      	adds	r2, r2, r7
   11952:	18d3      	adds	r3, r2, r3
   11954:	3b08      	subs	r3, #8
   11956:	681a      	ldr	r2, [r3, #0]
   11958:	1c3b      	adds	r3, r7, #0
   1195a:	330e      	adds	r3, #14
   1195c:	781b      	ldrb	r3, [r3, #0]
   1195e:	01db      	lsls	r3, r3, #7
   11960:	18d3      	adds	r3, r2, r3
   11962:	e000      	b.n	11966 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   11964:	2300      	movs	r3, #0
	}
}
   11966:	1c18      	adds	r0, r3, #0
   11968:	46bd      	mov	sp, r7
   1196a:	b004      	add	sp, #16
   1196c:	bd80      	pop	{r7, pc}
   1196e:	46c0      	nop			; (mov r8, r8)
   11970:	41004400 	.word	0x41004400

00011974 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11974:	b580      	push	{r7, lr}
   11976:	b082      	sub	sp, #8
   11978:	af00      	add	r7, sp, #0
   1197a:	1c02      	adds	r2, r0, #0
   1197c:	1dfb      	adds	r3, r7, #7
   1197e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11980:	1dfb      	adds	r3, r7, #7
   11982:	781b      	ldrb	r3, [r3, #0]
   11984:	1c18      	adds	r0, r3, #0
   11986:	4b03      	ldr	r3, [pc, #12]	; (11994 <port_get_group_from_gpio_pin+0x20>)
   11988:	4798      	blx	r3
   1198a:	1c03      	adds	r3, r0, #0
}
   1198c:	1c18      	adds	r0, r3, #0
   1198e:	46bd      	mov	sp, r7
   11990:	b002      	add	sp, #8
   11992:	bd80      	pop	{r7, pc}
   11994:	00011915 	.word	0x00011915

00011998 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11998:	b580      	push	{r7, lr}
   1199a:	b082      	sub	sp, #8
   1199c:	af00      	add	r7, sp, #0
   1199e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   119a0:	687b      	ldr	r3, [r7, #4]
   119a2:	2200      	movs	r2, #0
   119a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   119a6:	687b      	ldr	r3, [r7, #4]
   119a8:	2201      	movs	r2, #1
   119aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   119ac:	687b      	ldr	r3, [r7, #4]
   119ae:	2200      	movs	r2, #0
   119b0:	709a      	strb	r2, [r3, #2]
}
   119b2:	46bd      	mov	sp, r7
   119b4:	b002      	add	sp, #8
   119b6:	bd80      	pop	{r7, pc}

000119b8 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   119b8:	b580      	push	{r7, lr}
   119ba:	b084      	sub	sp, #16
   119bc:	af00      	add	r7, sp, #0
   119be:	1c0a      	adds	r2, r1, #0
   119c0:	1dfb      	adds	r3, r7, #7
   119c2:	1c01      	adds	r1, r0, #0
   119c4:	7019      	strb	r1, [r3, #0]
   119c6:	1dbb      	adds	r3, r7, #6
   119c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   119ca:	1dfb      	adds	r3, r7, #7
   119cc:	781b      	ldrb	r3, [r3, #0]
   119ce:	1c18      	adds	r0, r3, #0
   119d0:	4b0d      	ldr	r3, [pc, #52]	; (11a08 <port_pin_set_output_level+0x50>)
   119d2:	4798      	blx	r3
   119d4:	1c03      	adds	r3, r0, #0
   119d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   119d8:	1dfb      	adds	r3, r7, #7
   119da:	781a      	ldrb	r2, [r3, #0]
   119dc:	231f      	movs	r3, #31
   119de:	4013      	ands	r3, r2
   119e0:	2201      	movs	r2, #1
   119e2:	1c11      	adds	r1, r2, #0
   119e4:	4099      	lsls	r1, r3
   119e6:	1c0b      	adds	r3, r1, #0
   119e8:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   119ea:	1dbb      	adds	r3, r7, #6
   119ec:	781b      	ldrb	r3, [r3, #0]
   119ee:	2b00      	cmp	r3, #0
   119f0:	d003      	beq.n	119fa <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   119f2:	68fb      	ldr	r3, [r7, #12]
   119f4:	68ba      	ldr	r2, [r7, #8]
   119f6:	619a      	str	r2, [r3, #24]
   119f8:	e002      	b.n	11a00 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   119fa:	68fb      	ldr	r3, [r7, #12]
   119fc:	68ba      	ldr	r2, [r7, #8]
   119fe:	615a      	str	r2, [r3, #20]
	}
}
   11a00:	46bd      	mov	sp, r7
   11a02:	b004      	add	sp, #16
   11a04:	bd80      	pop	{r7, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	00011975 	.word	0x00011975

00011a0c <SX1272Write>:
bool LoRaOn = false;
bool LoRaOnState = false;


void SX1272Write( uint8_t addr, uint8_t data )
{
   11a0c:	b580      	push	{r7, lr}
   11a0e:	b082      	sub	sp, #8
   11a10:	af00      	add	r7, sp, #0
   11a12:	1c0a      	adds	r2, r1, #0
   11a14:	1dfb      	adds	r3, r7, #7
   11a16:	1c01      	adds	r1, r0, #0
   11a18:	7019      	strb	r1, [r3, #0]
   11a1a:	1dbb      	adds	r3, r7, #6
   11a1c:	701a      	strb	r2, [r3, #0]
	SPIXInOut(addr|0x80,&data,1);
   11a1e:	1dfb      	adds	r3, r7, #7
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	2280      	movs	r2, #128	; 0x80
   11a24:	4252      	negs	r2, r2
   11a26:	4313      	orrs	r3, r2
   11a28:	b2da      	uxtb	r2, r3
   11a2a:	1dbb      	adds	r3, r7, #6
   11a2c:	1c10      	adds	r0, r2, #0
   11a2e:	1c19      	adds	r1, r3, #0
   11a30:	2201      	movs	r2, #1
   11a32:	4b02      	ldr	r3, [pc, #8]	; (11a3c <SX1272Write+0x30>)
   11a34:	4798      	blx	r3
}
   11a36:	46bd      	mov	sp, r7
   11a38:	b002      	add	sp, #8
   11a3a:	bd80      	pop	{r7, pc}
   11a3c:	0000e685 	.word	0x0000e685

00011a40 <SX1272Read>:

void SX1272Read( uint8_t addr, uint8_t *data )
{
   11a40:	b580      	push	{r7, lr}
   11a42:	b084      	sub	sp, #16
   11a44:	af00      	add	r7, sp, #0
   11a46:	1c02      	adds	r2, r0, #0
   11a48:	6039      	str	r1, [r7, #0]
   11a4a:	1dfb      	adds	r3, r7, #7
   11a4c:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[2];
	SPIXInOut2(addr & 0x7f,tempBuffer,1);
   11a4e:	1dfb      	adds	r3, r7, #7
   11a50:	781a      	ldrb	r2, [r3, #0]
   11a52:	237f      	movs	r3, #127	; 0x7f
   11a54:	4013      	ands	r3, r2
   11a56:	b2da      	uxtb	r2, r3
   11a58:	1c3b      	adds	r3, r7, #0
   11a5a:	330c      	adds	r3, #12
   11a5c:	1c10      	adds	r0, r2, #0
   11a5e:	1c19      	adds	r1, r3, #0
   11a60:	2201      	movs	r2, #1
   11a62:	4b05      	ldr	r3, [pc, #20]	; (11a78 <SX1272Read+0x38>)
   11a64:	4798      	blx	r3
	*data = tempBuffer[0];
   11a66:	1c3b      	adds	r3, r7, #0
   11a68:	330c      	adds	r3, #12
   11a6a:	781a      	ldrb	r2, [r3, #0]
   11a6c:	683b      	ldr	r3, [r7, #0]
   11a6e:	701a      	strb	r2, [r3, #0]
}
   11a70:	46bd      	mov	sp, r7
   11a72:	b004      	add	sp, #16
   11a74:	bd80      	pop	{r7, pc}
   11a76:	46c0      	nop			; (mov r8, r8)
   11a78:	0000e77d 	.word	0x0000e77d

00011a7c <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   11a7c:	b580      	push	{r7, lr}
   11a7e:	b082      	sub	sp, #8
   11a80:	af00      	add	r7, sp, #0
   11a82:	6039      	str	r1, [r7, #0]
   11a84:	1dfb      	adds	r3, r7, #7
   11a86:	1c01      	adds	r1, r0, #0
   11a88:	7019      	strb	r1, [r3, #0]
   11a8a:	1d3b      	adds	r3, r7, #4
   11a8c:	801a      	strh	r2, [r3, #0]
	SPIXInOut(addr|0x80,buffer,size);
   11a8e:	1dfb      	adds	r3, r7, #7
   11a90:	781b      	ldrb	r3, [r3, #0]
   11a92:	2280      	movs	r2, #128	; 0x80
   11a94:	4252      	negs	r2, r2
   11a96:	4313      	orrs	r3, r2
   11a98:	b2d9      	uxtb	r1, r3
   11a9a:	683a      	ldr	r2, [r7, #0]
   11a9c:	1d3b      	adds	r3, r7, #4
   11a9e:	881b      	ldrh	r3, [r3, #0]
   11aa0:	1c08      	adds	r0, r1, #0
   11aa2:	1c11      	adds	r1, r2, #0
   11aa4:	1c1a      	adds	r2, r3, #0
   11aa6:	4b02      	ldr	r3, [pc, #8]	; (11ab0 <SX1272WriteBuffer+0x34>)
   11aa8:	4798      	blx	r3
}
   11aaa:	46bd      	mov	sp, r7
   11aac:	b002      	add	sp, #8
   11aae:	bd80      	pop	{r7, pc}
   11ab0:	0000e685 	.word	0x0000e685

00011ab4 <SX1272ReadBuffer2>:

void SX1272ReadBuffer2( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   11ab4:	b580      	push	{r7, lr}
   11ab6:	b082      	sub	sp, #8
   11ab8:	af00      	add	r7, sp, #0
   11aba:	6039      	str	r1, [r7, #0]
   11abc:	1dfb      	adds	r3, r7, #7
   11abe:	1c01      	adds	r1, r0, #0
   11ac0:	7019      	strb	r1, [r3, #0]
   11ac2:	1d3b      	adds	r3, r7, #4
   11ac4:	801a      	strh	r2, [r3, #0]
	SPIXInOut2(addr & 0x7f,buffer,size);
   11ac6:	1dfb      	adds	r3, r7, #7
   11ac8:	781a      	ldrb	r2, [r3, #0]
   11aca:	237f      	movs	r3, #127	; 0x7f
   11acc:	4013      	ands	r3, r2
   11ace:	b2d9      	uxtb	r1, r3
   11ad0:	683a      	ldr	r2, [r7, #0]
   11ad2:	1d3b      	adds	r3, r7, #4
   11ad4:	881b      	ldrh	r3, [r3, #0]
   11ad6:	1c08      	adds	r0, r1, #0
   11ad8:	1c11      	adds	r1, r2, #0
   11ada:	1c1a      	adds	r2, r3, #0
   11adc:	4b02      	ldr	r3, [pc, #8]	; (11ae8 <SX1272ReadBuffer2+0x34>)
   11ade:	4798      	blx	r3
}
   11ae0:	46bd      	mov	sp, r7
   11ae2:	b002      	add	sp, #8
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	0000e77d 	.word	0x0000e77d

00011aec <SX1272WriteFifo>:

 
void SX1272WriteFifo( uint8_t *buffer, uint16_t size )
{
   11aec:	b580      	push	{r7, lr}
   11aee:	b082      	sub	sp, #8
   11af0:	af00      	add	r7, sp, #0
   11af2:	6078      	str	r0, [r7, #4]
   11af4:	1c0a      	adds	r2, r1, #0
   11af6:	1cbb      	adds	r3, r7, #2
   11af8:	801a      	strh	r2, [r3, #0]
//	SX1272WriteBuffer( 0, buffer, size );
	SPIXInOut(0x80,buffer,size);
   11afa:	687a      	ldr	r2, [r7, #4]
   11afc:	1cbb      	adds	r3, r7, #2
   11afe:	881b      	ldrh	r3, [r3, #0]
   11b00:	2080      	movs	r0, #128	; 0x80
   11b02:	1c11      	adds	r1, r2, #0
   11b04:	1c1a      	adds	r2, r3, #0
   11b06:	4b02      	ldr	r3, [pc, #8]	; (11b10 <SX1272WriteFifo+0x24>)
   11b08:	4798      	blx	r3
}
   11b0a:	46bd      	mov	sp, r7
   11b0c:	b002      	add	sp, #8
   11b0e:	bd80      	pop	{r7, pc}
   11b10:	0000e685 	.word	0x0000e685

00011b14 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint16_t size )
{
   11b14:	b580      	push	{r7, lr}
   11b16:	b082      	sub	sp, #8
   11b18:	af00      	add	r7, sp, #0
   11b1a:	6078      	str	r0, [r7, #4]
   11b1c:	1c0a      	adds	r2, r1, #0
   11b1e:	1cbb      	adds	r3, r7, #2
   11b20:	801a      	strh	r2, [r3, #0]
//	SX1272ReadBuffer2( 0, buffer, size );
	SPIXInOut2(0,buffer,size);	
   11b22:	687a      	ldr	r2, [r7, #4]
   11b24:	1cbb      	adds	r3, r7, #2
   11b26:	881b      	ldrh	r3, [r3, #0]
   11b28:	2000      	movs	r0, #0
   11b2a:	1c11      	adds	r1, r2, #0
   11b2c:	1c1a      	adds	r2, r3, #0
   11b2e:	4b02      	ldr	r3, [pc, #8]	; (11b38 <SX1272ReadFifo+0x24>)
   11b30:	4798      	blx	r3
}
   11b32:	46bd      	mov	sp, r7
   11b34:	b002      	add	sp, #8
   11b36:	bd80      	pop	{r7, pc}
   11b38:	0000e77d 	.word	0x0000e77d

00011b3c <SX1272Init>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Init(uint8_t radiowhich )
{
   11b3c:	b580      	push	{r7, lr}
   11b3e:	b082      	sub	sp, #8
   11b40:	af00      	add	r7, sp, #0
   11b42:	1c02      	adds	r2, r0, #0
   11b44:	1dfb      	adds	r3, r7, #7
   11b46:	701a      	strb	r2, [r3, #0]
    // Initialize FSK and LoRa registers structure
	if (radiowhich == WHICHRADIO_LORA)
   11b48:	1dfb      	adds	r3, r7, #7
   11b4a:	781b      	ldrb	r3, [r3, #0]
   11b4c:	2b99      	cmp	r3, #153	; 0x99
   11b4e:	d10f      	bne.n	11b70 <SX1272Init+0x34>
	{
		SX1272LR = ( tSX1272LR* )SX1272Regs;
   11b50:	4b10      	ldr	r3, [pc, #64]	; (11b94 <SX1272Init+0x58>)
   11b52:	4a11      	ldr	r2, [pc, #68]	; (11b98 <SX1272Init+0x5c>)
   11b54:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   11b56:	4b11      	ldr	r3, [pc, #68]	; (11b9c <SX1272Init+0x60>)
   11b58:	4798      	blx	r3
		LoRaOn = true;
   11b5a:	4b11      	ldr	r3, [pc, #68]	; (11ba0 <SX1272Init+0x64>)
   11b5c:	2201      	movs	r2, #1
   11b5e:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   11b60:	4b0f      	ldr	r3, [pc, #60]	; (11ba0 <SX1272Init+0x64>)
   11b62:	781b      	ldrb	r3, [r3, #0]
   11b64:	1c18      	adds	r0, r3, #0
   11b66:	4b0f      	ldr	r3, [pc, #60]	; (11ba4 <SX1272Init+0x68>)
   11b68:	4798      	blx	r3
		// Initialize LoRa modem
		SX1272LoRaInit( );		
   11b6a:	4b0f      	ldr	r3, [pc, #60]	; (11ba8 <SX1272Init+0x6c>)
   11b6c:	4798      	blx	r3
   11b6e:	e00e      	b.n	11b8e <SX1272Init+0x52>
	}
	else
	{
		SX1272 = ( tSX1272* )SX1272Regs;
   11b70:	4b0e      	ldr	r3, [pc, #56]	; (11bac <SX1272Init+0x70>)
   11b72:	4a09      	ldr	r2, [pc, #36]	; (11b98 <SX1272Init+0x5c>)
   11b74:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   11b76:	4b09      	ldr	r3, [pc, #36]	; (11b9c <SX1272Init+0x60>)
   11b78:	4798      	blx	r3
		LoRaOn = false;
   11b7a:	4b09      	ldr	r3, [pc, #36]	; (11ba0 <SX1272Init+0x64>)
   11b7c:	2200      	movs	r2, #0
   11b7e:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   11b80:	4b07      	ldr	r3, [pc, #28]	; (11ba0 <SX1272Init+0x64>)
   11b82:	781b      	ldrb	r3, [r3, #0]
   11b84:	1c18      	adds	r0, r3, #0
   11b86:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <SX1272Init+0x68>)
   11b88:	4798      	blx	r3
		// Initialize FSK modem
		SX1272FskInit( );		
   11b8a:	4b09      	ldr	r3, [pc, #36]	; (11bb0 <SX1272Init+0x74>)
   11b8c:	4798      	blx	r3
	}
}
   11b8e:	46bd      	mov	sp, r7
   11b90:	b002      	add	sp, #8
   11b92:	bd80      	pop	{r7, pc}
   11b94:	20003804 	.word	0x20003804
   11b98:	20003908 	.word	0x20003908
   11b9c:	00011bb5 	.word	0x00011bb5
   11ba0:	200004f9 	.word	0x200004f9
   11ba4:	00011c31 	.word	0x00011c31
   11ba8:	00010bed 	.word	0x00010bed
   11bac:	20003700 	.word	0x20003700
   11bb0:	0000fe01 	.word	0x0000fe01

00011bb4 <SX1272Reset>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Reset( void )
{
   11bb4:	b580      	push	{r7, lr}
   11bb6:	b082      	sub	sp, #8
   11bb8:	af00      	add	r7, sp, #0
	uint32_t i; 
  	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   11bba:	1c3b      	adds	r3, r7, #0
   11bbc:	1c18      	adds	r0, r3, #0
   11bbe:	4b18      	ldr	r3, [pc, #96]	; (11c20 <SX1272Reset+0x6c>)
   11bc0:	4798      	blx	r3
	//--------------------------
	// Set RESET pin to 1
	port_pin_set_output_level(LORA_XRESET, 1);
   11bc2:	2028      	movs	r0, #40	; 0x28
   11bc4:	2101      	movs	r1, #1
   11bc6:	4b17      	ldr	r3, [pc, #92]	; (11c24 <SX1272Reset+0x70>)
   11bc8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   11bca:	1c3b      	adds	r3, r7, #0
   11bcc:	2201      	movs	r2, #1
   11bce:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
   11bd0:	1c3b      	adds	r3, r7, #0
   11bd2:	2028      	movs	r0, #40	; 0x28
   11bd4:	1c19      	adds	r1, r3, #0
   11bd6:	4b14      	ldr	r3, [pc, #80]	; (11c28 <SX1272Reset+0x74>)
   11bd8:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   11bda:	2300      	movs	r3, #0
   11bdc:	607b      	str	r3, [r7, #4]
   11bde:	e002      	b.n	11be6 <SX1272Reset+0x32>
   11be0:	687b      	ldr	r3, [r7, #4]
   11be2:	3301      	adds	r3, #1
   11be4:	607b      	str	r3, [r7, #4]
   11be6:	687a      	ldr	r2, [r7, #4]
   11be8:	4b10      	ldr	r3, [pc, #64]	; (11c2c <SX1272Reset+0x78>)
   11bea:	429a      	cmp	r2, r3
   11bec:	d9f8      	bls.n	11be0 <SX1272Reset+0x2c>
	{
		
	}
  	port_pin_set_output_level(LORA_XRESET, 0);
   11bee:	2028      	movs	r0, #40	; 0x28
   11bf0:	2100      	movs	r1, #0
   11bf2:	4b0c      	ldr	r3, [pc, #48]	; (11c24 <SX1272Reset+0x70>)
   11bf4:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;		
   11bf6:	1c3b      	adds	r3, r7, #0
   11bf8:	2201      	movs	r2, #1
   11bfa:	701a      	strb	r2, [r3, #0]
    port_pin_set_config(LORA_XRESET, &pin_conf);   
   11bfc:	1c3b      	adds	r3, r7, #0
   11bfe:	2028      	movs	r0, #40	; 0x28
   11c00:	1c19      	adds	r1, r3, #0
   11c02:	4b09      	ldr	r3, [pc, #36]	; (11c28 <SX1272Reset+0x74>)
   11c04:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   11c06:	2300      	movs	r3, #0
   11c08:	607b      	str	r3, [r7, #4]
   11c0a:	e002      	b.n	11c12 <SX1272Reset+0x5e>
   11c0c:	687b      	ldr	r3, [r7, #4]
   11c0e:	3301      	adds	r3, #1
   11c10:	607b      	str	r3, [r7, #4]
   11c12:	687a      	ldr	r2, [r7, #4]
   11c14:	4b05      	ldr	r3, [pc, #20]	; (11c2c <SX1272Reset+0x78>)
   11c16:	429a      	cmp	r2, r3
   11c18:	d9f8      	bls.n	11c0c <SX1272Reset+0x58>
	{
		
	}
}
   11c1a:	46bd      	mov	sp, r7
   11c1c:	b002      	add	sp, #8
   11c1e:	bd80      	pop	{r7, pc}
   11c20:	00011999 	.word	0x00011999
   11c24:	000119b9 	.word	0x000119b9
   11c28:	00011dbd 	.word	0x00011dbd
   11c2c:	00006fff 	.word	0x00006fff

00011c30 <SX1272SetLoRaOn>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272SetLoRaOn( bool enable )
{
   11c30:	b580      	push	{r7, lr}
   11c32:	b082      	sub	sp, #8
   11c34:	af00      	add	r7, sp, #0
   11c36:	1c02      	adds	r2, r0, #0
   11c38:	1dfb      	adds	r3, r7, #7
   11c3a:	701a      	strb	r2, [r3, #0]
 
    LoRaOnState = enable;
   11c3c:	4b28      	ldr	r3, [pc, #160]	; (11ce0 <SX1272SetLoRaOn+0xb0>)
   11c3e:	1dfa      	adds	r2, r7, #7
   11c40:	7812      	ldrb	r2, [r2, #0]
   11c42:	701a      	strb	r2, [r3, #0]

    if( LoRaOn == true )
   11c44:	4b27      	ldr	r3, [pc, #156]	; (11ce4 <SX1272SetLoRaOn+0xb4>)
   11c46:	781b      	ldrb	r3, [r3, #0]
   11c48:	2b00      	cmp	r3, #0
   11c4a:	d023      	beq.n	11c94 <SX1272SetLoRaOn+0x64>
    {
		//---------------------------------------
		// set up the LORA RADIO
		//---------------------------------------
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   11c4c:	4b26      	ldr	r3, [pc, #152]	; (11ce8 <SX1272SetLoRaOn+0xb8>)
   11c4e:	2001      	movs	r0, #1
   11c50:	1c19      	adds	r1, r3, #0
   11c52:	226f      	movs	r2, #111	; 0x6f
   11c54:	4b25      	ldr	r3, [pc, #148]	; (11cec <SX1272SetLoRaOn+0xbc>)
   11c56:	4798      	blx	r3
	    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
   11c58:	2000      	movs	r0, #0
   11c5a:	4b25      	ldr	r3, [pc, #148]	; (11cf0 <SX1272SetLoRaOn+0xc0>)
   11c5c:	4798      	blx	r3
	    
	    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
   11c5e:	4b25      	ldr	r3, [pc, #148]	; (11cf4 <SX1272SetLoRaOn+0xc4>)
   11c60:	681a      	ldr	r2, [r3, #0]
   11c62:	4b24      	ldr	r3, [pc, #144]	; (11cf4 <SX1272SetLoRaOn+0xc4>)
   11c64:	681b      	ldr	r3, [r3, #0]
   11c66:	785b      	ldrb	r3, [r3, #1]
   11c68:	2180      	movs	r1, #128	; 0x80
   11c6a:	4249      	negs	r1, r1
   11c6c:	430b      	orrs	r3, r1
   11c6e:	b2db      	uxtb	r3, r3
   11c70:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );
   11c72:	4b20      	ldr	r3, [pc, #128]	; (11cf4 <SX1272SetLoRaOn+0xc4>)
   11c74:	681b      	ldr	r3, [r3, #0]
   11c76:	785b      	ldrb	r3, [r3, #1]
   11c78:	2001      	movs	r0, #1
   11c7a:	1c19      	adds	r1, r3, #0
   11c7c:	4b1e      	ldr	r3, [pc, #120]	; (11cf8 <SX1272SetLoRaOn+0xc8>)
   11c7e:	4798      	blx	r3
	    
	    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   11c80:	2001      	movs	r0, #1
   11c82:	4b1b      	ldr	r3, [pc, #108]	; (11cf0 <SX1272SetLoRaOn+0xc0>)
   11c84:	4798      	blx	r3
	    //        SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
	    // CadDetected          ModeReady
	    //        SX1272LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
	    //        SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );
	    
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   11c86:	4b18      	ldr	r3, [pc, #96]	; (11ce8 <SX1272SetLoRaOn+0xb8>)
   11c88:	2001      	movs	r0, #1
   11c8a:	1c19      	adds	r1, r3, #0
   11c8c:	226f      	movs	r2, #111	; 0x6f
   11c8e:	4b17      	ldr	r3, [pc, #92]	; (11cec <SX1272SetLoRaOn+0xbc>)
   11c90:	4798      	blx	r3
   11c92:	e021      	b.n	11cd8 <SX1272SetLoRaOn+0xa8>
    else
    {
		//-----------------------------
		// set up FSK RADIO
		//-----------------------------
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   11c94:	4b19      	ldr	r3, [pc, #100]	; (11cfc <SX1272SetLoRaOn+0xcc>)
   11c96:	2001      	movs	r0, #1
   11c98:	1c19      	adds	r1, r3, #0
   11c9a:	226f      	movs	r2, #111	; 0x6f
   11c9c:	4b13      	ldr	r3, [pc, #76]	; (11cec <SX1272SetLoRaOn+0xbc>)
   11c9e:	4798      	blx	r3
	    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
   11ca0:	2000      	movs	r0, #0
   11ca2:	4b17      	ldr	r3, [pc, #92]	; (11d00 <SX1272SetLoRaOn+0xd0>)
   11ca4:	4798      	blx	r3
	    
	    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
   11ca6:	4b17      	ldr	r3, [pc, #92]	; (11d04 <SX1272SetLoRaOn+0xd4>)
   11ca8:	681a      	ldr	r2, [r3, #0]
   11caa:	4b16      	ldr	r3, [pc, #88]	; (11d04 <SX1272SetLoRaOn+0xd4>)
   11cac:	681b      	ldr	r3, [r3, #0]
   11cae:	7859      	ldrb	r1, [r3, #1]
   11cb0:	237f      	movs	r3, #127	; 0x7f
   11cb2:	400b      	ands	r3, r1
   11cb4:	b2db      	uxtb	r3, r3
   11cb6:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_OPMODE, SX1272->RegOpMode );
   11cb8:	4b12      	ldr	r3, [pc, #72]	; (11d04 <SX1272SetLoRaOn+0xd4>)
   11cba:	681b      	ldr	r3, [r3, #0]
   11cbc:	785b      	ldrb	r3, [r3, #1]
   11cbe:	2001      	movs	r0, #1
   11cc0:	1c19      	adds	r1, r3, #0
   11cc2:	4b0d      	ldr	r3, [pc, #52]	; (11cf8 <SX1272SetLoRaOn+0xc8>)
   11cc4:	4798      	blx	r3
	    
	    SX1272FskSetOpMode( RFLR_OPMODE_STANDBY );
   11cc6:	2001      	movs	r0, #1
   11cc8:	4b0d      	ldr	r3, [pc, #52]	; (11d00 <SX1272SetLoRaOn+0xd0>)
   11cca:	4798      	blx	r3
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   11ccc:	4b0b      	ldr	r3, [pc, #44]	; (11cfc <SX1272SetLoRaOn+0xcc>)
   11cce:	2001      	movs	r0, #1
   11cd0:	1c19      	adds	r1, r3, #0
   11cd2:	226f      	movs	r2, #111	; 0x6f
   11cd4:	4b05      	ldr	r3, [pc, #20]	; (11cec <SX1272SetLoRaOn+0xbc>)
   11cd6:	4798      	blx	r3
    }
}
   11cd8:	46bd      	mov	sp, r7
   11cda:	b002      	add	sp, #8
   11cdc:	bd80      	pop	{r7, pc}
   11cde:	46c0      	nop			; (mov r8, r8)
   11ce0:	200004fa 	.word	0x200004fa
   11ce4:	200004f9 	.word	0x200004f9
   11ce8:	20003908 	.word	0x20003908
   11cec:	00011ab5 	.word	0x00011ab5
   11cf0:	00010d65 	.word	0x00010d65
   11cf4:	20003804 	.word	0x20003804
   11cf8:	00011a0d 	.word	0x00011a0d
   11cfc:	20003909 	.word	0x20003909
   11d00:	0001002d 	.word	0x0001002d
   11d04:	20003700 	.word	0x20003700

00011d08 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   11d08:	b580      	push	{r7, lr}
   11d0a:	b082      	sub	sp, #8
   11d0c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   11d0e:	4b0f      	ldr	r3, [pc, #60]	; (11d4c <cpu_irq_enter_critical+0x44>)
   11d10:	681b      	ldr	r3, [r3, #0]
   11d12:	2b00      	cmp	r3, #0
   11d14:	d112      	bne.n	11d3c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   11d16:	f3ef 8310 	mrs	r3, PRIMASK
   11d1a:	607b      	str	r3, [r7, #4]
  return(result);
   11d1c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   11d1e:	2b00      	cmp	r3, #0
   11d20:	d109      	bne.n	11d36 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   11d22:	b672      	cpsid	i
   11d24:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   11d28:	4b09      	ldr	r3, [pc, #36]	; (11d50 <cpu_irq_enter_critical+0x48>)
   11d2a:	2200      	movs	r2, #0
   11d2c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   11d2e:	4b09      	ldr	r3, [pc, #36]	; (11d54 <cpu_irq_enter_critical+0x4c>)
   11d30:	2201      	movs	r2, #1
   11d32:	701a      	strb	r2, [r3, #0]
   11d34:	e002      	b.n	11d3c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   11d36:	4b07      	ldr	r3, [pc, #28]	; (11d54 <cpu_irq_enter_critical+0x4c>)
   11d38:	2200      	movs	r2, #0
   11d3a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   11d3c:	4b03      	ldr	r3, [pc, #12]	; (11d4c <cpu_irq_enter_critical+0x44>)
   11d3e:	681b      	ldr	r3, [r3, #0]
   11d40:	1c5a      	adds	r2, r3, #1
   11d42:	4b02      	ldr	r3, [pc, #8]	; (11d4c <cpu_irq_enter_critical+0x44>)
   11d44:	601a      	str	r2, [r3, #0]
}
   11d46:	46bd      	mov	sp, r7
   11d48:	b002      	add	sp, #8
   11d4a:	bd80      	pop	{r7, pc}
   11d4c:	200004fc 	.word	0x200004fc
   11d50:	20000044 	.word	0x20000044
   11d54:	20000500 	.word	0x20000500

00011d58 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   11d58:	b580      	push	{r7, lr}
   11d5a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   11d5c:	4b0a      	ldr	r3, [pc, #40]	; (11d88 <cpu_irq_leave_critical+0x30>)
   11d5e:	681b      	ldr	r3, [r3, #0]
   11d60:	1e5a      	subs	r2, r3, #1
   11d62:	4b09      	ldr	r3, [pc, #36]	; (11d88 <cpu_irq_leave_critical+0x30>)
   11d64:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   11d66:	4b08      	ldr	r3, [pc, #32]	; (11d88 <cpu_irq_leave_critical+0x30>)
   11d68:	681b      	ldr	r3, [r3, #0]
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	d10a      	bne.n	11d84 <cpu_irq_leave_critical+0x2c>
   11d6e:	4b07      	ldr	r3, [pc, #28]	; (11d8c <cpu_irq_leave_critical+0x34>)
   11d70:	781b      	ldrb	r3, [r3, #0]
   11d72:	b2db      	uxtb	r3, r3
   11d74:	2b00      	cmp	r3, #0
   11d76:	d005      	beq.n	11d84 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   11d78:	4b05      	ldr	r3, [pc, #20]	; (11d90 <cpu_irq_leave_critical+0x38>)
   11d7a:	2201      	movs	r2, #1
   11d7c:	701a      	strb	r2, [r3, #0]
   11d7e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   11d82:	b662      	cpsie	i
	}
}
   11d84:	46bd      	mov	sp, r7
   11d86:	bd80      	pop	{r7, pc}
   11d88:	200004fc 	.word	0x200004fc
   11d8c:	20000500 	.word	0x20000500
   11d90:	20000044 	.word	0x20000044

00011d94 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   11d94:	b580      	push	{r7, lr}
   11d96:	b082      	sub	sp, #8
   11d98:	af00      	add	r7, sp, #0
   11d9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11d9c:	687b      	ldr	r3, [r7, #4]
   11d9e:	2280      	movs	r2, #128	; 0x80
   11da0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11da2:	687b      	ldr	r3, [r7, #4]
   11da4:	2200      	movs	r2, #0
   11da6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11da8:	687b      	ldr	r3, [r7, #4]
   11daa:	2201      	movs	r2, #1
   11dac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11dae:	687b      	ldr	r3, [r7, #4]
   11db0:	2200      	movs	r2, #0
   11db2:	70da      	strb	r2, [r3, #3]
}
   11db4:	46bd      	mov	sp, r7
   11db6:	b002      	add	sp, #8
   11db8:	bd80      	pop	{r7, pc}
   11dba:	46c0      	nop			; (mov r8, r8)

00011dbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11dbc:	b580      	push	{r7, lr}
   11dbe:	b084      	sub	sp, #16
   11dc0:	af00      	add	r7, sp, #0
   11dc2:	1c02      	adds	r2, r0, #0
   11dc4:	6039      	str	r1, [r7, #0]
   11dc6:	1dfb      	adds	r3, r7, #7
   11dc8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11dca:	1c3b      	adds	r3, r7, #0
   11dcc:	330c      	adds	r3, #12
   11dce:	1c18      	adds	r0, r3, #0
   11dd0:	4b0f      	ldr	r3, [pc, #60]	; (11e10 <port_pin_set_config+0x54>)
   11dd2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11dd4:	1c3b      	adds	r3, r7, #0
   11dd6:	330c      	adds	r3, #12
   11dd8:	2280      	movs	r2, #128	; 0x80
   11dda:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11ddc:	683b      	ldr	r3, [r7, #0]
   11dde:	781a      	ldrb	r2, [r3, #0]
   11de0:	1c3b      	adds	r3, r7, #0
   11de2:	330c      	adds	r3, #12
   11de4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11de6:	683b      	ldr	r3, [r7, #0]
   11de8:	785a      	ldrb	r2, [r3, #1]
   11dea:	1c3b      	adds	r3, r7, #0
   11dec:	330c      	adds	r3, #12
   11dee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11df0:	683b      	ldr	r3, [r7, #0]
   11df2:	789a      	ldrb	r2, [r3, #2]
   11df4:	1c3b      	adds	r3, r7, #0
   11df6:	330c      	adds	r3, #12
   11df8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11dfa:	1dfb      	adds	r3, r7, #7
   11dfc:	781a      	ldrb	r2, [r3, #0]
   11dfe:	1c3b      	adds	r3, r7, #0
   11e00:	330c      	adds	r3, #12
   11e02:	1c10      	adds	r0, r2, #0
   11e04:	1c19      	adds	r1, r3, #0
   11e06:	4b03      	ldr	r3, [pc, #12]	; (11e14 <port_pin_set_config+0x58>)
   11e08:	4798      	blx	r3
}
   11e0a:	46bd      	mov	sp, r7
   11e0c:	b004      	add	sp, #16
   11e0e:	bd80      	pop	{r7, pc}
   11e10:	00011d95 	.word	0x00011d95
   11e14:	00014361 	.word	0x00014361

00011e18 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   11e18:	b580      	push	{r7, lr}
   11e1a:	b082      	sub	sp, #8
   11e1c:	af00      	add	r7, sp, #0
   11e1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   11e20:	687b      	ldr	r3, [r7, #4]
   11e22:	2200      	movs	r2, #0
   11e24:	701a      	strb	r2, [r3, #0]
}
   11e26:	46bd      	mov	sp, r7
   11e28:	b002      	add	sp, #8
   11e2a:	bd80      	pop	{r7, pc}

00011e2c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   11e2c:	b580      	push	{r7, lr}
   11e2e:	b082      	sub	sp, #8
   11e30:	af00      	add	r7, sp, #0
   11e32:	1c02      	adds	r2, r0, #0
   11e34:	6039      	str	r1, [r7, #0]
   11e36:	1dfb      	adds	r3, r7, #7
   11e38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11e3a:	1dfb      	adds	r3, r7, #7
   11e3c:	781b      	ldrb	r3, [r3, #0]
   11e3e:	2b01      	cmp	r3, #1
   11e40:	d00a      	beq.n	11e58 <system_apb_clock_set_mask+0x2c>
   11e42:	2b02      	cmp	r3, #2
   11e44:	d00f      	beq.n	11e66 <system_apb_clock_set_mask+0x3a>
   11e46:	2b00      	cmp	r3, #0
   11e48:	d114      	bne.n	11e74 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   11e4a:	4b0e      	ldr	r3, [pc, #56]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e4c:	4a0d      	ldr	r2, [pc, #52]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e4e:	6991      	ldr	r1, [r2, #24]
   11e50:	683a      	ldr	r2, [r7, #0]
   11e52:	430a      	orrs	r2, r1
   11e54:	619a      	str	r2, [r3, #24]
			break;
   11e56:	e00f      	b.n	11e78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   11e58:	4b0a      	ldr	r3, [pc, #40]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e5a:	4a0a      	ldr	r2, [pc, #40]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e5c:	69d1      	ldr	r1, [r2, #28]
   11e5e:	683a      	ldr	r2, [r7, #0]
   11e60:	430a      	orrs	r2, r1
   11e62:	61da      	str	r2, [r3, #28]
			break;
   11e64:	e008      	b.n	11e78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   11e66:	4b07      	ldr	r3, [pc, #28]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e68:	4a06      	ldr	r2, [pc, #24]	; (11e84 <system_apb_clock_set_mask+0x58>)
   11e6a:	6a11      	ldr	r1, [r2, #32]
   11e6c:	683a      	ldr	r2, [r7, #0]
   11e6e:	430a      	orrs	r2, r1
   11e70:	621a      	str	r2, [r3, #32]
			break;
   11e72:	e001      	b.n	11e78 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   11e74:	2317      	movs	r3, #23
   11e76:	e000      	b.n	11e7a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   11e78:	2300      	movs	r3, #0
}
   11e7a:	1c18      	adds	r0, r3, #0
   11e7c:	46bd      	mov	sp, r7
   11e7e:	b002      	add	sp, #8
   11e80:	bd80      	pop	{r7, pc}
   11e82:	46c0      	nop			; (mov r8, r8)
   11e84:	40000400 	.word	0x40000400

00011e88 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   11e88:	b580      	push	{r7, lr}
   11e8a:	b082      	sub	sp, #8
   11e8c:	af00      	add	r7, sp, #0
   11e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11e90:	687b      	ldr	r3, [r7, #4]
   11e92:	2280      	movs	r2, #128	; 0x80
   11e94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11e96:	687b      	ldr	r3, [r7, #4]
   11e98:	2200      	movs	r2, #0
   11e9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	2201      	movs	r2, #1
   11ea0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11ea2:	687b      	ldr	r3, [r7, #4]
   11ea4:	2200      	movs	r2, #0
   11ea6:	70da      	strb	r2, [r3, #3]
}
   11ea8:	46bd      	mov	sp, r7
   11eaa:	b002      	add	sp, #8
   11eac:	bd80      	pop	{r7, pc}
   11eae:	46c0      	nop			; (mov r8, r8)

00011eb0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   11eb0:	b580      	push	{r7, lr}
   11eb2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   11eb4:	4b05      	ldr	r3, [pc, #20]	; (11ecc <system_is_debugger_present+0x1c>)
   11eb6:	789b      	ldrb	r3, [r3, #2]
   11eb8:	b2db      	uxtb	r3, r3
   11eba:	1c1a      	adds	r2, r3, #0
   11ebc:	2302      	movs	r3, #2
   11ebe:	4013      	ands	r3, r2
   11ec0:	1e5a      	subs	r2, r3, #1
   11ec2:	4193      	sbcs	r3, r2
   11ec4:	b2db      	uxtb	r3, r3
}
   11ec6:	1c18      	adds	r0, r3, #0
   11ec8:	46bd      	mov	sp, r7
   11eca:	bd80      	pop	{r7, pc}
   11ecc:	41002000 	.word	0x41002000

00011ed0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   11ed0:	b580      	push	{r7, lr}
   11ed2:	b084      	sub	sp, #16
   11ed4:	af00      	add	r7, sp, #0
   11ed6:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   11ed8:	687b      	ldr	r3, [r7, #4]
   11eda:	681b      	ldr	r3, [r3, #0]
   11edc:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
   11ede:	68fb      	ldr	r3, [r7, #12]
   11ee0:	8a1b      	ldrh	r3, [r3, #16]
   11ee2:	b29b      	uxth	r3, r3
   11ee4:	1c1a      	adds	r2, r3, #0
   11ee6:	2380      	movs	r3, #128	; 0x80
   11ee8:	021b      	lsls	r3, r3, #8
   11eea:	4013      	ands	r3, r2
   11eec:	1e5a      	subs	r2, r3, #1
   11eee:	4193      	sbcs	r3, r2
   11ef0:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   11ef2:	1c18      	adds	r0, r3, #0
   11ef4:	46bd      	mov	sp, r7
   11ef6:	b004      	add	sp, #16
   11ef8:	bd80      	pop	{r7, pc}
   11efa:	46c0      	nop			; (mov r8, r8)

00011efc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   11efc:	b580      	push	{r7, lr}
   11efe:	b082      	sub	sp, #8
   11f00:	af00      	add	r7, sp, #0
   11f02:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   11f04:	46c0      	nop			; (mov r8, r8)
   11f06:	687b      	ldr	r3, [r7, #4]
   11f08:	1c18      	adds	r0, r3, #0
   11f0a:	4b04      	ldr	r3, [pc, #16]	; (11f1c <_i2c_master_wait_for_sync+0x20>)
   11f0c:	4798      	blx	r3
   11f0e:	1c03      	adds	r3, r0, #0
   11f10:	2b00      	cmp	r3, #0
   11f12:	d1f8      	bne.n	11f06 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   11f14:	46bd      	mov	sp, r7
   11f16:	b002      	add	sp, #8
   11f18:	bd80      	pop	{r7, pc}
   11f1a:	46c0      	nop			; (mov r8, r8)
   11f1c:	00011ed1 	.word	0x00011ed1

00011f20 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   11f20:	b590      	push	{r4, r7, lr}
   11f22:	b08d      	sub	sp, #52	; 0x34
   11f24:	af00      	add	r7, sp, #0
   11f26:	6078      	str	r0, [r7, #4]
   11f28:	6039      	str	r1, [r7, #0]
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
   11f2a:	1c3b      	adds	r3, r7, #0
   11f2c:	332b      	adds	r3, #43	; 0x2b
   11f2e:	2200      	movs	r2, #0
   11f30:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11f32:	687b      	ldr	r3, [r7, #4]
   11f34:	681b      	ldr	r3, [r3, #0]
   11f36:	61fb      	str	r3, [r7, #28]
	Sercom *const sercom_hw = module->hw;
   11f38:	687b      	ldr	r3, [r7, #4]
   11f3a:	681b      	ldr	r3, [r3, #0]
   11f3c:	61bb      	str	r3, [r7, #24]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   11f3e:	1c3c      	adds	r4, r7, #0
   11f40:	3417      	adds	r4, #23
   11f42:	69bb      	ldr	r3, [r7, #24]
   11f44:	1c18      	adds	r0, r3, #0
   11f46:	4b5a      	ldr	r3, [pc, #360]	; (120b0 <_i2c_master_set_config+0x190>)
   11f48:	4798      	blx	r3
   11f4a:	1c03      	adds	r3, r0, #0
   11f4c:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   11f4e:	1c3b      	adds	r3, r7, #0
   11f50:	330c      	adds	r3, #12
   11f52:	1c18      	adds	r0, r3, #0
   11f54:	4b57      	ldr	r3, [pc, #348]	; (120b4 <_i2c_master_set_config+0x194>)
   11f56:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   11f58:	683b      	ldr	r3, [r7, #0]
   11f5a:	695b      	ldr	r3, [r3, #20]
   11f5c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad1 = config->pinmux_pad1;
   11f5e:	683b      	ldr	r3, [r7, #0]
   11f60:	699b      	ldr	r3, [r3, #24]
   11f62:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   11f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f66:	2b00      	cmp	r3, #0
   11f68:	d106      	bne.n	11f78 <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   11f6a:	69bb      	ldr	r3, [r7, #24]
   11f6c:	1c18      	adds	r0, r3, #0
   11f6e:	2100      	movs	r1, #0
   11f70:	4b51      	ldr	r3, [pc, #324]	; (120b8 <_i2c_master_set_config+0x198>)
   11f72:	4798      	blx	r3
   11f74:	1c03      	adds	r3, r0, #0
   11f76:	627b      	str	r3, [r7, #36]	; 0x24
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   11f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f7a:	b2da      	uxtb	r2, r3
   11f7c:	1c3b      	adds	r3, r7, #0
   11f7e:	330c      	adds	r3, #12
   11f80:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11f82:	1c3b      	adds	r3, r7, #0
   11f84:	330c      	adds	r3, #12
   11f86:	2202      	movs	r2, #2
   11f88:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   11f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f8c:	0c1b      	lsrs	r3, r3, #16
   11f8e:	b2da      	uxtb	r2, r3
   11f90:	1c3b      	adds	r3, r7, #0
   11f92:	330c      	adds	r3, #12
   11f94:	1c10      	adds	r0, r2, #0
   11f96:	1c19      	adds	r1, r3, #0
   11f98:	4b48      	ldr	r3, [pc, #288]	; (120bc <_i2c_master_set_config+0x19c>)
   11f9a:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   11f9c:	6a3b      	ldr	r3, [r7, #32]
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d106      	bne.n	11fb0 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   11fa2:	69bb      	ldr	r3, [r7, #24]
   11fa4:	1c18      	adds	r0, r3, #0
   11fa6:	2101      	movs	r1, #1
   11fa8:	4b43      	ldr	r3, [pc, #268]	; (120b8 <_i2c_master_set_config+0x198>)
   11faa:	4798      	blx	r3
   11fac:	1c03      	adds	r3, r0, #0
   11fae:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   11fb0:	6a3b      	ldr	r3, [r7, #32]
   11fb2:	b2da      	uxtb	r2, r3
   11fb4:	1c3b      	adds	r3, r7, #0
   11fb6:	330c      	adds	r3, #12
   11fb8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11fba:	1c3b      	adds	r3, r7, #0
   11fbc:	330c      	adds	r3, #12
   11fbe:	2202      	movs	r2, #2
   11fc0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   11fc2:	6a3b      	ldr	r3, [r7, #32]
   11fc4:	0c1b      	lsrs	r3, r3, #16
   11fc6:	b2da      	uxtb	r2, r3
   11fc8:	1c3b      	adds	r3, r7, #0
   11fca:	330c      	adds	r3, #12
   11fcc:	1c10      	adds	r0, r2, #0
   11fce:	1c19      	adds	r1, r3, #0
   11fd0:	4b3a      	ldr	r3, [pc, #232]	; (120bc <_i2c_master_set_config+0x19c>)
   11fd2:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   11fd4:	683b      	ldr	r3, [r7, #0]
   11fd6:	899a      	ldrh	r2, [r3, #12]
   11fd8:	687b      	ldr	r3, [r7, #4]
   11fda:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   11fdc:	683b      	ldr	r3, [r7, #0]
   11fde:	89da      	ldrh	r2, [r3, #14]
   11fe0:	687b      	ldr	r3, [r7, #4]
   11fe2:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   11fe4:	683b      	ldr	r3, [r7, #0]
   11fe6:	7c1b      	ldrb	r3, [r3, #16]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d104      	bne.n	11ff6 <_i2c_master_set_config+0xd6>
   11fec:	4b34      	ldr	r3, [pc, #208]	; (120c0 <_i2c_master_set_config+0x1a0>)
   11fee:	4798      	blx	r3
   11ff0:	1c03      	adds	r3, r0, #0
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d002      	beq.n	11ffc <_i2c_master_set_config+0xdc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   11ff6:	2380      	movs	r3, #128	; 0x80
   11ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   11ffa:	e001      	b.n	12000 <_i2c_master_set_config+0xe0>
	} else {
		tmp_ctrla = 0;
   11ffc:	2300      	movs	r3, #0
   11ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   12000:	683b      	ldr	r3, [r7, #0]
   12002:	689b      	ldr	r3, [r3, #8]
   12004:	2b00      	cmp	r3, #0
   12006:	d004      	beq.n	12012 <_i2c_master_set_config+0xf2>
		tmp_ctrla |= config->start_hold_time;
   12008:	683b      	ldr	r3, [r7, #0]
   1200a:	689b      	ldr	r3, [r3, #8]
   1200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1200e:	4313      	orrs	r3, r2
   12010:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   12012:	683b      	ldr	r3, [r7, #0]
   12014:	7f1b      	ldrb	r3, [r3, #28]
   12016:	2b00      	cmp	r3, #0
   12018:	d004      	beq.n	12024 <_i2c_master_set_config+0x104>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
   1201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1201c:	2280      	movs	r2, #128	; 0x80
   1201e:	05d2      	lsls	r2, r2, #23
   12020:	4313      	orrs	r3, r2
   12022:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   12024:	683b      	ldr	r3, [r7, #0]
   12026:	6a1b      	ldr	r3, [r3, #32]
   12028:	2b00      	cmp	r3, #0
   1202a:	d004      	beq.n	12036 <_i2c_master_set_config+0x116>
		tmp_ctrla |= config->inactive_timeout;
   1202c:	683b      	ldr	r3, [r7, #0]
   1202e:	6a1b      	ldr	r3, [r3, #32]
   12030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12032:	4313      	orrs	r3, r2
   12034:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   12036:	69fb      	ldr	r3, [r7, #28]
   12038:	681a      	ldr	r2, [r3, #0]
   1203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1203c:	431a      	orrs	r2, r3
   1203e:	69fb      	ldr	r3, [r7, #28]
   12040:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   12042:	69fb      	ldr	r3, [r7, #28]
   12044:	2280      	movs	r2, #128	; 0x80
   12046:	0052      	lsls	r2, r2, #1
   12048:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   1204a:	1c3b      	adds	r3, r7, #0
   1204c:	3317      	adds	r3, #23
   1204e:	781b      	ldrb	r3, [r3, #0]
   12050:	330d      	adds	r3, #13
   12052:	b2db      	uxtb	r3, r3
   12054:	1c18      	adds	r0, r3, #0
   12056:	4b1b      	ldr	r3, [pc, #108]	; (120c4 <_i2c_master_set_config+0x1a4>)
   12058:	4798      	blx	r3
   1205a:	1c02      	adds	r2, r0, #0
   1205c:	683b      	ldr	r3, [r7, #0]
   1205e:	681b      	ldr	r3, [r3, #0]
   12060:	21fa      	movs	r1, #250	; 0xfa
   12062:	00c9      	lsls	r1, r1, #3
   12064:	434b      	muls	r3, r1
   12066:	18d3      	adds	r3, r2, r3
   12068:	1e59      	subs	r1, r3, #1
   1206a:	683b      	ldr	r3, [r7, #0]
   1206c:	681b      	ldr	r3, [r3, #0]
   1206e:	22fa      	movs	r2, #250	; 0xfa
   12070:	00d2      	lsls	r2, r2, #3
   12072:	435a      	muls	r2, r3
   12074:	4b14      	ldr	r3, [pc, #80]	; (120c8 <_i2c_master_set_config+0x1a8>)
   12076:	1c08      	adds	r0, r1, #0
   12078:	1c11      	adds	r1, r2, #0
   1207a:	4798      	blx	r3
   1207c:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
   1207e:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   12080:	613b      	str	r3, [r7, #16]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
   12082:	693b      	ldr	r3, [r7, #16]
   12084:	2bff      	cmp	r3, #255	; 0xff
   12086:	dc02      	bgt.n	1208e <_i2c_master_set_config+0x16e>
   12088:	693b      	ldr	r3, [r7, #16]
   1208a:	2b00      	cmp	r3, #0
   1208c:	da04      	bge.n	12098 <_i2c_master_set_config+0x178>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1208e:	1c3b      	adds	r3, r7, #0
   12090:	332b      	adds	r3, #43	; 0x2b
   12092:	2240      	movs	r2, #64	; 0x40
   12094:	701a      	strb	r2, [r3, #0]
   12096:	e004      	b.n	120a2 <_i2c_master_set_config+0x182>
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
   12098:	693b      	ldr	r3, [r7, #16]
   1209a:	b2db      	uxtb	r3, r3
   1209c:	1c1a      	adds	r2, r3, #0
   1209e:	69fb      	ldr	r3, [r7, #28]
   120a0:	815a      	strh	r2, [r3, #10]
	}

	return tmp_status_code;
   120a2:	1c3b      	adds	r3, r7, #0
   120a4:	332b      	adds	r3, #43	; 0x2b
   120a6:	781b      	ldrb	r3, [r3, #0]
}
   120a8:	1c18      	adds	r0, r3, #0
   120aa:	46bd      	mov	sp, r7
   120ac:	b00d      	add	sp, #52	; 0x34
   120ae:	bd90      	pop	{r4, r7, pc}
   120b0:	000129ad 	.word	0x000129ad
   120b4:	00011e89 	.word	0x00011e89
   120b8:	000127dd 	.word	0x000127dd
   120bc:	00014361 	.word	0x00014361
   120c0:	00011eb1 	.word	0x00011eb1
   120c4:	000141a1 	.word	0x000141a1
   120c8:	000157d9 	.word	0x000157d9

000120cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   120cc:	b580      	push	{r7, lr}
   120ce:	b08a      	sub	sp, #40	; 0x28
   120d0:	af00      	add	r7, sp, #0
   120d2:	60f8      	str	r0, [r7, #12]
   120d4:	60b9      	str	r1, [r7, #8]
   120d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   120d8:	68fb      	ldr	r3, [r7, #12]
   120da:	68ba      	ldr	r2, [r7, #8]
   120dc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   120de:	68fb      	ldr	r3, [r7, #12]
   120e0:	681b      	ldr	r3, [r3, #0]
   120e2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   120e4:	68fb      	ldr	r3, [r7, #12]
   120e6:	681b      	ldr	r3, [r3, #0]
   120e8:	1c18      	adds	r0, r3, #0
   120ea:	4b26      	ldr	r3, [pc, #152]	; (12184 <i2c_master_init+0xb8>)
   120ec:	4798      	blx	r3
   120ee:	1c03      	adds	r3, r0, #0
   120f0:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   120f2:	6a3b      	ldr	r3, [r7, #32]
   120f4:	3302      	adds	r3, #2
   120f6:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   120f8:	6a3b      	ldr	r3, [r7, #32]
   120fa:	330d      	adds	r3, #13
   120fc:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   120fe:	69fb      	ldr	r3, [r7, #28]
   12100:	2201      	movs	r2, #1
   12102:	1c11      	adds	r1, r2, #0
   12104:	4099      	lsls	r1, r3
   12106:	1c0b      	adds	r3, r1, #0
   12108:	2002      	movs	r0, #2
   1210a:	1c19      	adds	r1, r3, #0
   1210c:	4b1e      	ldr	r3, [pc, #120]	; (12188 <i2c_master_init+0xbc>)
   1210e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12110:	1c3b      	adds	r3, r7, #0
   12112:	3314      	adds	r3, #20
   12114:	1c18      	adds	r0, r3, #0
   12116:	4b1d      	ldr	r3, [pc, #116]	; (1218c <i2c_master_init+0xc0>)
   12118:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1211a:	687b      	ldr	r3, [r7, #4]
   1211c:	791a      	ldrb	r2, [r3, #4]
   1211e:	1c3b      	adds	r3, r7, #0
   12120:	3314      	adds	r3, #20
   12122:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12124:	69bb      	ldr	r3, [r7, #24]
   12126:	b2da      	uxtb	r2, r3
   12128:	1c3b      	adds	r3, r7, #0
   1212a:	3314      	adds	r3, #20
   1212c:	1c10      	adds	r0, r2, #0
   1212e:	1c19      	adds	r1, r3, #0
   12130:	4b17      	ldr	r3, [pc, #92]	; (12190 <i2c_master_init+0xc4>)
   12132:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12134:	69bb      	ldr	r3, [r7, #24]
   12136:	b2db      	uxtb	r3, r3
   12138:	1c18      	adds	r0, r3, #0
   1213a:	4b16      	ldr	r3, [pc, #88]	; (12194 <i2c_master_init+0xc8>)
   1213c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1213e:	687b      	ldr	r3, [r7, #4]
   12140:	791b      	ldrb	r3, [r3, #4]
   12142:	1c18      	adds	r0, r3, #0
   12144:	2100      	movs	r1, #0
   12146:	4b14      	ldr	r3, [pc, #80]	; (12198 <i2c_master_init+0xcc>)
   12148:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1214c:	681a      	ldr	r2, [r3, #0]
   1214e:	2302      	movs	r3, #2
   12150:	4013      	ands	r3, r2
   12152:	d001      	beq.n	12158 <i2c_master_init+0x8c>
		return STATUS_ERR_DENIED;
   12154:	231c      	movs	r3, #28
   12156:	e010      	b.n	1217a <i2c_master_init+0xae>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   12158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1215a:	681a      	ldr	r2, [r3, #0]
   1215c:	2301      	movs	r3, #1
   1215e:	4013      	ands	r3, r2
   12160:	d001      	beq.n	12166 <i2c_master_init+0x9a>
		return STATUS_BUSY;
   12162:	2305      	movs	r3, #5
   12164:	e009      	b.n	1217a <i2c_master_init+0xae>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
   12166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12168:	2214      	movs	r2, #20
   1216a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1216c:	68fa      	ldr	r2, [r7, #12]
   1216e:	687b      	ldr	r3, [r7, #4]
   12170:	1c10      	adds	r0, r2, #0
   12172:	1c19      	adds	r1, r3, #0
   12174:	4b09      	ldr	r3, [pc, #36]	; (1219c <i2c_master_init+0xd0>)
   12176:	4798      	blx	r3
   12178:	1c03      	adds	r3, r0, #0
}
   1217a:	1c18      	adds	r0, r3, #0
   1217c:	46bd      	mov	sp, r7
   1217e:	b00a      	add	sp, #40	; 0x28
   12180:	bd80      	pop	{r7, pc}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	000129ad 	.word	0x000129ad
   12188:	00011e2d 	.word	0x00011e2d
   1218c:	00011e19 	.word	0x00011e19
   12190:	00014041 	.word	0x00014041
   12194:	00014081 	.word	0x00014081
   12198:	00012751 	.word	0x00012751
   1219c:	00011f21 	.word	0x00011f21

000121a0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   121a0:	b580      	push	{r7, lr}
   121a2:	b084      	sub	sp, #16
   121a4:	af00      	add	r7, sp, #0
   121a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   121a8:	687b      	ldr	r3, [r7, #4]
   121aa:	681b      	ldr	r3, [r3, #0]
   121ac:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   121ae:	68fb      	ldr	r3, [r7, #12]
   121b0:	7b9b      	ldrb	r3, [r3, #14]
   121b2:	b2db      	uxtb	r3, r3
   121b4:	1c1a      	adds	r2, r3, #0
   121b6:	2302      	movs	r3, #2
   121b8:	4013      	ands	r3, r2
   121ba:	d00b      	beq.n	121d4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   121bc:	68fb      	ldr	r3, [r7, #12]
   121be:	2202      	movs	r2, #2
   121c0:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   121c2:	68fb      	ldr	r3, [r7, #12]
   121c4:	8a1b      	ldrh	r3, [r3, #16]
   121c6:	b29b      	uxth	r3, r3
   121c8:	1c1a      	adds	r2, r3, #0
   121ca:	2302      	movs	r3, #2
   121cc:	4013      	ands	r3, r2
   121ce:	d011      	beq.n	121f4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   121d0:	2341      	movs	r3, #65	; 0x41
   121d2:	e010      	b.n	121f6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   121d4:	68fb      	ldr	r3, [r7, #12]
   121d6:	8a1b      	ldrh	r3, [r3, #16]
   121d8:	b29b      	uxth	r3, r3
   121da:	1c1a      	adds	r2, r3, #0
   121dc:	2304      	movs	r3, #4
   121de:	4013      	ands	r3, r2
   121e0:	d008      	beq.n	121f4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   121e2:	68fb      	ldr	r3, [r7, #12]
   121e4:	685b      	ldr	r3, [r3, #4]
   121e6:	22c0      	movs	r2, #192	; 0xc0
   121e8:	0292      	lsls	r2, r2, #10
   121ea:	431a      	orrs	r2, r3
   121ec:	68fb      	ldr	r3, [r7, #12]
   121ee:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   121f0:	2318      	movs	r3, #24
   121f2:	e000      	b.n	121f6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   121f4:	2300      	movs	r3, #0
}
   121f6:	1c18      	adds	r0, r3, #0
   121f8:	46bd      	mov	sp, r7
   121fa:	b004      	add	sp, #16
   121fc:	bd80      	pop	{r7, pc}
   121fe:	46c0      	nop			; (mov r8, r8)

00012200 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   12200:	b580      	push	{r7, lr}
   12202:	b084      	sub	sp, #16
   12204:	af00      	add	r7, sp, #0
   12206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12208:	687b      	ldr	r3, [r7, #4]
   1220a:	681b      	ldr	r3, [r3, #0]
   1220c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1220e:	1c3b      	adds	r3, r7, #0
   12210:	330e      	adds	r3, #14
   12212:	2200      	movs	r2, #0
   12214:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12216:	e00f      	b.n	12238 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   12218:	1c3b      	adds	r3, r7, #0
   1221a:	330e      	adds	r3, #14
   1221c:	1c3a      	adds	r2, r7, #0
   1221e:	320e      	adds	r2, #14
   12220:	8812      	ldrh	r2, [r2, #0]
   12222:	3201      	adds	r2, #1
   12224:	801a      	strh	r2, [r3, #0]
   12226:	687b      	ldr	r3, [r7, #4]
   12228:	891b      	ldrh	r3, [r3, #8]
   1222a:	1c3a      	adds	r2, r7, #0
   1222c:	320e      	adds	r2, #14
   1222e:	8812      	ldrh	r2, [r2, #0]
   12230:	429a      	cmp	r2, r3
   12232:	d301      	bcc.n	12238 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   12234:	2312      	movs	r3, #18
   12236:	e00e      	b.n	12256 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12238:	68bb      	ldr	r3, [r7, #8]
   1223a:	7b9b      	ldrb	r3, [r3, #14]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	1c1a      	adds	r2, r3, #0
   12240:	2301      	movs	r3, #1
   12242:	4013      	ands	r3, r2
   12244:	d106      	bne.n	12254 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   12246:	68bb      	ldr	r3, [r7, #8]
   12248:	7b9b      	ldrb	r3, [r3, #14]
   1224a:	b2db      	uxtb	r3, r3
   1224c:	1c1a      	adds	r2, r3, #0
   1224e:	2302      	movs	r3, #2
   12250:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12252:	d0e1      	beq.n	12218 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
   12254:	2300      	movs	r3, #0
}
   12256:	1c18      	adds	r0, r3, #0
   12258:	46bd      	mov	sp, r7
   1225a:	b004      	add	sp, #16
   1225c:	bd80      	pop	{r7, pc}
   1225e:	46c0      	nop			; (mov r8, r8)

00012260 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12260:	b590      	push	{r4, r7, lr}
   12262:	b087      	sub	sp, #28
   12264:	af00      	add	r7, sp, #0
   12266:	6078      	str	r0, [r7, #4]
   12268:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1226a:	687b      	ldr	r3, [r7, #4]
   1226c:	681b      	ldr	r3, [r3, #0]
   1226e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   12270:	1c3b      	adds	r3, r7, #0
   12272:	3314      	adds	r3, #20
   12274:	683a      	ldr	r2, [r7, #0]
   12276:	8852      	ldrh	r2, [r2, #2]
   12278:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   1227a:	1c3b      	adds	r3, r7, #0
   1227c:	3312      	adds	r3, #18
   1227e:	2200      	movs	r2, #0
   12280:	801a      	strh	r2, [r3, #0]

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
   12282:	683b      	ldr	r3, [r7, #0]
   12284:	881b      	ldrh	r3, [r3, #0]
   12286:	005b      	lsls	r3, r3, #1
   12288:	b2db      	uxtb	r3, r3
   1228a:	2201      	movs	r2, #1
   1228c:	4313      	orrs	r3, r2
   1228e:	b2db      	uxtb	r3, r3
   12290:	b2da      	uxtb	r2, r3
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   12296:	1c3c      	adds	r4, r7, #0
   12298:	3417      	adds	r4, #23
   1229a:	687b      	ldr	r3, [r7, #4]
   1229c:	1c18      	adds	r0, r3, #0
   1229e:	4b40      	ldr	r3, [pc, #256]	; (123a0 <_i2c_master_read_packet+0x140>)
   122a0:	4798      	blx	r3
   122a2:	1c03      	adds	r3, r0, #0
   122a4:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   122a6:	68fb      	ldr	r3, [r7, #12]
   122a8:	685a      	ldr	r2, [r3, #4]
   122aa:	4b3e      	ldr	r3, [pc, #248]	; (123a4 <_i2c_master_read_packet+0x144>)
   122ac:	401a      	ands	r2, r3
   122ae:	68fb      	ldr	r3, [r7, #12]
   122b0:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   122b2:	1c3b      	adds	r3, r7, #0
   122b4:	3317      	adds	r3, #23
   122b6:	781b      	ldrb	r3, [r3, #0]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d107      	bne.n	122cc <_i2c_master_read_packet+0x6c>
		tmp_status = _i2c_master_address_response(module);
   122bc:	1c3c      	adds	r4, r7, #0
   122be:	3417      	adds	r4, #23
   122c0:	687b      	ldr	r3, [r7, #4]
   122c2:	1c18      	adds	r0, r3, #0
   122c4:	4b38      	ldr	r3, [pc, #224]	; (123a8 <_i2c_master_read_packet+0x148>)
   122c6:	4798      	blx	r3
   122c8:	1c03      	adds	r3, r0, #0
   122ca:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   122cc:	1c3b      	adds	r3, r7, #0
   122ce:	3317      	adds	r3, #23
   122d0:	781b      	ldrb	r3, [r3, #0]
   122d2:	2b00      	cmp	r3, #0
   122d4:	d15c      	bne.n	12390 <_i2c_master_read_packet+0x130>
		/* Read data buffer. */
		while (tmp_data_length--) {
   122d6:	e035      	b.n	12344 <_i2c_master_read_packet+0xe4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   122d8:	68fb      	ldr	r3, [r7, #12]
   122da:	8a1b      	ldrh	r3, [r3, #16]
   122dc:	b29b      	uxth	r3, r3
   122de:	1c1a      	adds	r2, r3, #0
   122e0:	2320      	movs	r3, #32
   122e2:	4013      	ands	r3, r2
   122e4:	d101      	bne.n	122ea <_i2c_master_read_packet+0x8a>
				return STATUS_ERR_PACKET_COLLISION;
   122e6:	2341      	movs	r3, #65	; 0x41
   122e8:	e055      	b.n	12396 <_i2c_master_read_packet+0x136>
			}

			if (tmp_data_length == 0) {
   122ea:	1c3b      	adds	r3, r7, #0
   122ec:	3314      	adds	r3, #20
   122ee:	881b      	ldrh	r3, [r3, #0]
   122f0:	2b00      	cmp	r3, #0
   122f2:	d107      	bne.n	12304 <_i2c_master_read_packet+0xa4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   122f4:	68fb      	ldr	r3, [r7, #12]
   122f6:	685b      	ldr	r3, [r3, #4]
   122f8:	2280      	movs	r2, #128	; 0x80
   122fa:	02d2      	lsls	r2, r2, #11
   122fc:	431a      	orrs	r2, r3
   122fe:	68fb      	ldr	r3, [r7, #12]
   12300:	605a      	str	r2, [r3, #4]
   12302:	e019      	b.n	12338 <_i2c_master_read_packet+0xd8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   12304:	687b      	ldr	r3, [r7, #4]
   12306:	1c18      	adds	r0, r3, #0
   12308:	4b28      	ldr	r3, [pc, #160]	; (123ac <_i2c_master_read_packet+0x14c>)
   1230a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   1230c:	683b      	ldr	r3, [r7, #0]
   1230e:	685a      	ldr	r2, [r3, #4]
   12310:	1c3b      	adds	r3, r7, #0
   12312:	3312      	adds	r3, #18
   12314:	881b      	ldrh	r3, [r3, #0]
   12316:	1c39      	adds	r1, r7, #0
   12318:	3112      	adds	r1, #18
   1231a:	1c58      	adds	r0, r3, #1
   1231c:	8008      	strh	r0, [r1, #0]
   1231e:	18d3      	adds	r3, r2, r3
   12320:	68fa      	ldr	r2, [r7, #12]
   12322:	7e12      	ldrb	r2, [r2, #24]
   12324:	b2d2      	uxtb	r2, r2
   12326:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   12328:	1c3c      	adds	r4, r7, #0
   1232a:	3417      	adds	r4, #23
   1232c:	687b      	ldr	r3, [r7, #4]
   1232e:	1c18      	adds	r0, r3, #0
   12330:	4b1b      	ldr	r3, [pc, #108]	; (123a0 <_i2c_master_read_packet+0x140>)
   12332:	4798      	blx	r3
   12334:	1c03      	adds	r3, r0, #0
   12336:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   12338:	1c3b      	adds	r3, r7, #0
   1233a:	3317      	adds	r3, #23
   1233c:	781b      	ldrb	r3, [r3, #0]
   1233e:	2b00      	cmp	r3, #0
   12340:	d000      	beq.n	12344 <_i2c_master_read_packet+0xe4>
				break;
   12342:	e008      	b.n	12356 <_i2c_master_read_packet+0xf6>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
   12344:	1c3b      	adds	r3, r7, #0
   12346:	3314      	adds	r3, #20
   12348:	881b      	ldrh	r3, [r3, #0]
   1234a:	1c3a      	adds	r2, r7, #0
   1234c:	3214      	adds	r2, #20
   1234e:	1e59      	subs	r1, r3, #1
   12350:	8011      	strh	r1, [r2, #0]
   12352:	2b00      	cmp	r3, #0
   12354:	d1c0      	bne.n	122d8 <_i2c_master_read_packet+0x78>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
   12356:	687b      	ldr	r3, [r7, #4]
   12358:	7a9b      	ldrb	r3, [r3, #10]
   1235a:	2b00      	cmp	r3, #0
   1235c:	d00a      	beq.n	12374 <_i2c_master_read_packet+0x114>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   1235e:	687b      	ldr	r3, [r7, #4]
   12360:	1c18      	adds	r0, r3, #0
   12362:	4b12      	ldr	r3, [pc, #72]	; (123ac <_i2c_master_read_packet+0x14c>)
   12364:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	685b      	ldr	r3, [r3, #4]
   1236a:	22c0      	movs	r2, #192	; 0xc0
   1236c:	0292      	lsls	r2, r2, #10
   1236e:	431a      	orrs	r2, r3
   12370:	68fb      	ldr	r3, [r7, #12]
   12372:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   12374:	687b      	ldr	r3, [r7, #4]
   12376:	1c18      	adds	r0, r3, #0
   12378:	4b0c      	ldr	r3, [pc, #48]	; (123ac <_i2c_master_read_packet+0x14c>)
   1237a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   1237c:	683b      	ldr	r3, [r7, #0]
   1237e:	685a      	ldr	r2, [r3, #4]
   12380:	1c3b      	adds	r3, r7, #0
   12382:	3312      	adds	r3, #18
   12384:	881b      	ldrh	r3, [r3, #0]
   12386:	18d3      	adds	r3, r2, r3
   12388:	68fa      	ldr	r2, [r7, #12]
   1238a:	7e12      	ldrb	r2, [r2, #24]
   1238c:	b2d2      	uxtb	r2, r2
   1238e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   12390:	1c3b      	adds	r3, r7, #0
   12392:	3317      	adds	r3, #23
   12394:	781b      	ldrb	r3, [r3, #0]
}
   12396:	1c18      	adds	r0, r3, #0
   12398:	46bd      	mov	sp, r7
   1239a:	b007      	add	sp, #28
   1239c:	bd90      	pop	{r4, r7, pc}
   1239e:	46c0      	nop			; (mov r8, r8)
   123a0:	00012201 	.word	0x00012201
   123a4:	fffbffff 	.word	0xfffbffff
   123a8:	000121a1 	.word	0x000121a1
   123ac:	00011efd 	.word	0x00011efd

000123b0 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   123b0:	b580      	push	{r7, lr}
   123b2:	b082      	sub	sp, #8
   123b4:	af00      	add	r7, sp, #0
   123b6:	6078      	str	r0, [r7, #4]
   123b8:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   123ba:	687b      	ldr	r3, [r7, #4]
   123bc:	2201      	movs	r2, #1
   123be:	729a      	strb	r2, [r3, #10]

	return _i2c_master_read_packet(module, packet);
   123c0:	687a      	ldr	r2, [r7, #4]
   123c2:	683b      	ldr	r3, [r7, #0]
   123c4:	1c10      	adds	r0, r2, #0
   123c6:	1c19      	adds	r1, r3, #0
   123c8:	4b03      	ldr	r3, [pc, #12]	; (123d8 <i2c_master_read_packet_wait+0x28>)
   123ca:	4798      	blx	r3
   123cc:	1c03      	adds	r3, r0, #0
}
   123ce:	1c18      	adds	r0, r3, #0
   123d0:	46bd      	mov	sp, r7
   123d2:	b002      	add	sp, #8
   123d4:	bd80      	pop	{r7, pc}
   123d6:	46c0      	nop			; (mov r8, r8)
   123d8:	00012261 	.word	0x00012261

000123dc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   123dc:	b590      	push	{r4, r7, lr}
   123de:	b087      	sub	sp, #28
   123e0:	af00      	add	r7, sp, #0
   123e2:	6078      	str	r0, [r7, #4]
   123e4:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   123e6:	687b      	ldr	r3, [r7, #4]
   123e8:	681b      	ldr	r3, [r3, #0]
   123ea:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   123ec:	1c3b      	adds	r3, r7, #0
   123ee:	3314      	adds	r3, #20
   123f0:	683a      	ldr	r2, [r7, #0]
   123f2:	8852      	ldrh	r2, [r2, #2]
   123f4:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   123f6:	687b      	ldr	r3, [r7, #4]
   123f8:	1c18      	adds	r0, r3, #0
   123fa:	4b3d      	ldr	r3, [pc, #244]	; (124f0 <_i2c_master_write_packet+0x114>)
   123fc:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
   123fe:	683b      	ldr	r3, [r7, #0]
   12400:	881b      	ldrh	r3, [r3, #0]
   12402:	b2db      	uxtb	r3, r3
   12404:	18db      	adds	r3, r3, r3
   12406:	b2da      	uxtb	r2, r3
   12408:	68fb      	ldr	r3, [r7, #12]
   1240a:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1240c:	1c3c      	adds	r4, r7, #0
   1240e:	3417      	adds	r4, #23
   12410:	687b      	ldr	r3, [r7, #4]
   12412:	1c18      	adds	r0, r3, #0
   12414:	4b37      	ldr	r3, [pc, #220]	; (124f4 <_i2c_master_write_packet+0x118>)
   12416:	4798      	blx	r3
   12418:	1c03      	adds	r3, r0, #0
   1241a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   1241c:	1c3b      	adds	r3, r7, #0
   1241e:	3317      	adds	r3, #23
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	2b00      	cmp	r3, #0
   12424:	d107      	bne.n	12436 <_i2c_master_write_packet+0x5a>
		tmp_status = _i2c_master_address_response(module);
   12426:	1c3c      	adds	r4, r7, #0
   12428:	3417      	adds	r4, #23
   1242a:	687b      	ldr	r3, [r7, #4]
   1242c:	1c18      	adds	r0, r3, #0
   1242e:	4b32      	ldr	r3, [pc, #200]	; (124f8 <_i2c_master_write_packet+0x11c>)
   12430:	4798      	blx	r3
   12432:	1c03      	adds	r3, r0, #0
   12434:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   12436:	1c3b      	adds	r3, r7, #0
   12438:	3317      	adds	r3, #23
   1243a:	781b      	ldrb	r3, [r3, #0]
   1243c:	2b00      	cmp	r3, #0
   1243e:	d150      	bne.n	124e2 <_i2c_master_write_packet+0x106>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   12440:	1c3b      	adds	r3, r7, #0
   12442:	3312      	adds	r3, #18
   12444:	2200      	movs	r2, #0
   12446:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   12448:	e033      	b.n	124b2 <_i2c_master_write_packet+0xd6>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   1244a:	68fb      	ldr	r3, [r7, #12]
   1244c:	8a1b      	ldrh	r3, [r3, #16]
   1244e:	b29b      	uxth	r3, r3
   12450:	1c1a      	adds	r2, r3, #0
   12452:	2320      	movs	r3, #32
   12454:	4013      	ands	r3, r2
   12456:	d101      	bne.n	1245c <_i2c_master_write_packet+0x80>
				return STATUS_ERR_PACKET_COLLISION;
   12458:	2341      	movs	r3, #65	; 0x41
   1245a:	e045      	b.n	124e8 <_i2c_master_write_packet+0x10c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   1245c:	687b      	ldr	r3, [r7, #4]
   1245e:	1c18      	adds	r0, r3, #0
   12460:	4b23      	ldr	r3, [pc, #140]	; (124f0 <_i2c_master_write_packet+0x114>)
   12462:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   12464:	683b      	ldr	r3, [r7, #0]
   12466:	685a      	ldr	r2, [r3, #4]
   12468:	1c3b      	adds	r3, r7, #0
   1246a:	3312      	adds	r3, #18
   1246c:	881b      	ldrh	r3, [r3, #0]
   1246e:	1c39      	adds	r1, r7, #0
   12470:	3112      	adds	r1, #18
   12472:	1c58      	adds	r0, r3, #1
   12474:	8008      	strh	r0, [r1, #0]
   12476:	18d3      	adds	r3, r2, r3
   12478:	781a      	ldrb	r2, [r3, #0]
   1247a:	68fb      	ldr	r3, [r7, #12]
   1247c:	761a      	strb	r2, [r3, #24]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   1247e:	1c3c      	adds	r4, r7, #0
   12480:	3417      	adds	r4, #23
   12482:	687b      	ldr	r3, [r7, #4]
   12484:	1c18      	adds	r0, r3, #0
   12486:	4b1b      	ldr	r3, [pc, #108]	; (124f4 <_i2c_master_write_packet+0x118>)
   12488:	4798      	blx	r3
   1248a:	1c03      	adds	r3, r0, #0
   1248c:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   1248e:	1c3b      	adds	r3, r7, #0
   12490:	3317      	adds	r3, #23
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	2b00      	cmp	r3, #0
   12496:	d000      	beq.n	1249a <_i2c_master_write_packet+0xbe>
				break;
   12498:	e014      	b.n	124c4 <_i2c_master_write_packet+0xe8>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1249a:	68fb      	ldr	r3, [r7, #12]
   1249c:	8a1b      	ldrh	r3, [r3, #16]
   1249e:	b29b      	uxth	r3, r3
   124a0:	1c1a      	adds	r2, r3, #0
   124a2:	2304      	movs	r3, #4
   124a4:	4013      	ands	r3, r2
   124a6:	d004      	beq.n	124b2 <_i2c_master_write_packet+0xd6>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   124a8:	1c3b      	adds	r3, r7, #0
   124aa:	3317      	adds	r3, #23
   124ac:	221e      	movs	r2, #30
   124ae:	701a      	strb	r2, [r3, #0]
				break;
   124b0:	e008      	b.n	124c4 <_i2c_master_write_packet+0xe8>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
   124b2:	1c3b      	adds	r3, r7, #0
   124b4:	3314      	adds	r3, #20
   124b6:	881b      	ldrh	r3, [r3, #0]
   124b8:	1c3a      	adds	r2, r7, #0
   124ba:	3214      	adds	r2, #20
   124bc:	1e59      	subs	r1, r3, #1
   124be:	8011      	strh	r1, [r2, #0]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d1c2      	bne.n	1244a <_i2c_master_write_packet+0x6e>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
   124c4:	687b      	ldr	r3, [r7, #4]
   124c6:	7a9b      	ldrb	r3, [r3, #10]
   124c8:	2b00      	cmp	r3, #0
   124ca:	d00a      	beq.n	124e2 <_i2c_master_write_packet+0x106>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1c18      	adds	r0, r3, #0
   124d0:	4b07      	ldr	r3, [pc, #28]	; (124f0 <_i2c_master_write_packet+0x114>)
   124d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   124d4:	68fb      	ldr	r3, [r7, #12]
   124d6:	685b      	ldr	r3, [r3, #4]
   124d8:	22c0      	movs	r2, #192	; 0xc0
   124da:	0292      	lsls	r2, r2, #10
   124dc:	431a      	orrs	r2, r3
   124de:	68fb      	ldr	r3, [r7, #12]
   124e0:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   124e2:	1c3b      	adds	r3, r7, #0
   124e4:	3317      	adds	r3, #23
   124e6:	781b      	ldrb	r3, [r3, #0]
}
   124e8:	1c18      	adds	r0, r3, #0
   124ea:	46bd      	mov	sp, r7
   124ec:	b007      	add	sp, #28
   124ee:	bd90      	pop	{r4, r7, pc}
   124f0:	00011efd 	.word	0x00011efd
   124f4:	00012201 	.word	0x00012201
   124f8:	000121a1 	.word	0x000121a1

000124fc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   124fc:	b580      	push	{r7, lr}
   124fe:	b082      	sub	sp, #8
   12500:	af00      	add	r7, sp, #0
   12502:	6078      	str	r0, [r7, #4]
   12504:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   12506:	687b      	ldr	r3, [r7, #4]
   12508:	2201      	movs	r2, #1
   1250a:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
   1250c:	687a      	ldr	r2, [r7, #4]
   1250e:	683b      	ldr	r3, [r7, #0]
   12510:	1c10      	adds	r0, r2, #0
   12512:	1c19      	adds	r1, r3, #0
   12514:	4b03      	ldr	r3, [pc, #12]	; (12524 <i2c_master_write_packet_wait+0x28>)
   12516:	4798      	blx	r3
   12518:	1c03      	adds	r3, r0, #0
}
   1251a:	1c18      	adds	r0, r3, #0
   1251c:	46bd      	mov	sp, r7
   1251e:	b002      	add	sp, #8
   12520:	bd80      	pop	{r7, pc}
   12522:	46c0      	nop			; (mov r8, r8)
   12524:	000123dd 	.word	0x000123dd

00012528 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12528:	b580      	push	{r7, lr}
   1252a:	b082      	sub	sp, #8
   1252c:	af00      	add	r7, sp, #0
   1252e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12530:	687b      	ldr	r3, [r7, #4]
   12532:	2200      	movs	r2, #0
   12534:	701a      	strb	r2, [r3, #0]
}
   12536:	46bd      	mov	sp, r7
   12538:	b002      	add	sp, #8
   1253a:	bd80      	pop	{r7, pc}

0001253c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1253c:	b580      	push	{r7, lr}
   1253e:	b086      	sub	sp, #24
   12540:	af00      	add	r7, sp, #0
   12542:	60f8      	str	r0, [r7, #12]
   12544:	60b9      	str	r1, [r7, #8]
   12546:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   12548:	1c3b      	adds	r3, r7, #0
   1254a:	3316      	adds	r3, #22
   1254c:	2200      	movs	r2, #0
   1254e:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
   12550:	68bb      	ldr	r3, [r7, #8]
   12552:	085a      	lsrs	r2, r3, #1
   12554:	68fb      	ldr	r3, [r7, #12]
   12556:	429a      	cmp	r2, r3
   12558:	d201      	bcs.n	1255e <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1255a:	2340      	movs	r3, #64	; 0x40
   1255c:	e018      	b.n	12590 <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
   1255e:	68fb      	ldr	r3, [r7, #12]
   12560:	005a      	lsls	r2, r3, #1
   12562:	4b0d      	ldr	r3, [pc, #52]	; (12598 <_sercom_get_sync_baud_val+0x5c>)
   12564:	68b8      	ldr	r0, [r7, #8]
   12566:	1c11      	adds	r1, r2, #0
   12568:	4798      	blx	r3
   1256a:	1c03      	adds	r3, r0, #0
   1256c:	b29a      	uxth	r2, r3
   1256e:	1c3b      	adds	r3, r7, #0
   12570:	3316      	adds	r3, #22
   12572:	3a01      	subs	r2, #1
   12574:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   12576:	1c3b      	adds	r3, r7, #0
   12578:	3316      	adds	r3, #22
   1257a:	881b      	ldrh	r3, [r3, #0]
   1257c:	2bff      	cmp	r3, #255	; 0xff
   1257e:	d901      	bls.n	12584 <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12580:	2340      	movs	r3, #64	; 0x40
   12582:	e005      	b.n	12590 <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
   12584:	687b      	ldr	r3, [r7, #4]
   12586:	1c3a      	adds	r2, r7, #0
   12588:	3216      	adds	r2, #22
   1258a:	8812      	ldrh	r2, [r2, #0]
   1258c:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1258e:	2300      	movs	r3, #0
	}
}
   12590:	1c18      	adds	r0, r3, #0
   12592:	46bd      	mov	sp, r7
   12594:	b006      	add	sp, #24
   12596:	bd80      	pop	{r7, pc}
   12598:	000157d9 	.word	0x000157d9
   1259c:	00000000 	.word	0x00000000

000125a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   125a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125a2:	b09d      	sub	sp, #116	; 0x74
   125a4:	af00      	add	r7, sp, #0
   125a6:	64f8      	str	r0, [r7, #76]	; 0x4c
   125a8:	64b9      	str	r1, [r7, #72]	; 0x48
   125aa:	647a      	str	r2, [r7, #68]	; 0x44
   125ac:	1c3a      	adds	r2, r7, #0
   125ae:	3243      	adds	r2, #67	; 0x43
   125b0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   125b2:	2300      	movs	r3, #0
   125b4:	2400      	movs	r4, #0
   125b6:	65bb      	str	r3, [r7, #88]	; 0x58
   125b8:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
   125ba:	2300      	movs	r3, #0
   125bc:	2400      	movs	r4, #0
   125be:	653b      	str	r3, [r7, #80]	; 0x50
   125c0:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
   125c2:	2300      	movs	r3, #0
   125c4:	2400      	movs	r4, #0
   125c6:	66bb      	str	r3, [r7, #104]	; 0x68
   125c8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
   125ca:	1c3b      	adds	r3, r7, #0
   125cc:	3388      	adds	r3, #136	; 0x88
   125ce:	781a      	ldrb	r2, [r3, #0]
   125d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   125d2:	435a      	muls	r2, r3
   125d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   125d6:	429a      	cmp	r2, r3
   125d8:	d301      	bcc.n	125de <_sercom_get_async_baud_val+0x3e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   125da:	2340      	movs	r3, #64	; 0x40
   125dc:	e0a6      	b.n	1272c <_sercom_get_async_baud_val+0x18c>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   125de:	1c3b      	adds	r3, r7, #0
   125e0:	3343      	adds	r3, #67	; 0x43
   125e2:	781b      	ldrb	r3, [r3, #0]
   125e4:	2b00      	cmp	r3, #0
   125e6:	d13c      	bne.n	12662 <_sercom_get_async_baud_val+0xc2>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
   125e8:	1c3b      	adds	r3, r7, #0
   125ea:	3388      	adds	r3, #136	; 0x88
   125ec:	781b      	ldrb	r3, [r3, #0]
   125ee:	b2db      	uxtb	r3, r3
   125f0:	63bb      	str	r3, [r7, #56]	; 0x38
   125f2:	2300      	movs	r3, #0
   125f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   125f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   125f8:	633b      	str	r3, [r7, #48]	; 0x30
   125fa:	2300      	movs	r3, #0
   125fc:	637b      	str	r3, [r7, #52]	; 0x34
   125fe:	4c50      	ldr	r4, [pc, #320]	; (12740 <_sercom_get_async_baud_val+0x1a0>)
   12600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12608:	47a0      	blx	r4
   1260a:	1c03      	adds	r3, r0, #0
   1260c:	1c0c      	adds	r4, r1, #0
   1260e:	001a      	movs	r2, r3
   12610:	62fa      	str	r2, [r7, #44]	; 0x2c
   12612:	2300      	movs	r3, #0
   12614:	62bb      	str	r3, [r7, #40]	; 0x28
   12616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12618:	623b      	str	r3, [r7, #32]
   1261a:	2300      	movs	r3, #0
   1261c:	627b      	str	r3, [r7, #36]	; 0x24
   1261e:	4c49      	ldr	r4, [pc, #292]	; (12744 <_sercom_get_async_baud_val+0x1a4>)
   12620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12624:	6a3a      	ldr	r2, [r7, #32]
   12626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12628:	47a0      	blx	r4
   1262a:	1c03      	adds	r3, r0, #0
   1262c:	1c0c      	adds	r4, r1, #0
   1262e:	65bb      	str	r3, [r7, #88]	; 0x58
   12630:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
   12632:	4a42      	ldr	r2, [pc, #264]	; (1273c <_sercom_get_async_baud_val+0x19c>)
   12634:	4940      	ldr	r1, [pc, #256]	; (12738 <_sercom_get_async_baud_val+0x198>)
   12636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12638:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1263a:	1c0d      	adds	r5, r1, #0
   1263c:	1c16      	adds	r6, r2, #0
   1263e:	1aed      	subs	r5, r5, r3
   12640:	41a6      	sbcs	r6, r4
   12642:	1c2b      	adds	r3, r5, #0
   12644:	1c34      	adds	r4, r6, #0
   12646:	653b      	str	r3, [r7, #80]	; 0x50
   12648:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
   1264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1264c:	0c1b      	lsrs	r3, r3, #16
   1264e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   12650:	0416      	lsls	r6, r2, #16
   12652:	431e      	orrs	r6, r3
   12654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12656:	041d      	lsls	r5, r3, #16
   12658:	0033      	movs	r3, r6
   1265a:	66bb      	str	r3, [r7, #104]	; 0x68
   1265c:	2300      	movs	r3, #0
   1265e:	66fb      	str	r3, [r7, #108]	; 0x6c
   12660:	e05e      	b.n	12720 <_sercom_get_async_baud_val+0x180>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   12662:	1c3b      	adds	r3, r7, #0
   12664:	3343      	adds	r3, #67	; 0x43
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	2b01      	cmp	r3, #1
   1266a:	d159      	bne.n	12720 <_sercom_get_async_baud_val+0x180>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   1266c:	1c3b      	adds	r3, r7, #0
   1266e:	3367      	adds	r3, #103	; 0x67
   12670:	2200      	movs	r2, #0
   12672:	701a      	strb	r2, [r3, #0]
   12674:	e03e      	b.n	126f4 <_sercom_get_async_baud_val+0x154>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
   12676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12678:	61bb      	str	r3, [r7, #24]
   1267a:	2300      	movs	r3, #0
   1267c:	61fb      	str	r3, [r7, #28]
   1267e:	69be      	ldr	r6, [r7, #24]
   12680:	0f73      	lsrs	r3, r6, #29
   12682:	69fa      	ldr	r2, [r7, #28]
   12684:	00d2      	lsls	r2, r2, #3
   12686:	617a      	str	r2, [r7, #20]
   12688:	697d      	ldr	r5, [r7, #20]
   1268a:	431d      	orrs	r5, r3
   1268c:	617d      	str	r5, [r7, #20]
   1268e:	69be      	ldr	r6, [r7, #24]
   12690:	00f6      	lsls	r6, r6, #3
   12692:	613e      	str	r6, [r7, #16]
   12694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12696:	60bb      	str	r3, [r7, #8]
   12698:	2300      	movs	r3, #0
   1269a:	60fb      	str	r3, [r7, #12]
   1269c:	1c3b      	adds	r3, r7, #0
   1269e:	3388      	adds	r3, #136	; 0x88
   126a0:	781b      	ldrb	r3, [r3, #0]
   126a2:	b2db      	uxtb	r3, r3
   126a4:	603b      	str	r3, [r7, #0]
   126a6:	2300      	movs	r3, #0
   126a8:	607b      	str	r3, [r7, #4]
   126aa:	4c25      	ldr	r4, [pc, #148]	; (12740 <_sercom_get_async_baud_val+0x1a0>)
   126ac:	68b8      	ldr	r0, [r7, #8]
   126ae:	68f9      	ldr	r1, [r7, #12]
   126b0:	683a      	ldr	r2, [r7, #0]
   126b2:	687b      	ldr	r3, [r7, #4]
   126b4:	47a0      	blx	r4
   126b6:	1c03      	adds	r3, r0, #0
   126b8:	1c0c      	adds	r4, r1, #0
   126ba:	4d22      	ldr	r5, [pc, #136]	; (12744 <_sercom_get_async_baud_val+0x1a4>)
   126bc:	6938      	ldr	r0, [r7, #16]
   126be:	6979      	ldr	r1, [r7, #20]
   126c0:	1c1a      	adds	r2, r3, #0
   126c2:	1c23      	adds	r3, r4, #0
   126c4:	47a8      	blx	r5
   126c6:	1c03      	adds	r3, r0, #0
   126c8:	1c0c      	adds	r4, r1, #0
   126ca:	1c1a      	adds	r2, r3, #0
   126cc:	1c3b      	adds	r3, r7, #0
   126ce:	3367      	adds	r3, #103	; 0x67
   126d0:	781b      	ldrb	r3, [r3, #0]
   126d2:	1ad3      	subs	r3, r2, r3
   126d4:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
   126d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   126d8:	08db      	lsrs	r3, r3, #3
   126da:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
   126dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   126de:	4b1a      	ldr	r3, [pc, #104]	; (12748 <_sercom_get_async_baud_val+0x1a8>)
   126e0:	429a      	cmp	r2, r3
   126e2:	d800      	bhi.n	126e6 <_sercom_get_async_baud_val+0x146>
				break;
   126e4:	e00b      	b.n	126fe <_sercom_get_async_baud_val+0x15e>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   126e6:	1c3b      	adds	r3, r7, #0
   126e8:	3367      	adds	r3, #103	; 0x67
   126ea:	781a      	ldrb	r2, [r3, #0]
   126ec:	1c3b      	adds	r3, r7, #0
   126ee:	3367      	adds	r3, #103	; 0x67
   126f0:	3201      	adds	r2, #1
   126f2:	701a      	strb	r2, [r3, #0]
   126f4:	1c3b      	adds	r3, r7, #0
   126f6:	3367      	adds	r3, #103	; 0x67
   126f8:	781b      	ldrb	r3, [r3, #0]
   126fa:	2b07      	cmp	r3, #7
   126fc:	d9bb      	bls.n	12676 <_sercom_get_async_baud_val+0xd6>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
   126fe:	1c3b      	adds	r3, r7, #0
   12700:	3367      	adds	r3, #103	; 0x67
   12702:	781b      	ldrb	r3, [r3, #0]
   12704:	2b08      	cmp	r3, #8
   12706:	d101      	bne.n	1270c <_sercom_get_async_baud_val+0x16c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12708:	2340      	movs	r3, #64	; 0x40
   1270a:	e00f      	b.n	1272c <_sercom_get_async_baud_val+0x18c>
		}
		baud_calculated = baud_int | (baud_fp << 13);
   1270c:	1c3b      	adds	r3, r7, #0
   1270e:	3367      	adds	r3, #103	; 0x67
   12710:	781b      	ldrb	r3, [r3, #0]
   12712:	035b      	lsls	r3, r3, #13
   12714:	1c1a      	adds	r2, r3, #0
   12716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   12718:	4313      	orrs	r3, r2
   1271a:	66bb      	str	r3, [r7, #104]	; 0x68
   1271c:	2300      	movs	r3, #0
   1271e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
   12720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12722:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   12724:	b29a      	uxth	r2, r3
   12726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12728:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1272a:	2300      	movs	r3, #0
}
   1272c:	1c18      	adds	r0, r3, #0
   1272e:	46bd      	mov	sp, r7
   12730:	b01d      	add	sp, #116	; 0x74
   12732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12734:	46c0      	nop			; (mov r8, r8)
   12736:	46c0      	nop			; (mov r8, r8)
   12738:	00000000 	.word	0x00000000
   1273c:	00000001 	.word	0x00000001
   12740:	000159f5 	.word	0x000159f5
   12744:	000159b5 	.word	0x000159b5
   12748:	00001fff 	.word	0x00001fff
   1274c:	46c0      	nop			; (mov r8, r8)
   1274e:	46c0      	nop			; (mov r8, r8)

00012750 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   12750:	b580      	push	{r7, lr}
   12752:	b084      	sub	sp, #16
   12754:	af00      	add	r7, sp, #0
   12756:	1c0a      	adds	r2, r1, #0
   12758:	1dfb      	adds	r3, r7, #7
   1275a:	1c01      	adds	r1, r0, #0
   1275c:	7019      	strb	r1, [r3, #0]
   1275e:	1dbb      	adds	r3, r7, #6
   12760:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
   12762:	4b1a      	ldr	r3, [pc, #104]	; (127cc <sercom_set_gclk_generator+0x7c>)
   12764:	781b      	ldrb	r3, [r3, #0]
   12766:	2201      	movs	r2, #1
   12768:	4053      	eors	r3, r2
   1276a:	b2db      	uxtb	r3, r3
   1276c:	2b00      	cmp	r3, #0
   1276e:	d103      	bne.n	12778 <sercom_set_gclk_generator+0x28>
   12770:	1dbb      	adds	r3, r7, #6
   12772:	781b      	ldrb	r3, [r3, #0]
   12774:	2b00      	cmp	r3, #0
   12776:	d01b      	beq.n	127b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12778:	1c3b      	adds	r3, r7, #0
   1277a:	330c      	adds	r3, #12
   1277c:	1c18      	adds	r0, r3, #0
   1277e:	4b14      	ldr	r3, [pc, #80]	; (127d0 <sercom_set_gclk_generator+0x80>)
   12780:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   12782:	1c3b      	adds	r3, r7, #0
   12784:	330c      	adds	r3, #12
   12786:	1dfa      	adds	r2, r7, #7
   12788:	7812      	ldrb	r2, [r2, #0]
   1278a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1278c:	1c3b      	adds	r3, r7, #0
   1278e:	330c      	adds	r3, #12
   12790:	200c      	movs	r0, #12
   12792:	1c19      	adds	r1, r3, #0
   12794:	4b0f      	ldr	r3, [pc, #60]	; (127d4 <sercom_set_gclk_generator+0x84>)
   12796:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   12798:	200c      	movs	r0, #12
   1279a:	4b0f      	ldr	r3, [pc, #60]	; (127d8 <sercom_set_gclk_generator+0x88>)
   1279c:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
   1279e:	4b0b      	ldr	r3, [pc, #44]	; (127cc <sercom_set_gclk_generator+0x7c>)
   127a0:	1dfa      	adds	r2, r7, #7
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   127a6:	4b09      	ldr	r3, [pc, #36]	; (127cc <sercom_set_gclk_generator+0x7c>)
   127a8:	2201      	movs	r2, #1
   127aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   127ac:	2300      	movs	r3, #0
   127ae:	e008      	b.n	127c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   127b0:	4b06      	ldr	r3, [pc, #24]	; (127cc <sercom_set_gclk_generator+0x7c>)
   127b2:	785b      	ldrb	r3, [r3, #1]
   127b4:	1dfa      	adds	r2, r7, #7
   127b6:	7812      	ldrb	r2, [r2, #0]
   127b8:	429a      	cmp	r2, r3
   127ba:	d101      	bne.n	127c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
   127bc:	2300      	movs	r3, #0
   127be:	e000      	b.n	127c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
   127c0:	231d      	movs	r3, #29
}
   127c2:	1c18      	adds	r0, r3, #0
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	20000504 	.word	0x20000504
   127d0:	00012529 	.word	0x00012529
   127d4:	00014041 	.word	0x00014041
   127d8:	00014081 	.word	0x00014081

000127dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   127dc:	b580      	push	{r7, lr}
   127de:	b082      	sub	sp, #8
   127e0:	af00      	add	r7, sp, #0
   127e2:	6078      	str	r0, [r7, #4]
   127e4:	1c0a      	adds	r2, r1, #0
   127e6:	1cfb      	adds	r3, r7, #3
   127e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   127ea:	687b      	ldr	r3, [r7, #4]
   127ec:	4a4d      	ldr	r2, [pc, #308]	; (12924 <_sercom_get_default_pad+0x148>)
   127ee:	4293      	cmp	r3, r2
   127f0:	d03f      	beq.n	12872 <_sercom_get_default_pad+0x96>
   127f2:	4a4c      	ldr	r2, [pc, #304]	; (12924 <_sercom_get_default_pad+0x148>)
   127f4:	4293      	cmp	r3, r2
   127f6:	d806      	bhi.n	12806 <_sercom_get_default_pad+0x2a>
   127f8:	4a4b      	ldr	r2, [pc, #300]	; (12928 <_sercom_get_default_pad+0x14c>)
   127fa:	4293      	cmp	r3, r2
   127fc:	d00f      	beq.n	1281e <_sercom_get_default_pad+0x42>
   127fe:	4a4b      	ldr	r2, [pc, #300]	; (1292c <_sercom_get_default_pad+0x150>)
   12800:	4293      	cmp	r3, r2
   12802:	d021      	beq.n	12848 <_sercom_get_default_pad+0x6c>
   12804:	e089      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12806:	4a4a      	ldr	r2, [pc, #296]	; (12930 <_sercom_get_default_pad+0x154>)
   12808:	4293      	cmp	r3, r2
   1280a:	d100      	bne.n	1280e <_sercom_get_default_pad+0x32>
   1280c:	e05b      	b.n	128c6 <_sercom_get_default_pad+0xea>
   1280e:	4a49      	ldr	r2, [pc, #292]	; (12934 <_sercom_get_default_pad+0x158>)
   12810:	4293      	cmp	r3, r2
   12812:	d100      	bne.n	12816 <_sercom_get_default_pad+0x3a>
   12814:	e06c      	b.n	128f0 <_sercom_get_default_pad+0x114>
   12816:	4a48      	ldr	r2, [pc, #288]	; (12938 <_sercom_get_default_pad+0x15c>)
   12818:	4293      	cmp	r3, r2
   1281a:	d03f      	beq.n	1289c <_sercom_get_default_pad+0xc0>
   1281c:	e07d      	b.n	1291a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1281e:	1cfb      	adds	r3, r7, #3
   12820:	781b      	ldrb	r3, [r3, #0]
   12822:	2b01      	cmp	r3, #1
   12824:	d00a      	beq.n	1283c <_sercom_get_default_pad+0x60>
   12826:	dc02      	bgt.n	1282e <_sercom_get_default_pad+0x52>
   12828:	2b00      	cmp	r3, #0
   1282a:	d005      	beq.n	12838 <_sercom_get_default_pad+0x5c>
   1282c:	e075      	b.n	1291a <_sercom_get_default_pad+0x13e>
   1282e:	2b02      	cmp	r3, #2
   12830:	d006      	beq.n	12840 <_sercom_get_default_pad+0x64>
   12832:	2b03      	cmp	r3, #3
   12834:	d006      	beq.n	12844 <_sercom_get_default_pad+0x68>
   12836:	e070      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12838:	4b40      	ldr	r3, [pc, #256]	; (1293c <_sercom_get_default_pad+0x160>)
   1283a:	e06f      	b.n	1291c <_sercom_get_default_pad+0x140>
   1283c:	4b40      	ldr	r3, [pc, #256]	; (12940 <_sercom_get_default_pad+0x164>)
   1283e:	e06d      	b.n	1291c <_sercom_get_default_pad+0x140>
   12840:	4b40      	ldr	r3, [pc, #256]	; (12944 <_sercom_get_default_pad+0x168>)
   12842:	e06b      	b.n	1291c <_sercom_get_default_pad+0x140>
   12844:	4b40      	ldr	r3, [pc, #256]	; (12948 <_sercom_get_default_pad+0x16c>)
   12846:	e069      	b.n	1291c <_sercom_get_default_pad+0x140>
   12848:	1cfb      	adds	r3, r7, #3
   1284a:	781b      	ldrb	r3, [r3, #0]
   1284c:	2b01      	cmp	r3, #1
   1284e:	d00a      	beq.n	12866 <_sercom_get_default_pad+0x8a>
   12850:	dc02      	bgt.n	12858 <_sercom_get_default_pad+0x7c>
   12852:	2b00      	cmp	r3, #0
   12854:	d005      	beq.n	12862 <_sercom_get_default_pad+0x86>
   12856:	e060      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12858:	2b02      	cmp	r3, #2
   1285a:	d006      	beq.n	1286a <_sercom_get_default_pad+0x8e>
   1285c:	2b03      	cmp	r3, #3
   1285e:	d006      	beq.n	1286e <_sercom_get_default_pad+0x92>
   12860:	e05b      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12862:	2303      	movs	r3, #3
   12864:	e05a      	b.n	1291c <_sercom_get_default_pad+0x140>
   12866:	4b39      	ldr	r3, [pc, #228]	; (1294c <_sercom_get_default_pad+0x170>)
   12868:	e058      	b.n	1291c <_sercom_get_default_pad+0x140>
   1286a:	4b39      	ldr	r3, [pc, #228]	; (12950 <_sercom_get_default_pad+0x174>)
   1286c:	e056      	b.n	1291c <_sercom_get_default_pad+0x140>
   1286e:	4b39      	ldr	r3, [pc, #228]	; (12954 <_sercom_get_default_pad+0x178>)
   12870:	e054      	b.n	1291c <_sercom_get_default_pad+0x140>
   12872:	1cfb      	adds	r3, r7, #3
   12874:	781b      	ldrb	r3, [r3, #0]
   12876:	2b01      	cmp	r3, #1
   12878:	d00a      	beq.n	12890 <_sercom_get_default_pad+0xb4>
   1287a:	dc02      	bgt.n	12882 <_sercom_get_default_pad+0xa6>
   1287c:	2b00      	cmp	r3, #0
   1287e:	d005      	beq.n	1288c <_sercom_get_default_pad+0xb0>
   12880:	e04b      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12882:	2b02      	cmp	r3, #2
   12884:	d006      	beq.n	12894 <_sercom_get_default_pad+0xb8>
   12886:	2b03      	cmp	r3, #3
   12888:	d006      	beq.n	12898 <_sercom_get_default_pad+0xbc>
   1288a:	e046      	b.n	1291a <_sercom_get_default_pad+0x13e>
   1288c:	4b32      	ldr	r3, [pc, #200]	; (12958 <_sercom_get_default_pad+0x17c>)
   1288e:	e045      	b.n	1291c <_sercom_get_default_pad+0x140>
   12890:	4b32      	ldr	r3, [pc, #200]	; (1295c <_sercom_get_default_pad+0x180>)
   12892:	e043      	b.n	1291c <_sercom_get_default_pad+0x140>
   12894:	4b32      	ldr	r3, [pc, #200]	; (12960 <_sercom_get_default_pad+0x184>)
   12896:	e041      	b.n	1291c <_sercom_get_default_pad+0x140>
   12898:	4b32      	ldr	r3, [pc, #200]	; (12964 <_sercom_get_default_pad+0x188>)
   1289a:	e03f      	b.n	1291c <_sercom_get_default_pad+0x140>
   1289c:	1cfb      	adds	r3, r7, #3
   1289e:	781b      	ldrb	r3, [r3, #0]
   128a0:	2b01      	cmp	r3, #1
   128a2:	d00a      	beq.n	128ba <_sercom_get_default_pad+0xde>
   128a4:	dc02      	bgt.n	128ac <_sercom_get_default_pad+0xd0>
   128a6:	2b00      	cmp	r3, #0
   128a8:	d005      	beq.n	128b6 <_sercom_get_default_pad+0xda>
   128aa:	e036      	b.n	1291a <_sercom_get_default_pad+0x13e>
   128ac:	2b02      	cmp	r3, #2
   128ae:	d006      	beq.n	128be <_sercom_get_default_pad+0xe2>
   128b0:	2b03      	cmp	r3, #3
   128b2:	d006      	beq.n	128c2 <_sercom_get_default_pad+0xe6>
   128b4:	e031      	b.n	1291a <_sercom_get_default_pad+0x13e>
   128b6:	4b2c      	ldr	r3, [pc, #176]	; (12968 <_sercom_get_default_pad+0x18c>)
   128b8:	e030      	b.n	1291c <_sercom_get_default_pad+0x140>
   128ba:	4b2c      	ldr	r3, [pc, #176]	; (1296c <_sercom_get_default_pad+0x190>)
   128bc:	e02e      	b.n	1291c <_sercom_get_default_pad+0x140>
   128be:	4b2c      	ldr	r3, [pc, #176]	; (12970 <_sercom_get_default_pad+0x194>)
   128c0:	e02c      	b.n	1291c <_sercom_get_default_pad+0x140>
   128c2:	4b2c      	ldr	r3, [pc, #176]	; (12974 <_sercom_get_default_pad+0x198>)
   128c4:	e02a      	b.n	1291c <_sercom_get_default_pad+0x140>
   128c6:	1cfb      	adds	r3, r7, #3
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	2b01      	cmp	r3, #1
   128cc:	d00a      	beq.n	128e4 <_sercom_get_default_pad+0x108>
   128ce:	dc02      	bgt.n	128d6 <_sercom_get_default_pad+0xfa>
   128d0:	2b00      	cmp	r3, #0
   128d2:	d005      	beq.n	128e0 <_sercom_get_default_pad+0x104>
   128d4:	e021      	b.n	1291a <_sercom_get_default_pad+0x13e>
   128d6:	2b02      	cmp	r3, #2
   128d8:	d006      	beq.n	128e8 <_sercom_get_default_pad+0x10c>
   128da:	2b03      	cmp	r3, #3
   128dc:	d006      	beq.n	128ec <_sercom_get_default_pad+0x110>
   128de:	e01c      	b.n	1291a <_sercom_get_default_pad+0x13e>
   128e0:	4b25      	ldr	r3, [pc, #148]	; (12978 <_sercom_get_default_pad+0x19c>)
   128e2:	e01b      	b.n	1291c <_sercom_get_default_pad+0x140>
   128e4:	4b25      	ldr	r3, [pc, #148]	; (1297c <_sercom_get_default_pad+0x1a0>)
   128e6:	e019      	b.n	1291c <_sercom_get_default_pad+0x140>
   128e8:	4b25      	ldr	r3, [pc, #148]	; (12980 <_sercom_get_default_pad+0x1a4>)
   128ea:	e017      	b.n	1291c <_sercom_get_default_pad+0x140>
   128ec:	4b25      	ldr	r3, [pc, #148]	; (12984 <_sercom_get_default_pad+0x1a8>)
   128ee:	e015      	b.n	1291c <_sercom_get_default_pad+0x140>
   128f0:	1cfb      	adds	r3, r7, #3
   128f2:	781b      	ldrb	r3, [r3, #0]
   128f4:	2b01      	cmp	r3, #1
   128f6:	d00a      	beq.n	1290e <_sercom_get_default_pad+0x132>
   128f8:	dc02      	bgt.n	12900 <_sercom_get_default_pad+0x124>
   128fa:	2b00      	cmp	r3, #0
   128fc:	d005      	beq.n	1290a <_sercom_get_default_pad+0x12e>
   128fe:	e00c      	b.n	1291a <_sercom_get_default_pad+0x13e>
   12900:	2b02      	cmp	r3, #2
   12902:	d006      	beq.n	12912 <_sercom_get_default_pad+0x136>
   12904:	2b03      	cmp	r3, #3
   12906:	d006      	beq.n	12916 <_sercom_get_default_pad+0x13a>
   12908:	e007      	b.n	1291a <_sercom_get_default_pad+0x13e>
   1290a:	4b1f      	ldr	r3, [pc, #124]	; (12988 <_sercom_get_default_pad+0x1ac>)
   1290c:	e006      	b.n	1291c <_sercom_get_default_pad+0x140>
   1290e:	4b1f      	ldr	r3, [pc, #124]	; (1298c <_sercom_get_default_pad+0x1b0>)
   12910:	e004      	b.n	1291c <_sercom_get_default_pad+0x140>
   12912:	4b1f      	ldr	r3, [pc, #124]	; (12990 <_sercom_get_default_pad+0x1b4>)
   12914:	e002      	b.n	1291c <_sercom_get_default_pad+0x140>
   12916:	4b1f      	ldr	r3, [pc, #124]	; (12994 <_sercom_get_default_pad+0x1b8>)
   12918:	e000      	b.n	1291c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1291a:	2300      	movs	r3, #0
}
   1291c:	1c18      	adds	r0, r3, #0
   1291e:	46bd      	mov	sp, r7
   12920:	b002      	add	sp, #8
   12922:	bd80      	pop	{r7, pc}
   12924:	42001000 	.word	0x42001000
   12928:	42000800 	.word	0x42000800
   1292c:	42000c00 	.word	0x42000c00
   12930:	42001800 	.word	0x42001800
   12934:	42001c00 	.word	0x42001c00
   12938:	42001400 	.word	0x42001400
   1293c:	00040003 	.word	0x00040003
   12940:	00050003 	.word	0x00050003
   12944:	00060003 	.word	0x00060003
   12948:	00070003 	.word	0x00070003
   1294c:	00010003 	.word	0x00010003
   12950:	001e0003 	.word	0x001e0003
   12954:	001f0003 	.word	0x001f0003
   12958:	00080003 	.word	0x00080003
   1295c:	00090003 	.word	0x00090003
   12960:	000a0003 	.word	0x000a0003
   12964:	000b0003 	.word	0x000b0003
   12968:	00100003 	.word	0x00100003
   1296c:	00110003 	.word	0x00110003
   12970:	00120003 	.word	0x00120003
   12974:	00130003 	.word	0x00130003
   12978:	000c0003 	.word	0x000c0003
   1297c:	000d0003 	.word	0x000d0003
   12980:	000e0003 	.word	0x000e0003
   12984:	000f0003 	.word	0x000f0003
   12988:	00160003 	.word	0x00160003
   1298c:	00170003 	.word	0x00170003
   12990:	00180003 	.word	0x00180003
   12994:	00190003 	.word	0x00190003

00012998 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   12998:	b580      	push	{r7, lr}
   1299a:	b082      	sub	sp, #8
   1299c:	af00      	add	r7, sp, #0
   1299e:	1c02      	adds	r2, r0, #0
   129a0:	1dfb      	adds	r3, r7, #7
   129a2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   129a4:	46bd      	mov	sp, r7
   129a6:	b002      	add	sp, #8
   129a8:	bd80      	pop	{r7, pc}
   129aa:	46c0      	nop			; (mov r8, r8)

000129ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   129ac:	b590      	push	{r4, r7, lr}
   129ae:	b08b      	sub	sp, #44	; 0x2c
   129b0:	af00      	add	r7, sp, #0
   129b2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   129b4:	1c3b      	adds	r3, r7, #0
   129b6:	330c      	adds	r3, #12
   129b8:	4a0e      	ldr	r2, [pc, #56]	; (129f4 <_sercom_get_sercom_inst_index+0x48>)
   129ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   129bc:	c313      	stmia	r3!, {r0, r1, r4}
   129be:	ca13      	ldmia	r2!, {r0, r1, r4}
   129c0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   129c2:	2300      	movs	r3, #0
   129c4:	627b      	str	r3, [r7, #36]	; 0x24
   129c6:	e00d      	b.n	129e4 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   129c8:	687a      	ldr	r2, [r7, #4]
   129ca:	1c3b      	adds	r3, r7, #0
   129cc:	330c      	adds	r3, #12
   129ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
   129d0:	0089      	lsls	r1, r1, #2
   129d2:	58cb      	ldr	r3, [r1, r3]
   129d4:	429a      	cmp	r2, r3
   129d6:	d102      	bne.n	129de <_sercom_get_sercom_inst_index+0x32>
			return i;
   129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129da:	b2db      	uxtb	r3, r3
   129dc:	e006      	b.n	129ec <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   129de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129e0:	3301      	adds	r3, #1
   129e2:	627b      	str	r3, [r7, #36]	; 0x24
   129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129e6:	2b05      	cmp	r3, #5
   129e8:	d9ee      	bls.n	129c8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   129ea:	2300      	movs	r3, #0
}
   129ec:	1c18      	adds	r0, r3, #0
   129ee:	46bd      	mov	sp, r7
   129f0:	b00b      	add	sp, #44	; 0x2c
   129f2:	bd90      	pop	{r4, r7, pc}
   129f4:	0001862c 	.word	0x0001862c

000129f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   129f8:	b580      	push	{r7, lr}
   129fa:	b084      	sub	sp, #16
   129fc:	af00      	add	r7, sp, #0
   129fe:	1c02      	adds	r2, r0, #0
   12a00:	6039      	str	r1, [r7, #0]
   12a02:	1dfb      	adds	r3, r7, #7
   12a04:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
   12a06:	4b13      	ldr	r3, [pc, #76]	; (12a54 <_sercom_set_handler+0x5c>)
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	2201      	movs	r2, #1
   12a0c:	4053      	eors	r3, r2
   12a0e:	b2db      	uxtb	r3, r3
   12a10:	2b00      	cmp	r3, #0
   12a12:	d015      	beq.n	12a40 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12a14:	2300      	movs	r3, #0
   12a16:	60fb      	str	r3, [r7, #12]
   12a18:	e00c      	b.n	12a34 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   12a1a:	4b0f      	ldr	r3, [pc, #60]	; (12a58 <_sercom_set_handler+0x60>)
   12a1c:	68fa      	ldr	r2, [r7, #12]
   12a1e:	0092      	lsls	r2, r2, #2
   12a20:	490e      	ldr	r1, [pc, #56]	; (12a5c <_sercom_set_handler+0x64>)
   12a22:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   12a24:	4b0e      	ldr	r3, [pc, #56]	; (12a60 <_sercom_set_handler+0x68>)
   12a26:	68fa      	ldr	r2, [r7, #12]
   12a28:	0092      	lsls	r2, r2, #2
   12a2a:	2100      	movs	r1, #0
   12a2c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12a2e:	68fb      	ldr	r3, [r7, #12]
   12a30:	3301      	adds	r3, #1
   12a32:	60fb      	str	r3, [r7, #12]
   12a34:	68fb      	ldr	r3, [r7, #12]
   12a36:	2b05      	cmp	r3, #5
   12a38:	d9ef      	bls.n	12a1a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   12a3a:	4b06      	ldr	r3, [pc, #24]	; (12a54 <_sercom_set_handler+0x5c>)
   12a3c:	2201      	movs	r2, #1
   12a3e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   12a40:	1dfb      	adds	r3, r7, #7
   12a42:	781a      	ldrb	r2, [r3, #0]
   12a44:	4b04      	ldr	r3, [pc, #16]	; (12a58 <_sercom_set_handler+0x60>)
   12a46:	0092      	lsls	r2, r2, #2
   12a48:	6839      	ldr	r1, [r7, #0]
   12a4a:	50d1      	str	r1, [r2, r3]
}
   12a4c:	46bd      	mov	sp, r7
   12a4e:	b004      	add	sp, #16
   12a50:	bd80      	pop	{r7, pc}
   12a52:	46c0      	nop			; (mov r8, r8)
   12a54:	20000508 	.word	0x20000508
   12a58:	2000050c 	.word	0x2000050c
   12a5c:	00012999 	.word	0x00012999
   12a60:	2000398c 	.word	0x2000398c

00012a64 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   12a64:	b590      	push	{r4, r7, lr}
   12a66:	b085      	sub	sp, #20
   12a68:	af00      	add	r7, sp, #0
   12a6a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   12a6c:	1c3a      	adds	r2, r7, #0
   12a6e:	3208      	adds	r2, #8
   12a70:	4b0e      	ldr	r3, [pc, #56]	; (12aac <_sercom_get_interrupt_vector+0x48>)
   12a72:	1c11      	adds	r1, r2, #0
   12a74:	1c1a      	adds	r2, r3, #0
   12a76:	2306      	movs	r3, #6
   12a78:	1c08      	adds	r0, r1, #0
   12a7a:	1c11      	adds	r1, r2, #0
   12a7c:	1c1a      	adds	r2, r3, #0
   12a7e:	4b0c      	ldr	r3, [pc, #48]	; (12ab0 <_sercom_get_interrupt_vector+0x4c>)
   12a80:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   12a82:	1c3c      	adds	r4, r7, #0
   12a84:	340f      	adds	r4, #15
   12a86:	687b      	ldr	r3, [r7, #4]
   12a88:	1c18      	adds	r0, r3, #0
   12a8a:	4b0a      	ldr	r3, [pc, #40]	; (12ab4 <_sercom_get_interrupt_vector+0x50>)
   12a8c:	4798      	blx	r3
   12a8e:	1c03      	adds	r3, r0, #0
   12a90:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   12a92:	1c3b      	adds	r3, r7, #0
   12a94:	330f      	adds	r3, #15
   12a96:	781b      	ldrb	r3, [r3, #0]
   12a98:	1c3a      	adds	r2, r7, #0
   12a9a:	3208      	adds	r2, #8
   12a9c:	5cd3      	ldrb	r3, [r2, r3]
   12a9e:	b2db      	uxtb	r3, r3
   12aa0:	b25b      	sxtb	r3, r3
}
   12aa2:	1c18      	adds	r0, r3, #0
   12aa4:	46bd      	mov	sp, r7
   12aa6:	b005      	add	sp, #20
   12aa8:	bd90      	pop	{r4, r7, pc}
   12aaa:	46c0      	nop			; (mov r8, r8)
   12aac:	00018644 	.word	0x00018644
   12ab0:	00017e9d 	.word	0x00017e9d
   12ab4:	000129ad 	.word	0x000129ad

00012ab8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   12ab8:	b580      	push	{r7, lr}
   12aba:	af00      	add	r7, sp, #0
   12abc:	4b02      	ldr	r3, [pc, #8]	; (12ac8 <SERCOM0_Handler+0x10>)
   12abe:	681b      	ldr	r3, [r3, #0]
   12ac0:	2000      	movs	r0, #0
   12ac2:	4798      	blx	r3
   12ac4:	46bd      	mov	sp, r7
   12ac6:	bd80      	pop	{r7, pc}
   12ac8:	2000050c 	.word	0x2000050c

00012acc <SERCOM1_Handler>:
   12acc:	b580      	push	{r7, lr}
   12ace:	af00      	add	r7, sp, #0
   12ad0:	4b02      	ldr	r3, [pc, #8]	; (12adc <SERCOM1_Handler+0x10>)
   12ad2:	685b      	ldr	r3, [r3, #4]
   12ad4:	2001      	movs	r0, #1
   12ad6:	4798      	blx	r3
   12ad8:	46bd      	mov	sp, r7
   12ada:	bd80      	pop	{r7, pc}
   12adc:	2000050c 	.word	0x2000050c

00012ae0 <SERCOM2_Handler>:
   12ae0:	b580      	push	{r7, lr}
   12ae2:	af00      	add	r7, sp, #0
   12ae4:	4b02      	ldr	r3, [pc, #8]	; (12af0 <SERCOM2_Handler+0x10>)
   12ae6:	689b      	ldr	r3, [r3, #8]
   12ae8:	2002      	movs	r0, #2
   12aea:	4798      	blx	r3
   12aec:	46bd      	mov	sp, r7
   12aee:	bd80      	pop	{r7, pc}
   12af0:	2000050c 	.word	0x2000050c

00012af4 <SERCOM3_Handler>:
   12af4:	b580      	push	{r7, lr}
   12af6:	af00      	add	r7, sp, #0
   12af8:	4b02      	ldr	r3, [pc, #8]	; (12b04 <SERCOM3_Handler+0x10>)
   12afa:	68db      	ldr	r3, [r3, #12]
   12afc:	2003      	movs	r0, #3
   12afe:	4798      	blx	r3
   12b00:	46bd      	mov	sp, r7
   12b02:	bd80      	pop	{r7, pc}
   12b04:	2000050c 	.word	0x2000050c

00012b08 <SERCOM4_Handler>:
   12b08:	b580      	push	{r7, lr}
   12b0a:	af00      	add	r7, sp, #0
   12b0c:	4b02      	ldr	r3, [pc, #8]	; (12b18 <SERCOM4_Handler+0x10>)
   12b0e:	691b      	ldr	r3, [r3, #16]
   12b10:	2004      	movs	r0, #4
   12b12:	4798      	blx	r3
   12b14:	46bd      	mov	sp, r7
   12b16:	bd80      	pop	{r7, pc}
   12b18:	2000050c 	.word	0x2000050c

00012b1c <SERCOM5_Handler>:
   12b1c:	b580      	push	{r7, lr}
   12b1e:	af00      	add	r7, sp, #0
   12b20:	4b02      	ldr	r3, [pc, #8]	; (12b2c <SERCOM5_Handler+0x10>)
   12b22:	695b      	ldr	r3, [r3, #20]
   12b24:	2005      	movs	r0, #5
   12b26:	4798      	blx	r3
   12b28:	46bd      	mov	sp, r7
   12b2a:	bd80      	pop	{r7, pc}
   12b2c:	2000050c 	.word	0x2000050c

00012b30 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12b30:	b580      	push	{r7, lr}
   12b32:	b082      	sub	sp, #8
   12b34:	af00      	add	r7, sp, #0
   12b36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12b38:	687b      	ldr	r3, [r7, #4]
   12b3a:	2280      	movs	r2, #128	; 0x80
   12b3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	2200      	movs	r2, #0
   12b42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12b44:	687b      	ldr	r3, [r7, #4]
   12b46:	2201      	movs	r2, #1
   12b48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12b4a:	687b      	ldr	r3, [r7, #4]
   12b4c:	2200      	movs	r2, #0
   12b4e:	70da      	strb	r2, [r3, #3]
}
   12b50:	46bd      	mov	sp, r7
   12b52:	b002      	add	sp, #8
   12b54:	bd80      	pop	{r7, pc}
   12b56:	46c0      	nop			; (mov r8, r8)

00012b58 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12b58:	b580      	push	{r7, lr}
   12b5a:	b084      	sub	sp, #16
   12b5c:	af00      	add	r7, sp, #0
   12b5e:	1c02      	adds	r2, r0, #0
   12b60:	1dfb      	adds	r3, r7, #7
   12b62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12b64:	1c3b      	adds	r3, r7, #0
   12b66:	330f      	adds	r3, #15
   12b68:	1dfa      	adds	r2, r7, #7
   12b6a:	7812      	ldrb	r2, [r2, #0]
   12b6c:	09d2      	lsrs	r2, r2, #7
   12b6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12b70:	1c3b      	adds	r3, r7, #0
   12b72:	330e      	adds	r3, #14
   12b74:	1dfa      	adds	r2, r7, #7
   12b76:	7812      	ldrb	r2, [r2, #0]
   12b78:	0952      	lsrs	r2, r2, #5
   12b7a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12b7c:	4b0d      	ldr	r3, [pc, #52]	; (12bb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   12b7e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   12b80:	1c3b      	adds	r3, r7, #0
   12b82:	330f      	adds	r3, #15
   12b84:	781b      	ldrb	r3, [r3, #0]
   12b86:	2b00      	cmp	r3, #0
   12b88:	d10e      	bne.n	12ba8 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   12b8a:	1c3b      	adds	r3, r7, #0
   12b8c:	330f      	adds	r3, #15
   12b8e:	781b      	ldrb	r3, [r3, #0]
   12b90:	009b      	lsls	r3, r3, #2
   12b92:	2210      	movs	r2, #16
   12b94:	19d2      	adds	r2, r2, r7
   12b96:	18d3      	adds	r3, r2, r3
   12b98:	3b08      	subs	r3, #8
   12b9a:	681a      	ldr	r2, [r3, #0]
   12b9c:	1c3b      	adds	r3, r7, #0
   12b9e:	330e      	adds	r3, #14
   12ba0:	781b      	ldrb	r3, [r3, #0]
   12ba2:	01db      	lsls	r3, r3, #7
   12ba4:	18d3      	adds	r3, r2, r3
   12ba6:	e000      	b.n	12baa <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   12ba8:	2300      	movs	r3, #0
	}
}
   12baa:	1c18      	adds	r0, r3, #0
   12bac:	46bd      	mov	sp, r7
   12bae:	b004      	add	sp, #16
   12bb0:	bd80      	pop	{r7, pc}
   12bb2:	46c0      	nop			; (mov r8, r8)
   12bb4:	41004400 	.word	0x41004400

00012bb8 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   12bb8:	b580      	push	{r7, lr}
   12bba:	b086      	sub	sp, #24
   12bbc:	af00      	add	r7, sp, #0
   12bbe:	1c02      	adds	r2, r0, #0
   12bc0:	1dfb      	adds	r3, r7, #7
   12bc2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12bc4:	1dfb      	adds	r3, r7, #7
   12bc6:	781b      	ldrb	r3, [r3, #0]
   12bc8:	1c18      	adds	r0, r3, #0
   12bca:	4b19      	ldr	r3, [pc, #100]	; (12c30 <system_pinmux_pin_get_mux_position+0x78>)
   12bcc:	4798      	blx	r3
   12bce:	1c03      	adds	r3, r0, #0
   12bd0:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   12bd2:	1dfb      	adds	r3, r7, #7
   12bd4:	781a      	ldrb	r2, [r3, #0]
   12bd6:	231f      	movs	r3, #31
   12bd8:	4013      	ands	r3, r2
   12bda:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   12bdc:	6979      	ldr	r1, [r7, #20]
   12bde:	2340      	movs	r3, #64	; 0x40
   12be0:	693a      	ldr	r2, [r7, #16]
   12be2:	188a      	adds	r2, r1, r2
   12be4:	18d3      	adds	r3, r2, r3
   12be6:	781b      	ldrb	r3, [r3, #0]
   12be8:	b2db      	uxtb	r3, r3
   12bea:	1c1a      	adds	r2, r3, #0
   12bec:	2301      	movs	r3, #1
   12bee:	4013      	ands	r3, r2
   12bf0:	d101      	bne.n	12bf6 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   12bf2:	2380      	movs	r3, #128	; 0x80
   12bf4:	e017      	b.n	12c26 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   12bf6:	693b      	ldr	r3, [r7, #16]
   12bf8:	085a      	lsrs	r2, r3, #1
   12bfa:	6979      	ldr	r1, [r7, #20]
   12bfc:	2330      	movs	r3, #48	; 0x30
   12bfe:	188a      	adds	r2, r1, r2
   12c00:	18d3      	adds	r3, r2, r3
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	b2db      	uxtb	r3, r3
   12c06:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   12c08:	693a      	ldr	r2, [r7, #16]
   12c0a:	2301      	movs	r3, #1
   12c0c:	4013      	ands	r3, r2
   12c0e:	d005      	beq.n	12c1c <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   12c10:	68fa      	ldr	r2, [r7, #12]
   12c12:	23f0      	movs	r3, #240	; 0xf0
   12c14:	4013      	ands	r3, r2
   12c16:	091b      	lsrs	r3, r3, #4
   12c18:	b2db      	uxtb	r3, r3
   12c1a:	e004      	b.n	12c26 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   12c1c:	68fb      	ldr	r3, [r7, #12]
   12c1e:	b2da      	uxtb	r2, r3
   12c20:	230f      	movs	r3, #15
   12c22:	4013      	ands	r3, r2
   12c24:	b2db      	uxtb	r3, r3
	}
}
   12c26:	1c18      	adds	r0, r3, #0
   12c28:	46bd      	mov	sp, r7
   12c2a:	b006      	add	sp, #24
   12c2c:	bd80      	pop	{r7, pc}
   12c2e:	46c0      	nop			; (mov r8, r8)
   12c30:	00012b59 	.word	0x00012b59

00012c34 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12c34:	b580      	push	{r7, lr}
   12c36:	b082      	sub	sp, #8
   12c38:	af00      	add	r7, sp, #0
   12c3a:	1c02      	adds	r2, r0, #0
   12c3c:	1dfb      	adds	r3, r7, #7
   12c3e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12c40:	1dfb      	adds	r3, r7, #7
   12c42:	781b      	ldrb	r3, [r3, #0]
   12c44:	1c18      	adds	r0, r3, #0
   12c46:	4b03      	ldr	r3, [pc, #12]	; (12c54 <port_get_group_from_gpio_pin+0x20>)
   12c48:	4798      	blx	r3
   12c4a:	1c03      	adds	r3, r0, #0
}
   12c4c:	1c18      	adds	r0, r3, #0
   12c4e:	46bd      	mov	sp, r7
   12c50:	b002      	add	sp, #8
   12c52:	bd80      	pop	{r7, pc}
   12c54:	00012b59 	.word	0x00012b59

00012c58 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   12c58:	b580      	push	{r7, lr}
   12c5a:	b084      	sub	sp, #16
   12c5c:	af00      	add	r7, sp, #0
   12c5e:	1c0a      	adds	r2, r1, #0
   12c60:	1dfb      	adds	r3, r7, #7
   12c62:	1c01      	adds	r1, r0, #0
   12c64:	7019      	strb	r1, [r3, #0]
   12c66:	1dbb      	adds	r3, r7, #6
   12c68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12c6a:	1dfb      	adds	r3, r7, #7
   12c6c:	781b      	ldrb	r3, [r3, #0]
   12c6e:	1c18      	adds	r0, r3, #0
   12c70:	4b0d      	ldr	r3, [pc, #52]	; (12ca8 <port_pin_set_output_level+0x50>)
   12c72:	4798      	blx	r3
   12c74:	1c03      	adds	r3, r0, #0
   12c76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12c78:	1dfb      	adds	r3, r7, #7
   12c7a:	781a      	ldrb	r2, [r3, #0]
   12c7c:	231f      	movs	r3, #31
   12c7e:	4013      	ands	r3, r2
   12c80:	2201      	movs	r2, #1
   12c82:	1c11      	adds	r1, r2, #0
   12c84:	4099      	lsls	r1, r3
   12c86:	1c0b      	adds	r3, r1, #0
   12c88:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   12c8a:	1dbb      	adds	r3, r7, #6
   12c8c:	781b      	ldrb	r3, [r3, #0]
   12c8e:	2b00      	cmp	r3, #0
   12c90:	d003      	beq.n	12c9a <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   12c92:	68fb      	ldr	r3, [r7, #12]
   12c94:	68ba      	ldr	r2, [r7, #8]
   12c96:	619a      	str	r2, [r3, #24]
   12c98:	e002      	b.n	12ca0 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   12c9a:	68fb      	ldr	r3, [r7, #12]
   12c9c:	68ba      	ldr	r2, [r7, #8]
   12c9e:	615a      	str	r2, [r3, #20]
	}
}
   12ca0:	46bd      	mov	sp, r7
   12ca2:	b004      	add	sp, #16
   12ca4:	bd80      	pop	{r7, pc}
   12ca6:	46c0      	nop			; (mov r8, r8)
   12ca8:	00012c35 	.word	0x00012c35

00012cac <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12cac:	b580      	push	{r7, lr}
   12cae:	b082      	sub	sp, #8
   12cb0:	af00      	add	r7, sp, #0
   12cb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12cb4:	687b      	ldr	r3, [r7, #4]
   12cb6:	2200      	movs	r2, #0
   12cb8:	701a      	strb	r2, [r3, #0]
}
   12cba:	46bd      	mov	sp, r7
   12cbc:	b002      	add	sp, #8
   12cbe:	bd80      	pop	{r7, pc}

00012cc0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12cc0:	b580      	push	{r7, lr}
   12cc2:	b082      	sub	sp, #8
   12cc4:	af00      	add	r7, sp, #0
   12cc6:	1c02      	adds	r2, r0, #0
   12cc8:	6039      	str	r1, [r7, #0]
   12cca:	1dfb      	adds	r3, r7, #7
   12ccc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12cce:	1dfb      	adds	r3, r7, #7
   12cd0:	781b      	ldrb	r3, [r3, #0]
   12cd2:	2b01      	cmp	r3, #1
   12cd4:	d00a      	beq.n	12cec <system_apb_clock_set_mask+0x2c>
   12cd6:	2b02      	cmp	r3, #2
   12cd8:	d00f      	beq.n	12cfa <system_apb_clock_set_mask+0x3a>
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d114      	bne.n	12d08 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12cde:	4b0e      	ldr	r3, [pc, #56]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12ce0:	4a0d      	ldr	r2, [pc, #52]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12ce2:	6991      	ldr	r1, [r2, #24]
   12ce4:	683a      	ldr	r2, [r7, #0]
   12ce6:	430a      	orrs	r2, r1
   12ce8:	619a      	str	r2, [r3, #24]
			break;
   12cea:	e00f      	b.n	12d0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12cec:	4b0a      	ldr	r3, [pc, #40]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12cee:	4a0a      	ldr	r2, [pc, #40]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12cf0:	69d1      	ldr	r1, [r2, #28]
   12cf2:	683a      	ldr	r2, [r7, #0]
   12cf4:	430a      	orrs	r2, r1
   12cf6:	61da      	str	r2, [r3, #28]
			break;
   12cf8:	e008      	b.n	12d0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12cfa:	4b07      	ldr	r3, [pc, #28]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12cfc:	4a06      	ldr	r2, [pc, #24]	; (12d18 <system_apb_clock_set_mask+0x58>)
   12cfe:	6a11      	ldr	r1, [r2, #32]
   12d00:	683a      	ldr	r2, [r7, #0]
   12d02:	430a      	orrs	r2, r1
   12d04:	621a      	str	r2, [r3, #32]
			break;
   12d06:	e001      	b.n	12d0c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12d08:	2317      	movs	r3, #23
   12d0a:	e000      	b.n	12d0e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12d0c:	2300      	movs	r3, #0
}
   12d0e:	1c18      	adds	r0, r3, #0
   12d10:	46bd      	mov	sp, r7
   12d12:	b002      	add	sp, #8
   12d14:	bd80      	pop	{r7, pc}
   12d16:	46c0      	nop			; (mov r8, r8)
   12d18:	40000400 	.word	0x40000400

00012d1c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   12d1c:	b580      	push	{r7, lr}
   12d1e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   12d20:	4b05      	ldr	r3, [pc, #20]	; (12d38 <system_is_debugger_present+0x1c>)
   12d22:	789b      	ldrb	r3, [r3, #2]
   12d24:	b2db      	uxtb	r3, r3
   12d26:	1c1a      	adds	r2, r3, #0
   12d28:	2302      	movs	r3, #2
   12d2a:	4013      	ands	r3, r2
   12d2c:	1e5a      	subs	r2, r3, #1
   12d2e:	4193      	sbcs	r3, r2
   12d30:	b2db      	uxtb	r3, r3
}
   12d32:	1c18      	adds	r0, r3, #0
   12d34:	46bd      	mov	sp, r7
   12d36:	bd80      	pop	{r7, pc}
   12d38:	41002000 	.word	0x41002000

00012d3c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   12d3c:	b580      	push	{r7, lr}
   12d3e:	b084      	sub	sp, #16
   12d40:	af00      	add	r7, sp, #0
   12d42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d44:	687b      	ldr	r3, [r7, #4]
   12d46:	681b      	ldr	r3, [r3, #0]
   12d48:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   12d4a:	68fb      	ldr	r3, [r7, #12]
   12d4c:	7b9b      	ldrb	r3, [r3, #14]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	1c1a      	adds	r2, r3, #0
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	1e5a      	subs	r2, r3, #1
   12d58:	4193      	sbcs	r3, r2
   12d5a:	b2db      	uxtb	r3, r3
}
   12d5c:	1c18      	adds	r0, r3, #0
   12d5e:	46bd      	mov	sp, r7
   12d60:	b004      	add	sp, #16
   12d62:	bd80      	pop	{r7, pc}

00012d64 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   12d64:	b580      	push	{r7, lr}
   12d66:	b084      	sub	sp, #16
   12d68:	af00      	add	r7, sp, #0
   12d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	681b      	ldr	r3, [r3, #0]
   12d70:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	7b9b      	ldrb	r3, [r3, #14]
   12d76:	b2db      	uxtb	r3, r3
   12d78:	1c1a      	adds	r2, r3, #0
   12d7a:	2301      	movs	r3, #1
   12d7c:	4013      	ands	r3, r2
   12d7e:	1e5a      	subs	r2, r3, #1
   12d80:	4193      	sbcs	r3, r2
   12d82:	b2db      	uxtb	r3, r3
}
   12d84:	1c18      	adds	r0, r3, #0
   12d86:	46bd      	mov	sp, r7
   12d88:	b004      	add	sp, #16
   12d8a:	bd80      	pop	{r7, pc}

00012d8c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   12d8c:	b580      	push	{r7, lr}
   12d8e:	b084      	sub	sp, #16
   12d90:	af00      	add	r7, sp, #0
   12d92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d94:	687b      	ldr	r3, [r7, #4]
   12d96:	681b      	ldr	r3, [r3, #0]
   12d98:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   12d9a:	68fb      	ldr	r3, [r7, #12]
   12d9c:	7b9b      	ldrb	r3, [r3, #14]
   12d9e:	b2db      	uxtb	r3, r3
   12da0:	1c1a      	adds	r2, r3, #0
   12da2:	2304      	movs	r3, #4
   12da4:	4013      	ands	r3, r2
   12da6:	1e5a      	subs	r2, r3, #1
   12da8:	4193      	sbcs	r3, r2
   12daa:	b2db      	uxtb	r3, r3
}
   12dac:	1c18      	adds	r0, r3, #0
   12dae:	46bd      	mov	sp, r7
   12db0:	b004      	add	sp, #16
   12db2:	bd80      	pop	{r7, pc}

00012db4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   12db4:	b580      	push	{r7, lr}
   12db6:	b084      	sub	sp, #16
   12db8:	af00      	add	r7, sp, #0
   12dba:	6078      	str	r0, [r7, #4]
   12dbc:	1c0a      	adds	r2, r1, #0
   12dbe:	1cbb      	adds	r3, r7, #2
   12dc0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12dc2:	687b      	ldr	r3, [r7, #4]
   12dc4:	681b      	ldr	r3, [r3, #0]
   12dc6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	1c18      	adds	r0, r3, #0
   12dcc:	4b0a      	ldr	r3, [pc, #40]	; (12df8 <spi_write+0x44>)
   12dce:	4798      	blx	r3
   12dd0:	1c03      	adds	r3, r0, #0
   12dd2:	2201      	movs	r2, #1
   12dd4:	4053      	eors	r3, r2
   12dd6:	b2db      	uxtb	r3, r3
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d001      	beq.n	12de0 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   12ddc:	2305      	movs	r3, #5
   12dde:	e007      	b.n	12df0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12de0:	1cbb      	adds	r3, r7, #2
   12de2:	881b      	ldrh	r3, [r3, #0]
   12de4:	05db      	lsls	r3, r3, #23
   12de6:	0ddb      	lsrs	r3, r3, #23
   12de8:	b29a      	uxth	r2, r3
   12dea:	68fb      	ldr	r3, [r7, #12]
   12dec:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
   12dee:	2300      	movs	r3, #0
}
   12df0:	1c18      	adds	r0, r3, #0
   12df2:	46bd      	mov	sp, r7
   12df4:	b004      	add	sp, #16
   12df6:	bd80      	pop	{r7, pc}
   12df8:	00012d65 	.word	0x00012d65

00012dfc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   12dfc:	b580      	push	{r7, lr}
   12dfe:	b084      	sub	sp, #16
   12e00:	af00      	add	r7, sp, #0
   12e02:	6078      	str	r0, [r7, #4]
   12e04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12e06:	687b      	ldr	r3, [r7, #4]
   12e08:	681b      	ldr	r3, [r3, #0]
   12e0a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   12e0c:	687b      	ldr	r3, [r7, #4]
   12e0e:	1c18      	adds	r0, r3, #0
   12e10:	4b1d      	ldr	r3, [pc, #116]	; (12e88 <spi_read+0x8c>)
   12e12:	4798      	blx	r3
   12e14:	1c03      	adds	r3, r0, #0
   12e16:	2201      	movs	r2, #1
   12e18:	4053      	eors	r3, r2
   12e1a:	b2db      	uxtb	r3, r3
   12e1c:	2b00      	cmp	r3, #0
   12e1e:	d001      	beq.n	12e24 <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   12e20:	2310      	movs	r3, #16
   12e22:	e02d      	b.n	12e80 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   12e24:	1c3b      	adds	r3, r7, #0
   12e26:	330f      	adds	r3, #15
   12e28:	2200      	movs	r2, #0
   12e2a:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12e2c:	68bb      	ldr	r3, [r7, #8]
   12e2e:	8a1b      	ldrh	r3, [r3, #16]
   12e30:	b29b      	uxth	r3, r3
   12e32:	1c1a      	adds	r2, r3, #0
   12e34:	2304      	movs	r3, #4
   12e36:	4013      	ands	r3, r2
   12e38:	d00b      	beq.n	12e52 <spi_read+0x56>
		retval = STATUS_ERR_OVERFLOW;
   12e3a:	1c3b      	adds	r3, r7, #0
   12e3c:	330f      	adds	r3, #15
   12e3e:	221e      	movs	r2, #30
   12e40:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
   12e42:	68bb      	ldr	r3, [r7, #8]
   12e44:	8a1b      	ldrh	r3, [r3, #16]
   12e46:	b29b      	uxth	r3, r3
   12e48:	2204      	movs	r2, #4
   12e4a:	4313      	orrs	r3, r2
   12e4c:	b29a      	uxth	r2, r3
   12e4e:	68bb      	ldr	r3, [r7, #8]
   12e50:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12e52:	687b      	ldr	r3, [r7, #4]
   12e54:	799b      	ldrb	r3, [r3, #6]
   12e56:	2b01      	cmp	r3, #1
   12e58:	d108      	bne.n	12e6c <spi_read+0x70>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12e5a:	68bb      	ldr	r3, [r7, #8]
   12e5c:	8b1b      	ldrh	r3, [r3, #24]
   12e5e:	b29b      	uxth	r3, r3
   12e60:	05db      	lsls	r3, r3, #23
   12e62:	0ddb      	lsrs	r3, r3, #23
   12e64:	b29a      	uxth	r2, r3
   12e66:	683b      	ldr	r3, [r7, #0]
   12e68:	801a      	strh	r2, [r3, #0]
   12e6a:	e006      	b.n	12e7a <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12e6c:	68bb      	ldr	r3, [r7, #8]
   12e6e:	8b1b      	ldrh	r3, [r3, #24]
   12e70:	b29b      	uxth	r3, r3
   12e72:	b2db      	uxtb	r3, r3
   12e74:	1c1a      	adds	r2, r3, #0
   12e76:	683b      	ldr	r3, [r7, #0]
   12e78:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   12e7a:	1c3b      	adds	r3, r7, #0
   12e7c:	330f      	adds	r3, #15
   12e7e:	781b      	ldrb	r3, [r3, #0]
}
   12e80:	1c18      	adds	r0, r3, #0
   12e82:	46bd      	mov	sp, r7
   12e84:	b004      	add	sp, #16
   12e86:	bd80      	pop	{r7, pc}
   12e88:	00012d8d 	.word	0x00012d8d

00012e8c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12e8c:	b590      	push	{r4, r7, lr}
   12e8e:	b093      	sub	sp, #76	; 0x4c
   12e90:	af00      	add	r7, sp, #0
   12e92:	6078      	str	r0, [r7, #4]
   12e94:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12e96:	687b      	ldr	r3, [r7, #4]
   12e98:	681b      	ldr	r3, [r3, #0]
   12e9a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12e9c:	687b      	ldr	r3, [r7, #4]
   12e9e:	681b      	ldr	r3, [r3, #0]
   12ea0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12ea2:	1c3b      	adds	r3, r7, #0
   12ea4:	331c      	adds	r3, #28
   12ea6:	1c18      	adds	r0, r3, #0
   12ea8:	4b69      	ldr	r3, [pc, #420]	; (13050 <_spi_set_config+0x1c4>)
   12eaa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12eac:	1c3b      	adds	r3, r7, #0
   12eae:	331c      	adds	r3, #28
   12eb0:	2200      	movs	r2, #0
   12eb2:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12eb4:	683b      	ldr	r3, [r7, #0]
   12eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12eb8:	1c3b      	adds	r3, r7, #0
   12eba:	330c      	adds	r3, #12
   12ebc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12ebe:	683b      	ldr	r3, [r7, #0]
   12ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12ec2:	1c3b      	adds	r3, r7, #0
   12ec4:	330c      	adds	r3, #12
   12ec6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12ec8:	683b      	ldr	r3, [r7, #0]
   12eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12ecc:	1c3b      	adds	r3, r7, #0
   12ece:	330c      	adds	r3, #12
   12ed0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12ed2:	683b      	ldr	r3, [r7, #0]
   12ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12ed6:	1c3b      	adds	r3, r7, #0
   12ed8:	330c      	adds	r3, #12
   12eda:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12edc:	1c3b      	adds	r3, r7, #0
   12ede:	3347      	adds	r3, #71	; 0x47
   12ee0:	2200      	movs	r2, #0
   12ee2:	701a      	strb	r2, [r3, #0]
   12ee4:	e02c      	b.n	12f40 <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12ee6:	1c3b      	adds	r3, r7, #0
   12ee8:	3347      	adds	r3, #71	; 0x47
   12eea:	781a      	ldrb	r2, [r3, #0]
   12eec:	1c3b      	adds	r3, r7, #0
   12eee:	330c      	adds	r3, #12
   12ef0:	0092      	lsls	r2, r2, #2
   12ef2:	58d3      	ldr	r3, [r2, r3]
   12ef4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12ef8:	2b00      	cmp	r3, #0
   12efa:	d109      	bne.n	12f10 <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   12efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12efe:	1c3b      	adds	r3, r7, #0
   12f00:	3347      	adds	r3, #71	; 0x47
   12f02:	781b      	ldrb	r3, [r3, #0]
   12f04:	1c10      	adds	r0, r2, #0
   12f06:	1c19      	adds	r1, r3, #0
   12f08:	4b52      	ldr	r3, [pc, #328]	; (13054 <_spi_set_config+0x1c8>)
   12f0a:	4798      	blx	r3
   12f0c:	1c03      	adds	r3, r0, #0
   12f0e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   12f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12f12:	3301      	adds	r3, #1
   12f14:	d00d      	beq.n	12f32 <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   12f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12f18:	b2da      	uxtb	r2, r3
   12f1a:	1c3b      	adds	r3, r7, #0
   12f1c:	331c      	adds	r3, #28
   12f1e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   12f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12f22:	0c1b      	lsrs	r3, r3, #16
   12f24:	b2da      	uxtb	r2, r3
   12f26:	1c3b      	adds	r3, r7, #0
   12f28:	331c      	adds	r3, #28
   12f2a:	1c10      	adds	r0, r2, #0
   12f2c:	1c19      	adds	r1, r3, #0
   12f2e:	4b4a      	ldr	r3, [pc, #296]	; (13058 <_spi_set_config+0x1cc>)
   12f30:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12f32:	1c3b      	adds	r3, r7, #0
   12f34:	3347      	adds	r3, #71	; 0x47
   12f36:	781a      	ldrb	r2, [r3, #0]
   12f38:	1c3b      	adds	r3, r7, #0
   12f3a:	3347      	adds	r3, #71	; 0x47
   12f3c:	3201      	adds	r2, #1
   12f3e:	701a      	strb	r2, [r3, #0]
   12f40:	1c3b      	adds	r3, r7, #0
   12f42:	3347      	adds	r3, #71	; 0x47
   12f44:	781b      	ldrb	r3, [r3, #0]
   12f46:	2b03      	cmp	r3, #3
   12f48:	d9cd      	bls.n	12ee6 <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
   12f4a:	683b      	ldr	r3, [r7, #0]
   12f4c:	781a      	ldrb	r2, [r3, #0]
   12f4e:	687b      	ldr	r3, [r7, #4]
   12f50:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   12f52:	683b      	ldr	r3, [r7, #0]
   12f54:	7c1a      	ldrb	r2, [r3, #16]
   12f56:	687b      	ldr	r3, [r7, #4]
   12f58:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   12f5a:	683b      	ldr	r3, [r7, #0]
   12f5c:	7c9a      	ldrb	r2, [r3, #18]
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   12f62:	1c3b      	adds	r3, r7, #0
   12f64:	330a      	adds	r3, #10
   12f66:	2200      	movs	r2, #0
   12f68:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   12f6a:	2300      	movs	r3, #0
   12f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   12f6e:	2300      	movs	r3, #0
   12f70:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   12f72:	683b      	ldr	r3, [r7, #0]
   12f74:	781b      	ldrb	r3, [r3, #0]
   12f76:	2b01      	cmp	r3, #1
   12f78:	d12b      	bne.n	12fd2 <_spi_set_config+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12f7a:	687b      	ldr	r3, [r7, #4]
   12f7c:	681b      	ldr	r3, [r3, #0]
   12f7e:	1c18      	adds	r0, r3, #0
   12f80:	4b36      	ldr	r3, [pc, #216]	; (1305c <_spi_set_config+0x1d0>)
   12f82:	4798      	blx	r3
   12f84:	1c03      	adds	r3, r0, #0
   12f86:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f8a:	330d      	adds	r3, #13
   12f8c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12f90:	b2db      	uxtb	r3, r3
   12f92:	1c18      	adds	r0, r3, #0
   12f94:	4b32      	ldr	r3, [pc, #200]	; (13060 <_spi_set_config+0x1d4>)
   12f96:	4798      	blx	r3
   12f98:	1c03      	adds	r3, r0, #0
   12f9a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   12f9c:	683b      	ldr	r3, [r7, #0]
   12f9e:	6959      	ldr	r1, [r3, #20]
   12fa0:	1c3c      	adds	r4, r7, #0
   12fa2:	3423      	adds	r4, #35	; 0x23
   12fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12fa6:	1c3b      	adds	r3, r7, #0
   12fa8:	330a      	adds	r3, #10
   12faa:	1c08      	adds	r0, r1, #0
   12fac:	1c11      	adds	r1, r2, #0
   12fae:	1c1a      	adds	r2, r3, #0
   12fb0:	4b2c      	ldr	r3, [pc, #176]	; (13064 <_spi_set_config+0x1d8>)
   12fb2:	4798      	blx	r3
   12fb4:	1c03      	adds	r3, r0, #0
   12fb6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   12fb8:	1c3b      	adds	r3, r7, #0
   12fba:	3323      	adds	r3, #35	; 0x23
   12fbc:	781b      	ldrb	r3, [r3, #0]
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	d001      	beq.n	12fc6 <_spi_set_config+0x13a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12fc2:	2317      	movs	r3, #23
   12fc4:	e040      	b.n	13048 <_spi_set_config+0x1bc>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   12fc6:	1c3b      	adds	r3, r7, #0
   12fc8:	330a      	adds	r3, #10
   12fca:	881b      	ldrh	r3, [r3, #0]
   12fcc:	b2da      	uxtb	r2, r3
   12fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fd0:	729a      	strb	r2, [r3, #10]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   12fd2:	683b      	ldr	r3, [r7, #0]
   12fd4:	685b      	ldr	r3, [r3, #4]
   12fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fd8:	4313      	orrs	r3, r2
   12fda:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12fdc:	683b      	ldr	r3, [r7, #0]
   12fde:	689b      	ldr	r3, [r3, #8]
   12fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fe2:	4313      	orrs	r3, r2
   12fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
   12fe6:	683b      	ldr	r3, [r7, #0]
   12fe8:	68db      	ldr	r3, [r3, #12]
   12fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fec:	4313      	orrs	r3, r2
   12fee:	63fb      	str	r3, [r7, #60]	; 0x3c
	
//---------BETH I SHOEHORNED THIS IN	
	ctrla |=   SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   12ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ff2:	220c      	movs	r2, #12
   12ff4:	4313      	orrs	r3, r2
   12ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12ff8:	683b      	ldr	r3, [r7, #0]
   12ffa:	7c1b      	ldrb	r3, [r3, #16]
   12ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12ffe:	4313      	orrs	r3, r2
   13000:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13002:	683b      	ldr	r3, [r7, #0]
   13004:	7c5b      	ldrb	r3, [r3, #17]
   13006:	2b00      	cmp	r3, #0
   13008:	d104      	bne.n	13014 <_spi_set_config+0x188>
   1300a:	4b17      	ldr	r3, [pc, #92]	; (13068 <_spi_set_config+0x1dc>)
   1300c:	4798      	blx	r3
   1300e:	1c03      	adds	r3, r0, #0
   13010:	2b00      	cmp	r3, #0
   13012:	d003      	beq.n	1301c <_spi_set_config+0x190>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   13014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13016:	2280      	movs	r2, #128	; 0x80
   13018:	4313      	orrs	r3, r2
   1301a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   1301c:	683b      	ldr	r3, [r7, #0]
   1301e:	7c9b      	ldrb	r3, [r3, #18]
   13020:	2b00      	cmp	r3, #0
   13022:	d004      	beq.n	1302e <_spi_set_config+0x1a2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   13024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13026:	2280      	movs	r2, #128	; 0x80
   13028:	0292      	lsls	r2, r2, #10
   1302a:	4313      	orrs	r3, r2
   1302c:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   1302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13030:	681a      	ldr	r2, [r3, #0]
   13032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13034:	431a      	orrs	r2, r3
   13036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13038:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   1303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1303c:	685a      	ldr	r2, [r3, #4]
   1303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13040:	431a      	orrs	r2, r3
   13042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13044:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   13046:	2300      	movs	r3, #0
}
   13048:	1c18      	adds	r0, r3, #0
   1304a:	46bd      	mov	sp, r7
   1304c:	b013      	add	sp, #76	; 0x4c
   1304e:	bd90      	pop	{r4, r7, pc}
   13050:	00012b31 	.word	0x00012b31
   13054:	000127dd 	.word	0x000127dd
   13058:	00014361 	.word	0x00014361
   1305c:	000129ad 	.word	0x000129ad
   13060:	000141a1 	.word	0x000141a1
   13064:	0001253d 	.word	0x0001253d
   13068:	00012d1d 	.word	0x00012d1d

0001306c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   1306c:	b590      	push	{r4, r7, lr}
   1306e:	b091      	sub	sp, #68	; 0x44
   13070:	af00      	add	r7, sp, #0
   13072:	6078      	str	r0, [r7, #4]
   13074:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   13076:	687b      	ldr	r3, [r7, #4]
   13078:	681b      	ldr	r3, [r3, #0]
   1307a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   1307c:	687b      	ldr	r3, [r7, #4]
   1307e:	681b      	ldr	r3, [r3, #0]
   13080:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   13082:	683b      	ldr	r3, [r7, #0]
   13084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   13086:	1c3b      	adds	r3, r7, #0
   13088:	3310      	adds	r3, #16
   1308a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   1308c:	683b      	ldr	r3, [r7, #0]
   1308e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   13090:	1c3b      	adds	r3, r7, #0
   13092:	3310      	adds	r3, #16
   13094:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   13096:	683b      	ldr	r3, [r7, #0]
   13098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   1309a:	1c3b      	adds	r3, r7, #0
   1309c:	3310      	adds	r3, #16
   1309e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   130a0:	683b      	ldr	r3, [r7, #0]
   130a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   130a4:	1c3b      	adds	r3, r7, #0
   130a6:	3310      	adds	r3, #16
   130a8:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   130aa:	1c3b      	adds	r3, r7, #0
   130ac:	333f      	adds	r3, #63	; 0x3f
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e030      	b.n	13116 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   130b4:	1c3b      	adds	r3, r7, #0
   130b6:	333f      	adds	r3, #63	; 0x3f
   130b8:	781a      	ldrb	r2, [r3, #0]
   130ba:	1c3b      	adds	r3, r7, #0
   130bc:	3310      	adds	r3, #16
   130be:	0092      	lsls	r2, r2, #2
   130c0:	58d3      	ldr	r3, [r2, r3]
   130c2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   130c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130c6:	2b00      	cmp	r3, #0
   130c8:	d109      	bne.n	130de <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   130ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   130cc:	1c3b      	adds	r3, r7, #0
   130ce:	333f      	adds	r3, #63	; 0x3f
   130d0:	781b      	ldrb	r3, [r3, #0]
   130d2:	1c10      	adds	r0, r2, #0
   130d4:	1c19      	adds	r1, r3, #0
   130d6:	4b4d      	ldr	r3, [pc, #308]	; (1320c <_spi_check_config+0x1a0>)
   130d8:	4798      	blx	r3
   130da:	1c03      	adds	r3, r0, #0
   130dc:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130e0:	3301      	adds	r3, #1
   130e2:	d100      	bne.n	130e6 <_spi_check_config+0x7a>
			continue;
   130e4:	e010      	b.n	13108 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
   130e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130e8:	041b      	lsls	r3, r3, #16
   130ea:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   130ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130ee:	0c1b      	lsrs	r3, r3, #16
   130f0:	b2db      	uxtb	r3, r3
   130f2:	1c18      	adds	r0, r3, #0
   130f4:	4b46      	ldr	r3, [pc, #280]	; (13210 <_spi_check_config+0x1a4>)
   130f6:	4798      	blx	r3
   130f8:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   130fa:	429c      	cmp	r4, r3
   130fc:	d004      	beq.n	13108 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
   130fe:	687b      	ldr	r3, [r7, #4]
   13100:	2200      	movs	r2, #0
   13102:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   13104:	231c      	movs	r3, #28
   13106:	e07d      	b.n	13204 <_spi_check_config+0x198>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13108:	1c3b      	adds	r3, r7, #0
   1310a:	333f      	adds	r3, #63	; 0x3f
   1310c:	781a      	ldrb	r2, [r3, #0]
   1310e:	1c3b      	adds	r3, r7, #0
   13110:	333f      	adds	r3, #63	; 0x3f
   13112:	3201      	adds	r2, #1
   13114:	701a      	strb	r2, [r3, #0]
   13116:	1c3b      	adds	r3, r7, #0
   13118:	333f      	adds	r3, #63	; 0x3f
   1311a:	781b      	ldrb	r3, [r3, #0]
   1311c:	2b03      	cmp	r3, #3
   1311e:	d9c9      	bls.n	130b4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   13120:	200c      	movs	r0, #12
   13122:	4b3c      	ldr	r3, [pc, #240]	; (13214 <_spi_check_config+0x1a8>)
   13124:	4798      	blx	r3
   13126:	1c03      	adds	r3, r0, #0
   13128:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   1312a:	2300      	movs	r3, #0
   1312c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   1312e:	2300      	movs	r3, #0
   13130:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   13132:	683b      	ldr	r3, [r7, #0]
   13134:	781b      	ldrb	r3, [r3, #0]
   13136:	2b01      	cmp	r3, #1
   13138:	d123      	bne.n	13182 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   1313a:	683b      	ldr	r3, [r7, #0]
   1313c:	6959      	ldr	r1, [r3, #20]
   1313e:	1c3c      	adds	r4, r7, #0
   13140:	3423      	adds	r4, #35	; 0x23
   13142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13144:	1c3b      	adds	r3, r7, #0
   13146:	330e      	adds	r3, #14
   13148:	1c08      	adds	r0, r1, #0
   1314a:	1c11      	adds	r1, r2, #0
   1314c:	1c1a      	adds	r2, r3, #0
   1314e:	4b32      	ldr	r3, [pc, #200]	; (13218 <_spi_check_config+0x1ac>)
   13150:	4798      	blx	r3
   13152:	1c03      	adds	r3, r0, #0
   13154:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   13156:	1c3b      	adds	r3, r7, #0
   13158:	3323      	adds	r3, #35	; 0x23
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	2b00      	cmp	r3, #0
   1315e:	d001      	beq.n	13164 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   13160:	2317      	movs	r3, #23
   13162:	e04f      	b.n	13204 <_spi_check_config+0x198>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   13164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13166:	7a9b      	ldrb	r3, [r3, #10]
   13168:	b2da      	uxtb	r2, r3
   1316a:	1c3b      	adds	r3, r7, #0
   1316c:	330e      	adds	r3, #14
   1316e:	881b      	ldrh	r3, [r3, #0]
   13170:	b2db      	uxtb	r3, r3
   13172:	429a      	cmp	r2, r3
   13174:	d001      	beq.n	1317a <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   13176:	231c      	movs	r3, #28
   13178:	e044      	b.n	13204 <_spi_check_config+0x198>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   1317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1317c:	220c      	movs	r2, #12
   1317e:	4313      	orrs	r3, r2
   13180:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   13182:	683b      	ldr	r3, [r7, #0]
   13184:	685b      	ldr	r3, [r3, #4]
   13186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   13188:	4313      	orrs	r3, r2
   1318a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   1318c:	683b      	ldr	r3, [r7, #0]
   1318e:	689b      	ldr	r3, [r3, #8]
   13190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   13192:	4313      	orrs	r3, r2
   13194:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
   13196:	683b      	ldr	r3, [r7, #0]
   13198:	68db      	ldr	r3, [r3, #12]
   1319a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1319c:	4313      	orrs	r3, r2
   1319e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   131a0:	683b      	ldr	r3, [r7, #0]
   131a2:	7c1b      	ldrb	r3, [r3, #16]
   131a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   131a6:	4313      	orrs	r3, r2
   131a8:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   131aa:	683b      	ldr	r3, [r7, #0]
   131ac:	7c5b      	ldrb	r3, [r3, #17]
   131ae:	2b00      	cmp	r3, #0
   131b0:	d003      	beq.n	131ba <_spi_check_config+0x14e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   131b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131b4:	2280      	movs	r2, #128	; 0x80
   131b6:	4313      	orrs	r3, r2
   131b8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   131ba:	683b      	ldr	r3, [r7, #0]
   131bc:	7c9b      	ldrb	r3, [r3, #18]
   131be:	2b00      	cmp	r3, #0
   131c0:	d004      	beq.n	131cc <_spi_check_config+0x160>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   131c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   131c4:	2280      	movs	r2, #128	; 0x80
   131c6:	0292      	lsls	r2, r2, #10
   131c8:	4313      	orrs	r3, r2
   131ca:	633b      	str	r3, [r7, #48]	; 0x30
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   131cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131ce:	2202      	movs	r2, #2
   131d0:	4313      	orrs	r3, r2
   131d2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131d6:	681a      	ldr	r2, [r3, #0]
   131d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131da:	429a      	cmp	r2, r3
   131dc:	d10e      	bne.n	131fc <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
   131de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131e0:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   131e4:	429a      	cmp	r2, r3
   131e6:	d109      	bne.n	131fc <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
   131e8:	683b      	ldr	r3, [r7, #0]
   131ea:	781a      	ldrb	r2, [r3, #0]
   131ec:	687b      	ldr	r3, [r7, #4]
   131ee:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   131f0:	683b      	ldr	r3, [r7, #0]
   131f2:	7c1a      	ldrb	r2, [r3, #16]
   131f4:	687b      	ldr	r3, [r7, #4]
   131f6:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   131f8:	2300      	movs	r3, #0
   131fa:	e003      	b.n	13204 <_spi_check_config+0x198>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	2200      	movs	r2, #0
   13200:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   13202:	231c      	movs	r3, #28
}
   13204:	1c18      	adds	r0, r3, #0
   13206:	46bd      	mov	sp, r7
   13208:	b011      	add	sp, #68	; 0x44
   1320a:	bd90      	pop	{r4, r7, pc}
   1320c:	000127dd 	.word	0x000127dd
   13210:	00012bb9 	.word	0x00012bb9
   13214:	000141a1 	.word	0x000141a1
   13218:	0001253d 	.word	0x0001253d

0001321c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1321c:	b580      	push	{r7, lr}
   1321e:	b08a      	sub	sp, #40	; 0x28
   13220:	af00      	add	r7, sp, #0
   13222:	60f8      	str	r0, [r7, #12]
   13224:	60b9      	str	r1, [r7, #8]
   13226:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13228:	68fb      	ldr	r3, [r7, #12]
   1322a:	68ba      	ldr	r2, [r7, #8]
   1322c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	681b      	ldr	r3, [r3, #0]
   13232:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   13234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13236:	681a      	ldr	r2, [r3, #0]
   13238:	2302      	movs	r3, #2
   1323a:	4013      	ands	r3, r2
   1323c:	d007      	beq.n	1324e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   1323e:	68fa      	ldr	r2, [r7, #12]
   13240:	687b      	ldr	r3, [r7, #4]
   13242:	1c10      	adds	r0, r2, #0
   13244:	1c19      	adds	r1, r3, #0
   13246:	4b2a      	ldr	r3, [pc, #168]	; (132f0 <spi_init+0xd4>)
   13248:	4798      	blx	r3
   1324a:	1c03      	adds	r3, r0, #0
   1324c:	e04c      	b.n	132e8 <spi_init+0xcc>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13250:	681a      	ldr	r2, [r3, #0]
   13252:	2301      	movs	r3, #1
   13254:	4013      	ands	r3, r2
   13256:	d001      	beq.n	1325c <spi_init+0x40>
		return STATUS_BUSY;
   13258:	2305      	movs	r3, #5
   1325a:	e045      	b.n	132e8 <spi_init+0xcc>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1325c:	68fb      	ldr	r3, [r7, #12]
   1325e:	681b      	ldr	r3, [r3, #0]
   13260:	1c18      	adds	r0, r3, #0
   13262:	4b24      	ldr	r3, [pc, #144]	; (132f4 <spi_init+0xd8>)
   13264:	4798      	blx	r3
   13266:	1c03      	adds	r3, r0, #0
   13268:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1326a:	6a3b      	ldr	r3, [r7, #32]
   1326c:	3302      	adds	r3, #2
   1326e:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13270:	6a3b      	ldr	r3, [r7, #32]
   13272:	330d      	adds	r3, #13
   13274:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13276:	69fb      	ldr	r3, [r7, #28]
   13278:	2201      	movs	r2, #1
   1327a:	1c11      	adds	r1, r2, #0
   1327c:	4099      	lsls	r1, r3
   1327e:	1c0b      	adds	r3, r1, #0
   13280:	2002      	movs	r0, #2
   13282:	1c19      	adds	r1, r3, #0
   13284:	4b1c      	ldr	r3, [pc, #112]	; (132f8 <spi_init+0xdc>)
   13286:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13288:	1c3b      	adds	r3, r7, #0
   1328a:	3314      	adds	r3, #20
   1328c:	1c18      	adds	r0, r3, #0
   1328e:	4b1b      	ldr	r3, [pc, #108]	; (132fc <spi_init+0xe0>)
   13290:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13292:	687a      	ldr	r2, [r7, #4]
   13294:	2320      	movs	r3, #32
   13296:	5cd2      	ldrb	r2, [r2, r3]
   13298:	1c3b      	adds	r3, r7, #0
   1329a:	3314      	adds	r3, #20
   1329c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1329e:	69bb      	ldr	r3, [r7, #24]
   132a0:	b2da      	uxtb	r2, r3
   132a2:	1c3b      	adds	r3, r7, #0
   132a4:	3314      	adds	r3, #20
   132a6:	1c10      	adds	r0, r2, #0
   132a8:	1c19      	adds	r1, r3, #0
   132aa:	4b15      	ldr	r3, [pc, #84]	; (13300 <spi_init+0xe4>)
   132ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   132ae:	69bb      	ldr	r3, [r7, #24]
   132b0:	b2db      	uxtb	r3, r3
   132b2:	1c18      	adds	r0, r3, #0
   132b4:	4b13      	ldr	r3, [pc, #76]	; (13304 <spi_init+0xe8>)
   132b6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   132b8:	687a      	ldr	r2, [r7, #4]
   132ba:	2320      	movs	r3, #32
   132bc:	5cd3      	ldrb	r3, [r2, r3]
   132be:	1c18      	adds	r0, r3, #0
   132c0:	2100      	movs	r1, #0
   132c2:	4b11      	ldr	r3, [pc, #68]	; (13308 <spi_init+0xec>)
   132c4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   132c6:	687b      	ldr	r3, [r7, #4]
   132c8:	781b      	ldrb	r3, [r3, #0]
   132ca:	2b01      	cmp	r3, #1
   132cc:	d105      	bne.n	132da <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   132ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   132d0:	681b      	ldr	r3, [r3, #0]
   132d2:	220c      	movs	r2, #12
   132d4:	431a      	orrs	r2, r3
   132d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   132d8:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   132da:	68fa      	ldr	r2, [r7, #12]
   132dc:	687b      	ldr	r3, [r7, #4]
   132de:	1c10      	adds	r0, r2, #0
   132e0:	1c19      	adds	r1, r3, #0
   132e2:	4b0a      	ldr	r3, [pc, #40]	; (1330c <spi_init+0xf0>)
   132e4:	4798      	blx	r3
   132e6:	1c03      	adds	r3, r0, #0
}
   132e8:	1c18      	adds	r0, r3, #0
   132ea:	46bd      	mov	sp, r7
   132ec:	b00a      	add	sp, #40	; 0x28
   132ee:	bd80      	pop	{r7, pc}
   132f0:	0001306d 	.word	0x0001306d
   132f4:	000129ad 	.word	0x000129ad
   132f8:	00012cc1 	.word	0x00012cc1
   132fc:	00012cad 	.word	0x00012cad
   13300:	00014041 	.word	0x00014041
   13304:	00014081 	.word	0x00014081
   13308:	00012751 	.word	0x00012751
   1330c:	00012e8d 	.word	0x00012e8d

00013310 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   13310:	b580      	push	{r7, lr}
   13312:	b086      	sub	sp, #24
   13314:	af00      	add	r7, sp, #0
   13316:	60f8      	str	r0, [r7, #12]
   13318:	60b9      	str	r1, [r7, #8]
   1331a:	1dfb      	adds	r3, r7, #7
   1331c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1331e:	68fb      	ldr	r3, [r7, #12]
   13320:	795b      	ldrb	r3, [r3, #5]
   13322:	2b01      	cmp	r3, #1
   13324:	d001      	beq.n	1332a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13326:	2315      	movs	r3, #21
   13328:	e052      	b.n	133d0 <spi_select_slave+0xc0>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
   1332a:	1dfb      	adds	r3, r7, #7
   1332c:	781b      	ldrb	r3, [r3, #0]
   1332e:	2b00      	cmp	r3, #0
   13330:	d047      	beq.n	133c2 <spi_select_slave+0xb2>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   13332:	68bb      	ldr	r3, [r7, #8]
   13334:	785b      	ldrb	r3, [r3, #1]
   13336:	2b00      	cmp	r3, #0
   13338:	d03c      	beq.n	133b4 <spi_select_slave+0xa4>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   1333a:	68fb      	ldr	r3, [r7, #12]
   1333c:	1c18      	adds	r0, r3, #0
   1333e:	4b26      	ldr	r3, [pc, #152]	; (133d8 <spi_select_slave+0xc8>)
   13340:	4798      	blx	r3
   13342:	1c03      	adds	r3, r0, #0
   13344:	2201      	movs	r2, #1
   13346:	4053      	eors	r3, r2
   13348:	b2db      	uxtb	r3, r3
   1334a:	2b00      	cmp	r3, #0
   1334c:	d007      	beq.n	1335e <spi_select_slave+0x4e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1334e:	68bb      	ldr	r3, [r7, #8]
   13350:	781b      	ldrb	r3, [r3, #0]
   13352:	1c18      	adds	r0, r3, #0
   13354:	2101      	movs	r1, #1
   13356:	4b21      	ldr	r3, [pc, #132]	; (133dc <spi_select_slave+0xcc>)
   13358:	4798      	blx	r3
					return STATUS_BUSY;
   1335a:	2305      	movs	r3, #5
   1335c:	e038      	b.n	133d0 <spi_select_slave+0xc0>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1335e:	68bb      	ldr	r3, [r7, #8]
   13360:	781b      	ldrb	r3, [r3, #0]
   13362:	1c18      	adds	r0, r3, #0
   13364:	2100      	movs	r1, #0
   13366:	4b1d      	ldr	r3, [pc, #116]	; (133dc <spi_select_slave+0xcc>)
   13368:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1336a:	68bb      	ldr	r3, [r7, #8]
   1336c:	789b      	ldrb	r3, [r3, #2]
   1336e:	68fa      	ldr	r2, [r7, #12]
   13370:	1c10      	adds	r0, r2, #0
   13372:	1c19      	adds	r1, r3, #0
   13374:	4b1a      	ldr	r3, [pc, #104]	; (133e0 <spi_select_slave+0xd0>)
   13376:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   13378:	68fb      	ldr	r3, [r7, #12]
   1337a:	79db      	ldrb	r3, [r3, #7]
   1337c:	2201      	movs	r2, #1
   1337e:	4053      	eors	r3, r2
   13380:	b2db      	uxtb	r3, r3
   13382:	2b00      	cmp	r3, #0
   13384:	d023      	beq.n	133ce <spi_select_slave+0xbe>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   13386:	46c0      	nop			; (mov r8, r8)
   13388:	68fb      	ldr	r3, [r7, #12]
   1338a:	1c18      	adds	r0, r3, #0
   1338c:	4b15      	ldr	r3, [pc, #84]	; (133e4 <spi_select_slave+0xd4>)
   1338e:	4798      	blx	r3
   13390:	1c03      	adds	r3, r0, #0
   13392:	2201      	movs	r2, #1
   13394:	4053      	eors	r3, r2
   13396:	b2db      	uxtb	r3, r3
   13398:	2b00      	cmp	r3, #0
   1339a:	d1f5      	bne.n	13388 <spi_select_slave+0x78>
					}
					uint16_t flush = 0;
   1339c:	1c3b      	adds	r3, r7, #0
   1339e:	3316      	adds	r3, #22
   133a0:	2200      	movs	r2, #0
   133a2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   133a4:	68fa      	ldr	r2, [r7, #12]
   133a6:	1c3b      	adds	r3, r7, #0
   133a8:	3316      	adds	r3, #22
   133aa:	1c10      	adds	r0, r2, #0
   133ac:	1c19      	adds	r1, r3, #0
   133ae:	4b0e      	ldr	r3, [pc, #56]	; (133e8 <spi_select_slave+0xd8>)
   133b0:	4798      	blx	r3
   133b2:	e00c      	b.n	133ce <spi_select_slave+0xbe>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   133b4:	68bb      	ldr	r3, [r7, #8]
   133b6:	781b      	ldrb	r3, [r3, #0]
   133b8:	1c18      	adds	r0, r3, #0
   133ba:	2100      	movs	r1, #0
   133bc:	4b07      	ldr	r3, [pc, #28]	; (133dc <spi_select_slave+0xcc>)
   133be:	4798      	blx	r3
   133c0:	e005      	b.n	133ce <spi_select_slave+0xbe>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   133c2:	68bb      	ldr	r3, [r7, #8]
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	1c18      	adds	r0, r3, #0
   133c8:	2101      	movs	r1, #1
   133ca:	4b04      	ldr	r3, [pc, #16]	; (133dc <spi_select_slave+0xcc>)
   133cc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   133ce:	2300      	movs	r3, #0
}
   133d0:	1c18      	adds	r0, r3, #0
   133d2:	46bd      	mov	sp, r7
   133d4:	b006      	add	sp, #24
   133d6:	bd80      	pop	{r7, pc}
   133d8:	00012d65 	.word	0x00012d65
   133dc:	00012c59 	.word	0x00012c59
   133e0:	00012db5 	.word	0x00012db5
   133e4:	00012d8d 	.word	0x00012d8d
   133e8:	00012dfd 	.word	0x00012dfd

000133ec <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   133ec:	b590      	push	{r4, r7, lr}
   133ee:	b089      	sub	sp, #36	; 0x24
   133f0:	af00      	add	r7, sp, #0
   133f2:	60f8      	str	r0, [r7, #12]
   133f4:	60b9      	str	r1, [r7, #8]
   133f6:	607a      	str	r2, [r7, #4]
   133f8:	1c1a      	adds	r2, r3, #0
   133fa:	1cbb      	adds	r3, r7, #2
   133fc:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   133fe:	1cbb      	adds	r3, r7, #2
   13400:	881b      	ldrh	r3, [r3, #0]
   13402:	2b00      	cmp	r3, #0
   13404:	d101      	bne.n	1340a <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
   13406:	2317      	movs	r3, #23
   13408:	e0b2      	b.n	13570 <spi_transceive_buffer_wait+0x184>
	}

	if (!(module->receiver_enabled)) {
   1340a:	68fb      	ldr	r3, [r7, #12]
   1340c:	79db      	ldrb	r3, [r3, #7]
   1340e:	2201      	movs	r2, #1
   13410:	4053      	eors	r3, r2
   13412:	b2db      	uxtb	r3, r3
   13414:	2b00      	cmp	r3, #0
   13416:	d001      	beq.n	1341c <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
   13418:	231c      	movs	r3, #28
   1341a:	e0a9      	b.n	13570 <spi_transceive_buffer_wait+0x184>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1341c:	1c3b      	adds	r3, r7, #0
   1341e:	331e      	adds	r3, #30
   13420:	2200      	movs	r2, #0
   13422:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   13424:	1c3b      	adds	r3, r7, #0
   13426:	331c      	adds	r3, #28
   13428:	2200      	movs	r2, #0
   1342a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   1342c:	1c3b      	adds	r3, r7, #0
   1342e:	331a      	adds	r3, #26
   13430:	1cba      	adds	r2, r7, #2
   13432:	8812      	ldrh	r2, [r2, #0]
   13434:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   13436:	e083      	b.n	13540 <spi_transceive_buffer_wait+0x154>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   13438:	46c0      	nop			; (mov r8, r8)
   1343a:	68fb      	ldr	r3, [r7, #12]
   1343c:	1c18      	adds	r0, r3, #0
   1343e:	4b4e      	ldr	r3, [pc, #312]	; (13578 <spi_transceive_buffer_wait+0x18c>)
   13440:	4798      	blx	r3
   13442:	1c03      	adds	r3, r0, #0
   13444:	2201      	movs	r2, #1
   13446:	4053      	eors	r3, r2
   13448:	b2db      	uxtb	r3, r3
   1344a:	2b00      	cmp	r3, #0
   1344c:	d1f5      	bne.n	1343a <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   1344e:	1c3b      	adds	r3, r7, #0
   13450:	331e      	adds	r3, #30
   13452:	881b      	ldrh	r3, [r3, #0]
   13454:	1c3a      	adds	r2, r7, #0
   13456:	321e      	adds	r2, #30
   13458:	1c59      	adds	r1, r3, #1
   1345a:	8011      	strh	r1, [r2, #0]
   1345c:	68ba      	ldr	r2, [r7, #8]
   1345e:	18d3      	adds	r3, r2, r3
   13460:	781a      	ldrb	r2, [r3, #0]
   13462:	1c3b      	adds	r3, r7, #0
   13464:	3318      	adds	r3, #24
   13466:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13468:	68fb      	ldr	r3, [r7, #12]
   1346a:	799b      	ldrb	r3, [r3, #6]
   1346c:	2b01      	cmp	r3, #1
   1346e:	d113      	bne.n	13498 <spi_transceive_buffer_wait+0xac>
			data_to_send |= (tx_data[tx_pos++] << 8);
   13470:	1c3b      	adds	r3, r7, #0
   13472:	331e      	adds	r3, #30
   13474:	881b      	ldrh	r3, [r3, #0]
   13476:	1c3a      	adds	r2, r7, #0
   13478:	321e      	adds	r2, #30
   1347a:	1c59      	adds	r1, r3, #1
   1347c:	8011      	strh	r1, [r2, #0]
   1347e:	68ba      	ldr	r2, [r7, #8]
   13480:	18d3      	adds	r3, r2, r3
   13482:	781b      	ldrb	r3, [r3, #0]
   13484:	021b      	lsls	r3, r3, #8
   13486:	b29a      	uxth	r2, r3
   13488:	1c3b      	adds	r3, r7, #0
   1348a:	3318      	adds	r3, #24
   1348c:	881b      	ldrh	r3, [r3, #0]
   1348e:	4313      	orrs	r3, r2
   13490:	b29a      	uxth	r2, r3
   13492:	1c3b      	adds	r3, r7, #0
   13494:	3318      	adds	r3, #24
   13496:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   13498:	68fa      	ldr	r2, [r7, #12]
   1349a:	1c3b      	adds	r3, r7, #0
   1349c:	3318      	adds	r3, #24
   1349e:	881b      	ldrh	r3, [r3, #0]
   134a0:	1c10      	adds	r0, r2, #0
   134a2:	1c19      	adds	r1, r3, #0
   134a4:	4b35      	ldr	r3, [pc, #212]	; (1357c <spi_transceive_buffer_wait+0x190>)
   134a6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   134a8:	46c0      	nop			; (mov r8, r8)
   134aa:	68fb      	ldr	r3, [r7, #12]
   134ac:	1c18      	adds	r0, r3, #0
   134ae:	4b34      	ldr	r3, [pc, #208]	; (13580 <spi_transceive_buffer_wait+0x194>)
   134b0:	4798      	blx	r3
   134b2:	1c03      	adds	r3, r0, #0
   134b4:	2201      	movs	r2, #1
   134b6:	4053      	eors	r3, r2
   134b8:	b2db      	uxtb	r3, r3
   134ba:	2b00      	cmp	r3, #0
   134bc:	d1f5      	bne.n	134aa <spi_transceive_buffer_wait+0xbe>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   134be:	1c3b      	adds	r3, r7, #0
   134c0:	3314      	adds	r3, #20
   134c2:	2200      	movs	r2, #0
   134c4:	801a      	strh	r2, [r3, #0]
		rx_length--;
   134c6:	1c3b      	adds	r3, r7, #0
   134c8:	331a      	adds	r3, #26
   134ca:	881a      	ldrh	r2, [r3, #0]
   134cc:	1c3b      	adds	r3, r7, #0
   134ce:	331a      	adds	r3, #26
   134d0:	3a01      	subs	r2, #1
   134d2:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   134d4:	1c3c      	adds	r4, r7, #0
   134d6:	3417      	adds	r4, #23
   134d8:	68fa      	ldr	r2, [r7, #12]
   134da:	1c3b      	adds	r3, r7, #0
   134dc:	3314      	adds	r3, #20
   134de:	1c10      	adds	r0, r2, #0
   134e0:	1c19      	adds	r1, r3, #0
   134e2:	4b28      	ldr	r3, [pc, #160]	; (13584 <spi_transceive_buffer_wait+0x198>)
   134e4:	4798      	blx	r3
   134e6:	1c03      	adds	r3, r0, #0
   134e8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   134ea:	1c3b      	adds	r3, r7, #0
   134ec:	3317      	adds	r3, #23
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	2b00      	cmp	r3, #0
   134f2:	d003      	beq.n	134fc <spi_transceive_buffer_wait+0x110>
			/* Overflow, abort */
			return retval;
   134f4:	1c3b      	adds	r3, r7, #0
   134f6:	3317      	adds	r3, #23
   134f8:	781b      	ldrb	r3, [r3, #0]
   134fa:	e039      	b.n	13570 <spi_transceive_buffer_wait+0x184>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   134fc:	1c3b      	adds	r3, r7, #0
   134fe:	331c      	adds	r3, #28
   13500:	881b      	ldrh	r3, [r3, #0]
   13502:	1c3a      	adds	r2, r7, #0
   13504:	321c      	adds	r2, #28
   13506:	1c59      	adds	r1, r3, #1
   13508:	8011      	strh	r1, [r2, #0]
   1350a:	687a      	ldr	r2, [r7, #4]
   1350c:	18d3      	adds	r3, r2, r3
   1350e:	1c3a      	adds	r2, r7, #0
   13510:	3214      	adds	r2, #20
   13512:	8812      	ldrh	r2, [r2, #0]
   13514:	b2d2      	uxtb	r2, r2
   13516:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13518:	68fb      	ldr	r3, [r7, #12]
   1351a:	799b      	ldrb	r3, [r3, #6]
   1351c:	2b01      	cmp	r3, #1
   1351e:	d10f      	bne.n	13540 <spi_transceive_buffer_wait+0x154>
			rx_data[rx_pos++] = (received_data >> 8);
   13520:	1c3b      	adds	r3, r7, #0
   13522:	331c      	adds	r3, #28
   13524:	881b      	ldrh	r3, [r3, #0]
   13526:	1c3a      	adds	r2, r7, #0
   13528:	321c      	adds	r2, #28
   1352a:	1c59      	adds	r1, r3, #1
   1352c:	8011      	strh	r1, [r2, #0]
   1352e:	687a      	ldr	r2, [r7, #4]
   13530:	18d3      	adds	r3, r2, r3
   13532:	1c3a      	adds	r2, r7, #0
   13534:	3214      	adds	r2, #20
   13536:	8812      	ldrh	r2, [r2, #0]
   13538:	0a12      	lsrs	r2, r2, #8
   1353a:	b292      	uxth	r2, r2
   1353c:	b2d2      	uxtb	r2, r2
   1353e:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
   13540:	1cbb      	adds	r3, r7, #2
   13542:	881b      	ldrh	r3, [r3, #0]
   13544:	1cba      	adds	r2, r7, #2
   13546:	1e59      	subs	r1, r3, #1
   13548:	8011      	strh	r1, [r2, #0]
   1354a:	2b00      	cmp	r3, #0
   1354c:	d000      	beq.n	13550 <spi_transceive_buffer_wait+0x164>
   1354e:	e773      	b.n	13438 <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   13550:	68fb      	ldr	r3, [r7, #12]
   13552:	795b      	ldrb	r3, [r3, #5]
   13554:	2b01      	cmp	r3, #1
   13556:	d10a      	bne.n	1356e <spi_transceive_buffer_wait+0x182>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   13558:	46c0      	nop			; (mov r8, r8)
   1355a:	68fb      	ldr	r3, [r7, #12]
   1355c:	1c18      	adds	r0, r3, #0
   1355e:	4b0a      	ldr	r3, [pc, #40]	; (13588 <spi_transceive_buffer_wait+0x19c>)
   13560:	4798      	blx	r3
   13562:	1c03      	adds	r3, r0, #0
   13564:	2201      	movs	r2, #1
   13566:	4053      	eors	r3, r2
   13568:	b2db      	uxtb	r3, r3
   1356a:	2b00      	cmp	r3, #0
   1356c:	d1f5      	bne.n	1355a <spi_transceive_buffer_wait+0x16e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
   1356e:	2300      	movs	r3, #0
}
   13570:	1c18      	adds	r0, r3, #0
   13572:	46bd      	mov	sp, r7
   13574:	b009      	add	sp, #36	; 0x24
   13576:	bd90      	pop	{r4, r7, pc}
   13578:	00012d65 	.word	0x00012d65
   1357c:	00012db5 	.word	0x00012db5
   13580:	00012d8d 	.word	0x00012d8d
   13584:	00012dfd 	.word	0x00012dfd
   13588:	00012d3d 	.word	0x00012d3d

0001358c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   1358c:	b580      	push	{r7, lr}
   1358e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13590:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13594:	4b02      	ldr	r3, [pc, #8]	; (135a0 <NVIC_SystemReset+0x14>)
   13596:	4a03      	ldr	r2, [pc, #12]	; (135a4 <NVIC_SystemReset+0x18>)
   13598:	60da      	str	r2, [r3, #12]
   1359a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1359e:	e7fe      	b.n	1359e <NVIC_SystemReset+0x12>
   135a0:	e000ed00 	.word	0xe000ed00
   135a4:	05fa0004 	.word	0x05fa0004

000135a8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   135a8:	b580      	push	{r7, lr}
   135aa:	b082      	sub	sp, #8
   135ac:	af00      	add	r7, sp, #0
   135ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   135b0:	687b      	ldr	r3, [r7, #4]
   135b2:	2201      	movs	r2, #1
   135b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	2200      	movs	r2, #0
   135ba:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	2206      	movs	r2, #6
   135c0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   135c2:	687b      	ldr	r3, [r7, #4]
   135c4:	2200      	movs	r2, #0
   135c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	2200      	movs	r2, #0
   135cc:	725a      	strb	r2, [r3, #9]
}
   135ce:	46bd      	mov	sp, r7
   135d0:	b002      	add	sp, #8
   135d2:	bd80      	pop	{r7, pc}

000135d4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   135d4:	b580      	push	{r7, lr}
   135d6:	b082      	sub	sp, #8
   135d8:	af00      	add	r7, sp, #0
   135da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	2200      	movs	r2, #0
   135e0:	701a      	strb	r2, [r3, #0]
}
   135e2:	46bd      	mov	sp, r7
   135e4:	b002      	add	sp, #8
   135e6:	bd80      	pop	{r7, pc}

000135e8 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   135e8:	b580      	push	{r7, lr}
   135ea:	b082      	sub	sp, #8
   135ec:	af00      	add	r7, sp, #0
   135ee:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   135f0:	687b      	ldr	r3, [r7, #4]
   135f2:	2203      	movs	r2, #3
   135f4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   135f6:	687b      	ldr	r3, [r7, #4]
   135f8:	2200      	movs	r2, #0
   135fa:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	2201      	movs	r2, #1
   13600:	709a      	strb	r2, [r3, #2]
}
   13602:	46bd      	mov	sp, r7
   13604:	b002      	add	sp, #8
   13606:	bd80      	pop	{r7, pc}

00013608 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   13608:	b580      	push	{r7, lr}
   1360a:	b082      	sub	sp, #8
   1360c:	af00      	add	r7, sp, #0
   1360e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	2200      	movs	r2, #0
   13614:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   13616:	687b      	ldr	r3, [r7, #4]
   13618:	2200      	movs	r2, #0
   1361a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	2200      	movs	r2, #0
   13620:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13622:	687b      	ldr	r3, [r7, #4]
   13624:	2200      	movs	r2, #0
   13626:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   13628:	687b      	ldr	r3, [r7, #4]
   1362a:	2200      	movs	r2, #0
   1362c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   1362e:	687b      	ldr	r3, [r7, #4]
   13630:	2201      	movs	r2, #1
   13632:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   13634:	687b      	ldr	r3, [r7, #4]
   13636:	2207      	movs	r2, #7
   13638:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	223f      	movs	r2, #63	; 0x3f
   1363e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   13640:	687b      	ldr	r3, [r7, #4]
   13642:	2201      	movs	r2, #1
   13644:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   13646:	687b      	ldr	r3, [r7, #4]
   13648:	2201      	movs	r2, #1
   1364a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   1364c:	687b      	ldr	r3, [r7, #4]
   1364e:	2206      	movs	r2, #6
   13650:	821a      	strh	r2, [r3, #16]
}
   13652:	46bd      	mov	sp, r7
   13654:	b002      	add	sp, #8
   13656:	bd80      	pop	{r7, pc}

00013658 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   13658:	b580      	push	{r7, lr}
   1365a:	b082      	sub	sp, #8
   1365c:	af00      	add	r7, sp, #0
   1365e:	1c02      	adds	r2, r0, #0
   13660:	1dfb      	adds	r3, r7, #7
   13662:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
   13664:	4b03      	ldr	r3, [pc, #12]	; (13674 <system_cpu_clock_set_divider+0x1c>)
   13666:	1dfa      	adds	r2, r7, #7
   13668:	7812      	ldrb	r2, [r2, #0]
   1366a:	721a      	strb	r2, [r3, #8]
}
   1366c:	46bd      	mov	sp, r7
   1366e:	b002      	add	sp, #8
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	40000400 	.word	0x40000400

00013678 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   13678:	b580      	push	{r7, lr}
   1367a:	b082      	sub	sp, #8
   1367c:	af00      	add	r7, sp, #0
   1367e:	1c0a      	adds	r2, r1, #0
   13680:	1dfb      	adds	r3, r7, #7
   13682:	1c01      	adds	r1, r0, #0
   13684:	7019      	strb	r1, [r3, #0]
   13686:	1dbb      	adds	r3, r7, #6
   13688:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1368a:	1dfb      	adds	r3, r7, #7
   1368c:	781b      	ldrb	r3, [r3, #0]
   1368e:	2b01      	cmp	r3, #1
   13690:	d008      	beq.n	136a4 <system_apb_clock_set_divider+0x2c>
   13692:	2b02      	cmp	r3, #2
   13694:	d00b      	beq.n	136ae <system_apb_clock_set_divider+0x36>
   13696:	2b00      	cmp	r3, #0
   13698:	d10e      	bne.n	136b8 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   1369a:	4b0b      	ldr	r3, [pc, #44]	; (136c8 <system_apb_clock_set_divider+0x50>)
   1369c:	1dba      	adds	r2, r7, #6
   1369e:	7812      	ldrb	r2, [r2, #0]
   136a0:	725a      	strb	r2, [r3, #9]
			break;
   136a2:	e00b      	b.n	136bc <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   136a4:	4b08      	ldr	r3, [pc, #32]	; (136c8 <system_apb_clock_set_divider+0x50>)
   136a6:	1dba      	adds	r2, r7, #6
   136a8:	7812      	ldrb	r2, [r2, #0]
   136aa:	729a      	strb	r2, [r3, #10]
			break;
   136ac:	e006      	b.n	136bc <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   136ae:	4b06      	ldr	r3, [pc, #24]	; (136c8 <system_apb_clock_set_divider+0x50>)
   136b0:	1dba      	adds	r2, r7, #6
   136b2:	7812      	ldrb	r2, [r2, #0]
   136b4:	72da      	strb	r2, [r3, #11]
			break;
   136b6:	e001      	b.n	136bc <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   136b8:	2317      	movs	r3, #23
   136ba:	e000      	b.n	136be <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
   136bc:	2300      	movs	r3, #0
}
   136be:	1c18      	adds	r0, r3, #0
   136c0:	46bd      	mov	sp, r7
   136c2:	b002      	add	sp, #8
   136c4:	bd80      	pop	{r7, pc}
   136c6:	46c0      	nop			; (mov r8, r8)
   136c8:	40000400 	.word	0x40000400

000136cc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   136cc:	b580      	push	{r7, lr}
   136ce:	b082      	sub	sp, #8
   136d0:	af00      	add	r7, sp, #0
   136d2:	1c02      	adds	r2, r0, #0
   136d4:	1dfb      	adds	r3, r7, #7
   136d6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   136d8:	4b08      	ldr	r3, [pc, #32]	; (136fc <system_flash_set_waitstates+0x30>)
   136da:	1dfa      	adds	r2, r7, #7
   136dc:	7811      	ldrb	r1, [r2, #0]
   136de:	220f      	movs	r2, #15
   136e0:	400a      	ands	r2, r1
   136e2:	b2d1      	uxtb	r1, r2
   136e4:	220f      	movs	r2, #15
   136e6:	400a      	ands	r2, r1
   136e8:	0052      	lsls	r2, r2, #1
   136ea:	6859      	ldr	r1, [r3, #4]
   136ec:	201e      	movs	r0, #30
   136ee:	4381      	bics	r1, r0
   136f0:	430a      	orrs	r2, r1
   136f2:	605a      	str	r2, [r3, #4]
}
   136f4:	46bd      	mov	sp, r7
   136f6:	b002      	add	sp, #8
   136f8:	bd80      	pop	{r7, pc}
   136fa:	46c0      	nop			; (mov r8, r8)
   136fc:	41004000 	.word	0x41004000

00013700 <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
   13700:	b580      	push	{r7, lr}
   13702:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
   13704:	4b02      	ldr	r3, [pc, #8]	; (13710 <system_get_device_id+0x10>)
   13706:	699b      	ldr	r3, [r3, #24]
}
   13708:	1c18      	adds	r0, r3, #0
   1370a:	46bd      	mov	sp, r7
   1370c:	bd80      	pop	{r7, pc}
   1370e:	46c0      	nop			; (mov r8, r8)
   13710:	41002000 	.word	0x41002000

00013714 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
   13714:	b580      	push	{r7, lr}
   13716:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   13718:	46c0      	nop			; (mov r8, r8)
   1371a:	4b03      	ldr	r3, [pc, #12]	; (13728 <_system_dfll_wait_for_sync+0x14>)
   1371c:	68da      	ldr	r2, [r3, #12]
   1371e:	2310      	movs	r3, #16
   13720:	4013      	ands	r3, r2
   13722:	d0fa      	beq.n	1371a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   13724:	46bd      	mov	sp, r7
   13726:	bd80      	pop	{r7, pc}
   13728:	40000800 	.word	0x40000800

0001372c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   1372c:	b580      	push	{r7, lr}
   1372e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
   13730:	4a0c      	ldr	r2, [pc, #48]	; (13764 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13732:	4b0d      	ldr	r3, [pc, #52]	; (13768 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13734:	681b      	ldr	r3, [r3, #0]
   13736:	b29b      	uxth	r3, r3
   13738:	2180      	movs	r1, #128	; 0x80
   1373a:	438b      	bics	r3, r1
   1373c:	b29b      	uxth	r3, r3
   1373e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
   13740:	4b0a      	ldr	r3, [pc, #40]	; (1376c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   13742:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   13744:	4b07      	ldr	r3, [pc, #28]	; (13764 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13746:	4a08      	ldr	r2, [pc, #32]	; (13768 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13748:	6892      	ldr	r2, [r2, #8]
   1374a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1374c:	4b05      	ldr	r3, [pc, #20]	; (13764 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1374e:	4a06      	ldr	r2, [pc, #24]	; (13768 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13750:	6852      	ldr	r2, [r2, #4]
   13752:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   13754:	4a03      	ldr	r2, [pc, #12]	; (13764 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13756:	4b04      	ldr	r3, [pc, #16]	; (13768 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13758:	681b      	ldr	r3, [r3, #0]
   1375a:	b29b      	uxth	r3, r3
   1375c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1375e:	46bd      	mov	sp, r7
   13760:	bd80      	pop	{r7, pc}
   13762:	46c0      	nop			; (mov r8, r8)
   13764:	40000800 	.word	0x40000800
   13768:	20000524 	.word	0x20000524
   1376c:	00013715 	.word	0x00013715

00013770 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   13770:	b580      	push	{r7, lr}
   13772:	b082      	sub	sp, #8
   13774:	af00      	add	r7, sp, #0
   13776:	1c02      	adds	r2, r0, #0
   13778:	1dfb      	adds	r3, r7, #7
   1377a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1377c:	1dfb      	adds	r3, r7, #7
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	2b07      	cmp	r3, #7
   13782:	d836      	bhi.n	137f2 <system_clock_source_get_hz+0x82>
   13784:	009a      	lsls	r2, r3, #2
   13786:	4b1d      	ldr	r3, [pc, #116]	; (137fc <system_clock_source_get_hz+0x8c>)
   13788:	18d3      	adds	r3, r2, r3
   1378a:	681b      	ldr	r3, [r3, #0]
   1378c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1378e:	4b1c      	ldr	r3, [pc, #112]	; (13800 <system_clock_source_get_hz+0x90>)
   13790:	68db      	ldr	r3, [r3, #12]
   13792:	e02f      	b.n	137f4 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   13794:	4b1b      	ldr	r3, [pc, #108]	; (13804 <system_clock_source_get_hz+0x94>)
   13796:	6a1b      	ldr	r3, [r3, #32]
   13798:	0a1b      	lsrs	r3, r3, #8
   1379a:	1c1a      	adds	r2, r3, #0
   1379c:	2303      	movs	r3, #3
   1379e:	4013      	ands	r3, r2
   137a0:	b2db      	uxtb	r3, r3
   137a2:	4a19      	ldr	r2, [pc, #100]	; (13808 <system_clock_source_get_hz+0x98>)
   137a4:	1c11      	adds	r1, r2, #0
   137a6:	40d9      	lsrs	r1, r3
   137a8:	1c0b      	adds	r3, r1, #0
   137aa:	e023      	b.n	137f4 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   137ac:	2380      	movs	r3, #128	; 0x80
   137ae:	021b      	lsls	r3, r3, #8
   137b0:	e020      	b.n	137f4 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   137b2:	2380      	movs	r3, #128	; 0x80
   137b4:	021b      	lsls	r3, r3, #8
   137b6:	e01d      	b.n	137f4 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   137b8:	4b11      	ldr	r3, [pc, #68]	; (13800 <system_clock_source_get_hz+0x90>)
   137ba:	691b      	ldr	r3, [r3, #16]
   137bc:	e01a      	b.n	137f4 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   137be:	4b10      	ldr	r3, [pc, #64]	; (13800 <system_clock_source_get_hz+0x90>)
   137c0:	681a      	ldr	r2, [r3, #0]
   137c2:	2302      	movs	r3, #2
   137c4:	4013      	ands	r3, r2
   137c6:	d101      	bne.n	137cc <system_clock_source_get_hz+0x5c>
			return 0;
   137c8:	2300      	movs	r3, #0
   137ca:	e013      	b.n	137f4 <system_clock_source_get_hz+0x84>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   137cc:	4b0f      	ldr	r3, [pc, #60]	; (1380c <system_clock_source_get_hz+0x9c>)
   137ce:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   137d0:	4b0b      	ldr	r3, [pc, #44]	; (13800 <system_clock_source_get_hz+0x90>)
   137d2:	681a      	ldr	r2, [r3, #0]
   137d4:	2304      	movs	r3, #4
   137d6:	4013      	ands	r3, r2
   137d8:	d009      	beq.n	137ee <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   137da:	2000      	movs	r0, #0
   137dc:	4b0c      	ldr	r3, [pc, #48]	; (13810 <system_clock_source_get_hz+0xa0>)
   137de:	4798      	blx	r3
   137e0:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
   137e2:	4b07      	ldr	r3, [pc, #28]	; (13800 <system_clock_source_get_hz+0x90>)
   137e4:	689b      	ldr	r3, [r3, #8]
   137e6:	041b      	lsls	r3, r3, #16
   137e8:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   137ea:	4353      	muls	r3, r2
   137ec:	e002      	b.n	137f4 <system_clock_source_get_hz+0x84>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   137ee:	4b09      	ldr	r3, [pc, #36]	; (13814 <system_clock_source_get_hz+0xa4>)
   137f0:	e000      	b.n	137f4 <system_clock_source_get_hz+0x84>

	default:
		return 0;
   137f2:	2300      	movs	r3, #0
	}
}
   137f4:	1c18      	adds	r0, r3, #0
   137f6:	46bd      	mov	sp, r7
   137f8:	b002      	add	sp, #8
   137fa:	bd80      	pop	{r7, pc}
   137fc:	0001864c 	.word	0x0001864c
   13800:	20000524 	.word	0x20000524
   13804:	40000800 	.word	0x40000800
   13808:	007a1200 	.word	0x007a1200
   1380c:	00013715 	.word	0x00013715
   13810:	000141a1 	.word	0x000141a1
   13814:	02dc6c00 	.word	0x02dc6c00

00013818 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b084      	sub	sp, #16
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   13820:	4b16      	ldr	r3, [pc, #88]	; (1387c <system_clock_source_osc8m_set_config+0x64>)
   13822:	6a1b      	ldr	r3, [r3, #32]
   13824:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   13826:	687b      	ldr	r3, [r7, #4]
   13828:	781b      	ldrb	r3, [r3, #0]
   1382a:	1c1a      	adds	r2, r3, #0
   1382c:	2303      	movs	r3, #3
   1382e:	4013      	ands	r3, r2
   13830:	b2d9      	uxtb	r1, r3
   13832:	1c3b      	adds	r3, r7, #0
   13834:	330d      	adds	r3, #13
   13836:	2203      	movs	r2, #3
   13838:	400a      	ands	r2, r1
   1383a:	7819      	ldrb	r1, [r3, #0]
   1383c:	2003      	movs	r0, #3
   1383e:	4381      	bics	r1, r0
   13840:	430a      	orrs	r2, r1
   13842:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   13844:	687b      	ldr	r3, [r7, #4]
   13846:	789a      	ldrb	r2, [r3, #2]
   13848:	1c3b      	adds	r3, r7, #0
   1384a:	330c      	adds	r3, #12
   1384c:	01d2      	lsls	r2, r2, #7
   1384e:	7818      	ldrb	r0, [r3, #0]
   13850:	217f      	movs	r1, #127	; 0x7f
   13852:	4001      	ands	r1, r0
   13854:	430a      	orrs	r2, r1
   13856:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   13858:	687b      	ldr	r3, [r7, #4]
   1385a:	7859      	ldrb	r1, [r3, #1]
   1385c:	1c3b      	adds	r3, r7, #0
   1385e:	330c      	adds	r3, #12
   13860:	2201      	movs	r2, #1
   13862:	400a      	ands	r2, r1
   13864:	0192      	lsls	r2, r2, #6
   13866:	7819      	ldrb	r1, [r3, #0]
   13868:	2040      	movs	r0, #64	; 0x40
   1386a:	4381      	bics	r1, r0
   1386c:	430a      	orrs	r2, r1
   1386e:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   13870:	4b02      	ldr	r3, [pc, #8]	; (1387c <system_clock_source_osc8m_set_config+0x64>)
   13872:	68fa      	ldr	r2, [r7, #12]
   13874:	621a      	str	r2, [r3, #32]
}
   13876:	46bd      	mov	sp, r7
   13878:	b004      	add	sp, #16
   1387a:	bd80      	pop	{r7, pc}
   1387c:	40000800 	.word	0x40000800

00013880 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   13880:	b580      	push	{r7, lr}
   13882:	b084      	sub	sp, #16
   13884:	af00      	add	r7, sp, #0
   13886:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
   13888:	4b39      	ldr	r3, [pc, #228]	; (13970 <system_clock_source_dfll_set_config+0xf0>)
   1388a:	4798      	blx	r3
   1388c:	1c03      	adds	r3, r0, #0
   1388e:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   13890:	68fa      	ldr	r2, [r7, #12]
   13892:	23f0      	movs	r3, #240	; 0xf0
   13894:	011b      	lsls	r3, r3, #4
   13896:	4013      	ands	r3, r2
   13898:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   1389a:	68fb      	ldr	r3, [r7, #12]
   1389c:	0a1b      	lsrs	r3, r3, #8
   1389e:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
   138a0:	68fb      	ldr	r3, [r7, #12]
   138a2:	2b02      	cmp	r3, #2
   138a4:	d80f      	bhi.n	138c6 <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	7a1b      	ldrb	r3, [r3, #8]
   138aa:	021b      	lsls	r3, r3, #8
   138ac:	1c1a      	adds	r2, r3, #0
   138ae:	23f8      	movs	r3, #248	; 0xf8
   138b0:	015b      	lsls	r3, r3, #5
   138b2:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	895b      	ldrh	r3, [r3, #10]
   138b8:	1c19      	adds	r1, r3, #0
   138ba:	23ff      	movs	r3, #255	; 0xff
   138bc:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   138be:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
   138c0:	4b2c      	ldr	r3, [pc, #176]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   138c2:	605a      	str	r2, [r3, #4]
   138c4:	e00b      	b.n	138de <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   138c6:	687b      	ldr	r3, [r7, #4]
   138c8:	7a1b      	ldrb	r3, [r3, #8]
   138ca:	029b      	lsls	r3, r3, #10
   138cc:	041b      	lsls	r3, r3, #16
   138ce:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
   138d0:	687b      	ldr	r3, [r7, #4]
   138d2:	895b      	ldrh	r3, [r3, #10]
   138d4:	059b      	lsls	r3, r3, #22
   138d6:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   138d8:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
   138da:	4b26      	ldr	r3, [pc, #152]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   138dc:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   138de:	687b      	ldr	r3, [r7, #4]
   138e0:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   138e2:	687b      	ldr	r3, [r7, #4]
   138e4:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   138e6:	4313      	orrs	r3, r2
   138e8:	b2db      	uxtb	r3, r3
   138ea:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   138f0:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   138f2:	687b      	ldr	r3, [r7, #4]
   138f4:	889b      	ldrh	r3, [r3, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   138f6:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	785b      	ldrb	r3, [r3, #1]
   138fc:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   138fe:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
   13900:	4b1c      	ldr	r3, [pc, #112]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   13902:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   13904:	687b      	ldr	r3, [r7, #4]
   13906:	781b      	ldrb	r3, [r3, #0]
   13908:	2b04      	cmp	r3, #4
   1390a:	d12e      	bne.n	1396a <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
   1390c:	68fb      	ldr	r3, [r7, #12]
   1390e:	2b02      	cmp	r3, #2
   13910:	d814      	bhi.n	1393c <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   13912:	687b      	ldr	r3, [r7, #4]
   13914:	7b1b      	ldrb	r3, [r3, #12]
   13916:	061b      	lsls	r3, r3, #24
   13918:	1c1a      	adds	r2, r3, #0
   1391a:	23f8      	movs	r3, #248	; 0xf8
   1391c:	055b      	lsls	r3, r3, #21
   1391e:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	89db      	ldrh	r3, [r3, #14]
   13924:	041b      	lsls	r3, r3, #16
   13926:	1c19      	adds	r1, r3, #0
   13928:	23ff      	movs	r3, #255	; 0xff
   1392a:	041b      	lsls	r3, r3, #16
   1392c:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   1392e:	431a      	orrs	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13930:	687b      	ldr	r3, [r7, #4]
   13932:	8a1b      	ldrh	r3, [r3, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   13934:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
   13936:	4b0f      	ldr	r3, [pc, #60]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   13938:	609a      	str	r2, [r3, #8]
   1393a:	e00f      	b.n	1395c <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   1393c:	687b      	ldr	r3, [r7, #4]
   1393e:	7b1b      	ldrb	r3, [r3, #12]
   13940:	069b      	lsls	r3, r3, #26
   13942:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	89db      	ldrh	r3, [r3, #14]
   13948:	041b      	lsls	r3, r3, #16
   1394a:	1c19      	adds	r1, r3, #0
   1394c:	4b0a      	ldr	r3, [pc, #40]	; (13978 <system_clock_source_dfll_set_config+0xf8>)
   1394e:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   13950:	431a      	orrs	r2, r3
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13952:	687b      	ldr	r3, [r7, #4]
   13954:	8a1b      	ldrh	r3, [r3, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   13956:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
   13958:	4b06      	ldr	r3, [pc, #24]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   1395a:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   1395c:	4b05      	ldr	r3, [pc, #20]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   1395e:	681a      	ldr	r2, [r3, #0]
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	431a      	orrs	r2, r3
   13966:	4b03      	ldr	r3, [pc, #12]	; (13974 <system_clock_source_dfll_set_config+0xf4>)
   13968:	601a      	str	r2, [r3, #0]
	}
}
   1396a:	46bd      	mov	sp, r7
   1396c:	b004      	add	sp, #16
   1396e:	bd80      	pop	{r7, pc}
   13970:	00013701 	.word	0x00013701
   13974:	20000524 	.word	0x20000524
   13978:	03ff0000 	.word	0x03ff0000

0001397c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   1397c:	b580      	push	{r7, lr}
   1397e:	b082      	sub	sp, #8
   13980:	af00      	add	r7, sp, #0
   13982:	1c02      	adds	r2, r0, #0
   13984:	1dfb      	adds	r3, r7, #7
   13986:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   13988:	1dfb      	adds	r3, r7, #7
   1398a:	781b      	ldrb	r3, [r3, #0]
   1398c:	2b07      	cmp	r3, #7
   1398e:	d830      	bhi.n	139f2 <system_clock_source_enable+0x76>
   13990:	009a      	lsls	r2, r3, #2
   13992:	4b1b      	ldr	r3, [pc, #108]	; (13a00 <system_clock_source_enable+0x84>)
   13994:	18d3      	adds	r3, r2, r3
   13996:	681b      	ldr	r3, [r3, #0]
   13998:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1399a:	4b1a      	ldr	r3, [pc, #104]	; (13a04 <system_clock_source_enable+0x88>)
   1399c:	4a19      	ldr	r2, [pc, #100]	; (13a04 <system_clock_source_enable+0x88>)
   1399e:	6a12      	ldr	r2, [r2, #32]
   139a0:	2102      	movs	r1, #2
   139a2:	430a      	orrs	r2, r1
   139a4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   139a6:	2300      	movs	r3, #0
   139a8:	e026      	b.n	139f8 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   139aa:	4b16      	ldr	r3, [pc, #88]	; (13a04 <system_clock_source_enable+0x88>)
   139ac:	4a15      	ldr	r2, [pc, #84]	; (13a04 <system_clock_source_enable+0x88>)
   139ae:	6992      	ldr	r2, [r2, #24]
   139b0:	2102      	movs	r1, #2
   139b2:	430a      	orrs	r2, r1
   139b4:	619a      	str	r2, [r3, #24]
		break;
   139b6:	e01e      	b.n	139f6 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   139b8:	4b12      	ldr	r3, [pc, #72]	; (13a04 <system_clock_source_enable+0x88>)
   139ba:	4a12      	ldr	r2, [pc, #72]	; (13a04 <system_clock_source_enable+0x88>)
   139bc:	8a12      	ldrh	r2, [r2, #16]
   139be:	b292      	uxth	r2, r2
   139c0:	2102      	movs	r1, #2
   139c2:	430a      	orrs	r2, r1
   139c4:	b292      	uxth	r2, r2
   139c6:	821a      	strh	r2, [r3, #16]
		break;
   139c8:	e015      	b.n	139f6 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   139ca:	4b0e      	ldr	r3, [pc, #56]	; (13a04 <system_clock_source_enable+0x88>)
   139cc:	4a0d      	ldr	r2, [pc, #52]	; (13a04 <system_clock_source_enable+0x88>)
   139ce:	8a92      	ldrh	r2, [r2, #20]
   139d0:	b292      	uxth	r2, r2
   139d2:	2102      	movs	r1, #2
   139d4:	430a      	orrs	r2, r1
   139d6:	b292      	uxth	r2, r2
   139d8:	829a      	strh	r2, [r3, #20]
		break;
   139da:	e00c      	b.n	139f6 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   139dc:	4b0a      	ldr	r3, [pc, #40]	; (13a08 <system_clock_source_enable+0x8c>)
   139de:	681b      	ldr	r3, [r3, #0]
   139e0:	2202      	movs	r2, #2
   139e2:	431a      	orrs	r2, r3
   139e4:	4b08      	ldr	r3, [pc, #32]	; (13a08 <system_clock_source_enable+0x8c>)
   139e6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   139e8:	4b08      	ldr	r3, [pc, #32]	; (13a0c <system_clock_source_enable+0x90>)
   139ea:	4798      	blx	r3
		break;
   139ec:	e003      	b.n	139f6 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   139ee:	2300      	movs	r3, #0
   139f0:	e002      	b.n	139f8 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   139f2:	2317      	movs	r3, #23
   139f4:	e000      	b.n	139f8 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
   139f6:	2300      	movs	r3, #0
}
   139f8:	1c18      	adds	r0, r3, #0
   139fa:	46bd      	mov	sp, r7
   139fc:	b002      	add	sp, #8
   139fe:	bd80      	pop	{r7, pc}
   13a00:	0001866c 	.word	0x0001866c
   13a04:	40000800 	.word	0x40000800
   13a08:	20000524 	.word	0x20000524
   13a0c:	0001372d 	.word	0x0001372d

00013a10 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   13a10:	b580      	push	{r7, lr}
   13a12:	b084      	sub	sp, #16
   13a14:	af00      	add	r7, sp, #0
   13a16:	1c02      	adds	r2, r0, #0
   13a18:	1dfb      	adds	r3, r7, #7
   13a1a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   13a1c:	2300      	movs	r3, #0
   13a1e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   13a20:	1dfb      	adds	r3, r7, #7
   13a22:	781b      	ldrb	r3, [r3, #0]
   13a24:	2b07      	cmp	r3, #7
   13a26:	d815      	bhi.n	13a54 <system_clock_source_is_ready+0x44>
   13a28:	009a      	lsls	r2, r3, #2
   13a2a:	4b12      	ldr	r3, [pc, #72]	; (13a74 <system_clock_source_is_ready+0x64>)
   13a2c:	18d3      	adds	r3, r2, r3
   13a2e:	681b      	ldr	r3, [r3, #0]
   13a30:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   13a32:	2308      	movs	r3, #8
   13a34:	60fb      	str	r3, [r7, #12]
		break;
   13a36:	e00f      	b.n	13a58 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   13a38:	2304      	movs	r3, #4
   13a3a:	60fb      	str	r3, [r7, #12]
		break;
   13a3c:	e00c      	b.n	13a58 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   13a3e:	2301      	movs	r3, #1
   13a40:	60fb      	str	r3, [r7, #12]
		break;
   13a42:	e009      	b.n	13a58 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   13a44:	2302      	movs	r3, #2
   13a46:	60fb      	str	r3, [r7, #12]
		break;
   13a48:	e006      	b.n	13a58 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   13a4a:	23d0      	movs	r3, #208	; 0xd0
   13a4c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   13a4e:	e003      	b.n	13a58 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   13a50:	2301      	movs	r3, #1
   13a52:	e00a      	b.n	13a6a <system_clock_source_is_ready+0x5a>

	default:
		return false;
   13a54:	2300      	movs	r3, #0
   13a56:	e008      	b.n	13a6a <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   13a58:	4b07      	ldr	r3, [pc, #28]	; (13a78 <system_clock_source_is_ready+0x68>)
   13a5a:	68db      	ldr	r3, [r3, #12]
   13a5c:	68fa      	ldr	r2, [r7, #12]
   13a5e:	401a      	ands	r2, r3
   13a60:	68fb      	ldr	r3, [r7, #12]
   13a62:	1ad3      	subs	r3, r2, r3
   13a64:	425a      	negs	r2, r3
   13a66:	4153      	adcs	r3, r2
   13a68:	b2db      	uxtb	r3, r3
}
   13a6a:	1c18      	adds	r0, r3, #0
   13a6c:	46bd      	mov	sp, r7
   13a6e:	b004      	add	sp, #16
   13a70:	bd80      	pop	{r7, pc}
   13a72:	46c0      	nop			; (mov r8, r8)
   13a74:	0001868c 	.word	0x0001868c
   13a78:	40000800 	.word	0x40000800

00013a7c <system_clock_init>:
 */
static uint8_t tries; 
uint32_t clockAttempts = 0;
uint8_t ButtonCheckPower(void);
void system_clock_init(void)
{
   13a7c:	b580      	push	{r7, lr}
   13a7e:	b0a2      	sub	sp, #136	; 0x88
   13a80:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
   13a82:	4b88      	ldr	r3, [pc, #544]	; (13ca4 <system_clock_init+0x228>)
   13a84:	4a88      	ldr	r2, [pc, #544]	; (13ca8 <system_clock_init+0x22c>)
   13a86:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_BOD12DET | SYSCTRL_INTFLAG_BOD33DET |
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   13a88:	2003      	movs	r0, #3
   13a8a:	4b88      	ldr	r3, [pc, #544]	; (13cac <system_clock_init+0x230>)
   13a8c:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   13a8e:	1c3b      	adds	r3, r7, #0
   13a90:	3374      	adds	r3, #116	; 0x74
   13a92:	1c18      	adds	r0, r3, #0
   13a94:	4b86      	ldr	r3, [pc, #536]	; (13cb0 <system_clock_init+0x234>)
   13a96:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   13a98:	1c3b      	adds	r3, r7, #0
   13a9a:	3374      	adds	r3, #116	; 0x74
   13a9c:	2204      	movs	r2, #4
   13a9e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   13aa0:	1c3b      	adds	r3, r7, #0
   13aa2:	3374      	adds	r3, #116	; 0x74
   13aa4:	2200      	movs	r2, #0
   13aa6:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   13aa8:	1c3b      	adds	r3, r7, #0
   13aaa:	3374      	adds	r3, #116	; 0x74
   13aac:	2200      	movs	r2, #0
   13aae:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   13ab0:	1c3b      	adds	r3, r7, #0
   13ab2:	3374      	adds	r3, #116	; 0x74
   13ab4:	2200      	movs	r2, #0
   13ab6:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13ab8:	1c3b      	adds	r3, r7, #0
   13aba:	3374      	adds	r3, #116	; 0x74
   13abc:	2200      	movs	r2, #0
   13abe:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   13ac0:	1c3b      	adds	r3, r7, #0
   13ac2:	3374      	adds	r3, #116	; 0x74
   13ac4:	2200      	movs	r2, #0
   13ac6:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   13ac8:	1c3b      	adds	r3, r7, #0
   13aca:	3374      	adds	r3, #116	; 0x74
   13acc:	2206      	movs	r2, #6
   13ace:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   13ad0:	1c3b      	adds	r3, r7, #0
   13ad2:	3374      	adds	r3, #116	; 0x74
   13ad4:	2207      	movs	r2, #7
   13ad6:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   13ad8:	1c3b      	adds	r3, r7, #0
   13ada:	3374      	adds	r3, #116	; 0x74
   13adc:	223f      	movs	r2, #63	; 0x3f
   13ade:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
   13ae0:	1c3b      	adds	r3, r7, #0
   13ae2:	3374      	adds	r3, #116	; 0x74
   13ae4:	1c18      	adds	r0, r3, #0
   13ae6:	4b73      	ldr	r3, [pc, #460]	; (13cb4 <system_clock_init+0x238>)
   13ae8:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   13aea:	1c3b      	adds	r3, r7, #0
   13aec:	3370      	adds	r3, #112	; 0x70
   13aee:	1c18      	adds	r0, r3, #0
   13af0:	4b71      	ldr	r3, [pc, #452]	; (13cb8 <system_clock_init+0x23c>)
   13af2:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   13af4:	1c3b      	adds	r3, r7, #0
   13af6:	3370      	adds	r3, #112	; 0x70
   13af8:	2200      	movs	r2, #0
   13afa:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   13afc:	1c3b      	adds	r3, r7, #0
   13afe:	3370      	adds	r3, #112	; 0x70
   13b00:	2201      	movs	r2, #1
   13b02:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   13b04:	1c3b      	adds	r3, r7, #0
   13b06:	3370      	adds	r3, #112	; 0x70
   13b08:	2200      	movs	r2, #0
   13b0a:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   13b0c:	1c3b      	adds	r3, r7, #0
   13b0e:	3370      	adds	r3, #112	; 0x70
   13b10:	1c18      	adds	r0, r3, #0
   13b12:	4b6a      	ldr	r3, [pc, #424]	; (13cbc <system_clock_init+0x240>)
   13b14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   13b16:	2006      	movs	r0, #6
   13b18:	4b69      	ldr	r3, [pc, #420]	; (13cc0 <system_clock_init+0x244>)
   13b1a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   13b1c:	4b69      	ldr	r3, [pc, #420]	; (13cc4 <system_clock_init+0x248>)
   13b1e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   13b20:	1c3b      	adds	r3, r7, #0
   13b22:	3358      	adds	r3, #88	; 0x58
   13b24:	1c18      	adds	r0, r3, #0
   13b26:	4b68      	ldr	r3, [pc, #416]	; (13cc8 <system_clock_init+0x24c>)
   13b28:	4798      	blx	r3
   13b2a:	1c3b      	adds	r3, r7, #0
   13b2c:	3358      	adds	r3, #88	; 0x58
   13b2e:	2206      	movs	r2, #6
   13b30:	701a      	strb	r2, [r3, #0]
   13b32:	1c3b      	adds	r3, r7, #0
   13b34:	3358      	adds	r3, #88	; 0x58
   13b36:	2201      	movs	r2, #1
   13b38:	605a      	str	r2, [r3, #4]
   13b3a:	1c3b      	adds	r3, r7, #0
   13b3c:	3358      	adds	r3, #88	; 0x58
   13b3e:	2200      	movs	r2, #0
   13b40:	721a      	strb	r2, [r3, #8]
   13b42:	1c3b      	adds	r3, r7, #0
   13b44:	3358      	adds	r3, #88	; 0x58
   13b46:	2200      	movs	r2, #0
   13b48:	725a      	strb	r2, [r3, #9]
   13b4a:	1c3b      	adds	r3, r7, #0
   13b4c:	3358      	adds	r3, #88	; 0x58
   13b4e:	2001      	movs	r0, #1
   13b50:	1c19      	adds	r1, r3, #0
   13b52:	4b5e      	ldr	r3, [pc, #376]	; (13ccc <system_clock_init+0x250>)
   13b54:	4798      	blx	r3
   13b56:	2001      	movs	r0, #1
   13b58:	4b5d      	ldr	r3, [pc, #372]	; (13cd0 <system_clock_init+0x254>)
   13b5a:	4798      	blx	r3
   13b5c:	1c3b      	adds	r3, r7, #0
   13b5e:	3340      	adds	r3, #64	; 0x40
   13b60:	1c18      	adds	r0, r3, #0
   13b62:	4b59      	ldr	r3, [pc, #356]	; (13cc8 <system_clock_init+0x24c>)
   13b64:	4798      	blx	r3
   13b66:	1c3b      	adds	r3, r7, #0
   13b68:	3340      	adds	r3, #64	; 0x40
   13b6a:	2206      	movs	r2, #6
   13b6c:	701a      	strb	r2, [r3, #0]
   13b6e:	1c3b      	adds	r3, r7, #0
   13b70:	3340      	adds	r3, #64	; 0x40
   13b72:	2201      	movs	r2, #1
   13b74:	605a      	str	r2, [r3, #4]
   13b76:	1c3b      	adds	r3, r7, #0
   13b78:	3340      	adds	r3, #64	; 0x40
   13b7a:	2200      	movs	r2, #0
   13b7c:	721a      	strb	r2, [r3, #8]
   13b7e:	1c3b      	adds	r3, r7, #0
   13b80:	3340      	adds	r3, #64	; 0x40
   13b82:	2200      	movs	r2, #0
   13b84:	725a      	strb	r2, [r3, #9]
   13b86:	1c3b      	adds	r3, r7, #0
   13b88:	3340      	adds	r3, #64	; 0x40
   13b8a:	2003      	movs	r0, #3
   13b8c:	1c19      	adds	r1, r3, #0
   13b8e:	4b4f      	ldr	r3, [pc, #316]	; (13ccc <system_clock_init+0x250>)
   13b90:	4798      	blx	r3
   13b92:	2003      	movs	r0, #3
   13b94:	4b4e      	ldr	r3, [pc, #312]	; (13cd0 <system_clock_init+0x254>)
   13b96:	4798      	blx	r3
   13b98:	1c3b      	adds	r3, r7, #0
   13b9a:	3334      	adds	r3, #52	; 0x34
   13b9c:	1c18      	adds	r0, r3, #0
   13b9e:	4b4a      	ldr	r3, [pc, #296]	; (13cc8 <system_clock_init+0x24c>)
   13ba0:	4798      	blx	r3
   13ba2:	1c3b      	adds	r3, r7, #0
   13ba4:	3334      	adds	r3, #52	; 0x34
   13ba6:	2206      	movs	r2, #6
   13ba8:	701a      	strb	r2, [r3, #0]
   13baa:	1c3b      	adds	r3, r7, #0
   13bac:	3334      	adds	r3, #52	; 0x34
   13bae:	2201      	movs	r2, #1
   13bb0:	605a      	str	r2, [r3, #4]
   13bb2:	1c3b      	adds	r3, r7, #0
   13bb4:	3334      	adds	r3, #52	; 0x34
   13bb6:	2200      	movs	r2, #0
   13bb8:	721a      	strb	r2, [r3, #8]
   13bba:	1c3b      	adds	r3, r7, #0
   13bbc:	3334      	adds	r3, #52	; 0x34
   13bbe:	2200      	movs	r2, #0
   13bc0:	725a      	strb	r2, [r3, #9]
   13bc2:	1c3b      	adds	r3, r7, #0
   13bc4:	3334      	adds	r3, #52	; 0x34
   13bc6:	2004      	movs	r0, #4
   13bc8:	1c19      	adds	r1, r3, #0
   13bca:	4b40      	ldr	r3, [pc, #256]	; (13ccc <system_clock_init+0x250>)
   13bcc:	4798      	blx	r3
   13bce:	2004      	movs	r0, #4
   13bd0:	4b3f      	ldr	r3, [pc, #252]	; (13cd0 <system_clock_init+0x254>)
   13bd2:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   13bd4:	1c3b      	adds	r3, r7, #0
   13bd6:	330c      	adds	r3, #12
   13bd8:	1c18      	adds	r0, r3, #0
   13bda:	4b3e      	ldr	r3, [pc, #248]	; (13cd4 <system_clock_init+0x258>)
   13bdc:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   13bde:	1c3b      	adds	r3, r7, #0
   13be0:	330c      	adds	r3, #12
   13be2:	2201      	movs	r2, #1
   13be4:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   13be6:	1c3b      	adds	r3, r7, #0
   13be8:	330c      	adds	r3, #12
   13bea:	2000      	movs	r0, #0
   13bec:	1c19      	adds	r1, r3, #0
   13bee:	4b3a      	ldr	r3, [pc, #232]	; (13cd8 <system_clock_init+0x25c>)
   13bf0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   13bf2:	2000      	movs	r0, #0
   13bf4:	4b39      	ldr	r3, [pc, #228]	; (13cdc <system_clock_init+0x260>)
   13bf6:	4798      	blx	r3
#endif

#if 1 //turn off DFLL
	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   13bf8:	2007      	movs	r0, #7
   13bfa:	4b31      	ldr	r3, [pc, #196]	; (13cc0 <system_clock_init+0x244>)
   13bfc:	4798      	blx	r3
	//--------------------
	// CLK_FIX
	clockAttempts = 0;
   13bfe:	4b38      	ldr	r3, [pc, #224]	; (13ce0 <system_clock_init+0x264>)
   13c00:	2200      	movs	r2, #0
   13c02:	601a      	str	r2, [r3, #0]
	tries++;
   13c04:	4b37      	ldr	r3, [pc, #220]	; (13ce4 <system_clock_init+0x268>)
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	3301      	adds	r3, #1
   13c0a:	b2da      	uxtb	r2, r3
   13c0c:	4b35      	ldr	r3, [pc, #212]	; (13ce4 <system_clock_init+0x268>)
   13c0e:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD
	ButtonCheckPower();
   13c10:	4b35      	ldr	r3, [pc, #212]	; (13ce8 <system_clock_init+0x26c>)
   13c12:	4798      	blx	r3
#endif	
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL))
   13c14:	e016      	b.n	13c44 <system_clock_init+0x1c8>
	{
		clockAttempts++;
   13c16:	4b32      	ldr	r3, [pc, #200]	; (13ce0 <system_clock_init+0x264>)
   13c18:	681b      	ldr	r3, [r3, #0]
   13c1a:	1c5a      	adds	r2, r3, #1
   13c1c:	4b30      	ldr	r3, [pc, #192]	; (13ce0 <system_clock_init+0x264>)
   13c1e:	601a      	str	r2, [r3, #0]
		if (clockAttempts == 0)
   13c20:	4b2f      	ldr	r3, [pc, #188]	; (13ce0 <system_clock_init+0x264>)
   13c22:	681b      	ldr	r3, [r3, #0]
   13c24:	2b00      	cmp	r3, #0
   13c26:	d102      	bne.n	13c2e <system_clock_init+0x1b2>
		{
			clockAttempts = 0xffff;
   13c28:	4b2d      	ldr	r3, [pc, #180]	; (13ce0 <system_clock_init+0x264>)
   13c2a:	4a30      	ldr	r2, [pc, #192]	; (13cec <system_clock_init+0x270>)
   13c2c:	601a      	str	r2, [r3, #0]
		}
		if (clockAttempts > 0xff)
   13c2e:	4b2c      	ldr	r3, [pc, #176]	; (13ce0 <system_clock_init+0x264>)
   13c30:	681b      	ldr	r3, [r3, #0]
   13c32:	2bff      	cmp	r3, #255	; 0xff
   13c34:	d901      	bls.n	13c3a <system_clock_init+0x1be>
		{
			NVIC_SystemReset();	
   13c36:	4b2e      	ldr	r3, [pc, #184]	; (13cf0 <system_clock_init+0x274>)
   13c38:	4798      	blx	r3
		}
#if BRAKEBOARD		
		if (ButtonCheckPower()!= 0)
   13c3a:	4b2b      	ldr	r3, [pc, #172]	; (13ce8 <system_clock_init+0x26c>)
   13c3c:	4798      	blx	r3
   13c3e:	1c03      	adds	r3, r0, #0
   13c40:	2b00      	cmp	r3, #0
   13c42:	d12b      	bne.n	13c9c <system_clock_init+0x220>
	clockAttempts = 0;
	tries++;
#if BRAKEBOARD
	ButtonCheckPower();
#endif	
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL))
   13c44:	2007      	movs	r0, #7
   13c46:	4b2b      	ldr	r3, [pc, #172]	; (13cf4 <system_clock_init+0x278>)
   13c48:	4798      	blx	r3
   13c4a:	1c03      	adds	r3, r0, #0
   13c4c:	2201      	movs	r2, #1
   13c4e:	4053      	eors	r3, r2
   13c50:	b2db      	uxtb	r3, r3
   13c52:	2b00      	cmp	r3, #0
   13c54:	d1df      	bne.n	13c16 <system_clock_init+0x19a>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif
#endif
	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   13c56:	2000      	movs	r0, #0
   13c58:	4b27      	ldr	r3, [pc, #156]	; (13cf8 <system_clock_init+0x27c>)
   13c5a:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   13c5c:	2000      	movs	r0, #0
   13c5e:	2100      	movs	r1, #0
   13c60:	4b26      	ldr	r3, [pc, #152]	; (13cfc <system_clock_init+0x280>)
   13c62:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   13c64:	2001      	movs	r0, #1
   13c66:	2100      	movs	r1, #0
   13c68:	4b24      	ldr	r3, [pc, #144]	; (13cfc <system_clock_init+0x280>)
   13c6a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   13c6c:	1c3b      	adds	r3, r7, #0
   13c6e:	1c18      	adds	r0, r3, #0
   13c70:	4b15      	ldr	r3, [pc, #84]	; (13cc8 <system_clock_init+0x24c>)
   13c72:	4798      	blx	r3
   13c74:	1c3b      	adds	r3, r7, #0
   13c76:	2207      	movs	r2, #7
   13c78:	701a      	strb	r2, [r3, #0]
   13c7a:	1c3b      	adds	r3, r7, #0
   13c7c:	2201      	movs	r2, #1
   13c7e:	605a      	str	r2, [r3, #4]
   13c80:	1c3b      	adds	r3, r7, #0
   13c82:	2200      	movs	r2, #0
   13c84:	721a      	strb	r2, [r3, #8]
   13c86:	1c3b      	adds	r3, r7, #0
   13c88:	2200      	movs	r2, #0
   13c8a:	725a      	strb	r2, [r3, #9]
   13c8c:	1c3b      	adds	r3, r7, #0
   13c8e:	2000      	movs	r0, #0
   13c90:	1c19      	adds	r1, r3, #0
   13c92:	4b0e      	ldr	r3, [pc, #56]	; (13ccc <system_clock_init+0x250>)
   13c94:	4798      	blx	r3
   13c96:	2000      	movs	r0, #0
   13c98:	4b0d      	ldr	r3, [pc, #52]	; (13cd0 <system_clock_init+0x254>)
   13c9a:	4798      	blx	r3
#endif
}
   13c9c:	46bd      	mov	sp, r7
   13c9e:	b022      	add	sp, #136	; 0x88
   13ca0:	bd80      	pop	{r7, pc}
   13ca2:	46c0      	nop			; (mov r8, r8)
   13ca4:	40000800 	.word	0x40000800
   13ca8:	00003610 	.word	0x00003610
   13cac:	000136cd 	.word	0x000136cd
   13cb0:	00013609 	.word	0x00013609
   13cb4:	00013881 	.word	0x00013881
   13cb8:	000135e9 	.word	0x000135e9
   13cbc:	00013819 	.word	0x00013819
   13cc0:	0001397d 	.word	0x0001397d
   13cc4:	00013da1 	.word	0x00013da1
   13cc8:	000135a9 	.word	0x000135a9
   13ccc:	00013dd1 	.word	0x00013dd1
   13cd0:	00013ef9 	.word	0x00013ef9
   13cd4:	000135d5 	.word	0x000135d5
   13cd8:	00014041 	.word	0x00014041
   13cdc:	00014081 	.word	0x00014081
   13ce0:	2000053c 	.word	0x2000053c
   13ce4:	20000538 	.word	0x20000538
   13ce8:	0000bb29 	.word	0x0000bb29
   13cec:	0000ffff 	.word	0x0000ffff
   13cf0:	0001358d 	.word	0x0001358d
   13cf4:	00013a11 	.word	0x00013a11
   13cf8:	00013659 	.word	0x00013659
   13cfc:	00013679 	.word	0x00013679

00013d00 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13d00:	b580      	push	{r7, lr}
   13d02:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
   13d04:	4b06      	ldr	r3, [pc, #24]	; (13d20 <system_gclk_is_syncing+0x20>)
   13d06:	785b      	ldrb	r3, [r3, #1]
   13d08:	b2db      	uxtb	r3, r3
   13d0a:	b2db      	uxtb	r3, r3
   13d0c:	b25b      	sxtb	r3, r3
   13d0e:	2b00      	cmp	r3, #0
   13d10:	da01      	bge.n	13d16 <system_gclk_is_syncing+0x16>
		return true;
   13d12:	2301      	movs	r3, #1
   13d14:	e000      	b.n	13d18 <system_gclk_is_syncing+0x18>
	}

	return false;
   13d16:	2300      	movs	r3, #0
}
   13d18:	1c18      	adds	r0, r3, #0
   13d1a:	46bd      	mov	sp, r7
   13d1c:	bd80      	pop	{r7, pc}
   13d1e:	46c0      	nop			; (mov r8, r8)
   13d20:	40000c00 	.word	0x40000c00

00013d24 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13d24:	b580      	push	{r7, lr}
   13d26:	b082      	sub	sp, #8
   13d28:	af00      	add	r7, sp, #0
   13d2a:	1c02      	adds	r2, r0, #0
   13d2c:	6039      	str	r1, [r7, #0]
   13d2e:	1dfb      	adds	r3, r7, #7
   13d30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13d32:	1dfb      	adds	r3, r7, #7
   13d34:	781b      	ldrb	r3, [r3, #0]
   13d36:	2b01      	cmp	r3, #1
   13d38:	d00a      	beq.n	13d50 <system_apb_clock_set_mask+0x2c>
   13d3a:	2b02      	cmp	r3, #2
   13d3c:	d00f      	beq.n	13d5e <system_apb_clock_set_mask+0x3a>
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d114      	bne.n	13d6c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13d42:	4b0e      	ldr	r3, [pc, #56]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d44:	4a0d      	ldr	r2, [pc, #52]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d46:	6991      	ldr	r1, [r2, #24]
   13d48:	683a      	ldr	r2, [r7, #0]
   13d4a:	430a      	orrs	r2, r1
   13d4c:	619a      	str	r2, [r3, #24]
			break;
   13d4e:	e00f      	b.n	13d70 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13d50:	4b0a      	ldr	r3, [pc, #40]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d52:	4a0a      	ldr	r2, [pc, #40]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d54:	69d1      	ldr	r1, [r2, #28]
   13d56:	683a      	ldr	r2, [r7, #0]
   13d58:	430a      	orrs	r2, r1
   13d5a:	61da      	str	r2, [r3, #28]
			break;
   13d5c:	e008      	b.n	13d70 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13d5e:	4b07      	ldr	r3, [pc, #28]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d60:	4a06      	ldr	r2, [pc, #24]	; (13d7c <system_apb_clock_set_mask+0x58>)
   13d62:	6a11      	ldr	r1, [r2, #32]
   13d64:	683a      	ldr	r2, [r7, #0]
   13d66:	430a      	orrs	r2, r1
   13d68:	621a      	str	r2, [r3, #32]
			break;
   13d6a:	e001      	b.n	13d70 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13d6c:	2317      	movs	r3, #23
   13d6e:	e000      	b.n	13d72 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13d70:	2300      	movs	r3, #0
}
   13d72:	1c18      	adds	r0, r3, #0
   13d74:	46bd      	mov	sp, r7
   13d76:	b002      	add	sp, #8
   13d78:	bd80      	pop	{r7, pc}
   13d7a:	46c0      	nop			; (mov r8, r8)
   13d7c:	40000400 	.word	0x40000400

00013d80 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   13d80:	b580      	push	{r7, lr}
   13d82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13d84:	4b01      	ldr	r3, [pc, #4]	; (13d8c <system_interrupt_enter_critical_section+0xc>)
   13d86:	4798      	blx	r3
}
   13d88:	46bd      	mov	sp, r7
   13d8a:	bd80      	pop	{r7, pc}
   13d8c:	00011d09 	.word	0x00011d09

00013d90 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   13d90:	b580      	push	{r7, lr}
   13d92:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13d94:	4b01      	ldr	r3, [pc, #4]	; (13d9c <system_interrupt_leave_critical_section+0xc>)
   13d96:	4798      	blx	r3
}
   13d98:	46bd      	mov	sp, r7
   13d9a:	bd80      	pop	{r7, pc}
   13d9c:	00011d59 	.word	0x00011d59

00013da0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   13da0:	b580      	push	{r7, lr}
   13da2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   13da4:	2000      	movs	r0, #0
   13da6:	2108      	movs	r1, #8
   13da8:	4b07      	ldr	r3, [pc, #28]	; (13dc8 <system_gclk_init+0x28>)
   13daa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   13dac:	4b07      	ldr	r3, [pc, #28]	; (13dcc <system_gclk_init+0x2c>)
   13dae:	2201      	movs	r2, #1
   13db0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   13db2:	46c0      	nop			; (mov r8, r8)
   13db4:	4b05      	ldr	r3, [pc, #20]	; (13dcc <system_gclk_init+0x2c>)
   13db6:	781b      	ldrb	r3, [r3, #0]
   13db8:	b2db      	uxtb	r3, r3
   13dba:	1c1a      	adds	r2, r3, #0
   13dbc:	2301      	movs	r3, #1
   13dbe:	4013      	ands	r3, r2
   13dc0:	d1f8      	bne.n	13db4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   13dc2:	46bd      	mov	sp, r7
   13dc4:	bd80      	pop	{r7, pc}
   13dc6:	46c0      	nop			; (mov r8, r8)
   13dc8:	00013d25 	.word	0x00013d25
   13dcc:	40000c00 	.word	0x40000c00

00013dd0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   13dd0:	b580      	push	{r7, lr}
   13dd2:	b086      	sub	sp, #24
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	1c02      	adds	r2, r0, #0
   13dd8:	6039      	str	r1, [r7, #0]
   13dda:	1dfb      	adds	r3, r7, #7
   13ddc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   13dde:	1dfb      	adds	r3, r7, #7
   13de0:	781b      	ldrb	r3, [r3, #0]
   13de2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   13de4:	1dfb      	adds	r3, r7, #7
   13de6:	781b      	ldrb	r3, [r3, #0]
   13de8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   13dea:	683b      	ldr	r3, [r7, #0]
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	021b      	lsls	r3, r3, #8
   13df0:	697a      	ldr	r2, [r7, #20]
   13df2:	4313      	orrs	r3, r2
   13df4:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   13df6:	683b      	ldr	r3, [r7, #0]
   13df8:	785b      	ldrb	r3, [r3, #1]
   13dfa:	2b00      	cmp	r3, #0
   13dfc:	d004      	beq.n	13e08 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   13dfe:	697b      	ldr	r3, [r7, #20]
   13e00:	2280      	movs	r2, #128	; 0x80
   13e02:	02d2      	lsls	r2, r2, #11
   13e04:	4313      	orrs	r3, r2
   13e06:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   13e08:	683b      	ldr	r3, [r7, #0]
   13e0a:	7a5b      	ldrb	r3, [r3, #9]
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d004      	beq.n	13e1a <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   13e10:	697b      	ldr	r3, [r7, #20]
   13e12:	2280      	movs	r2, #128	; 0x80
   13e14:	0312      	lsls	r2, r2, #12
   13e16:	4313      	orrs	r3, r2
   13e18:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   13e1a:	683b      	ldr	r3, [r7, #0]
   13e1c:	685b      	ldr	r3, [r3, #4]
   13e1e:	2b01      	cmp	r3, #1
   13e20:	d92c      	bls.n	13e7c <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   13e22:	683b      	ldr	r3, [r7, #0]
   13e24:	685a      	ldr	r2, [r3, #4]
   13e26:	683b      	ldr	r3, [r7, #0]
   13e28:	685b      	ldr	r3, [r3, #4]
   13e2a:	3b01      	subs	r3, #1
   13e2c:	4013      	ands	r3, r2
   13e2e:	d11a      	bne.n	13e66 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   13e30:	2300      	movs	r3, #0
   13e32:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   13e34:	2302      	movs	r3, #2
   13e36:	60bb      	str	r3, [r7, #8]
   13e38:	e005      	b.n	13e46 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
   13e3a:	68fb      	ldr	r3, [r7, #12]
   13e3c:	3301      	adds	r3, #1
   13e3e:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   13e40:	68bb      	ldr	r3, [r7, #8]
   13e42:	005b      	lsls	r3, r3, #1
   13e44:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   13e46:	683b      	ldr	r3, [r7, #0]
   13e48:	685a      	ldr	r2, [r3, #4]
   13e4a:	68bb      	ldr	r3, [r7, #8]
   13e4c:	429a      	cmp	r2, r3
   13e4e:	d8f4      	bhi.n	13e3a <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   13e50:	68fb      	ldr	r3, [r7, #12]
   13e52:	021b      	lsls	r3, r3, #8
   13e54:	693a      	ldr	r2, [r7, #16]
   13e56:	4313      	orrs	r3, r2
   13e58:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   13e5a:	697b      	ldr	r3, [r7, #20]
   13e5c:	2280      	movs	r2, #128	; 0x80
   13e5e:	0352      	lsls	r2, r2, #13
   13e60:	4313      	orrs	r3, r2
   13e62:	617b      	str	r3, [r7, #20]
   13e64:	e00a      	b.n	13e7c <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   13e66:	683b      	ldr	r3, [r7, #0]
   13e68:	685b      	ldr	r3, [r3, #4]
   13e6a:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   13e6c:	693a      	ldr	r2, [r7, #16]
   13e6e:	4313      	orrs	r3, r2
   13e70:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   13e72:	697b      	ldr	r3, [r7, #20]
   13e74:	2280      	movs	r2, #128	; 0x80
   13e76:	0292      	lsls	r2, r2, #10
   13e78:	4313      	orrs	r3, r2
   13e7a:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13e7c:	683b      	ldr	r3, [r7, #0]
   13e7e:	7a1b      	ldrb	r3, [r3, #8]
   13e80:	2b00      	cmp	r3, #0
   13e82:	d005      	beq.n	13e90 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   13e84:	697b      	ldr	r3, [r7, #20]
   13e86:	2280      	movs	r2, #128	; 0x80
   13e88:	0392      	lsls	r2, r2, #14
   13e8a:	4313      	orrs	r3, r2
   13e8c:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13e8e:	e7ff      	b.n	13e90 <system_gclk_gen_set_config+0xc0>
   13e90:	46c0      	nop			; (mov r8, r8)
   13e92:	4b14      	ldr	r3, [pc, #80]	; (13ee4 <system_gclk_gen_set_config+0x114>)
   13e94:	4798      	blx	r3
   13e96:	1c03      	adds	r3, r0, #0
   13e98:	2b00      	cmp	r3, #0
   13e9a:	d1fa      	bne.n	13e92 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13e9c:	4b12      	ldr	r3, [pc, #72]	; (13ee8 <system_gclk_gen_set_config+0x118>)
   13e9e:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13ea0:	4b12      	ldr	r3, [pc, #72]	; (13eec <system_gclk_gen_set_config+0x11c>)
   13ea2:	1dfa      	adds	r2, r7, #7
   13ea4:	7812      	ldrb	r2, [r2, #0]
   13ea6:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   13ea8:	46c0      	nop			; (mov r8, r8)
   13eaa:	4b0e      	ldr	r3, [pc, #56]	; (13ee4 <system_gclk_gen_set_config+0x114>)
   13eac:	4798      	blx	r3
   13eae:	1c03      	adds	r3, r0, #0
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d1fa      	bne.n	13eaa <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   13eb4:	4b0e      	ldr	r3, [pc, #56]	; (13ef0 <system_gclk_gen_set_config+0x120>)
   13eb6:	693a      	ldr	r2, [r7, #16]
   13eb8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   13eba:	46c0      	nop			; (mov r8, r8)
   13ebc:	4b09      	ldr	r3, [pc, #36]	; (13ee4 <system_gclk_gen_set_config+0x114>)
   13ebe:	4798      	blx	r3
   13ec0:	1c03      	adds	r3, r0, #0
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d1fa      	bne.n	13ebc <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   13ec6:	4b0a      	ldr	r3, [pc, #40]	; (13ef0 <system_gclk_gen_set_config+0x120>)
   13ec8:	4a09      	ldr	r2, [pc, #36]	; (13ef0 <system_gclk_gen_set_config+0x120>)
   13eca:	6851      	ldr	r1, [r2, #4]
   13ecc:	2280      	movs	r2, #128	; 0x80
   13ece:	0252      	lsls	r2, r2, #9
   13ed0:	4011      	ands	r1, r2
   13ed2:	697a      	ldr	r2, [r7, #20]
   13ed4:	430a      	orrs	r2, r1
   13ed6:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13ed8:	4b06      	ldr	r3, [pc, #24]	; (13ef4 <system_gclk_gen_set_config+0x124>)
   13eda:	4798      	blx	r3
}
   13edc:	46bd      	mov	sp, r7
   13ede:	b006      	add	sp, #24
   13ee0:	bd80      	pop	{r7, pc}
   13ee2:	46c0      	nop			; (mov r8, r8)
   13ee4:	00013d01 	.word	0x00013d01
   13ee8:	00013d81 	.word	0x00013d81
   13eec:	40000c08 	.word	0x40000c08
   13ef0:	40000c00 	.word	0x40000c00
   13ef4:	00013d91 	.word	0x00013d91

00013ef8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   13ef8:	b580      	push	{r7, lr}
   13efa:	b082      	sub	sp, #8
   13efc:	af00      	add	r7, sp, #0
   13efe:	1c02      	adds	r2, r0, #0
   13f00:	1dfb      	adds	r3, r7, #7
   13f02:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13f04:	46c0      	nop			; (mov r8, r8)
   13f06:	4b0e      	ldr	r3, [pc, #56]	; (13f40 <system_gclk_gen_enable+0x48>)
   13f08:	4798      	blx	r3
   13f0a:	1c03      	adds	r3, r0, #0
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	d1fa      	bne.n	13f06 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13f10:	4b0c      	ldr	r3, [pc, #48]	; (13f44 <system_gclk_gen_enable+0x4c>)
   13f12:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13f14:	4b0c      	ldr	r3, [pc, #48]	; (13f48 <system_gclk_gen_enable+0x50>)
   13f16:	1dfa      	adds	r2, r7, #7
   13f18:	7812      	ldrb	r2, [r2, #0]
   13f1a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13f1c:	46c0      	nop			; (mov r8, r8)
   13f1e:	4b08      	ldr	r3, [pc, #32]	; (13f40 <system_gclk_gen_enable+0x48>)
   13f20:	4798      	blx	r3
   13f22:	1c03      	adds	r3, r0, #0
   13f24:	2b00      	cmp	r3, #0
   13f26:	d1fa      	bne.n	13f1e <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   13f28:	4b08      	ldr	r3, [pc, #32]	; (13f4c <system_gclk_gen_enable+0x54>)
   13f2a:	4a08      	ldr	r2, [pc, #32]	; (13f4c <system_gclk_gen_enable+0x54>)
   13f2c:	6852      	ldr	r2, [r2, #4]
   13f2e:	2180      	movs	r1, #128	; 0x80
   13f30:	0249      	lsls	r1, r1, #9
   13f32:	430a      	orrs	r2, r1
   13f34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13f36:	4b06      	ldr	r3, [pc, #24]	; (13f50 <system_gclk_gen_enable+0x58>)
   13f38:	4798      	blx	r3
}
   13f3a:	46bd      	mov	sp, r7
   13f3c:	b002      	add	sp, #8
   13f3e:	bd80      	pop	{r7, pc}
   13f40:	00013d01 	.word	0x00013d01
   13f44:	00013d81 	.word	0x00013d81
   13f48:	40000c04 	.word	0x40000c04
   13f4c:	40000c00 	.word	0x40000c00
   13f50:	00013d91 	.word	0x00013d91

00013f54 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   13f54:	b580      	push	{r7, lr}
   13f56:	b086      	sub	sp, #24
   13f58:	af00      	add	r7, sp, #0
   13f5a:	1c02      	adds	r2, r0, #0
   13f5c:	1dfb      	adds	r3, r7, #7
   13f5e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13f60:	46c0      	nop			; (mov r8, r8)
   13f62:	4b2f      	ldr	r3, [pc, #188]	; (14020 <system_gclk_gen_get_hz+0xcc>)
   13f64:	4798      	blx	r3
   13f66:	1c03      	adds	r3, r0, #0
   13f68:	2b00      	cmp	r3, #0
   13f6a:	d1fa      	bne.n	13f62 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13f6c:	4b2d      	ldr	r3, [pc, #180]	; (14024 <system_gclk_gen_get_hz+0xd0>)
   13f6e:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13f70:	4b2d      	ldr	r3, [pc, #180]	; (14028 <system_gclk_gen_get_hz+0xd4>)
   13f72:	1dfa      	adds	r2, r7, #7
   13f74:	7812      	ldrb	r2, [r2, #0]
   13f76:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13f78:	46c0      	nop			; (mov r8, r8)
   13f7a:	4b29      	ldr	r3, [pc, #164]	; (14020 <system_gclk_gen_get_hz+0xcc>)
   13f7c:	4798      	blx	r3
   13f7e:	1c03      	adds	r3, r0, #0
   13f80:	2b00      	cmp	r3, #0
   13f82:	d1fa      	bne.n	13f7a <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13f84:	4b29      	ldr	r3, [pc, #164]	; (1402c <system_gclk_gen_get_hz+0xd8>)
   13f86:	685b      	ldr	r3, [r3, #4]
   13f88:	0a1b      	lsrs	r3, r3, #8
   13f8a:	1c1a      	adds	r2, r3, #0
   13f8c:	231f      	movs	r3, #31
   13f8e:	4013      	ands	r3, r2
   13f90:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   13f92:	1c18      	adds	r0, r3, #0
   13f94:	4b26      	ldr	r3, [pc, #152]	; (14030 <system_gclk_gen_get_hz+0xdc>)
   13f96:	4798      	blx	r3
   13f98:	1c03      	adds	r3, r0, #0
   13f9a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13f9c:	4b22      	ldr	r3, [pc, #136]	; (14028 <system_gclk_gen_get_hz+0xd4>)
   13f9e:	1dfa      	adds	r2, r7, #7
   13fa0:	7812      	ldrb	r2, [r2, #0]
   13fa2:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   13fa4:	4b21      	ldr	r3, [pc, #132]	; (1402c <system_gclk_gen_get_hz+0xd8>)
   13fa6:	685b      	ldr	r3, [r3, #4]
   13fa8:	0d1b      	lsrs	r3, r3, #20
   13faa:	1c1a      	adds	r2, r3, #0
   13fac:	2301      	movs	r3, #1
   13fae:	4013      	ands	r3, r2
   13fb0:	b2da      	uxtb	r2, r3
   13fb2:	1c3b      	adds	r3, r7, #0
   13fb4:	3313      	adds	r3, #19
   13fb6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13fb8:	4b1e      	ldr	r3, [pc, #120]	; (14034 <system_gclk_gen_get_hz+0xe0>)
   13fba:	1dfa      	adds	r2, r7, #7
   13fbc:	7812      	ldrb	r2, [r2, #0]
   13fbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13fc0:	46c0      	nop			; (mov r8, r8)
   13fc2:	4b17      	ldr	r3, [pc, #92]	; (14020 <system_gclk_gen_get_hz+0xcc>)
   13fc4:	4798      	blx	r3
   13fc6:	1c03      	adds	r3, r0, #0
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d1fa      	bne.n	13fc2 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   13fcc:	4b17      	ldr	r3, [pc, #92]	; (1402c <system_gclk_gen_get_hz+0xd8>)
   13fce:	689b      	ldr	r3, [r3, #8]
   13fd0:	0a1b      	lsrs	r3, r3, #8
   13fd2:	2200      	movs	r2, #0
   13fd4:	4393      	bics	r3, r2
   13fd6:	b29b      	uxth	r3, r3
   13fd8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   13fda:	4b17      	ldr	r3, [pc, #92]	; (14038 <system_gclk_gen_get_hz+0xe4>)
   13fdc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   13fde:	1c3b      	adds	r3, r7, #0
   13fe0:	3313      	adds	r3, #19
   13fe2:	781b      	ldrb	r3, [r3, #0]
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	d109      	bne.n	13ffc <system_gclk_gen_get_hz+0xa8>
   13fe8:	68fb      	ldr	r3, [r7, #12]
   13fea:	2b01      	cmp	r3, #1
   13fec:	d906      	bls.n	13ffc <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
   13fee:	4b13      	ldr	r3, [pc, #76]	; (1403c <system_gclk_gen_get_hz+0xe8>)
   13ff0:	6978      	ldr	r0, [r7, #20]
   13ff2:	68f9      	ldr	r1, [r7, #12]
   13ff4:	4798      	blx	r3
   13ff6:	1c03      	adds	r3, r0, #0
   13ff8:	617b      	str	r3, [r7, #20]
   13ffa:	e00b      	b.n	14014 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
   13ffc:	1c3b      	adds	r3, r7, #0
   13ffe:	3313      	adds	r3, #19
   14000:	781b      	ldrb	r3, [r3, #0]
   14002:	2b00      	cmp	r3, #0
   14004:	d006      	beq.n	14014 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
   14006:	68fb      	ldr	r3, [r7, #12]
   14008:	3301      	adds	r3, #1
   1400a:	697a      	ldr	r2, [r7, #20]
   1400c:	1c11      	adds	r1, r2, #0
   1400e:	40d9      	lsrs	r1, r3
   14010:	1c0b      	adds	r3, r1, #0
   14012:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   14014:	697b      	ldr	r3, [r7, #20]
}
   14016:	1c18      	adds	r0, r3, #0
   14018:	46bd      	mov	sp, r7
   1401a:	b006      	add	sp, #24
   1401c:	bd80      	pop	{r7, pc}
   1401e:	46c0      	nop			; (mov r8, r8)
   14020:	00013d01 	.word	0x00013d01
   14024:	00013d81 	.word	0x00013d81
   14028:	40000c04 	.word	0x40000c04
   1402c:	40000c00 	.word	0x40000c00
   14030:	00013771 	.word	0x00013771
   14034:	40000c08 	.word	0x40000c08
   14038:	00013d91 	.word	0x00013d91
   1403c:	000157d9 	.word	0x000157d9

00014040 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   14040:	b580      	push	{r7, lr}
   14042:	b084      	sub	sp, #16
   14044:	af00      	add	r7, sp, #0
   14046:	1c02      	adds	r2, r0, #0
   14048:	6039      	str	r1, [r7, #0]
   1404a:	1dfb      	adds	r3, r7, #7
   1404c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1404e:	1dfb      	adds	r3, r7, #7
   14050:	781b      	ldrb	r3, [r3, #0]
   14052:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   14054:	683b      	ldr	r3, [r7, #0]
   14056:	781b      	ldrb	r3, [r3, #0]
   14058:	021b      	lsls	r3, r3, #8
   1405a:	68fa      	ldr	r2, [r7, #12]
   1405c:	4313      	orrs	r3, r2
   1405e:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   14060:	1dfb      	adds	r3, r7, #7
   14062:	781b      	ldrb	r3, [r3, #0]
   14064:	1c18      	adds	r0, r3, #0
   14066:	4b04      	ldr	r3, [pc, #16]	; (14078 <system_gclk_chan_set_config+0x38>)
   14068:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1406a:	4b04      	ldr	r3, [pc, #16]	; (1407c <system_gclk_chan_set_config+0x3c>)
   1406c:	68fa      	ldr	r2, [r7, #12]
   1406e:	b292      	uxth	r2, r2
   14070:	805a      	strh	r2, [r3, #2]
}
   14072:	46bd      	mov	sp, r7
   14074:	b004      	add	sp, #16
   14076:	bd80      	pop	{r7, pc}
   14078:	000140c5 	.word	0x000140c5
   1407c:	40000c00 	.word	0x40000c00

00014080 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   14080:	b580      	push	{r7, lr}
   14082:	b082      	sub	sp, #8
   14084:	af00      	add	r7, sp, #0
   14086:	1c02      	adds	r2, r0, #0
   14088:	1dfb      	adds	r3, r7, #7
   1408a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1408c:	4b09      	ldr	r3, [pc, #36]	; (140b4 <system_gclk_chan_enable+0x34>)
   1408e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   14090:	4b09      	ldr	r3, [pc, #36]	; (140b8 <system_gclk_chan_enable+0x38>)
   14092:	1dfa      	adds	r2, r7, #7
   14094:	7812      	ldrb	r2, [r2, #0]
   14096:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   14098:	4b08      	ldr	r3, [pc, #32]	; (140bc <system_gclk_chan_enable+0x3c>)
   1409a:	4a08      	ldr	r2, [pc, #32]	; (140bc <system_gclk_chan_enable+0x3c>)
   1409c:	8852      	ldrh	r2, [r2, #2]
   1409e:	b292      	uxth	r2, r2
   140a0:	2180      	movs	r1, #128	; 0x80
   140a2:	01c9      	lsls	r1, r1, #7
   140a4:	430a      	orrs	r2, r1
   140a6:	b292      	uxth	r2, r2
   140a8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   140aa:	4b05      	ldr	r3, [pc, #20]	; (140c0 <system_gclk_chan_enable+0x40>)
   140ac:	4798      	blx	r3
}
   140ae:	46bd      	mov	sp, r7
   140b0:	b002      	add	sp, #8
   140b2:	bd80      	pop	{r7, pc}
   140b4:	00013d81 	.word	0x00013d81
   140b8:	40000c02 	.word	0x40000c02
   140bc:	40000c00 	.word	0x40000c00
   140c0:	00013d91 	.word	0x00013d91

000140c4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   140c4:	b580      	push	{r7, lr}
   140c6:	b084      	sub	sp, #16
   140c8:	af00      	add	r7, sp, #0
   140ca:	1c02      	adds	r2, r0, #0
   140cc:	1dfb      	adds	r3, r7, #7
   140ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   140d0:	4b1c      	ldr	r3, [pc, #112]	; (14144 <system_gclk_chan_disable+0x80>)
   140d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   140d4:	4b1c      	ldr	r3, [pc, #112]	; (14148 <system_gclk_chan_disable+0x84>)
   140d6:	1dfa      	adds	r2, r7, #7
   140d8:	7812      	ldrb	r2, [r2, #0]
   140da:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   140dc:	4b1b      	ldr	r3, [pc, #108]	; (1414c <system_gclk_chan_disable+0x88>)
   140de:	885b      	ldrh	r3, [r3, #2]
   140e0:	b29b      	uxth	r3, r3
   140e2:	0a1b      	lsrs	r3, r3, #8
   140e4:	1c1a      	adds	r2, r3, #0
   140e6:	230f      	movs	r3, #15
   140e8:	4013      	ands	r3, r2
   140ea:	b2db      	uxtb	r3, r3
   140ec:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   140ee:	4b17      	ldr	r3, [pc, #92]	; (1414c <system_gclk_chan_disable+0x88>)
   140f0:	8859      	ldrh	r1, [r3, #2]
   140f2:	4a17      	ldr	r2, [pc, #92]	; (14150 <system_gclk_chan_disable+0x8c>)
   140f4:	400a      	ands	r2, r1
   140f6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   140f8:	4b14      	ldr	r3, [pc, #80]	; (1414c <system_gclk_chan_disable+0x88>)
   140fa:	4a14      	ldr	r2, [pc, #80]	; (1414c <system_gclk_chan_disable+0x88>)
   140fc:	8852      	ldrh	r2, [r2, #2]
   140fe:	b291      	uxth	r1, r2
   14100:	4a14      	ldr	r2, [pc, #80]	; (14154 <system_gclk_chan_disable+0x90>)
   14102:	400a      	ands	r2, r1
   14104:	b292      	uxth	r2, r2
   14106:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   14108:	46c0      	nop			; (mov r8, r8)
   1410a:	4b10      	ldr	r3, [pc, #64]	; (1414c <system_gclk_chan_disable+0x88>)
   1410c:	885b      	ldrh	r3, [r3, #2]
   1410e:	b29b      	uxth	r3, r3
   14110:	1c1a      	adds	r2, r3, #0
   14112:	2380      	movs	r3, #128	; 0x80
   14114:	01db      	lsls	r3, r3, #7
   14116:	4013      	ands	r3, r2
   14118:	d1f7      	bne.n	1410a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1411a:	4b0c      	ldr	r3, [pc, #48]	; (1414c <system_gclk_chan_disable+0x88>)
   1411c:	68fa      	ldr	r2, [r7, #12]
   1411e:	b2d2      	uxtb	r2, r2
   14120:	1c11      	adds	r1, r2, #0
   14122:	220f      	movs	r2, #15
   14124:	400a      	ands	r2, r1
   14126:	b2d1      	uxtb	r1, r2
   14128:	220f      	movs	r2, #15
   1412a:	400a      	ands	r2, r1
   1412c:	0212      	lsls	r2, r2, #8
   1412e:	8858      	ldrh	r0, [r3, #2]
   14130:	4907      	ldr	r1, [pc, #28]	; (14150 <system_gclk_chan_disable+0x8c>)
   14132:	4001      	ands	r1, r0
   14134:	430a      	orrs	r2, r1
   14136:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   14138:	4b07      	ldr	r3, [pc, #28]	; (14158 <system_gclk_chan_disable+0x94>)
   1413a:	4798      	blx	r3
}
   1413c:	46bd      	mov	sp, r7
   1413e:	b004      	add	sp, #16
   14140:	bd80      	pop	{r7, pc}
   14142:	46c0      	nop			; (mov r8, r8)
   14144:	00013d81 	.word	0x00013d81
   14148:	40000c02 	.word	0x40000c02
   1414c:	40000c00 	.word	0x40000c00
   14150:	fffff0ff 	.word	0xfffff0ff
   14154:	ffffbfff 	.word	0xffffbfff
   14158:	00013d91 	.word	0x00013d91

0001415c <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
   1415c:	b580      	push	{r7, lr}
   1415e:	b082      	sub	sp, #8
   14160:	af00      	add	r7, sp, #0
   14162:	1c02      	adds	r2, r0, #0
   14164:	1dfb      	adds	r3, r7, #7
   14166:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   14168:	4b09      	ldr	r3, [pc, #36]	; (14190 <system_gclk_chan_lock+0x34>)
   1416a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1416c:	4b09      	ldr	r3, [pc, #36]	; (14194 <system_gclk_chan_lock+0x38>)
   1416e:	1dfa      	adds	r2, r7, #7
   14170:	7812      	ldrb	r2, [r2, #0]
   14172:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   14174:	4b08      	ldr	r3, [pc, #32]	; (14198 <system_gclk_chan_lock+0x3c>)
   14176:	4a08      	ldr	r2, [pc, #32]	; (14198 <system_gclk_chan_lock+0x3c>)
   14178:	8852      	ldrh	r2, [r2, #2]
   1417a:	b292      	uxth	r2, r2
   1417c:	2180      	movs	r1, #128	; 0x80
   1417e:	01c9      	lsls	r1, r1, #7
   14180:	430a      	orrs	r2, r1
   14182:	b292      	uxth	r2, r2
   14184:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   14186:	4b05      	ldr	r3, [pc, #20]	; (1419c <system_gclk_chan_lock+0x40>)
   14188:	4798      	blx	r3
}
   1418a:	46bd      	mov	sp, r7
   1418c:	b002      	add	sp, #8
   1418e:	bd80      	pop	{r7, pc}
   14190:	00013d81 	.word	0x00013d81
   14194:	40000c02 	.word	0x40000c02
   14198:	40000c00 	.word	0x40000c00
   1419c:	00013d91 	.word	0x00013d91

000141a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   141a0:	b580      	push	{r7, lr}
   141a2:	b084      	sub	sp, #16
   141a4:	af00      	add	r7, sp, #0
   141a6:	1c02      	adds	r2, r0, #0
   141a8:	1dfb      	adds	r3, r7, #7
   141aa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   141ac:	4b0e      	ldr	r3, [pc, #56]	; (141e8 <system_gclk_chan_get_hz+0x48>)
   141ae:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   141b0:	4b0e      	ldr	r3, [pc, #56]	; (141ec <system_gclk_chan_get_hz+0x4c>)
   141b2:	1dfa      	adds	r2, r7, #7
   141b4:	7812      	ldrb	r2, [r2, #0]
   141b6:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   141b8:	4b0d      	ldr	r3, [pc, #52]	; (141f0 <system_gclk_chan_get_hz+0x50>)
   141ba:	885b      	ldrh	r3, [r3, #2]
   141bc:	b29b      	uxth	r3, r3
   141be:	0a1b      	lsrs	r3, r3, #8
   141c0:	1c1a      	adds	r2, r3, #0
   141c2:	230f      	movs	r3, #15
   141c4:	4013      	ands	r3, r2
   141c6:	b2da      	uxtb	r2, r3
   141c8:	1c3b      	adds	r3, r7, #0
   141ca:	330f      	adds	r3, #15
   141cc:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   141ce:	4b09      	ldr	r3, [pc, #36]	; (141f4 <system_gclk_chan_get_hz+0x54>)
   141d0:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   141d2:	1c3b      	adds	r3, r7, #0
   141d4:	330f      	adds	r3, #15
   141d6:	781b      	ldrb	r3, [r3, #0]
   141d8:	1c18      	adds	r0, r3, #0
   141da:	4b07      	ldr	r3, [pc, #28]	; (141f8 <system_gclk_chan_get_hz+0x58>)
   141dc:	4798      	blx	r3
   141de:	1c03      	adds	r3, r0, #0
}
   141e0:	1c18      	adds	r0, r3, #0
   141e2:	46bd      	mov	sp, r7
   141e4:	b004      	add	sp, #16
   141e6:	bd80      	pop	{r7, pc}
   141e8:	00013d81 	.word	0x00013d81
   141ec:	40000c02 	.word	0x40000c02
   141f0:	40000c00 	.word	0x40000c00
   141f4:	00013d91 	.word	0x00013d91
   141f8:	00013f55 	.word	0x00013f55

000141fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   141fc:	b580      	push	{r7, lr}
   141fe:	b084      	sub	sp, #16
   14200:	af00      	add	r7, sp, #0
   14202:	1c02      	adds	r2, r0, #0
   14204:	1dfb      	adds	r3, r7, #7
   14206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14208:	1c3b      	adds	r3, r7, #0
   1420a:	330f      	adds	r3, #15
   1420c:	1dfa      	adds	r2, r7, #7
   1420e:	7812      	ldrb	r2, [r2, #0]
   14210:	09d2      	lsrs	r2, r2, #7
   14212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14214:	1c3b      	adds	r3, r7, #0
   14216:	330e      	adds	r3, #14
   14218:	1dfa      	adds	r2, r7, #7
   1421a:	7812      	ldrb	r2, [r2, #0]
   1421c:	0952      	lsrs	r2, r2, #5
   1421e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14220:	4b0d      	ldr	r3, [pc, #52]	; (14258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14224:	1c3b      	adds	r3, r7, #0
   14226:	330f      	adds	r3, #15
   14228:	781b      	ldrb	r3, [r3, #0]
   1422a:	2b00      	cmp	r3, #0
   1422c:	d10e      	bne.n	1424c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   1422e:	1c3b      	adds	r3, r7, #0
   14230:	330f      	adds	r3, #15
   14232:	781b      	ldrb	r3, [r3, #0]
   14234:	009b      	lsls	r3, r3, #2
   14236:	2210      	movs	r2, #16
   14238:	19d2      	adds	r2, r2, r7
   1423a:	18d3      	adds	r3, r2, r3
   1423c:	3b08      	subs	r3, #8
   1423e:	681a      	ldr	r2, [r3, #0]
   14240:	1c3b      	adds	r3, r7, #0
   14242:	330e      	adds	r3, #14
   14244:	781b      	ldrb	r3, [r3, #0]
   14246:	01db      	lsls	r3, r3, #7
   14248:	18d3      	adds	r3, r2, r3
   1424a:	e000      	b.n	1424e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   1424c:	2300      	movs	r3, #0
	}
}
   1424e:	1c18      	adds	r0, r3, #0
   14250:	46bd      	mov	sp, r7
   14252:	b004      	add	sp, #16
   14254:	bd80      	pop	{r7, pc}
   14256:	46c0      	nop			; (mov r8, r8)
   14258:	41004400 	.word	0x41004400

0001425c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1425c:	b580      	push	{r7, lr}
   1425e:	b088      	sub	sp, #32
   14260:	af00      	add	r7, sp, #0
   14262:	60f8      	str	r0, [r7, #12]
   14264:	60b9      	str	r1, [r7, #8]
   14266:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   14268:	2300      	movs	r3, #0
   1426a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	78db      	ldrb	r3, [r3, #3]
   14270:	2201      	movs	r2, #1
   14272:	4053      	eors	r3, r2
   14274:	b2db      	uxtb	r3, r3
   14276:	2b00      	cmp	r3, #0
   14278:	d033      	beq.n	142e2 <_system_pinmux_config+0x86>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1427a:	687b      	ldr	r3, [r7, #4]
   1427c:	781b      	ldrb	r3, [r3, #0]
   1427e:	2b80      	cmp	r3, #128	; 0x80
   14280:	d00a      	beq.n	14298 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   14282:	69fb      	ldr	r3, [r7, #28]
   14284:	2280      	movs	r2, #128	; 0x80
   14286:	0252      	lsls	r2, r2, #9
   14288:	4313      	orrs	r3, r2
   1428a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1428c:	687b      	ldr	r3, [r7, #4]
   1428e:	781b      	ldrb	r3, [r3, #0]
   14290:	061b      	lsls	r3, r3, #24
   14292:	69fa      	ldr	r2, [r7, #28]
   14294:	4313      	orrs	r3, r2
   14296:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   14298:	687b      	ldr	r3, [r7, #4]
   1429a:	785b      	ldrb	r3, [r3, #1]
   1429c:	2b00      	cmp	r3, #0
   1429e:	d003      	beq.n	142a8 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   142a0:	687b      	ldr	r3, [r7, #4]
   142a2:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   142a4:	2b02      	cmp	r3, #2
   142a6:	d110      	bne.n	142ca <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   142a8:	69fb      	ldr	r3, [r7, #28]
   142aa:	2280      	movs	r2, #128	; 0x80
   142ac:	0292      	lsls	r2, r2, #10
   142ae:	4313      	orrs	r3, r2
   142b0:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   142b2:	687b      	ldr	r3, [r7, #4]
   142b4:	789b      	ldrb	r3, [r3, #2]
   142b6:	2b00      	cmp	r3, #0
   142b8:	d004      	beq.n	142c4 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   142ba:	69fb      	ldr	r3, [r7, #28]
   142bc:	2280      	movs	r2, #128	; 0x80
   142be:	02d2      	lsls	r2, r2, #11
   142c0:	4313      	orrs	r3, r2
   142c2:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   142c4:	68fb      	ldr	r3, [r7, #12]
   142c6:	68ba      	ldr	r2, [r7, #8]
   142c8:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   142ca:	687b      	ldr	r3, [r7, #4]
   142cc:	785b      	ldrb	r3, [r3, #1]
   142ce:	2b01      	cmp	r3, #1
   142d0:	d003      	beq.n	142da <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   142d2:	687b      	ldr	r3, [r7, #4]
   142d4:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   142d6:	2b02      	cmp	r3, #2
   142d8:	d103      	bne.n	142e2 <_system_pinmux_config+0x86>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   142da:	69fa      	ldr	r2, [r7, #28]
   142dc:	4b1f      	ldr	r3, [pc, #124]	; (1435c <_system_pinmux_config+0x100>)
   142de:	4013      	ands	r3, r2
   142e0:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   142e2:	68bb      	ldr	r3, [r7, #8]
   142e4:	041b      	lsls	r3, r3, #16
   142e6:	0c1b      	lsrs	r3, r3, #16
   142e8:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   142ea:	68bb      	ldr	r3, [r7, #8]
   142ec:	0c1b      	lsrs	r3, r3, #16
   142ee:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   142f0:	69ba      	ldr	r2, [r7, #24]
   142f2:	69fb      	ldr	r3, [r7, #28]
   142f4:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   142f6:	22a0      	movs	r2, #160	; 0xa0
   142f8:	05d2      	lsls	r2, r2, #23
   142fa:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   142fc:	68fb      	ldr	r3, [r7, #12]
   142fe:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   14300:	697a      	ldr	r2, [r7, #20]
   14302:	69fb      	ldr	r3, [r7, #28]
   14304:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   14306:	22d0      	movs	r2, #208	; 0xd0
   14308:	0612      	lsls	r2, r2, #24
   1430a:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1430c:	68fb      	ldr	r3, [r7, #12]
   1430e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   14310:	687b      	ldr	r3, [r7, #4]
   14312:	78db      	ldrb	r3, [r3, #3]
   14314:	2201      	movs	r2, #1
   14316:	4053      	eors	r3, r2
   14318:	b2db      	uxtb	r3, r3
   1431a:	2b00      	cmp	r3, #0
   1431c:	d01a      	beq.n	14354 <_system_pinmux_config+0xf8>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1431e:	69fa      	ldr	r2, [r7, #28]
   14320:	2380      	movs	r3, #128	; 0x80
   14322:	02db      	lsls	r3, r3, #11
   14324:	4013      	ands	r3, r2
   14326:	d00a      	beq.n	1433e <_system_pinmux_config+0xe2>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   14328:	687b      	ldr	r3, [r7, #4]
   1432a:	789b      	ldrb	r3, [r3, #2]
   1432c:	2b01      	cmp	r3, #1
   1432e:	d103      	bne.n	14338 <_system_pinmux_config+0xdc>
				port->OUTSET.reg = pin_mask;
   14330:	68fb      	ldr	r3, [r7, #12]
   14332:	68ba      	ldr	r2, [r7, #8]
   14334:	619a      	str	r2, [r3, #24]
   14336:	e002      	b.n	1433e <_system_pinmux_config+0xe2>
			} else {
				port->OUTCLR.reg = pin_mask;
   14338:	68fb      	ldr	r3, [r7, #12]
   1433a:	68ba      	ldr	r2, [r7, #8]
   1433c:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1433e:	687b      	ldr	r3, [r7, #4]
   14340:	785b      	ldrb	r3, [r3, #1]
   14342:	2b01      	cmp	r3, #1
   14344:	d003      	beq.n	1434e <_system_pinmux_config+0xf2>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   14346:	687b      	ldr	r3, [r7, #4]
   14348:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1434a:	2b02      	cmp	r3, #2
   1434c:	d102      	bne.n	14354 <_system_pinmux_config+0xf8>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1434e:	68fb      	ldr	r3, [r7, #12]
   14350:	68ba      	ldr	r2, [r7, #8]
   14352:	609a      	str	r2, [r3, #8]
		}
	}
}
   14354:	46bd      	mov	sp, r7
   14356:	b008      	add	sp, #32
   14358:	bd80      	pop	{r7, pc}
   1435a:	46c0      	nop			; (mov r8, r8)
   1435c:	fffbffff 	.word	0xfffbffff

00014360 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   14360:	b580      	push	{r7, lr}
   14362:	b084      	sub	sp, #16
   14364:	af00      	add	r7, sp, #0
   14366:	1c02      	adds	r2, r0, #0
   14368:	6039      	str	r1, [r7, #0]
   1436a:	1dfb      	adds	r3, r7, #7
   1436c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1436e:	1dfb      	adds	r3, r7, #7
   14370:	781b      	ldrb	r3, [r3, #0]
   14372:	1c18      	adds	r0, r3, #0
   14374:	4b0b      	ldr	r3, [pc, #44]	; (143a4 <system_pinmux_pin_set_config+0x44>)
   14376:	4798      	blx	r3
   14378:	1c03      	adds	r3, r0, #0
   1437a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1437c:	1dfb      	adds	r3, r7, #7
   1437e:	781a      	ldrb	r2, [r3, #0]
   14380:	231f      	movs	r3, #31
   14382:	4013      	ands	r3, r2
   14384:	2201      	movs	r2, #1
   14386:	1c11      	adds	r1, r2, #0
   14388:	4099      	lsls	r1, r3
   1438a:	1c0b      	adds	r3, r1, #0
   1438c:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   1438e:	68f9      	ldr	r1, [r7, #12]
   14390:	68ba      	ldr	r2, [r7, #8]
   14392:	683b      	ldr	r3, [r7, #0]
   14394:	1c08      	adds	r0, r1, #0
   14396:	1c11      	adds	r1, r2, #0
   14398:	1c1a      	adds	r2, r3, #0
   1439a:	4b03      	ldr	r3, [pc, #12]	; (143a8 <system_pinmux_pin_set_config+0x48>)
   1439c:	4798      	blx	r3
}
   1439e:	46bd      	mov	sp, r7
   143a0:	b004      	add	sp, #16
   143a2:	bd80      	pop	{r7, pc}
   143a4:	000141fd 	.word	0x000141fd
   143a8:	0001425d 	.word	0x0001425d

000143ac <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   143ac:	b580      	push	{r7, lr}
   143ae:	af00      	add	r7, sp, #0
	return;
   143b0:	46c0      	nop			; (mov r8, r8)
}
   143b2:	46bd      	mov	sp, r7
   143b4:	bd80      	pop	{r7, pc}
   143b6:	46c0      	nop			; (mov r8, r8)

000143b8 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
   143b8:	b580      	push	{r7, lr}
   143ba:	af00      	add	r7, sp, #0
	while (1) {
	 
		Assert(false);
	}
	*/
}
   143bc:	46bd      	mov	sp, r7
   143be:	bd80      	pop	{r7, pc}

000143c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   143c0:	b580      	push	{r7, lr}
   143c2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   143c4:	4b03      	ldr	r3, [pc, #12]	; (143d4 <system_init+0x14>)
   143c6:	4798      	blx	r3

	/* Initialize board hardware */
//BAM	system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
   143c8:	4b03      	ldr	r3, [pc, #12]	; (143d8 <system_init+0x18>)
   143ca:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   143cc:	4b03      	ldr	r3, [pc, #12]	; (143dc <system_init+0x1c>)
   143ce:	4798      	blx	r3
}
   143d0:	46bd      	mov	sp, r7
   143d2:	bd80      	pop	{r7, pc}
   143d4:	00013a7d 	.word	0x00013a7d
   143d8:	000143ad 	.word	0x000143ad
   143dc:	00003f31 	.word	0x00003f31

000143e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   143e0:	b580      	push	{r7, lr}
   143e2:	b082      	sub	sp, #8
   143e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   143e6:	4b16      	ldr	r3, [pc, #88]	; (14440 <Reset_Handler+0x60>)
   143e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   143ea:	4b16      	ldr	r3, [pc, #88]	; (14444 <Reset_Handler+0x64>)
   143ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   143ee:	687a      	ldr	r2, [r7, #4]
   143f0:	683b      	ldr	r3, [r7, #0]
   143f2:	429a      	cmp	r2, r3
   143f4:	d00c      	beq.n	14410 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   143f6:	e007      	b.n	14408 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   143f8:	683b      	ldr	r3, [r7, #0]
   143fa:	1d1a      	adds	r2, r3, #4
   143fc:	603a      	str	r2, [r7, #0]
   143fe:	687a      	ldr	r2, [r7, #4]
   14400:	1d11      	adds	r1, r2, #4
   14402:	6079      	str	r1, [r7, #4]
   14404:	6812      	ldr	r2, [r2, #0]
   14406:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   14408:	683a      	ldr	r2, [r7, #0]
   1440a:	4b0f      	ldr	r3, [pc, #60]	; (14448 <Reset_Handler+0x68>)
   1440c:	429a      	cmp	r2, r3
   1440e:	d3f3      	bcc.n	143f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   14410:	4b0e      	ldr	r3, [pc, #56]	; (1444c <Reset_Handler+0x6c>)
   14412:	603b      	str	r3, [r7, #0]
   14414:	e004      	b.n	14420 <Reset_Handler+0x40>
                *pDest++ = 0;
   14416:	683b      	ldr	r3, [r7, #0]
   14418:	1d1a      	adds	r2, r3, #4
   1441a:	603a      	str	r2, [r7, #0]
   1441c:	2200      	movs	r2, #0
   1441e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   14420:	683a      	ldr	r2, [r7, #0]
   14422:	4b0b      	ldr	r3, [pc, #44]	; (14450 <Reset_Handler+0x70>)
   14424:	429a      	cmp	r2, r3
   14426:	d3f6      	bcc.n	14416 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   14428:	4b0a      	ldr	r3, [pc, #40]	; (14454 <Reset_Handler+0x74>)
   1442a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1442c:	4b0a      	ldr	r3, [pc, #40]	; (14458 <Reset_Handler+0x78>)
   1442e:	687a      	ldr	r2, [r7, #4]
   14430:	217f      	movs	r1, #127	; 0x7f
   14432:	438a      	bics	r2, r1
   14434:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
   14436:	4b09      	ldr	r3, [pc, #36]	; (1445c <Reset_Handler+0x7c>)
   14438:	4798      	blx	r3

        /* Branch to main function */
        main();
   1443a:	4b09      	ldr	r3, [pc, #36]	; (14460 <Reset_Handler+0x80>)
   1443c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1443e:	e7fe      	b.n	1443e <Reset_Handler+0x5e>
   14440:	000187ac 	.word	0x000187ac
   14444:	20000000 	.word	0x20000000
   14448:	20000474 	.word	0x20000474
   1444c:	20000474 	.word	0x20000474
   14450:	200039a4 	.word	0x200039a4
   14454:	00003100 	.word	0x00003100
   14458:	e000ed00 	.word	0xe000ed00
   1445c:	00017e55 	.word	0x00017e55
   14460:	0000ed55 	.word	0x0000ed55

00014464 <Dummy_Handler1>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler1(void)
{
   14464:	b580      	push	{r7, lr}
   14466:	af00      	add	r7, sp, #0
        while (1) {
        }
   14468:	e7fe      	b.n	14468 <Dummy_Handler1+0x4>
   1446a:	46c0      	nop			; (mov r8, r8)

0001446c <Dummy_Handler2>:
}
void Dummy_Handler2(void)
{
   1446c:	b580      	push	{r7, lr}
   1446e:	af00      	add	r7, sp, #0
        while (1) {
        }
   14470:	e7fe      	b.n	14470 <Dummy_Handler2+0x4>
   14472:	46c0      	nop			; (mov r8, r8)
   14474:	0000      	movs	r0, r0
	...

00014478 <pow>:
   14478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1447a:	4646      	mov	r6, r8
   1447c:	464f      	mov	r7, r9
   1447e:	b4c0      	push	{r6, r7}
   14480:	b08f      	sub	sp, #60	; 0x3c
   14482:	1c16      	adds	r6, r2, #0
   14484:	1c1f      	adds	r7, r3, #0
   14486:	9000      	str	r0, [sp, #0]
   14488:	9101      	str	r1, [sp, #4]
   1448a:	f000 f9ad 	bl	147e8 <__ieee754_pow>
   1448e:	4abc      	ldr	r2, [pc, #752]	; (14780 <pow+0x308>)
   14490:	2300      	movs	r3, #0
   14492:	56d3      	ldrsb	r3, [r2, r3]
   14494:	1c04      	adds	r4, r0, #0
   14496:	1c0d      	adds	r5, r1, #0
   14498:	4690      	mov	r8, r2
   1449a:	9402      	str	r4, [sp, #8]
   1449c:	9503      	str	r5, [sp, #12]
   1449e:	3301      	adds	r3, #1
   144a0:	d005      	beq.n	144ae <pow+0x36>
   144a2:	1c30      	adds	r0, r6, #0
   144a4:	1c39      	adds	r1, r7, #0
   144a6:	f001 f821 	bl	154ec <__fpclassifyd>
   144aa:	2800      	cmp	r0, #0
   144ac:	d106      	bne.n	144bc <pow+0x44>
   144ae:	9802      	ldr	r0, [sp, #8]
   144b0:	9903      	ldr	r1, [sp, #12]
   144b2:	b00f      	add	sp, #60	; 0x3c
   144b4:	bc0c      	pop	{r2, r3}
   144b6:	4690      	mov	r8, r2
   144b8:	4699      	mov	r9, r3
   144ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144bc:	9800      	ldr	r0, [sp, #0]
   144be:	9901      	ldr	r1, [sp, #4]
   144c0:	f001 f814 	bl	154ec <__fpclassifyd>
   144c4:	4681      	mov	r9, r0
   144c6:	2800      	cmp	r0, #0
   144c8:	d131      	bne.n	1452e <pow+0xb6>
   144ca:	1c30      	adds	r0, r6, #0
   144cc:	1c39      	adds	r1, r7, #0
   144ce:	4ba1      	ldr	r3, [pc, #644]	; (14754 <pow+0x2dc>)
   144d0:	4a9f      	ldr	r2, [pc, #636]	; (14750 <pow+0x2d8>)
   144d2:	f001 fa41 	bl	15958 <__aeabi_dcmpeq>
   144d6:	2800      	cmp	r0, #0
   144d8:	d0e9      	beq.n	144ae <pow+0x36>
   144da:	2301      	movs	r3, #1
   144dc:	9304      	str	r3, [sp, #16]
   144de:	4ba9      	ldr	r3, [pc, #676]	; (14784 <pow+0x30c>)
   144e0:	ac04      	add	r4, sp, #16
   144e2:	6063      	str	r3, [r4, #4]
   144e4:	464b      	mov	r3, r9
   144e6:	6223      	str	r3, [r4, #32]
   144e8:	9a00      	ldr	r2, [sp, #0]
   144ea:	9b01      	ldr	r3, [sp, #4]
   144ec:	60a2      	str	r2, [r4, #8]
   144ee:	60e3      	str	r3, [r4, #12]
   144f0:	4a99      	ldr	r2, [pc, #612]	; (14758 <pow+0x2e0>)
   144f2:	4b9a      	ldr	r3, [pc, #616]	; (1475c <pow+0x2e4>)
   144f4:	61a2      	str	r2, [r4, #24]
   144f6:	61e3      	str	r3, [r4, #28]
   144f8:	4642      	mov	r2, r8
   144fa:	2300      	movs	r3, #0
   144fc:	56d3      	ldrsb	r3, [r2, r3]
   144fe:	6126      	str	r6, [r4, #16]
   14500:	6167      	str	r7, [r4, #20]
   14502:	1c5a      	adds	r2, r3, #1
   14504:	d00e      	beq.n	14524 <pow+0xac>
   14506:	2b02      	cmp	r3, #2
   14508:	d00c      	beq.n	14524 <pow+0xac>
   1450a:	1c20      	adds	r0, r4, #0
   1450c:	f001 f81e 	bl	1554c <matherr>
   14510:	2800      	cmp	r0, #0
   14512:	d100      	bne.n	14516 <pow+0x9e>
   14514:	e07b      	b.n	1460e <pow+0x196>
   14516:	6a23      	ldr	r3, [r4, #32]
   14518:	2b00      	cmp	r3, #0
   1451a:	d003      	beq.n	14524 <pow+0xac>
   1451c:	f003 fc94 	bl	17e48 <__errno>
   14520:	6a23      	ldr	r3, [r4, #32]
   14522:	6003      	str	r3, [r0, #0]
   14524:	69a2      	ldr	r2, [r4, #24]
   14526:	69e3      	ldr	r3, [r4, #28]
   14528:	9202      	str	r2, [sp, #8]
   1452a:	9303      	str	r3, [sp, #12]
   1452c:	e7bf      	b.n	144ae <pow+0x36>
   1452e:	9800      	ldr	r0, [sp, #0]
   14530:	9901      	ldr	r1, [sp, #4]
   14532:	4b88      	ldr	r3, [pc, #544]	; (14754 <pow+0x2dc>)
   14534:	4a86      	ldr	r2, [pc, #536]	; (14750 <pow+0x2d8>)
   14536:	f001 fa0f 	bl	15958 <__aeabi_dcmpeq>
   1453a:	2800      	cmp	r0, #0
   1453c:	d022      	beq.n	14584 <pow+0x10c>
   1453e:	1c30      	adds	r0, r6, #0
   14540:	1c39      	adds	r1, r7, #0
   14542:	4b84      	ldr	r3, [pc, #528]	; (14754 <pow+0x2dc>)
   14544:	4a82      	ldr	r2, [pc, #520]	; (14750 <pow+0x2d8>)
   14546:	f001 fa07 	bl	15958 <__aeabi_dcmpeq>
   1454a:	1e05      	subs	r5, r0, #0
   1454c:	d02c      	beq.n	145a8 <pow+0x130>
   1454e:	2301      	movs	r3, #1
   14550:	9304      	str	r3, [sp, #16]
   14552:	4b8c      	ldr	r3, [pc, #560]	; (14784 <pow+0x30c>)
   14554:	ac04      	add	r4, sp, #16
   14556:	6063      	str	r3, [r4, #4]
   14558:	2300      	movs	r3, #0
   1455a:	6223      	str	r3, [r4, #32]
   1455c:	9a00      	ldr	r2, [sp, #0]
   1455e:	9b01      	ldr	r3, [sp, #4]
   14560:	60a2      	str	r2, [r4, #8]
   14562:	60e3      	str	r3, [r4, #12]
   14564:	4b7b      	ldr	r3, [pc, #492]	; (14754 <pow+0x2dc>)
   14566:	4a7a      	ldr	r2, [pc, #488]	; (14750 <pow+0x2d8>)
   14568:	61a2      	str	r2, [r4, #24]
   1456a:	61e3      	str	r3, [r4, #28]
   1456c:	4642      	mov	r2, r8
   1456e:	2300      	movs	r3, #0
   14570:	56d3      	ldrsb	r3, [r2, r3]
   14572:	6126      	str	r6, [r4, #16]
   14574:	6167      	str	r7, [r4, #20]
   14576:	2b00      	cmp	r3, #0
   14578:	d0c7      	beq.n	1450a <pow+0x92>
   1457a:	4a77      	ldr	r2, [pc, #476]	; (14758 <pow+0x2e0>)
   1457c:	4b77      	ldr	r3, [pc, #476]	; (1475c <pow+0x2e4>)
   1457e:	61a2      	str	r2, [r4, #24]
   14580:	61e3      	str	r3, [r4, #28]
   14582:	e7cf      	b.n	14524 <pow+0xac>
   14584:	1c20      	adds	r0, r4, #0
   14586:	1c29      	adds	r1, r5, #0
   14588:	f000 ffa8 	bl	154dc <finite>
   1458c:	4681      	mov	r9, r0
   1458e:	2800      	cmp	r0, #0
   14590:	d042      	beq.n	14618 <pow+0x1a0>
   14592:	1c20      	adds	r0, r4, #0
   14594:	1c29      	adds	r1, r5, #0
   14596:	4b6f      	ldr	r3, [pc, #444]	; (14754 <pow+0x2dc>)
   14598:	4a6d      	ldr	r2, [pc, #436]	; (14750 <pow+0x2d8>)
   1459a:	f001 f9dd 	bl	15958 <__aeabi_dcmpeq>
   1459e:	2800      	cmp	r0, #0
   145a0:	d16c      	bne.n	1467c <pow+0x204>
   145a2:	9402      	str	r4, [sp, #8]
   145a4:	9503      	str	r5, [sp, #12]
   145a6:	e782      	b.n	144ae <pow+0x36>
   145a8:	1c30      	adds	r0, r6, #0
   145aa:	1c39      	adds	r1, r7, #0
   145ac:	f000 ff96 	bl	154dc <finite>
   145b0:	2800      	cmp	r0, #0
   145b2:	d100      	bne.n	145b6 <pow+0x13e>
   145b4:	e77b      	b.n	144ae <pow+0x36>
   145b6:	1c30      	adds	r0, r6, #0
   145b8:	1c39      	adds	r1, r7, #0
   145ba:	4b66      	ldr	r3, [pc, #408]	; (14754 <pow+0x2dc>)
   145bc:	4a64      	ldr	r2, [pc, #400]	; (14750 <pow+0x2d8>)
   145be:	f001 f9d1 	bl	15964 <__aeabi_dcmplt>
   145c2:	2800      	cmp	r0, #0
   145c4:	d100      	bne.n	145c8 <pow+0x150>
   145c6:	e772      	b.n	144ae <pow+0x36>
   145c8:	2301      	movs	r3, #1
   145ca:	9304      	str	r3, [sp, #16]
   145cc:	4b6d      	ldr	r3, [pc, #436]	; (14784 <pow+0x30c>)
   145ce:	ac04      	add	r4, sp, #16
   145d0:	6063      	str	r3, [r4, #4]
   145d2:	9a00      	ldr	r2, [sp, #0]
   145d4:	9b01      	ldr	r3, [sp, #4]
   145d6:	60a2      	str	r2, [r4, #8]
   145d8:	60e3      	str	r3, [r4, #12]
   145da:	4643      	mov	r3, r8
   145dc:	7819      	ldrb	r1, [r3, #0]
   145de:	6225      	str	r5, [r4, #32]
   145e0:	6126      	str	r6, [r4, #16]
   145e2:	6167      	str	r7, [r4, #20]
   145e4:	2900      	cmp	r1, #0
   145e6:	d100      	bne.n	145ea <pow+0x172>
   145e8:	e07a      	b.n	146e0 <pow+0x268>
   145ea:	4a5d      	ldr	r2, [pc, #372]	; (14760 <pow+0x2e8>)
   145ec:	4b5d      	ldr	r3, [pc, #372]	; (14764 <pow+0x2ec>)
   145ee:	61a2      	str	r2, [r4, #24]
   145f0:	61e3      	str	r3, [r4, #28]
   145f2:	2902      	cmp	r1, #2
   145f4:	d13c      	bne.n	14670 <pow+0x1f8>
   145f6:	f003 fc27 	bl	17e48 <__errno>
   145fa:	2321      	movs	r3, #33	; 0x21
   145fc:	6003      	str	r3, [r0, #0]
   145fe:	6a23      	ldr	r3, [r4, #32]
   14600:	2b00      	cmp	r3, #0
   14602:	d08f      	beq.n	14524 <pow+0xac>
   14604:	f003 fc20 	bl	17e48 <__errno>
   14608:	6a22      	ldr	r2, [r4, #32]
   1460a:	6002      	str	r2, [r0, #0]
   1460c:	e78a      	b.n	14524 <pow+0xac>
   1460e:	f003 fc1b 	bl	17e48 <__errno>
   14612:	2321      	movs	r3, #33	; 0x21
   14614:	6003      	str	r3, [r0, #0]
   14616:	e77e      	b.n	14516 <pow+0x9e>
   14618:	9800      	ldr	r0, [sp, #0]
   1461a:	9901      	ldr	r1, [sp, #4]
   1461c:	f000 ff5e 	bl	154dc <finite>
   14620:	2800      	cmp	r0, #0
   14622:	d0b6      	beq.n	14592 <pow+0x11a>
   14624:	1c30      	adds	r0, r6, #0
   14626:	1c39      	adds	r1, r7, #0
   14628:	f000 ff58 	bl	154dc <finite>
   1462c:	2800      	cmp	r0, #0
   1462e:	d0b0      	beq.n	14592 <pow+0x11a>
   14630:	1c20      	adds	r0, r4, #0
   14632:	1c29      	adds	r1, r5, #0
   14634:	f000 ff5a 	bl	154ec <__fpclassifyd>
   14638:	ac04      	add	r4, sp, #16
   1463a:	2800      	cmp	r0, #0
   1463c:	d155      	bne.n	146ea <pow+0x272>
   1463e:	2301      	movs	r3, #1
   14640:	9304      	str	r3, [sp, #16]
   14642:	4b50      	ldr	r3, [pc, #320]	; (14784 <pow+0x30c>)
   14644:	6220      	str	r0, [r4, #32]
   14646:	6063      	str	r3, [r4, #4]
   14648:	9a00      	ldr	r2, [sp, #0]
   1464a:	9b01      	ldr	r3, [sp, #4]
   1464c:	60a2      	str	r2, [r4, #8]
   1464e:	60e3      	str	r3, [r4, #12]
   14650:	4643      	mov	r3, r8
   14652:	781d      	ldrb	r5, [r3, #0]
   14654:	6126      	str	r6, [r4, #16]
   14656:	6167      	str	r7, [r4, #20]
   14658:	2d00      	cmp	r5, #0
   1465a:	d041      	beq.n	146e0 <pow+0x268>
   1465c:	493d      	ldr	r1, [pc, #244]	; (14754 <pow+0x2dc>)
   1465e:	483c      	ldr	r0, [pc, #240]	; (14750 <pow+0x2d8>)
   14660:	1c02      	adds	r2, r0, #0
   14662:	1c0b      	adds	r3, r1, #0
   14664:	f001 fd60 	bl	16128 <__aeabi_ddiv>
   14668:	61a0      	str	r0, [r4, #24]
   1466a:	61e1      	str	r1, [r4, #28]
   1466c:	2d02      	cmp	r5, #2
   1466e:	d0c2      	beq.n	145f6 <pow+0x17e>
   14670:	1c20      	adds	r0, r4, #0
   14672:	f000 ff6b 	bl	1554c <matherr>
   14676:	2800      	cmp	r0, #0
   14678:	d1c1      	bne.n	145fe <pow+0x186>
   1467a:	e7bc      	b.n	145f6 <pow+0x17e>
   1467c:	9800      	ldr	r0, [sp, #0]
   1467e:	9901      	ldr	r1, [sp, #4]
   14680:	f000 ff2c 	bl	154dc <finite>
   14684:	9402      	str	r4, [sp, #8]
   14686:	9503      	str	r5, [sp, #12]
   14688:	2800      	cmp	r0, #0
   1468a:	d100      	bne.n	1468e <pow+0x216>
   1468c:	e70f      	b.n	144ae <pow+0x36>
   1468e:	1c30      	adds	r0, r6, #0
   14690:	1c39      	adds	r1, r7, #0
   14692:	f000 ff23 	bl	154dc <finite>
   14696:	9402      	str	r4, [sp, #8]
   14698:	9503      	str	r5, [sp, #12]
   1469a:	2800      	cmp	r0, #0
   1469c:	d100      	bne.n	146a0 <pow+0x228>
   1469e:	e706      	b.n	144ae <pow+0x36>
   146a0:	ac04      	add	r4, sp, #16
   146a2:	2304      	movs	r3, #4
   146a4:	9304      	str	r3, [sp, #16]
   146a6:	6126      	str	r6, [r4, #16]
   146a8:	6167      	str	r7, [r4, #20]
   146aa:	4b36      	ldr	r3, [pc, #216]	; (14784 <pow+0x30c>)
   146ac:	6063      	str	r3, [r4, #4]
   146ae:	2300      	movs	r3, #0
   146b0:	6223      	str	r3, [r4, #32]
   146b2:	9a00      	ldr	r2, [sp, #0]
   146b4:	9b01      	ldr	r3, [sp, #4]
   146b6:	60a2      	str	r2, [r4, #8]
   146b8:	60e3      	str	r3, [r4, #12]
   146ba:	4b26      	ldr	r3, [pc, #152]	; (14754 <pow+0x2dc>)
   146bc:	4a24      	ldr	r2, [pc, #144]	; (14750 <pow+0x2d8>)
   146be:	61a2      	str	r2, [r4, #24]
   146c0:	61e3      	str	r3, [r4, #28]
   146c2:	4642      	mov	r2, r8
   146c4:	2300      	movs	r3, #0
   146c6:	56d3      	ldrsb	r3, [r2, r3]
   146c8:	2b02      	cmp	r3, #2
   146ca:	d004      	beq.n	146d6 <pow+0x25e>
   146cc:	1c20      	adds	r0, r4, #0
   146ce:	f000 ff3d 	bl	1554c <matherr>
   146d2:	2800      	cmp	r0, #0
   146d4:	d193      	bne.n	145fe <pow+0x186>
   146d6:	f003 fbb7 	bl	17e48 <__errno>
   146da:	2322      	movs	r3, #34	; 0x22
   146dc:	6003      	str	r3, [r0, #0]
   146de:	e78e      	b.n	145fe <pow+0x186>
   146e0:	4b1c      	ldr	r3, [pc, #112]	; (14754 <pow+0x2dc>)
   146e2:	4a1b      	ldr	r2, [pc, #108]	; (14750 <pow+0x2d8>)
   146e4:	61a2      	str	r2, [r4, #24]
   146e6:	61e3      	str	r3, [r4, #28]
   146e8:	e7c2      	b.n	14670 <pow+0x1f8>
   146ea:	2303      	movs	r3, #3
   146ec:	9304      	str	r3, [sp, #16]
   146ee:	4b25      	ldr	r3, [pc, #148]	; (14784 <pow+0x30c>)
   146f0:	6126      	str	r6, [r4, #16]
   146f2:	6167      	str	r7, [r4, #20]
   146f4:	6063      	str	r3, [r4, #4]
   146f6:	464b      	mov	r3, r9
   146f8:	6223      	str	r3, [r4, #32]
   146fa:	9a00      	ldr	r2, [sp, #0]
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	60a2      	str	r2, [r4, #8]
   14700:	60e3      	str	r3, [r4, #12]
   14702:	4642      	mov	r2, r8
   14704:	2300      	movs	r3, #0
   14706:	56d3      	ldrsb	r3, [r2, r3]
   14708:	2b00      	cmp	r3, #0
   1470a:	d13d      	bne.n	14788 <pow+0x310>
   1470c:	4a16      	ldr	r2, [pc, #88]	; (14768 <pow+0x2f0>)
   1470e:	4b17      	ldr	r3, [pc, #92]	; (1476c <pow+0x2f4>)
   14710:	9800      	ldr	r0, [sp, #0]
   14712:	9901      	ldr	r1, [sp, #4]
   14714:	61a2      	str	r2, [r4, #24]
   14716:	61e3      	str	r3, [r4, #28]
   14718:	4b0e      	ldr	r3, [pc, #56]	; (14754 <pow+0x2dc>)
   1471a:	4a0d      	ldr	r2, [pc, #52]	; (14750 <pow+0x2d8>)
   1471c:	f001 f922 	bl	15964 <__aeabi_dcmplt>
   14720:	2800      	cmp	r0, #0
   14722:	d0ce      	beq.n	146c2 <pow+0x24a>
   14724:	4a12      	ldr	r2, [pc, #72]	; (14770 <pow+0x2f8>)
   14726:	4b13      	ldr	r3, [pc, #76]	; (14774 <pow+0x2fc>)
   14728:	1c30      	adds	r0, r6, #0
   1472a:	1c39      	adds	r1, r7, #0
   1472c:	f002 f966 	bl	169fc <__aeabi_dmul>
   14730:	1c06      	adds	r6, r0, #0
   14732:	1c0f      	adds	r7, r1, #0
   14734:	f000 ff14 	bl	15560 <rint>
   14738:	1c32      	adds	r2, r6, #0
   1473a:	1c3b      	adds	r3, r7, #0
   1473c:	f001 f90c 	bl	15958 <__aeabi_dcmpeq>
   14740:	2800      	cmp	r0, #0
   14742:	d1be      	bne.n	146c2 <pow+0x24a>
   14744:	4a0c      	ldr	r2, [pc, #48]	; (14778 <pow+0x300>)
   14746:	4b0d      	ldr	r3, [pc, #52]	; (1477c <pow+0x304>)
   14748:	61a2      	str	r2, [r4, #24]
   1474a:	61e3      	str	r3, [r4, #28]
   1474c:	e7b9      	b.n	146c2 <pow+0x24a>
   1474e:	46c0      	nop			; (mov r8, r8)
	...
   1475c:	3ff00000 	.word	0x3ff00000
   14760:	00000000 	.word	0x00000000
   14764:	fff00000 	.word	0xfff00000
   14768:	e0000000 	.word	0xe0000000
   1476c:	47efffff 	.word	0x47efffff
   14770:	00000000 	.word	0x00000000
   14774:	3fe00000 	.word	0x3fe00000
   14778:	e0000000 	.word	0xe0000000
   1477c:	c7efffff 	.word	0xc7efffff
   14780:	20000045 	.word	0x20000045
   14784:	000186ac 	.word	0x000186ac
   14788:	4b10      	ldr	r3, [pc, #64]	; (147cc <pow+0x354>)
   1478a:	4a0f      	ldr	r2, [pc, #60]	; (147c8 <pow+0x350>)
   1478c:	9800      	ldr	r0, [sp, #0]
   1478e:	9901      	ldr	r1, [sp, #4]
   14790:	61a2      	str	r2, [r4, #24]
   14792:	61e3      	str	r3, [r4, #28]
   14794:	4a0e      	ldr	r2, [pc, #56]	; (147d0 <pow+0x358>)
   14796:	4b0f      	ldr	r3, [pc, #60]	; (147d4 <pow+0x35c>)
   14798:	f001 f8e4 	bl	15964 <__aeabi_dcmplt>
   1479c:	2800      	cmp	r0, #0
   1479e:	d090      	beq.n	146c2 <pow+0x24a>
   147a0:	4a0d      	ldr	r2, [pc, #52]	; (147d8 <pow+0x360>)
   147a2:	4b0e      	ldr	r3, [pc, #56]	; (147dc <pow+0x364>)
   147a4:	1c30      	adds	r0, r6, #0
   147a6:	1c39      	adds	r1, r7, #0
   147a8:	f002 f928 	bl	169fc <__aeabi_dmul>
   147ac:	1c06      	adds	r6, r0, #0
   147ae:	1c0f      	adds	r7, r1, #0
   147b0:	f000 fed6 	bl	15560 <rint>
   147b4:	1c32      	adds	r2, r6, #0
   147b6:	1c3b      	adds	r3, r7, #0
   147b8:	f001 f8ce 	bl	15958 <__aeabi_dcmpeq>
   147bc:	2800      	cmp	r0, #0
   147be:	d000      	beq.n	147c2 <pow+0x34a>
   147c0:	e77f      	b.n	146c2 <pow+0x24a>
   147c2:	4a07      	ldr	r2, [pc, #28]	; (147e0 <pow+0x368>)
   147c4:	4b07      	ldr	r3, [pc, #28]	; (147e4 <pow+0x36c>)
   147c6:	e77a      	b.n	146be <pow+0x246>
   147c8:	00000000 	.word	0x00000000
   147cc:	7ff00000 	.word	0x7ff00000
	...
   147dc:	3fe00000 	.word	0x3fe00000
   147e0:	00000000 	.word	0x00000000
   147e4:	fff00000 	.word	0xfff00000

000147e8 <__ieee754_pow>:
   147e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ea:	465f      	mov	r7, fp
   147ec:	4656      	mov	r6, sl
   147ee:	464d      	mov	r5, r9
   147f0:	4644      	mov	r4, r8
   147f2:	b4f0      	push	{r4, r5, r6, r7}
   147f4:	4699      	mov	r9, r3
   147f6:	464b      	mov	r3, r9
   147f8:	005c      	lsls	r4, r3, #1
   147fa:	4693      	mov	fp, r2
   147fc:	0864      	lsrs	r4, r4, #1
   147fe:	b08f      	sub	sp, #60	; 0x3c
   14800:	1c0d      	adds	r5, r1, #0
   14802:	1c0f      	adds	r7, r1, #0
   14804:	465a      	mov	r2, fp
   14806:	1c21      	adds	r1, r4, #0
   14808:	9000      	str	r0, [sp, #0]
   1480a:	1c06      	adds	r6, r0, #0
   1480c:	4682      	mov	sl, r0
   1480e:	9302      	str	r3, [sp, #8]
   14810:	4658      	mov	r0, fp
   14812:	4311      	orrs	r1, r2
   14814:	d037      	beq.n	14886 <__ieee754_pow+0x9e>
   14816:	0069      	lsls	r1, r5, #1
   14818:	0849      	lsrs	r1, r1, #1
   1481a:	4688      	mov	r8, r1
   1481c:	4968      	ldr	r1, [pc, #416]	; (149c0 <__ieee754_pow+0x1d8>)
   1481e:	9504      	str	r5, [sp, #16]
   14820:	4588      	cmp	r8, r1
   14822:	dc2b      	bgt.n	1487c <__ieee754_pow+0x94>
   14824:	d028      	beq.n	14878 <__ieee754_pow+0x90>
   14826:	4966      	ldr	r1, [pc, #408]	; (149c0 <__ieee754_pow+0x1d8>)
   14828:	428c      	cmp	r4, r1
   1482a:	dc27      	bgt.n	1487c <__ieee754_pow+0x94>
   1482c:	d100      	bne.n	14830 <__ieee754_pow+0x48>
   1482e:	e080      	b.n	14932 <__ieee754_pow+0x14a>
   14830:	2100      	movs	r1, #0
   14832:	9108      	str	r1, [sp, #32]
   14834:	9904      	ldr	r1, [sp, #16]
   14836:	2900      	cmp	r1, #0
   14838:	da00      	bge.n	1483c <__ieee754_pow+0x54>
   1483a:	e07e      	b.n	1493a <__ieee754_pow+0x152>
   1483c:	2800      	cmp	r0, #0
   1483e:	d133      	bne.n	148a8 <__ieee754_pow+0xc0>
   14840:	4b5f      	ldr	r3, [pc, #380]	; (149c0 <__ieee754_pow+0x1d8>)
   14842:	429c      	cmp	r4, r3
   14844:	d100      	bne.n	14848 <__ieee754_pow+0x60>
   14846:	e096      	b.n	14976 <__ieee754_pow+0x18e>
   14848:	4b5e      	ldr	r3, [pc, #376]	; (149c4 <__ieee754_pow+0x1dc>)
   1484a:	429c      	cmp	r4, r3
   1484c:	d06a      	beq.n	14924 <__ieee754_pow+0x13c>
   1484e:	9802      	ldr	r0, [sp, #8]
   14850:	2380      	movs	r3, #128	; 0x80
   14852:	05db      	lsls	r3, r3, #23
   14854:	4298      	cmp	r0, r3
   14856:	d101      	bne.n	1485c <__ieee754_pow+0x74>
   14858:	f000 fbe1 	bl	1501e <__ieee754_pow+0x836>
   1485c:	4b5a      	ldr	r3, [pc, #360]	; (149c8 <__ieee754_pow+0x1e0>)
   1485e:	9902      	ldr	r1, [sp, #8]
   14860:	4299      	cmp	r1, r3
   14862:	d121      	bne.n	148a8 <__ieee754_pow+0xc0>
   14864:	9a04      	ldr	r2, [sp, #16]
   14866:	2a00      	cmp	r2, #0
   14868:	db1e      	blt.n	148a8 <__ieee754_pow+0xc0>
   1486a:	1c29      	adds	r1, r5, #0
   1486c:	9800      	ldr	r0, [sp, #0]
   1486e:	f000 fd4b 	bl	15308 <__ieee754_sqrt>
   14872:	1c06      	adds	r6, r0, #0
   14874:	1c0d      	adds	r5, r1, #0
   14876:	e008      	b.n	1488a <__ieee754_pow+0xa2>
   14878:	2e00      	cmp	r6, #0
   1487a:	d0d4      	beq.n	14826 <__ieee754_pow+0x3e>
   1487c:	4a53      	ldr	r2, [pc, #332]	; (149cc <__ieee754_pow+0x1e4>)
   1487e:	1c13      	adds	r3, r2, #0
   14880:	4443      	add	r3, r8
   14882:	4333      	orrs	r3, r6
   14884:	d10a      	bne.n	1489c <__ieee754_pow+0xb4>
   14886:	4d4f      	ldr	r5, [pc, #316]	; (149c4 <__ieee754_pow+0x1dc>)
   14888:	2600      	movs	r6, #0
   1488a:	1c30      	adds	r0, r6, #0
   1488c:	1c29      	adds	r1, r5, #0
   1488e:	b00f      	add	sp, #60	; 0x3c
   14890:	bc3c      	pop	{r2, r3, r4, r5}
   14892:	4690      	mov	r8, r2
   14894:	4699      	mov	r9, r3
   14896:	46a2      	mov	sl, r4
   14898:	46ab      	mov	fp, r5
   1489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1489c:	484c      	ldr	r0, [pc, #304]	; (149d0 <__ieee754_pow+0x1e8>)
   1489e:	f000 fe57 	bl	15550 <nan>
   148a2:	1c06      	adds	r6, r0, #0
   148a4:	1c0d      	adds	r5, r1, #0
   148a6:	e7f0      	b.n	1488a <__ieee754_pow+0xa2>
   148a8:	9800      	ldr	r0, [sp, #0]
   148aa:	1c29      	adds	r1, r5, #0
   148ac:	f000 fe12 	bl	154d4 <fabs>
   148b0:	4653      	mov	r3, sl
   148b2:	9006      	str	r0, [sp, #24]
   148b4:	468c      	mov	ip, r1
   148b6:	2b00      	cmp	r3, #0
   148b8:	d020      	beq.n	148fc <__ieee754_pow+0x114>
   148ba:	0ffb      	lsrs	r3, r7, #31
   148bc:	3b01      	subs	r3, #1
   148be:	9304      	str	r3, [sp, #16]
   148c0:	9e04      	ldr	r6, [sp, #16]
   148c2:	9b08      	ldr	r3, [sp, #32]
   148c4:	4333      	orrs	r3, r6
   148c6:	d06a      	beq.n	1499e <__ieee754_pow+0x1b6>
   148c8:	4b42      	ldr	r3, [pc, #264]	; (149d4 <__ieee754_pow+0x1ec>)
   148ca:	429c      	cmp	r4, r3
   148cc:	dc00      	bgt.n	148d0 <__ieee754_pow+0xe8>
   148ce:	e08d      	b.n	149ec <__ieee754_pow+0x204>
   148d0:	4b41      	ldr	r3, [pc, #260]	; (149d8 <__ieee754_pow+0x1f0>)
   148d2:	429c      	cmp	r4, r3
   148d4:	dc01      	bgt.n	148da <__ieee754_pow+0xf2>
   148d6:	f000 fc35 	bl	15144 <__ieee754_pow+0x95c>
   148da:	4b40      	ldr	r3, [pc, #256]	; (149dc <__ieee754_pow+0x1f4>)
   148dc:	4598      	cmp	r8, r3
   148de:	dc00      	bgt.n	148e2 <__ieee754_pow+0xfa>
   148e0:	e389      	b.n	14ff6 <__ieee754_pow+0x80e>
   148e2:	9e02      	ldr	r6, [sp, #8]
   148e4:	2e00      	cmp	r6, #0
   148e6:	dc00      	bgt.n	148ea <__ieee754_pow+0x102>
   148e8:	e389      	b.n	14ffe <__ieee754_pow+0x816>
   148ea:	4934      	ldr	r1, [pc, #208]	; (149bc <__ieee754_pow+0x1d4>)
   148ec:	4832      	ldr	r0, [pc, #200]	; (149b8 <__ieee754_pow+0x1d0>)
   148ee:	1c02      	adds	r2, r0, #0
   148f0:	1c0b      	adds	r3, r1, #0
   148f2:	f002 f883 	bl	169fc <__aeabi_dmul>
   148f6:	1c06      	adds	r6, r0, #0
   148f8:	1c0d      	adds	r5, r1, #0
   148fa:	e7c6      	b.n	1488a <__ieee754_pow+0xa2>
   148fc:	4640      	mov	r0, r8
   148fe:	2800      	cmp	r0, #0
   14900:	d004      	beq.n	1490c <__ieee754_pow+0x124>
   14902:	4b30      	ldr	r3, [pc, #192]	; (149c4 <__ieee754_pow+0x1dc>)
   14904:	00ba      	lsls	r2, r7, #2
   14906:	0892      	lsrs	r2, r2, #2
   14908:	429a      	cmp	r2, r3
   1490a:	d1d6      	bne.n	148ba <__ieee754_pow+0xd2>
   1490c:	9c02      	ldr	r4, [sp, #8]
   1490e:	2c00      	cmp	r4, #0
   14910:	da01      	bge.n	14916 <__ieee754_pow+0x12e>
   14912:	f000 fbc4 	bl	1509e <__ieee754_pow+0x8b6>
   14916:	9e04      	ldr	r6, [sp, #16]
   14918:	2e00      	cmp	r6, #0
   1491a:	da00      	bge.n	1491e <__ieee754_pow+0x136>
   1491c:	e373      	b.n	15006 <__ieee754_pow+0x81e>
   1491e:	9e06      	ldr	r6, [sp, #24]
   14920:	4665      	mov	r5, ip
   14922:	e7b2      	b.n	1488a <__ieee754_pow+0xa2>
   14924:	9c02      	ldr	r4, [sp, #8]
   14926:	2c00      	cmp	r4, #0
   14928:	da01      	bge.n	1492e <__ieee754_pow+0x146>
   1492a:	f000 fc76 	bl	1521a <__ieee754_pow+0xa32>
   1492e:	9e00      	ldr	r6, [sp, #0]
   14930:	e7ab      	b.n	1488a <__ieee754_pow+0xa2>
   14932:	2800      	cmp	r0, #0
   14934:	d100      	bne.n	14938 <__ieee754_pow+0x150>
   14936:	e77b      	b.n	14830 <__ieee754_pow+0x48>
   14938:	e7a0      	b.n	1487c <__ieee754_pow+0x94>
   1493a:	4929      	ldr	r1, [pc, #164]	; (149e0 <__ieee754_pow+0x1f8>)
   1493c:	428c      	cmp	r4, r1
   1493e:	dc2b      	bgt.n	14998 <__ieee754_pow+0x1b0>
   14940:	4926      	ldr	r1, [pc, #152]	; (149dc <__ieee754_pow+0x1f4>)
   14942:	428c      	cmp	r4, r1
   14944:	dc00      	bgt.n	14948 <__ieee754_pow+0x160>
   14946:	e779      	b.n	1483c <__ieee754_pow+0x54>
   14948:	1521      	asrs	r1, r4, #20
   1494a:	468c      	mov	ip, r1
   1494c:	4925      	ldr	r1, [pc, #148]	; (149e4 <__ieee754_pow+0x1fc>)
   1494e:	458c      	cmp	ip, r1
   14950:	dc01      	bgt.n	14956 <__ieee754_pow+0x16e>
   14952:	f000 fc86 	bl	15262 <__ieee754_pow+0xa7a>
   14956:	4b24      	ldr	r3, [pc, #144]	; (149e8 <__ieee754_pow+0x200>)
   14958:	4661      	mov	r1, ip
   1495a:	1a5b      	subs	r3, r3, r1
   1495c:	1c11      	adds	r1, r2, #0
   1495e:	40d9      	lsrs	r1, r3
   14960:	1c0a      	adds	r2, r1, #0
   14962:	409a      	lsls	r2, r3
   14964:	4282      	cmp	r2, r0
   14966:	d000      	beq.n	1496a <__ieee754_pow+0x182>
   14968:	e768      	b.n	1483c <__ieee754_pow+0x54>
   1496a:	2201      	movs	r2, #1
   1496c:	400a      	ands	r2, r1
   1496e:	2302      	movs	r3, #2
   14970:	1a9b      	subs	r3, r3, r2
   14972:	9308      	str	r3, [sp, #32]
   14974:	e762      	b.n	1483c <__ieee754_pow+0x54>
   14976:	4a15      	ldr	r2, [pc, #84]	; (149cc <__ieee754_pow+0x1e4>)
   14978:	1c13      	adds	r3, r2, #0
   1497a:	4443      	add	r3, r8
   1497c:	4333      	orrs	r3, r6
   1497e:	d100      	bne.n	14982 <__ieee754_pow+0x19a>
   14980:	e781      	b.n	14886 <__ieee754_pow+0x9e>
   14982:	4b16      	ldr	r3, [pc, #88]	; (149dc <__ieee754_pow+0x1f4>)
   14984:	4598      	cmp	r8, r3
   14986:	dc00      	bgt.n	1498a <__ieee754_pow+0x1a2>
   14988:	e37f      	b.n	1508a <__ieee754_pow+0x8a2>
   1498a:	9c02      	ldr	r4, [sp, #8]
   1498c:	2c00      	cmp	r4, #0
   1498e:	da00      	bge.n	14992 <__ieee754_pow+0x1aa>
   14990:	e335      	b.n	14ffe <__ieee754_pow+0x816>
   14992:	465e      	mov	r6, fp
   14994:	464d      	mov	r5, r9
   14996:	e778      	b.n	1488a <__ieee754_pow+0xa2>
   14998:	2102      	movs	r1, #2
   1499a:	9108      	str	r1, [sp, #32]
   1499c:	e74e      	b.n	1483c <__ieee754_pow+0x54>
   1499e:	9800      	ldr	r0, [sp, #0]
   149a0:	9a00      	ldr	r2, [sp, #0]
   149a2:	1c29      	adds	r1, r5, #0
   149a4:	1c2b      	adds	r3, r5, #0
   149a6:	f002 fab9 	bl	16f1c <__aeabi_dsub>
   149aa:	1c02      	adds	r2, r0, #0
   149ac:	1c0b      	adds	r3, r1, #0
   149ae:	f001 fbbb 	bl	16128 <__aeabi_ddiv>
   149b2:	1c06      	adds	r6, r0, #0
   149b4:	1c0d      	adds	r5, r1, #0
   149b6:	e768      	b.n	1488a <__ieee754_pow+0xa2>
   149b8:	8800759c 	.word	0x8800759c
   149bc:	7e37e43c 	.word	0x7e37e43c
   149c0:	7ff00000 	.word	0x7ff00000
   149c4:	3ff00000 	.word	0x3ff00000
   149c8:	3fe00000 	.word	0x3fe00000
   149cc:	c0100000 	.word	0xc0100000
   149d0:	000186e0 	.word	0x000186e0
   149d4:	41e00000 	.word	0x41e00000
   149d8:	43f00000 	.word	0x43f00000
   149dc:	3fefffff 	.word	0x3fefffff
   149e0:	433fffff 	.word	0x433fffff
   149e4:	00000413 	.word	0x00000413
   149e8:	00000433 	.word	0x00000433
   149ec:	4ae2      	ldr	r2, [pc, #904]	; (14d78 <__ieee754_pow+0x590>)
   149ee:	2300      	movs	r3, #0
   149f0:	4590      	cmp	r8, r2
   149f2:	dc09      	bgt.n	14a08 <__ieee754_pow+0x220>
   149f4:	9806      	ldr	r0, [sp, #24]
   149f6:	4bc5      	ldr	r3, [pc, #788]	; (14d0c <__ieee754_pow+0x524>)
   149f8:	4ac3      	ldr	r2, [pc, #780]	; (14d08 <__ieee754_pow+0x520>)
   149fa:	4661      	mov	r1, ip
   149fc:	f001 fffe 	bl	169fc <__aeabi_dmul>
   14a00:	2335      	movs	r3, #53	; 0x35
   14a02:	9006      	str	r0, [sp, #24]
   14a04:	4688      	mov	r8, r1
   14a06:	425b      	negs	r3, r3
   14a08:	4640      	mov	r0, r8
   14a0a:	49dc      	ldr	r1, [pc, #880]	; (14d7c <__ieee754_pow+0x594>)
   14a0c:	1502      	asrs	r2, r0, #20
   14a0e:	1852      	adds	r2, r2, r1
   14a10:	18d2      	adds	r2, r2, r3
   14a12:	4692      	mov	sl, r2
   14a14:	0303      	lsls	r3, r0, #12
   14a16:	4dda      	ldr	r5, [pc, #872]	; (14d80 <__ieee754_pow+0x598>)
   14a18:	4ada      	ldr	r2, [pc, #872]	; (14d84 <__ieee754_pow+0x59c>)
   14a1a:	0b1b      	lsrs	r3, r3, #12
   14a1c:	431d      	orrs	r5, r3
   14a1e:	4293      	cmp	r3, r2
   14a20:	dc01      	bgt.n	14a26 <__ieee754_pow+0x23e>
   14a22:	f000 fbf6 	bl	15212 <__ieee754_pow+0xa2a>
   14a26:	4ad8      	ldr	r2, [pc, #864]	; (14d88 <__ieee754_pow+0x5a0>)
   14a28:	4293      	cmp	r3, r2
   14a2a:	dc01      	bgt.n	14a30 <__ieee754_pow+0x248>
   14a2c:	f000 fc36 	bl	1529c <__ieee754_pow+0xab4>
   14a30:	4bd6      	ldr	r3, [pc, #856]	; (14d8c <__ieee754_pow+0x5a4>)
   14a32:	2201      	movs	r2, #1
   14a34:	4492      	add	sl, r2
   14a36:	18ed      	adds	r5, r5, r3
   14a38:	2400      	movs	r4, #0
   14a3a:	2100      	movs	r1, #0
   14a3c:	9a06      	ldr	r2, [sp, #24]
   14a3e:	1c2b      	adds	r3, r5, #0
   14a40:	9206      	str	r2, [sp, #24]
   14a42:	9307      	str	r3, [sp, #28]
   14a44:	00c9      	lsls	r1, r1, #3
   14a46:	4bd2      	ldr	r3, [pc, #840]	; (14d90 <__ieee754_pow+0x5a8>)
   14a48:	4688      	mov	r8, r1
   14a4a:	4443      	add	r3, r8
   14a4c:	6818      	ldr	r0, [r3, #0]
   14a4e:	6859      	ldr	r1, [r3, #4]
   14a50:	900a      	str	r0, [sp, #40]	; 0x28
   14a52:	910b      	str	r1, [sp, #44]	; 0x2c
   14a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a58:	9806      	ldr	r0, [sp, #24]
   14a5a:	9907      	ldr	r1, [sp, #28]
   14a5c:	f002 fa5e 	bl	16f1c <__aeabi_dsub>
   14a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a64:	1c06      	adds	r6, r0, #0
   14a66:	1c0f      	adds	r7, r1, #0
   14a68:	9806      	ldr	r0, [sp, #24]
   14a6a:	9907      	ldr	r1, [sp, #28]
   14a6c:	f001 f83a 	bl	15ae4 <__aeabi_dadd>
   14a70:	1c02      	adds	r2, r0, #0
   14a72:	1c0b      	adds	r3, r1, #0
   14a74:	48a6      	ldr	r0, [pc, #664]	; (14d10 <__ieee754_pow+0x528>)
   14a76:	49a7      	ldr	r1, [pc, #668]	; (14d14 <__ieee754_pow+0x52c>)
   14a78:	f001 fb56 	bl	16128 <__aeabi_ddiv>
   14a7c:	900c      	str	r0, [sp, #48]	; 0x30
   14a7e:	910d      	str	r1, [sp, #52]	; 0x34
   14a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14a84:	1c30      	adds	r0, r6, #0
   14a86:	1c39      	adds	r1, r7, #0
   14a88:	f001 ffb8 	bl	169fc <__aeabi_dmul>
   14a8c:	9002      	str	r0, [sp, #8]
   14a8e:	9103      	str	r1, [sp, #12]
   14a90:	1c0b      	adds	r3, r1, #0
   14a92:	2180      	movs	r1, #128	; 0x80
   14a94:	0589      	lsls	r1, r1, #22
   14a96:	106d      	asrs	r5, r5, #1
   14a98:	2080      	movs	r0, #128	; 0x80
   14a9a:	2200      	movs	r2, #0
   14a9c:	430d      	orrs	r5, r1
   14a9e:	0300      	lsls	r0, r0, #12
   14aa0:	9200      	str	r2, [sp, #0]
   14aa2:	9301      	str	r3, [sp, #4]
   14aa4:	4a9c      	ldr	r2, [pc, #624]	; (14d18 <__ieee754_pow+0x530>)
   14aa6:	4b9d      	ldr	r3, [pc, #628]	; (14d1c <__ieee754_pow+0x534>)
   14aa8:	1829      	adds	r1, r5, r0
   14aaa:	190b      	adds	r3, r1, r4
   14aac:	9800      	ldr	r0, [sp, #0]
   14aae:	9901      	ldr	r1, [sp, #4]
   14ab0:	1c14      	adds	r4, r2, #0
   14ab2:	1c1d      	adds	r5, r3, #0
   14ab4:	f001 ffa2 	bl	169fc <__aeabi_dmul>
   14ab8:	1c02      	adds	r2, r0, #0
   14aba:	1c0b      	adds	r3, r1, #0
   14abc:	1c30      	adds	r0, r6, #0
   14abe:	1c39      	adds	r1, r7, #0
   14ac0:	f002 fa2c 	bl	16f1c <__aeabi_dsub>
   14ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ac8:	1c06      	adds	r6, r0, #0
   14aca:	1c0f      	adds	r7, r1, #0
   14acc:	1c20      	adds	r0, r4, #0
   14ace:	1c29      	adds	r1, r5, #0
   14ad0:	f002 fa24 	bl	16f1c <__aeabi_dsub>
   14ad4:	1c02      	adds	r2, r0, #0
   14ad6:	1c0b      	adds	r3, r1, #0
   14ad8:	9806      	ldr	r0, [sp, #24]
   14ada:	9907      	ldr	r1, [sp, #28]
   14adc:	f002 fa1e 	bl	16f1c <__aeabi_dsub>
   14ae0:	1c02      	adds	r2, r0, #0
   14ae2:	1c0b      	adds	r3, r1, #0
   14ae4:	9800      	ldr	r0, [sp, #0]
   14ae6:	9901      	ldr	r1, [sp, #4]
   14ae8:	f001 ff88 	bl	169fc <__aeabi_dmul>
   14aec:	1c02      	adds	r2, r0, #0
   14aee:	1c0b      	adds	r3, r1, #0
   14af0:	1c30      	adds	r0, r6, #0
   14af2:	1c39      	adds	r1, r7, #0
   14af4:	f002 fa12 	bl	16f1c <__aeabi_dsub>
   14af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14afc:	f001 ff7e 	bl	169fc <__aeabi_dmul>
   14b00:	9006      	str	r0, [sp, #24]
   14b02:	9107      	str	r1, [sp, #28]
   14b04:	9802      	ldr	r0, [sp, #8]
   14b06:	9903      	ldr	r1, [sp, #12]
   14b08:	1c02      	adds	r2, r0, #0
   14b0a:	1c0b      	adds	r3, r1, #0
   14b0c:	f001 ff76 	bl	169fc <__aeabi_dmul>
   14b10:	1c04      	adds	r4, r0, #0
   14b12:	1c0d      	adds	r5, r1, #0
   14b14:	1c22      	adds	r2, r4, #0
   14b16:	1c2b      	adds	r3, r5, #0
   14b18:	f001 ff70 	bl	169fc <__aeabi_dmul>
   14b1c:	4a80      	ldr	r2, [pc, #512]	; (14d20 <__ieee754_pow+0x538>)
   14b1e:	4b81      	ldr	r3, [pc, #516]	; (14d24 <__ieee754_pow+0x53c>)
   14b20:	1c06      	adds	r6, r0, #0
   14b22:	1c0f      	adds	r7, r1, #0
   14b24:	1c20      	adds	r0, r4, #0
   14b26:	1c29      	adds	r1, r5, #0
   14b28:	f001 ff68 	bl	169fc <__aeabi_dmul>
   14b2c:	4a7e      	ldr	r2, [pc, #504]	; (14d28 <__ieee754_pow+0x540>)
   14b2e:	4b7f      	ldr	r3, [pc, #508]	; (14d2c <__ieee754_pow+0x544>)
   14b30:	f000 ffd8 	bl	15ae4 <__aeabi_dadd>
   14b34:	1c22      	adds	r2, r4, #0
   14b36:	1c2b      	adds	r3, r5, #0
   14b38:	f001 ff60 	bl	169fc <__aeabi_dmul>
   14b3c:	4a7c      	ldr	r2, [pc, #496]	; (14d30 <__ieee754_pow+0x548>)
   14b3e:	4b7d      	ldr	r3, [pc, #500]	; (14d34 <__ieee754_pow+0x54c>)
   14b40:	f000 ffd0 	bl	15ae4 <__aeabi_dadd>
   14b44:	1c22      	adds	r2, r4, #0
   14b46:	1c2b      	adds	r3, r5, #0
   14b48:	f001 ff58 	bl	169fc <__aeabi_dmul>
   14b4c:	4a7a      	ldr	r2, [pc, #488]	; (14d38 <__ieee754_pow+0x550>)
   14b4e:	4b7b      	ldr	r3, [pc, #492]	; (14d3c <__ieee754_pow+0x554>)
   14b50:	f000 ffc8 	bl	15ae4 <__aeabi_dadd>
   14b54:	1c22      	adds	r2, r4, #0
   14b56:	1c2b      	adds	r3, r5, #0
   14b58:	f001 ff50 	bl	169fc <__aeabi_dmul>
   14b5c:	4a78      	ldr	r2, [pc, #480]	; (14d40 <__ieee754_pow+0x558>)
   14b5e:	4b79      	ldr	r3, [pc, #484]	; (14d44 <__ieee754_pow+0x55c>)
   14b60:	f000 ffc0 	bl	15ae4 <__aeabi_dadd>
   14b64:	1c22      	adds	r2, r4, #0
   14b66:	1c2b      	adds	r3, r5, #0
   14b68:	f001 ff48 	bl	169fc <__aeabi_dmul>
   14b6c:	4a76      	ldr	r2, [pc, #472]	; (14d48 <__ieee754_pow+0x560>)
   14b6e:	4b77      	ldr	r3, [pc, #476]	; (14d4c <__ieee754_pow+0x564>)
   14b70:	f000 ffb8 	bl	15ae4 <__aeabi_dadd>
   14b74:	1c02      	adds	r2, r0, #0
   14b76:	1c0b      	adds	r3, r1, #0
   14b78:	1c30      	adds	r0, r6, #0
   14b7a:	1c39      	adds	r1, r7, #0
   14b7c:	f001 ff3e 	bl	169fc <__aeabi_dmul>
   14b80:	9a02      	ldr	r2, [sp, #8]
   14b82:	9b03      	ldr	r3, [sp, #12]
   14b84:	1c04      	adds	r4, r0, #0
   14b86:	1c0d      	adds	r5, r1, #0
   14b88:	9800      	ldr	r0, [sp, #0]
   14b8a:	9901      	ldr	r1, [sp, #4]
   14b8c:	f000 ffaa 	bl	15ae4 <__aeabi_dadd>
   14b90:	9a06      	ldr	r2, [sp, #24]
   14b92:	9b07      	ldr	r3, [sp, #28]
   14b94:	f001 ff32 	bl	169fc <__aeabi_dmul>
   14b98:	1c22      	adds	r2, r4, #0
   14b9a:	1c2b      	adds	r3, r5, #0
   14b9c:	f000 ffa2 	bl	15ae4 <__aeabi_dadd>
   14ba0:	1c06      	adds	r6, r0, #0
   14ba2:	1c0f      	adds	r7, r1, #0
   14ba4:	9800      	ldr	r0, [sp, #0]
   14ba6:	9901      	ldr	r1, [sp, #4]
   14ba8:	1c02      	adds	r2, r0, #0
   14baa:	1c0b      	adds	r3, r1, #0
   14bac:	f001 ff26 	bl	169fc <__aeabi_dmul>
   14bb0:	4a67      	ldr	r2, [pc, #412]	; (14d50 <__ieee754_pow+0x568>)
   14bb2:	4b68      	ldr	r3, [pc, #416]	; (14d54 <__ieee754_pow+0x56c>)
   14bb4:	900a      	str	r0, [sp, #40]	; 0x28
   14bb6:	910b      	str	r1, [sp, #44]	; 0x2c
   14bb8:	f000 ff94 	bl	15ae4 <__aeabi_dadd>
   14bbc:	1c32      	adds	r2, r6, #0
   14bbe:	1c3b      	adds	r3, r7, #0
   14bc0:	f000 ff90 	bl	15ae4 <__aeabi_dadd>
   14bc4:	2400      	movs	r4, #0
   14bc6:	1c0d      	adds	r5, r1, #0
   14bc8:	1c22      	adds	r2, r4, #0
   14bca:	9800      	ldr	r0, [sp, #0]
   14bcc:	9901      	ldr	r1, [sp, #4]
   14bce:	1c2b      	adds	r3, r5, #0
   14bd0:	f001 ff14 	bl	169fc <__aeabi_dmul>
   14bd4:	1c22      	adds	r2, r4, #0
   14bd6:	1c2b      	adds	r3, r5, #0
   14bd8:	9000      	str	r0, [sp, #0]
   14bda:	9101      	str	r1, [sp, #4]
   14bdc:	9806      	ldr	r0, [sp, #24]
   14bde:	9907      	ldr	r1, [sp, #28]
   14be0:	f001 ff0c 	bl	169fc <__aeabi_dmul>
   14be4:	4a5a      	ldr	r2, [pc, #360]	; (14d50 <__ieee754_pow+0x568>)
   14be6:	4b5b      	ldr	r3, [pc, #364]	; (14d54 <__ieee754_pow+0x56c>)
   14be8:	9006      	str	r0, [sp, #24]
   14bea:	9107      	str	r1, [sp, #28]
   14bec:	1c20      	adds	r0, r4, #0
   14bee:	1c29      	adds	r1, r5, #0
   14bf0:	f002 f994 	bl	16f1c <__aeabi_dsub>
   14bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14bf8:	f002 f990 	bl	16f1c <__aeabi_dsub>
   14bfc:	1c02      	adds	r2, r0, #0
   14bfe:	1c0b      	adds	r3, r1, #0
   14c00:	1c30      	adds	r0, r6, #0
   14c02:	1c39      	adds	r1, r7, #0
   14c04:	f002 f98a 	bl	16f1c <__aeabi_dsub>
   14c08:	9a02      	ldr	r2, [sp, #8]
   14c0a:	9b03      	ldr	r3, [sp, #12]
   14c0c:	f001 fef6 	bl	169fc <__aeabi_dmul>
   14c10:	1c02      	adds	r2, r0, #0
   14c12:	1c0b      	adds	r3, r1, #0
   14c14:	9806      	ldr	r0, [sp, #24]
   14c16:	9907      	ldr	r1, [sp, #28]
   14c18:	f000 ff64 	bl	15ae4 <__aeabi_dadd>
   14c1c:	1c06      	adds	r6, r0, #0
   14c1e:	1c0f      	adds	r7, r1, #0
   14c20:	1c32      	adds	r2, r6, #0
   14c22:	1c3b      	adds	r3, r7, #0
   14c24:	9800      	ldr	r0, [sp, #0]
   14c26:	9901      	ldr	r1, [sp, #4]
   14c28:	f000 ff5c 	bl	15ae4 <__aeabi_dadd>
   14c2c:	4a4a      	ldr	r2, [pc, #296]	; (14d58 <__ieee754_pow+0x570>)
   14c2e:	4b4b      	ldr	r3, [pc, #300]	; (14d5c <__ieee754_pow+0x574>)
   14c30:	2400      	movs	r4, #0
   14c32:	1c20      	adds	r0, r4, #0
   14c34:	1c0d      	adds	r5, r1, #0
   14c36:	f001 fee1 	bl	169fc <__aeabi_dmul>
   14c3a:	4a49      	ldr	r2, [pc, #292]	; (14d60 <__ieee754_pow+0x578>)
   14c3c:	4b49      	ldr	r3, [pc, #292]	; (14d64 <__ieee754_pow+0x57c>)
   14c3e:	9006      	str	r0, [sp, #24]
   14c40:	9107      	str	r1, [sp, #28]
   14c42:	1c20      	adds	r0, r4, #0
   14c44:	1c29      	adds	r1, r5, #0
   14c46:	f001 fed9 	bl	169fc <__aeabi_dmul>
   14c4a:	9a00      	ldr	r2, [sp, #0]
   14c4c:	9b01      	ldr	r3, [sp, #4]
   14c4e:	9002      	str	r0, [sp, #8]
   14c50:	9103      	str	r1, [sp, #12]
   14c52:	1c20      	adds	r0, r4, #0
   14c54:	1c29      	adds	r1, r5, #0
   14c56:	f002 f961 	bl	16f1c <__aeabi_dsub>
   14c5a:	1c02      	adds	r2, r0, #0
   14c5c:	1c0b      	adds	r3, r1, #0
   14c5e:	1c30      	adds	r0, r6, #0
   14c60:	1c39      	adds	r1, r7, #0
   14c62:	f002 f95b 	bl	16f1c <__aeabi_dsub>
   14c66:	4a40      	ldr	r2, [pc, #256]	; (14d68 <__ieee754_pow+0x580>)
   14c68:	4b40      	ldr	r3, [pc, #256]	; (14d6c <__ieee754_pow+0x584>)
   14c6a:	f001 fec7 	bl	169fc <__aeabi_dmul>
   14c6e:	1c02      	adds	r2, r0, #0
   14c70:	1c0b      	adds	r3, r1, #0
   14c72:	9802      	ldr	r0, [sp, #8]
   14c74:	9903      	ldr	r1, [sp, #12]
   14c76:	f000 ff35 	bl	15ae4 <__aeabi_dadd>
   14c7a:	4b46      	ldr	r3, [pc, #280]	; (14d94 <__ieee754_pow+0x5ac>)
   14c7c:	4443      	add	r3, r8
   14c7e:	681a      	ldr	r2, [r3, #0]
   14c80:	685b      	ldr	r3, [r3, #4]
   14c82:	f000 ff2f 	bl	15ae4 <__aeabi_dadd>
   14c86:	1c06      	adds	r6, r0, #0
   14c88:	4650      	mov	r0, sl
   14c8a:	1c0f      	adds	r7, r1, #0
   14c8c:	f002 fcae 	bl	175ec <__aeabi_i2d>
   14c90:	1c0d      	adds	r5, r1, #0
   14c92:	4941      	ldr	r1, [pc, #260]	; (14d98 <__ieee754_pow+0x5b0>)
   14c94:	1c04      	adds	r4, r0, #0
   14c96:	4441      	add	r1, r8
   14c98:	680a      	ldr	r2, [r1, #0]
   14c9a:	684b      	ldr	r3, [r1, #4]
   14c9c:	9806      	ldr	r0, [sp, #24]
   14c9e:	9907      	ldr	r1, [sp, #28]
   14ca0:	9202      	str	r2, [sp, #8]
   14ca2:	9303      	str	r3, [sp, #12]
   14ca4:	1c32      	adds	r2, r6, #0
   14ca6:	1c3b      	adds	r3, r7, #0
   14ca8:	f000 ff1c 	bl	15ae4 <__aeabi_dadd>
   14cac:	9a02      	ldr	r2, [sp, #8]
   14cae:	9b03      	ldr	r3, [sp, #12]
   14cb0:	f000 ff18 	bl	15ae4 <__aeabi_dadd>
   14cb4:	1c22      	adds	r2, r4, #0
   14cb6:	1c2b      	adds	r3, r5, #0
   14cb8:	f000 ff14 	bl	15ae4 <__aeabi_dadd>
   14cbc:	2200      	movs	r2, #0
   14cbe:	1c0b      	adds	r3, r1, #0
   14cc0:	9200      	str	r2, [sp, #0]
   14cc2:	9301      	str	r3, [sp, #4]
   14cc4:	1c10      	adds	r0, r2, #0
   14cc6:	1c2b      	adds	r3, r5, #0
   14cc8:	1c22      	adds	r2, r4, #0
   14cca:	f002 f927 	bl	16f1c <__aeabi_dsub>
   14cce:	9a02      	ldr	r2, [sp, #8]
   14cd0:	9b03      	ldr	r3, [sp, #12]
   14cd2:	f002 f923 	bl	16f1c <__aeabi_dsub>
   14cd6:	9a06      	ldr	r2, [sp, #24]
   14cd8:	9b07      	ldr	r3, [sp, #28]
   14cda:	f002 f91f 	bl	16f1c <__aeabi_dsub>
   14cde:	1c02      	adds	r2, r0, #0
   14ce0:	1c0b      	adds	r3, r1, #0
   14ce2:	1c30      	adds	r0, r6, #0
   14ce4:	1c39      	adds	r1, r7, #0
   14ce6:	f002 f919 	bl	16f1c <__aeabi_dsub>
   14cea:	9002      	str	r0, [sp, #8]
   14cec:	9103      	str	r1, [sp, #12]
   14cee:	9b08      	ldr	r3, [sp, #32]
   14cf0:	9c04      	ldr	r4, [sp, #16]
   14cf2:	3b01      	subs	r3, #1
   14cf4:	4323      	orrs	r3, r4
   14cf6:	d000      	beq.n	14cfa <__ieee754_pow+0x512>
   14cf8:	e1c2      	b.n	15080 <__ieee754_pow+0x898>
   14cfa:	481d      	ldr	r0, [pc, #116]	; (14d70 <__ieee754_pow+0x588>)
   14cfc:	491d      	ldr	r1, [pc, #116]	; (14d74 <__ieee754_pow+0x58c>)
   14cfe:	9004      	str	r0, [sp, #16]
   14d00:	9105      	str	r1, [sp, #20]
   14d02:	e04b      	b.n	14d9c <__ieee754_pow+0x5b4>
   14d04:	46c0      	nop			; (mov r8, r8)
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	00000000 	.word	0x00000000
   14d0c:	43400000 	.word	0x43400000
   14d10:	00000000 	.word	0x00000000
   14d14:	3ff00000 	.word	0x3ff00000
	...
   14d20:	4a454eef 	.word	0x4a454eef
   14d24:	3fca7e28 	.word	0x3fca7e28
   14d28:	93c9db65 	.word	0x93c9db65
   14d2c:	3fcd864a 	.word	0x3fcd864a
   14d30:	a91d4101 	.word	0xa91d4101
   14d34:	3fd17460 	.word	0x3fd17460
   14d38:	518f264d 	.word	0x518f264d
   14d3c:	3fd55555 	.word	0x3fd55555
   14d40:	db6fabff 	.word	0xdb6fabff
   14d44:	3fdb6db6 	.word	0x3fdb6db6
   14d48:	33333303 	.word	0x33333303
   14d4c:	3fe33333 	.word	0x3fe33333
   14d50:	00000000 	.word	0x00000000
   14d54:	40080000 	.word	0x40080000
   14d58:	e0000000 	.word	0xe0000000
   14d5c:	3feec709 	.word	0x3feec709
   14d60:	145b01f5 	.word	0x145b01f5
   14d64:	be3e2fe0 	.word	0xbe3e2fe0
   14d68:	dc3a03fd 	.word	0xdc3a03fd
   14d6c:	3feec709 	.word	0x3feec709
   14d70:	00000000 	.word	0x00000000
   14d74:	bff00000 	.word	0xbff00000
   14d78:	000fffff 	.word	0x000fffff
   14d7c:	fffffc01 	.word	0xfffffc01
   14d80:	3ff00000 	.word	0x3ff00000
   14d84:	0003988e 	.word	0x0003988e
   14d88:	000bb679 	.word	0x000bb679
   14d8c:	fff00000 	.word	0xfff00000
   14d90:	000186d0 	.word	0x000186d0
   14d94:	000186c0 	.word	0x000186c0
   14d98:	000186b0 	.word	0x000186b0
   14d9c:	2600      	movs	r6, #0
   14d9e:	1c32      	adds	r2, r6, #0
   14da0:	464b      	mov	r3, r9
   14da2:	4658      	mov	r0, fp
   14da4:	4649      	mov	r1, r9
   14da6:	f002 f8b9 	bl	16f1c <__aeabi_dsub>
   14daa:	9a00      	ldr	r2, [sp, #0]
   14dac:	9b01      	ldr	r3, [sp, #4]
   14dae:	f001 fe25 	bl	169fc <__aeabi_dmul>
   14db2:	9a02      	ldr	r2, [sp, #8]
   14db4:	9b03      	ldr	r3, [sp, #12]
   14db6:	1c04      	adds	r4, r0, #0
   14db8:	1c0d      	adds	r5, r1, #0
   14dba:	4658      	mov	r0, fp
   14dbc:	4649      	mov	r1, r9
   14dbe:	f001 fe1d 	bl	169fc <__aeabi_dmul>
   14dc2:	1c02      	adds	r2, r0, #0
   14dc4:	1c0b      	adds	r3, r1, #0
   14dc6:	1c20      	adds	r0, r4, #0
   14dc8:	1c29      	adds	r1, r5, #0
   14dca:	f000 fe8b 	bl	15ae4 <__aeabi_dadd>
   14dce:	9a00      	ldr	r2, [sp, #0]
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	9002      	str	r0, [sp, #8]
   14dd4:	9103      	str	r1, [sp, #12]
   14dd6:	1c30      	adds	r0, r6, #0
   14dd8:	4649      	mov	r1, r9
   14dda:	f001 fe0f 	bl	169fc <__aeabi_dmul>
   14dde:	9000      	str	r0, [sp, #0]
   14de0:	9101      	str	r1, [sp, #4]
   14de2:	9a00      	ldr	r2, [sp, #0]
   14de4:	9b01      	ldr	r3, [sp, #4]
   14de6:	9802      	ldr	r0, [sp, #8]
   14de8:	9903      	ldr	r1, [sp, #12]
   14dea:	f000 fe7b 	bl	15ae4 <__aeabi_dadd>
   14dee:	4bcc      	ldr	r3, [pc, #816]	; (15120 <__ieee754_pow+0x938>)
   14df0:	1c04      	adds	r4, r0, #0
   14df2:	1c0d      	adds	r5, r1, #0
   14df4:	1c0f      	adds	r7, r1, #0
   14df6:	4688      	mov	r8, r1
   14df8:	4299      	cmp	r1, r3
   14dfa:	dc00      	bgt.n	14dfe <__ieee754_pow+0x616>
   14dfc:	e119      	b.n	15032 <__ieee754_pow+0x84a>
   14dfe:	4ac9      	ldr	r2, [pc, #804]	; (15124 <__ieee754_pow+0x93c>)
   14e00:	188b      	adds	r3, r1, r2
   14e02:	4303      	orrs	r3, r0
   14e04:	d000      	beq.n	14e08 <__ieee754_pow+0x620>
   14e06:	e212      	b.n	1522e <__ieee754_pow+0xa46>
   14e08:	4bac      	ldr	r3, [pc, #688]	; (150bc <__ieee754_pow+0x8d4>)
   14e0a:	4aab      	ldr	r2, [pc, #684]	; (150b8 <__ieee754_pow+0x8d0>)
   14e0c:	9802      	ldr	r0, [sp, #8]
   14e0e:	9903      	ldr	r1, [sp, #12]
   14e10:	f000 fe68 	bl	15ae4 <__aeabi_dadd>
   14e14:	9a00      	ldr	r2, [sp, #0]
   14e16:	9b01      	ldr	r3, [sp, #4]
   14e18:	9008      	str	r0, [sp, #32]
   14e1a:	9109      	str	r1, [sp, #36]	; 0x24
   14e1c:	1c20      	adds	r0, r4, #0
   14e1e:	1c29      	adds	r1, r5, #0
   14e20:	f002 f87c 	bl	16f1c <__aeabi_dsub>
   14e24:	1c02      	adds	r2, r0, #0
   14e26:	1c0b      	adds	r3, r1, #0
   14e28:	9808      	ldr	r0, [sp, #32]
   14e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e2c:	f000 fdae 	bl	1598c <__aeabi_dcmpgt>
   14e30:	46a9      	mov	r9, r5
   14e32:	2800      	cmp	r0, #0
   14e34:	d000      	beq.n	14e38 <__ieee754_pow+0x650>
   14e36:	e1fa      	b.n	1522e <__ieee754_pow+0xa46>
   14e38:	464a      	mov	r2, r9
   14e3a:	4bbb      	ldr	r3, [pc, #748]	; (15128 <__ieee754_pow+0x940>)
   14e3c:	2480      	movs	r4, #128	; 0x80
   14e3e:	1511      	asrs	r1, r2, #20
   14e40:	0364      	lsls	r4, r4, #13
   14e42:	18c9      	adds	r1, r1, r3
   14e44:	1c20      	adds	r0, r4, #0
   14e46:	4108      	asrs	r0, r1
   14e48:	19c1      	adds	r1, r0, r7
   14e4a:	0048      	lsls	r0, r1, #1
   14e4c:	4a9c      	ldr	r2, [pc, #624]	; (150c0 <__ieee754_pow+0x8d8>)
   14e4e:	4b9d      	ldr	r3, [pc, #628]	; (150c4 <__ieee754_pow+0x8dc>)
   14e50:	1c0b      	adds	r3, r1, #0
   14e52:	0309      	lsls	r1, r1, #12
   14e54:	4eb5      	ldr	r6, [pc, #724]	; (1512c <__ieee754_pow+0x944>)
   14e56:	0b09      	lsrs	r1, r1, #12
   14e58:	0d40      	lsrs	r0, r0, #21
   14e5a:	430c      	orrs	r4, r1
   14e5c:	49b4      	ldr	r1, [pc, #720]	; (15130 <__ieee754_pow+0x948>)
   14e5e:	1985      	adds	r5, r0, r6
   14e60:	4eb4      	ldr	r6, [pc, #720]	; (15134 <__ieee754_pow+0x94c>)
   14e62:	1a08      	subs	r0, r1, r0
   14e64:	4104      	asrs	r4, r0
   14e66:	412e      	asrs	r6, r5
   14e68:	4640      	mov	r0, r8
   14e6a:	43b3      	bics	r3, r6
   14e6c:	46a1      	mov	r9, r4
   14e6e:	2800      	cmp	r0, #0
   14e70:	da00      	bge.n	14e74 <__ieee754_pow+0x68c>
   14e72:	e21e      	b.n	152b2 <__ieee754_pow+0xaca>
   14e74:	9800      	ldr	r0, [sp, #0]
   14e76:	9901      	ldr	r1, [sp, #4]
   14e78:	f002 f850 	bl	16f1c <__aeabi_dsub>
   14e7c:	9000      	str	r0, [sp, #0]
   14e7e:	9101      	str	r1, [sp, #4]
   14e80:	9a00      	ldr	r2, [sp, #0]
   14e82:	9b01      	ldr	r3, [sp, #4]
   14e84:	9802      	ldr	r0, [sp, #8]
   14e86:	9903      	ldr	r1, [sp, #12]
   14e88:	f000 fe2c 	bl	15ae4 <__aeabi_dadd>
   14e8c:	464a      	mov	r2, r9
   14e8e:	0512      	lsls	r2, r2, #20
   14e90:	4690      	mov	r8, r2
   14e92:	2400      	movs	r4, #0
   14e94:	1c20      	adds	r0, r4, #0
   14e96:	4a8c      	ldr	r2, [pc, #560]	; (150c8 <__ieee754_pow+0x8e0>)
   14e98:	4b8c      	ldr	r3, [pc, #560]	; (150cc <__ieee754_pow+0x8e4>)
   14e9a:	1c0d      	adds	r5, r1, #0
   14e9c:	1c0f      	adds	r7, r1, #0
   14e9e:	f001 fdad 	bl	169fc <__aeabi_dmul>
   14ea2:	9a00      	ldr	r2, [sp, #0]
   14ea4:	9b01      	ldr	r3, [sp, #4]
   14ea6:	9008      	str	r0, [sp, #32]
   14ea8:	9109      	str	r1, [sp, #36]	; 0x24
   14eaa:	1c20      	adds	r0, r4, #0
   14eac:	1c29      	adds	r1, r5, #0
   14eae:	f002 f835 	bl	16f1c <__aeabi_dsub>
   14eb2:	1c02      	adds	r2, r0, #0
   14eb4:	1c0b      	adds	r3, r1, #0
   14eb6:	9802      	ldr	r0, [sp, #8]
   14eb8:	9903      	ldr	r1, [sp, #12]
   14eba:	f002 f82f 	bl	16f1c <__aeabi_dsub>
   14ebe:	4a84      	ldr	r2, [pc, #528]	; (150d0 <__ieee754_pow+0x8e8>)
   14ec0:	4b84      	ldr	r3, [pc, #528]	; (150d4 <__ieee754_pow+0x8ec>)
   14ec2:	f001 fd9b 	bl	169fc <__aeabi_dmul>
   14ec6:	4a84      	ldr	r2, [pc, #528]	; (150d8 <__ieee754_pow+0x8f0>)
   14ec8:	4b84      	ldr	r3, [pc, #528]	; (150dc <__ieee754_pow+0x8f4>)
   14eca:	1c26      	adds	r6, r4, #0
   14ecc:	1c0d      	adds	r5, r1, #0
   14ece:	1c04      	adds	r4, r0, #0
   14ed0:	1c39      	adds	r1, r7, #0
   14ed2:	1c30      	adds	r0, r6, #0
   14ed4:	f001 fd92 	bl	169fc <__aeabi_dmul>
   14ed8:	1c02      	adds	r2, r0, #0
   14eda:	1c0b      	adds	r3, r1, #0
   14edc:	1c20      	adds	r0, r4, #0
   14ede:	1c29      	adds	r1, r5, #0
   14ee0:	f000 fe00 	bl	15ae4 <__aeabi_dadd>
   14ee4:	1c04      	adds	r4, r0, #0
   14ee6:	1c0d      	adds	r5, r1, #0
   14ee8:	1c22      	adds	r2, r4, #0
   14eea:	1c2b      	adds	r3, r5, #0
   14eec:	9808      	ldr	r0, [sp, #32]
   14eee:	9909      	ldr	r1, [sp, #36]	; 0x24
   14ef0:	f000 fdf8 	bl	15ae4 <__aeabi_dadd>
   14ef4:	9a08      	ldr	r2, [sp, #32]
   14ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14ef8:	1c06      	adds	r6, r0, #0
   14efa:	1c0f      	adds	r7, r1, #0
   14efc:	f002 f80e 	bl	16f1c <__aeabi_dsub>
   14f00:	1c02      	adds	r2, r0, #0
   14f02:	1c0b      	adds	r3, r1, #0
   14f04:	1c20      	adds	r0, r4, #0
   14f06:	1c29      	adds	r1, r5, #0
   14f08:	f002 f808 	bl	16f1c <__aeabi_dsub>
   14f0c:	1c32      	adds	r2, r6, #0
   14f0e:	9000      	str	r0, [sp, #0]
   14f10:	9101      	str	r1, [sp, #4]
   14f12:	1c3b      	adds	r3, r7, #0
   14f14:	1c30      	adds	r0, r6, #0
   14f16:	1c39      	adds	r1, r7, #0
   14f18:	f001 fd70 	bl	169fc <__aeabi_dmul>
   14f1c:	4a70      	ldr	r2, [pc, #448]	; (150e0 <__ieee754_pow+0x8f8>)
   14f1e:	4b71      	ldr	r3, [pc, #452]	; (150e4 <__ieee754_pow+0x8fc>)
   14f20:	1c04      	adds	r4, r0, #0
   14f22:	1c0d      	adds	r5, r1, #0
   14f24:	f001 fd6a 	bl	169fc <__aeabi_dmul>
   14f28:	4a6f      	ldr	r2, [pc, #444]	; (150e8 <__ieee754_pow+0x900>)
   14f2a:	4b70      	ldr	r3, [pc, #448]	; (150ec <__ieee754_pow+0x904>)
   14f2c:	f001 fff6 	bl	16f1c <__aeabi_dsub>
   14f30:	1c22      	adds	r2, r4, #0
   14f32:	1c2b      	adds	r3, r5, #0
   14f34:	f001 fd62 	bl	169fc <__aeabi_dmul>
   14f38:	4a6d      	ldr	r2, [pc, #436]	; (150f0 <__ieee754_pow+0x908>)
   14f3a:	4b6e      	ldr	r3, [pc, #440]	; (150f4 <__ieee754_pow+0x90c>)
   14f3c:	f000 fdd2 	bl	15ae4 <__aeabi_dadd>
   14f40:	1c22      	adds	r2, r4, #0
   14f42:	1c2b      	adds	r3, r5, #0
   14f44:	f001 fd5a 	bl	169fc <__aeabi_dmul>
   14f48:	4a6b      	ldr	r2, [pc, #428]	; (150f8 <__ieee754_pow+0x910>)
   14f4a:	4b6c      	ldr	r3, [pc, #432]	; (150fc <__ieee754_pow+0x914>)
   14f4c:	f001 ffe6 	bl	16f1c <__aeabi_dsub>
   14f50:	1c22      	adds	r2, r4, #0
   14f52:	1c2b      	adds	r3, r5, #0
   14f54:	f001 fd52 	bl	169fc <__aeabi_dmul>
   14f58:	4a69      	ldr	r2, [pc, #420]	; (15100 <__ieee754_pow+0x918>)
   14f5a:	4b6a      	ldr	r3, [pc, #424]	; (15104 <__ieee754_pow+0x91c>)
   14f5c:	f000 fdc2 	bl	15ae4 <__aeabi_dadd>
   14f60:	1c22      	adds	r2, r4, #0
   14f62:	1c2b      	adds	r3, r5, #0
   14f64:	f001 fd4a 	bl	169fc <__aeabi_dmul>
   14f68:	1c02      	adds	r2, r0, #0
   14f6a:	1c0b      	adds	r3, r1, #0
   14f6c:	1c30      	adds	r0, r6, #0
   14f6e:	1c39      	adds	r1, r7, #0
   14f70:	f001 ffd4 	bl	16f1c <__aeabi_dsub>
   14f74:	1c04      	adds	r4, r0, #0
   14f76:	1c0d      	adds	r5, r1, #0
   14f78:	1c22      	adds	r2, r4, #0
   14f7a:	1c2b      	adds	r3, r5, #0
   14f7c:	1c30      	adds	r0, r6, #0
   14f7e:	1c39      	adds	r1, r7, #0
   14f80:	f001 fd3c 	bl	169fc <__aeabi_dmul>
   14f84:	4a60      	ldr	r2, [pc, #384]	; (15108 <__ieee754_pow+0x920>)
   14f86:	4b61      	ldr	r3, [pc, #388]	; (1510c <__ieee754_pow+0x924>)
   14f88:	9002      	str	r0, [sp, #8]
   14f8a:	9103      	str	r1, [sp, #12]
   14f8c:	1c20      	adds	r0, r4, #0
   14f8e:	1c29      	adds	r1, r5, #0
   14f90:	f001 ffc4 	bl	16f1c <__aeabi_dsub>
   14f94:	1c02      	adds	r2, r0, #0
   14f96:	1c0b      	adds	r3, r1, #0
   14f98:	9802      	ldr	r0, [sp, #8]
   14f9a:	9903      	ldr	r1, [sp, #12]
   14f9c:	f001 f8c4 	bl	16128 <__aeabi_ddiv>
   14fa0:	9a00      	ldr	r2, [sp, #0]
   14fa2:	9b01      	ldr	r3, [sp, #4]
   14fa4:	1c04      	adds	r4, r0, #0
   14fa6:	1c0d      	adds	r5, r1, #0
   14fa8:	1c30      	adds	r0, r6, #0
   14faa:	1c39      	adds	r1, r7, #0
   14fac:	f001 fd26 	bl	169fc <__aeabi_dmul>
   14fb0:	9a00      	ldr	r2, [sp, #0]
   14fb2:	9b01      	ldr	r3, [sp, #4]
   14fb4:	f000 fd96 	bl	15ae4 <__aeabi_dadd>
   14fb8:	1c02      	adds	r2, r0, #0
   14fba:	1c0b      	adds	r3, r1, #0
   14fbc:	1c20      	adds	r0, r4, #0
   14fbe:	1c29      	adds	r1, r5, #0
   14fc0:	f001 ffac 	bl	16f1c <__aeabi_dsub>
   14fc4:	1c32      	adds	r2, r6, #0
   14fc6:	1c3b      	adds	r3, r7, #0
   14fc8:	f001 ffa8 	bl	16f1c <__aeabi_dsub>
   14fcc:	1c0b      	adds	r3, r1, #0
   14fce:	1c02      	adds	r2, r0, #0
   14fd0:	484f      	ldr	r0, [pc, #316]	; (15110 <__ieee754_pow+0x928>)
   14fd2:	4950      	ldr	r1, [pc, #320]	; (15114 <__ieee754_pow+0x92c>)
   14fd4:	f001 ffa2 	bl	16f1c <__aeabi_dsub>
   14fd8:	4646      	mov	r6, r8
   14fda:	1873      	adds	r3, r6, r1
   14fdc:	151c      	asrs	r4, r3, #20
   14fde:	2c00      	cmp	r4, #0
   14fe0:	dc00      	bgt.n	14fe4 <__ieee754_pow+0x7fc>
   14fe2:	e160      	b.n	152a6 <__ieee754_pow+0xabe>
   14fe4:	1c02      	adds	r2, r0, #0
   14fe6:	9804      	ldr	r0, [sp, #16]
   14fe8:	9905      	ldr	r1, [sp, #20]
   14fea:	f001 fd07 	bl	169fc <__aeabi_dmul>
   14fee:	1c06      	adds	r6, r0, #0
   14ff0:	1c0d      	adds	r5, r1, #0
   14ff2:	f7ff fc4a 	bl	1488a <__ieee754_pow+0xa2>
   14ff6:	9c02      	ldr	r4, [sp, #8]
   14ff8:	2c00      	cmp	r4, #0
   14ffa:	da00      	bge.n	14ffe <__ieee754_pow+0x816>
   14ffc:	e475      	b.n	148ea <__ieee754_pow+0x102>
   14ffe:	2600      	movs	r6, #0
   15000:	2500      	movs	r5, #0
   15002:	f7ff fc42 	bl	1488a <__ieee754_pow+0xa2>
   15006:	484c      	ldr	r0, [pc, #304]	; (15138 <__ieee754_pow+0x950>)
   15008:	9c08      	ldr	r4, [sp, #32]
   1500a:	1c03      	adds	r3, r0, #0
   1500c:	4443      	add	r3, r8
   1500e:	4323      	orrs	r3, r4
   15010:	d000      	beq.n	15014 <__ieee754_pow+0x82c>
   15012:	e11a      	b.n	1524a <__ieee754_pow+0xa62>
   15014:	9806      	ldr	r0, [sp, #24]
   15016:	4661      	mov	r1, ip
   15018:	9a06      	ldr	r2, [sp, #24]
   1501a:	4663      	mov	r3, ip
   1501c:	e4c3      	b.n	149a6 <__ieee754_pow+0x1be>
   1501e:	1c29      	adds	r1, r5, #0
   15020:	1c2b      	adds	r3, r5, #0
   15022:	9800      	ldr	r0, [sp, #0]
   15024:	9a00      	ldr	r2, [sp, #0]
   15026:	f001 fce9 	bl	169fc <__aeabi_dmul>
   1502a:	1c06      	adds	r6, r0, #0
   1502c:	1c0d      	adds	r5, r1, #0
   1502e:	f7ff fc2c 	bl	1488a <__ieee754_pow+0xa2>
   15032:	004b      	lsls	r3, r1, #1
   15034:	085b      	lsrs	r3, r3, #1
   15036:	4699      	mov	r9, r3
   15038:	4b40      	ldr	r3, [pc, #256]	; (1513c <__ieee754_pow+0x954>)
   1503a:	4599      	cmp	r9, r3
   1503c:	dc00      	bgt.n	15040 <__ieee754_pow+0x858>
   1503e:	e125      	b.n	1528c <__ieee754_pow+0xaa4>
   15040:	483f      	ldr	r0, [pc, #252]	; (15140 <__ieee754_pow+0x958>)
   15042:	180b      	adds	r3, r1, r0
   15044:	4323      	orrs	r3, r4
   15046:	d10d      	bne.n	15064 <__ieee754_pow+0x87c>
   15048:	9a00      	ldr	r2, [sp, #0]
   1504a:	9b01      	ldr	r3, [sp, #4]
   1504c:	1c20      	adds	r0, r4, #0
   1504e:	f001 ff65 	bl	16f1c <__aeabi_dsub>
   15052:	1c02      	adds	r2, r0, #0
   15054:	1c0b      	adds	r3, r1, #0
   15056:	9802      	ldr	r0, [sp, #8]
   15058:	9903      	ldr	r1, [sp, #12]
   1505a:	f000 fc8d 	bl	15978 <__aeabi_dcmple>
   1505e:	2800      	cmp	r0, #0
   15060:	d100      	bne.n	15064 <__ieee754_pow+0x87c>
   15062:	e6e9      	b.n	14e38 <__ieee754_pow+0x650>
   15064:	4a2c      	ldr	r2, [pc, #176]	; (15118 <__ieee754_pow+0x930>)
   15066:	4b2d      	ldr	r3, [pc, #180]	; (1511c <__ieee754_pow+0x934>)
   15068:	9804      	ldr	r0, [sp, #16]
   1506a:	9905      	ldr	r1, [sp, #20]
   1506c:	f001 fcc6 	bl	169fc <__aeabi_dmul>
   15070:	4a29      	ldr	r2, [pc, #164]	; (15118 <__ieee754_pow+0x930>)
   15072:	4b2a      	ldr	r3, [pc, #168]	; (1511c <__ieee754_pow+0x934>)
   15074:	f001 fcc2 	bl	169fc <__aeabi_dmul>
   15078:	1c06      	adds	r6, r0, #0
   1507a:	1c0d      	adds	r5, r1, #0
   1507c:	f7ff fc05 	bl	1488a <__ieee754_pow+0xa2>
   15080:	4923      	ldr	r1, [pc, #140]	; (15110 <__ieee754_pow+0x928>)
   15082:	4a24      	ldr	r2, [pc, #144]	; (15114 <__ieee754_pow+0x92c>)
   15084:	9104      	str	r1, [sp, #16]
   15086:	9205      	str	r2, [sp, #20]
   15088:	e688      	b.n	14d9c <__ieee754_pow+0x5b4>
   1508a:	9e02      	ldr	r6, [sp, #8]
   1508c:	2e00      	cmp	r6, #0
   1508e:	dab6      	bge.n	14ffe <__ieee754_pow+0x816>
   15090:	2080      	movs	r0, #128	; 0x80
   15092:	0600      	lsls	r0, r0, #24
   15094:	1c05      	adds	r5, r0, #0
   15096:	465e      	mov	r6, fp
   15098:	444d      	add	r5, r9
   1509a:	f7ff fbf6 	bl	1488a <__ieee754_pow+0xa2>
   1509e:	9a06      	ldr	r2, [sp, #24]
   150a0:	4663      	mov	r3, ip
   150a2:	481b      	ldr	r0, [pc, #108]	; (15110 <__ieee754_pow+0x928>)
   150a4:	491b      	ldr	r1, [pc, #108]	; (15114 <__ieee754_pow+0x92c>)
   150a6:	f001 f83f 	bl	16128 <__aeabi_ddiv>
   150aa:	9006      	str	r0, [sp, #24]
   150ac:	468c      	mov	ip, r1
   150ae:	f7ff fc32 	bl	14916 <__ieee754_pow+0x12e>
   150b2:	46c0      	nop			; (mov r8, r8)
   150b4:	46c0      	nop			; (mov r8, r8)
   150b6:	46c0      	nop			; (mov r8, r8)
   150b8:	652b82fe 	.word	0x652b82fe
   150bc:	3c971547 	.word	0x3c971547
	...
   150cc:	3fe62e43 	.word	0x3fe62e43
   150d0:	fefa39ef 	.word	0xfefa39ef
   150d4:	3fe62e42 	.word	0x3fe62e42
   150d8:	0ca86c39 	.word	0x0ca86c39
   150dc:	be205c61 	.word	0xbe205c61
   150e0:	72bea4d0 	.word	0x72bea4d0
   150e4:	3e663769 	.word	0x3e663769
   150e8:	c5d26bf1 	.word	0xc5d26bf1
   150ec:	3ebbbd41 	.word	0x3ebbbd41
   150f0:	af25de2c 	.word	0xaf25de2c
   150f4:	3f11566a 	.word	0x3f11566a
   150f8:	16bebd93 	.word	0x16bebd93
   150fc:	3f66c16c 	.word	0x3f66c16c
   15100:	5555553e 	.word	0x5555553e
   15104:	3fc55555 	.word	0x3fc55555
   15108:	00000000 	.word	0x00000000
   1510c:	40000000 	.word	0x40000000
   15110:	00000000 	.word	0x00000000
   15114:	3ff00000 	.word	0x3ff00000
   15118:	c2f8f359 	.word	0xc2f8f359
   1511c:	01a56e1f 	.word	0x01a56e1f
   15120:	408fffff 	.word	0x408fffff
   15124:	bf700000 	.word	0xbf700000
   15128:	fffffc02 	.word	0xfffffc02
   1512c:	fffffc01 	.word	0xfffffc01
   15130:	00000413 	.word	0x00000413
   15134:	000fffff 	.word	0x000fffff
   15138:	c0100000 	.word	0xc0100000
   1513c:	4090cbff 	.word	0x4090cbff
   15140:	3f6f3400 	.word	0x3f6f3400
   15144:	4b6c      	ldr	r3, [pc, #432]	; (152f8 <__ieee754_pow+0xb10>)
   15146:	4598      	cmp	r8, r3
   15148:	dc00      	bgt.n	1514c <__ieee754_pow+0x964>
   1514a:	e754      	b.n	14ff6 <__ieee754_pow+0x80e>
   1514c:	4b6b      	ldr	r3, [pc, #428]	; (152fc <__ieee754_pow+0xb14>)
   1514e:	4598      	cmp	r8, r3
   15150:	dd01      	ble.n	15156 <__ieee754_pow+0x96e>
   15152:	f7ff fbc6 	bl	148e2 <__ieee754_pow+0xfa>
   15156:	4661      	mov	r1, ip
   15158:	4b58      	ldr	r3, [pc, #352]	; (152bc <__ieee754_pow+0xad4>)
   1515a:	4a57      	ldr	r2, [pc, #348]	; (152b8 <__ieee754_pow+0xad0>)
   1515c:	9806      	ldr	r0, [sp, #24]
   1515e:	f001 fedd 	bl	16f1c <__aeabi_dsub>
   15162:	4a57      	ldr	r2, [pc, #348]	; (152c0 <__ieee754_pow+0xad8>)
   15164:	4b57      	ldr	r3, [pc, #348]	; (152c4 <__ieee754_pow+0xadc>)
   15166:	1c04      	adds	r4, r0, #0
   15168:	1c0d      	adds	r5, r1, #0
   1516a:	f001 fc47 	bl	169fc <__aeabi_dmul>
   1516e:	4a56      	ldr	r2, [pc, #344]	; (152c8 <__ieee754_pow+0xae0>)
   15170:	4b56      	ldr	r3, [pc, #344]	; (152cc <__ieee754_pow+0xae4>)
   15172:	1c06      	adds	r6, r0, #0
   15174:	1c0f      	adds	r7, r1, #0
   15176:	1c20      	adds	r0, r4, #0
   15178:	1c29      	adds	r1, r5, #0
   1517a:	f001 fc3f 	bl	169fc <__aeabi_dmul>
   1517e:	1c22      	adds	r2, r4, #0
   15180:	9000      	str	r0, [sp, #0]
   15182:	9101      	str	r1, [sp, #4]
   15184:	1c2b      	adds	r3, r5, #0
   15186:	1c20      	adds	r0, r4, #0
   15188:	1c29      	adds	r1, r5, #0
   1518a:	f001 fc37 	bl	169fc <__aeabi_dmul>
   1518e:	4a50      	ldr	r2, [pc, #320]	; (152d0 <__ieee754_pow+0xae8>)
   15190:	4b50      	ldr	r3, [pc, #320]	; (152d4 <__ieee754_pow+0xaec>)
   15192:	9002      	str	r0, [sp, #8]
   15194:	9103      	str	r1, [sp, #12]
   15196:	1c20      	adds	r0, r4, #0
   15198:	1c29      	adds	r1, r5, #0
   1519a:	f001 fc2f 	bl	169fc <__aeabi_dmul>
   1519e:	1c02      	adds	r2, r0, #0
   151a0:	1c0b      	adds	r3, r1, #0
   151a2:	484d      	ldr	r0, [pc, #308]	; (152d8 <__ieee754_pow+0xaf0>)
   151a4:	494d      	ldr	r1, [pc, #308]	; (152dc <__ieee754_pow+0xaf4>)
   151a6:	f001 feb9 	bl	16f1c <__aeabi_dsub>
   151aa:	1c22      	adds	r2, r4, #0
   151ac:	1c2b      	adds	r3, r5, #0
   151ae:	f001 fc25 	bl	169fc <__aeabi_dmul>
   151b2:	1c02      	adds	r2, r0, #0
   151b4:	1c0b      	adds	r3, r1, #0
   151b6:	484a      	ldr	r0, [pc, #296]	; (152e0 <__ieee754_pow+0xaf8>)
   151b8:	494a      	ldr	r1, [pc, #296]	; (152e4 <__ieee754_pow+0xafc>)
   151ba:	f001 feaf 	bl	16f1c <__aeabi_dsub>
   151be:	1c02      	adds	r2, r0, #0
   151c0:	1c0b      	adds	r3, r1, #0
   151c2:	9802      	ldr	r0, [sp, #8]
   151c4:	9903      	ldr	r1, [sp, #12]
   151c6:	f001 fc19 	bl	169fc <__aeabi_dmul>
   151ca:	4a47      	ldr	r2, [pc, #284]	; (152e8 <__ieee754_pow+0xb00>)
   151cc:	4b47      	ldr	r3, [pc, #284]	; (152ec <__ieee754_pow+0xb04>)
   151ce:	f001 fc15 	bl	169fc <__aeabi_dmul>
   151d2:	1c02      	adds	r2, r0, #0
   151d4:	1c0b      	adds	r3, r1, #0
   151d6:	9800      	ldr	r0, [sp, #0]
   151d8:	9901      	ldr	r1, [sp, #4]
   151da:	f001 fe9f 	bl	16f1c <__aeabi_dsub>
   151de:	1c04      	adds	r4, r0, #0
   151e0:	1c0d      	adds	r5, r1, #0
   151e2:	1c22      	adds	r2, r4, #0
   151e4:	1c2b      	adds	r3, r5, #0
   151e6:	1c30      	adds	r0, r6, #0
   151e8:	1c39      	adds	r1, r7, #0
   151ea:	f000 fc7b 	bl	15ae4 <__aeabi_dadd>
   151ee:	2200      	movs	r2, #0
   151f0:	1c0b      	adds	r3, r1, #0
   151f2:	9200      	str	r2, [sp, #0]
   151f4:	9301      	str	r3, [sp, #4]
   151f6:	1c10      	adds	r0, r2, #0
   151f8:	1c3b      	adds	r3, r7, #0
   151fa:	1c32      	adds	r2, r6, #0
   151fc:	f001 fe8e 	bl	16f1c <__aeabi_dsub>
   15200:	1c02      	adds	r2, r0, #0
   15202:	1c0b      	adds	r3, r1, #0
   15204:	1c20      	adds	r0, r4, #0
   15206:	1c29      	adds	r1, r5, #0
   15208:	f001 fe88 	bl	16f1c <__aeabi_dsub>
   1520c:	9002      	str	r0, [sp, #8]
   1520e:	9103      	str	r1, [sp, #12]
   15210:	e56d      	b.n	14cee <__ieee754_pow+0x506>
   15212:	2400      	movs	r4, #0
   15214:	2100      	movs	r1, #0
   15216:	f7ff fc11 	bl	14a3c <__ieee754_pow+0x254>
   1521a:	1c2b      	adds	r3, r5, #0
   1521c:	4927      	ldr	r1, [pc, #156]	; (152bc <__ieee754_pow+0xad4>)
   1521e:	4826      	ldr	r0, [pc, #152]	; (152b8 <__ieee754_pow+0xad0>)
   15220:	9a00      	ldr	r2, [sp, #0]
   15222:	f000 ff81 	bl	16128 <__aeabi_ddiv>
   15226:	1c06      	adds	r6, r0, #0
   15228:	1c0d      	adds	r5, r1, #0
   1522a:	f7ff fb2e 	bl	1488a <__ieee754_pow+0xa2>
   1522e:	4a30      	ldr	r2, [pc, #192]	; (152f0 <__ieee754_pow+0xb08>)
   15230:	4b30      	ldr	r3, [pc, #192]	; (152f4 <__ieee754_pow+0xb0c>)
   15232:	9804      	ldr	r0, [sp, #16]
   15234:	9905      	ldr	r1, [sp, #20]
   15236:	f001 fbe1 	bl	169fc <__aeabi_dmul>
   1523a:	4a2d      	ldr	r2, [pc, #180]	; (152f0 <__ieee754_pow+0xb08>)
   1523c:	4b2d      	ldr	r3, [pc, #180]	; (152f4 <__ieee754_pow+0xb0c>)
   1523e:	f001 fbdd 	bl	169fc <__aeabi_dmul>
   15242:	1c06      	adds	r6, r0, #0
   15244:	1c0d      	adds	r5, r1, #0
   15246:	f7ff fb20 	bl	1488a <__ieee754_pow+0xa2>
   1524a:	9e08      	ldr	r6, [sp, #32]
   1524c:	2e01      	cmp	r6, #1
   1524e:	d001      	beq.n	15254 <__ieee754_pow+0xa6c>
   15250:	f7ff fb65 	bl	1491e <__ieee754_pow+0x136>
   15254:	2080      	movs	r0, #128	; 0x80
   15256:	0600      	lsls	r0, r0, #24
   15258:	1c05      	adds	r5, r0, #0
   1525a:	9e06      	ldr	r6, [sp, #24]
   1525c:	4465      	add	r5, ip
   1525e:	f7ff fb14 	bl	1488a <__ieee754_pow+0xa2>
   15262:	2800      	cmp	r0, #0
   15264:	d001      	beq.n	1526a <__ieee754_pow+0xa82>
   15266:	f7ff fb1f 	bl	148a8 <__ieee754_pow+0xc0>
   1526a:	4663      	mov	r3, ip
   1526c:	1ac9      	subs	r1, r1, r3
   1526e:	1c22      	adds	r2, r4, #0
   15270:	410a      	asrs	r2, r1
   15272:	1c10      	adds	r0, r2, #0
   15274:	4088      	lsls	r0, r1
   15276:	42a0      	cmp	r0, r4
   15278:	d001      	beq.n	1527e <__ieee754_pow+0xa96>
   1527a:	f7ff fae5 	bl	14848 <__ieee754_pow+0x60>
   1527e:	2301      	movs	r3, #1
   15280:	401a      	ands	r2, r3
   15282:	2302      	movs	r3, #2
   15284:	1a9b      	subs	r3, r3, r2
   15286:	9308      	str	r3, [sp, #32]
   15288:	f7ff fade 	bl	14848 <__ieee754_pow+0x60>
   1528c:	4b1c      	ldr	r3, [pc, #112]	; (15300 <__ieee754_pow+0xb18>)
   1528e:	4599      	cmp	r9, r3
   15290:	dd00      	ble.n	15294 <__ieee754_pow+0xaac>
   15292:	e5d1      	b.n	14e38 <__ieee754_pow+0x650>
   15294:	2300      	movs	r3, #0
   15296:	4698      	mov	r8, r3
   15298:	4699      	mov	r9, r3
   1529a:	e5fa      	b.n	14e92 <__ieee754_pow+0x6aa>
   1529c:	2480      	movs	r4, #128	; 0x80
   1529e:	02e4      	lsls	r4, r4, #11
   152a0:	2101      	movs	r1, #1
   152a2:	f7ff fbcb 	bl	14a3c <__ieee754_pow+0x254>
   152a6:	464a      	mov	r2, r9
   152a8:	f000 fa06 	bl	156b8 <scalbn>
   152ac:	1c02      	adds	r2, r0, #0
   152ae:	1c0b      	adds	r3, r1, #0
   152b0:	e699      	b.n	14fe6 <__ieee754_pow+0x7fe>
   152b2:	4264      	negs	r4, r4
   152b4:	46a1      	mov	r9, r4
   152b6:	e5dd      	b.n	14e74 <__ieee754_pow+0x68c>
   152b8:	00000000 	.word	0x00000000
   152bc:	3ff00000 	.word	0x3ff00000
   152c0:	60000000 	.word	0x60000000
   152c4:	3ff71547 	.word	0x3ff71547
   152c8:	f85ddf44 	.word	0xf85ddf44
   152cc:	3e54ae0b 	.word	0x3e54ae0b
   152d0:	00000000 	.word	0x00000000
   152d4:	3fd00000 	.word	0x3fd00000
   152d8:	55555555 	.word	0x55555555
   152dc:	3fd55555 	.word	0x3fd55555
   152e0:	00000000 	.word	0x00000000
   152e4:	3fe00000 	.word	0x3fe00000
   152e8:	652b82fe 	.word	0x652b82fe
   152ec:	3ff71547 	.word	0x3ff71547
   152f0:	8800759c 	.word	0x8800759c
   152f4:	7e37e43c 	.word	0x7e37e43c
   152f8:	3feffffe 	.word	0x3feffffe
   152fc:	3ff00000 	.word	0x3ff00000
   15300:	3fe00000 	.word	0x3fe00000
   15304:	46c0      	nop			; (mov r8, r8)
   15306:	46c0      	nop			; (mov r8, r8)

00015308 <__ieee754_sqrt>:
   15308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1530a:	465f      	mov	r7, fp
   1530c:	4656      	mov	r6, sl
   1530e:	464d      	mov	r5, r9
   15310:	4644      	mov	r4, r8
   15312:	b4f0      	push	{r4, r5, r6, r7}
   15314:	4e6c      	ldr	r6, [pc, #432]	; (154c8 <__ieee754_sqrt+0x1c0>)
   15316:	1c0d      	adds	r5, r1, #0
   15318:	1c37      	adds	r7, r6, #0
   1531a:	b083      	sub	sp, #12
   1531c:	1c04      	adds	r4, r0, #0
   1531e:	1c02      	adds	r2, r0, #0
   15320:	1c0b      	adds	r3, r1, #0
   15322:	402f      	ands	r7, r5
   15324:	42b7      	cmp	r7, r6
   15326:	d100      	bne.n	1532a <__ieee754_sqrt+0x22>
   15328:	e0ad      	b.n	15486 <__ieee754_sqrt+0x17e>
   1532a:	2900      	cmp	r1, #0
   1532c:	dc00      	bgt.n	15330 <__ieee754_sqrt+0x28>
   1532e:	e08b      	b.n	15448 <__ieee754_sqrt+0x140>
   15330:	152f      	asrs	r7, r5, #20
   15332:	d100      	bne.n	15336 <__ieee754_sqrt+0x2e>
   15334:	e094      	b.n	15460 <__ieee754_sqrt+0x158>
   15336:	4d65      	ldr	r5, [pc, #404]	; (154cc <__ieee754_sqrt+0x1c4>)
   15338:	0309      	lsls	r1, r1, #12
   1533a:	2380      	movs	r3, #128	; 0x80
   1533c:	0b09      	lsrs	r1, r1, #12
   1533e:	035b      	lsls	r3, r3, #13
   15340:	197f      	adds	r7, r7, r5
   15342:	430b      	orrs	r3, r1
   15344:	07fe      	lsls	r6, r7, #31
   15346:	d500      	bpl.n	1534a <__ieee754_sqrt+0x42>
   15348:	e070      	b.n	1542c <__ieee754_sqrt+0x124>
   1534a:	107f      	asrs	r7, r7, #1
   1534c:	0fc2      	lsrs	r2, r0, #31
   1534e:	46b8      	mov	r8, r7
   15350:	005b      	lsls	r3, r3, #1
   15352:	2700      	movs	r7, #0
   15354:	2180      	movs	r1, #128	; 0x80
   15356:	189b      	adds	r3, r3, r2
   15358:	2416      	movs	r4, #22
   1535a:	0042      	lsls	r2, r0, #1
   1535c:	9700      	str	r7, [sp, #0]
   1535e:	2000      	movs	r0, #0
   15360:	0389      	lsls	r1, r1, #14
   15362:	1845      	adds	r5, r0, r1
   15364:	429d      	cmp	r5, r3
   15366:	dc04      	bgt.n	15372 <__ieee754_sqrt+0x6a>
   15368:	1868      	adds	r0, r5, r1
   1536a:	1b5b      	subs	r3, r3, r5
   1536c:	9d00      	ldr	r5, [sp, #0]
   1536e:	186d      	adds	r5, r5, r1
   15370:	9500      	str	r5, [sp, #0]
   15372:	0fd5      	lsrs	r5, r2, #31
   15374:	005b      	lsls	r3, r3, #1
   15376:	3c01      	subs	r4, #1
   15378:	195b      	adds	r3, r3, r5
   1537a:	0052      	lsls	r2, r2, #1
   1537c:	0849      	lsrs	r1, r1, #1
   1537e:	2c00      	cmp	r4, #0
   15380:	d1ef      	bne.n	15362 <__ieee754_sqrt+0x5a>
   15382:	2180      	movs	r1, #128	; 0x80
   15384:	2600      	movs	r6, #0
   15386:	0609      	lsls	r1, r1, #24
   15388:	2520      	movs	r5, #32
   1538a:	9601      	str	r6, [sp, #4]
   1538c:	46b4      	mov	ip, r6
   1538e:	4689      	mov	r9, r1
   15390:	e009      	b.n	153a6 <__ieee754_sqrt+0x9e>
   15392:	4283      	cmp	r3, r0
   15394:	d046      	beq.n	15424 <__ieee754_sqrt+0x11c>
   15396:	0fd4      	lsrs	r4, r2, #31
   15398:	005b      	lsls	r3, r3, #1
   1539a:	3d01      	subs	r5, #1
   1539c:	191b      	adds	r3, r3, r4
   1539e:	0052      	lsls	r2, r2, #1
   153a0:	0849      	lsrs	r1, r1, #1
   153a2:	2d00      	cmp	r5, #0
   153a4:	d01c      	beq.n	153e0 <__ieee754_sqrt+0xd8>
   153a6:	4666      	mov	r6, ip
   153a8:	198c      	adds	r4, r1, r6
   153aa:	4283      	cmp	r3, r0
   153ac:	ddf1      	ble.n	15392 <__ieee754_sqrt+0x8a>
   153ae:	1867      	adds	r7, r4, r1
   153b0:	0fe6      	lsrs	r6, r4, #31
   153b2:	46bc      	mov	ip, r7
   153b4:	07f6      	lsls	r6, r6, #31
   153b6:	4682      	mov	sl, r0
   153b8:	454e      	cmp	r6, r9
   153ba:	d02c      	beq.n	15416 <__ieee754_sqrt+0x10e>
   153bc:	1a1b      	subs	r3, r3, r0
   153be:	42a2      	cmp	r2, r4
   153c0:	4180      	sbcs	r0, r0
   153c2:	4240      	negs	r0, r0
   153c4:	9f01      	ldr	r7, [sp, #4]
   153c6:	1a1b      	subs	r3, r3, r0
   153c8:	1b12      	subs	r2, r2, r4
   153ca:	187f      	adds	r7, r7, r1
   153cc:	0fd4      	lsrs	r4, r2, #31
   153ce:	005b      	lsls	r3, r3, #1
   153d0:	3d01      	subs	r5, #1
   153d2:	9701      	str	r7, [sp, #4]
   153d4:	4650      	mov	r0, sl
   153d6:	191b      	adds	r3, r3, r4
   153d8:	0052      	lsls	r2, r2, #1
   153da:	0849      	lsrs	r1, r1, #1
   153dc:	2d00      	cmp	r5, #0
   153de:	d1e2      	bne.n	153a6 <__ieee754_sqrt+0x9e>
   153e0:	4313      	orrs	r3, r2
   153e2:	d128      	bne.n	15436 <__ieee754_sqrt+0x12e>
   153e4:	9801      	ldr	r0, [sp, #4]
   153e6:	0843      	lsrs	r3, r0, #1
   153e8:	9d00      	ldr	r5, [sp, #0]
   153ea:	4e39      	ldr	r6, [pc, #228]	; (154d0 <__ieee754_sqrt+0x1c8>)
   153ec:	106a      	asrs	r2, r5, #1
   153ee:	1992      	adds	r2, r2, r6
   153f0:	07ed      	lsls	r5, r5, #31
   153f2:	d502      	bpl.n	153fa <__ieee754_sqrt+0xf2>
   153f4:	2180      	movs	r1, #128	; 0x80
   153f6:	0609      	lsls	r1, r1, #24
   153f8:	430b      	orrs	r3, r1
   153fa:	4640      	mov	r0, r8
   153fc:	0507      	lsls	r7, r0, #20
   153fe:	18b9      	adds	r1, r7, r2
   15400:	1c1c      	adds	r4, r3, #0
   15402:	1c0d      	adds	r5, r1, #0
   15404:	1c20      	adds	r0, r4, #0
   15406:	1c29      	adds	r1, r5, #0
   15408:	b003      	add	sp, #12
   1540a:	bc3c      	pop	{r2, r3, r4, r5}
   1540c:	4690      	mov	r8, r2
   1540e:	4699      	mov	r9, r3
   15410:	46a2      	mov	sl, r4
   15412:	46ab      	mov	fp, r5
   15414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15416:	0fff      	lsrs	r7, r7, #31
   15418:	07ff      	lsls	r7, r7, #31
   1541a:	427e      	negs	r6, r7
   1541c:	417e      	adcs	r6, r7
   1541e:	46b2      	mov	sl, r6
   15420:	4482      	add	sl, r0
   15422:	e7cb      	b.n	153bc <__ieee754_sqrt+0xb4>
   15424:	4294      	cmp	r4, r2
   15426:	d9c2      	bls.n	153ae <__ieee754_sqrt+0xa6>
   15428:	1c18      	adds	r0, r3, #0
   1542a:	e7b4      	b.n	15396 <__ieee754_sqrt+0x8e>
   1542c:	0fc2      	lsrs	r2, r0, #31
   1542e:	005b      	lsls	r3, r3, #1
   15430:	189b      	adds	r3, r3, r2
   15432:	0040      	lsls	r0, r0, #1
   15434:	e789      	b.n	1534a <__ieee754_sqrt+0x42>
   15436:	9901      	ldr	r1, [sp, #4]
   15438:	3101      	adds	r1, #1
   1543a:	d02f      	beq.n	1549c <__ieee754_sqrt+0x194>
   1543c:	9c01      	ldr	r4, [sp, #4]
   1543e:	2301      	movs	r3, #1
   15440:	4023      	ands	r3, r4
   15442:	191b      	adds	r3, r3, r4
   15444:	085b      	lsrs	r3, r3, #1
   15446:	e7cf      	b.n	153e8 <__ieee754_sqrt+0xe0>
   15448:	006b      	lsls	r3, r5, #1
   1544a:	085b      	lsrs	r3, r3, #1
   1544c:	431a      	orrs	r2, r3
   1544e:	d0d9      	beq.n	15404 <__ieee754_sqrt+0xfc>
   15450:	2700      	movs	r7, #0
   15452:	2900      	cmp	r1, #0
   15454:	d12b      	bne.n	154ae <__ieee754_sqrt+0x1a6>
   15456:	0ac1      	lsrs	r1, r0, #11
   15458:	3f15      	subs	r7, #21
   1545a:	0540      	lsls	r0, r0, #21
   1545c:	2900      	cmp	r1, #0
   1545e:	d0fa      	beq.n	15456 <__ieee754_sqrt+0x14e>
   15460:	2280      	movs	r2, #128	; 0x80
   15462:	0352      	lsls	r2, r2, #13
   15464:	4211      	tst	r1, r2
   15466:	d11e      	bne.n	154a6 <__ieee754_sqrt+0x19e>
   15468:	2300      	movs	r3, #0
   1546a:	0049      	lsls	r1, r1, #1
   1546c:	3301      	adds	r3, #1
   1546e:	4211      	tst	r1, r2
   15470:	d0fb      	beq.n	1546a <__ieee754_sqrt+0x162>
   15472:	2401      	movs	r4, #1
   15474:	2220      	movs	r2, #32
   15476:	1ae4      	subs	r4, r4, r3
   15478:	1ad2      	subs	r2, r2, r3
   1547a:	193f      	adds	r7, r7, r4
   1547c:	1c04      	adds	r4, r0, #0
   1547e:	40d4      	lsrs	r4, r2
   15480:	4321      	orrs	r1, r4
   15482:	4098      	lsls	r0, r3
   15484:	e757      	b.n	15336 <__ieee754_sqrt+0x2e>
   15486:	1c20      	adds	r0, r4, #0
   15488:	1c29      	adds	r1, r5, #0
   1548a:	f001 fab7 	bl	169fc <__aeabi_dmul>
   1548e:	1c22      	adds	r2, r4, #0
   15490:	1c2b      	adds	r3, r5, #0
   15492:	f000 fb27 	bl	15ae4 <__aeabi_dadd>
   15496:	1c04      	adds	r4, r0, #0
   15498:	1c0d      	adds	r5, r1, #0
   1549a:	e7b3      	b.n	15404 <__ieee754_sqrt+0xfc>
   1549c:	9a00      	ldr	r2, [sp, #0]
   1549e:	2300      	movs	r3, #0
   154a0:	3201      	adds	r2, #1
   154a2:	9200      	str	r2, [sp, #0]
   154a4:	e7a0      	b.n	153e8 <__ieee754_sqrt+0xe0>
   154a6:	2220      	movs	r2, #32
   154a8:	2401      	movs	r4, #1
   154aa:	2300      	movs	r3, #0
   154ac:	e7e5      	b.n	1547a <__ieee754_sqrt+0x172>
   154ae:	1c22      	adds	r2, r4, #0
   154b0:	1c2b      	adds	r3, r5, #0
   154b2:	1c20      	adds	r0, r4, #0
   154b4:	1c29      	adds	r1, r5, #0
   154b6:	f001 fd31 	bl	16f1c <__aeabi_dsub>
   154ba:	1c02      	adds	r2, r0, #0
   154bc:	1c0b      	adds	r3, r1, #0
   154be:	f000 fe33 	bl	16128 <__aeabi_ddiv>
   154c2:	1c04      	adds	r4, r0, #0
   154c4:	1c0d      	adds	r5, r1, #0
   154c6:	e79d      	b.n	15404 <__ieee754_sqrt+0xfc>
   154c8:	7ff00000 	.word	0x7ff00000
   154cc:	fffffc01 	.word	0xfffffc01
   154d0:	3fe00000 	.word	0x3fe00000

000154d4 <fabs>:
   154d4:	004b      	lsls	r3, r1, #1
   154d6:	0859      	lsrs	r1, r3, #1
   154d8:	4770      	bx	lr
   154da:	46c0      	nop			; (mov r8, r8)

000154dc <finite>:
   154dc:	0048      	lsls	r0, r1, #1
   154de:	4b02      	ldr	r3, [pc, #8]	; (154e8 <finite+0xc>)
   154e0:	0840      	lsrs	r0, r0, #1
   154e2:	18c0      	adds	r0, r0, r3
   154e4:	0fc0      	lsrs	r0, r0, #31
   154e6:	4770      	bx	lr
   154e8:	80100000 	.word	0x80100000

000154ec <__fpclassifyd>:
   154ec:	1c0b      	adds	r3, r1, #0
   154ee:	1c01      	adds	r1, r0, #0
   154f0:	1c02      	adds	r2, r0, #0
   154f2:	b530      	push	{r4, r5, lr}
   154f4:	4319      	orrs	r1, r3
   154f6:	2002      	movs	r0, #2
   154f8:	2900      	cmp	r1, #0
   154fa:	d100      	bne.n	154fe <__fpclassifyd+0x12>
   154fc:	bd30      	pop	{r4, r5, pc}
   154fe:	2180      	movs	r1, #128	; 0x80
   15500:	0609      	lsls	r1, r1, #24
   15502:	428b      	cmp	r3, r1
   15504:	d016      	beq.n	15534 <__fpclassifyd+0x48>
   15506:	490d      	ldr	r1, [pc, #52]	; (1553c <__fpclassifyd+0x50>)
   15508:	2004      	movs	r0, #4
   1550a:	185c      	adds	r4, r3, r1
   1550c:	490c      	ldr	r1, [pc, #48]	; (15540 <__fpclassifyd+0x54>)
   1550e:	428c      	cmp	r4, r1
   15510:	d9f4      	bls.n	154fc <__fpclassifyd+0x10>
   15512:	4d0c      	ldr	r5, [pc, #48]	; (15544 <__fpclassifyd+0x58>)
   15514:	195c      	adds	r4, r3, r5
   15516:	428c      	cmp	r4, r1
   15518:	d9f0      	bls.n	154fc <__fpclassifyd+0x10>
   1551a:	4c0b      	ldr	r4, [pc, #44]	; (15548 <__fpclassifyd+0x5c>)
   1551c:	0059      	lsls	r1, r3, #1
   1551e:	0849      	lsrs	r1, r1, #1
   15520:	2003      	movs	r0, #3
   15522:	42a1      	cmp	r1, r4
   15524:	d9ea      	bls.n	154fc <__fpclassifyd+0x10>
   15526:	4c07      	ldr	r4, [pc, #28]	; (15544 <__fpclassifyd+0x58>)
   15528:	2000      	movs	r0, #0
   1552a:	42a1      	cmp	r1, r4
   1552c:	d1e6      	bne.n	154fc <__fpclassifyd+0x10>
   1552e:	4250      	negs	r0, r2
   15530:	4150      	adcs	r0, r2
   15532:	e7e3      	b.n	154fc <__fpclassifyd+0x10>
   15534:	2a00      	cmp	r2, #0
   15536:	d0e1      	beq.n	154fc <__fpclassifyd+0x10>
   15538:	e7ef      	b.n	1551a <__fpclassifyd+0x2e>
   1553a:	46c0      	nop			; (mov r8, r8)
   1553c:	fff00000 	.word	0xfff00000
   15540:	7fdfffff 	.word	0x7fdfffff
   15544:	7ff00000 	.word	0x7ff00000
   15548:	000fffff 	.word	0x000fffff

0001554c <matherr>:
   1554c:	2000      	movs	r0, #0
   1554e:	4770      	bx	lr

00015550 <nan>:
   15550:	4902      	ldr	r1, [pc, #8]	; (1555c <nan+0xc>)
   15552:	4801      	ldr	r0, [pc, #4]	; (15558 <nan+0x8>)
   15554:	4770      	bx	lr
   15556:	46c0      	nop			; (mov r8, r8)
   15558:	00000000 	.word	0x00000000
   1555c:	7ff80000 	.word	0x7ff80000

00015560 <rint>:
   15560:	b5f0      	push	{r4, r5, r6, r7, lr}
   15562:	4646      	mov	r6, r8
   15564:	464f      	mov	r7, r9
   15566:	b4c0      	push	{r6, r7}
   15568:	0fca      	lsrs	r2, r1, #31
   1556a:	4690      	mov	r8, r2
   1556c:	004b      	lsls	r3, r1, #1
   1556e:	4a4d      	ldr	r2, [pc, #308]	; (156a4 <rint+0x144>)
   15570:	0d5b      	lsrs	r3, r3, #21
   15572:	189e      	adds	r6, r3, r2
   15574:	b083      	sub	sp, #12
   15576:	1c04      	adds	r4, r0, #0
   15578:	1c0d      	adds	r5, r1, #0
   1557a:	468c      	mov	ip, r1
   1557c:	1c07      	adds	r7, r0, #0
   1557e:	2e13      	cmp	r6, #19
   15580:	dc3b      	bgt.n	155fa <rint+0x9a>
   15582:	2e00      	cmp	r6, #0
   15584:	db5c      	blt.n	15640 <rint+0xe0>
   15586:	4f48      	ldr	r7, [pc, #288]	; (156a8 <rint+0x148>)
   15588:	1c02      	adds	r2, r0, #0
   1558a:	4137      	asrs	r7, r6
   1558c:	1c3b      	adds	r3, r7, #0
   1558e:	400b      	ands	r3, r1
   15590:	4303      	orrs	r3, r0
   15592:	4699      	mov	r9, r3
   15594:	4648      	mov	r0, r9
   15596:	1c0b      	adds	r3, r1, #0
   15598:	2800      	cmp	r0, #0
   1559a:	d027      	beq.n	155ec <rint+0x8c>
   1559c:	087b      	lsrs	r3, r7, #1
   1559e:	1c1a      	adds	r2, r3, #0
   155a0:	400a      	ands	r2, r1
   155a2:	4322      	orrs	r2, r4
   155a4:	2700      	movs	r7, #0
   155a6:	2a00      	cmp	r2, #0
   155a8:	d00a      	beq.n	155c0 <rint+0x60>
   155aa:	2e13      	cmp	r6, #19
   155ac:	d100      	bne.n	155b0 <rint+0x50>
   155ae:	e076      	b.n	1569e <rint+0x13e>
   155b0:	1c29      	adds	r1, r5, #0
   155b2:	2280      	movs	r2, #128	; 0x80
   155b4:	4399      	bics	r1, r3
   155b6:	02d2      	lsls	r2, r2, #11
   155b8:	1c0b      	adds	r3, r1, #0
   155ba:	4132      	asrs	r2, r6
   155bc:	4313      	orrs	r3, r2
   155be:	469c      	mov	ip, r3
   155c0:	4640      	mov	r0, r8
   155c2:	00c1      	lsls	r1, r0, #3
   155c4:	4839      	ldr	r0, [pc, #228]	; (156ac <rint+0x14c>)
   155c6:	4663      	mov	r3, ip
   155c8:	1841      	adds	r1, r0, r1
   155ca:	680c      	ldr	r4, [r1, #0]
   155cc:	684d      	ldr	r5, [r1, #4]
   155ce:	1c3a      	adds	r2, r7, #0
   155d0:	1c20      	adds	r0, r4, #0
   155d2:	1c29      	adds	r1, r5, #0
   155d4:	f000 fa86 	bl	15ae4 <__aeabi_dadd>
   155d8:	9000      	str	r0, [sp, #0]
   155da:	9101      	str	r1, [sp, #4]
   155dc:	9800      	ldr	r0, [sp, #0]
   155de:	9901      	ldr	r1, [sp, #4]
   155e0:	1c22      	adds	r2, r4, #0
   155e2:	1c2b      	adds	r3, r5, #0
   155e4:	f001 fc9a 	bl	16f1c <__aeabi_dsub>
   155e8:	1c02      	adds	r2, r0, #0
   155ea:	1c0b      	adds	r3, r1, #0
   155ec:	1c10      	adds	r0, r2, #0
   155ee:	1c19      	adds	r1, r3, #0
   155f0:	b003      	add	sp, #12
   155f2:	bc0c      	pop	{r2, r3}
   155f4:	4690      	mov	r8, r2
   155f6:	4699      	mov	r9, r3
   155f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155fa:	2e33      	cmp	r6, #51	; 0x33
   155fc:	dd0b      	ble.n	15616 <rint+0xb6>
   155fe:	1c0b      	adds	r3, r1, #0
   15600:	2180      	movs	r1, #128	; 0x80
   15602:	1c02      	adds	r2, r0, #0
   15604:	00c9      	lsls	r1, r1, #3
   15606:	428e      	cmp	r6, r1
   15608:	d1f0      	bne.n	155ec <rint+0x8c>
   1560a:	1c29      	adds	r1, r5, #0
   1560c:	f000 fa6a 	bl	15ae4 <__aeabi_dadd>
   15610:	1c02      	adds	r2, r0, #0
   15612:	1c0b      	adds	r3, r1, #0
   15614:	e7ea      	b.n	155ec <rint+0x8c>
   15616:	4a26      	ldr	r2, [pc, #152]	; (156b0 <rint+0x150>)
   15618:	2601      	movs	r6, #1
   1561a:	18d2      	adds	r2, r2, r3
   1561c:	4276      	negs	r6, r6
   1561e:	40d6      	lsrs	r6, r2
   15620:	4691      	mov	r9, r2
   15622:	1c0b      	adds	r3, r1, #0
   15624:	1c02      	adds	r2, r0, #0
   15626:	4206      	tst	r6, r0
   15628:	d0e0      	beq.n	155ec <rint+0x8c>
   1562a:	0876      	lsrs	r6, r6, #1
   1562c:	4206      	tst	r6, r0
   1562e:	d0c7      	beq.n	155c0 <rint+0x60>
   15630:	2380      	movs	r3, #128	; 0x80
   15632:	43b4      	bics	r4, r6
   15634:	05db      	lsls	r3, r3, #23
   15636:	4648      	mov	r0, r9
   15638:	4103      	asrs	r3, r0
   1563a:	1c27      	adds	r7, r4, #0
   1563c:	431f      	orrs	r7, r3
   1563e:	e7bf      	b.n	155c0 <rint+0x60>
   15640:	004e      	lsls	r6, r1, #1
   15642:	0876      	lsrs	r6, r6, #1
   15644:	4306      	orrs	r6, r0
   15646:	1c02      	adds	r2, r0, #0
   15648:	1c0b      	adds	r3, r1, #0
   1564a:	2e00      	cmp	r6, #0
   1564c:	d0ce      	beq.n	155ec <rint+0x8c>
   1564e:	0309      	lsls	r1, r1, #12
   15650:	0b09      	lsrs	r1, r1, #12
   15652:	4301      	orrs	r1, r0
   15654:	4248      	negs	r0, r1
   15656:	4301      	orrs	r1, r0
   15658:	2080      	movs	r0, #128	; 0x80
   1565a:	0300      	lsls	r0, r0, #12
   1565c:	0b09      	lsrs	r1, r1, #12
   1565e:	4001      	ands	r1, r0
   15660:	0c68      	lsrs	r0, r5, #17
   15662:	0440      	lsls	r0, r0, #17
   15664:	1c0b      	adds	r3, r1, #0
   15666:	4303      	orrs	r3, r0
   15668:	4640      	mov	r0, r8
   1566a:	00c1      	lsls	r1, r0, #3
   1566c:	480f      	ldr	r0, [pc, #60]	; (156ac <rint+0x14c>)
   1566e:	1841      	adds	r1, r0, r1
   15670:	680c      	ldr	r4, [r1, #0]
   15672:	684d      	ldr	r5, [r1, #4]
   15674:	1c29      	adds	r1, r5, #0
   15676:	1c20      	adds	r0, r4, #0
   15678:	f000 fa34 	bl	15ae4 <__aeabi_dadd>
   1567c:	9000      	str	r0, [sp, #0]
   1567e:	9101      	str	r1, [sp, #4]
   15680:	9800      	ldr	r0, [sp, #0]
   15682:	9901      	ldr	r1, [sp, #4]
   15684:	1c2b      	adds	r3, r5, #0
   15686:	1c22      	adds	r2, r4, #0
   15688:	f001 fc48 	bl	16f1c <__aeabi_dsub>
   1568c:	1c0d      	adds	r5, r1, #0
   1568e:	4641      	mov	r1, r8
   15690:	1c02      	adds	r2, r0, #0
   15692:	07c8      	lsls	r0, r1, #31
   15694:	0069      	lsls	r1, r5, #1
   15696:	0849      	lsrs	r1, r1, #1
   15698:	1c03      	adds	r3, r0, #0
   1569a:	430b      	orrs	r3, r1
   1569c:	e7a6      	b.n	155ec <rint+0x8c>
   1569e:	2780      	movs	r7, #128	; 0x80
   156a0:	063f      	lsls	r7, r7, #24
   156a2:	e785      	b.n	155b0 <rint+0x50>
   156a4:	fffffc01 	.word	0xfffffc01
   156a8:	000fffff 	.word	0x000fffff
   156ac:	000186e8 	.word	0x000186e8
   156b0:	fffffbed 	.word	0xfffffbed
   156b4:	00000000 	.word	0x00000000

000156b8 <scalbn>:
   156b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156ba:	4e3d      	ldr	r6, [pc, #244]	; (157b0 <scalbn+0xf8>)
   156bc:	1c17      	adds	r7, r2, #0
   156be:	1c33      	adds	r3, r6, #0
   156c0:	400b      	ands	r3, r1
   156c2:	1c04      	adds	r4, r0, #0
   156c4:	1c0d      	adds	r5, r1, #0
   156c6:	1c0a      	adds	r2, r1, #0
   156c8:	151b      	asrs	r3, r3, #20
   156ca:	d125      	bne.n	15718 <scalbn+0x60>
   156cc:	004b      	lsls	r3, r1, #1
   156ce:	085b      	lsrs	r3, r3, #1
   156d0:	4318      	orrs	r0, r3
   156d2:	d01e      	beq.n	15712 <scalbn+0x5a>
   156d4:	1c20      	adds	r0, r4, #0
   156d6:	1c29      	adds	r1, r5, #0
   156d8:	4b2e      	ldr	r3, [pc, #184]	; (15794 <scalbn+0xdc>)
   156da:	4a2d      	ldr	r2, [pc, #180]	; (15790 <scalbn+0xd8>)
   156dc:	f001 f98e 	bl	169fc <__aeabi_dmul>
   156e0:	4b34      	ldr	r3, [pc, #208]	; (157b4 <scalbn+0xfc>)
   156e2:	1c04      	adds	r4, r0, #0
   156e4:	1c0d      	adds	r5, r1, #0
   156e6:	429f      	cmp	r7, r3
   156e8:	db31      	blt.n	1574e <scalbn+0x96>
   156ea:	400e      	ands	r6, r1
   156ec:	1533      	asrs	r3, r6, #20
   156ee:	1c0a      	adds	r2, r1, #0
   156f0:	3b36      	subs	r3, #54	; 0x36
   156f2:	4931      	ldr	r1, [pc, #196]	; (157b8 <scalbn+0x100>)
   156f4:	19db      	adds	r3, r3, r7
   156f6:	428b      	cmp	r3, r1
   156f8:	dd15      	ble.n	15726 <scalbn+0x6e>
   156fa:	1c22      	adds	r2, r4, #0
   156fc:	1c2b      	adds	r3, r5, #0
   156fe:	4826      	ldr	r0, [pc, #152]	; (15798 <scalbn+0xe0>)
   15700:	4926      	ldr	r1, [pc, #152]	; (1579c <scalbn+0xe4>)
   15702:	f000 f861 	bl	157c8 <copysign>
   15706:	4a24      	ldr	r2, [pc, #144]	; (15798 <scalbn+0xe0>)
   15708:	4b24      	ldr	r3, [pc, #144]	; (1579c <scalbn+0xe4>)
   1570a:	f001 f977 	bl	169fc <__aeabi_dmul>
   1570e:	1c04      	adds	r4, r0, #0
   15710:	1c0d      	adds	r5, r1, #0
   15712:	1c29      	adds	r1, r5, #0
   15714:	1c20      	adds	r0, r4, #0
   15716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15718:	4928      	ldr	r1, [pc, #160]	; (157bc <scalbn+0x104>)
   1571a:	428b      	cmp	r3, r1
   1571c:	d01e      	beq.n	1575c <scalbn+0xa4>
   1571e:	4926      	ldr	r1, [pc, #152]	; (157b8 <scalbn+0x100>)
   15720:	19db      	adds	r3, r3, r7
   15722:	428b      	cmp	r3, r1
   15724:	dce9      	bgt.n	156fa <scalbn+0x42>
   15726:	2b00      	cmp	r3, #0
   15728:	dd05      	ble.n	15736 <scalbn+0x7e>
   1572a:	4925      	ldr	r1, [pc, #148]	; (157c0 <scalbn+0x108>)
   1572c:	051b      	lsls	r3, r3, #20
   1572e:	400a      	ands	r2, r1
   15730:	1c1d      	adds	r5, r3, #0
   15732:	4315      	orrs	r5, r2
   15734:	e7ed      	b.n	15712 <scalbn+0x5a>
   15736:	1c19      	adds	r1, r3, #0
   15738:	3135      	adds	r1, #53	; 0x35
   1573a:	da18      	bge.n	1576e <scalbn+0xb6>
   1573c:	4b21      	ldr	r3, [pc, #132]	; (157c4 <scalbn+0x10c>)
   1573e:	429f      	cmp	r7, r3
   15740:	dcdb      	bgt.n	156fa <scalbn+0x42>
   15742:	4817      	ldr	r0, [pc, #92]	; (157a0 <scalbn+0xe8>)
   15744:	4917      	ldr	r1, [pc, #92]	; (157a4 <scalbn+0xec>)
   15746:	1c22      	adds	r2, r4, #0
   15748:	1c2b      	adds	r3, r5, #0
   1574a:	f000 f83d 	bl	157c8 <copysign>
   1574e:	4a14      	ldr	r2, [pc, #80]	; (157a0 <scalbn+0xe8>)
   15750:	4b14      	ldr	r3, [pc, #80]	; (157a4 <scalbn+0xec>)
   15752:	f001 f953 	bl	169fc <__aeabi_dmul>
   15756:	1c04      	adds	r4, r0, #0
   15758:	1c0d      	adds	r5, r1, #0
   1575a:	e7da      	b.n	15712 <scalbn+0x5a>
   1575c:	1c20      	adds	r0, r4, #0
   1575e:	1c29      	adds	r1, r5, #0
   15760:	1c22      	adds	r2, r4, #0
   15762:	1c2b      	adds	r3, r5, #0
   15764:	f000 f9be 	bl	15ae4 <__aeabi_dadd>
   15768:	1c04      	adds	r4, r0, #0
   1576a:	1c0d      	adds	r5, r1, #0
   1576c:	e7d1      	b.n	15712 <scalbn+0x5a>
   1576e:	4914      	ldr	r1, [pc, #80]	; (157c0 <scalbn+0x108>)
   15770:	3336      	adds	r3, #54	; 0x36
   15772:	051b      	lsls	r3, r3, #20
   15774:	400a      	ands	r2, r1
   15776:	1c1d      	adds	r5, r3, #0
   15778:	4315      	orrs	r5, r2
   1577a:	1c20      	adds	r0, r4, #0
   1577c:	1c29      	adds	r1, r5, #0
   1577e:	4a0a      	ldr	r2, [pc, #40]	; (157a8 <scalbn+0xf0>)
   15780:	4b0a      	ldr	r3, [pc, #40]	; (157ac <scalbn+0xf4>)
   15782:	f001 f93b 	bl	169fc <__aeabi_dmul>
   15786:	1c04      	adds	r4, r0, #0
   15788:	1c0d      	adds	r5, r1, #0
   1578a:	e7c2      	b.n	15712 <scalbn+0x5a>
   1578c:	46c0      	nop			; (mov r8, r8)
   1578e:	46c0      	nop			; (mov r8, r8)
   15790:	00000000 	.word	0x00000000
   15794:	43500000 	.word	0x43500000
   15798:	8800759c 	.word	0x8800759c
   1579c:	7e37e43c 	.word	0x7e37e43c
   157a0:	c2f8f359 	.word	0xc2f8f359
   157a4:	01a56e1f 	.word	0x01a56e1f
   157a8:	00000000 	.word	0x00000000
   157ac:	3c900000 	.word	0x3c900000
   157b0:	7ff00000 	.word	0x7ff00000
   157b4:	ffff3cb0 	.word	0xffff3cb0
   157b8:	000007fe 	.word	0x000007fe
   157bc:	000007ff 	.word	0x000007ff
   157c0:	800fffff 	.word	0x800fffff
   157c4:	0000c350 	.word	0x0000c350

000157c8 <copysign>:
   157c8:	b530      	push	{r4, r5, lr}
   157ca:	0fda      	lsrs	r2, r3, #31
   157cc:	07d2      	lsls	r2, r2, #31
   157ce:	004b      	lsls	r3, r1, #1
   157d0:	085b      	lsrs	r3, r3, #1
   157d2:	1c11      	adds	r1, r2, #0
   157d4:	4319      	orrs	r1, r3
   157d6:	bd30      	pop	{r4, r5, pc}

000157d8 <__aeabi_uidiv>:
   157d8:	2900      	cmp	r1, #0
   157da:	d034      	beq.n	15846 <.udivsi3_skip_div0_test+0x6a>

000157dc <.udivsi3_skip_div0_test>:
   157dc:	2301      	movs	r3, #1
   157de:	2200      	movs	r2, #0
   157e0:	b410      	push	{r4}
   157e2:	4288      	cmp	r0, r1
   157e4:	d32c      	bcc.n	15840 <.udivsi3_skip_div0_test+0x64>
   157e6:	2401      	movs	r4, #1
   157e8:	0724      	lsls	r4, r4, #28
   157ea:	42a1      	cmp	r1, r4
   157ec:	d204      	bcs.n	157f8 <.udivsi3_skip_div0_test+0x1c>
   157ee:	4281      	cmp	r1, r0
   157f0:	d202      	bcs.n	157f8 <.udivsi3_skip_div0_test+0x1c>
   157f2:	0109      	lsls	r1, r1, #4
   157f4:	011b      	lsls	r3, r3, #4
   157f6:	e7f8      	b.n	157ea <.udivsi3_skip_div0_test+0xe>
   157f8:	00e4      	lsls	r4, r4, #3
   157fa:	42a1      	cmp	r1, r4
   157fc:	d204      	bcs.n	15808 <.udivsi3_skip_div0_test+0x2c>
   157fe:	4281      	cmp	r1, r0
   15800:	d202      	bcs.n	15808 <.udivsi3_skip_div0_test+0x2c>
   15802:	0049      	lsls	r1, r1, #1
   15804:	005b      	lsls	r3, r3, #1
   15806:	e7f8      	b.n	157fa <.udivsi3_skip_div0_test+0x1e>
   15808:	4288      	cmp	r0, r1
   1580a:	d301      	bcc.n	15810 <.udivsi3_skip_div0_test+0x34>
   1580c:	1a40      	subs	r0, r0, r1
   1580e:	431a      	orrs	r2, r3
   15810:	084c      	lsrs	r4, r1, #1
   15812:	42a0      	cmp	r0, r4
   15814:	d302      	bcc.n	1581c <.udivsi3_skip_div0_test+0x40>
   15816:	1b00      	subs	r0, r0, r4
   15818:	085c      	lsrs	r4, r3, #1
   1581a:	4322      	orrs	r2, r4
   1581c:	088c      	lsrs	r4, r1, #2
   1581e:	42a0      	cmp	r0, r4
   15820:	d302      	bcc.n	15828 <.udivsi3_skip_div0_test+0x4c>
   15822:	1b00      	subs	r0, r0, r4
   15824:	089c      	lsrs	r4, r3, #2
   15826:	4322      	orrs	r2, r4
   15828:	08cc      	lsrs	r4, r1, #3
   1582a:	42a0      	cmp	r0, r4
   1582c:	d302      	bcc.n	15834 <.udivsi3_skip_div0_test+0x58>
   1582e:	1b00      	subs	r0, r0, r4
   15830:	08dc      	lsrs	r4, r3, #3
   15832:	4322      	orrs	r2, r4
   15834:	2800      	cmp	r0, #0
   15836:	d003      	beq.n	15840 <.udivsi3_skip_div0_test+0x64>
   15838:	091b      	lsrs	r3, r3, #4
   1583a:	d001      	beq.n	15840 <.udivsi3_skip_div0_test+0x64>
   1583c:	0909      	lsrs	r1, r1, #4
   1583e:	e7e3      	b.n	15808 <.udivsi3_skip_div0_test+0x2c>
   15840:	1c10      	adds	r0, r2, #0
   15842:	bc10      	pop	{r4}
   15844:	4770      	bx	lr
   15846:	2800      	cmp	r0, #0
   15848:	d001      	beq.n	1584e <.udivsi3_skip_div0_test+0x72>
   1584a:	2000      	movs	r0, #0
   1584c:	43c0      	mvns	r0, r0
   1584e:	b407      	push	{r0, r1, r2}
   15850:	4802      	ldr	r0, [pc, #8]	; (1585c <.udivsi3_skip_div0_test+0x80>)
   15852:	a102      	add	r1, pc, #8	; (adr r1, 1585c <.udivsi3_skip_div0_test+0x80>)
   15854:	1840      	adds	r0, r0, r1
   15856:	9002      	str	r0, [sp, #8]
   15858:	bd03      	pop	{r0, r1, pc}
   1585a:	46c0      	nop			; (mov r8, r8)
   1585c:	000000d9 	.word	0x000000d9

00015860 <__aeabi_uidivmod>:
   15860:	2900      	cmp	r1, #0
   15862:	d0f0      	beq.n	15846 <.udivsi3_skip_div0_test+0x6a>
   15864:	b503      	push	{r0, r1, lr}
   15866:	f7ff ffb9 	bl	157dc <.udivsi3_skip_div0_test>
   1586a:	bc0e      	pop	{r1, r2, r3}
   1586c:	4342      	muls	r2, r0
   1586e:	1a89      	subs	r1, r1, r2
   15870:	4718      	bx	r3
   15872:	46c0      	nop			; (mov r8, r8)

00015874 <__aeabi_idiv>:
   15874:	2900      	cmp	r1, #0
   15876:	d041      	beq.n	158fc <.divsi3_skip_div0_test+0x84>

00015878 <.divsi3_skip_div0_test>:
   15878:	b410      	push	{r4}
   1587a:	1c04      	adds	r4, r0, #0
   1587c:	404c      	eors	r4, r1
   1587e:	46a4      	mov	ip, r4
   15880:	2301      	movs	r3, #1
   15882:	2200      	movs	r2, #0
   15884:	2900      	cmp	r1, #0
   15886:	d500      	bpl.n	1588a <.divsi3_skip_div0_test+0x12>
   15888:	4249      	negs	r1, r1
   1588a:	2800      	cmp	r0, #0
   1588c:	d500      	bpl.n	15890 <.divsi3_skip_div0_test+0x18>
   1588e:	4240      	negs	r0, r0
   15890:	4288      	cmp	r0, r1
   15892:	d32c      	bcc.n	158ee <.divsi3_skip_div0_test+0x76>
   15894:	2401      	movs	r4, #1
   15896:	0724      	lsls	r4, r4, #28
   15898:	42a1      	cmp	r1, r4
   1589a:	d204      	bcs.n	158a6 <.divsi3_skip_div0_test+0x2e>
   1589c:	4281      	cmp	r1, r0
   1589e:	d202      	bcs.n	158a6 <.divsi3_skip_div0_test+0x2e>
   158a0:	0109      	lsls	r1, r1, #4
   158a2:	011b      	lsls	r3, r3, #4
   158a4:	e7f8      	b.n	15898 <.divsi3_skip_div0_test+0x20>
   158a6:	00e4      	lsls	r4, r4, #3
   158a8:	42a1      	cmp	r1, r4
   158aa:	d204      	bcs.n	158b6 <.divsi3_skip_div0_test+0x3e>
   158ac:	4281      	cmp	r1, r0
   158ae:	d202      	bcs.n	158b6 <.divsi3_skip_div0_test+0x3e>
   158b0:	0049      	lsls	r1, r1, #1
   158b2:	005b      	lsls	r3, r3, #1
   158b4:	e7f8      	b.n	158a8 <.divsi3_skip_div0_test+0x30>
   158b6:	4288      	cmp	r0, r1
   158b8:	d301      	bcc.n	158be <.divsi3_skip_div0_test+0x46>
   158ba:	1a40      	subs	r0, r0, r1
   158bc:	431a      	orrs	r2, r3
   158be:	084c      	lsrs	r4, r1, #1
   158c0:	42a0      	cmp	r0, r4
   158c2:	d302      	bcc.n	158ca <.divsi3_skip_div0_test+0x52>
   158c4:	1b00      	subs	r0, r0, r4
   158c6:	085c      	lsrs	r4, r3, #1
   158c8:	4322      	orrs	r2, r4
   158ca:	088c      	lsrs	r4, r1, #2
   158cc:	42a0      	cmp	r0, r4
   158ce:	d302      	bcc.n	158d6 <.divsi3_skip_div0_test+0x5e>
   158d0:	1b00      	subs	r0, r0, r4
   158d2:	089c      	lsrs	r4, r3, #2
   158d4:	4322      	orrs	r2, r4
   158d6:	08cc      	lsrs	r4, r1, #3
   158d8:	42a0      	cmp	r0, r4
   158da:	d302      	bcc.n	158e2 <.divsi3_skip_div0_test+0x6a>
   158dc:	1b00      	subs	r0, r0, r4
   158de:	08dc      	lsrs	r4, r3, #3
   158e0:	4322      	orrs	r2, r4
   158e2:	2800      	cmp	r0, #0
   158e4:	d003      	beq.n	158ee <.divsi3_skip_div0_test+0x76>
   158e6:	091b      	lsrs	r3, r3, #4
   158e8:	d001      	beq.n	158ee <.divsi3_skip_div0_test+0x76>
   158ea:	0909      	lsrs	r1, r1, #4
   158ec:	e7e3      	b.n	158b6 <.divsi3_skip_div0_test+0x3e>
   158ee:	1c10      	adds	r0, r2, #0
   158f0:	4664      	mov	r4, ip
   158f2:	2c00      	cmp	r4, #0
   158f4:	d500      	bpl.n	158f8 <.divsi3_skip_div0_test+0x80>
   158f6:	4240      	negs	r0, r0
   158f8:	bc10      	pop	{r4}
   158fa:	4770      	bx	lr
   158fc:	2800      	cmp	r0, #0
   158fe:	d006      	beq.n	1590e <.divsi3_skip_div0_test+0x96>
   15900:	db03      	blt.n	1590a <.divsi3_skip_div0_test+0x92>
   15902:	2000      	movs	r0, #0
   15904:	43c0      	mvns	r0, r0
   15906:	0840      	lsrs	r0, r0, #1
   15908:	e001      	b.n	1590e <.divsi3_skip_div0_test+0x96>
   1590a:	2080      	movs	r0, #128	; 0x80
   1590c:	0600      	lsls	r0, r0, #24
   1590e:	b407      	push	{r0, r1, r2}
   15910:	4802      	ldr	r0, [pc, #8]	; (1591c <.divsi3_skip_div0_test+0xa4>)
   15912:	a102      	add	r1, pc, #8	; (adr r1, 1591c <.divsi3_skip_div0_test+0xa4>)
   15914:	1840      	adds	r0, r0, r1
   15916:	9002      	str	r0, [sp, #8]
   15918:	bd03      	pop	{r0, r1, pc}
   1591a:	46c0      	nop			; (mov r8, r8)
   1591c:	00000019 	.word	0x00000019

00015920 <__aeabi_idivmod>:
   15920:	2900      	cmp	r1, #0
   15922:	d0eb      	beq.n	158fc <.divsi3_skip_div0_test+0x84>
   15924:	b503      	push	{r0, r1, lr}
   15926:	f7ff ffa7 	bl	15878 <.divsi3_skip_div0_test>
   1592a:	bc0e      	pop	{r1, r2, r3}
   1592c:	4342      	muls	r2, r0
   1592e:	1a89      	subs	r1, r1, r2
   15930:	4718      	bx	r3
   15932:	46c0      	nop			; (mov r8, r8)

00015934 <__aeabi_idiv0>:
   15934:	4770      	bx	lr
   15936:	46c0      	nop			; (mov r8, r8)

00015938 <__aeabi_cdrcmple>:
   15938:	4684      	mov	ip, r0
   1593a:	1c10      	adds	r0, r2, #0
   1593c:	4662      	mov	r2, ip
   1593e:	468c      	mov	ip, r1
   15940:	1c19      	adds	r1, r3, #0
   15942:	4663      	mov	r3, ip
   15944:	e000      	b.n	15948 <__aeabi_cdcmpeq>
   15946:	46c0      	nop			; (mov r8, r8)

00015948 <__aeabi_cdcmpeq>:
   15948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1594a:	f000 ffd9 	bl	16900 <__ledf2>
   1594e:	2800      	cmp	r0, #0
   15950:	d401      	bmi.n	15956 <__aeabi_cdcmpeq+0xe>
   15952:	2100      	movs	r1, #0
   15954:	42c8      	cmn	r0, r1
   15956:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015958 <__aeabi_dcmpeq>:
   15958:	b510      	push	{r4, lr}
   1595a:	f000 ff09 	bl	16770 <__eqdf2>
   1595e:	4240      	negs	r0, r0
   15960:	3001      	adds	r0, #1
   15962:	bd10      	pop	{r4, pc}

00015964 <__aeabi_dcmplt>:
   15964:	b510      	push	{r4, lr}
   15966:	f000 ffcb 	bl	16900 <__ledf2>
   1596a:	2800      	cmp	r0, #0
   1596c:	db01      	blt.n	15972 <__aeabi_dcmplt+0xe>
   1596e:	2000      	movs	r0, #0
   15970:	bd10      	pop	{r4, pc}
   15972:	2001      	movs	r0, #1
   15974:	bd10      	pop	{r4, pc}
   15976:	46c0      	nop			; (mov r8, r8)

00015978 <__aeabi_dcmple>:
   15978:	b510      	push	{r4, lr}
   1597a:	f000 ffc1 	bl	16900 <__ledf2>
   1597e:	2800      	cmp	r0, #0
   15980:	dd01      	ble.n	15986 <__aeabi_dcmple+0xe>
   15982:	2000      	movs	r0, #0
   15984:	bd10      	pop	{r4, pc}
   15986:	2001      	movs	r0, #1
   15988:	bd10      	pop	{r4, pc}
   1598a:	46c0      	nop			; (mov r8, r8)

0001598c <__aeabi_dcmpgt>:
   1598c:	b510      	push	{r4, lr}
   1598e:	f000 ff39 	bl	16804 <__gedf2>
   15992:	2800      	cmp	r0, #0
   15994:	dc01      	bgt.n	1599a <__aeabi_dcmpgt+0xe>
   15996:	2000      	movs	r0, #0
   15998:	bd10      	pop	{r4, pc}
   1599a:	2001      	movs	r0, #1
   1599c:	bd10      	pop	{r4, pc}
   1599e:	46c0      	nop			; (mov r8, r8)

000159a0 <__aeabi_dcmpge>:
   159a0:	b510      	push	{r4, lr}
   159a2:	f000 ff2f 	bl	16804 <__gedf2>
   159a6:	2800      	cmp	r0, #0
   159a8:	da01      	bge.n	159ae <__aeabi_dcmpge+0xe>
   159aa:	2000      	movs	r0, #0
   159ac:	bd10      	pop	{r4, pc}
   159ae:	2001      	movs	r0, #1
   159b0:	bd10      	pop	{r4, pc}
   159b2:	46c0      	nop			; (mov r8, r8)

000159b4 <__aeabi_uldivmod>:
   159b4:	2b00      	cmp	r3, #0
   159b6:	d111      	bne.n	159dc <__aeabi_uldivmod+0x28>
   159b8:	2a00      	cmp	r2, #0
   159ba:	d10f      	bne.n	159dc <__aeabi_uldivmod+0x28>
   159bc:	2900      	cmp	r1, #0
   159be:	d100      	bne.n	159c2 <__aeabi_uldivmod+0xe>
   159c0:	2800      	cmp	r0, #0
   159c2:	d002      	beq.n	159ca <__aeabi_uldivmod+0x16>
   159c4:	2100      	movs	r1, #0
   159c6:	43c9      	mvns	r1, r1
   159c8:	1c08      	adds	r0, r1, #0
   159ca:	b407      	push	{r0, r1, r2}
   159cc:	4802      	ldr	r0, [pc, #8]	; (159d8 <__aeabi_uldivmod+0x24>)
   159ce:	a102      	add	r1, pc, #8	; (adr r1, 159d8 <__aeabi_uldivmod+0x24>)
   159d0:	1840      	adds	r0, r0, r1
   159d2:	9002      	str	r0, [sp, #8]
   159d4:	bd03      	pop	{r0, r1, pc}
   159d6:	46c0      	nop			; (mov r8, r8)
   159d8:	ffffff5d 	.word	0xffffff5d
   159dc:	b403      	push	{r0, r1}
   159de:	4668      	mov	r0, sp
   159e0:	b501      	push	{r0, lr}
   159e2:	9802      	ldr	r0, [sp, #8]
   159e4:	f000 f864 	bl	15ab0 <__gnu_uldivmod_helper>
   159e8:	9b01      	ldr	r3, [sp, #4]
   159ea:	469e      	mov	lr, r3
   159ec:	b002      	add	sp, #8
   159ee:	bc0c      	pop	{r2, r3}
   159f0:	4770      	bx	lr
   159f2:	46c0      	nop			; (mov r8, r8)

000159f4 <__aeabi_lmul>:
   159f4:	469c      	mov	ip, r3
   159f6:	0403      	lsls	r3, r0, #16
   159f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   159fa:	0c1b      	lsrs	r3, r3, #16
   159fc:	0417      	lsls	r7, r2, #16
   159fe:	0c3f      	lsrs	r7, r7, #16
   15a00:	0c15      	lsrs	r5, r2, #16
   15a02:	1c1e      	adds	r6, r3, #0
   15a04:	1c04      	adds	r4, r0, #0
   15a06:	0c00      	lsrs	r0, r0, #16
   15a08:	437e      	muls	r6, r7
   15a0a:	436b      	muls	r3, r5
   15a0c:	4347      	muls	r7, r0
   15a0e:	4345      	muls	r5, r0
   15a10:	18fb      	adds	r3, r7, r3
   15a12:	0c30      	lsrs	r0, r6, #16
   15a14:	1818      	adds	r0, r3, r0
   15a16:	4287      	cmp	r7, r0
   15a18:	d902      	bls.n	15a20 <__aeabi_lmul+0x2c>
   15a1a:	2380      	movs	r3, #128	; 0x80
   15a1c:	025b      	lsls	r3, r3, #9
   15a1e:	18ed      	adds	r5, r5, r3
   15a20:	0c03      	lsrs	r3, r0, #16
   15a22:	18ed      	adds	r5, r5, r3
   15a24:	4663      	mov	r3, ip
   15a26:	435c      	muls	r4, r3
   15a28:	434a      	muls	r2, r1
   15a2a:	0436      	lsls	r6, r6, #16
   15a2c:	0c36      	lsrs	r6, r6, #16
   15a2e:	18a1      	adds	r1, r4, r2
   15a30:	0400      	lsls	r0, r0, #16
   15a32:	1980      	adds	r0, r0, r6
   15a34:	1949      	adds	r1, r1, r5
   15a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015a38 <__aeabi_d2uiz>:
   15a38:	b538      	push	{r3, r4, r5, lr}
   15a3a:	4b0e      	ldr	r3, [pc, #56]	; (15a74 <__aeabi_d2uiz+0x3c>)
   15a3c:	4a0c      	ldr	r2, [pc, #48]	; (15a70 <__aeabi_d2uiz+0x38>)
   15a3e:	1c04      	adds	r4, r0, #0
   15a40:	1c0d      	adds	r5, r1, #0
   15a42:	f7ff ffad 	bl	159a0 <__aeabi_dcmpge>
   15a46:	2800      	cmp	r0, #0
   15a48:	d104      	bne.n	15a54 <__aeabi_d2uiz+0x1c>
   15a4a:	1c20      	adds	r0, r4, #0
   15a4c:	1c29      	adds	r1, r5, #0
   15a4e:	f001 fd99 	bl	17584 <__aeabi_d2iz>
   15a52:	bd38      	pop	{r3, r4, r5, pc}
   15a54:	4b07      	ldr	r3, [pc, #28]	; (15a74 <__aeabi_d2uiz+0x3c>)
   15a56:	4a06      	ldr	r2, [pc, #24]	; (15a70 <__aeabi_d2uiz+0x38>)
   15a58:	1c20      	adds	r0, r4, #0
   15a5a:	1c29      	adds	r1, r5, #0
   15a5c:	f001 fa5e 	bl	16f1c <__aeabi_dsub>
   15a60:	f001 fd90 	bl	17584 <__aeabi_d2iz>
   15a64:	2380      	movs	r3, #128	; 0x80
   15a66:	061b      	lsls	r3, r3, #24
   15a68:	18c0      	adds	r0, r0, r3
   15a6a:	e7f2      	b.n	15a52 <__aeabi_d2uiz+0x1a>
   15a6c:	46c0      	nop			; (mov r8, r8)
   15a6e:	46c0      	nop			; (mov r8, r8)
   15a70:	00000000 	.word	0x00000000
   15a74:	41e00000 	.word	0x41e00000

00015a78 <__gnu_ldivmod_helper>:
   15a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a7a:	b083      	sub	sp, #12
   15a7c:	1c16      	adds	r6, r2, #0
   15a7e:	1c1f      	adds	r7, r3, #0
   15a80:	9000      	str	r0, [sp, #0]
   15a82:	9101      	str	r1, [sp, #4]
   15a84:	f001 fe42 	bl	1770c <__divdi3>
   15a88:	1c04      	adds	r4, r0, #0
   15a8a:	1c0d      	adds	r5, r1, #0
   15a8c:	1c22      	adds	r2, r4, #0
   15a8e:	1c2b      	adds	r3, r5, #0
   15a90:	1c30      	adds	r0, r6, #0
   15a92:	1c39      	adds	r1, r7, #0
   15a94:	f7ff ffae 	bl	159f4 <__aeabi_lmul>
   15a98:	9a00      	ldr	r2, [sp, #0]
   15a9a:	9b01      	ldr	r3, [sp, #4]
   15a9c:	1a12      	subs	r2, r2, r0
   15a9e:	418b      	sbcs	r3, r1
   15aa0:	9908      	ldr	r1, [sp, #32]
   15aa2:	1c20      	adds	r0, r4, #0
   15aa4:	600a      	str	r2, [r1, #0]
   15aa6:	604b      	str	r3, [r1, #4]
   15aa8:	1c29      	adds	r1, r5, #0
   15aaa:	b003      	add	sp, #12
   15aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15aae:	46c0      	nop			; (mov r8, r8)

00015ab0 <__gnu_uldivmod_helper>:
   15ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ab2:	b083      	sub	sp, #12
   15ab4:	1c14      	adds	r4, r2, #0
   15ab6:	1c1d      	adds	r5, r3, #0
   15ab8:	9000      	str	r0, [sp, #0]
   15aba:	9101      	str	r1, [sp, #4]
   15abc:	f002 f802 	bl	17ac4 <__udivdi3>
   15ac0:	1c22      	adds	r2, r4, #0
   15ac2:	1c2b      	adds	r3, r5, #0
   15ac4:	1c06      	adds	r6, r0, #0
   15ac6:	1c0f      	adds	r7, r1, #0
   15ac8:	f7ff ff94 	bl	159f4 <__aeabi_lmul>
   15acc:	9a00      	ldr	r2, [sp, #0]
   15ace:	9b01      	ldr	r3, [sp, #4]
   15ad0:	1a12      	subs	r2, r2, r0
   15ad2:	418b      	sbcs	r3, r1
   15ad4:	9908      	ldr	r1, [sp, #32]
   15ad6:	1c30      	adds	r0, r6, #0
   15ad8:	600a      	str	r2, [r1, #0]
   15ada:	604b      	str	r3, [r1, #4]
   15adc:	1c39      	adds	r1, r7, #0
   15ade:	b003      	add	sp, #12
   15ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ae2:	46c0      	nop			; (mov r8, r8)

00015ae4 <__aeabi_dadd>:
   15ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ae6:	465f      	mov	r7, fp
   15ae8:	4656      	mov	r6, sl
   15aea:	4644      	mov	r4, r8
   15aec:	464d      	mov	r5, r9
   15aee:	b4f0      	push	{r4, r5, r6, r7}
   15af0:	030c      	lsls	r4, r1, #12
   15af2:	004d      	lsls	r5, r1, #1
   15af4:	0fce      	lsrs	r6, r1, #31
   15af6:	0a61      	lsrs	r1, r4, #9
   15af8:	0f44      	lsrs	r4, r0, #29
   15afa:	4321      	orrs	r1, r4
   15afc:	00c4      	lsls	r4, r0, #3
   15afe:	0318      	lsls	r0, r3, #12
   15b00:	4680      	mov	r8, r0
   15b02:	0058      	lsls	r0, r3, #1
   15b04:	0d40      	lsrs	r0, r0, #21
   15b06:	4682      	mov	sl, r0
   15b08:	0fd8      	lsrs	r0, r3, #31
   15b0a:	4684      	mov	ip, r0
   15b0c:	4640      	mov	r0, r8
   15b0e:	0a40      	lsrs	r0, r0, #9
   15b10:	0f53      	lsrs	r3, r2, #29
   15b12:	4303      	orrs	r3, r0
   15b14:	00d0      	lsls	r0, r2, #3
   15b16:	0d6d      	lsrs	r5, r5, #21
   15b18:	1c37      	adds	r7, r6, #0
   15b1a:	4683      	mov	fp, r0
   15b1c:	4652      	mov	r2, sl
   15b1e:	4566      	cmp	r6, ip
   15b20:	d100      	bne.n	15b24 <__aeabi_dadd+0x40>
   15b22:	e0a4      	b.n	15c6e <__aeabi_dadd+0x18a>
   15b24:	1aaf      	subs	r7, r5, r2
   15b26:	2f00      	cmp	r7, #0
   15b28:	dc00      	bgt.n	15b2c <__aeabi_dadd+0x48>
   15b2a:	e109      	b.n	15d40 <__aeabi_dadd+0x25c>
   15b2c:	2a00      	cmp	r2, #0
   15b2e:	d13b      	bne.n	15ba8 <__aeabi_dadd+0xc4>
   15b30:	4318      	orrs	r0, r3
   15b32:	d000      	beq.n	15b36 <__aeabi_dadd+0x52>
   15b34:	e0ea      	b.n	15d0c <__aeabi_dadd+0x228>
   15b36:	0763      	lsls	r3, r4, #29
   15b38:	d100      	bne.n	15b3c <__aeabi_dadd+0x58>
   15b3a:	e087      	b.n	15c4c <__aeabi_dadd+0x168>
   15b3c:	230f      	movs	r3, #15
   15b3e:	4023      	ands	r3, r4
   15b40:	2b04      	cmp	r3, #4
   15b42:	d100      	bne.n	15b46 <__aeabi_dadd+0x62>
   15b44:	e082      	b.n	15c4c <__aeabi_dadd+0x168>
   15b46:	1d22      	adds	r2, r4, #4
   15b48:	42a2      	cmp	r2, r4
   15b4a:	41a4      	sbcs	r4, r4
   15b4c:	4264      	negs	r4, r4
   15b4e:	2380      	movs	r3, #128	; 0x80
   15b50:	1909      	adds	r1, r1, r4
   15b52:	041b      	lsls	r3, r3, #16
   15b54:	400b      	ands	r3, r1
   15b56:	1c37      	adds	r7, r6, #0
   15b58:	1c14      	adds	r4, r2, #0
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	d100      	bne.n	15b60 <__aeabi_dadd+0x7c>
   15b5e:	e07c      	b.n	15c5a <__aeabi_dadd+0x176>
   15b60:	4bce      	ldr	r3, [pc, #824]	; (15e9c <__aeabi_dadd+0x3b8>)
   15b62:	3501      	adds	r5, #1
   15b64:	429d      	cmp	r5, r3
   15b66:	d100      	bne.n	15b6a <__aeabi_dadd+0x86>
   15b68:	e105      	b.n	15d76 <__aeabi_dadd+0x292>
   15b6a:	4bcd      	ldr	r3, [pc, #820]	; (15ea0 <__aeabi_dadd+0x3bc>)
   15b6c:	08e4      	lsrs	r4, r4, #3
   15b6e:	4019      	ands	r1, r3
   15b70:	0748      	lsls	r0, r1, #29
   15b72:	0249      	lsls	r1, r1, #9
   15b74:	4304      	orrs	r4, r0
   15b76:	0b0b      	lsrs	r3, r1, #12
   15b78:	2000      	movs	r0, #0
   15b7a:	2100      	movs	r1, #0
   15b7c:	031b      	lsls	r3, r3, #12
   15b7e:	0b1a      	lsrs	r2, r3, #12
   15b80:	0d0b      	lsrs	r3, r1, #20
   15b82:	056d      	lsls	r5, r5, #21
   15b84:	051b      	lsls	r3, r3, #20
   15b86:	4313      	orrs	r3, r2
   15b88:	086a      	lsrs	r2, r5, #1
   15b8a:	4dc6      	ldr	r5, [pc, #792]	; (15ea4 <__aeabi_dadd+0x3c0>)
   15b8c:	07ff      	lsls	r7, r7, #31
   15b8e:	401d      	ands	r5, r3
   15b90:	4315      	orrs	r5, r2
   15b92:	006d      	lsls	r5, r5, #1
   15b94:	086d      	lsrs	r5, r5, #1
   15b96:	1c29      	adds	r1, r5, #0
   15b98:	4339      	orrs	r1, r7
   15b9a:	1c20      	adds	r0, r4, #0
   15b9c:	bc3c      	pop	{r2, r3, r4, r5}
   15b9e:	4690      	mov	r8, r2
   15ba0:	4699      	mov	r9, r3
   15ba2:	46a2      	mov	sl, r4
   15ba4:	46ab      	mov	fp, r5
   15ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ba8:	48bc      	ldr	r0, [pc, #752]	; (15e9c <__aeabi_dadd+0x3b8>)
   15baa:	4285      	cmp	r5, r0
   15bac:	d0c3      	beq.n	15b36 <__aeabi_dadd+0x52>
   15bae:	2080      	movs	r0, #128	; 0x80
   15bb0:	0400      	lsls	r0, r0, #16
   15bb2:	4303      	orrs	r3, r0
   15bb4:	2f38      	cmp	r7, #56	; 0x38
   15bb6:	dd00      	ble.n	15bba <__aeabi_dadd+0xd6>
   15bb8:	e0f0      	b.n	15d9c <__aeabi_dadd+0x2b8>
   15bba:	2f1f      	cmp	r7, #31
   15bbc:	dd00      	ble.n	15bc0 <__aeabi_dadd+0xdc>
   15bbe:	e124      	b.n	15e0a <__aeabi_dadd+0x326>
   15bc0:	2020      	movs	r0, #32
   15bc2:	1bc0      	subs	r0, r0, r7
   15bc4:	1c1a      	adds	r2, r3, #0
   15bc6:	4681      	mov	r9, r0
   15bc8:	4082      	lsls	r2, r0
   15bca:	4658      	mov	r0, fp
   15bcc:	40f8      	lsrs	r0, r7
   15bce:	4302      	orrs	r2, r0
   15bd0:	4694      	mov	ip, r2
   15bd2:	4658      	mov	r0, fp
   15bd4:	464a      	mov	r2, r9
   15bd6:	4090      	lsls	r0, r2
   15bd8:	1e42      	subs	r2, r0, #1
   15bda:	4190      	sbcs	r0, r2
   15bdc:	40fb      	lsrs	r3, r7
   15bde:	4662      	mov	r2, ip
   15be0:	4302      	orrs	r2, r0
   15be2:	1c1f      	adds	r7, r3, #0
   15be4:	1aa2      	subs	r2, r4, r2
   15be6:	4294      	cmp	r4, r2
   15be8:	41a4      	sbcs	r4, r4
   15bea:	4264      	negs	r4, r4
   15bec:	1bc9      	subs	r1, r1, r7
   15bee:	1b09      	subs	r1, r1, r4
   15bf0:	1c14      	adds	r4, r2, #0
   15bf2:	020b      	lsls	r3, r1, #8
   15bf4:	d59f      	bpl.n	15b36 <__aeabi_dadd+0x52>
   15bf6:	0249      	lsls	r1, r1, #9
   15bf8:	0a4f      	lsrs	r7, r1, #9
   15bfa:	2f00      	cmp	r7, #0
   15bfc:	d100      	bne.n	15c00 <__aeabi_dadd+0x11c>
   15bfe:	e0c8      	b.n	15d92 <__aeabi_dadd+0x2ae>
   15c00:	1c38      	adds	r0, r7, #0
   15c02:	f001 fd65 	bl	176d0 <__clzsi2>
   15c06:	1c02      	adds	r2, r0, #0
   15c08:	3a08      	subs	r2, #8
   15c0a:	2a1f      	cmp	r2, #31
   15c0c:	dd00      	ble.n	15c10 <__aeabi_dadd+0x12c>
   15c0e:	e0b5      	b.n	15d7c <__aeabi_dadd+0x298>
   15c10:	2128      	movs	r1, #40	; 0x28
   15c12:	1a09      	subs	r1, r1, r0
   15c14:	1c20      	adds	r0, r4, #0
   15c16:	4097      	lsls	r7, r2
   15c18:	40c8      	lsrs	r0, r1
   15c1a:	4307      	orrs	r7, r0
   15c1c:	4094      	lsls	r4, r2
   15c1e:	4295      	cmp	r5, r2
   15c20:	dd00      	ble.n	15c24 <__aeabi_dadd+0x140>
   15c22:	e0b2      	b.n	15d8a <__aeabi_dadd+0x2a6>
   15c24:	1b55      	subs	r5, r2, r5
   15c26:	1c69      	adds	r1, r5, #1
   15c28:	291f      	cmp	r1, #31
   15c2a:	dd00      	ble.n	15c2e <__aeabi_dadd+0x14a>
   15c2c:	e0dc      	b.n	15de8 <__aeabi_dadd+0x304>
   15c2e:	221f      	movs	r2, #31
   15c30:	1b55      	subs	r5, r2, r5
   15c32:	1c3b      	adds	r3, r7, #0
   15c34:	1c22      	adds	r2, r4, #0
   15c36:	40ab      	lsls	r3, r5
   15c38:	40ca      	lsrs	r2, r1
   15c3a:	40ac      	lsls	r4, r5
   15c3c:	1e65      	subs	r5, r4, #1
   15c3e:	41ac      	sbcs	r4, r5
   15c40:	4313      	orrs	r3, r2
   15c42:	40cf      	lsrs	r7, r1
   15c44:	431c      	orrs	r4, r3
   15c46:	1c39      	adds	r1, r7, #0
   15c48:	2500      	movs	r5, #0
   15c4a:	e774      	b.n	15b36 <__aeabi_dadd+0x52>
   15c4c:	2380      	movs	r3, #128	; 0x80
   15c4e:	041b      	lsls	r3, r3, #16
   15c50:	400b      	ands	r3, r1
   15c52:	1c37      	adds	r7, r6, #0
   15c54:	2b00      	cmp	r3, #0
   15c56:	d000      	beq.n	15c5a <__aeabi_dadd+0x176>
   15c58:	e782      	b.n	15b60 <__aeabi_dadd+0x7c>
   15c5a:	4b90      	ldr	r3, [pc, #576]	; (15e9c <__aeabi_dadd+0x3b8>)
   15c5c:	0748      	lsls	r0, r1, #29
   15c5e:	08e4      	lsrs	r4, r4, #3
   15c60:	4304      	orrs	r4, r0
   15c62:	08c9      	lsrs	r1, r1, #3
   15c64:	429d      	cmp	r5, r3
   15c66:	d048      	beq.n	15cfa <__aeabi_dadd+0x216>
   15c68:	0309      	lsls	r1, r1, #12
   15c6a:	0b0b      	lsrs	r3, r1, #12
   15c6c:	e784      	b.n	15b78 <__aeabi_dadd+0x94>
   15c6e:	1aaa      	subs	r2, r5, r2
   15c70:	4694      	mov	ip, r2
   15c72:	2a00      	cmp	r2, #0
   15c74:	dc00      	bgt.n	15c78 <__aeabi_dadd+0x194>
   15c76:	e098      	b.n	15daa <__aeabi_dadd+0x2c6>
   15c78:	4650      	mov	r0, sl
   15c7a:	2800      	cmp	r0, #0
   15c7c:	d052      	beq.n	15d24 <__aeabi_dadd+0x240>
   15c7e:	4887      	ldr	r0, [pc, #540]	; (15e9c <__aeabi_dadd+0x3b8>)
   15c80:	4285      	cmp	r5, r0
   15c82:	d100      	bne.n	15c86 <__aeabi_dadd+0x1a2>
   15c84:	e757      	b.n	15b36 <__aeabi_dadd+0x52>
   15c86:	2080      	movs	r0, #128	; 0x80
   15c88:	0400      	lsls	r0, r0, #16
   15c8a:	4303      	orrs	r3, r0
   15c8c:	4662      	mov	r2, ip
   15c8e:	2a38      	cmp	r2, #56	; 0x38
   15c90:	dd00      	ble.n	15c94 <__aeabi_dadd+0x1b0>
   15c92:	e0fc      	b.n	15e8e <__aeabi_dadd+0x3aa>
   15c94:	2a1f      	cmp	r2, #31
   15c96:	dd00      	ble.n	15c9a <__aeabi_dadd+0x1b6>
   15c98:	e14a      	b.n	15f30 <__aeabi_dadd+0x44c>
   15c9a:	2220      	movs	r2, #32
   15c9c:	4660      	mov	r0, ip
   15c9e:	1a10      	subs	r0, r2, r0
   15ca0:	1c1a      	adds	r2, r3, #0
   15ca2:	4082      	lsls	r2, r0
   15ca4:	4682      	mov	sl, r0
   15ca6:	4691      	mov	r9, r2
   15ca8:	4658      	mov	r0, fp
   15caa:	4662      	mov	r2, ip
   15cac:	40d0      	lsrs	r0, r2
   15cae:	464a      	mov	r2, r9
   15cb0:	4302      	orrs	r2, r0
   15cb2:	4690      	mov	r8, r2
   15cb4:	4658      	mov	r0, fp
   15cb6:	4652      	mov	r2, sl
   15cb8:	4090      	lsls	r0, r2
   15cba:	1e42      	subs	r2, r0, #1
   15cbc:	4190      	sbcs	r0, r2
   15cbe:	4642      	mov	r2, r8
   15cc0:	4302      	orrs	r2, r0
   15cc2:	4660      	mov	r0, ip
   15cc4:	40c3      	lsrs	r3, r0
   15cc6:	1912      	adds	r2, r2, r4
   15cc8:	42a2      	cmp	r2, r4
   15cca:	41a4      	sbcs	r4, r4
   15ccc:	4264      	negs	r4, r4
   15cce:	1859      	adds	r1, r3, r1
   15cd0:	1909      	adds	r1, r1, r4
   15cd2:	1c14      	adds	r4, r2, #0
   15cd4:	0208      	lsls	r0, r1, #8
   15cd6:	d400      	bmi.n	15cda <__aeabi_dadd+0x1f6>
   15cd8:	e72d      	b.n	15b36 <__aeabi_dadd+0x52>
   15cda:	4b70      	ldr	r3, [pc, #448]	; (15e9c <__aeabi_dadd+0x3b8>)
   15cdc:	3501      	adds	r5, #1
   15cde:	429d      	cmp	r5, r3
   15ce0:	d100      	bne.n	15ce4 <__aeabi_dadd+0x200>
   15ce2:	e122      	b.n	15f2a <__aeabi_dadd+0x446>
   15ce4:	4b6e      	ldr	r3, [pc, #440]	; (15ea0 <__aeabi_dadd+0x3bc>)
   15ce6:	0860      	lsrs	r0, r4, #1
   15ce8:	4019      	ands	r1, r3
   15cea:	2301      	movs	r3, #1
   15cec:	4023      	ands	r3, r4
   15cee:	1c1c      	adds	r4, r3, #0
   15cf0:	4304      	orrs	r4, r0
   15cf2:	07cb      	lsls	r3, r1, #31
   15cf4:	431c      	orrs	r4, r3
   15cf6:	0849      	lsrs	r1, r1, #1
   15cf8:	e71d      	b.n	15b36 <__aeabi_dadd+0x52>
   15cfa:	1c23      	adds	r3, r4, #0
   15cfc:	430b      	orrs	r3, r1
   15cfe:	d03a      	beq.n	15d76 <__aeabi_dadd+0x292>
   15d00:	2380      	movs	r3, #128	; 0x80
   15d02:	031b      	lsls	r3, r3, #12
   15d04:	430b      	orrs	r3, r1
   15d06:	031b      	lsls	r3, r3, #12
   15d08:	0b1b      	lsrs	r3, r3, #12
   15d0a:	e735      	b.n	15b78 <__aeabi_dadd+0x94>
   15d0c:	3f01      	subs	r7, #1
   15d0e:	2f00      	cmp	r7, #0
   15d10:	d165      	bne.n	15dde <__aeabi_dadd+0x2fa>
   15d12:	4658      	mov	r0, fp
   15d14:	1a22      	subs	r2, r4, r0
   15d16:	4294      	cmp	r4, r2
   15d18:	41a4      	sbcs	r4, r4
   15d1a:	4264      	negs	r4, r4
   15d1c:	1ac9      	subs	r1, r1, r3
   15d1e:	1b09      	subs	r1, r1, r4
   15d20:	1c14      	adds	r4, r2, #0
   15d22:	e766      	b.n	15bf2 <__aeabi_dadd+0x10e>
   15d24:	4658      	mov	r0, fp
   15d26:	4318      	orrs	r0, r3
   15d28:	d100      	bne.n	15d2c <__aeabi_dadd+0x248>
   15d2a:	e704      	b.n	15b36 <__aeabi_dadd+0x52>
   15d2c:	2201      	movs	r2, #1
   15d2e:	4252      	negs	r2, r2
   15d30:	4494      	add	ip, r2
   15d32:	4660      	mov	r0, ip
   15d34:	2800      	cmp	r0, #0
   15d36:	d000      	beq.n	15d3a <__aeabi_dadd+0x256>
   15d38:	e0c5      	b.n	15ec6 <__aeabi_dadd+0x3e2>
   15d3a:	4658      	mov	r0, fp
   15d3c:	1902      	adds	r2, r0, r4
   15d3e:	e7c3      	b.n	15cc8 <__aeabi_dadd+0x1e4>
   15d40:	2f00      	cmp	r7, #0
   15d42:	d173      	bne.n	15e2c <__aeabi_dadd+0x348>
   15d44:	1c68      	adds	r0, r5, #1
   15d46:	0540      	lsls	r0, r0, #21
   15d48:	0d40      	lsrs	r0, r0, #21
   15d4a:	2801      	cmp	r0, #1
   15d4c:	dc00      	bgt.n	15d50 <__aeabi_dadd+0x26c>
   15d4e:	e0de      	b.n	15f0e <__aeabi_dadd+0x42a>
   15d50:	465a      	mov	r2, fp
   15d52:	1aa2      	subs	r2, r4, r2
   15d54:	4294      	cmp	r4, r2
   15d56:	41bf      	sbcs	r7, r7
   15d58:	1ac8      	subs	r0, r1, r3
   15d5a:	427f      	negs	r7, r7
   15d5c:	1bc7      	subs	r7, r0, r7
   15d5e:	0238      	lsls	r0, r7, #8
   15d60:	d400      	bmi.n	15d64 <__aeabi_dadd+0x280>
   15d62:	e089      	b.n	15e78 <__aeabi_dadd+0x394>
   15d64:	465a      	mov	r2, fp
   15d66:	1b14      	subs	r4, r2, r4
   15d68:	45a3      	cmp	fp, r4
   15d6a:	4192      	sbcs	r2, r2
   15d6c:	1a59      	subs	r1, r3, r1
   15d6e:	4252      	negs	r2, r2
   15d70:	1a8f      	subs	r7, r1, r2
   15d72:	4666      	mov	r6, ip
   15d74:	e741      	b.n	15bfa <__aeabi_dadd+0x116>
   15d76:	2300      	movs	r3, #0
   15d78:	2400      	movs	r4, #0
   15d7a:	e6fd      	b.n	15b78 <__aeabi_dadd+0x94>
   15d7c:	1c27      	adds	r7, r4, #0
   15d7e:	3828      	subs	r0, #40	; 0x28
   15d80:	4087      	lsls	r7, r0
   15d82:	2400      	movs	r4, #0
   15d84:	4295      	cmp	r5, r2
   15d86:	dc00      	bgt.n	15d8a <__aeabi_dadd+0x2a6>
   15d88:	e74c      	b.n	15c24 <__aeabi_dadd+0x140>
   15d8a:	4945      	ldr	r1, [pc, #276]	; (15ea0 <__aeabi_dadd+0x3bc>)
   15d8c:	1aad      	subs	r5, r5, r2
   15d8e:	4039      	ands	r1, r7
   15d90:	e6d1      	b.n	15b36 <__aeabi_dadd+0x52>
   15d92:	1c20      	adds	r0, r4, #0
   15d94:	f001 fc9c 	bl	176d0 <__clzsi2>
   15d98:	3020      	adds	r0, #32
   15d9a:	e734      	b.n	15c06 <__aeabi_dadd+0x122>
   15d9c:	465a      	mov	r2, fp
   15d9e:	431a      	orrs	r2, r3
   15da0:	1e53      	subs	r3, r2, #1
   15da2:	419a      	sbcs	r2, r3
   15da4:	b2d2      	uxtb	r2, r2
   15da6:	2700      	movs	r7, #0
   15da8:	e71c      	b.n	15be4 <__aeabi_dadd+0x100>
   15daa:	2a00      	cmp	r2, #0
   15dac:	d000      	beq.n	15db0 <__aeabi_dadd+0x2cc>
   15dae:	e0dc      	b.n	15f6a <__aeabi_dadd+0x486>
   15db0:	1c68      	adds	r0, r5, #1
   15db2:	0542      	lsls	r2, r0, #21
   15db4:	0d52      	lsrs	r2, r2, #21
   15db6:	2a01      	cmp	r2, #1
   15db8:	dc00      	bgt.n	15dbc <__aeabi_dadd+0x2d8>
   15dba:	e08d      	b.n	15ed8 <__aeabi_dadd+0x3f4>
   15dbc:	4d37      	ldr	r5, [pc, #220]	; (15e9c <__aeabi_dadd+0x3b8>)
   15dbe:	42a8      	cmp	r0, r5
   15dc0:	d100      	bne.n	15dc4 <__aeabi_dadd+0x2e0>
   15dc2:	e0f3      	b.n	15fac <__aeabi_dadd+0x4c8>
   15dc4:	465d      	mov	r5, fp
   15dc6:	192a      	adds	r2, r5, r4
   15dc8:	42a2      	cmp	r2, r4
   15dca:	41a4      	sbcs	r4, r4
   15dcc:	4264      	negs	r4, r4
   15dce:	1859      	adds	r1, r3, r1
   15dd0:	1909      	adds	r1, r1, r4
   15dd2:	07cc      	lsls	r4, r1, #31
   15dd4:	0852      	lsrs	r2, r2, #1
   15dd6:	4314      	orrs	r4, r2
   15dd8:	0849      	lsrs	r1, r1, #1
   15dda:	1c05      	adds	r5, r0, #0
   15ddc:	e6ab      	b.n	15b36 <__aeabi_dadd+0x52>
   15dde:	482f      	ldr	r0, [pc, #188]	; (15e9c <__aeabi_dadd+0x3b8>)
   15de0:	4285      	cmp	r5, r0
   15de2:	d000      	beq.n	15de6 <__aeabi_dadd+0x302>
   15de4:	e6e6      	b.n	15bb4 <__aeabi_dadd+0xd0>
   15de6:	e6a6      	b.n	15b36 <__aeabi_dadd+0x52>
   15de8:	1c2b      	adds	r3, r5, #0
   15dea:	3b1f      	subs	r3, #31
   15dec:	1c3a      	adds	r2, r7, #0
   15dee:	40da      	lsrs	r2, r3
   15df0:	1c13      	adds	r3, r2, #0
   15df2:	2920      	cmp	r1, #32
   15df4:	d06c      	beq.n	15ed0 <__aeabi_dadd+0x3ec>
   15df6:	223f      	movs	r2, #63	; 0x3f
   15df8:	1b55      	subs	r5, r2, r5
   15dfa:	40af      	lsls	r7, r5
   15dfc:	433c      	orrs	r4, r7
   15dfe:	1e60      	subs	r0, r4, #1
   15e00:	4184      	sbcs	r4, r0
   15e02:	431c      	orrs	r4, r3
   15e04:	2100      	movs	r1, #0
   15e06:	2500      	movs	r5, #0
   15e08:	e695      	b.n	15b36 <__aeabi_dadd+0x52>
   15e0a:	1c38      	adds	r0, r7, #0
   15e0c:	3820      	subs	r0, #32
   15e0e:	1c1a      	adds	r2, r3, #0
   15e10:	40c2      	lsrs	r2, r0
   15e12:	1c10      	adds	r0, r2, #0
   15e14:	2f20      	cmp	r7, #32
   15e16:	d05d      	beq.n	15ed4 <__aeabi_dadd+0x3f0>
   15e18:	2240      	movs	r2, #64	; 0x40
   15e1a:	1bd7      	subs	r7, r2, r7
   15e1c:	40bb      	lsls	r3, r7
   15e1e:	465a      	mov	r2, fp
   15e20:	431a      	orrs	r2, r3
   15e22:	1e53      	subs	r3, r2, #1
   15e24:	419a      	sbcs	r2, r3
   15e26:	4302      	orrs	r2, r0
   15e28:	2700      	movs	r7, #0
   15e2a:	e6db      	b.n	15be4 <__aeabi_dadd+0x100>
   15e2c:	2d00      	cmp	r5, #0
   15e2e:	d03b      	beq.n	15ea8 <__aeabi_dadd+0x3c4>
   15e30:	4d1a      	ldr	r5, [pc, #104]	; (15e9c <__aeabi_dadd+0x3b8>)
   15e32:	45aa      	cmp	sl, r5
   15e34:	d100      	bne.n	15e38 <__aeabi_dadd+0x354>
   15e36:	e093      	b.n	15f60 <__aeabi_dadd+0x47c>
   15e38:	2580      	movs	r5, #128	; 0x80
   15e3a:	042d      	lsls	r5, r5, #16
   15e3c:	427f      	negs	r7, r7
   15e3e:	4329      	orrs	r1, r5
   15e40:	2f38      	cmp	r7, #56	; 0x38
   15e42:	dd00      	ble.n	15e46 <__aeabi_dadd+0x362>
   15e44:	e0ac      	b.n	15fa0 <__aeabi_dadd+0x4bc>
   15e46:	2f1f      	cmp	r7, #31
   15e48:	dd00      	ble.n	15e4c <__aeabi_dadd+0x368>
   15e4a:	e129      	b.n	160a0 <__aeabi_dadd+0x5bc>
   15e4c:	2520      	movs	r5, #32
   15e4e:	1bed      	subs	r5, r5, r7
   15e50:	1c08      	adds	r0, r1, #0
   15e52:	1c26      	adds	r6, r4, #0
   15e54:	40a8      	lsls	r0, r5
   15e56:	40fe      	lsrs	r6, r7
   15e58:	40ac      	lsls	r4, r5
   15e5a:	4306      	orrs	r6, r0
   15e5c:	1e65      	subs	r5, r4, #1
   15e5e:	41ac      	sbcs	r4, r5
   15e60:	4334      	orrs	r4, r6
   15e62:	40f9      	lsrs	r1, r7
   15e64:	465d      	mov	r5, fp
   15e66:	1b2c      	subs	r4, r5, r4
   15e68:	45a3      	cmp	fp, r4
   15e6a:	4192      	sbcs	r2, r2
   15e6c:	1a5b      	subs	r3, r3, r1
   15e6e:	4252      	negs	r2, r2
   15e70:	1a99      	subs	r1, r3, r2
   15e72:	4655      	mov	r5, sl
   15e74:	4666      	mov	r6, ip
   15e76:	e6bc      	b.n	15bf2 <__aeabi_dadd+0x10e>
   15e78:	1c13      	adds	r3, r2, #0
   15e7a:	433b      	orrs	r3, r7
   15e7c:	1c14      	adds	r4, r2, #0
   15e7e:	2b00      	cmp	r3, #0
   15e80:	d000      	beq.n	15e84 <__aeabi_dadd+0x3a0>
   15e82:	e6ba      	b.n	15bfa <__aeabi_dadd+0x116>
   15e84:	2700      	movs	r7, #0
   15e86:	2100      	movs	r1, #0
   15e88:	2500      	movs	r5, #0
   15e8a:	2400      	movs	r4, #0
   15e8c:	e6e5      	b.n	15c5a <__aeabi_dadd+0x176>
   15e8e:	465a      	mov	r2, fp
   15e90:	431a      	orrs	r2, r3
   15e92:	1e53      	subs	r3, r2, #1
   15e94:	419a      	sbcs	r2, r3
   15e96:	b2d2      	uxtb	r2, r2
   15e98:	2300      	movs	r3, #0
   15e9a:	e714      	b.n	15cc6 <__aeabi_dadd+0x1e2>
   15e9c:	000007ff 	.word	0x000007ff
   15ea0:	ff7fffff 	.word	0xff7fffff
   15ea4:	800fffff 	.word	0x800fffff
   15ea8:	1c0d      	adds	r5, r1, #0
   15eaa:	4325      	orrs	r5, r4
   15eac:	d058      	beq.n	15f60 <__aeabi_dadd+0x47c>
   15eae:	43ff      	mvns	r7, r7
   15eb0:	2f00      	cmp	r7, #0
   15eb2:	d151      	bne.n	15f58 <__aeabi_dadd+0x474>
   15eb4:	1b04      	subs	r4, r0, r4
   15eb6:	45a3      	cmp	fp, r4
   15eb8:	4192      	sbcs	r2, r2
   15eba:	1a59      	subs	r1, r3, r1
   15ebc:	4252      	negs	r2, r2
   15ebe:	1a89      	subs	r1, r1, r2
   15ec0:	4655      	mov	r5, sl
   15ec2:	4666      	mov	r6, ip
   15ec4:	e695      	b.n	15bf2 <__aeabi_dadd+0x10e>
   15ec6:	4896      	ldr	r0, [pc, #600]	; (16120 <__aeabi_dadd+0x63c>)
   15ec8:	4285      	cmp	r5, r0
   15eca:	d000      	beq.n	15ece <__aeabi_dadd+0x3ea>
   15ecc:	e6de      	b.n	15c8c <__aeabi_dadd+0x1a8>
   15ece:	e632      	b.n	15b36 <__aeabi_dadd+0x52>
   15ed0:	2700      	movs	r7, #0
   15ed2:	e793      	b.n	15dfc <__aeabi_dadd+0x318>
   15ed4:	2300      	movs	r3, #0
   15ed6:	e7a2      	b.n	15e1e <__aeabi_dadd+0x33a>
   15ed8:	1c08      	adds	r0, r1, #0
   15eda:	4320      	orrs	r0, r4
   15edc:	2d00      	cmp	r5, #0
   15ede:	d000      	beq.n	15ee2 <__aeabi_dadd+0x3fe>
   15ee0:	e0c4      	b.n	1606c <__aeabi_dadd+0x588>
   15ee2:	2800      	cmp	r0, #0
   15ee4:	d100      	bne.n	15ee8 <__aeabi_dadd+0x404>
   15ee6:	e0f7      	b.n	160d8 <__aeabi_dadd+0x5f4>
   15ee8:	4658      	mov	r0, fp
   15eea:	4318      	orrs	r0, r3
   15eec:	d100      	bne.n	15ef0 <__aeabi_dadd+0x40c>
   15eee:	e622      	b.n	15b36 <__aeabi_dadd+0x52>
   15ef0:	4658      	mov	r0, fp
   15ef2:	1902      	adds	r2, r0, r4
   15ef4:	42a2      	cmp	r2, r4
   15ef6:	41a4      	sbcs	r4, r4
   15ef8:	4264      	negs	r4, r4
   15efa:	1859      	adds	r1, r3, r1
   15efc:	1909      	adds	r1, r1, r4
   15efe:	1c14      	adds	r4, r2, #0
   15f00:	020a      	lsls	r2, r1, #8
   15f02:	d400      	bmi.n	15f06 <__aeabi_dadd+0x422>
   15f04:	e617      	b.n	15b36 <__aeabi_dadd+0x52>
   15f06:	4b87      	ldr	r3, [pc, #540]	; (16124 <__aeabi_dadd+0x640>)
   15f08:	2501      	movs	r5, #1
   15f0a:	4019      	ands	r1, r3
   15f0c:	e613      	b.n	15b36 <__aeabi_dadd+0x52>
   15f0e:	1c08      	adds	r0, r1, #0
   15f10:	4320      	orrs	r0, r4
   15f12:	2d00      	cmp	r5, #0
   15f14:	d139      	bne.n	15f8a <__aeabi_dadd+0x4a6>
   15f16:	2800      	cmp	r0, #0
   15f18:	d171      	bne.n	15ffe <__aeabi_dadd+0x51a>
   15f1a:	4659      	mov	r1, fp
   15f1c:	4319      	orrs	r1, r3
   15f1e:	d003      	beq.n	15f28 <__aeabi_dadd+0x444>
   15f20:	1c19      	adds	r1, r3, #0
   15f22:	465c      	mov	r4, fp
   15f24:	4666      	mov	r6, ip
   15f26:	e606      	b.n	15b36 <__aeabi_dadd+0x52>
   15f28:	2700      	movs	r7, #0
   15f2a:	2100      	movs	r1, #0
   15f2c:	2400      	movs	r4, #0
   15f2e:	e694      	b.n	15c5a <__aeabi_dadd+0x176>
   15f30:	4660      	mov	r0, ip
   15f32:	3820      	subs	r0, #32
   15f34:	1c1a      	adds	r2, r3, #0
   15f36:	40c2      	lsrs	r2, r0
   15f38:	4660      	mov	r0, ip
   15f3a:	4691      	mov	r9, r2
   15f3c:	2820      	cmp	r0, #32
   15f3e:	d100      	bne.n	15f42 <__aeabi_dadd+0x45e>
   15f40:	e0ac      	b.n	1609c <__aeabi_dadd+0x5b8>
   15f42:	2240      	movs	r2, #64	; 0x40
   15f44:	1a12      	subs	r2, r2, r0
   15f46:	4093      	lsls	r3, r2
   15f48:	465a      	mov	r2, fp
   15f4a:	431a      	orrs	r2, r3
   15f4c:	1e53      	subs	r3, r2, #1
   15f4e:	419a      	sbcs	r2, r3
   15f50:	464b      	mov	r3, r9
   15f52:	431a      	orrs	r2, r3
   15f54:	2300      	movs	r3, #0
   15f56:	e6b6      	b.n	15cc6 <__aeabi_dadd+0x1e2>
   15f58:	4d71      	ldr	r5, [pc, #452]	; (16120 <__aeabi_dadd+0x63c>)
   15f5a:	45aa      	cmp	sl, r5
   15f5c:	d000      	beq.n	15f60 <__aeabi_dadd+0x47c>
   15f5e:	e76f      	b.n	15e40 <__aeabi_dadd+0x35c>
   15f60:	1c19      	adds	r1, r3, #0
   15f62:	465c      	mov	r4, fp
   15f64:	4655      	mov	r5, sl
   15f66:	4666      	mov	r6, ip
   15f68:	e5e5      	b.n	15b36 <__aeabi_dadd+0x52>
   15f6a:	2d00      	cmp	r5, #0
   15f6c:	d122      	bne.n	15fb4 <__aeabi_dadd+0x4d0>
   15f6e:	1c0d      	adds	r5, r1, #0
   15f70:	4325      	orrs	r5, r4
   15f72:	d077      	beq.n	16064 <__aeabi_dadd+0x580>
   15f74:	43d5      	mvns	r5, r2
   15f76:	2d00      	cmp	r5, #0
   15f78:	d171      	bne.n	1605e <__aeabi_dadd+0x57a>
   15f7a:	445c      	add	r4, fp
   15f7c:	455c      	cmp	r4, fp
   15f7e:	4192      	sbcs	r2, r2
   15f80:	1859      	adds	r1, r3, r1
   15f82:	4252      	negs	r2, r2
   15f84:	1889      	adds	r1, r1, r2
   15f86:	4655      	mov	r5, sl
   15f88:	e6a4      	b.n	15cd4 <__aeabi_dadd+0x1f0>
   15f8a:	2800      	cmp	r0, #0
   15f8c:	d14d      	bne.n	1602a <__aeabi_dadd+0x546>
   15f8e:	4659      	mov	r1, fp
   15f90:	4319      	orrs	r1, r3
   15f92:	d100      	bne.n	15f96 <__aeabi_dadd+0x4b2>
   15f94:	e094      	b.n	160c0 <__aeabi_dadd+0x5dc>
   15f96:	1c19      	adds	r1, r3, #0
   15f98:	465c      	mov	r4, fp
   15f9a:	4666      	mov	r6, ip
   15f9c:	4d60      	ldr	r5, [pc, #384]	; (16120 <__aeabi_dadd+0x63c>)
   15f9e:	e5ca      	b.n	15b36 <__aeabi_dadd+0x52>
   15fa0:	430c      	orrs	r4, r1
   15fa2:	1e61      	subs	r1, r4, #1
   15fa4:	418c      	sbcs	r4, r1
   15fa6:	b2e4      	uxtb	r4, r4
   15fa8:	2100      	movs	r1, #0
   15faa:	e75b      	b.n	15e64 <__aeabi_dadd+0x380>
   15fac:	1c05      	adds	r5, r0, #0
   15fae:	2100      	movs	r1, #0
   15fb0:	2400      	movs	r4, #0
   15fb2:	e652      	b.n	15c5a <__aeabi_dadd+0x176>
   15fb4:	4d5a      	ldr	r5, [pc, #360]	; (16120 <__aeabi_dadd+0x63c>)
   15fb6:	45aa      	cmp	sl, r5
   15fb8:	d054      	beq.n	16064 <__aeabi_dadd+0x580>
   15fba:	4255      	negs	r5, r2
   15fbc:	2280      	movs	r2, #128	; 0x80
   15fbe:	0410      	lsls	r0, r2, #16
   15fc0:	4301      	orrs	r1, r0
   15fc2:	2d38      	cmp	r5, #56	; 0x38
   15fc4:	dd00      	ble.n	15fc8 <__aeabi_dadd+0x4e4>
   15fc6:	e081      	b.n	160cc <__aeabi_dadd+0x5e8>
   15fc8:	2d1f      	cmp	r5, #31
   15fca:	dd00      	ble.n	15fce <__aeabi_dadd+0x4ea>
   15fcc:	e092      	b.n	160f4 <__aeabi_dadd+0x610>
   15fce:	2220      	movs	r2, #32
   15fd0:	1b50      	subs	r0, r2, r5
   15fd2:	1c0a      	adds	r2, r1, #0
   15fd4:	4684      	mov	ip, r0
   15fd6:	4082      	lsls	r2, r0
   15fd8:	1c20      	adds	r0, r4, #0
   15fda:	40e8      	lsrs	r0, r5
   15fdc:	4302      	orrs	r2, r0
   15fde:	4690      	mov	r8, r2
   15fe0:	4662      	mov	r2, ip
   15fe2:	4094      	lsls	r4, r2
   15fe4:	1e60      	subs	r0, r4, #1
   15fe6:	4184      	sbcs	r4, r0
   15fe8:	4642      	mov	r2, r8
   15fea:	4314      	orrs	r4, r2
   15fec:	40e9      	lsrs	r1, r5
   15fee:	445c      	add	r4, fp
   15ff0:	455c      	cmp	r4, fp
   15ff2:	4192      	sbcs	r2, r2
   15ff4:	18cb      	adds	r3, r1, r3
   15ff6:	4252      	negs	r2, r2
   15ff8:	1899      	adds	r1, r3, r2
   15ffa:	4655      	mov	r5, sl
   15ffc:	e66a      	b.n	15cd4 <__aeabi_dadd+0x1f0>
   15ffe:	4658      	mov	r0, fp
   16000:	4318      	orrs	r0, r3
   16002:	d100      	bne.n	16006 <__aeabi_dadd+0x522>
   16004:	e597      	b.n	15b36 <__aeabi_dadd+0x52>
   16006:	4658      	mov	r0, fp
   16008:	1a27      	subs	r7, r4, r0
   1600a:	42bc      	cmp	r4, r7
   1600c:	4192      	sbcs	r2, r2
   1600e:	1ac8      	subs	r0, r1, r3
   16010:	4252      	negs	r2, r2
   16012:	1a80      	subs	r0, r0, r2
   16014:	0202      	lsls	r2, r0, #8
   16016:	d566      	bpl.n	160e6 <__aeabi_dadd+0x602>
   16018:	4658      	mov	r0, fp
   1601a:	1b04      	subs	r4, r0, r4
   1601c:	45a3      	cmp	fp, r4
   1601e:	4192      	sbcs	r2, r2
   16020:	1a59      	subs	r1, r3, r1
   16022:	4252      	negs	r2, r2
   16024:	1a89      	subs	r1, r1, r2
   16026:	4666      	mov	r6, ip
   16028:	e585      	b.n	15b36 <__aeabi_dadd+0x52>
   1602a:	4658      	mov	r0, fp
   1602c:	4318      	orrs	r0, r3
   1602e:	d033      	beq.n	16098 <__aeabi_dadd+0x5b4>
   16030:	0748      	lsls	r0, r1, #29
   16032:	08e4      	lsrs	r4, r4, #3
   16034:	4304      	orrs	r4, r0
   16036:	2080      	movs	r0, #128	; 0x80
   16038:	08c9      	lsrs	r1, r1, #3
   1603a:	0300      	lsls	r0, r0, #12
   1603c:	4201      	tst	r1, r0
   1603e:	d008      	beq.n	16052 <__aeabi_dadd+0x56e>
   16040:	08dd      	lsrs	r5, r3, #3
   16042:	4205      	tst	r5, r0
   16044:	d105      	bne.n	16052 <__aeabi_dadd+0x56e>
   16046:	4659      	mov	r1, fp
   16048:	08ca      	lsrs	r2, r1, #3
   1604a:	075c      	lsls	r4, r3, #29
   1604c:	4314      	orrs	r4, r2
   1604e:	1c29      	adds	r1, r5, #0
   16050:	4666      	mov	r6, ip
   16052:	0f63      	lsrs	r3, r4, #29
   16054:	00c9      	lsls	r1, r1, #3
   16056:	4319      	orrs	r1, r3
   16058:	00e4      	lsls	r4, r4, #3
   1605a:	4d31      	ldr	r5, [pc, #196]	; (16120 <__aeabi_dadd+0x63c>)
   1605c:	e56b      	b.n	15b36 <__aeabi_dadd+0x52>
   1605e:	4a30      	ldr	r2, [pc, #192]	; (16120 <__aeabi_dadd+0x63c>)
   16060:	4592      	cmp	sl, r2
   16062:	d1ae      	bne.n	15fc2 <__aeabi_dadd+0x4de>
   16064:	1c19      	adds	r1, r3, #0
   16066:	465c      	mov	r4, fp
   16068:	4655      	mov	r5, sl
   1606a:	e564      	b.n	15b36 <__aeabi_dadd+0x52>
   1606c:	2800      	cmp	r0, #0
   1606e:	d036      	beq.n	160de <__aeabi_dadd+0x5fa>
   16070:	4658      	mov	r0, fp
   16072:	4318      	orrs	r0, r3
   16074:	d010      	beq.n	16098 <__aeabi_dadd+0x5b4>
   16076:	2580      	movs	r5, #128	; 0x80
   16078:	0748      	lsls	r0, r1, #29
   1607a:	08e4      	lsrs	r4, r4, #3
   1607c:	08c9      	lsrs	r1, r1, #3
   1607e:	032d      	lsls	r5, r5, #12
   16080:	4304      	orrs	r4, r0
   16082:	4229      	tst	r1, r5
   16084:	d0e5      	beq.n	16052 <__aeabi_dadd+0x56e>
   16086:	08d8      	lsrs	r0, r3, #3
   16088:	4228      	tst	r0, r5
   1608a:	d1e2      	bne.n	16052 <__aeabi_dadd+0x56e>
   1608c:	465d      	mov	r5, fp
   1608e:	08ea      	lsrs	r2, r5, #3
   16090:	075c      	lsls	r4, r3, #29
   16092:	4314      	orrs	r4, r2
   16094:	1c01      	adds	r1, r0, #0
   16096:	e7dc      	b.n	16052 <__aeabi_dadd+0x56e>
   16098:	4d21      	ldr	r5, [pc, #132]	; (16120 <__aeabi_dadd+0x63c>)
   1609a:	e54c      	b.n	15b36 <__aeabi_dadd+0x52>
   1609c:	2300      	movs	r3, #0
   1609e:	e753      	b.n	15f48 <__aeabi_dadd+0x464>
   160a0:	1c3d      	adds	r5, r7, #0
   160a2:	3d20      	subs	r5, #32
   160a4:	1c0a      	adds	r2, r1, #0
   160a6:	40ea      	lsrs	r2, r5
   160a8:	1c15      	adds	r5, r2, #0
   160aa:	2f20      	cmp	r7, #32
   160ac:	d034      	beq.n	16118 <__aeabi_dadd+0x634>
   160ae:	2640      	movs	r6, #64	; 0x40
   160b0:	1bf7      	subs	r7, r6, r7
   160b2:	40b9      	lsls	r1, r7
   160b4:	430c      	orrs	r4, r1
   160b6:	1e61      	subs	r1, r4, #1
   160b8:	418c      	sbcs	r4, r1
   160ba:	432c      	orrs	r4, r5
   160bc:	2100      	movs	r1, #0
   160be:	e6d1      	b.n	15e64 <__aeabi_dadd+0x380>
   160c0:	2180      	movs	r1, #128	; 0x80
   160c2:	2700      	movs	r7, #0
   160c4:	03c9      	lsls	r1, r1, #15
   160c6:	4d16      	ldr	r5, [pc, #88]	; (16120 <__aeabi_dadd+0x63c>)
   160c8:	2400      	movs	r4, #0
   160ca:	e5c6      	b.n	15c5a <__aeabi_dadd+0x176>
   160cc:	430c      	orrs	r4, r1
   160ce:	1e61      	subs	r1, r4, #1
   160d0:	418c      	sbcs	r4, r1
   160d2:	b2e4      	uxtb	r4, r4
   160d4:	2100      	movs	r1, #0
   160d6:	e78a      	b.n	15fee <__aeabi_dadd+0x50a>
   160d8:	1c19      	adds	r1, r3, #0
   160da:	465c      	mov	r4, fp
   160dc:	e52b      	b.n	15b36 <__aeabi_dadd+0x52>
   160de:	1c19      	adds	r1, r3, #0
   160e0:	465c      	mov	r4, fp
   160e2:	4d0f      	ldr	r5, [pc, #60]	; (16120 <__aeabi_dadd+0x63c>)
   160e4:	e527      	b.n	15b36 <__aeabi_dadd+0x52>
   160e6:	1c03      	adds	r3, r0, #0
   160e8:	433b      	orrs	r3, r7
   160ea:	d100      	bne.n	160ee <__aeabi_dadd+0x60a>
   160ec:	e71c      	b.n	15f28 <__aeabi_dadd+0x444>
   160ee:	1c01      	adds	r1, r0, #0
   160f0:	1c3c      	adds	r4, r7, #0
   160f2:	e520      	b.n	15b36 <__aeabi_dadd+0x52>
   160f4:	2020      	movs	r0, #32
   160f6:	4240      	negs	r0, r0
   160f8:	1940      	adds	r0, r0, r5
   160fa:	1c0a      	adds	r2, r1, #0
   160fc:	40c2      	lsrs	r2, r0
   160fe:	4690      	mov	r8, r2
   16100:	2d20      	cmp	r5, #32
   16102:	d00b      	beq.n	1611c <__aeabi_dadd+0x638>
   16104:	2040      	movs	r0, #64	; 0x40
   16106:	1b45      	subs	r5, r0, r5
   16108:	40a9      	lsls	r1, r5
   1610a:	430c      	orrs	r4, r1
   1610c:	1e61      	subs	r1, r4, #1
   1610e:	418c      	sbcs	r4, r1
   16110:	4645      	mov	r5, r8
   16112:	432c      	orrs	r4, r5
   16114:	2100      	movs	r1, #0
   16116:	e76a      	b.n	15fee <__aeabi_dadd+0x50a>
   16118:	2100      	movs	r1, #0
   1611a:	e7cb      	b.n	160b4 <__aeabi_dadd+0x5d0>
   1611c:	2100      	movs	r1, #0
   1611e:	e7f4      	b.n	1610a <__aeabi_dadd+0x626>
   16120:	000007ff 	.word	0x000007ff
   16124:	ff7fffff 	.word	0xff7fffff

00016128 <__aeabi_ddiv>:
   16128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1612a:	4656      	mov	r6, sl
   1612c:	4644      	mov	r4, r8
   1612e:	465f      	mov	r7, fp
   16130:	464d      	mov	r5, r9
   16132:	b4f0      	push	{r4, r5, r6, r7}
   16134:	1c1f      	adds	r7, r3, #0
   16136:	030b      	lsls	r3, r1, #12
   16138:	0b1b      	lsrs	r3, r3, #12
   1613a:	4698      	mov	r8, r3
   1613c:	004b      	lsls	r3, r1, #1
   1613e:	b087      	sub	sp, #28
   16140:	1c04      	adds	r4, r0, #0
   16142:	4681      	mov	r9, r0
   16144:	0d5b      	lsrs	r3, r3, #21
   16146:	0fc8      	lsrs	r0, r1, #31
   16148:	1c16      	adds	r6, r2, #0
   1614a:	469a      	mov	sl, r3
   1614c:	9000      	str	r0, [sp, #0]
   1614e:	2b00      	cmp	r3, #0
   16150:	d051      	beq.n	161f6 <__aeabi_ddiv+0xce>
   16152:	4b6a      	ldr	r3, [pc, #424]	; (162fc <__aeabi_ddiv+0x1d4>)
   16154:	459a      	cmp	sl, r3
   16156:	d031      	beq.n	161bc <__aeabi_ddiv+0x94>
   16158:	2280      	movs	r2, #128	; 0x80
   1615a:	4641      	mov	r1, r8
   1615c:	0352      	lsls	r2, r2, #13
   1615e:	430a      	orrs	r2, r1
   16160:	0f63      	lsrs	r3, r4, #29
   16162:	00d2      	lsls	r2, r2, #3
   16164:	431a      	orrs	r2, r3
   16166:	4b66      	ldr	r3, [pc, #408]	; (16300 <__aeabi_ddiv+0x1d8>)
   16168:	4690      	mov	r8, r2
   1616a:	2500      	movs	r5, #0
   1616c:	00e2      	lsls	r2, r4, #3
   1616e:	4691      	mov	r9, r2
   16170:	449a      	add	sl, r3
   16172:	2400      	movs	r4, #0
   16174:	9502      	str	r5, [sp, #8]
   16176:	033b      	lsls	r3, r7, #12
   16178:	0b1b      	lsrs	r3, r3, #12
   1617a:	469b      	mov	fp, r3
   1617c:	0ffd      	lsrs	r5, r7, #31
   1617e:	007b      	lsls	r3, r7, #1
   16180:	1c31      	adds	r1, r6, #0
   16182:	0d5b      	lsrs	r3, r3, #21
   16184:	9501      	str	r5, [sp, #4]
   16186:	d060      	beq.n	1624a <__aeabi_ddiv+0x122>
   16188:	4a5c      	ldr	r2, [pc, #368]	; (162fc <__aeabi_ddiv+0x1d4>)
   1618a:	4293      	cmp	r3, r2
   1618c:	d054      	beq.n	16238 <__aeabi_ddiv+0x110>
   1618e:	2180      	movs	r1, #128	; 0x80
   16190:	4658      	mov	r0, fp
   16192:	0349      	lsls	r1, r1, #13
   16194:	4301      	orrs	r1, r0
   16196:	0f72      	lsrs	r2, r6, #29
   16198:	00c9      	lsls	r1, r1, #3
   1619a:	4311      	orrs	r1, r2
   1619c:	4a58      	ldr	r2, [pc, #352]	; (16300 <__aeabi_ddiv+0x1d8>)
   1619e:	468b      	mov	fp, r1
   161a0:	189b      	adds	r3, r3, r2
   161a2:	00f1      	lsls	r1, r6, #3
   161a4:	2000      	movs	r0, #0
   161a6:	9a00      	ldr	r2, [sp, #0]
   161a8:	4304      	orrs	r4, r0
   161aa:	406a      	eors	r2, r5
   161ac:	9203      	str	r2, [sp, #12]
   161ae:	2c0f      	cmp	r4, #15
   161b0:	d900      	bls.n	161b4 <__aeabi_ddiv+0x8c>
   161b2:	e0ad      	b.n	16310 <__aeabi_ddiv+0x1e8>
   161b4:	4e53      	ldr	r6, [pc, #332]	; (16304 <__aeabi_ddiv+0x1dc>)
   161b6:	00a4      	lsls	r4, r4, #2
   161b8:	5934      	ldr	r4, [r6, r4]
   161ba:	46a7      	mov	pc, r4
   161bc:	4640      	mov	r0, r8
   161be:	4304      	orrs	r4, r0
   161c0:	d16e      	bne.n	162a0 <__aeabi_ddiv+0x178>
   161c2:	2100      	movs	r1, #0
   161c4:	2502      	movs	r5, #2
   161c6:	2408      	movs	r4, #8
   161c8:	4688      	mov	r8, r1
   161ca:	4689      	mov	r9, r1
   161cc:	9502      	str	r5, [sp, #8]
   161ce:	e7d2      	b.n	16176 <__aeabi_ddiv+0x4e>
   161d0:	9c00      	ldr	r4, [sp, #0]
   161d2:	9802      	ldr	r0, [sp, #8]
   161d4:	46c3      	mov	fp, r8
   161d6:	4649      	mov	r1, r9
   161d8:	9401      	str	r4, [sp, #4]
   161da:	2802      	cmp	r0, #2
   161dc:	d064      	beq.n	162a8 <__aeabi_ddiv+0x180>
   161de:	2803      	cmp	r0, #3
   161e0:	d100      	bne.n	161e4 <__aeabi_ddiv+0xbc>
   161e2:	e2ab      	b.n	1673c <__aeabi_ddiv+0x614>
   161e4:	2801      	cmp	r0, #1
   161e6:	d000      	beq.n	161ea <__aeabi_ddiv+0xc2>
   161e8:	e238      	b.n	1665c <__aeabi_ddiv+0x534>
   161ea:	9a01      	ldr	r2, [sp, #4]
   161ec:	2400      	movs	r4, #0
   161ee:	4002      	ands	r2, r0
   161f0:	2500      	movs	r5, #0
   161f2:	46a1      	mov	r9, r4
   161f4:	e060      	b.n	162b8 <__aeabi_ddiv+0x190>
   161f6:	4643      	mov	r3, r8
   161f8:	4323      	orrs	r3, r4
   161fa:	d04a      	beq.n	16292 <__aeabi_ddiv+0x16a>
   161fc:	4640      	mov	r0, r8
   161fe:	2800      	cmp	r0, #0
   16200:	d100      	bne.n	16204 <__aeabi_ddiv+0xdc>
   16202:	e1c0      	b.n	16586 <__aeabi_ddiv+0x45e>
   16204:	f001 fa64 	bl	176d0 <__clzsi2>
   16208:	1e03      	subs	r3, r0, #0
   1620a:	2b27      	cmp	r3, #39	; 0x27
   1620c:	dd00      	ble.n	16210 <__aeabi_ddiv+0xe8>
   1620e:	e1b3      	b.n	16578 <__aeabi_ddiv+0x450>
   16210:	2128      	movs	r1, #40	; 0x28
   16212:	1a0d      	subs	r5, r1, r0
   16214:	1c21      	adds	r1, r4, #0
   16216:	3b08      	subs	r3, #8
   16218:	4642      	mov	r2, r8
   1621a:	40e9      	lsrs	r1, r5
   1621c:	409a      	lsls	r2, r3
   1621e:	1c0d      	adds	r5, r1, #0
   16220:	4315      	orrs	r5, r2
   16222:	1c22      	adds	r2, r4, #0
   16224:	409a      	lsls	r2, r3
   16226:	46a8      	mov	r8, r5
   16228:	4691      	mov	r9, r2
   1622a:	4b37      	ldr	r3, [pc, #220]	; (16308 <__aeabi_ddiv+0x1e0>)
   1622c:	2500      	movs	r5, #0
   1622e:	1a1b      	subs	r3, r3, r0
   16230:	469a      	mov	sl, r3
   16232:	2400      	movs	r4, #0
   16234:	9502      	str	r5, [sp, #8]
   16236:	e79e      	b.n	16176 <__aeabi_ddiv+0x4e>
   16238:	465a      	mov	r2, fp
   1623a:	4316      	orrs	r6, r2
   1623c:	2003      	movs	r0, #3
   1623e:	2e00      	cmp	r6, #0
   16240:	d1b1      	bne.n	161a6 <__aeabi_ddiv+0x7e>
   16242:	46b3      	mov	fp, r6
   16244:	2100      	movs	r1, #0
   16246:	2002      	movs	r0, #2
   16248:	e7ad      	b.n	161a6 <__aeabi_ddiv+0x7e>
   1624a:	465a      	mov	r2, fp
   1624c:	4332      	orrs	r2, r6
   1624e:	d01b      	beq.n	16288 <__aeabi_ddiv+0x160>
   16250:	465b      	mov	r3, fp
   16252:	2b00      	cmp	r3, #0
   16254:	d100      	bne.n	16258 <__aeabi_ddiv+0x130>
   16256:	e18a      	b.n	1656e <__aeabi_ddiv+0x446>
   16258:	4658      	mov	r0, fp
   1625a:	f001 fa39 	bl	176d0 <__clzsi2>
   1625e:	2827      	cmp	r0, #39	; 0x27
   16260:	dd00      	ble.n	16264 <__aeabi_ddiv+0x13c>
   16262:	e17d      	b.n	16560 <__aeabi_ddiv+0x438>
   16264:	2228      	movs	r2, #40	; 0x28
   16266:	1a17      	subs	r7, r2, r0
   16268:	1c01      	adds	r1, r0, #0
   1626a:	1c32      	adds	r2, r6, #0
   1626c:	3908      	subs	r1, #8
   1626e:	465b      	mov	r3, fp
   16270:	40fa      	lsrs	r2, r7
   16272:	408b      	lsls	r3, r1
   16274:	1c17      	adds	r7, r2, #0
   16276:	431f      	orrs	r7, r3
   16278:	1c33      	adds	r3, r6, #0
   1627a:	408b      	lsls	r3, r1
   1627c:	46bb      	mov	fp, r7
   1627e:	1c19      	adds	r1, r3, #0
   16280:	4b21      	ldr	r3, [pc, #132]	; (16308 <__aeabi_ddiv+0x1e0>)
   16282:	1a1b      	subs	r3, r3, r0
   16284:	2000      	movs	r0, #0
   16286:	e78e      	b.n	161a6 <__aeabi_ddiv+0x7e>
   16288:	2700      	movs	r7, #0
   1628a:	46bb      	mov	fp, r7
   1628c:	2100      	movs	r1, #0
   1628e:	2001      	movs	r0, #1
   16290:	e789      	b.n	161a6 <__aeabi_ddiv+0x7e>
   16292:	2000      	movs	r0, #0
   16294:	2501      	movs	r5, #1
   16296:	2404      	movs	r4, #4
   16298:	4680      	mov	r8, r0
   1629a:	4681      	mov	r9, r0
   1629c:	9502      	str	r5, [sp, #8]
   1629e:	e76a      	b.n	16176 <__aeabi_ddiv+0x4e>
   162a0:	2503      	movs	r5, #3
   162a2:	240c      	movs	r4, #12
   162a4:	9502      	str	r5, [sp, #8]
   162a6:	e766      	b.n	16176 <__aeabi_ddiv+0x4e>
   162a8:	9c01      	ldr	r4, [sp, #4]
   162aa:	9403      	str	r4, [sp, #12]
   162ac:	9d03      	ldr	r5, [sp, #12]
   162ae:	2201      	movs	r2, #1
   162b0:	402a      	ands	r2, r5
   162b2:	2400      	movs	r4, #0
   162b4:	4d11      	ldr	r5, [pc, #68]	; (162fc <__aeabi_ddiv+0x1d4>)
   162b6:	46a1      	mov	r9, r4
   162b8:	2000      	movs	r0, #0
   162ba:	2100      	movs	r1, #0
   162bc:	0324      	lsls	r4, r4, #12
   162be:	0b26      	lsrs	r6, r4, #12
   162c0:	0d0c      	lsrs	r4, r1, #20
   162c2:	0524      	lsls	r4, r4, #20
   162c4:	4b11      	ldr	r3, [pc, #68]	; (1630c <__aeabi_ddiv+0x1e4>)
   162c6:	4334      	orrs	r4, r6
   162c8:	052d      	lsls	r5, r5, #20
   162ca:	4023      	ands	r3, r4
   162cc:	432b      	orrs	r3, r5
   162ce:	005b      	lsls	r3, r3, #1
   162d0:	085b      	lsrs	r3, r3, #1
   162d2:	07d2      	lsls	r2, r2, #31
   162d4:	1c19      	adds	r1, r3, #0
   162d6:	4648      	mov	r0, r9
   162d8:	4311      	orrs	r1, r2
   162da:	b007      	add	sp, #28
   162dc:	bc3c      	pop	{r2, r3, r4, r5}
   162de:	4690      	mov	r8, r2
   162e0:	4699      	mov	r9, r3
   162e2:	46a2      	mov	sl, r4
   162e4:	46ab      	mov	fp, r5
   162e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162e8:	2200      	movs	r2, #0
   162ea:	2480      	movs	r4, #128	; 0x80
   162ec:	0324      	lsls	r4, r4, #12
   162ee:	4691      	mov	r9, r2
   162f0:	4d02      	ldr	r5, [pc, #8]	; (162fc <__aeabi_ddiv+0x1d4>)
   162f2:	e7e1      	b.n	162b8 <__aeabi_ddiv+0x190>
   162f4:	2400      	movs	r4, #0
   162f6:	2500      	movs	r5, #0
   162f8:	46a1      	mov	r9, r4
   162fa:	e7dd      	b.n	162b8 <__aeabi_ddiv+0x190>
   162fc:	000007ff 	.word	0x000007ff
   16300:	fffffc01 	.word	0xfffffc01
   16304:	000186f8 	.word	0x000186f8
   16308:	fffffc0d 	.word	0xfffffc0d
   1630c:	800fffff 	.word	0x800fffff
   16310:	4655      	mov	r5, sl
   16312:	1aed      	subs	r5, r5, r3
   16314:	9504      	str	r5, [sp, #16]
   16316:	45d8      	cmp	r8, fp
   16318:	d900      	bls.n	1631c <__aeabi_ddiv+0x1f4>
   1631a:	e153      	b.n	165c4 <__aeabi_ddiv+0x49c>
   1631c:	d100      	bne.n	16320 <__aeabi_ddiv+0x1f8>
   1631e:	e14e      	b.n	165be <__aeabi_ddiv+0x496>
   16320:	9c04      	ldr	r4, [sp, #16]
   16322:	2500      	movs	r5, #0
   16324:	3c01      	subs	r4, #1
   16326:	464e      	mov	r6, r9
   16328:	9404      	str	r4, [sp, #16]
   1632a:	4647      	mov	r7, r8
   1632c:	46a9      	mov	r9, r5
   1632e:	4658      	mov	r0, fp
   16330:	0203      	lsls	r3, r0, #8
   16332:	0e0c      	lsrs	r4, r1, #24
   16334:	431c      	orrs	r4, r3
   16336:	0209      	lsls	r1, r1, #8
   16338:	0c25      	lsrs	r5, r4, #16
   1633a:	0423      	lsls	r3, r4, #16
   1633c:	0c1b      	lsrs	r3, r3, #16
   1633e:	9100      	str	r1, [sp, #0]
   16340:	1c38      	adds	r0, r7, #0
   16342:	1c29      	adds	r1, r5, #0
   16344:	9301      	str	r3, [sp, #4]
   16346:	f7ff fa47 	bl	157d8 <__aeabi_uidiv>
   1634a:	9901      	ldr	r1, [sp, #4]
   1634c:	4683      	mov	fp, r0
   1634e:	4341      	muls	r1, r0
   16350:	1c38      	adds	r0, r7, #0
   16352:	468a      	mov	sl, r1
   16354:	1c29      	adds	r1, r5, #0
   16356:	f7ff fa83 	bl	15860 <__aeabi_uidivmod>
   1635a:	0c33      	lsrs	r3, r6, #16
   1635c:	0409      	lsls	r1, r1, #16
   1635e:	4319      	orrs	r1, r3
   16360:	458a      	cmp	sl, r1
   16362:	d90c      	bls.n	1637e <__aeabi_ddiv+0x256>
   16364:	465b      	mov	r3, fp
   16366:	1909      	adds	r1, r1, r4
   16368:	3b01      	subs	r3, #1
   1636a:	428c      	cmp	r4, r1
   1636c:	d900      	bls.n	16370 <__aeabi_ddiv+0x248>
   1636e:	e147      	b.n	16600 <__aeabi_ddiv+0x4d8>
   16370:	458a      	cmp	sl, r1
   16372:	d800      	bhi.n	16376 <__aeabi_ddiv+0x24e>
   16374:	e144      	b.n	16600 <__aeabi_ddiv+0x4d8>
   16376:	2202      	movs	r2, #2
   16378:	4252      	negs	r2, r2
   1637a:	4493      	add	fp, r2
   1637c:	1909      	adds	r1, r1, r4
   1637e:	4653      	mov	r3, sl
   16380:	1acb      	subs	r3, r1, r3
   16382:	1c18      	adds	r0, r3, #0
   16384:	1c29      	adds	r1, r5, #0
   16386:	4698      	mov	r8, r3
   16388:	f7ff fa26 	bl	157d8 <__aeabi_uidiv>
   1638c:	1c07      	adds	r7, r0, #0
   1638e:	9801      	ldr	r0, [sp, #4]
   16390:	1c29      	adds	r1, r5, #0
   16392:	4378      	muls	r0, r7
   16394:	4682      	mov	sl, r0
   16396:	4640      	mov	r0, r8
   16398:	f7ff fa62 	bl	15860 <__aeabi_uidivmod>
   1639c:	0436      	lsls	r6, r6, #16
   1639e:	040b      	lsls	r3, r1, #16
   163a0:	0c36      	lsrs	r6, r6, #16
   163a2:	4333      	orrs	r3, r6
   163a4:	459a      	cmp	sl, r3
   163a6:	d909      	bls.n	163bc <__aeabi_ddiv+0x294>
   163a8:	191b      	adds	r3, r3, r4
   163aa:	1e7a      	subs	r2, r7, #1
   163ac:	429c      	cmp	r4, r3
   163ae:	d900      	bls.n	163b2 <__aeabi_ddiv+0x28a>
   163b0:	e124      	b.n	165fc <__aeabi_ddiv+0x4d4>
   163b2:	459a      	cmp	sl, r3
   163b4:	d800      	bhi.n	163b8 <__aeabi_ddiv+0x290>
   163b6:	e121      	b.n	165fc <__aeabi_ddiv+0x4d4>
   163b8:	3f02      	subs	r7, #2
   163ba:	191b      	adds	r3, r3, r4
   163bc:	465e      	mov	r6, fp
   163be:	0432      	lsls	r2, r6, #16
   163c0:	4317      	orrs	r7, r2
   163c2:	0c38      	lsrs	r0, r7, #16
   163c4:	46bb      	mov	fp, r7
   163c6:	9e00      	ldr	r6, [sp, #0]
   163c8:	9f00      	ldr	r7, [sp, #0]
   163ca:	4651      	mov	r1, sl
   163cc:	0c3f      	lsrs	r7, r7, #16
   163ce:	0432      	lsls	r2, r6, #16
   163d0:	1a5b      	subs	r3, r3, r1
   163d2:	4659      	mov	r1, fp
   163d4:	46ba      	mov	sl, r7
   163d6:	0c12      	lsrs	r2, r2, #16
   163d8:	040f      	lsls	r7, r1, #16
   163da:	0c3f      	lsrs	r7, r7, #16
   163dc:	4690      	mov	r8, r2
   163de:	4651      	mov	r1, sl
   163e0:	437a      	muls	r2, r7
   163e2:	434f      	muls	r7, r1
   163e4:	4641      	mov	r1, r8
   163e6:	4341      	muls	r1, r0
   163e8:	4656      	mov	r6, sl
   163ea:	4370      	muls	r0, r6
   163ec:	19cf      	adds	r7, r1, r7
   163ee:	0c16      	lsrs	r6, r2, #16
   163f0:	19be      	adds	r6, r7, r6
   163f2:	42b1      	cmp	r1, r6
   163f4:	d902      	bls.n	163fc <__aeabi_ddiv+0x2d4>
   163f6:	2780      	movs	r7, #128	; 0x80
   163f8:	027f      	lsls	r7, r7, #9
   163fa:	19c0      	adds	r0, r0, r7
   163fc:	0c31      	lsrs	r1, r6, #16
   163fe:	0412      	lsls	r2, r2, #16
   16400:	0436      	lsls	r6, r6, #16
   16402:	0c12      	lsrs	r2, r2, #16
   16404:	1840      	adds	r0, r0, r1
   16406:	18b6      	adds	r6, r6, r2
   16408:	4283      	cmp	r3, r0
   1640a:	d200      	bcs.n	1640e <__aeabi_ddiv+0x2e6>
   1640c:	e0c4      	b.n	16598 <__aeabi_ddiv+0x470>
   1640e:	d100      	bne.n	16412 <__aeabi_ddiv+0x2ea>
   16410:	e0be      	b.n	16590 <__aeabi_ddiv+0x468>
   16412:	1a19      	subs	r1, r3, r0
   16414:	4648      	mov	r0, r9
   16416:	1b86      	subs	r6, r0, r6
   16418:	45b1      	cmp	r9, r6
   1641a:	41bf      	sbcs	r7, r7
   1641c:	427f      	negs	r7, r7
   1641e:	1bcf      	subs	r7, r1, r7
   16420:	42a7      	cmp	r7, r4
   16422:	d100      	bne.n	16426 <__aeabi_ddiv+0x2fe>
   16424:	e113      	b.n	1664e <__aeabi_ddiv+0x526>
   16426:	1c29      	adds	r1, r5, #0
   16428:	1c38      	adds	r0, r7, #0
   1642a:	f7ff f9d5 	bl	157d8 <__aeabi_uidiv>
   1642e:	9901      	ldr	r1, [sp, #4]
   16430:	9002      	str	r0, [sp, #8]
   16432:	4341      	muls	r1, r0
   16434:	1c38      	adds	r0, r7, #0
   16436:	4689      	mov	r9, r1
   16438:	1c29      	adds	r1, r5, #0
   1643a:	f7ff fa11 	bl	15860 <__aeabi_uidivmod>
   1643e:	0c33      	lsrs	r3, r6, #16
   16440:	0409      	lsls	r1, r1, #16
   16442:	4319      	orrs	r1, r3
   16444:	4589      	cmp	r9, r1
   16446:	d90c      	bls.n	16462 <__aeabi_ddiv+0x33a>
   16448:	9b02      	ldr	r3, [sp, #8]
   1644a:	1909      	adds	r1, r1, r4
   1644c:	3b01      	subs	r3, #1
   1644e:	428c      	cmp	r4, r1
   16450:	d900      	bls.n	16454 <__aeabi_ddiv+0x32c>
   16452:	e0ff      	b.n	16654 <__aeabi_ddiv+0x52c>
   16454:	4589      	cmp	r9, r1
   16456:	d800      	bhi.n	1645a <__aeabi_ddiv+0x332>
   16458:	e0fc      	b.n	16654 <__aeabi_ddiv+0x52c>
   1645a:	9f02      	ldr	r7, [sp, #8]
   1645c:	1909      	adds	r1, r1, r4
   1645e:	3f02      	subs	r7, #2
   16460:	9702      	str	r7, [sp, #8]
   16462:	464f      	mov	r7, r9
   16464:	1bcf      	subs	r7, r1, r7
   16466:	1c38      	adds	r0, r7, #0
   16468:	1c29      	adds	r1, r5, #0
   1646a:	9705      	str	r7, [sp, #20]
   1646c:	f7ff f9b4 	bl	157d8 <__aeabi_uidiv>
   16470:	1c07      	adds	r7, r0, #0
   16472:	9801      	ldr	r0, [sp, #4]
   16474:	1c29      	adds	r1, r5, #0
   16476:	4378      	muls	r0, r7
   16478:	4681      	mov	r9, r0
   1647a:	9805      	ldr	r0, [sp, #20]
   1647c:	f7ff f9f0 	bl	15860 <__aeabi_uidivmod>
   16480:	0436      	lsls	r6, r6, #16
   16482:	0409      	lsls	r1, r1, #16
   16484:	0c36      	lsrs	r6, r6, #16
   16486:	430e      	orrs	r6, r1
   16488:	45b1      	cmp	r9, r6
   1648a:	d909      	bls.n	164a0 <__aeabi_ddiv+0x378>
   1648c:	1936      	adds	r6, r6, r4
   1648e:	1e7b      	subs	r3, r7, #1
   16490:	42b4      	cmp	r4, r6
   16492:	d900      	bls.n	16496 <__aeabi_ddiv+0x36e>
   16494:	e0e0      	b.n	16658 <__aeabi_ddiv+0x530>
   16496:	45b1      	cmp	r9, r6
   16498:	d800      	bhi.n	1649c <__aeabi_ddiv+0x374>
   1649a:	e0dd      	b.n	16658 <__aeabi_ddiv+0x530>
   1649c:	3f02      	subs	r7, #2
   1649e:	1936      	adds	r6, r6, r4
   164a0:	9d02      	ldr	r5, [sp, #8]
   164a2:	4649      	mov	r1, r9
   164a4:	1a76      	subs	r6, r6, r1
   164a6:	0429      	lsls	r1, r5, #16
   164a8:	4339      	orrs	r1, r7
   164aa:	040b      	lsls	r3, r1, #16
   164ac:	4657      	mov	r7, sl
   164ae:	0c0a      	lsrs	r2, r1, #16
   164b0:	0c1b      	lsrs	r3, r3, #16
   164b2:	4640      	mov	r0, r8
   164b4:	4645      	mov	r5, r8
   164b6:	4358      	muls	r0, r3
   164b8:	4355      	muls	r5, r2
   164ba:	437b      	muls	r3, r7
   164bc:	437a      	muls	r2, r7
   164be:	18eb      	adds	r3, r5, r3
   164c0:	0c07      	lsrs	r7, r0, #16
   164c2:	19db      	adds	r3, r3, r7
   164c4:	429d      	cmp	r5, r3
   164c6:	d902      	bls.n	164ce <__aeabi_ddiv+0x3a6>
   164c8:	2580      	movs	r5, #128	; 0x80
   164ca:	026d      	lsls	r5, r5, #9
   164cc:	1952      	adds	r2, r2, r5
   164ce:	0c1d      	lsrs	r5, r3, #16
   164d0:	0400      	lsls	r0, r0, #16
   164d2:	041b      	lsls	r3, r3, #16
   164d4:	0c00      	lsrs	r0, r0, #16
   164d6:	1952      	adds	r2, r2, r5
   164d8:	181b      	adds	r3, r3, r0
   164da:	4296      	cmp	r6, r2
   164dc:	d335      	bcc.n	1654a <__aeabi_ddiv+0x422>
   164de:	d100      	bne.n	164e2 <__aeabi_ddiv+0x3ba>
   164e0:	e0fc      	b.n	166dc <__aeabi_ddiv+0x5b4>
   164e2:	2301      	movs	r3, #1
   164e4:	4319      	orrs	r1, r3
   164e6:	9e04      	ldr	r6, [sp, #16]
   164e8:	4f99      	ldr	r7, [pc, #612]	; (16750 <__aeabi_ddiv+0x628>)
   164ea:	19f5      	adds	r5, r6, r7
   164ec:	2d00      	cmp	r5, #0
   164ee:	dc00      	bgt.n	164f2 <__aeabi_ddiv+0x3ca>
   164f0:	e0a1      	b.n	16636 <__aeabi_ddiv+0x50e>
   164f2:	0748      	lsls	r0, r1, #29
   164f4:	d009      	beq.n	1650a <__aeabi_ddiv+0x3e2>
   164f6:	230f      	movs	r3, #15
   164f8:	400b      	ands	r3, r1
   164fa:	2b04      	cmp	r3, #4
   164fc:	d005      	beq.n	1650a <__aeabi_ddiv+0x3e2>
   164fe:	1d0b      	adds	r3, r1, #4
   16500:	428b      	cmp	r3, r1
   16502:	4189      	sbcs	r1, r1
   16504:	4249      	negs	r1, r1
   16506:	448b      	add	fp, r1
   16508:	1c19      	adds	r1, r3, #0
   1650a:	465a      	mov	r2, fp
   1650c:	01d2      	lsls	r2, r2, #7
   1650e:	d507      	bpl.n	16520 <__aeabi_ddiv+0x3f8>
   16510:	4b90      	ldr	r3, [pc, #576]	; (16754 <__aeabi_ddiv+0x62c>)
   16512:	465c      	mov	r4, fp
   16514:	9e04      	ldr	r6, [sp, #16]
   16516:	2780      	movs	r7, #128	; 0x80
   16518:	401c      	ands	r4, r3
   1651a:	00ff      	lsls	r7, r7, #3
   1651c:	46a3      	mov	fp, r4
   1651e:	19f5      	adds	r5, r6, r7
   16520:	4b8d      	ldr	r3, [pc, #564]	; (16758 <__aeabi_ddiv+0x630>)
   16522:	429d      	cmp	r5, r3
   16524:	dd7a      	ble.n	1661c <__aeabi_ddiv+0x4f4>
   16526:	9c03      	ldr	r4, [sp, #12]
   16528:	2201      	movs	r2, #1
   1652a:	4022      	ands	r2, r4
   1652c:	2400      	movs	r4, #0
   1652e:	4d8b      	ldr	r5, [pc, #556]	; (1675c <__aeabi_ddiv+0x634>)
   16530:	46a1      	mov	r9, r4
   16532:	e6c1      	b.n	162b8 <__aeabi_ddiv+0x190>
   16534:	2480      	movs	r4, #128	; 0x80
   16536:	0324      	lsls	r4, r4, #12
   16538:	4647      	mov	r7, r8
   1653a:	4227      	tst	r7, r4
   1653c:	d14c      	bne.n	165d8 <__aeabi_ddiv+0x4b0>
   1653e:	433c      	orrs	r4, r7
   16540:	0324      	lsls	r4, r4, #12
   16542:	0b24      	lsrs	r4, r4, #12
   16544:	9a00      	ldr	r2, [sp, #0]
   16546:	4d85      	ldr	r5, [pc, #532]	; (1675c <__aeabi_ddiv+0x634>)
   16548:	e6b6      	b.n	162b8 <__aeabi_ddiv+0x190>
   1654a:	1936      	adds	r6, r6, r4
   1654c:	1e48      	subs	r0, r1, #1
   1654e:	42b4      	cmp	r4, r6
   16550:	d95e      	bls.n	16610 <__aeabi_ddiv+0x4e8>
   16552:	1c01      	adds	r1, r0, #0
   16554:	4296      	cmp	r6, r2
   16556:	d1c4      	bne.n	164e2 <__aeabi_ddiv+0x3ba>
   16558:	9e00      	ldr	r6, [sp, #0]
   1655a:	429e      	cmp	r6, r3
   1655c:	d1c1      	bne.n	164e2 <__aeabi_ddiv+0x3ba>
   1655e:	e7c2      	b.n	164e6 <__aeabi_ddiv+0x3be>
   16560:	1c03      	adds	r3, r0, #0
   16562:	3b28      	subs	r3, #40	; 0x28
   16564:	1c31      	adds	r1, r6, #0
   16566:	4099      	lsls	r1, r3
   16568:	468b      	mov	fp, r1
   1656a:	2100      	movs	r1, #0
   1656c:	e688      	b.n	16280 <__aeabi_ddiv+0x158>
   1656e:	1c30      	adds	r0, r6, #0
   16570:	f001 f8ae 	bl	176d0 <__clzsi2>
   16574:	3020      	adds	r0, #32
   16576:	e672      	b.n	1625e <__aeabi_ddiv+0x136>
   16578:	3b28      	subs	r3, #40	; 0x28
   1657a:	1c21      	adds	r1, r4, #0
   1657c:	4099      	lsls	r1, r3
   1657e:	2200      	movs	r2, #0
   16580:	4688      	mov	r8, r1
   16582:	4691      	mov	r9, r2
   16584:	e651      	b.n	1622a <__aeabi_ddiv+0x102>
   16586:	1c20      	adds	r0, r4, #0
   16588:	f001 f8a2 	bl	176d0 <__clzsi2>
   1658c:	3020      	adds	r0, #32
   1658e:	e63b      	b.n	16208 <__aeabi_ddiv+0xe0>
   16590:	2100      	movs	r1, #0
   16592:	45b1      	cmp	r9, r6
   16594:	d300      	bcc.n	16598 <__aeabi_ddiv+0x470>
   16596:	e73d      	b.n	16414 <__aeabi_ddiv+0x2ec>
   16598:	9f00      	ldr	r7, [sp, #0]
   1659a:	465a      	mov	r2, fp
   1659c:	44b9      	add	r9, r7
   1659e:	45b9      	cmp	r9, r7
   165a0:	41bf      	sbcs	r7, r7
   165a2:	427f      	negs	r7, r7
   165a4:	193f      	adds	r7, r7, r4
   165a6:	18fb      	adds	r3, r7, r3
   165a8:	3a01      	subs	r2, #1
   165aa:	429c      	cmp	r4, r3
   165ac:	d21e      	bcs.n	165ec <__aeabi_ddiv+0x4c4>
   165ae:	4298      	cmp	r0, r3
   165b0:	d900      	bls.n	165b4 <__aeabi_ddiv+0x48c>
   165b2:	e07e      	b.n	166b2 <__aeabi_ddiv+0x58a>
   165b4:	d100      	bne.n	165b8 <__aeabi_ddiv+0x490>
   165b6:	e0b5      	b.n	16724 <__aeabi_ddiv+0x5fc>
   165b8:	1a19      	subs	r1, r3, r0
   165ba:	4693      	mov	fp, r2
   165bc:	e72a      	b.n	16414 <__aeabi_ddiv+0x2ec>
   165be:	4589      	cmp	r9, r1
   165c0:	d800      	bhi.n	165c4 <__aeabi_ddiv+0x49c>
   165c2:	e6ad      	b.n	16320 <__aeabi_ddiv+0x1f8>
   165c4:	4648      	mov	r0, r9
   165c6:	4646      	mov	r6, r8
   165c8:	4642      	mov	r2, r8
   165ca:	0877      	lsrs	r7, r6, #1
   165cc:	07d3      	lsls	r3, r2, #31
   165ce:	0846      	lsrs	r6, r0, #1
   165d0:	07c0      	lsls	r0, r0, #31
   165d2:	431e      	orrs	r6, r3
   165d4:	4681      	mov	r9, r0
   165d6:	e6aa      	b.n	1632e <__aeabi_ddiv+0x206>
   165d8:	4658      	mov	r0, fp
   165da:	4220      	tst	r0, r4
   165dc:	d112      	bne.n	16604 <__aeabi_ddiv+0x4dc>
   165de:	4304      	orrs	r4, r0
   165e0:	0324      	lsls	r4, r4, #12
   165e2:	1c2a      	adds	r2, r5, #0
   165e4:	0b24      	lsrs	r4, r4, #12
   165e6:	4689      	mov	r9, r1
   165e8:	4d5c      	ldr	r5, [pc, #368]	; (1675c <__aeabi_ddiv+0x634>)
   165ea:	e665      	b.n	162b8 <__aeabi_ddiv+0x190>
   165ec:	42a3      	cmp	r3, r4
   165ee:	d1e3      	bne.n	165b8 <__aeabi_ddiv+0x490>
   165f0:	9f00      	ldr	r7, [sp, #0]
   165f2:	454f      	cmp	r7, r9
   165f4:	d9db      	bls.n	165ae <__aeabi_ddiv+0x486>
   165f6:	1a21      	subs	r1, r4, r0
   165f8:	4693      	mov	fp, r2
   165fa:	e70b      	b.n	16414 <__aeabi_ddiv+0x2ec>
   165fc:	1c17      	adds	r7, r2, #0
   165fe:	e6dd      	b.n	163bc <__aeabi_ddiv+0x294>
   16600:	469b      	mov	fp, r3
   16602:	e6bc      	b.n	1637e <__aeabi_ddiv+0x256>
   16604:	433c      	orrs	r4, r7
   16606:	0324      	lsls	r4, r4, #12
   16608:	0b24      	lsrs	r4, r4, #12
   1660a:	9a00      	ldr	r2, [sp, #0]
   1660c:	4d53      	ldr	r5, [pc, #332]	; (1675c <__aeabi_ddiv+0x634>)
   1660e:	e653      	b.n	162b8 <__aeabi_ddiv+0x190>
   16610:	42b2      	cmp	r2, r6
   16612:	d859      	bhi.n	166c8 <__aeabi_ddiv+0x5a0>
   16614:	d100      	bne.n	16618 <__aeabi_ddiv+0x4f0>
   16616:	e08a      	b.n	1672e <__aeabi_ddiv+0x606>
   16618:	1c01      	adds	r1, r0, #0
   1661a:	e762      	b.n	164e2 <__aeabi_ddiv+0x3ba>
   1661c:	465f      	mov	r7, fp
   1661e:	08c9      	lsrs	r1, r1, #3
   16620:	077b      	lsls	r3, r7, #29
   16622:	9e03      	ldr	r6, [sp, #12]
   16624:	430b      	orrs	r3, r1
   16626:	027c      	lsls	r4, r7, #9
   16628:	056d      	lsls	r5, r5, #21
   1662a:	2201      	movs	r2, #1
   1662c:	4699      	mov	r9, r3
   1662e:	0b24      	lsrs	r4, r4, #12
   16630:	0d6d      	lsrs	r5, r5, #21
   16632:	4032      	ands	r2, r6
   16634:	e640      	b.n	162b8 <__aeabi_ddiv+0x190>
   16636:	4b4a      	ldr	r3, [pc, #296]	; (16760 <__aeabi_ddiv+0x638>)
   16638:	9f04      	ldr	r7, [sp, #16]
   1663a:	1bdb      	subs	r3, r3, r7
   1663c:	2b38      	cmp	r3, #56	; 0x38
   1663e:	dd10      	ble.n	16662 <__aeabi_ddiv+0x53a>
   16640:	9c03      	ldr	r4, [sp, #12]
   16642:	2201      	movs	r2, #1
   16644:	4022      	ands	r2, r4
   16646:	2400      	movs	r4, #0
   16648:	2500      	movs	r5, #0
   1664a:	46a1      	mov	r9, r4
   1664c:	e634      	b.n	162b8 <__aeabi_ddiv+0x190>
   1664e:	2101      	movs	r1, #1
   16650:	4249      	negs	r1, r1
   16652:	e748      	b.n	164e6 <__aeabi_ddiv+0x3be>
   16654:	9302      	str	r3, [sp, #8]
   16656:	e704      	b.n	16462 <__aeabi_ddiv+0x33a>
   16658:	1c1f      	adds	r7, r3, #0
   1665a:	e721      	b.n	164a0 <__aeabi_ddiv+0x378>
   1665c:	9c01      	ldr	r4, [sp, #4]
   1665e:	9403      	str	r4, [sp, #12]
   16660:	e741      	b.n	164e6 <__aeabi_ddiv+0x3be>
   16662:	2b1f      	cmp	r3, #31
   16664:	dc40      	bgt.n	166e8 <__aeabi_ddiv+0x5c0>
   16666:	483f      	ldr	r0, [pc, #252]	; (16764 <__aeabi_ddiv+0x63c>)
   16668:	9f04      	ldr	r7, [sp, #16]
   1666a:	1c0c      	adds	r4, r1, #0
   1666c:	183a      	adds	r2, r7, r0
   1666e:	4658      	mov	r0, fp
   16670:	4091      	lsls	r1, r2
   16672:	40dc      	lsrs	r4, r3
   16674:	4090      	lsls	r0, r2
   16676:	4320      	orrs	r0, r4
   16678:	1c0a      	adds	r2, r1, #0
   1667a:	1e51      	subs	r1, r2, #1
   1667c:	418a      	sbcs	r2, r1
   1667e:	1c01      	adds	r1, r0, #0
   16680:	4311      	orrs	r1, r2
   16682:	465a      	mov	r2, fp
   16684:	40da      	lsrs	r2, r3
   16686:	1c13      	adds	r3, r2, #0
   16688:	0748      	lsls	r0, r1, #29
   1668a:	d009      	beq.n	166a0 <__aeabi_ddiv+0x578>
   1668c:	220f      	movs	r2, #15
   1668e:	400a      	ands	r2, r1
   16690:	2a04      	cmp	r2, #4
   16692:	d005      	beq.n	166a0 <__aeabi_ddiv+0x578>
   16694:	1d0a      	adds	r2, r1, #4
   16696:	428a      	cmp	r2, r1
   16698:	4189      	sbcs	r1, r1
   1669a:	4249      	negs	r1, r1
   1669c:	185b      	adds	r3, r3, r1
   1669e:	1c11      	adds	r1, r2, #0
   166a0:	021a      	lsls	r2, r3, #8
   166a2:	d534      	bpl.n	1670e <__aeabi_ddiv+0x5e6>
   166a4:	9c03      	ldr	r4, [sp, #12]
   166a6:	2201      	movs	r2, #1
   166a8:	4022      	ands	r2, r4
   166aa:	2400      	movs	r4, #0
   166ac:	2501      	movs	r5, #1
   166ae:	46a1      	mov	r9, r4
   166b0:	e602      	b.n	162b8 <__aeabi_ddiv+0x190>
   166b2:	9f00      	ldr	r7, [sp, #0]
   166b4:	2102      	movs	r1, #2
   166b6:	4249      	negs	r1, r1
   166b8:	44b9      	add	r9, r7
   166ba:	448b      	add	fp, r1
   166bc:	45b9      	cmp	r9, r7
   166be:	4189      	sbcs	r1, r1
   166c0:	4249      	negs	r1, r1
   166c2:	1909      	adds	r1, r1, r4
   166c4:	18cb      	adds	r3, r1, r3
   166c6:	e6a4      	b.n	16412 <__aeabi_ddiv+0x2ea>
   166c8:	9d00      	ldr	r5, [sp, #0]
   166ca:	1e88      	subs	r0, r1, #2
   166cc:	0069      	lsls	r1, r5, #1
   166ce:	42a9      	cmp	r1, r5
   166d0:	41ad      	sbcs	r5, r5
   166d2:	426d      	negs	r5, r5
   166d4:	192c      	adds	r4, r5, r4
   166d6:	1936      	adds	r6, r6, r4
   166d8:	9100      	str	r1, [sp, #0]
   166da:	e73a      	b.n	16552 <__aeabi_ddiv+0x42a>
   166dc:	2b00      	cmp	r3, #0
   166de:	d000      	beq.n	166e2 <__aeabi_ddiv+0x5ba>
   166e0:	e733      	b.n	1654a <__aeabi_ddiv+0x422>
   166e2:	2400      	movs	r4, #0
   166e4:	9400      	str	r4, [sp, #0]
   166e6:	e737      	b.n	16558 <__aeabi_ddiv+0x430>
   166e8:	4a1f      	ldr	r2, [pc, #124]	; (16768 <__aeabi_ddiv+0x640>)
   166ea:	9c04      	ldr	r4, [sp, #16]
   166ec:	465d      	mov	r5, fp
   166ee:	1b12      	subs	r2, r2, r4
   166f0:	40d5      	lsrs	r5, r2
   166f2:	1c2a      	adds	r2, r5, #0
   166f4:	2b20      	cmp	r3, #32
   166f6:	d01f      	beq.n	16738 <__aeabi_ddiv+0x610>
   166f8:	4e1c      	ldr	r6, [pc, #112]	; (1676c <__aeabi_ddiv+0x644>)
   166fa:	465f      	mov	r7, fp
   166fc:	19a3      	adds	r3, r4, r6
   166fe:	409f      	lsls	r7, r3
   16700:	1c3b      	adds	r3, r7, #0
   16702:	4319      	orrs	r1, r3
   16704:	1e4b      	subs	r3, r1, #1
   16706:	4199      	sbcs	r1, r3
   16708:	4311      	orrs	r1, r2
   1670a:	2300      	movs	r3, #0
   1670c:	e7bc      	b.n	16688 <__aeabi_ddiv+0x560>
   1670e:	075a      	lsls	r2, r3, #29
   16710:	08c9      	lsrs	r1, r1, #3
   16712:	430a      	orrs	r2, r1
   16714:	9f03      	ldr	r7, [sp, #12]
   16716:	4691      	mov	r9, r2
   16718:	025b      	lsls	r3, r3, #9
   1671a:	2201      	movs	r2, #1
   1671c:	0b1c      	lsrs	r4, r3, #12
   1671e:	403a      	ands	r2, r7
   16720:	2500      	movs	r5, #0
   16722:	e5c9      	b.n	162b8 <__aeabi_ddiv+0x190>
   16724:	454e      	cmp	r6, r9
   16726:	d8c4      	bhi.n	166b2 <__aeabi_ddiv+0x58a>
   16728:	4693      	mov	fp, r2
   1672a:	2100      	movs	r1, #0
   1672c:	e672      	b.n	16414 <__aeabi_ddiv+0x2ec>
   1672e:	9f00      	ldr	r7, [sp, #0]
   16730:	429f      	cmp	r7, r3
   16732:	d3c9      	bcc.n	166c8 <__aeabi_ddiv+0x5a0>
   16734:	1c01      	adds	r1, r0, #0
   16736:	e70f      	b.n	16558 <__aeabi_ddiv+0x430>
   16738:	2300      	movs	r3, #0
   1673a:	e7e2      	b.n	16702 <__aeabi_ddiv+0x5da>
   1673c:	2480      	movs	r4, #128	; 0x80
   1673e:	0324      	lsls	r4, r4, #12
   16740:	465f      	mov	r7, fp
   16742:	433c      	orrs	r4, r7
   16744:	0324      	lsls	r4, r4, #12
   16746:	0b24      	lsrs	r4, r4, #12
   16748:	9a01      	ldr	r2, [sp, #4]
   1674a:	4689      	mov	r9, r1
   1674c:	4d03      	ldr	r5, [pc, #12]	; (1675c <__aeabi_ddiv+0x634>)
   1674e:	e5b3      	b.n	162b8 <__aeabi_ddiv+0x190>
   16750:	000003ff 	.word	0x000003ff
   16754:	feffffff 	.word	0xfeffffff
   16758:	000007fe 	.word	0x000007fe
   1675c:	000007ff 	.word	0x000007ff
   16760:	fffffc02 	.word	0xfffffc02
   16764:	0000041e 	.word	0x0000041e
   16768:	fffffbe2 	.word	0xfffffbe2
   1676c:	0000043e 	.word	0x0000043e

00016770 <__eqdf2>:
   16770:	b5f0      	push	{r4, r5, r6, r7, lr}
   16772:	465f      	mov	r7, fp
   16774:	4656      	mov	r6, sl
   16776:	464d      	mov	r5, r9
   16778:	4644      	mov	r4, r8
   1677a:	b4f0      	push	{r4, r5, r6, r7}
   1677c:	1c0d      	adds	r5, r1, #0
   1677e:	1c04      	adds	r4, r0, #0
   16780:	4680      	mov	r8, r0
   16782:	0fe8      	lsrs	r0, r5, #31
   16784:	4681      	mov	r9, r0
   16786:	0318      	lsls	r0, r3, #12
   16788:	030f      	lsls	r7, r1, #12
   1678a:	0b00      	lsrs	r0, r0, #12
   1678c:	0b3f      	lsrs	r7, r7, #12
   1678e:	b083      	sub	sp, #12
   16790:	4684      	mov	ip, r0
   16792:	481b      	ldr	r0, [pc, #108]	; (16800 <__eqdf2+0x90>)
   16794:	9700      	str	r7, [sp, #0]
   16796:	0049      	lsls	r1, r1, #1
   16798:	005e      	lsls	r6, r3, #1
   1679a:	0fdf      	lsrs	r7, r3, #31
   1679c:	0d49      	lsrs	r1, r1, #21
   1679e:	4692      	mov	sl, r2
   167a0:	0d76      	lsrs	r6, r6, #21
   167a2:	46bb      	mov	fp, r7
   167a4:	4281      	cmp	r1, r0
   167a6:	d00c      	beq.n	167c2 <__eqdf2+0x52>
   167a8:	4815      	ldr	r0, [pc, #84]	; (16800 <__eqdf2+0x90>)
   167aa:	4286      	cmp	r6, r0
   167ac:	d010      	beq.n	167d0 <__eqdf2+0x60>
   167ae:	2001      	movs	r0, #1
   167b0:	42b1      	cmp	r1, r6
   167b2:	d015      	beq.n	167e0 <__eqdf2+0x70>
   167b4:	b003      	add	sp, #12
   167b6:	bc3c      	pop	{r2, r3, r4, r5}
   167b8:	4690      	mov	r8, r2
   167ba:	4699      	mov	r9, r3
   167bc:	46a2      	mov	sl, r4
   167be:	46ab      	mov	fp, r5
   167c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167c2:	9f00      	ldr	r7, [sp, #0]
   167c4:	2001      	movs	r0, #1
   167c6:	4327      	orrs	r7, r4
   167c8:	d1f4      	bne.n	167b4 <__eqdf2+0x44>
   167ca:	480d      	ldr	r0, [pc, #52]	; (16800 <__eqdf2+0x90>)
   167cc:	4286      	cmp	r6, r0
   167ce:	d1ee      	bne.n	167ae <__eqdf2+0x3e>
   167d0:	4660      	mov	r0, ip
   167d2:	4302      	orrs	r2, r0
   167d4:	2001      	movs	r0, #1
   167d6:	2a00      	cmp	r2, #0
   167d8:	d1ec      	bne.n	167b4 <__eqdf2+0x44>
   167da:	2001      	movs	r0, #1
   167dc:	42b1      	cmp	r1, r6
   167de:	d1e9      	bne.n	167b4 <__eqdf2+0x44>
   167e0:	9b00      	ldr	r3, [sp, #0]
   167e2:	4563      	cmp	r3, ip
   167e4:	d1e6      	bne.n	167b4 <__eqdf2+0x44>
   167e6:	45d0      	cmp	r8, sl
   167e8:	d1e4      	bne.n	167b4 <__eqdf2+0x44>
   167ea:	45d9      	cmp	r9, fp
   167ec:	d006      	beq.n	167fc <__eqdf2+0x8c>
   167ee:	2900      	cmp	r1, #0
   167f0:	d1e0      	bne.n	167b4 <__eqdf2+0x44>
   167f2:	431c      	orrs	r4, r3
   167f4:	1c20      	adds	r0, r4, #0
   167f6:	1e44      	subs	r4, r0, #1
   167f8:	41a0      	sbcs	r0, r4
   167fa:	e7db      	b.n	167b4 <__eqdf2+0x44>
   167fc:	2000      	movs	r0, #0
   167fe:	e7d9      	b.n	167b4 <__eqdf2+0x44>
   16800:	000007ff 	.word	0x000007ff

00016804 <__gedf2>:
   16804:	b5f0      	push	{r4, r5, r6, r7, lr}
   16806:	465f      	mov	r7, fp
   16808:	4656      	mov	r6, sl
   1680a:	464d      	mov	r5, r9
   1680c:	4644      	mov	r4, r8
   1680e:	b4f0      	push	{r4, r5, r6, r7}
   16810:	0fcd      	lsrs	r5, r1, #31
   16812:	0fde      	lsrs	r6, r3, #31
   16814:	46ac      	mov	ip, r5
   16816:	031d      	lsls	r5, r3, #12
   16818:	0b2d      	lsrs	r5, r5, #12
   1681a:	46b1      	mov	r9, r6
   1681c:	4e37      	ldr	r6, [pc, #220]	; (168fc <__gedf2+0xf8>)
   1681e:	030f      	lsls	r7, r1, #12
   16820:	004c      	lsls	r4, r1, #1
   16822:	46ab      	mov	fp, r5
   16824:	005d      	lsls	r5, r3, #1
   16826:	4680      	mov	r8, r0
   16828:	0b3f      	lsrs	r7, r7, #12
   1682a:	0d64      	lsrs	r4, r4, #21
   1682c:	4692      	mov	sl, r2
   1682e:	0d6d      	lsrs	r5, r5, #21
   16830:	42b4      	cmp	r4, r6
   16832:	d032      	beq.n	1689a <__gedf2+0x96>
   16834:	4e31      	ldr	r6, [pc, #196]	; (168fc <__gedf2+0xf8>)
   16836:	42b5      	cmp	r5, r6
   16838:	d035      	beq.n	168a6 <__gedf2+0xa2>
   1683a:	2c00      	cmp	r4, #0
   1683c:	d10e      	bne.n	1685c <__gedf2+0x58>
   1683e:	4338      	orrs	r0, r7
   16840:	4241      	negs	r1, r0
   16842:	4141      	adcs	r1, r0
   16844:	1c08      	adds	r0, r1, #0
   16846:	2d00      	cmp	r5, #0
   16848:	d00b      	beq.n	16862 <__gedf2+0x5e>
   1684a:	2900      	cmp	r1, #0
   1684c:	d119      	bne.n	16882 <__gedf2+0x7e>
   1684e:	45cc      	cmp	ip, r9
   16850:	d02d      	beq.n	168ae <__gedf2+0xaa>
   16852:	4665      	mov	r5, ip
   16854:	4268      	negs	r0, r5
   16856:	2301      	movs	r3, #1
   16858:	4318      	orrs	r0, r3
   1685a:	e018      	b.n	1688e <__gedf2+0x8a>
   1685c:	2d00      	cmp	r5, #0
   1685e:	d1f6      	bne.n	1684e <__gedf2+0x4a>
   16860:	1c28      	adds	r0, r5, #0
   16862:	4659      	mov	r1, fp
   16864:	430a      	orrs	r2, r1
   16866:	4253      	negs	r3, r2
   16868:	4153      	adcs	r3, r2
   1686a:	2800      	cmp	r0, #0
   1686c:	d106      	bne.n	1687c <__gedf2+0x78>
   1686e:	2b00      	cmp	r3, #0
   16870:	d0ed      	beq.n	1684e <__gedf2+0x4a>
   16872:	4663      	mov	r3, ip
   16874:	4258      	negs	r0, r3
   16876:	2301      	movs	r3, #1
   16878:	4318      	orrs	r0, r3
   1687a:	e008      	b.n	1688e <__gedf2+0x8a>
   1687c:	2000      	movs	r0, #0
   1687e:	2b00      	cmp	r3, #0
   16880:	d105      	bne.n	1688e <__gedf2+0x8a>
   16882:	464a      	mov	r2, r9
   16884:	4250      	negs	r0, r2
   16886:	4150      	adcs	r0, r2
   16888:	4240      	negs	r0, r0
   1688a:	2301      	movs	r3, #1
   1688c:	4318      	orrs	r0, r3
   1688e:	bc3c      	pop	{r2, r3, r4, r5}
   16890:	4690      	mov	r8, r2
   16892:	4699      	mov	r9, r3
   16894:	46a2      	mov	sl, r4
   16896:	46ab      	mov	fp, r5
   16898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1689a:	1c3e      	adds	r6, r7, #0
   1689c:	4306      	orrs	r6, r0
   1689e:	d0c9      	beq.n	16834 <__gedf2+0x30>
   168a0:	2002      	movs	r0, #2
   168a2:	4240      	negs	r0, r0
   168a4:	e7f3      	b.n	1688e <__gedf2+0x8a>
   168a6:	465e      	mov	r6, fp
   168a8:	4316      	orrs	r6, r2
   168aa:	d0c6      	beq.n	1683a <__gedf2+0x36>
   168ac:	e7f8      	b.n	168a0 <__gedf2+0x9c>
   168ae:	42ac      	cmp	r4, r5
   168b0:	dc07      	bgt.n	168c2 <__gedf2+0xbe>
   168b2:	da0b      	bge.n	168cc <__gedf2+0xc8>
   168b4:	4661      	mov	r1, ip
   168b6:	4248      	negs	r0, r1
   168b8:	4148      	adcs	r0, r1
   168ba:	4240      	negs	r0, r0
   168bc:	2301      	movs	r3, #1
   168be:	4318      	orrs	r0, r3
   168c0:	e7e5      	b.n	1688e <__gedf2+0x8a>
   168c2:	4666      	mov	r6, ip
   168c4:	4270      	negs	r0, r6
   168c6:	2301      	movs	r3, #1
   168c8:	4318      	orrs	r0, r3
   168ca:	e7e0      	b.n	1688e <__gedf2+0x8a>
   168cc:	455f      	cmp	r7, fp
   168ce:	d80a      	bhi.n	168e6 <__gedf2+0xe2>
   168d0:	d00e      	beq.n	168f0 <__gedf2+0xec>
   168d2:	2000      	movs	r0, #0
   168d4:	455f      	cmp	r7, fp
   168d6:	d2da      	bcs.n	1688e <__gedf2+0x8a>
   168d8:	4665      	mov	r5, ip
   168da:	4268      	negs	r0, r5
   168dc:	4168      	adcs	r0, r5
   168de:	4240      	negs	r0, r0
   168e0:	2301      	movs	r3, #1
   168e2:	4318      	orrs	r0, r3
   168e4:	e7d3      	b.n	1688e <__gedf2+0x8a>
   168e6:	4662      	mov	r2, ip
   168e8:	4250      	negs	r0, r2
   168ea:	2301      	movs	r3, #1
   168ec:	4318      	orrs	r0, r3
   168ee:	e7ce      	b.n	1688e <__gedf2+0x8a>
   168f0:	45d0      	cmp	r8, sl
   168f2:	d8f8      	bhi.n	168e6 <__gedf2+0xe2>
   168f4:	2000      	movs	r0, #0
   168f6:	45d0      	cmp	r8, sl
   168f8:	d3ee      	bcc.n	168d8 <__gedf2+0xd4>
   168fa:	e7c8      	b.n	1688e <__gedf2+0x8a>
   168fc:	000007ff 	.word	0x000007ff

00016900 <__ledf2>:
   16900:	b5f0      	push	{r4, r5, r6, r7, lr}
   16902:	4656      	mov	r6, sl
   16904:	464d      	mov	r5, r9
   16906:	4644      	mov	r4, r8
   16908:	465f      	mov	r7, fp
   1690a:	b4f0      	push	{r4, r5, r6, r7}
   1690c:	1c0d      	adds	r5, r1, #0
   1690e:	b083      	sub	sp, #12
   16910:	1c04      	adds	r4, r0, #0
   16912:	9001      	str	r0, [sp, #4]
   16914:	0fe8      	lsrs	r0, r5, #31
   16916:	4681      	mov	r9, r0
   16918:	0318      	lsls	r0, r3, #12
   1691a:	030f      	lsls	r7, r1, #12
   1691c:	0b00      	lsrs	r0, r0, #12
   1691e:	0b3f      	lsrs	r7, r7, #12
   16920:	4684      	mov	ip, r0
   16922:	4835      	ldr	r0, [pc, #212]	; (169f8 <__ledf2+0xf8>)
   16924:	9700      	str	r7, [sp, #0]
   16926:	0049      	lsls	r1, r1, #1
   16928:	005e      	lsls	r6, r3, #1
   1692a:	0fdf      	lsrs	r7, r3, #31
   1692c:	0d49      	lsrs	r1, r1, #21
   1692e:	4692      	mov	sl, r2
   16930:	0d76      	lsrs	r6, r6, #21
   16932:	46b8      	mov	r8, r7
   16934:	4281      	cmp	r1, r0
   16936:	d034      	beq.n	169a2 <__ledf2+0xa2>
   16938:	482f      	ldr	r0, [pc, #188]	; (169f8 <__ledf2+0xf8>)
   1693a:	4286      	cmp	r6, r0
   1693c:	d036      	beq.n	169ac <__ledf2+0xac>
   1693e:	2900      	cmp	r1, #0
   16940:	d018      	beq.n	16974 <__ledf2+0x74>
   16942:	2e00      	cmp	r6, #0
   16944:	d11f      	bne.n	16986 <__ledf2+0x86>
   16946:	1c34      	adds	r4, r6, #0
   16948:	4667      	mov	r7, ip
   1694a:	433a      	orrs	r2, r7
   1694c:	4253      	negs	r3, r2
   1694e:	4153      	adcs	r3, r2
   16950:	2c00      	cmp	r4, #0
   16952:	d01f      	beq.n	16994 <__ledf2+0x94>
   16954:	2000      	movs	r0, #0
   16956:	2b00      	cmp	r3, #0
   16958:	d105      	bne.n	16966 <__ledf2+0x66>
   1695a:	4642      	mov	r2, r8
   1695c:	4250      	negs	r0, r2
   1695e:	4150      	adcs	r0, r2
   16960:	4240      	negs	r0, r0
   16962:	2301      	movs	r3, #1
   16964:	4318      	orrs	r0, r3
   16966:	b003      	add	sp, #12
   16968:	bc3c      	pop	{r2, r3, r4, r5}
   1696a:	4690      	mov	r8, r2
   1696c:	4699      	mov	r9, r3
   1696e:	46a2      	mov	sl, r4
   16970:	46ab      	mov	fp, r5
   16972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16974:	9800      	ldr	r0, [sp, #0]
   16976:	4304      	orrs	r4, r0
   16978:	4260      	negs	r0, r4
   1697a:	4160      	adcs	r0, r4
   1697c:	1c04      	adds	r4, r0, #0
   1697e:	2e00      	cmp	r6, #0
   16980:	d0e2      	beq.n	16948 <__ledf2+0x48>
   16982:	2800      	cmp	r0, #0
   16984:	d1e9      	bne.n	1695a <__ledf2+0x5a>
   16986:	45c1      	cmp	r9, r8
   16988:	d015      	beq.n	169b6 <__ledf2+0xb6>
   1698a:	464f      	mov	r7, r9
   1698c:	4278      	negs	r0, r7
   1698e:	2301      	movs	r3, #1
   16990:	4318      	orrs	r0, r3
   16992:	e7e8      	b.n	16966 <__ledf2+0x66>
   16994:	2b00      	cmp	r3, #0
   16996:	d0f6      	beq.n	16986 <__ledf2+0x86>
   16998:	464b      	mov	r3, r9
   1699a:	4258      	negs	r0, r3
   1699c:	2301      	movs	r3, #1
   1699e:	4318      	orrs	r0, r3
   169a0:	e7e1      	b.n	16966 <__ledf2+0x66>
   169a2:	9f00      	ldr	r7, [sp, #0]
   169a4:	2002      	movs	r0, #2
   169a6:	4327      	orrs	r7, r4
   169a8:	d1dd      	bne.n	16966 <__ledf2+0x66>
   169aa:	e7c5      	b.n	16938 <__ledf2+0x38>
   169ac:	4667      	mov	r7, ip
   169ae:	2002      	movs	r0, #2
   169b0:	4317      	orrs	r7, r2
   169b2:	d1d8      	bne.n	16966 <__ledf2+0x66>
   169b4:	e7c3      	b.n	1693e <__ledf2+0x3e>
   169b6:	42b1      	cmp	r1, r6
   169b8:	dd04      	ble.n	169c4 <__ledf2+0xc4>
   169ba:	464a      	mov	r2, r9
   169bc:	4250      	negs	r0, r2
   169be:	2301      	movs	r3, #1
   169c0:	4318      	orrs	r0, r3
   169c2:	e7d0      	b.n	16966 <__ledf2+0x66>
   169c4:	42b1      	cmp	r1, r6
   169c6:	db07      	blt.n	169d8 <__ledf2+0xd8>
   169c8:	9800      	ldr	r0, [sp, #0]
   169ca:	4560      	cmp	r0, ip
   169cc:	d8e4      	bhi.n	16998 <__ledf2+0x98>
   169ce:	d00a      	beq.n	169e6 <__ledf2+0xe6>
   169d0:	9f00      	ldr	r7, [sp, #0]
   169d2:	2000      	movs	r0, #0
   169d4:	4567      	cmp	r7, ip
   169d6:	d2c6      	bcs.n	16966 <__ledf2+0x66>
   169d8:	464f      	mov	r7, r9
   169da:	4278      	negs	r0, r7
   169dc:	4178      	adcs	r0, r7
   169de:	4240      	negs	r0, r0
   169e0:	2301      	movs	r3, #1
   169e2:	4318      	orrs	r0, r3
   169e4:	e7bf      	b.n	16966 <__ledf2+0x66>
   169e6:	9a01      	ldr	r2, [sp, #4]
   169e8:	4552      	cmp	r2, sl
   169ea:	d8d5      	bhi.n	16998 <__ledf2+0x98>
   169ec:	9a01      	ldr	r2, [sp, #4]
   169ee:	2000      	movs	r0, #0
   169f0:	4552      	cmp	r2, sl
   169f2:	d3f1      	bcc.n	169d8 <__ledf2+0xd8>
   169f4:	e7b7      	b.n	16966 <__ledf2+0x66>
   169f6:	46c0      	nop			; (mov r8, r8)
   169f8:	000007ff 	.word	0x000007ff

000169fc <__aeabi_dmul>:
   169fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   169fe:	4656      	mov	r6, sl
   16a00:	4644      	mov	r4, r8
   16a02:	465f      	mov	r7, fp
   16a04:	464d      	mov	r5, r9
   16a06:	b4f0      	push	{r4, r5, r6, r7}
   16a08:	1c1f      	adds	r7, r3, #0
   16a0a:	030b      	lsls	r3, r1, #12
   16a0c:	0b1b      	lsrs	r3, r3, #12
   16a0e:	469a      	mov	sl, r3
   16a10:	004b      	lsls	r3, r1, #1
   16a12:	b087      	sub	sp, #28
   16a14:	1c04      	adds	r4, r0, #0
   16a16:	4680      	mov	r8, r0
   16a18:	0d5b      	lsrs	r3, r3, #21
   16a1a:	0fc8      	lsrs	r0, r1, #31
   16a1c:	1c16      	adds	r6, r2, #0
   16a1e:	9302      	str	r3, [sp, #8]
   16a20:	4681      	mov	r9, r0
   16a22:	2b00      	cmp	r3, #0
   16a24:	d068      	beq.n	16af8 <__aeabi_dmul+0xfc>
   16a26:	4b69      	ldr	r3, [pc, #420]	; (16bcc <__aeabi_dmul+0x1d0>)
   16a28:	9902      	ldr	r1, [sp, #8]
   16a2a:	4299      	cmp	r1, r3
   16a2c:	d032      	beq.n	16a94 <__aeabi_dmul+0x98>
   16a2e:	2280      	movs	r2, #128	; 0x80
   16a30:	4653      	mov	r3, sl
   16a32:	0352      	lsls	r2, r2, #13
   16a34:	431a      	orrs	r2, r3
   16a36:	00d2      	lsls	r2, r2, #3
   16a38:	0f63      	lsrs	r3, r4, #29
   16a3a:	431a      	orrs	r2, r3
   16a3c:	4692      	mov	sl, r2
   16a3e:	4a64      	ldr	r2, [pc, #400]	; (16bd0 <__aeabi_dmul+0x1d4>)
   16a40:	00e0      	lsls	r0, r4, #3
   16a42:	1889      	adds	r1, r1, r2
   16a44:	4680      	mov	r8, r0
   16a46:	9102      	str	r1, [sp, #8]
   16a48:	2400      	movs	r4, #0
   16a4a:	2500      	movs	r5, #0
   16a4c:	033b      	lsls	r3, r7, #12
   16a4e:	0b1b      	lsrs	r3, r3, #12
   16a50:	469b      	mov	fp, r3
   16a52:	0078      	lsls	r0, r7, #1
   16a54:	0ffb      	lsrs	r3, r7, #31
   16a56:	1c32      	adds	r2, r6, #0
   16a58:	0d40      	lsrs	r0, r0, #21
   16a5a:	9303      	str	r3, [sp, #12]
   16a5c:	d100      	bne.n	16a60 <__aeabi_dmul+0x64>
   16a5e:	e075      	b.n	16b4c <__aeabi_dmul+0x150>
   16a60:	4b5a      	ldr	r3, [pc, #360]	; (16bcc <__aeabi_dmul+0x1d0>)
   16a62:	4298      	cmp	r0, r3
   16a64:	d069      	beq.n	16b3a <__aeabi_dmul+0x13e>
   16a66:	2280      	movs	r2, #128	; 0x80
   16a68:	4659      	mov	r1, fp
   16a6a:	0352      	lsls	r2, r2, #13
   16a6c:	430a      	orrs	r2, r1
   16a6e:	0f73      	lsrs	r3, r6, #29
   16a70:	00d2      	lsls	r2, r2, #3
   16a72:	431a      	orrs	r2, r3
   16a74:	4b56      	ldr	r3, [pc, #344]	; (16bd0 <__aeabi_dmul+0x1d4>)
   16a76:	4693      	mov	fp, r2
   16a78:	18c0      	adds	r0, r0, r3
   16a7a:	00f2      	lsls	r2, r6, #3
   16a7c:	2300      	movs	r3, #0
   16a7e:	9903      	ldr	r1, [sp, #12]
   16a80:	464e      	mov	r6, r9
   16a82:	4071      	eors	r1, r6
   16a84:	431c      	orrs	r4, r3
   16a86:	2c0f      	cmp	r4, #15
   16a88:	d900      	bls.n	16a8c <__aeabi_dmul+0x90>
   16a8a:	e0a9      	b.n	16be0 <__aeabi_dmul+0x1e4>
   16a8c:	4e51      	ldr	r6, [pc, #324]	; (16bd4 <__aeabi_dmul+0x1d8>)
   16a8e:	00a4      	lsls	r4, r4, #2
   16a90:	5934      	ldr	r4, [r6, r4]
   16a92:	46a7      	mov	pc, r4
   16a94:	4653      	mov	r3, sl
   16a96:	431c      	orrs	r4, r3
   16a98:	d000      	beq.n	16a9c <__aeabi_dmul+0xa0>
   16a9a:	e087      	b.n	16bac <__aeabi_dmul+0x1b0>
   16a9c:	2500      	movs	r5, #0
   16a9e:	46aa      	mov	sl, r5
   16aa0:	46a8      	mov	r8, r5
   16aa2:	2408      	movs	r4, #8
   16aa4:	2502      	movs	r5, #2
   16aa6:	e7d1      	b.n	16a4c <__aeabi_dmul+0x50>
   16aa8:	4649      	mov	r1, r9
   16aaa:	2d02      	cmp	r5, #2
   16aac:	d06c      	beq.n	16b88 <__aeabi_dmul+0x18c>
   16aae:	2d03      	cmp	r5, #3
   16ab0:	d100      	bne.n	16ab4 <__aeabi_dmul+0xb8>
   16ab2:	e217      	b.n	16ee4 <__aeabi_dmul+0x4e8>
   16ab4:	2d01      	cmp	r5, #1
   16ab6:	d000      	beq.n	16aba <__aeabi_dmul+0xbe>
   16ab8:	e158      	b.n	16d6c <__aeabi_dmul+0x370>
   16aba:	400d      	ands	r5, r1
   16abc:	b2ed      	uxtb	r5, r5
   16abe:	2400      	movs	r4, #0
   16ac0:	46a9      	mov	r9, r5
   16ac2:	2300      	movs	r3, #0
   16ac4:	46a0      	mov	r8, r4
   16ac6:	2000      	movs	r0, #0
   16ac8:	2100      	movs	r1, #0
   16aca:	0325      	lsls	r5, r4, #12
   16acc:	0d0a      	lsrs	r2, r1, #20
   16ace:	051c      	lsls	r4, r3, #20
   16ad0:	0b2d      	lsrs	r5, r5, #12
   16ad2:	0512      	lsls	r2, r2, #20
   16ad4:	4b40      	ldr	r3, [pc, #256]	; (16bd8 <__aeabi_dmul+0x1dc>)
   16ad6:	432a      	orrs	r2, r5
   16ad8:	4013      	ands	r3, r2
   16ada:	4323      	orrs	r3, r4
   16adc:	005b      	lsls	r3, r3, #1
   16ade:	464c      	mov	r4, r9
   16ae0:	085b      	lsrs	r3, r3, #1
   16ae2:	07e2      	lsls	r2, r4, #31
   16ae4:	1c19      	adds	r1, r3, #0
   16ae6:	4640      	mov	r0, r8
   16ae8:	4311      	orrs	r1, r2
   16aea:	b007      	add	sp, #28
   16aec:	bc3c      	pop	{r2, r3, r4, r5}
   16aee:	4690      	mov	r8, r2
   16af0:	4699      	mov	r9, r3
   16af2:	46a2      	mov	sl, r4
   16af4:	46ab      	mov	fp, r5
   16af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16af8:	4653      	mov	r3, sl
   16afa:	4323      	orrs	r3, r4
   16afc:	d050      	beq.n	16ba0 <__aeabi_dmul+0x1a4>
   16afe:	4653      	mov	r3, sl
   16b00:	2b00      	cmp	r3, #0
   16b02:	d100      	bne.n	16b06 <__aeabi_dmul+0x10a>
   16b04:	e184      	b.n	16e10 <__aeabi_dmul+0x414>
   16b06:	4650      	mov	r0, sl
   16b08:	f000 fde2 	bl	176d0 <__clzsi2>
   16b0c:	1e03      	subs	r3, r0, #0
   16b0e:	2b27      	cmp	r3, #39	; 0x27
   16b10:	dd00      	ble.n	16b14 <__aeabi_dmul+0x118>
   16b12:	e176      	b.n	16e02 <__aeabi_dmul+0x406>
   16b14:	2128      	movs	r1, #40	; 0x28
   16b16:	1a0d      	subs	r5, r1, r0
   16b18:	1c21      	adds	r1, r4, #0
   16b1a:	3b08      	subs	r3, #8
   16b1c:	4652      	mov	r2, sl
   16b1e:	40e9      	lsrs	r1, r5
   16b20:	409a      	lsls	r2, r3
   16b22:	1c0d      	adds	r5, r1, #0
   16b24:	4315      	orrs	r5, r2
   16b26:	1c22      	adds	r2, r4, #0
   16b28:	409a      	lsls	r2, r3
   16b2a:	46aa      	mov	sl, r5
   16b2c:	4690      	mov	r8, r2
   16b2e:	4b2b      	ldr	r3, [pc, #172]	; (16bdc <__aeabi_dmul+0x1e0>)
   16b30:	2400      	movs	r4, #0
   16b32:	1a1b      	subs	r3, r3, r0
   16b34:	9302      	str	r3, [sp, #8]
   16b36:	2500      	movs	r5, #0
   16b38:	e788      	b.n	16a4c <__aeabi_dmul+0x50>
   16b3a:	465b      	mov	r3, fp
   16b3c:	431e      	orrs	r6, r3
   16b3e:	2303      	movs	r3, #3
   16b40:	2e00      	cmp	r6, #0
   16b42:	d19c      	bne.n	16a7e <__aeabi_dmul+0x82>
   16b44:	46b3      	mov	fp, r6
   16b46:	2200      	movs	r2, #0
   16b48:	2302      	movs	r3, #2
   16b4a:	e798      	b.n	16a7e <__aeabi_dmul+0x82>
   16b4c:	465b      	mov	r3, fp
   16b4e:	4333      	orrs	r3, r6
   16b50:	d021      	beq.n	16b96 <__aeabi_dmul+0x19a>
   16b52:	4658      	mov	r0, fp
   16b54:	2800      	cmp	r0, #0
   16b56:	d100      	bne.n	16b5a <__aeabi_dmul+0x15e>
   16b58:	e14e      	b.n	16df8 <__aeabi_dmul+0x3fc>
   16b5a:	f000 fdb9 	bl	176d0 <__clzsi2>
   16b5e:	2827      	cmp	r0, #39	; 0x27
   16b60:	dd00      	ble.n	16b64 <__aeabi_dmul+0x168>
   16b62:	e142      	b.n	16dea <__aeabi_dmul+0x3ee>
   16b64:	2128      	movs	r1, #40	; 0x28
   16b66:	1a0f      	subs	r7, r1, r0
   16b68:	1c02      	adds	r2, r0, #0
   16b6a:	1c31      	adds	r1, r6, #0
   16b6c:	3a08      	subs	r2, #8
   16b6e:	465b      	mov	r3, fp
   16b70:	40f9      	lsrs	r1, r7
   16b72:	4093      	lsls	r3, r2
   16b74:	1c0f      	adds	r7, r1, #0
   16b76:	431f      	orrs	r7, r3
   16b78:	1c33      	adds	r3, r6, #0
   16b7a:	4093      	lsls	r3, r2
   16b7c:	46bb      	mov	fp, r7
   16b7e:	1c1a      	adds	r2, r3, #0
   16b80:	4b16      	ldr	r3, [pc, #88]	; (16bdc <__aeabi_dmul+0x1e0>)
   16b82:	1a18      	subs	r0, r3, r0
   16b84:	2300      	movs	r3, #0
   16b86:	e77a      	b.n	16a7e <__aeabi_dmul+0x82>
   16b88:	2301      	movs	r3, #1
   16b8a:	400b      	ands	r3, r1
   16b8c:	2400      	movs	r4, #0
   16b8e:	4699      	mov	r9, r3
   16b90:	46a0      	mov	r8, r4
   16b92:	4b0e      	ldr	r3, [pc, #56]	; (16bcc <__aeabi_dmul+0x1d0>)
   16b94:	e797      	b.n	16ac6 <__aeabi_dmul+0xca>
   16b96:	2700      	movs	r7, #0
   16b98:	46bb      	mov	fp, r7
   16b9a:	2200      	movs	r2, #0
   16b9c:	2301      	movs	r3, #1
   16b9e:	e76e      	b.n	16a7e <__aeabi_dmul+0x82>
   16ba0:	2100      	movs	r1, #0
   16ba2:	2404      	movs	r4, #4
   16ba4:	468a      	mov	sl, r1
   16ba6:	4688      	mov	r8, r1
   16ba8:	2501      	movs	r5, #1
   16baa:	e74f      	b.n	16a4c <__aeabi_dmul+0x50>
   16bac:	240c      	movs	r4, #12
   16bae:	2503      	movs	r5, #3
   16bb0:	e74c      	b.n	16a4c <__aeabi_dmul+0x50>
   16bb2:	2500      	movs	r5, #0
   16bb4:	2480      	movs	r4, #128	; 0x80
   16bb6:	46a9      	mov	r9, r5
   16bb8:	0324      	lsls	r4, r4, #12
   16bba:	46a8      	mov	r8, r5
   16bbc:	4b03      	ldr	r3, [pc, #12]	; (16bcc <__aeabi_dmul+0x1d0>)
   16bbe:	e782      	b.n	16ac6 <__aeabi_dmul+0xca>
   16bc0:	46da      	mov	sl, fp
   16bc2:	4690      	mov	r8, r2
   16bc4:	9903      	ldr	r1, [sp, #12]
   16bc6:	1c1d      	adds	r5, r3, #0
   16bc8:	e76f      	b.n	16aaa <__aeabi_dmul+0xae>
   16bca:	46c0      	nop			; (mov r8, r8)
   16bcc:	000007ff 	.word	0x000007ff
   16bd0:	fffffc01 	.word	0xfffffc01
   16bd4:	00018738 	.word	0x00018738
   16bd8:	800fffff 	.word	0x800fffff
   16bdc:	fffffc0d 	.word	0xfffffc0d
   16be0:	9f02      	ldr	r7, [sp, #8]
   16be2:	0c16      	lsrs	r6, r2, #16
   16be4:	1838      	adds	r0, r7, r0
   16be6:	9004      	str	r0, [sp, #16]
   16be8:	4640      	mov	r0, r8
   16bea:	0c07      	lsrs	r7, r0, #16
   16bec:	0400      	lsls	r0, r0, #16
   16bee:	0c00      	lsrs	r0, r0, #16
   16bf0:	0412      	lsls	r2, r2, #16
   16bf2:	0c12      	lsrs	r2, r2, #16
   16bf4:	1c03      	adds	r3, r0, #0
   16bf6:	4353      	muls	r3, r2
   16bf8:	1c04      	adds	r4, r0, #0
   16bfa:	1c3d      	adds	r5, r7, #0
   16bfc:	4374      	muls	r4, r6
   16bfe:	4355      	muls	r5, r2
   16c00:	4698      	mov	r8, r3
   16c02:	1c3b      	adds	r3, r7, #0
   16c04:	4373      	muls	r3, r6
   16c06:	1964      	adds	r4, r4, r5
   16c08:	46a4      	mov	ip, r4
   16c0a:	4644      	mov	r4, r8
   16c0c:	9302      	str	r3, [sp, #8]
   16c0e:	0c23      	lsrs	r3, r4, #16
   16c10:	4463      	add	r3, ip
   16c12:	429d      	cmp	r5, r3
   16c14:	d904      	bls.n	16c20 <__aeabi_dmul+0x224>
   16c16:	9d02      	ldr	r5, [sp, #8]
   16c18:	2480      	movs	r4, #128	; 0x80
   16c1a:	0264      	lsls	r4, r4, #9
   16c1c:	192d      	adds	r5, r5, r4
   16c1e:	9502      	str	r5, [sp, #8]
   16c20:	0c1d      	lsrs	r5, r3, #16
   16c22:	9503      	str	r5, [sp, #12]
   16c24:	4645      	mov	r5, r8
   16c26:	042c      	lsls	r4, r5, #16
   16c28:	041b      	lsls	r3, r3, #16
   16c2a:	0c24      	lsrs	r4, r4, #16
   16c2c:	191c      	adds	r4, r3, r4
   16c2e:	9405      	str	r4, [sp, #20]
   16c30:	465c      	mov	r4, fp
   16c32:	0c23      	lsrs	r3, r4, #16
   16c34:	1c05      	adds	r5, r0, #0
   16c36:	4358      	muls	r0, r3
   16c38:	0424      	lsls	r4, r4, #16
   16c3a:	0c24      	lsrs	r4, r4, #16
   16c3c:	4684      	mov	ip, r0
   16c3e:	1c38      	adds	r0, r7, #0
   16c40:	4360      	muls	r0, r4
   16c42:	4365      	muls	r5, r4
   16c44:	435f      	muls	r7, r3
   16c46:	4681      	mov	r9, r0
   16c48:	44cc      	add	ip, r9
   16c4a:	0c28      	lsrs	r0, r5, #16
   16c4c:	4460      	add	r0, ip
   16c4e:	46bb      	mov	fp, r7
   16c50:	4581      	cmp	r9, r0
   16c52:	d902      	bls.n	16c5a <__aeabi_dmul+0x25e>
   16c54:	2780      	movs	r7, #128	; 0x80
   16c56:	027f      	lsls	r7, r7, #9
   16c58:	44bb      	add	fp, r7
   16c5a:	042d      	lsls	r5, r5, #16
   16c5c:	0c07      	lsrs	r7, r0, #16
   16c5e:	0c2d      	lsrs	r5, r5, #16
   16c60:	0400      	lsls	r0, r0, #16
   16c62:	1940      	adds	r0, r0, r5
   16c64:	4655      	mov	r5, sl
   16c66:	46bc      	mov	ip, r7
   16c68:	042f      	lsls	r7, r5, #16
   16c6a:	44e3      	add	fp, ip
   16c6c:	4684      	mov	ip, r0
   16c6e:	0c28      	lsrs	r0, r5, #16
   16c70:	0c3d      	lsrs	r5, r7, #16
   16c72:	1c2f      	adds	r7, r5, #0
   16c74:	4357      	muls	r7, r2
   16c76:	46b8      	mov	r8, r7
   16c78:	1c2f      	adds	r7, r5, #0
   16c7a:	4377      	muls	r7, r6
   16c7c:	4342      	muls	r2, r0
   16c7e:	46b9      	mov	r9, r7
   16c80:	4647      	mov	r7, r8
   16c82:	0c3f      	lsrs	r7, r7, #16
   16c84:	4491      	add	r9, r2
   16c86:	46ba      	mov	sl, r7
   16c88:	44d1      	add	r9, sl
   16c8a:	4346      	muls	r6, r0
   16c8c:	454a      	cmp	r2, r9
   16c8e:	d902      	bls.n	16c96 <__aeabi_dmul+0x29a>
   16c90:	2280      	movs	r2, #128	; 0x80
   16c92:	0252      	lsls	r2, r2, #9
   16c94:	18b6      	adds	r6, r6, r2
   16c96:	464f      	mov	r7, r9
   16c98:	0c3a      	lsrs	r2, r7, #16
   16c9a:	18b6      	adds	r6, r6, r2
   16c9c:	043a      	lsls	r2, r7, #16
   16c9e:	4647      	mov	r7, r8
   16ca0:	043f      	lsls	r7, r7, #16
   16ca2:	0c3f      	lsrs	r7, r7, #16
   16ca4:	46b8      	mov	r8, r7
   16ca6:	1c2f      	adds	r7, r5, #0
   16ca8:	4367      	muls	r7, r4
   16caa:	435d      	muls	r5, r3
   16cac:	4344      	muls	r4, r0
   16cae:	4358      	muls	r0, r3
   16cb0:	1965      	adds	r5, r4, r5
   16cb2:	9001      	str	r0, [sp, #4]
   16cb4:	0c38      	lsrs	r0, r7, #16
   16cb6:	182d      	adds	r5, r5, r0
   16cb8:	4442      	add	r2, r8
   16cba:	46b8      	mov	r8, r7
   16cbc:	42ac      	cmp	r4, r5
   16cbe:	d904      	bls.n	16cca <__aeabi_dmul+0x2ce>
   16cc0:	9801      	ldr	r0, [sp, #4]
   16cc2:	2380      	movs	r3, #128	; 0x80
   16cc4:	025b      	lsls	r3, r3, #9
   16cc6:	18c0      	adds	r0, r0, r3
   16cc8:	9001      	str	r0, [sp, #4]
   16cca:	9c03      	ldr	r4, [sp, #12]
   16ccc:	9f02      	ldr	r7, [sp, #8]
   16cce:	1c20      	adds	r0, r4, #0
   16cd0:	4460      	add	r0, ip
   16cd2:	19c0      	adds	r0, r0, r7
   16cd4:	4560      	cmp	r0, ip
   16cd6:	41a4      	sbcs	r4, r4
   16cd8:	4647      	mov	r7, r8
   16cda:	4264      	negs	r4, r4
   16cdc:	46a4      	mov	ip, r4
   16cde:	042b      	lsls	r3, r5, #16
   16ce0:	043c      	lsls	r4, r7, #16
   16ce2:	4699      	mov	r9, r3
   16ce4:	0c24      	lsrs	r4, r4, #16
   16ce6:	444c      	add	r4, r9
   16ce8:	46a0      	mov	r8, r4
   16cea:	44d8      	add	r8, fp
   16cec:	1880      	adds	r0, r0, r2
   16cee:	46c2      	mov	sl, r8
   16cf0:	44e2      	add	sl, ip
   16cf2:	4290      	cmp	r0, r2
   16cf4:	4192      	sbcs	r2, r2
   16cf6:	4657      	mov	r7, sl
   16cf8:	4252      	negs	r2, r2
   16cfa:	4691      	mov	r9, r2
   16cfc:	19f2      	adds	r2, r6, r7
   16cfe:	45e2      	cmp	sl, ip
   16d00:	41bf      	sbcs	r7, r7
   16d02:	427f      	negs	r7, r7
   16d04:	464b      	mov	r3, r9
   16d06:	46bc      	mov	ip, r7
   16d08:	45d8      	cmp	r8, fp
   16d0a:	41bf      	sbcs	r7, r7
   16d0c:	18d4      	adds	r4, r2, r3
   16d0e:	427f      	negs	r7, r7
   16d10:	4663      	mov	r3, ip
   16d12:	431f      	orrs	r7, r3
   16d14:	0c2d      	lsrs	r5, r5, #16
   16d16:	197f      	adds	r7, r7, r5
   16d18:	42b2      	cmp	r2, r6
   16d1a:	4192      	sbcs	r2, r2
   16d1c:	454c      	cmp	r4, r9
   16d1e:	41ad      	sbcs	r5, r5
   16d20:	4252      	negs	r2, r2
   16d22:	426d      	negs	r5, r5
   16d24:	4315      	orrs	r5, r2
   16d26:	9e01      	ldr	r6, [sp, #4]
   16d28:	197d      	adds	r5, r7, r5
   16d2a:	19ab      	adds	r3, r5, r6
   16d2c:	0de2      	lsrs	r2, r4, #23
   16d2e:	025b      	lsls	r3, r3, #9
   16d30:	9f05      	ldr	r7, [sp, #20]
   16d32:	4313      	orrs	r3, r2
   16d34:	0242      	lsls	r2, r0, #9
   16d36:	433a      	orrs	r2, r7
   16d38:	469a      	mov	sl, r3
   16d3a:	1e53      	subs	r3, r2, #1
   16d3c:	419a      	sbcs	r2, r3
   16d3e:	0dc3      	lsrs	r3, r0, #23
   16d40:	1c10      	adds	r0, r2, #0
   16d42:	4318      	orrs	r0, r3
   16d44:	0264      	lsls	r4, r4, #9
   16d46:	4320      	orrs	r0, r4
   16d48:	4680      	mov	r8, r0
   16d4a:	4650      	mov	r0, sl
   16d4c:	01c0      	lsls	r0, r0, #7
   16d4e:	d50d      	bpl.n	16d6c <__aeabi_dmul+0x370>
   16d50:	4645      	mov	r5, r8
   16d52:	2201      	movs	r2, #1
   16d54:	4656      	mov	r6, sl
   16d56:	9c04      	ldr	r4, [sp, #16]
   16d58:	086b      	lsrs	r3, r5, #1
   16d5a:	402a      	ands	r2, r5
   16d5c:	431a      	orrs	r2, r3
   16d5e:	07f3      	lsls	r3, r6, #31
   16d60:	3401      	adds	r4, #1
   16d62:	431a      	orrs	r2, r3
   16d64:	0876      	lsrs	r6, r6, #1
   16d66:	9404      	str	r4, [sp, #16]
   16d68:	4690      	mov	r8, r2
   16d6a:	46b2      	mov	sl, r6
   16d6c:	9e04      	ldr	r6, [sp, #16]
   16d6e:	4f63      	ldr	r7, [pc, #396]	; (16efc <__aeabi_dmul+0x500>)
   16d70:	19f3      	adds	r3, r6, r7
   16d72:	2b00      	cmp	r3, #0
   16d74:	dd61      	ble.n	16e3a <__aeabi_dmul+0x43e>
   16d76:	4640      	mov	r0, r8
   16d78:	0740      	lsls	r0, r0, #29
   16d7a:	d00b      	beq.n	16d94 <__aeabi_dmul+0x398>
   16d7c:	220f      	movs	r2, #15
   16d7e:	4644      	mov	r4, r8
   16d80:	4022      	ands	r2, r4
   16d82:	2a04      	cmp	r2, #4
   16d84:	d006      	beq.n	16d94 <__aeabi_dmul+0x398>
   16d86:	4642      	mov	r2, r8
   16d88:	3204      	adds	r2, #4
   16d8a:	4542      	cmp	r2, r8
   16d8c:	4180      	sbcs	r0, r0
   16d8e:	4240      	negs	r0, r0
   16d90:	4482      	add	sl, r0
   16d92:	4690      	mov	r8, r2
   16d94:	4655      	mov	r5, sl
   16d96:	01ed      	lsls	r5, r5, #7
   16d98:	d507      	bpl.n	16daa <__aeabi_dmul+0x3ae>
   16d9a:	4b59      	ldr	r3, [pc, #356]	; (16f00 <__aeabi_dmul+0x504>)
   16d9c:	4656      	mov	r6, sl
   16d9e:	9f04      	ldr	r7, [sp, #16]
   16da0:	2080      	movs	r0, #128	; 0x80
   16da2:	401e      	ands	r6, r3
   16da4:	00c0      	lsls	r0, r0, #3
   16da6:	46b2      	mov	sl, r6
   16da8:	183b      	adds	r3, r7, r0
   16daa:	4a56      	ldr	r2, [pc, #344]	; (16f04 <__aeabi_dmul+0x508>)
   16dac:	4293      	cmp	r3, r2
   16dae:	dd00      	ble.n	16db2 <__aeabi_dmul+0x3b6>
   16db0:	e6ea      	b.n	16b88 <__aeabi_dmul+0x18c>
   16db2:	4644      	mov	r4, r8
   16db4:	4655      	mov	r5, sl
   16db6:	08e2      	lsrs	r2, r4, #3
   16db8:	0768      	lsls	r0, r5, #29
   16dba:	4310      	orrs	r0, r2
   16dbc:	2201      	movs	r2, #1
   16dbe:	026c      	lsls	r4, r5, #9
   16dc0:	055b      	lsls	r3, r3, #21
   16dc2:	400a      	ands	r2, r1
   16dc4:	4680      	mov	r8, r0
   16dc6:	0b24      	lsrs	r4, r4, #12
   16dc8:	0d5b      	lsrs	r3, r3, #21
   16dca:	4691      	mov	r9, r2
   16dcc:	e67b      	b.n	16ac6 <__aeabi_dmul+0xca>
   16dce:	46da      	mov	sl, fp
   16dd0:	4690      	mov	r8, r2
   16dd2:	1c1d      	adds	r5, r3, #0
   16dd4:	e669      	b.n	16aaa <__aeabi_dmul+0xae>
   16dd6:	2480      	movs	r4, #128	; 0x80
   16dd8:	0324      	lsls	r4, r4, #12
   16dda:	4657      	mov	r7, sl
   16ddc:	4227      	tst	r7, r4
   16dde:	d11c      	bne.n	16e1a <__aeabi_dmul+0x41e>
   16de0:	433c      	orrs	r4, r7
   16de2:	0324      	lsls	r4, r4, #12
   16de4:	0b24      	lsrs	r4, r4, #12
   16de6:	4b48      	ldr	r3, [pc, #288]	; (16f08 <__aeabi_dmul+0x50c>)
   16de8:	e66d      	b.n	16ac6 <__aeabi_dmul+0xca>
   16dea:	1c03      	adds	r3, r0, #0
   16dec:	3b28      	subs	r3, #40	; 0x28
   16dee:	1c31      	adds	r1, r6, #0
   16df0:	4099      	lsls	r1, r3
   16df2:	468b      	mov	fp, r1
   16df4:	2200      	movs	r2, #0
   16df6:	e6c3      	b.n	16b80 <__aeabi_dmul+0x184>
   16df8:	1c30      	adds	r0, r6, #0
   16dfa:	f000 fc69 	bl	176d0 <__clzsi2>
   16dfe:	3020      	adds	r0, #32
   16e00:	e6ad      	b.n	16b5e <__aeabi_dmul+0x162>
   16e02:	3b28      	subs	r3, #40	; 0x28
   16e04:	1c21      	adds	r1, r4, #0
   16e06:	4099      	lsls	r1, r3
   16e08:	2200      	movs	r2, #0
   16e0a:	468a      	mov	sl, r1
   16e0c:	4690      	mov	r8, r2
   16e0e:	e68e      	b.n	16b2e <__aeabi_dmul+0x132>
   16e10:	1c20      	adds	r0, r4, #0
   16e12:	f000 fc5d 	bl	176d0 <__clzsi2>
   16e16:	3020      	adds	r0, #32
   16e18:	e678      	b.n	16b0c <__aeabi_dmul+0x110>
   16e1a:	4658      	mov	r0, fp
   16e1c:	4220      	tst	r0, r4
   16e1e:	d107      	bne.n	16e30 <__aeabi_dmul+0x434>
   16e20:	4304      	orrs	r4, r0
   16e22:	9903      	ldr	r1, [sp, #12]
   16e24:	0324      	lsls	r4, r4, #12
   16e26:	0b24      	lsrs	r4, r4, #12
   16e28:	4689      	mov	r9, r1
   16e2a:	4690      	mov	r8, r2
   16e2c:	4b36      	ldr	r3, [pc, #216]	; (16f08 <__aeabi_dmul+0x50c>)
   16e2e:	e64a      	b.n	16ac6 <__aeabi_dmul+0xca>
   16e30:	433c      	orrs	r4, r7
   16e32:	0324      	lsls	r4, r4, #12
   16e34:	0b24      	lsrs	r4, r4, #12
   16e36:	4b34      	ldr	r3, [pc, #208]	; (16f08 <__aeabi_dmul+0x50c>)
   16e38:	e645      	b.n	16ac6 <__aeabi_dmul+0xca>
   16e3a:	4b34      	ldr	r3, [pc, #208]	; (16f0c <__aeabi_dmul+0x510>)
   16e3c:	9e04      	ldr	r6, [sp, #16]
   16e3e:	1b9b      	subs	r3, r3, r6
   16e40:	2b38      	cmp	r3, #56	; 0x38
   16e42:	dd06      	ble.n	16e52 <__aeabi_dmul+0x456>
   16e44:	2301      	movs	r3, #1
   16e46:	400b      	ands	r3, r1
   16e48:	2400      	movs	r4, #0
   16e4a:	4699      	mov	r9, r3
   16e4c:	46a0      	mov	r8, r4
   16e4e:	2300      	movs	r3, #0
   16e50:	e639      	b.n	16ac6 <__aeabi_dmul+0xca>
   16e52:	2b1f      	cmp	r3, #31
   16e54:	dc25      	bgt.n	16ea2 <__aeabi_dmul+0x4a6>
   16e56:	9c04      	ldr	r4, [sp, #16]
   16e58:	4d2d      	ldr	r5, [pc, #180]	; (16f10 <__aeabi_dmul+0x514>)
   16e5a:	4646      	mov	r6, r8
   16e5c:	1960      	adds	r0, r4, r5
   16e5e:	4652      	mov	r2, sl
   16e60:	4644      	mov	r4, r8
   16e62:	4086      	lsls	r6, r0
   16e64:	40dc      	lsrs	r4, r3
   16e66:	4082      	lsls	r2, r0
   16e68:	4657      	mov	r7, sl
   16e6a:	1c30      	adds	r0, r6, #0
   16e6c:	4322      	orrs	r2, r4
   16e6e:	40df      	lsrs	r7, r3
   16e70:	1e44      	subs	r4, r0, #1
   16e72:	41a0      	sbcs	r0, r4
   16e74:	4302      	orrs	r2, r0
   16e76:	1c3b      	adds	r3, r7, #0
   16e78:	0754      	lsls	r4, r2, #29
   16e7a:	d009      	beq.n	16e90 <__aeabi_dmul+0x494>
   16e7c:	200f      	movs	r0, #15
   16e7e:	4010      	ands	r0, r2
   16e80:	2804      	cmp	r0, #4
   16e82:	d005      	beq.n	16e90 <__aeabi_dmul+0x494>
   16e84:	1d10      	adds	r0, r2, #4
   16e86:	4290      	cmp	r0, r2
   16e88:	4192      	sbcs	r2, r2
   16e8a:	4252      	negs	r2, r2
   16e8c:	189b      	adds	r3, r3, r2
   16e8e:	1c02      	adds	r2, r0, #0
   16e90:	021d      	lsls	r5, r3, #8
   16e92:	d51a      	bpl.n	16eca <__aeabi_dmul+0x4ce>
   16e94:	2301      	movs	r3, #1
   16e96:	400b      	ands	r3, r1
   16e98:	2400      	movs	r4, #0
   16e9a:	4699      	mov	r9, r3
   16e9c:	46a0      	mov	r8, r4
   16e9e:	2301      	movs	r3, #1
   16ea0:	e611      	b.n	16ac6 <__aeabi_dmul+0xca>
   16ea2:	481c      	ldr	r0, [pc, #112]	; (16f14 <__aeabi_dmul+0x518>)
   16ea4:	9c04      	ldr	r4, [sp, #16]
   16ea6:	4655      	mov	r5, sl
   16ea8:	1b00      	subs	r0, r0, r4
   16eaa:	40c5      	lsrs	r5, r0
   16eac:	1c28      	adds	r0, r5, #0
   16eae:	2b20      	cmp	r3, #32
   16eb0:	d016      	beq.n	16ee0 <__aeabi_dmul+0x4e4>
   16eb2:	4e19      	ldr	r6, [pc, #100]	; (16f18 <__aeabi_dmul+0x51c>)
   16eb4:	4657      	mov	r7, sl
   16eb6:	19a2      	adds	r2, r4, r6
   16eb8:	4097      	lsls	r7, r2
   16eba:	1c3a      	adds	r2, r7, #0
   16ebc:	4643      	mov	r3, r8
   16ebe:	431a      	orrs	r2, r3
   16ec0:	1e53      	subs	r3, r2, #1
   16ec2:	419a      	sbcs	r2, r3
   16ec4:	4302      	orrs	r2, r0
   16ec6:	2300      	movs	r3, #0
   16ec8:	e7d6      	b.n	16e78 <__aeabi_dmul+0x47c>
   16eca:	0758      	lsls	r0, r3, #29
   16ecc:	025b      	lsls	r3, r3, #9
   16ece:	08d2      	lsrs	r2, r2, #3
   16ed0:	0b1c      	lsrs	r4, r3, #12
   16ed2:	2301      	movs	r3, #1
   16ed4:	400b      	ands	r3, r1
   16ed6:	4310      	orrs	r0, r2
   16ed8:	4699      	mov	r9, r3
   16eda:	4680      	mov	r8, r0
   16edc:	2300      	movs	r3, #0
   16ede:	e5f2      	b.n	16ac6 <__aeabi_dmul+0xca>
   16ee0:	2200      	movs	r2, #0
   16ee2:	e7eb      	b.n	16ebc <__aeabi_dmul+0x4c0>
   16ee4:	2480      	movs	r4, #128	; 0x80
   16ee6:	0324      	lsls	r4, r4, #12
   16ee8:	4650      	mov	r0, sl
   16eea:	2301      	movs	r3, #1
   16eec:	4304      	orrs	r4, r0
   16eee:	4019      	ands	r1, r3
   16ef0:	0324      	lsls	r4, r4, #12
   16ef2:	0b24      	lsrs	r4, r4, #12
   16ef4:	4689      	mov	r9, r1
   16ef6:	4b04      	ldr	r3, [pc, #16]	; (16f08 <__aeabi_dmul+0x50c>)
   16ef8:	e5e5      	b.n	16ac6 <__aeabi_dmul+0xca>
   16efa:	46c0      	nop			; (mov r8, r8)
   16efc:	000003ff 	.word	0x000003ff
   16f00:	feffffff 	.word	0xfeffffff
   16f04:	000007fe 	.word	0x000007fe
   16f08:	000007ff 	.word	0x000007ff
   16f0c:	fffffc02 	.word	0xfffffc02
   16f10:	0000041e 	.word	0x0000041e
   16f14:	fffffbe2 	.word	0xfffffbe2
   16f18:	0000043e 	.word	0x0000043e

00016f1c <__aeabi_dsub>:
   16f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f1e:	465f      	mov	r7, fp
   16f20:	4656      	mov	r6, sl
   16f22:	4644      	mov	r4, r8
   16f24:	464d      	mov	r5, r9
   16f26:	b4f0      	push	{r4, r5, r6, r7}
   16f28:	030c      	lsls	r4, r1, #12
   16f2a:	004d      	lsls	r5, r1, #1
   16f2c:	0fcf      	lsrs	r7, r1, #31
   16f2e:	0a61      	lsrs	r1, r4, #9
   16f30:	0f44      	lsrs	r4, r0, #29
   16f32:	4321      	orrs	r1, r4
   16f34:	00c4      	lsls	r4, r0, #3
   16f36:	0318      	lsls	r0, r3, #12
   16f38:	0fde      	lsrs	r6, r3, #31
   16f3a:	4680      	mov	r8, r0
   16f3c:	46b4      	mov	ip, r6
   16f3e:	4646      	mov	r6, r8
   16f40:	0058      	lsls	r0, r3, #1
   16f42:	0a76      	lsrs	r6, r6, #9
   16f44:	0f53      	lsrs	r3, r2, #29
   16f46:	4333      	orrs	r3, r6
   16f48:	00d6      	lsls	r6, r2, #3
   16f4a:	4ad1      	ldr	r2, [pc, #836]	; (17290 <__aeabi_dsub+0x374>)
   16f4c:	0d6d      	lsrs	r5, r5, #21
   16f4e:	46ba      	mov	sl, r7
   16f50:	0d40      	lsrs	r0, r0, #21
   16f52:	46b3      	mov	fp, r6
   16f54:	4290      	cmp	r0, r2
   16f56:	d100      	bne.n	16f5a <__aeabi_dsub+0x3e>
   16f58:	e0f5      	b.n	17146 <__aeabi_dsub+0x22a>
   16f5a:	4662      	mov	r2, ip
   16f5c:	2601      	movs	r6, #1
   16f5e:	4072      	eors	r2, r6
   16f60:	4694      	mov	ip, r2
   16f62:	4567      	cmp	r7, ip
   16f64:	d100      	bne.n	16f68 <__aeabi_dsub+0x4c>
   16f66:	e0ab      	b.n	170c0 <__aeabi_dsub+0x1a4>
   16f68:	1a2f      	subs	r7, r5, r0
   16f6a:	2f00      	cmp	r7, #0
   16f6c:	dc00      	bgt.n	16f70 <__aeabi_dsub+0x54>
   16f6e:	e111      	b.n	17194 <__aeabi_dsub+0x278>
   16f70:	2800      	cmp	r0, #0
   16f72:	d13e      	bne.n	16ff2 <__aeabi_dsub+0xd6>
   16f74:	4658      	mov	r0, fp
   16f76:	4318      	orrs	r0, r3
   16f78:	d000      	beq.n	16f7c <__aeabi_dsub+0x60>
   16f7a:	e0f1      	b.n	17160 <__aeabi_dsub+0x244>
   16f7c:	0760      	lsls	r0, r4, #29
   16f7e:	d100      	bne.n	16f82 <__aeabi_dsub+0x66>
   16f80:	e097      	b.n	170b2 <__aeabi_dsub+0x196>
   16f82:	230f      	movs	r3, #15
   16f84:	4023      	ands	r3, r4
   16f86:	2b04      	cmp	r3, #4
   16f88:	d100      	bne.n	16f8c <__aeabi_dsub+0x70>
   16f8a:	e122      	b.n	171d2 <__aeabi_dsub+0x2b6>
   16f8c:	1d22      	adds	r2, r4, #4
   16f8e:	42a2      	cmp	r2, r4
   16f90:	41a4      	sbcs	r4, r4
   16f92:	4264      	negs	r4, r4
   16f94:	2380      	movs	r3, #128	; 0x80
   16f96:	1909      	adds	r1, r1, r4
   16f98:	041b      	lsls	r3, r3, #16
   16f9a:	2701      	movs	r7, #1
   16f9c:	4650      	mov	r0, sl
   16f9e:	400b      	ands	r3, r1
   16fa0:	4007      	ands	r7, r0
   16fa2:	1c14      	adds	r4, r2, #0
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	d100      	bne.n	16faa <__aeabi_dsub+0x8e>
   16fa8:	e079      	b.n	1709e <__aeabi_dsub+0x182>
   16faa:	4bb9      	ldr	r3, [pc, #740]	; (17290 <__aeabi_dsub+0x374>)
   16fac:	3501      	adds	r5, #1
   16fae:	429d      	cmp	r5, r3
   16fb0:	d100      	bne.n	16fb4 <__aeabi_dsub+0x98>
   16fb2:	e10b      	b.n	171cc <__aeabi_dsub+0x2b0>
   16fb4:	4bb7      	ldr	r3, [pc, #732]	; (17294 <__aeabi_dsub+0x378>)
   16fb6:	08e4      	lsrs	r4, r4, #3
   16fb8:	4019      	ands	r1, r3
   16fba:	0748      	lsls	r0, r1, #29
   16fbc:	0249      	lsls	r1, r1, #9
   16fbe:	4304      	orrs	r4, r0
   16fc0:	0b0b      	lsrs	r3, r1, #12
   16fc2:	2000      	movs	r0, #0
   16fc4:	2100      	movs	r1, #0
   16fc6:	031b      	lsls	r3, r3, #12
   16fc8:	0b1a      	lsrs	r2, r3, #12
   16fca:	0d0b      	lsrs	r3, r1, #20
   16fcc:	056d      	lsls	r5, r5, #21
   16fce:	051b      	lsls	r3, r3, #20
   16fd0:	4313      	orrs	r3, r2
   16fd2:	086a      	lsrs	r2, r5, #1
   16fd4:	4db0      	ldr	r5, [pc, #704]	; (17298 <__aeabi_dsub+0x37c>)
   16fd6:	07ff      	lsls	r7, r7, #31
   16fd8:	401d      	ands	r5, r3
   16fda:	4315      	orrs	r5, r2
   16fdc:	006d      	lsls	r5, r5, #1
   16fde:	086d      	lsrs	r5, r5, #1
   16fe0:	1c29      	adds	r1, r5, #0
   16fe2:	4339      	orrs	r1, r7
   16fe4:	1c20      	adds	r0, r4, #0
   16fe6:	bc3c      	pop	{r2, r3, r4, r5}
   16fe8:	4690      	mov	r8, r2
   16fea:	4699      	mov	r9, r3
   16fec:	46a2      	mov	sl, r4
   16fee:	46ab      	mov	fp, r5
   16ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ff2:	48a7      	ldr	r0, [pc, #668]	; (17290 <__aeabi_dsub+0x374>)
   16ff4:	4285      	cmp	r5, r0
   16ff6:	d0c1      	beq.n	16f7c <__aeabi_dsub+0x60>
   16ff8:	2080      	movs	r0, #128	; 0x80
   16ffa:	0400      	lsls	r0, r0, #16
   16ffc:	4303      	orrs	r3, r0
   16ffe:	2f38      	cmp	r7, #56	; 0x38
   17000:	dd00      	ble.n	17004 <__aeabi_dsub+0xe8>
   17002:	e0fd      	b.n	17200 <__aeabi_dsub+0x2e4>
   17004:	2f1f      	cmp	r7, #31
   17006:	dd00      	ble.n	1700a <__aeabi_dsub+0xee>
   17008:	e131      	b.n	1726e <__aeabi_dsub+0x352>
   1700a:	2020      	movs	r0, #32
   1700c:	1bc0      	subs	r0, r0, r7
   1700e:	1c1a      	adds	r2, r3, #0
   17010:	465e      	mov	r6, fp
   17012:	4082      	lsls	r2, r0
   17014:	40fe      	lsrs	r6, r7
   17016:	4332      	orrs	r2, r6
   17018:	4694      	mov	ip, r2
   1701a:	465a      	mov	r2, fp
   1701c:	4082      	lsls	r2, r0
   1701e:	1c10      	adds	r0, r2, #0
   17020:	1e42      	subs	r2, r0, #1
   17022:	4190      	sbcs	r0, r2
   17024:	40fb      	lsrs	r3, r7
   17026:	4662      	mov	r2, ip
   17028:	4302      	orrs	r2, r0
   1702a:	1c1f      	adds	r7, r3, #0
   1702c:	1aa2      	subs	r2, r4, r2
   1702e:	4294      	cmp	r4, r2
   17030:	41a4      	sbcs	r4, r4
   17032:	4264      	negs	r4, r4
   17034:	1bc9      	subs	r1, r1, r7
   17036:	1b09      	subs	r1, r1, r4
   17038:	1c14      	adds	r4, r2, #0
   1703a:	020a      	lsls	r2, r1, #8
   1703c:	d59e      	bpl.n	16f7c <__aeabi_dsub+0x60>
   1703e:	0249      	lsls	r1, r1, #9
   17040:	0a4f      	lsrs	r7, r1, #9
   17042:	2f00      	cmp	r7, #0
   17044:	d100      	bne.n	17048 <__aeabi_dsub+0x12c>
   17046:	e0d6      	b.n	171f6 <__aeabi_dsub+0x2da>
   17048:	1c38      	adds	r0, r7, #0
   1704a:	f000 fb41 	bl	176d0 <__clzsi2>
   1704e:	1c02      	adds	r2, r0, #0
   17050:	3a08      	subs	r2, #8
   17052:	2a1f      	cmp	r2, #31
   17054:	dd00      	ble.n	17058 <__aeabi_dsub+0x13c>
   17056:	e0c3      	b.n	171e0 <__aeabi_dsub+0x2c4>
   17058:	2128      	movs	r1, #40	; 0x28
   1705a:	1c23      	adds	r3, r4, #0
   1705c:	1a09      	subs	r1, r1, r0
   1705e:	4097      	lsls	r7, r2
   17060:	40cb      	lsrs	r3, r1
   17062:	431f      	orrs	r7, r3
   17064:	4094      	lsls	r4, r2
   17066:	4295      	cmp	r5, r2
   17068:	dd00      	ble.n	1706c <__aeabi_dsub+0x150>
   1706a:	e0c0      	b.n	171ee <__aeabi_dsub+0x2d2>
   1706c:	1b55      	subs	r5, r2, r5
   1706e:	1c69      	adds	r1, r5, #1
   17070:	291f      	cmp	r1, #31
   17072:	dd00      	ble.n	17076 <__aeabi_dsub+0x15a>
   17074:	e0ea      	b.n	1724c <__aeabi_dsub+0x330>
   17076:	221f      	movs	r2, #31
   17078:	1b55      	subs	r5, r2, r5
   1707a:	1c3b      	adds	r3, r7, #0
   1707c:	1c22      	adds	r2, r4, #0
   1707e:	40ab      	lsls	r3, r5
   17080:	40ca      	lsrs	r2, r1
   17082:	40ac      	lsls	r4, r5
   17084:	1e65      	subs	r5, r4, #1
   17086:	41ac      	sbcs	r4, r5
   17088:	4313      	orrs	r3, r2
   1708a:	40cf      	lsrs	r7, r1
   1708c:	431c      	orrs	r4, r3
   1708e:	1c39      	adds	r1, r7, #0
   17090:	2500      	movs	r5, #0
   17092:	e773      	b.n	16f7c <__aeabi_dsub+0x60>
   17094:	2180      	movs	r1, #128	; 0x80
   17096:	4d7e      	ldr	r5, [pc, #504]	; (17290 <__aeabi_dsub+0x374>)
   17098:	2700      	movs	r7, #0
   1709a:	03c9      	lsls	r1, r1, #15
   1709c:	2400      	movs	r4, #0
   1709e:	4b7c      	ldr	r3, [pc, #496]	; (17290 <__aeabi_dsub+0x374>)
   170a0:	0748      	lsls	r0, r1, #29
   170a2:	08e4      	lsrs	r4, r4, #3
   170a4:	4304      	orrs	r4, r0
   170a6:	08c9      	lsrs	r1, r1, #3
   170a8:	429d      	cmp	r5, r3
   170aa:	d050      	beq.n	1714e <__aeabi_dsub+0x232>
   170ac:	0309      	lsls	r1, r1, #12
   170ae:	0b0b      	lsrs	r3, r1, #12
   170b0:	e787      	b.n	16fc2 <__aeabi_dsub+0xa6>
   170b2:	2380      	movs	r3, #128	; 0x80
   170b4:	041b      	lsls	r3, r3, #16
   170b6:	2701      	movs	r7, #1
   170b8:	4652      	mov	r2, sl
   170ba:	400b      	ands	r3, r1
   170bc:	4017      	ands	r7, r2
   170be:	e771      	b.n	16fa4 <__aeabi_dsub+0x88>
   170c0:	1a2a      	subs	r2, r5, r0
   170c2:	4694      	mov	ip, r2
   170c4:	2a00      	cmp	r2, #0
   170c6:	dc00      	bgt.n	170ca <__aeabi_dsub+0x1ae>
   170c8:	e0a1      	b.n	1720e <__aeabi_dsub+0x2f2>
   170ca:	2800      	cmp	r0, #0
   170cc:	d054      	beq.n	17178 <__aeabi_dsub+0x25c>
   170ce:	4870      	ldr	r0, [pc, #448]	; (17290 <__aeabi_dsub+0x374>)
   170d0:	4285      	cmp	r5, r0
   170d2:	d100      	bne.n	170d6 <__aeabi_dsub+0x1ba>
   170d4:	e752      	b.n	16f7c <__aeabi_dsub+0x60>
   170d6:	2080      	movs	r0, #128	; 0x80
   170d8:	0400      	lsls	r0, r0, #16
   170da:	4303      	orrs	r3, r0
   170dc:	4660      	mov	r0, ip
   170de:	2838      	cmp	r0, #56	; 0x38
   170e0:	dd00      	ble.n	170e4 <__aeabi_dsub+0x1c8>
   170e2:	e10e      	b.n	17302 <__aeabi_dsub+0x3e6>
   170e4:	281f      	cmp	r0, #31
   170e6:	dd00      	ble.n	170ea <__aeabi_dsub+0x1ce>
   170e8:	e157      	b.n	1739a <__aeabi_dsub+0x47e>
   170ea:	4662      	mov	r2, ip
   170ec:	2020      	movs	r0, #32
   170ee:	1a80      	subs	r0, r0, r2
   170f0:	1c1e      	adds	r6, r3, #0
   170f2:	4086      	lsls	r6, r0
   170f4:	46b1      	mov	r9, r6
   170f6:	465e      	mov	r6, fp
   170f8:	40d6      	lsrs	r6, r2
   170fa:	464a      	mov	r2, r9
   170fc:	4332      	orrs	r2, r6
   170fe:	465e      	mov	r6, fp
   17100:	4086      	lsls	r6, r0
   17102:	4690      	mov	r8, r2
   17104:	1c30      	adds	r0, r6, #0
   17106:	1e42      	subs	r2, r0, #1
   17108:	4190      	sbcs	r0, r2
   1710a:	4642      	mov	r2, r8
   1710c:	4302      	orrs	r2, r0
   1710e:	4660      	mov	r0, ip
   17110:	40c3      	lsrs	r3, r0
   17112:	1912      	adds	r2, r2, r4
   17114:	42a2      	cmp	r2, r4
   17116:	41a4      	sbcs	r4, r4
   17118:	4264      	negs	r4, r4
   1711a:	1859      	adds	r1, r3, r1
   1711c:	1909      	adds	r1, r1, r4
   1711e:	1c14      	adds	r4, r2, #0
   17120:	0208      	lsls	r0, r1, #8
   17122:	d400      	bmi.n	17126 <__aeabi_dsub+0x20a>
   17124:	e72a      	b.n	16f7c <__aeabi_dsub+0x60>
   17126:	4b5a      	ldr	r3, [pc, #360]	; (17290 <__aeabi_dsub+0x374>)
   17128:	3501      	adds	r5, #1
   1712a:	429d      	cmp	r5, r3
   1712c:	d100      	bne.n	17130 <__aeabi_dsub+0x214>
   1712e:	e131      	b.n	17394 <__aeabi_dsub+0x478>
   17130:	4b58      	ldr	r3, [pc, #352]	; (17294 <__aeabi_dsub+0x378>)
   17132:	0860      	lsrs	r0, r4, #1
   17134:	4019      	ands	r1, r3
   17136:	2301      	movs	r3, #1
   17138:	4023      	ands	r3, r4
   1713a:	1c1c      	adds	r4, r3, #0
   1713c:	4304      	orrs	r4, r0
   1713e:	07cb      	lsls	r3, r1, #31
   17140:	431c      	orrs	r4, r3
   17142:	0849      	lsrs	r1, r1, #1
   17144:	e71a      	b.n	16f7c <__aeabi_dsub+0x60>
   17146:	431e      	orrs	r6, r3
   17148:	d000      	beq.n	1714c <__aeabi_dsub+0x230>
   1714a:	e70a      	b.n	16f62 <__aeabi_dsub+0x46>
   1714c:	e705      	b.n	16f5a <__aeabi_dsub+0x3e>
   1714e:	1c23      	adds	r3, r4, #0
   17150:	430b      	orrs	r3, r1
   17152:	d03b      	beq.n	171cc <__aeabi_dsub+0x2b0>
   17154:	2380      	movs	r3, #128	; 0x80
   17156:	031b      	lsls	r3, r3, #12
   17158:	430b      	orrs	r3, r1
   1715a:	031b      	lsls	r3, r3, #12
   1715c:	0b1b      	lsrs	r3, r3, #12
   1715e:	e730      	b.n	16fc2 <__aeabi_dsub+0xa6>
   17160:	3f01      	subs	r7, #1
   17162:	2f00      	cmp	r7, #0
   17164:	d16d      	bne.n	17242 <__aeabi_dsub+0x326>
   17166:	465e      	mov	r6, fp
   17168:	1ba2      	subs	r2, r4, r6
   1716a:	4294      	cmp	r4, r2
   1716c:	41a4      	sbcs	r4, r4
   1716e:	4264      	negs	r4, r4
   17170:	1ac9      	subs	r1, r1, r3
   17172:	1b09      	subs	r1, r1, r4
   17174:	1c14      	adds	r4, r2, #0
   17176:	e760      	b.n	1703a <__aeabi_dsub+0x11e>
   17178:	4658      	mov	r0, fp
   1717a:	4318      	orrs	r0, r3
   1717c:	d100      	bne.n	17180 <__aeabi_dsub+0x264>
   1717e:	e6fd      	b.n	16f7c <__aeabi_dsub+0x60>
   17180:	2601      	movs	r6, #1
   17182:	4276      	negs	r6, r6
   17184:	44b4      	add	ip, r6
   17186:	4660      	mov	r0, ip
   17188:	2800      	cmp	r0, #0
   1718a:	d000      	beq.n	1718e <__aeabi_dsub+0x272>
   1718c:	e0d0      	b.n	17330 <__aeabi_dsub+0x414>
   1718e:	465e      	mov	r6, fp
   17190:	1932      	adds	r2, r6, r4
   17192:	e7bf      	b.n	17114 <__aeabi_dsub+0x1f8>
   17194:	2f00      	cmp	r7, #0
   17196:	d000      	beq.n	1719a <__aeabi_dsub+0x27e>
   17198:	e080      	b.n	1729c <__aeabi_dsub+0x380>
   1719a:	1c68      	adds	r0, r5, #1
   1719c:	0540      	lsls	r0, r0, #21
   1719e:	0d40      	lsrs	r0, r0, #21
   171a0:	2801      	cmp	r0, #1
   171a2:	dc00      	bgt.n	171a6 <__aeabi_dsub+0x28a>
   171a4:	e0e8      	b.n	17378 <__aeabi_dsub+0x45c>
   171a6:	465a      	mov	r2, fp
   171a8:	1aa2      	subs	r2, r4, r2
   171aa:	4294      	cmp	r4, r2
   171ac:	41bf      	sbcs	r7, r7
   171ae:	1ac8      	subs	r0, r1, r3
   171b0:	427f      	negs	r7, r7
   171b2:	1bc7      	subs	r7, r0, r7
   171b4:	023e      	lsls	r6, r7, #8
   171b6:	d400      	bmi.n	171ba <__aeabi_dsub+0x29e>
   171b8:	e098      	b.n	172ec <__aeabi_dsub+0x3d0>
   171ba:	4658      	mov	r0, fp
   171bc:	1b04      	subs	r4, r0, r4
   171be:	45a3      	cmp	fp, r4
   171c0:	4192      	sbcs	r2, r2
   171c2:	1a59      	subs	r1, r3, r1
   171c4:	4252      	negs	r2, r2
   171c6:	1a8f      	subs	r7, r1, r2
   171c8:	46e2      	mov	sl, ip
   171ca:	e73a      	b.n	17042 <__aeabi_dsub+0x126>
   171cc:	2300      	movs	r3, #0
   171ce:	2400      	movs	r4, #0
   171d0:	e6f7      	b.n	16fc2 <__aeabi_dsub+0xa6>
   171d2:	2380      	movs	r3, #128	; 0x80
   171d4:	041b      	lsls	r3, r3, #16
   171d6:	2701      	movs	r7, #1
   171d8:	4656      	mov	r6, sl
   171da:	400b      	ands	r3, r1
   171dc:	4037      	ands	r7, r6
   171de:	e6e1      	b.n	16fa4 <__aeabi_dsub+0x88>
   171e0:	1c27      	adds	r7, r4, #0
   171e2:	3828      	subs	r0, #40	; 0x28
   171e4:	4087      	lsls	r7, r0
   171e6:	2400      	movs	r4, #0
   171e8:	4295      	cmp	r5, r2
   171ea:	dc00      	bgt.n	171ee <__aeabi_dsub+0x2d2>
   171ec:	e73e      	b.n	1706c <__aeabi_dsub+0x150>
   171ee:	4929      	ldr	r1, [pc, #164]	; (17294 <__aeabi_dsub+0x378>)
   171f0:	1aad      	subs	r5, r5, r2
   171f2:	4039      	ands	r1, r7
   171f4:	e6c2      	b.n	16f7c <__aeabi_dsub+0x60>
   171f6:	1c20      	adds	r0, r4, #0
   171f8:	f000 fa6a 	bl	176d0 <__clzsi2>
   171fc:	3020      	adds	r0, #32
   171fe:	e726      	b.n	1704e <__aeabi_dsub+0x132>
   17200:	465a      	mov	r2, fp
   17202:	431a      	orrs	r2, r3
   17204:	1e53      	subs	r3, r2, #1
   17206:	419a      	sbcs	r2, r3
   17208:	b2d2      	uxtb	r2, r2
   1720a:	2700      	movs	r7, #0
   1720c:	e70e      	b.n	1702c <__aeabi_dsub+0x110>
   1720e:	2a00      	cmp	r2, #0
   17210:	d000      	beq.n	17214 <__aeabi_dsub+0x2f8>
   17212:	e0de      	b.n	173d2 <__aeabi_dsub+0x4b6>
   17214:	1c68      	adds	r0, r5, #1
   17216:	0546      	lsls	r6, r0, #21
   17218:	0d76      	lsrs	r6, r6, #21
   1721a:	2e01      	cmp	r6, #1
   1721c:	dc00      	bgt.n	17220 <__aeabi_dsub+0x304>
   1721e:	e090      	b.n	17342 <__aeabi_dsub+0x426>
   17220:	4d1b      	ldr	r5, [pc, #108]	; (17290 <__aeabi_dsub+0x374>)
   17222:	42a8      	cmp	r0, r5
   17224:	d100      	bne.n	17228 <__aeabi_dsub+0x30c>
   17226:	e0f5      	b.n	17414 <__aeabi_dsub+0x4f8>
   17228:	465e      	mov	r6, fp
   1722a:	1932      	adds	r2, r6, r4
   1722c:	42a2      	cmp	r2, r4
   1722e:	41a4      	sbcs	r4, r4
   17230:	4264      	negs	r4, r4
   17232:	1859      	adds	r1, r3, r1
   17234:	1909      	adds	r1, r1, r4
   17236:	07cc      	lsls	r4, r1, #31
   17238:	0852      	lsrs	r2, r2, #1
   1723a:	4314      	orrs	r4, r2
   1723c:	0849      	lsrs	r1, r1, #1
   1723e:	1c05      	adds	r5, r0, #0
   17240:	e69c      	b.n	16f7c <__aeabi_dsub+0x60>
   17242:	4813      	ldr	r0, [pc, #76]	; (17290 <__aeabi_dsub+0x374>)
   17244:	4285      	cmp	r5, r0
   17246:	d000      	beq.n	1724a <__aeabi_dsub+0x32e>
   17248:	e6d9      	b.n	16ffe <__aeabi_dsub+0xe2>
   1724a:	e697      	b.n	16f7c <__aeabi_dsub+0x60>
   1724c:	1c2b      	adds	r3, r5, #0
   1724e:	3b1f      	subs	r3, #31
   17250:	1c3e      	adds	r6, r7, #0
   17252:	40de      	lsrs	r6, r3
   17254:	1c33      	adds	r3, r6, #0
   17256:	2920      	cmp	r1, #32
   17258:	d06f      	beq.n	1733a <__aeabi_dsub+0x41e>
   1725a:	223f      	movs	r2, #63	; 0x3f
   1725c:	1b55      	subs	r5, r2, r5
   1725e:	40af      	lsls	r7, r5
   17260:	433c      	orrs	r4, r7
   17262:	1e60      	subs	r0, r4, #1
   17264:	4184      	sbcs	r4, r0
   17266:	431c      	orrs	r4, r3
   17268:	2100      	movs	r1, #0
   1726a:	2500      	movs	r5, #0
   1726c:	e686      	b.n	16f7c <__aeabi_dsub+0x60>
   1726e:	1c38      	adds	r0, r7, #0
   17270:	3820      	subs	r0, #32
   17272:	1c1e      	adds	r6, r3, #0
   17274:	40c6      	lsrs	r6, r0
   17276:	1c30      	adds	r0, r6, #0
   17278:	2f20      	cmp	r7, #32
   1727a:	d060      	beq.n	1733e <__aeabi_dsub+0x422>
   1727c:	2240      	movs	r2, #64	; 0x40
   1727e:	1bd7      	subs	r7, r2, r7
   17280:	40bb      	lsls	r3, r7
   17282:	465a      	mov	r2, fp
   17284:	431a      	orrs	r2, r3
   17286:	1e53      	subs	r3, r2, #1
   17288:	419a      	sbcs	r2, r3
   1728a:	4302      	orrs	r2, r0
   1728c:	2700      	movs	r7, #0
   1728e:	e6cd      	b.n	1702c <__aeabi_dsub+0x110>
   17290:	000007ff 	.word	0x000007ff
   17294:	ff7fffff 	.word	0xff7fffff
   17298:	800fffff 	.word	0x800fffff
   1729c:	2d00      	cmp	r5, #0
   1729e:	d037      	beq.n	17310 <__aeabi_dsub+0x3f4>
   172a0:	4db6      	ldr	r5, [pc, #728]	; (1757c <__aeabi_dsub+0x660>)
   172a2:	42a8      	cmp	r0, r5
   172a4:	d100      	bne.n	172a8 <__aeabi_dsub+0x38c>
   172a6:	e08f      	b.n	173c8 <__aeabi_dsub+0x4ac>
   172a8:	2580      	movs	r5, #128	; 0x80
   172aa:	042d      	lsls	r5, r5, #16
   172ac:	427f      	negs	r7, r7
   172ae:	4329      	orrs	r1, r5
   172b0:	2f38      	cmp	r7, #56	; 0x38
   172b2:	dd00      	ble.n	172b6 <__aeabi_dsub+0x39a>
   172b4:	e0a8      	b.n	17408 <__aeabi_dsub+0x4ec>
   172b6:	2f1f      	cmp	r7, #31
   172b8:	dd00      	ble.n	172bc <__aeabi_dsub+0x3a0>
   172ba:	e124      	b.n	17506 <__aeabi_dsub+0x5ea>
   172bc:	2520      	movs	r5, #32
   172be:	1bed      	subs	r5, r5, r7
   172c0:	1c0e      	adds	r6, r1, #0
   172c2:	40ae      	lsls	r6, r5
   172c4:	46b0      	mov	r8, r6
   172c6:	1c26      	adds	r6, r4, #0
   172c8:	40fe      	lsrs	r6, r7
   172ca:	4642      	mov	r2, r8
   172cc:	40ac      	lsls	r4, r5
   172ce:	4316      	orrs	r6, r2
   172d0:	1e65      	subs	r5, r4, #1
   172d2:	41ac      	sbcs	r4, r5
   172d4:	4334      	orrs	r4, r6
   172d6:	40f9      	lsrs	r1, r7
   172d8:	465a      	mov	r2, fp
   172da:	1b14      	subs	r4, r2, r4
   172dc:	45a3      	cmp	fp, r4
   172de:	4192      	sbcs	r2, r2
   172e0:	1a5b      	subs	r3, r3, r1
   172e2:	4252      	negs	r2, r2
   172e4:	1a99      	subs	r1, r3, r2
   172e6:	1c05      	adds	r5, r0, #0
   172e8:	46e2      	mov	sl, ip
   172ea:	e6a6      	b.n	1703a <__aeabi_dsub+0x11e>
   172ec:	1c13      	adds	r3, r2, #0
   172ee:	433b      	orrs	r3, r7
   172f0:	1c14      	adds	r4, r2, #0
   172f2:	2b00      	cmp	r3, #0
   172f4:	d000      	beq.n	172f8 <__aeabi_dsub+0x3dc>
   172f6:	e6a4      	b.n	17042 <__aeabi_dsub+0x126>
   172f8:	2700      	movs	r7, #0
   172fa:	2100      	movs	r1, #0
   172fc:	2500      	movs	r5, #0
   172fe:	2400      	movs	r4, #0
   17300:	e6cd      	b.n	1709e <__aeabi_dsub+0x182>
   17302:	465a      	mov	r2, fp
   17304:	431a      	orrs	r2, r3
   17306:	1e53      	subs	r3, r2, #1
   17308:	419a      	sbcs	r2, r3
   1730a:	b2d2      	uxtb	r2, r2
   1730c:	2300      	movs	r3, #0
   1730e:	e700      	b.n	17112 <__aeabi_dsub+0x1f6>
   17310:	1c0d      	adds	r5, r1, #0
   17312:	4325      	orrs	r5, r4
   17314:	d058      	beq.n	173c8 <__aeabi_dsub+0x4ac>
   17316:	43ff      	mvns	r7, r7
   17318:	2f00      	cmp	r7, #0
   1731a:	d151      	bne.n	173c0 <__aeabi_dsub+0x4a4>
   1731c:	465a      	mov	r2, fp
   1731e:	1b14      	subs	r4, r2, r4
   17320:	45a3      	cmp	fp, r4
   17322:	4192      	sbcs	r2, r2
   17324:	1a59      	subs	r1, r3, r1
   17326:	4252      	negs	r2, r2
   17328:	1a89      	subs	r1, r1, r2
   1732a:	1c05      	adds	r5, r0, #0
   1732c:	46e2      	mov	sl, ip
   1732e:	e684      	b.n	1703a <__aeabi_dsub+0x11e>
   17330:	4892      	ldr	r0, [pc, #584]	; (1757c <__aeabi_dsub+0x660>)
   17332:	4285      	cmp	r5, r0
   17334:	d000      	beq.n	17338 <__aeabi_dsub+0x41c>
   17336:	e6d1      	b.n	170dc <__aeabi_dsub+0x1c0>
   17338:	e620      	b.n	16f7c <__aeabi_dsub+0x60>
   1733a:	2700      	movs	r7, #0
   1733c:	e790      	b.n	17260 <__aeabi_dsub+0x344>
   1733e:	2300      	movs	r3, #0
   17340:	e79f      	b.n	17282 <__aeabi_dsub+0x366>
   17342:	1c08      	adds	r0, r1, #0
   17344:	4320      	orrs	r0, r4
   17346:	2d00      	cmp	r5, #0
   17348:	d000      	beq.n	1734c <__aeabi_dsub+0x430>
   1734a:	e0c2      	b.n	174d2 <__aeabi_dsub+0x5b6>
   1734c:	2800      	cmp	r0, #0
   1734e:	d100      	bne.n	17352 <__aeabi_dsub+0x436>
   17350:	e0ef      	b.n	17532 <__aeabi_dsub+0x616>
   17352:	4658      	mov	r0, fp
   17354:	4318      	orrs	r0, r3
   17356:	d100      	bne.n	1735a <__aeabi_dsub+0x43e>
   17358:	e610      	b.n	16f7c <__aeabi_dsub+0x60>
   1735a:	4658      	mov	r0, fp
   1735c:	1902      	adds	r2, r0, r4
   1735e:	42a2      	cmp	r2, r4
   17360:	41a4      	sbcs	r4, r4
   17362:	4264      	negs	r4, r4
   17364:	1859      	adds	r1, r3, r1
   17366:	1909      	adds	r1, r1, r4
   17368:	1c14      	adds	r4, r2, #0
   1736a:	020a      	lsls	r2, r1, #8
   1736c:	d400      	bmi.n	17370 <__aeabi_dsub+0x454>
   1736e:	e605      	b.n	16f7c <__aeabi_dsub+0x60>
   17370:	4b83      	ldr	r3, [pc, #524]	; (17580 <__aeabi_dsub+0x664>)
   17372:	2501      	movs	r5, #1
   17374:	4019      	ands	r1, r3
   17376:	e601      	b.n	16f7c <__aeabi_dsub+0x60>
   17378:	1c08      	adds	r0, r1, #0
   1737a:	4320      	orrs	r0, r4
   1737c:	2d00      	cmp	r5, #0
   1737e:	d138      	bne.n	173f2 <__aeabi_dsub+0x4d6>
   17380:	2800      	cmp	r0, #0
   17382:	d16f      	bne.n	17464 <__aeabi_dsub+0x548>
   17384:	4659      	mov	r1, fp
   17386:	4319      	orrs	r1, r3
   17388:	d003      	beq.n	17392 <__aeabi_dsub+0x476>
   1738a:	1c19      	adds	r1, r3, #0
   1738c:	465c      	mov	r4, fp
   1738e:	46e2      	mov	sl, ip
   17390:	e5f4      	b.n	16f7c <__aeabi_dsub+0x60>
   17392:	2700      	movs	r7, #0
   17394:	2100      	movs	r1, #0
   17396:	2400      	movs	r4, #0
   17398:	e681      	b.n	1709e <__aeabi_dsub+0x182>
   1739a:	4660      	mov	r0, ip
   1739c:	3820      	subs	r0, #32
   1739e:	1c1a      	adds	r2, r3, #0
   173a0:	40c2      	lsrs	r2, r0
   173a2:	4666      	mov	r6, ip
   173a4:	1c10      	adds	r0, r2, #0
   173a6:	2e20      	cmp	r6, #32
   173a8:	d100      	bne.n	173ac <__aeabi_dsub+0x490>
   173aa:	e0aa      	b.n	17502 <__aeabi_dsub+0x5e6>
   173ac:	2240      	movs	r2, #64	; 0x40
   173ae:	1b92      	subs	r2, r2, r6
   173b0:	4093      	lsls	r3, r2
   173b2:	465a      	mov	r2, fp
   173b4:	431a      	orrs	r2, r3
   173b6:	1e53      	subs	r3, r2, #1
   173b8:	419a      	sbcs	r2, r3
   173ba:	4302      	orrs	r2, r0
   173bc:	2300      	movs	r3, #0
   173be:	e6a8      	b.n	17112 <__aeabi_dsub+0x1f6>
   173c0:	4d6e      	ldr	r5, [pc, #440]	; (1757c <__aeabi_dsub+0x660>)
   173c2:	42a8      	cmp	r0, r5
   173c4:	d000      	beq.n	173c8 <__aeabi_dsub+0x4ac>
   173c6:	e773      	b.n	172b0 <__aeabi_dsub+0x394>
   173c8:	1c19      	adds	r1, r3, #0
   173ca:	465c      	mov	r4, fp
   173cc:	1c05      	adds	r5, r0, #0
   173ce:	46e2      	mov	sl, ip
   173d0:	e5d4      	b.n	16f7c <__aeabi_dsub+0x60>
   173d2:	2d00      	cmp	r5, #0
   173d4:	d122      	bne.n	1741c <__aeabi_dsub+0x500>
   173d6:	1c0d      	adds	r5, r1, #0
   173d8:	4325      	orrs	r5, r4
   173da:	d076      	beq.n	174ca <__aeabi_dsub+0x5ae>
   173dc:	43d5      	mvns	r5, r2
   173de:	2d00      	cmp	r5, #0
   173e0:	d170      	bne.n	174c4 <__aeabi_dsub+0x5a8>
   173e2:	445c      	add	r4, fp
   173e4:	455c      	cmp	r4, fp
   173e6:	4192      	sbcs	r2, r2
   173e8:	1859      	adds	r1, r3, r1
   173ea:	4252      	negs	r2, r2
   173ec:	1889      	adds	r1, r1, r2
   173ee:	1c05      	adds	r5, r0, #0
   173f0:	e696      	b.n	17120 <__aeabi_dsub+0x204>
   173f2:	2800      	cmp	r0, #0
   173f4:	d14c      	bne.n	17490 <__aeabi_dsub+0x574>
   173f6:	4659      	mov	r1, fp
   173f8:	4319      	orrs	r1, r3
   173fa:	d100      	bne.n	173fe <__aeabi_dsub+0x4e2>
   173fc:	e64a      	b.n	17094 <__aeabi_dsub+0x178>
   173fe:	1c19      	adds	r1, r3, #0
   17400:	465c      	mov	r4, fp
   17402:	46e2      	mov	sl, ip
   17404:	4d5d      	ldr	r5, [pc, #372]	; (1757c <__aeabi_dsub+0x660>)
   17406:	e5b9      	b.n	16f7c <__aeabi_dsub+0x60>
   17408:	430c      	orrs	r4, r1
   1740a:	1e61      	subs	r1, r4, #1
   1740c:	418c      	sbcs	r4, r1
   1740e:	b2e4      	uxtb	r4, r4
   17410:	2100      	movs	r1, #0
   17412:	e761      	b.n	172d8 <__aeabi_dsub+0x3bc>
   17414:	1c05      	adds	r5, r0, #0
   17416:	2100      	movs	r1, #0
   17418:	2400      	movs	r4, #0
   1741a:	e640      	b.n	1709e <__aeabi_dsub+0x182>
   1741c:	4d57      	ldr	r5, [pc, #348]	; (1757c <__aeabi_dsub+0x660>)
   1741e:	42a8      	cmp	r0, r5
   17420:	d053      	beq.n	174ca <__aeabi_dsub+0x5ae>
   17422:	4255      	negs	r5, r2
   17424:	2280      	movs	r2, #128	; 0x80
   17426:	0416      	lsls	r6, r2, #16
   17428:	4331      	orrs	r1, r6
   1742a:	2d38      	cmp	r5, #56	; 0x38
   1742c:	dc7b      	bgt.n	17526 <__aeabi_dsub+0x60a>
   1742e:	2d1f      	cmp	r5, #31
   17430:	dd00      	ble.n	17434 <__aeabi_dsub+0x518>
   17432:	e08c      	b.n	1754e <__aeabi_dsub+0x632>
   17434:	2220      	movs	r2, #32
   17436:	1b56      	subs	r6, r2, r5
   17438:	1c0a      	adds	r2, r1, #0
   1743a:	46b4      	mov	ip, r6
   1743c:	40b2      	lsls	r2, r6
   1743e:	1c26      	adds	r6, r4, #0
   17440:	40ee      	lsrs	r6, r5
   17442:	4332      	orrs	r2, r6
   17444:	4690      	mov	r8, r2
   17446:	4662      	mov	r2, ip
   17448:	4094      	lsls	r4, r2
   1744a:	1e66      	subs	r6, r4, #1
   1744c:	41b4      	sbcs	r4, r6
   1744e:	4642      	mov	r2, r8
   17450:	4314      	orrs	r4, r2
   17452:	40e9      	lsrs	r1, r5
   17454:	445c      	add	r4, fp
   17456:	455c      	cmp	r4, fp
   17458:	4192      	sbcs	r2, r2
   1745a:	18cb      	adds	r3, r1, r3
   1745c:	4252      	negs	r2, r2
   1745e:	1899      	adds	r1, r3, r2
   17460:	1c05      	adds	r5, r0, #0
   17462:	e65d      	b.n	17120 <__aeabi_dsub+0x204>
   17464:	4658      	mov	r0, fp
   17466:	4318      	orrs	r0, r3
   17468:	d100      	bne.n	1746c <__aeabi_dsub+0x550>
   1746a:	e587      	b.n	16f7c <__aeabi_dsub+0x60>
   1746c:	465e      	mov	r6, fp
   1746e:	1ba7      	subs	r7, r4, r6
   17470:	42bc      	cmp	r4, r7
   17472:	4192      	sbcs	r2, r2
   17474:	1ac8      	subs	r0, r1, r3
   17476:	4252      	negs	r2, r2
   17478:	1a80      	subs	r0, r0, r2
   1747a:	0206      	lsls	r6, r0, #8
   1747c:	d560      	bpl.n	17540 <__aeabi_dsub+0x624>
   1747e:	4658      	mov	r0, fp
   17480:	1b04      	subs	r4, r0, r4
   17482:	45a3      	cmp	fp, r4
   17484:	4192      	sbcs	r2, r2
   17486:	1a59      	subs	r1, r3, r1
   17488:	4252      	negs	r2, r2
   1748a:	1a89      	subs	r1, r1, r2
   1748c:	46e2      	mov	sl, ip
   1748e:	e575      	b.n	16f7c <__aeabi_dsub+0x60>
   17490:	4658      	mov	r0, fp
   17492:	4318      	orrs	r0, r3
   17494:	d033      	beq.n	174fe <__aeabi_dsub+0x5e2>
   17496:	0748      	lsls	r0, r1, #29
   17498:	08e4      	lsrs	r4, r4, #3
   1749a:	4304      	orrs	r4, r0
   1749c:	2080      	movs	r0, #128	; 0x80
   1749e:	08c9      	lsrs	r1, r1, #3
   174a0:	0300      	lsls	r0, r0, #12
   174a2:	4201      	tst	r1, r0
   174a4:	d008      	beq.n	174b8 <__aeabi_dsub+0x59c>
   174a6:	08dd      	lsrs	r5, r3, #3
   174a8:	4205      	tst	r5, r0
   174aa:	d105      	bne.n	174b8 <__aeabi_dsub+0x59c>
   174ac:	4659      	mov	r1, fp
   174ae:	08ca      	lsrs	r2, r1, #3
   174b0:	075c      	lsls	r4, r3, #29
   174b2:	4314      	orrs	r4, r2
   174b4:	1c29      	adds	r1, r5, #0
   174b6:	46e2      	mov	sl, ip
   174b8:	0f63      	lsrs	r3, r4, #29
   174ba:	00c9      	lsls	r1, r1, #3
   174bc:	4319      	orrs	r1, r3
   174be:	00e4      	lsls	r4, r4, #3
   174c0:	4d2e      	ldr	r5, [pc, #184]	; (1757c <__aeabi_dsub+0x660>)
   174c2:	e55b      	b.n	16f7c <__aeabi_dsub+0x60>
   174c4:	4a2d      	ldr	r2, [pc, #180]	; (1757c <__aeabi_dsub+0x660>)
   174c6:	4290      	cmp	r0, r2
   174c8:	d1af      	bne.n	1742a <__aeabi_dsub+0x50e>
   174ca:	1c19      	adds	r1, r3, #0
   174cc:	465c      	mov	r4, fp
   174ce:	1c05      	adds	r5, r0, #0
   174d0:	e554      	b.n	16f7c <__aeabi_dsub+0x60>
   174d2:	2800      	cmp	r0, #0
   174d4:	d030      	beq.n	17538 <__aeabi_dsub+0x61c>
   174d6:	4658      	mov	r0, fp
   174d8:	4318      	orrs	r0, r3
   174da:	d010      	beq.n	174fe <__aeabi_dsub+0x5e2>
   174dc:	2580      	movs	r5, #128	; 0x80
   174de:	0748      	lsls	r0, r1, #29
   174e0:	08e4      	lsrs	r4, r4, #3
   174e2:	08c9      	lsrs	r1, r1, #3
   174e4:	032d      	lsls	r5, r5, #12
   174e6:	4304      	orrs	r4, r0
   174e8:	4229      	tst	r1, r5
   174ea:	d0e5      	beq.n	174b8 <__aeabi_dsub+0x59c>
   174ec:	08d8      	lsrs	r0, r3, #3
   174ee:	4228      	tst	r0, r5
   174f0:	d1e2      	bne.n	174b8 <__aeabi_dsub+0x59c>
   174f2:	465d      	mov	r5, fp
   174f4:	08ea      	lsrs	r2, r5, #3
   174f6:	075c      	lsls	r4, r3, #29
   174f8:	4314      	orrs	r4, r2
   174fa:	1c01      	adds	r1, r0, #0
   174fc:	e7dc      	b.n	174b8 <__aeabi_dsub+0x59c>
   174fe:	4d1f      	ldr	r5, [pc, #124]	; (1757c <__aeabi_dsub+0x660>)
   17500:	e53c      	b.n	16f7c <__aeabi_dsub+0x60>
   17502:	2300      	movs	r3, #0
   17504:	e755      	b.n	173b2 <__aeabi_dsub+0x496>
   17506:	1c3d      	adds	r5, r7, #0
   17508:	3d20      	subs	r5, #32
   1750a:	1c0e      	adds	r6, r1, #0
   1750c:	40ee      	lsrs	r6, r5
   1750e:	1c35      	adds	r5, r6, #0
   17510:	2f20      	cmp	r7, #32
   17512:	d02e      	beq.n	17572 <__aeabi_dsub+0x656>
   17514:	2640      	movs	r6, #64	; 0x40
   17516:	1bf7      	subs	r7, r6, r7
   17518:	40b9      	lsls	r1, r7
   1751a:	430c      	orrs	r4, r1
   1751c:	1e61      	subs	r1, r4, #1
   1751e:	418c      	sbcs	r4, r1
   17520:	432c      	orrs	r4, r5
   17522:	2100      	movs	r1, #0
   17524:	e6d8      	b.n	172d8 <__aeabi_dsub+0x3bc>
   17526:	430c      	orrs	r4, r1
   17528:	1e61      	subs	r1, r4, #1
   1752a:	418c      	sbcs	r4, r1
   1752c:	b2e4      	uxtb	r4, r4
   1752e:	2100      	movs	r1, #0
   17530:	e790      	b.n	17454 <__aeabi_dsub+0x538>
   17532:	1c19      	adds	r1, r3, #0
   17534:	465c      	mov	r4, fp
   17536:	e521      	b.n	16f7c <__aeabi_dsub+0x60>
   17538:	1c19      	adds	r1, r3, #0
   1753a:	465c      	mov	r4, fp
   1753c:	4d0f      	ldr	r5, [pc, #60]	; (1757c <__aeabi_dsub+0x660>)
   1753e:	e51d      	b.n	16f7c <__aeabi_dsub+0x60>
   17540:	1c03      	adds	r3, r0, #0
   17542:	433b      	orrs	r3, r7
   17544:	d100      	bne.n	17548 <__aeabi_dsub+0x62c>
   17546:	e724      	b.n	17392 <__aeabi_dsub+0x476>
   17548:	1c01      	adds	r1, r0, #0
   1754a:	1c3c      	adds	r4, r7, #0
   1754c:	e516      	b.n	16f7c <__aeabi_dsub+0x60>
   1754e:	2620      	movs	r6, #32
   17550:	4276      	negs	r6, r6
   17552:	1976      	adds	r6, r6, r5
   17554:	1c0a      	adds	r2, r1, #0
   17556:	40f2      	lsrs	r2, r6
   17558:	4690      	mov	r8, r2
   1755a:	2d20      	cmp	r5, #32
   1755c:	d00b      	beq.n	17576 <__aeabi_dsub+0x65a>
   1755e:	2640      	movs	r6, #64	; 0x40
   17560:	1b75      	subs	r5, r6, r5
   17562:	40a9      	lsls	r1, r5
   17564:	430c      	orrs	r4, r1
   17566:	1e61      	subs	r1, r4, #1
   17568:	418c      	sbcs	r4, r1
   1756a:	4645      	mov	r5, r8
   1756c:	432c      	orrs	r4, r5
   1756e:	2100      	movs	r1, #0
   17570:	e770      	b.n	17454 <__aeabi_dsub+0x538>
   17572:	2100      	movs	r1, #0
   17574:	e7d1      	b.n	1751a <__aeabi_dsub+0x5fe>
   17576:	2100      	movs	r1, #0
   17578:	e7f4      	b.n	17564 <__aeabi_dsub+0x648>
   1757a:	46c0      	nop			; (mov r8, r8)
   1757c:	000007ff 	.word	0x000007ff
   17580:	ff7fffff 	.word	0xff7fffff

00017584 <__aeabi_d2iz>:
   17584:	b570      	push	{r4, r5, r6, lr}
   17586:	1c0b      	adds	r3, r1, #0
   17588:	4c12      	ldr	r4, [pc, #72]	; (175d4 <__aeabi_d2iz+0x50>)
   1758a:	0309      	lsls	r1, r1, #12
   1758c:	0b0e      	lsrs	r6, r1, #12
   1758e:	0059      	lsls	r1, r3, #1
   17590:	1c02      	adds	r2, r0, #0
   17592:	0d49      	lsrs	r1, r1, #21
   17594:	0fdd      	lsrs	r5, r3, #31
   17596:	2000      	movs	r0, #0
   17598:	42a1      	cmp	r1, r4
   1759a:	dd11      	ble.n	175c0 <__aeabi_d2iz+0x3c>
   1759c:	480e      	ldr	r0, [pc, #56]	; (175d8 <__aeabi_d2iz+0x54>)
   1759e:	4281      	cmp	r1, r0
   175a0:	dc0f      	bgt.n	175c2 <__aeabi_d2iz+0x3e>
   175a2:	2080      	movs	r0, #128	; 0x80
   175a4:	0340      	lsls	r0, r0, #13
   175a6:	4306      	orrs	r6, r0
   175a8:	480c      	ldr	r0, [pc, #48]	; (175dc <__aeabi_d2iz+0x58>)
   175aa:	1a40      	subs	r0, r0, r1
   175ac:	281f      	cmp	r0, #31
   175ae:	dd0b      	ble.n	175c8 <__aeabi_d2iz+0x44>
   175b0:	4a0b      	ldr	r2, [pc, #44]	; (175e0 <__aeabi_d2iz+0x5c>)
   175b2:	1a52      	subs	r2, r2, r1
   175b4:	40d6      	lsrs	r6, r2
   175b6:	1c32      	adds	r2, r6, #0
   175b8:	4250      	negs	r0, r2
   175ba:	2d00      	cmp	r5, #0
   175bc:	d100      	bne.n	175c0 <__aeabi_d2iz+0x3c>
   175be:	1c10      	adds	r0, r2, #0
   175c0:	bd70      	pop	{r4, r5, r6, pc}
   175c2:	4b08      	ldr	r3, [pc, #32]	; (175e4 <__aeabi_d2iz+0x60>)
   175c4:	18e8      	adds	r0, r5, r3
   175c6:	e7fb      	b.n	175c0 <__aeabi_d2iz+0x3c>
   175c8:	4b07      	ldr	r3, [pc, #28]	; (175e8 <__aeabi_d2iz+0x64>)
   175ca:	40c2      	lsrs	r2, r0
   175cc:	18c9      	adds	r1, r1, r3
   175ce:	408e      	lsls	r6, r1
   175d0:	4332      	orrs	r2, r6
   175d2:	e7f1      	b.n	175b8 <__aeabi_d2iz+0x34>
   175d4:	000003fe 	.word	0x000003fe
   175d8:	0000041d 	.word	0x0000041d
   175dc:	00000433 	.word	0x00000433
   175e0:	00000413 	.word	0x00000413
   175e4:	7fffffff 	.word	0x7fffffff
   175e8:	fffffbed 	.word	0xfffffbed

000175ec <__aeabi_i2d>:
   175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175ee:	1e04      	subs	r4, r0, #0
   175f0:	d031      	beq.n	17656 <__aeabi_i2d+0x6a>
   175f2:	0fc7      	lsrs	r7, r0, #31
   175f4:	d000      	beq.n	175f8 <__aeabi_i2d+0xc>
   175f6:	4244      	negs	r4, r0
   175f8:	1c20      	adds	r0, r4, #0
   175fa:	f000 f869 	bl	176d0 <__clzsi2>
   175fe:	4d18      	ldr	r5, [pc, #96]	; (17660 <__aeabi_i2d+0x74>)
   17600:	1a2d      	subs	r5, r5, r0
   17602:	280a      	cmp	r0, #10
   17604:	dd19      	ble.n	1763a <__aeabi_i2d+0x4e>
   17606:	380b      	subs	r0, #11
   17608:	4084      	lsls	r4, r0
   1760a:	0324      	lsls	r4, r4, #12
   1760c:	056d      	lsls	r5, r5, #21
   1760e:	0b24      	lsrs	r4, r4, #12
   17610:	0d6d      	lsrs	r5, r5, #21
   17612:	1c3a      	adds	r2, r7, #0
   17614:	2600      	movs	r6, #0
   17616:	2000      	movs	r0, #0
   17618:	2100      	movs	r1, #0
   1761a:	0d0b      	lsrs	r3, r1, #20
   1761c:	0324      	lsls	r4, r4, #12
   1761e:	0b24      	lsrs	r4, r4, #12
   17620:	051b      	lsls	r3, r3, #20
   17622:	4323      	orrs	r3, r4
   17624:	4c0f      	ldr	r4, [pc, #60]	; (17664 <__aeabi_i2d+0x78>)
   17626:	052d      	lsls	r5, r5, #20
   17628:	401c      	ands	r4, r3
   1762a:	432c      	orrs	r4, r5
   1762c:	0064      	lsls	r4, r4, #1
   1762e:	0864      	lsrs	r4, r4, #1
   17630:	07d3      	lsls	r3, r2, #31
   17632:	1c21      	adds	r1, r4, #0
   17634:	1c30      	adds	r0, r6, #0
   17636:	4319      	orrs	r1, r3
   17638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1763a:	1c06      	adds	r6, r0, #0
   1763c:	3615      	adds	r6, #21
   1763e:	1c23      	adds	r3, r4, #0
   17640:	40b3      	lsls	r3, r6
   17642:	1c1e      	adds	r6, r3, #0
   17644:	230b      	movs	r3, #11
   17646:	1a18      	subs	r0, r3, r0
   17648:	40c4      	lsrs	r4, r0
   1764a:	0324      	lsls	r4, r4, #12
   1764c:	056d      	lsls	r5, r5, #21
   1764e:	0b24      	lsrs	r4, r4, #12
   17650:	0d6d      	lsrs	r5, r5, #21
   17652:	1c3a      	adds	r2, r7, #0
   17654:	e7df      	b.n	17616 <__aeabi_i2d+0x2a>
   17656:	2200      	movs	r2, #0
   17658:	2500      	movs	r5, #0
   1765a:	2400      	movs	r4, #0
   1765c:	2600      	movs	r6, #0
   1765e:	e7da      	b.n	17616 <__aeabi_i2d+0x2a>
   17660:	0000041e 	.word	0x0000041e
   17664:	800fffff 	.word	0x800fffff

00017668 <__aeabi_ui2d>:
   17668:	b510      	push	{r4, lr}
   1766a:	1e04      	subs	r4, r0, #0
   1766c:	d028      	beq.n	176c0 <__aeabi_ui2d+0x58>
   1766e:	f000 f82f 	bl	176d0 <__clzsi2>
   17672:	4a15      	ldr	r2, [pc, #84]	; (176c8 <__aeabi_ui2d+0x60>)
   17674:	1a12      	subs	r2, r2, r0
   17676:	280a      	cmp	r0, #10
   17678:	dd15      	ble.n	176a6 <__aeabi_ui2d+0x3e>
   1767a:	380b      	subs	r0, #11
   1767c:	4084      	lsls	r4, r0
   1767e:	0324      	lsls	r4, r4, #12
   17680:	0552      	lsls	r2, r2, #21
   17682:	0b24      	lsrs	r4, r4, #12
   17684:	0d52      	lsrs	r2, r2, #21
   17686:	2300      	movs	r3, #0
   17688:	2000      	movs	r0, #0
   1768a:	2100      	movs	r1, #0
   1768c:	0324      	lsls	r4, r4, #12
   1768e:	1c18      	adds	r0, r3, #0
   17690:	0d0b      	lsrs	r3, r1, #20
   17692:	0b24      	lsrs	r4, r4, #12
   17694:	051b      	lsls	r3, r3, #20
   17696:	4323      	orrs	r3, r4
   17698:	4c0c      	ldr	r4, [pc, #48]	; (176cc <__aeabi_ui2d+0x64>)
   1769a:	0512      	lsls	r2, r2, #20
   1769c:	401c      	ands	r4, r3
   1769e:	4314      	orrs	r4, r2
   176a0:	0064      	lsls	r4, r4, #1
   176a2:	0861      	lsrs	r1, r4, #1
   176a4:	bd10      	pop	{r4, pc}
   176a6:	1c03      	adds	r3, r0, #0
   176a8:	3315      	adds	r3, #21
   176aa:	1c21      	adds	r1, r4, #0
   176ac:	4099      	lsls	r1, r3
   176ae:	1c0b      	adds	r3, r1, #0
   176b0:	210b      	movs	r1, #11
   176b2:	1a08      	subs	r0, r1, r0
   176b4:	40c4      	lsrs	r4, r0
   176b6:	0324      	lsls	r4, r4, #12
   176b8:	0552      	lsls	r2, r2, #21
   176ba:	0b24      	lsrs	r4, r4, #12
   176bc:	0d52      	lsrs	r2, r2, #21
   176be:	e7e3      	b.n	17688 <__aeabi_ui2d+0x20>
   176c0:	2200      	movs	r2, #0
   176c2:	2400      	movs	r4, #0
   176c4:	2300      	movs	r3, #0
   176c6:	e7df      	b.n	17688 <__aeabi_ui2d+0x20>
   176c8:	0000041e 	.word	0x0000041e
   176cc:	800fffff 	.word	0x800fffff

000176d0 <__clzsi2>:
   176d0:	211c      	movs	r1, #28
   176d2:	2301      	movs	r3, #1
   176d4:	041b      	lsls	r3, r3, #16
   176d6:	4298      	cmp	r0, r3
   176d8:	d301      	bcc.n	176de <__clzsi2+0xe>
   176da:	0c00      	lsrs	r0, r0, #16
   176dc:	3910      	subs	r1, #16
   176de:	0a1b      	lsrs	r3, r3, #8
   176e0:	4298      	cmp	r0, r3
   176e2:	d301      	bcc.n	176e8 <__clzsi2+0x18>
   176e4:	0a00      	lsrs	r0, r0, #8
   176e6:	3908      	subs	r1, #8
   176e8:	091b      	lsrs	r3, r3, #4
   176ea:	4298      	cmp	r0, r3
   176ec:	d301      	bcc.n	176f2 <__clzsi2+0x22>
   176ee:	0900      	lsrs	r0, r0, #4
   176f0:	3904      	subs	r1, #4
   176f2:	a202      	add	r2, pc, #8	; (adr r2, 176fc <__clzsi2+0x2c>)
   176f4:	5c10      	ldrb	r0, [r2, r0]
   176f6:	1840      	adds	r0, r0, r1
   176f8:	4770      	bx	lr
   176fa:	46c0      	nop			; (mov r8, r8)
   176fc:	02020304 	.word	0x02020304
   17700:	01010101 	.word	0x01010101
	...

0001770c <__divdi3>:
   1770c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1770e:	4644      	mov	r4, r8
   17710:	465f      	mov	r7, fp
   17712:	4656      	mov	r6, sl
   17714:	464d      	mov	r5, r9
   17716:	b4f0      	push	{r4, r5, r6, r7}
   17718:	1c1c      	adds	r4, r3, #0
   1771a:	b085      	sub	sp, #20
   1771c:	2900      	cmp	r1, #0
   1771e:	da00      	bge.n	17722 <__divdi3+0x16>
   17720:	e0db      	b.n	178da <__divdi3+0x1ce>
   17722:	1c0f      	adds	r7, r1, #0
   17724:	2100      	movs	r1, #0
   17726:	1c06      	adds	r6, r0, #0
   17728:	468a      	mov	sl, r1
   1772a:	1c10      	adds	r0, r2, #0
   1772c:	1c19      	adds	r1, r3, #0
   1772e:	2c00      	cmp	r4, #0
   17730:	da00      	bge.n	17734 <__divdi3+0x28>
   17732:	e0c9      	b.n	178c8 <__divdi3+0x1bc>
   17734:	9601      	str	r6, [sp, #4]
   17736:	9000      	str	r0, [sp, #0]
   17738:	4689      	mov	r9, r1
   1773a:	4680      	mov	r8, r0
   1773c:	2900      	cmp	r1, #0
   1773e:	d151      	bne.n	177e4 <__divdi3+0xd8>
   17740:	42b8      	cmp	r0, r7
   17742:	d800      	bhi.n	17746 <__divdi3+0x3a>
   17744:	e071      	b.n	1782a <__divdi3+0x11e>
   17746:	f7ff ffc3 	bl	176d0 <__clzsi2>
   1774a:	2800      	cmp	r0, #0
   1774c:	d009      	beq.n	17762 <__divdi3+0x56>
   1774e:	2320      	movs	r3, #32
   17750:	4645      	mov	r5, r8
   17752:	1c31      	adds	r1, r6, #0
   17754:	1a1b      	subs	r3, r3, r0
   17756:	4085      	lsls	r5, r0
   17758:	4087      	lsls	r7, r0
   1775a:	40d9      	lsrs	r1, r3
   1775c:	46a8      	mov	r8, r5
   1775e:	430f      	orrs	r7, r1
   17760:	4086      	lsls	r6, r0
   17762:	4642      	mov	r2, r8
   17764:	0c15      	lsrs	r5, r2, #16
   17766:	0413      	lsls	r3, r2, #16
   17768:	0c1b      	lsrs	r3, r3, #16
   1776a:	1c29      	adds	r1, r5, #0
   1776c:	1c38      	adds	r0, r7, #0
   1776e:	469b      	mov	fp, r3
   17770:	f7fe f832 	bl	157d8 <__aeabi_uidiv>
   17774:	465b      	mov	r3, fp
   17776:	4343      	muls	r3, r0
   17778:	1c04      	adds	r4, r0, #0
   1777a:	1c29      	adds	r1, r5, #0
   1777c:	1c38      	adds	r0, r7, #0
   1777e:	4699      	mov	r9, r3
   17780:	f7fe f86e 	bl	15860 <__aeabi_uidivmod>
   17784:	0c33      	lsrs	r3, r6, #16
   17786:	0408      	lsls	r0, r1, #16
   17788:	4318      	orrs	r0, r3
   1778a:	4581      	cmp	r9, r0
   1778c:	d909      	bls.n	177a2 <__divdi3+0x96>
   1778e:	4440      	add	r0, r8
   17790:	1e63      	subs	r3, r4, #1
   17792:	4580      	cmp	r8, r0
   17794:	d900      	bls.n	17798 <__divdi3+0x8c>
   17796:	e178      	b.n	17a8a <__divdi3+0x37e>
   17798:	4581      	cmp	r9, r0
   1779a:	d800      	bhi.n	1779e <__divdi3+0x92>
   1779c:	e175      	b.n	17a8a <__divdi3+0x37e>
   1779e:	3c02      	subs	r4, #2
   177a0:	4440      	add	r0, r8
   177a2:	4649      	mov	r1, r9
   177a4:	1a41      	subs	r1, r0, r1
   177a6:	4689      	mov	r9, r1
   177a8:	1c08      	adds	r0, r1, #0
   177aa:	1c29      	adds	r1, r5, #0
   177ac:	f7fe f814 	bl	157d8 <__aeabi_uidiv>
   177b0:	465a      	mov	r2, fp
   177b2:	4342      	muls	r2, r0
   177b4:	1c07      	adds	r7, r0, #0
   177b6:	1c29      	adds	r1, r5, #0
   177b8:	4648      	mov	r0, r9
   177ba:	4693      	mov	fp, r2
   177bc:	f7fe f850 	bl	15860 <__aeabi_uidivmod>
   177c0:	0436      	lsls	r6, r6, #16
   177c2:	0409      	lsls	r1, r1, #16
   177c4:	0c36      	lsrs	r6, r6, #16
   177c6:	430e      	orrs	r6, r1
   177c8:	45b3      	cmp	fp, r6
   177ca:	d907      	bls.n	177dc <__divdi3+0xd0>
   177cc:	4446      	add	r6, r8
   177ce:	1e7b      	subs	r3, r7, #1
   177d0:	45b0      	cmp	r8, r6
   177d2:	d802      	bhi.n	177da <__divdi3+0xce>
   177d4:	3f02      	subs	r7, #2
   177d6:	45b3      	cmp	fp, r6
   177d8:	d800      	bhi.n	177dc <__divdi3+0xd0>
   177da:	1c1f      	adds	r7, r3, #0
   177dc:	0424      	lsls	r4, r4, #16
   177de:	4327      	orrs	r7, r4
   177e0:	2400      	movs	r4, #0
   177e2:	e003      	b.n	177ec <__divdi3+0xe0>
   177e4:	42b9      	cmp	r1, r7
   177e6:	d911      	bls.n	1780c <__divdi3+0x100>
   177e8:	2400      	movs	r4, #0
   177ea:	2700      	movs	r7, #0
   177ec:	4652      	mov	r2, sl
   177ee:	1c38      	adds	r0, r7, #0
   177f0:	1c21      	adds	r1, r4, #0
   177f2:	2a00      	cmp	r2, #0
   177f4:	d003      	beq.n	177fe <__divdi3+0xf2>
   177f6:	1c3b      	adds	r3, r7, #0
   177f8:	2100      	movs	r1, #0
   177fa:	4258      	negs	r0, r3
   177fc:	41a1      	sbcs	r1, r4
   177fe:	b005      	add	sp, #20
   17800:	bc3c      	pop	{r2, r3, r4, r5}
   17802:	4690      	mov	r8, r2
   17804:	4699      	mov	r9, r3
   17806:	46a2      	mov	sl, r4
   17808:	46ab      	mov	fp, r5
   1780a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1780c:	1c08      	adds	r0, r1, #0
   1780e:	f7ff ff5f 	bl	176d0 <__clzsi2>
   17812:	1e04      	subs	r4, r0, #0
   17814:	d000      	beq.n	17818 <__divdi3+0x10c>
   17816:	e0bf      	b.n	17998 <__divdi3+0x28c>
   17818:	45b9      	cmp	r9, r7
   1781a:	d200      	bcs.n	1781e <__divdi3+0x112>
   1781c:	e142      	b.n	17aa4 <__divdi3+0x398>
   1781e:	9d01      	ldr	r5, [sp, #4]
   17820:	9900      	ldr	r1, [sp, #0]
   17822:	1c07      	adds	r7, r0, #0
   17824:	428d      	cmp	r5, r1
   17826:	4147      	adcs	r7, r0
   17828:	e7e0      	b.n	177ec <__divdi3+0xe0>
   1782a:	2800      	cmp	r0, #0
   1782c:	d104      	bne.n	17838 <__divdi3+0x12c>
   1782e:	2001      	movs	r0, #1
   17830:	2100      	movs	r1, #0
   17832:	f7fd ffd1 	bl	157d8 <__aeabi_uidiv>
   17836:	4680      	mov	r8, r0
   17838:	4640      	mov	r0, r8
   1783a:	f7ff ff49 	bl	176d0 <__clzsi2>
   1783e:	2800      	cmp	r0, #0
   17840:	d152      	bne.n	178e8 <__divdi3+0x1dc>
   17842:	4641      	mov	r1, r8
   17844:	4644      	mov	r4, r8
   17846:	040b      	lsls	r3, r1, #16
   17848:	1b3c      	subs	r4, r7, r4
   1784a:	0c1b      	lsrs	r3, r3, #16
   1784c:	46a3      	mov	fp, r4
   1784e:	0c0d      	lsrs	r5, r1, #16
   17850:	9300      	str	r3, [sp, #0]
   17852:	2401      	movs	r4, #1
   17854:	1c29      	adds	r1, r5, #0
   17856:	4658      	mov	r0, fp
   17858:	f7fd ffbe 	bl	157d8 <__aeabi_uidiv>
   1785c:	9f00      	ldr	r7, [sp, #0]
   1785e:	4681      	mov	r9, r0
   17860:	4347      	muls	r7, r0
   17862:	1c29      	adds	r1, r5, #0
   17864:	4658      	mov	r0, fp
   17866:	f7fd fffb 	bl	15860 <__aeabi_uidivmod>
   1786a:	0c33      	lsrs	r3, r6, #16
   1786c:	0409      	lsls	r1, r1, #16
   1786e:	4319      	orrs	r1, r3
   17870:	428f      	cmp	r7, r1
   17872:	d908      	bls.n	17886 <__divdi3+0x17a>
   17874:	464b      	mov	r3, r9
   17876:	4441      	add	r1, r8
   17878:	3b01      	subs	r3, #1
   1787a:	4588      	cmp	r8, r1
   1787c:	d802      	bhi.n	17884 <__divdi3+0x178>
   1787e:	428f      	cmp	r7, r1
   17880:	d900      	bls.n	17884 <__divdi3+0x178>
   17882:	e11a      	b.n	17aba <__divdi3+0x3ae>
   17884:	4699      	mov	r9, r3
   17886:	1bc9      	subs	r1, r1, r7
   17888:	468b      	mov	fp, r1
   1788a:	1c08      	adds	r0, r1, #0
   1788c:	1c29      	adds	r1, r5, #0
   1788e:	f7fd ffa3 	bl	157d8 <__aeabi_uidiv>
   17892:	9b00      	ldr	r3, [sp, #0]
   17894:	1c29      	adds	r1, r5, #0
   17896:	4343      	muls	r3, r0
   17898:	1c07      	adds	r7, r0, #0
   1789a:	4658      	mov	r0, fp
   1789c:	9300      	str	r3, [sp, #0]
   1789e:	f7fd ffdf 	bl	15860 <__aeabi_uidivmod>
   178a2:	0436      	lsls	r6, r6, #16
   178a4:	9d00      	ldr	r5, [sp, #0]
   178a6:	0409      	lsls	r1, r1, #16
   178a8:	0c36      	lsrs	r6, r6, #16
   178aa:	430e      	orrs	r6, r1
   178ac:	42b5      	cmp	r5, r6
   178ae:	d907      	bls.n	178c0 <__divdi3+0x1b4>
   178b0:	4446      	add	r6, r8
   178b2:	1e7b      	subs	r3, r7, #1
   178b4:	45b0      	cmp	r8, r6
   178b6:	d802      	bhi.n	178be <__divdi3+0x1b2>
   178b8:	3f02      	subs	r7, #2
   178ba:	42b5      	cmp	r5, r6
   178bc:	d800      	bhi.n	178c0 <__divdi3+0x1b4>
   178be:	1c1f      	adds	r7, r3, #0
   178c0:	4649      	mov	r1, r9
   178c2:	040e      	lsls	r6, r1, #16
   178c4:	4337      	orrs	r7, r6
   178c6:	e791      	b.n	177ec <__divdi3+0xe0>
   178c8:	4652      	mov	r2, sl
   178ca:	43d2      	mvns	r2, r2
   178cc:	1c03      	adds	r3, r0, #0
   178ce:	1c0c      	adds	r4, r1, #0
   178d0:	4692      	mov	sl, r2
   178d2:	2100      	movs	r1, #0
   178d4:	4258      	negs	r0, r3
   178d6:	41a1      	sbcs	r1, r4
   178d8:	e72c      	b.n	17734 <__divdi3+0x28>
   178da:	2700      	movs	r7, #0
   178dc:	4246      	negs	r6, r0
   178de:	418f      	sbcs	r7, r1
   178e0:	2101      	movs	r1, #1
   178e2:	4249      	negs	r1, r1
   178e4:	468a      	mov	sl, r1
   178e6:	e720      	b.n	1772a <__divdi3+0x1e>
   178e8:	2320      	movs	r3, #32
   178ea:	1a1b      	subs	r3, r3, r0
   178ec:	4642      	mov	r2, r8
   178ee:	1c35      	adds	r5, r6, #0
   178f0:	4082      	lsls	r2, r0
   178f2:	1c3c      	adds	r4, r7, #0
   178f4:	40dd      	lsrs	r5, r3
   178f6:	40dc      	lsrs	r4, r3
   178f8:	4087      	lsls	r7, r0
   178fa:	1c2b      	adds	r3, r5, #0
   178fc:	0c15      	lsrs	r5, r2, #16
   178fe:	433b      	orrs	r3, r7
   17900:	1c29      	adds	r1, r5, #0
   17902:	4086      	lsls	r6, r0
   17904:	1c20      	adds	r0, r4, #0
   17906:	9300      	str	r3, [sp, #0]
   17908:	0417      	lsls	r7, r2, #16
   1790a:	4690      	mov	r8, r2
   1790c:	f7fd ff64 	bl	157d8 <__aeabi_uidiv>
   17910:	0c3f      	lsrs	r7, r7, #16
   17912:	1c01      	adds	r1, r0, #0
   17914:	4379      	muls	r1, r7
   17916:	4681      	mov	r9, r0
   17918:	468b      	mov	fp, r1
   1791a:	1c20      	adds	r0, r4, #0
   1791c:	1c29      	adds	r1, r5, #0
   1791e:	f7fd ff9f 	bl	15860 <__aeabi_uidivmod>
   17922:	9c00      	ldr	r4, [sp, #0]
   17924:	0409      	lsls	r1, r1, #16
   17926:	0c23      	lsrs	r3, r4, #16
   17928:	4319      	orrs	r1, r3
   1792a:	458b      	cmp	fp, r1
   1792c:	d90c      	bls.n	17948 <__divdi3+0x23c>
   1792e:	464b      	mov	r3, r9
   17930:	4441      	add	r1, r8
   17932:	3b01      	subs	r3, #1
   17934:	4588      	cmp	r8, r1
   17936:	d900      	bls.n	1793a <__divdi3+0x22e>
   17938:	e0bd      	b.n	17ab6 <__divdi3+0x3aa>
   1793a:	458b      	cmp	fp, r1
   1793c:	d800      	bhi.n	17940 <__divdi3+0x234>
   1793e:	e0ba      	b.n	17ab6 <__divdi3+0x3aa>
   17940:	2202      	movs	r2, #2
   17942:	4252      	negs	r2, r2
   17944:	4491      	add	r9, r2
   17946:	4441      	add	r1, r8
   17948:	465c      	mov	r4, fp
   1794a:	1b0c      	subs	r4, r1, r4
   1794c:	1c20      	adds	r0, r4, #0
   1794e:	1c29      	adds	r1, r5, #0
   17950:	9401      	str	r4, [sp, #4]
   17952:	f7fd ff41 	bl	157d8 <__aeabi_uidiv>
   17956:	1c39      	adds	r1, r7, #0
   17958:	4341      	muls	r1, r0
   1795a:	1c04      	adds	r4, r0, #0
   1795c:	468b      	mov	fp, r1
   1795e:	9801      	ldr	r0, [sp, #4]
   17960:	1c29      	adds	r1, r5, #0
   17962:	f7fd ff7d 	bl	15860 <__aeabi_uidivmod>
   17966:	9a00      	ldr	r2, [sp, #0]
   17968:	0409      	lsls	r1, r1, #16
   1796a:	0413      	lsls	r3, r2, #16
   1796c:	0c1b      	lsrs	r3, r3, #16
   1796e:	4319      	orrs	r1, r3
   17970:	458b      	cmp	fp, r1
   17972:	d909      	bls.n	17988 <__divdi3+0x27c>
   17974:	4441      	add	r1, r8
   17976:	1e63      	subs	r3, r4, #1
   17978:	4588      	cmp	r8, r1
   1797a:	d900      	bls.n	1797e <__divdi3+0x272>
   1797c:	e097      	b.n	17aae <__divdi3+0x3a2>
   1797e:	458b      	cmp	fp, r1
   17980:	d800      	bhi.n	17984 <__divdi3+0x278>
   17982:	e094      	b.n	17aae <__divdi3+0x3a2>
   17984:	3c02      	subs	r4, #2
   17986:	4441      	add	r1, r8
   17988:	465b      	mov	r3, fp
   1798a:	1acb      	subs	r3, r1, r3
   1798c:	4649      	mov	r1, r9
   1798e:	469b      	mov	fp, r3
   17990:	040b      	lsls	r3, r1, #16
   17992:	431c      	orrs	r4, r3
   17994:	9700      	str	r7, [sp, #0]
   17996:	e75d      	b.n	17854 <__divdi3+0x148>
   17998:	9d00      	ldr	r5, [sp, #0]
   1799a:	2320      	movs	r3, #32
   1799c:	1a1b      	subs	r3, r3, r0
   1799e:	464a      	mov	r2, r9
   179a0:	4082      	lsls	r2, r0
   179a2:	40dd      	lsrs	r5, r3
   179a4:	4315      	orrs	r5, r2
   179a6:	1c39      	adds	r1, r7, #0
   179a8:	9a00      	ldr	r2, [sp, #0]
   179aa:	40d9      	lsrs	r1, r3
   179ac:	4082      	lsls	r2, r0
   179ae:	4688      	mov	r8, r1
   179b0:	1c31      	adds	r1, r6, #0
   179b2:	9200      	str	r2, [sp, #0]
   179b4:	40d9      	lsrs	r1, r3
   179b6:	1c3a      	adds	r2, r7, #0
   179b8:	4082      	lsls	r2, r0
   179ba:	1c0b      	adds	r3, r1, #0
   179bc:	4313      	orrs	r3, r2
   179be:	9301      	str	r3, [sp, #4]
   179c0:	0c2f      	lsrs	r7, r5, #16
   179c2:	042b      	lsls	r3, r5, #16
   179c4:	0c1b      	lsrs	r3, r3, #16
   179c6:	1c39      	adds	r1, r7, #0
   179c8:	4640      	mov	r0, r8
   179ca:	9302      	str	r3, [sp, #8]
   179cc:	f7fd ff04 	bl	157d8 <__aeabi_uidiv>
   179d0:	9a02      	ldr	r2, [sp, #8]
   179d2:	4681      	mov	r9, r0
   179d4:	4342      	muls	r2, r0
   179d6:	1c39      	adds	r1, r7, #0
   179d8:	4640      	mov	r0, r8
   179da:	4693      	mov	fp, r2
   179dc:	f7fd ff40 	bl	15860 <__aeabi_uidivmod>
   179e0:	9a01      	ldr	r2, [sp, #4]
   179e2:	0409      	lsls	r1, r1, #16
   179e4:	0c13      	lsrs	r3, r2, #16
   179e6:	4319      	orrs	r1, r3
   179e8:	458b      	cmp	fp, r1
   179ea:	d90a      	bls.n	17a02 <__divdi3+0x2f6>
   179ec:	464b      	mov	r3, r9
   179ee:	1949      	adds	r1, r1, r5
   179f0:	3b01      	subs	r3, #1
   179f2:	428d      	cmp	r5, r1
   179f4:	d85d      	bhi.n	17ab2 <__divdi3+0x3a6>
   179f6:	458b      	cmp	fp, r1
   179f8:	d95b      	bls.n	17ab2 <__divdi3+0x3a6>
   179fa:	2302      	movs	r3, #2
   179fc:	425b      	negs	r3, r3
   179fe:	4499      	add	r9, r3
   17a00:	1949      	adds	r1, r1, r5
   17a02:	465a      	mov	r2, fp
   17a04:	1a8a      	subs	r2, r1, r2
   17a06:	1c10      	adds	r0, r2, #0
   17a08:	1c39      	adds	r1, r7, #0
   17a0a:	9203      	str	r2, [sp, #12]
   17a0c:	f7fd fee4 	bl	157d8 <__aeabi_uidiv>
   17a10:	9b02      	ldr	r3, [sp, #8]
   17a12:	4680      	mov	r8, r0
   17a14:	4343      	muls	r3, r0
   17a16:	1c39      	adds	r1, r7, #0
   17a18:	9803      	ldr	r0, [sp, #12]
   17a1a:	469b      	mov	fp, r3
   17a1c:	f7fd ff20 	bl	15860 <__aeabi_uidivmod>
   17a20:	9a01      	ldr	r2, [sp, #4]
   17a22:	0409      	lsls	r1, r1, #16
   17a24:	0413      	lsls	r3, r2, #16
   17a26:	0c1b      	lsrs	r3, r3, #16
   17a28:	4319      	orrs	r1, r3
   17a2a:	458b      	cmp	fp, r1
   17a2c:	d90a      	bls.n	17a44 <__divdi3+0x338>
   17a2e:	4643      	mov	r3, r8
   17a30:	1949      	adds	r1, r1, r5
   17a32:	3b01      	subs	r3, #1
   17a34:	428d      	cmp	r5, r1
   17a36:	d838      	bhi.n	17aaa <__divdi3+0x39e>
   17a38:	458b      	cmp	fp, r1
   17a3a:	d936      	bls.n	17aaa <__divdi3+0x39e>
   17a3c:	2302      	movs	r3, #2
   17a3e:	425b      	negs	r3, r3
   17a40:	4498      	add	r8, r3
   17a42:	1949      	adds	r1, r1, r5
   17a44:	465d      	mov	r5, fp
   17a46:	1b4d      	subs	r5, r1, r5
   17a48:	46ab      	mov	fp, r5
   17a4a:	4649      	mov	r1, r9
   17a4c:	9d00      	ldr	r5, [sp, #0]
   17a4e:	040f      	lsls	r7, r1, #16
   17a50:	4642      	mov	r2, r8
   17a52:	4317      	orrs	r7, r2
   17a54:	042a      	lsls	r2, r5, #16
   17a56:	0c12      	lsrs	r2, r2, #16
   17a58:	043b      	lsls	r3, r7, #16
   17a5a:	0c2d      	lsrs	r5, r5, #16
   17a5c:	0c1b      	lsrs	r3, r3, #16
   17a5e:	0c38      	lsrs	r0, r7, #16
   17a60:	1c11      	adds	r1, r2, #0
   17a62:	4359      	muls	r1, r3
   17a64:	4342      	muls	r2, r0
   17a66:	436b      	muls	r3, r5
   17a68:	4368      	muls	r0, r5
   17a6a:	18d3      	adds	r3, r2, r3
   17a6c:	0c0d      	lsrs	r5, r1, #16
   17a6e:	195b      	adds	r3, r3, r5
   17a70:	468c      	mov	ip, r1
   17a72:	429a      	cmp	r2, r3
   17a74:	d902      	bls.n	17a7c <__divdi3+0x370>
   17a76:	2280      	movs	r2, #128	; 0x80
   17a78:	0252      	lsls	r2, r2, #9
   17a7a:	1880      	adds	r0, r0, r2
   17a7c:	0c1d      	lsrs	r5, r3, #16
   17a7e:	1940      	adds	r0, r0, r5
   17a80:	4583      	cmp	fp, r0
   17a82:	d30c      	bcc.n	17a9e <__divdi3+0x392>
   17a84:	d003      	beq.n	17a8e <__divdi3+0x382>
   17a86:	2400      	movs	r4, #0
   17a88:	e6b0      	b.n	177ec <__divdi3+0xe0>
   17a8a:	1c1c      	adds	r4, r3, #0
   17a8c:	e689      	b.n	177a2 <__divdi3+0x96>
   17a8e:	4665      	mov	r5, ip
   17a90:	042a      	lsls	r2, r5, #16
   17a92:	041b      	lsls	r3, r3, #16
   17a94:	0c12      	lsrs	r2, r2, #16
   17a96:	189b      	adds	r3, r3, r2
   17a98:	40a6      	lsls	r6, r4
   17a9a:	429e      	cmp	r6, r3
   17a9c:	d2f3      	bcs.n	17a86 <__divdi3+0x37a>
   17a9e:	3f01      	subs	r7, #1
   17aa0:	2400      	movs	r4, #0
   17aa2:	e6a3      	b.n	177ec <__divdi3+0xe0>
   17aa4:	2400      	movs	r4, #0
   17aa6:	2701      	movs	r7, #1
   17aa8:	e6a0      	b.n	177ec <__divdi3+0xe0>
   17aaa:	4698      	mov	r8, r3
   17aac:	e7ca      	b.n	17a44 <__divdi3+0x338>
   17aae:	1c1c      	adds	r4, r3, #0
   17ab0:	e76a      	b.n	17988 <__divdi3+0x27c>
   17ab2:	4699      	mov	r9, r3
   17ab4:	e7a5      	b.n	17a02 <__divdi3+0x2f6>
   17ab6:	4699      	mov	r9, r3
   17ab8:	e746      	b.n	17948 <__divdi3+0x23c>
   17aba:	2202      	movs	r2, #2
   17abc:	4252      	negs	r2, r2
   17abe:	4491      	add	r9, r2
   17ac0:	4441      	add	r1, r8
   17ac2:	e6e0      	b.n	17886 <__divdi3+0x17a>

00017ac4 <__udivdi3>:
   17ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ac6:	465f      	mov	r7, fp
   17ac8:	4656      	mov	r6, sl
   17aca:	464d      	mov	r5, r9
   17acc:	4644      	mov	r4, r8
   17ace:	b4f0      	push	{r4, r5, r6, r7}
   17ad0:	1c0d      	adds	r5, r1, #0
   17ad2:	b085      	sub	sp, #20
   17ad4:	1c06      	adds	r6, r0, #0
   17ad6:	4692      	mov	sl, r2
   17ad8:	4698      	mov	r8, r3
   17ada:	9002      	str	r0, [sp, #8]
   17adc:	9101      	str	r1, [sp, #4]
   17ade:	9203      	str	r2, [sp, #12]
   17ae0:	1c1f      	adds	r7, r3, #0
   17ae2:	1c14      	adds	r4, r2, #0
   17ae4:	4683      	mov	fp, r0
   17ae6:	46a9      	mov	r9, r5
   17ae8:	2b00      	cmp	r3, #0
   17aea:	d159      	bne.n	17ba0 <__udivdi3+0xdc>
   17aec:	42aa      	cmp	r2, r5
   17aee:	d969      	bls.n	17bc4 <__udivdi3+0x100>
   17af0:	1c10      	adds	r0, r2, #0
   17af2:	f7ff fded 	bl	176d0 <__clzsi2>
   17af6:	2800      	cmp	r0, #0
   17af8:	d00a      	beq.n	17b10 <__udivdi3+0x4c>
   17afa:	2320      	movs	r3, #32
   17afc:	1a1b      	subs	r3, r3, r0
   17afe:	1c31      	adds	r1, r6, #0
   17b00:	40d9      	lsrs	r1, r3
   17b02:	4085      	lsls	r5, r0
   17b04:	1c0b      	adds	r3, r1, #0
   17b06:	432b      	orrs	r3, r5
   17b08:	4086      	lsls	r6, r0
   17b0a:	4084      	lsls	r4, r0
   17b0c:	4699      	mov	r9, r3
   17b0e:	46b3      	mov	fp, r6
   17b10:	0c25      	lsrs	r5, r4, #16
   17b12:	0423      	lsls	r3, r4, #16
   17b14:	0c1b      	lsrs	r3, r3, #16
   17b16:	1c29      	adds	r1, r5, #0
   17b18:	4648      	mov	r0, r9
   17b1a:	4698      	mov	r8, r3
   17b1c:	f7fd fe5c 	bl	157d8 <__aeabi_uidiv>
   17b20:	4646      	mov	r6, r8
   17b22:	1c07      	adds	r7, r0, #0
   17b24:	4346      	muls	r6, r0
   17b26:	1c29      	adds	r1, r5, #0
   17b28:	4648      	mov	r0, r9
   17b2a:	f7fd fe99 	bl	15860 <__aeabi_uidivmod>
   17b2e:	465a      	mov	r2, fp
   17b30:	0409      	lsls	r1, r1, #16
   17b32:	0c13      	lsrs	r3, r2, #16
   17b34:	4319      	orrs	r1, r3
   17b36:	428e      	cmp	r6, r1
   17b38:	d909      	bls.n	17b4e <__udivdi3+0x8a>
   17b3a:	1909      	adds	r1, r1, r4
   17b3c:	1e7b      	subs	r3, r7, #1
   17b3e:	428c      	cmp	r4, r1
   17b40:	d900      	bls.n	17b44 <__udivdi3+0x80>
   17b42:	e157      	b.n	17df4 <__udivdi3+0x330>
   17b44:	428e      	cmp	r6, r1
   17b46:	d800      	bhi.n	17b4a <__udivdi3+0x86>
   17b48:	e154      	b.n	17df4 <__udivdi3+0x330>
   17b4a:	3f02      	subs	r7, #2
   17b4c:	1909      	adds	r1, r1, r4
   17b4e:	1b89      	subs	r1, r1, r6
   17b50:	4689      	mov	r9, r1
   17b52:	1c08      	adds	r0, r1, #0
   17b54:	1c29      	adds	r1, r5, #0
   17b56:	f7fd fe3f 	bl	157d8 <__aeabi_uidiv>
   17b5a:	4643      	mov	r3, r8
   17b5c:	4343      	muls	r3, r0
   17b5e:	1c06      	adds	r6, r0, #0
   17b60:	1c29      	adds	r1, r5, #0
   17b62:	4648      	mov	r0, r9
   17b64:	4698      	mov	r8, r3
   17b66:	f7fd fe7b 	bl	15860 <__aeabi_uidivmod>
   17b6a:	465a      	mov	r2, fp
   17b6c:	0413      	lsls	r3, r2, #16
   17b6e:	0409      	lsls	r1, r1, #16
   17b70:	0c1b      	lsrs	r3, r3, #16
   17b72:	4319      	orrs	r1, r3
   17b74:	4588      	cmp	r8, r1
   17b76:	d908      	bls.n	17b8a <__udivdi3+0xc6>
   17b78:	1909      	adds	r1, r1, r4
   17b7a:	1e73      	subs	r3, r6, #1
   17b7c:	428c      	cmp	r4, r1
   17b7e:	d900      	bls.n	17b82 <__udivdi3+0xbe>
   17b80:	e136      	b.n	17df0 <__udivdi3+0x32c>
   17b82:	3e02      	subs	r6, #2
   17b84:	4588      	cmp	r8, r1
   17b86:	d800      	bhi.n	17b8a <__udivdi3+0xc6>
   17b88:	e132      	b.n	17df0 <__udivdi3+0x32c>
   17b8a:	0438      	lsls	r0, r7, #16
   17b8c:	4330      	orrs	r0, r6
   17b8e:	2700      	movs	r7, #0
   17b90:	1c39      	adds	r1, r7, #0
   17b92:	b005      	add	sp, #20
   17b94:	bc3c      	pop	{r2, r3, r4, r5}
   17b96:	4690      	mov	r8, r2
   17b98:	4699      	mov	r9, r3
   17b9a:	46a2      	mov	sl, r4
   17b9c:	46ab      	mov	fp, r5
   17b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ba0:	9a01      	ldr	r2, [sp, #4]
   17ba2:	4293      	cmp	r3, r2
   17ba4:	d862      	bhi.n	17c6c <__udivdi3+0x1a8>
   17ba6:	1c18      	adds	r0, r3, #0
   17ba8:	f7ff fd92 	bl	176d0 <__clzsi2>
   17bac:	1e04      	subs	r4, r0, #0
   17bae:	d160      	bne.n	17c72 <__udivdi3+0x1ae>
   17bb0:	9b01      	ldr	r3, [sp, #4]
   17bb2:	429f      	cmp	r7, r3
   17bb4:	d200      	bcs.n	17bb8 <__udivdi3+0xf4>
   17bb6:	e12c      	b.n	17e12 <__udivdi3+0x34e>
   17bb8:	9f02      	ldr	r7, [sp, #8]
   17bba:	9903      	ldr	r1, [sp, #12]
   17bbc:	428f      	cmp	r7, r1
   17bbe:	4160      	adcs	r0, r4
   17bc0:	2700      	movs	r7, #0
   17bc2:	e7e5      	b.n	17b90 <__udivdi3+0xcc>
   17bc4:	2a00      	cmp	r2, #0
   17bc6:	d104      	bne.n	17bd2 <__udivdi3+0x10e>
   17bc8:	2001      	movs	r0, #1
   17bca:	2100      	movs	r1, #0
   17bcc:	f7fd fe04 	bl	157d8 <__aeabi_uidiv>
   17bd0:	1c04      	adds	r4, r0, #0
   17bd2:	1c20      	adds	r0, r4, #0
   17bd4:	f7ff fd7c 	bl	176d0 <__clzsi2>
   17bd8:	2800      	cmp	r0, #0
   17bda:	d000      	beq.n	17bde <__udivdi3+0x11a>
   17bdc:	e0b9      	b.n	17d52 <__udivdi3+0x28e>
   17bde:	0423      	lsls	r3, r4, #16
   17be0:	1b2d      	subs	r5, r5, r4
   17be2:	0c1b      	lsrs	r3, r3, #16
   17be4:	46a9      	mov	r9, r5
   17be6:	0c26      	lsrs	r6, r4, #16
   17be8:	4698      	mov	r8, r3
   17bea:	2701      	movs	r7, #1
   17bec:	1c31      	adds	r1, r6, #0
   17bee:	4648      	mov	r0, r9
   17bf0:	f7fd fdf2 	bl	157d8 <__aeabi_uidiv>
   17bf4:	4641      	mov	r1, r8
   17bf6:	4341      	muls	r1, r0
   17bf8:	1c05      	adds	r5, r0, #0
   17bfa:	468a      	mov	sl, r1
   17bfc:	4648      	mov	r0, r9
   17bfe:	1c31      	adds	r1, r6, #0
   17c00:	f7fd fe2e 	bl	15860 <__aeabi_uidivmod>
   17c04:	465a      	mov	r2, fp
   17c06:	0408      	lsls	r0, r1, #16
   17c08:	0c13      	lsrs	r3, r2, #16
   17c0a:	4318      	orrs	r0, r3
   17c0c:	4582      	cmp	sl, r0
   17c0e:	d907      	bls.n	17c20 <__udivdi3+0x15c>
   17c10:	1900      	adds	r0, r0, r4
   17c12:	1e6b      	subs	r3, r5, #1
   17c14:	4284      	cmp	r4, r0
   17c16:	d802      	bhi.n	17c1e <__udivdi3+0x15a>
   17c18:	4582      	cmp	sl, r0
   17c1a:	d900      	bls.n	17c1e <__udivdi3+0x15a>
   17c1c:	e110      	b.n	17e40 <__udivdi3+0x37c>
   17c1e:	1c1d      	adds	r5, r3, #0
   17c20:	4653      	mov	r3, sl
   17c22:	1ac3      	subs	r3, r0, r3
   17c24:	1c18      	adds	r0, r3, #0
   17c26:	1c31      	adds	r1, r6, #0
   17c28:	469a      	mov	sl, r3
   17c2a:	f7fd fdd5 	bl	157d8 <__aeabi_uidiv>
   17c2e:	4641      	mov	r1, r8
   17c30:	4341      	muls	r1, r0
   17c32:	4681      	mov	r9, r0
   17c34:	4688      	mov	r8, r1
   17c36:	4650      	mov	r0, sl
   17c38:	1c31      	adds	r1, r6, #0
   17c3a:	f7fd fe11 	bl	15860 <__aeabi_uidivmod>
   17c3e:	465a      	mov	r2, fp
   17c40:	0413      	lsls	r3, r2, #16
   17c42:	0409      	lsls	r1, r1, #16
   17c44:	0c1b      	lsrs	r3, r3, #16
   17c46:	4319      	orrs	r1, r3
   17c48:	4588      	cmp	r8, r1
   17c4a:	d90b      	bls.n	17c64 <__udivdi3+0x1a0>
   17c4c:	464b      	mov	r3, r9
   17c4e:	1909      	adds	r1, r1, r4
   17c50:	3b01      	subs	r3, #1
   17c52:	428c      	cmp	r4, r1
   17c54:	d900      	bls.n	17c58 <__udivdi3+0x194>
   17c56:	e0cf      	b.n	17df8 <__udivdi3+0x334>
   17c58:	4588      	cmp	r8, r1
   17c5a:	d800      	bhi.n	17c5e <__udivdi3+0x19a>
   17c5c:	e0cc      	b.n	17df8 <__udivdi3+0x334>
   17c5e:	2302      	movs	r3, #2
   17c60:	425b      	negs	r3, r3
   17c62:	4499      	add	r9, r3
   17c64:	0428      	lsls	r0, r5, #16
   17c66:	4649      	mov	r1, r9
   17c68:	4308      	orrs	r0, r1
   17c6a:	e791      	b.n	17b90 <__udivdi3+0xcc>
   17c6c:	2700      	movs	r7, #0
   17c6e:	2000      	movs	r0, #0
   17c70:	e78e      	b.n	17b90 <__udivdi3+0xcc>
   17c72:	2320      	movs	r3, #32
   17c74:	1a1b      	subs	r3, r3, r0
   17c76:	4642      	mov	r2, r8
   17c78:	4657      	mov	r7, sl
   17c7a:	4082      	lsls	r2, r0
   17c7c:	40df      	lsrs	r7, r3
   17c7e:	4317      	orrs	r7, r2
   17c80:	4652      	mov	r2, sl
   17c82:	4082      	lsls	r2, r0
   17c84:	9201      	str	r2, [sp, #4]
   17c86:	1c32      	adds	r2, r6, #0
   17c88:	40da      	lsrs	r2, r3
   17c8a:	1c29      	adds	r1, r5, #0
   17c8c:	40d9      	lsrs	r1, r3
   17c8e:	4085      	lsls	r5, r0
   17c90:	1c13      	adds	r3, r2, #0
   17c92:	432b      	orrs	r3, r5
   17c94:	9302      	str	r3, [sp, #8]
   17c96:	0c3d      	lsrs	r5, r7, #16
   17c98:	043b      	lsls	r3, r7, #16
   17c9a:	0c1b      	lsrs	r3, r3, #16
   17c9c:	4688      	mov	r8, r1
   17c9e:	1c08      	adds	r0, r1, #0
   17ca0:	1c29      	adds	r1, r5, #0
   17ca2:	469a      	mov	sl, r3
   17ca4:	f7fd fd98 	bl	157d8 <__aeabi_uidiv>
   17ca8:	4653      	mov	r3, sl
   17caa:	4343      	muls	r3, r0
   17cac:	4681      	mov	r9, r0
   17cae:	1c29      	adds	r1, r5, #0
   17cb0:	4640      	mov	r0, r8
   17cb2:	469b      	mov	fp, r3
   17cb4:	f7fd fdd4 	bl	15860 <__aeabi_uidivmod>
   17cb8:	9a02      	ldr	r2, [sp, #8]
   17cba:	0409      	lsls	r1, r1, #16
   17cbc:	0c13      	lsrs	r3, r2, #16
   17cbe:	4319      	orrs	r1, r3
   17cc0:	458b      	cmp	fp, r1
   17cc2:	d906      	bls.n	17cd2 <__udivdi3+0x20e>
   17cc4:	464b      	mov	r3, r9
   17cc6:	19c9      	adds	r1, r1, r7
   17cc8:	3b01      	subs	r3, #1
   17cca:	428f      	cmp	r7, r1
   17ccc:	d800      	bhi.n	17cd0 <__udivdi3+0x20c>
   17cce:	e0ab      	b.n	17e28 <__udivdi3+0x364>
   17cd0:	4699      	mov	r9, r3
   17cd2:	465a      	mov	r2, fp
   17cd4:	1a8a      	subs	r2, r1, r2
   17cd6:	1c10      	adds	r0, r2, #0
   17cd8:	1c29      	adds	r1, r5, #0
   17cda:	4693      	mov	fp, r2
   17cdc:	f7fd fd7c 	bl	157d8 <__aeabi_uidiv>
   17ce0:	4653      	mov	r3, sl
   17ce2:	4343      	muls	r3, r0
   17ce4:	1c29      	adds	r1, r5, #0
   17ce6:	4680      	mov	r8, r0
   17ce8:	4658      	mov	r0, fp
   17cea:	469a      	mov	sl, r3
   17cec:	f7fd fdb8 	bl	15860 <__aeabi_uidivmod>
   17cf0:	9a02      	ldr	r2, [sp, #8]
   17cf2:	0409      	lsls	r1, r1, #16
   17cf4:	0415      	lsls	r5, r2, #16
   17cf6:	0c2d      	lsrs	r5, r5, #16
   17cf8:	4329      	orrs	r1, r5
   17cfa:	458a      	cmp	sl, r1
   17cfc:	d906      	bls.n	17d0c <__udivdi3+0x248>
   17cfe:	4643      	mov	r3, r8
   17d00:	19c9      	adds	r1, r1, r7
   17d02:	3b01      	subs	r3, #1
   17d04:	428f      	cmp	r7, r1
   17d06:	d800      	bhi.n	17d0a <__udivdi3+0x246>
   17d08:	e086      	b.n	17e18 <__udivdi3+0x354>
   17d0a:	4698      	mov	r8, r3
   17d0c:	4657      	mov	r7, sl
   17d0e:	1bcf      	subs	r7, r1, r7
   17d10:	46ba      	mov	sl, r7
   17d12:	4649      	mov	r1, r9
   17d14:	9f01      	ldr	r7, [sp, #4]
   17d16:	0408      	lsls	r0, r1, #16
   17d18:	4642      	mov	r2, r8
   17d1a:	4310      	orrs	r0, r2
   17d1c:	043d      	lsls	r5, r7, #16
   17d1e:	0c2d      	lsrs	r5, r5, #16
   17d20:	0403      	lsls	r3, r0, #16
   17d22:	0c3f      	lsrs	r7, r7, #16
   17d24:	0c1b      	lsrs	r3, r3, #16
   17d26:	0c02      	lsrs	r2, r0, #16
   17d28:	1c29      	adds	r1, r5, #0
   17d2a:	4359      	muls	r1, r3
   17d2c:	4355      	muls	r5, r2
   17d2e:	437b      	muls	r3, r7
   17d30:	437a      	muls	r2, r7
   17d32:	18eb      	adds	r3, r5, r3
   17d34:	0c0f      	lsrs	r7, r1, #16
   17d36:	19db      	adds	r3, r3, r7
   17d38:	468c      	mov	ip, r1
   17d3a:	429d      	cmp	r5, r3
   17d3c:	d902      	bls.n	17d44 <__udivdi3+0x280>
   17d3e:	2780      	movs	r7, #128	; 0x80
   17d40:	027f      	lsls	r7, r7, #9
   17d42:	19d2      	adds	r2, r2, r7
   17d44:	0c1d      	lsrs	r5, r3, #16
   17d46:	1952      	adds	r2, r2, r5
   17d48:	4592      	cmp	sl, r2
   17d4a:	d35f      	bcc.n	17e0c <__udivdi3+0x348>
   17d4c:	d056      	beq.n	17dfc <__udivdi3+0x338>
   17d4e:	2700      	movs	r7, #0
   17d50:	e71e      	b.n	17b90 <__udivdi3+0xcc>
   17d52:	2320      	movs	r3, #32
   17d54:	1a1b      	subs	r3, r3, r0
   17d56:	1c31      	adds	r1, r6, #0
   17d58:	1c2f      	adds	r7, r5, #0
   17d5a:	40d9      	lsrs	r1, r3
   17d5c:	40df      	lsrs	r7, r3
   17d5e:	4085      	lsls	r5, r0
   17d60:	1c0b      	adds	r3, r1, #0
   17d62:	4084      	lsls	r4, r0
   17d64:	432b      	orrs	r3, r5
   17d66:	4086      	lsls	r6, r0
   17d68:	9301      	str	r3, [sp, #4]
   17d6a:	46b3      	mov	fp, r6
   17d6c:	0423      	lsls	r3, r4, #16
   17d6e:	0c26      	lsrs	r6, r4, #16
   17d70:	0c1b      	lsrs	r3, r3, #16
   17d72:	1c38      	adds	r0, r7, #0
   17d74:	1c31      	adds	r1, r6, #0
   17d76:	4698      	mov	r8, r3
   17d78:	f7fd fd2e 	bl	157d8 <__aeabi_uidiv>
   17d7c:	4642      	mov	r2, r8
   17d7e:	4342      	muls	r2, r0
   17d80:	1c05      	adds	r5, r0, #0
   17d82:	1c31      	adds	r1, r6, #0
   17d84:	1c38      	adds	r0, r7, #0
   17d86:	4691      	mov	r9, r2
   17d88:	f7fd fd6a 	bl	15860 <__aeabi_uidivmod>
   17d8c:	9f01      	ldr	r7, [sp, #4]
   17d8e:	0409      	lsls	r1, r1, #16
   17d90:	0c3b      	lsrs	r3, r7, #16
   17d92:	4319      	orrs	r1, r3
   17d94:	4589      	cmp	r9, r1
   17d96:	d907      	bls.n	17da8 <__udivdi3+0x2e4>
   17d98:	1909      	adds	r1, r1, r4
   17d9a:	1e6b      	subs	r3, r5, #1
   17d9c:	428c      	cmp	r4, r1
   17d9e:	d84d      	bhi.n	17e3c <__udivdi3+0x378>
   17da0:	4589      	cmp	r9, r1
   17da2:	d94b      	bls.n	17e3c <__udivdi3+0x378>
   17da4:	3d02      	subs	r5, #2
   17da6:	1909      	adds	r1, r1, r4
   17da8:	464a      	mov	r2, r9
   17daa:	1a8a      	subs	r2, r1, r2
   17dac:	1c10      	adds	r0, r2, #0
   17dae:	1c31      	adds	r1, r6, #0
   17db0:	4692      	mov	sl, r2
   17db2:	f7fd fd11 	bl	157d8 <__aeabi_uidiv>
   17db6:	4643      	mov	r3, r8
   17db8:	4343      	muls	r3, r0
   17dba:	1c07      	adds	r7, r0, #0
   17dbc:	1c31      	adds	r1, r6, #0
   17dbe:	4650      	mov	r0, sl
   17dc0:	4699      	mov	r9, r3
   17dc2:	f7fd fd4d 	bl	15860 <__aeabi_uidivmod>
   17dc6:	9a01      	ldr	r2, [sp, #4]
   17dc8:	0409      	lsls	r1, r1, #16
   17dca:	0413      	lsls	r3, r2, #16
   17dcc:	0c1b      	lsrs	r3, r3, #16
   17dce:	4319      	orrs	r1, r3
   17dd0:	4589      	cmp	r9, r1
   17dd2:	d907      	bls.n	17de4 <__udivdi3+0x320>
   17dd4:	1909      	adds	r1, r1, r4
   17dd6:	1e7b      	subs	r3, r7, #1
   17dd8:	428c      	cmp	r4, r1
   17dda:	d82d      	bhi.n	17e38 <__udivdi3+0x374>
   17ddc:	4589      	cmp	r9, r1
   17dde:	d92b      	bls.n	17e38 <__udivdi3+0x374>
   17de0:	3f02      	subs	r7, #2
   17de2:	1909      	adds	r1, r1, r4
   17de4:	464b      	mov	r3, r9
   17de6:	1acb      	subs	r3, r1, r3
   17de8:	042d      	lsls	r5, r5, #16
   17dea:	4699      	mov	r9, r3
   17dec:	432f      	orrs	r7, r5
   17dee:	e6fd      	b.n	17bec <__udivdi3+0x128>
   17df0:	1c1e      	adds	r6, r3, #0
   17df2:	e6ca      	b.n	17b8a <__udivdi3+0xc6>
   17df4:	1c1f      	adds	r7, r3, #0
   17df6:	e6aa      	b.n	17b4e <__udivdi3+0x8a>
   17df8:	4699      	mov	r9, r3
   17dfa:	e733      	b.n	17c64 <__udivdi3+0x1a0>
   17dfc:	4661      	mov	r1, ip
   17dfe:	040a      	lsls	r2, r1, #16
   17e00:	041b      	lsls	r3, r3, #16
   17e02:	0c12      	lsrs	r2, r2, #16
   17e04:	189b      	adds	r3, r3, r2
   17e06:	40a6      	lsls	r6, r4
   17e08:	429e      	cmp	r6, r3
   17e0a:	d2a0      	bcs.n	17d4e <__udivdi3+0x28a>
   17e0c:	3801      	subs	r0, #1
   17e0e:	2700      	movs	r7, #0
   17e10:	e6be      	b.n	17b90 <__udivdi3+0xcc>
   17e12:	2700      	movs	r7, #0
   17e14:	2001      	movs	r0, #1
   17e16:	e6bb      	b.n	17b90 <__udivdi3+0xcc>
   17e18:	458a      	cmp	sl, r1
   17e1a:	d800      	bhi.n	17e1e <__udivdi3+0x35a>
   17e1c:	e775      	b.n	17d0a <__udivdi3+0x246>
   17e1e:	2302      	movs	r3, #2
   17e20:	425b      	negs	r3, r3
   17e22:	4498      	add	r8, r3
   17e24:	19c9      	adds	r1, r1, r7
   17e26:	e771      	b.n	17d0c <__udivdi3+0x248>
   17e28:	458b      	cmp	fp, r1
   17e2a:	d800      	bhi.n	17e2e <__udivdi3+0x36a>
   17e2c:	e750      	b.n	17cd0 <__udivdi3+0x20c>
   17e2e:	2302      	movs	r3, #2
   17e30:	425b      	negs	r3, r3
   17e32:	4499      	add	r9, r3
   17e34:	19c9      	adds	r1, r1, r7
   17e36:	e74c      	b.n	17cd2 <__udivdi3+0x20e>
   17e38:	1c1f      	adds	r7, r3, #0
   17e3a:	e7d3      	b.n	17de4 <__udivdi3+0x320>
   17e3c:	1c1d      	adds	r5, r3, #0
   17e3e:	e7b3      	b.n	17da8 <__udivdi3+0x2e4>
   17e40:	3d02      	subs	r5, #2
   17e42:	1900      	adds	r0, r0, r4
   17e44:	e6ec      	b.n	17c20 <__udivdi3+0x15c>
   17e46:	46c0      	nop			; (mov r8, r8)

00017e48 <__errno>:
   17e48:	4b01      	ldr	r3, [pc, #4]	; (17e50 <__errno+0x8>)
   17e4a:	6818      	ldr	r0, [r3, #0]
   17e4c:	4770      	bx	lr
   17e4e:	46c0      	nop			; (mov r8, r8)
   17e50:	20000470 	.word	0x20000470

00017e54 <__libc_init_array>:
   17e54:	b570      	push	{r4, r5, r6, lr}
   17e56:	4e0d      	ldr	r6, [pc, #52]	; (17e8c <__libc_init_array+0x38>)
   17e58:	4d0d      	ldr	r5, [pc, #52]	; (17e90 <__libc_init_array+0x3c>)
   17e5a:	2400      	movs	r4, #0
   17e5c:	1bad      	subs	r5, r5, r6
   17e5e:	10ad      	asrs	r5, r5, #2
   17e60:	d005      	beq.n	17e6e <__libc_init_array+0x1a>
   17e62:	00a3      	lsls	r3, r4, #2
   17e64:	58f3      	ldr	r3, [r6, r3]
   17e66:	3401      	adds	r4, #1
   17e68:	4798      	blx	r3
   17e6a:	42a5      	cmp	r5, r4
   17e6c:	d1f9      	bne.n	17e62 <__libc_init_array+0xe>
   17e6e:	f000 fc87 	bl	18780 <_init>
   17e72:	4e08      	ldr	r6, [pc, #32]	; (17e94 <__libc_init_array+0x40>)
   17e74:	4d08      	ldr	r5, [pc, #32]	; (17e98 <__libc_init_array+0x44>)
   17e76:	2400      	movs	r4, #0
   17e78:	1bad      	subs	r5, r5, r6
   17e7a:	10ad      	asrs	r5, r5, #2
   17e7c:	d005      	beq.n	17e8a <__libc_init_array+0x36>
   17e7e:	00a3      	lsls	r3, r4, #2
   17e80:	58f3      	ldr	r3, [r6, r3]
   17e82:	3401      	adds	r4, #1
   17e84:	4798      	blx	r3
   17e86:	42a5      	cmp	r5, r4
   17e88:	d1f9      	bne.n	17e7e <__libc_init_array+0x2a>
   17e8a:	bd70      	pop	{r4, r5, r6, pc}
   17e8c:	0001878c 	.word	0x0001878c
   17e90:	0001878c 	.word	0x0001878c
   17e94:	0001878c 	.word	0x0001878c
   17e98:	00018794 	.word	0x00018794

00017e9c <memcpy>:
   17e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e9e:	2a0f      	cmp	r2, #15
   17ea0:	d935      	bls.n	17f0e <memcpy+0x72>
   17ea2:	1c03      	adds	r3, r0, #0
   17ea4:	430b      	orrs	r3, r1
   17ea6:	079c      	lsls	r4, r3, #30
   17ea8:	d135      	bne.n	17f16 <memcpy+0x7a>
   17eaa:	1c16      	adds	r6, r2, #0
   17eac:	3e10      	subs	r6, #16
   17eae:	0936      	lsrs	r6, r6, #4
   17eb0:	0135      	lsls	r5, r6, #4
   17eb2:	1945      	adds	r5, r0, r5
   17eb4:	3510      	adds	r5, #16
   17eb6:	1c0c      	adds	r4, r1, #0
   17eb8:	1c03      	adds	r3, r0, #0
   17eba:	6827      	ldr	r7, [r4, #0]
   17ebc:	601f      	str	r7, [r3, #0]
   17ebe:	6867      	ldr	r7, [r4, #4]
   17ec0:	605f      	str	r7, [r3, #4]
   17ec2:	68a7      	ldr	r7, [r4, #8]
   17ec4:	609f      	str	r7, [r3, #8]
   17ec6:	68e7      	ldr	r7, [r4, #12]
   17ec8:	3410      	adds	r4, #16
   17eca:	60df      	str	r7, [r3, #12]
   17ecc:	3310      	adds	r3, #16
   17ece:	42ab      	cmp	r3, r5
   17ed0:	d1f3      	bne.n	17eba <memcpy+0x1e>
   17ed2:	1c73      	adds	r3, r6, #1
   17ed4:	011b      	lsls	r3, r3, #4
   17ed6:	18c5      	adds	r5, r0, r3
   17ed8:	18c9      	adds	r1, r1, r3
   17eda:	230f      	movs	r3, #15
   17edc:	4013      	ands	r3, r2
   17ede:	2b03      	cmp	r3, #3
   17ee0:	d91b      	bls.n	17f1a <memcpy+0x7e>
   17ee2:	1f1c      	subs	r4, r3, #4
   17ee4:	08a4      	lsrs	r4, r4, #2
   17ee6:	3401      	adds	r4, #1
   17ee8:	00a4      	lsls	r4, r4, #2
   17eea:	2300      	movs	r3, #0
   17eec:	58ce      	ldr	r6, [r1, r3]
   17eee:	50ee      	str	r6, [r5, r3]
   17ef0:	3304      	adds	r3, #4
   17ef2:	42a3      	cmp	r3, r4
   17ef4:	d1fa      	bne.n	17eec <memcpy+0x50>
   17ef6:	18ed      	adds	r5, r5, r3
   17ef8:	18c9      	adds	r1, r1, r3
   17efa:	2303      	movs	r3, #3
   17efc:	401a      	ands	r2, r3
   17efe:	d005      	beq.n	17f0c <memcpy+0x70>
   17f00:	2300      	movs	r3, #0
   17f02:	5ccc      	ldrb	r4, [r1, r3]
   17f04:	54ec      	strb	r4, [r5, r3]
   17f06:	3301      	adds	r3, #1
   17f08:	4293      	cmp	r3, r2
   17f0a:	d1fa      	bne.n	17f02 <memcpy+0x66>
   17f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f0e:	1c05      	adds	r5, r0, #0
   17f10:	2a00      	cmp	r2, #0
   17f12:	d1f5      	bne.n	17f00 <memcpy+0x64>
   17f14:	e7fa      	b.n	17f0c <memcpy+0x70>
   17f16:	1c05      	adds	r5, r0, #0
   17f18:	e7f2      	b.n	17f00 <memcpy+0x64>
   17f1a:	1c1a      	adds	r2, r3, #0
   17f1c:	e7f8      	b.n	17f10 <memcpy+0x74>
   17f1e:	46c0      	nop			; (mov r8, r8)

00017f20 <memset>:
   17f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f22:	0783      	lsls	r3, r0, #30
   17f24:	d046      	beq.n	17fb4 <memset+0x94>
   17f26:	1e54      	subs	r4, r2, #1
   17f28:	2a00      	cmp	r2, #0
   17f2a:	d042      	beq.n	17fb2 <memset+0x92>
   17f2c:	b2ce      	uxtb	r6, r1
   17f2e:	1c03      	adds	r3, r0, #0
   17f30:	2503      	movs	r5, #3
   17f32:	e003      	b.n	17f3c <memset+0x1c>
   17f34:	1e62      	subs	r2, r4, #1
   17f36:	2c00      	cmp	r4, #0
   17f38:	d03b      	beq.n	17fb2 <memset+0x92>
   17f3a:	1c14      	adds	r4, r2, #0
   17f3c:	3301      	adds	r3, #1
   17f3e:	1e5a      	subs	r2, r3, #1
   17f40:	7016      	strb	r6, [r2, #0]
   17f42:	422b      	tst	r3, r5
   17f44:	d1f6      	bne.n	17f34 <memset+0x14>
   17f46:	2c03      	cmp	r4, #3
   17f48:	d92b      	bls.n	17fa2 <memset+0x82>
   17f4a:	25ff      	movs	r5, #255	; 0xff
   17f4c:	400d      	ands	r5, r1
   17f4e:	022a      	lsls	r2, r5, #8
   17f50:	4315      	orrs	r5, r2
   17f52:	042a      	lsls	r2, r5, #16
   17f54:	4315      	orrs	r5, r2
   17f56:	2c0f      	cmp	r4, #15
   17f58:	d915      	bls.n	17f86 <memset+0x66>
   17f5a:	1c27      	adds	r7, r4, #0
   17f5c:	3f10      	subs	r7, #16
   17f5e:	093f      	lsrs	r7, r7, #4
   17f60:	1c1e      	adds	r6, r3, #0
   17f62:	013a      	lsls	r2, r7, #4
   17f64:	3610      	adds	r6, #16
   17f66:	18b6      	adds	r6, r6, r2
   17f68:	1c1a      	adds	r2, r3, #0
   17f6a:	6015      	str	r5, [r2, #0]
   17f6c:	6055      	str	r5, [r2, #4]
   17f6e:	6095      	str	r5, [r2, #8]
   17f70:	60d5      	str	r5, [r2, #12]
   17f72:	3210      	adds	r2, #16
   17f74:	42b2      	cmp	r2, r6
   17f76:	d1f8      	bne.n	17f6a <memset+0x4a>
   17f78:	3701      	adds	r7, #1
   17f7a:	013f      	lsls	r7, r7, #4
   17f7c:	220f      	movs	r2, #15
   17f7e:	19db      	adds	r3, r3, r7
   17f80:	4014      	ands	r4, r2
   17f82:	2c03      	cmp	r4, #3
   17f84:	d90d      	bls.n	17fa2 <memset+0x82>
   17f86:	1f27      	subs	r7, r4, #4
   17f88:	08bf      	lsrs	r7, r7, #2
   17f8a:	00ba      	lsls	r2, r7, #2
   17f8c:	1d1e      	adds	r6, r3, #4
   17f8e:	18b6      	adds	r6, r6, r2
   17f90:	1c1a      	adds	r2, r3, #0
   17f92:	c220      	stmia	r2!, {r5}
   17f94:	42b2      	cmp	r2, r6
   17f96:	d1fc      	bne.n	17f92 <memset+0x72>
   17f98:	3701      	adds	r7, #1
   17f9a:	00bf      	lsls	r7, r7, #2
   17f9c:	2203      	movs	r2, #3
   17f9e:	19db      	adds	r3, r3, r7
   17fa0:	4014      	ands	r4, r2
   17fa2:	2c00      	cmp	r4, #0
   17fa4:	d005      	beq.n	17fb2 <memset+0x92>
   17fa6:	191c      	adds	r4, r3, r4
   17fa8:	b2c9      	uxtb	r1, r1
   17faa:	7019      	strb	r1, [r3, #0]
   17fac:	3301      	adds	r3, #1
   17fae:	42a3      	cmp	r3, r4
   17fb0:	d1fb      	bne.n	17faa <memset+0x8a>
   17fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fb4:	1c14      	adds	r4, r2, #0
   17fb6:	1c03      	adds	r3, r0, #0
   17fb8:	e7c5      	b.n	17f46 <memset+0x26>
   17fba:	46c0      	nop			; (mov r8, r8)

00017fbc <register_fini>:
   17fbc:	b508      	push	{r3, lr}
   17fbe:	4b03      	ldr	r3, [pc, #12]	; (17fcc <register_fini+0x10>)
   17fc0:	2b00      	cmp	r3, #0
   17fc2:	d002      	beq.n	17fca <register_fini+0xe>
   17fc4:	4802      	ldr	r0, [pc, #8]	; (17fd0 <register_fini+0x14>)
   17fc6:	f000 f805 	bl	17fd4 <atexit>
   17fca:	bd08      	pop	{r3, pc}
   17fcc:	00000000 	.word	0x00000000
   17fd0:	00017fe5 	.word	0x00017fe5

00017fd4 <atexit>:
   17fd4:	b508      	push	{r3, lr}
   17fd6:	1c01      	adds	r1, r0, #0
   17fd8:	2200      	movs	r2, #0
   17fda:	2000      	movs	r0, #0
   17fdc:	2300      	movs	r3, #0
   17fde:	f000 f819 	bl	18014 <__register_exitproc>
   17fe2:	bd08      	pop	{r3, pc}

00017fe4 <__libc_fini_array>:
   17fe4:	b538      	push	{r3, r4, r5, lr}
   17fe6:	4b09      	ldr	r3, [pc, #36]	; (1800c <__libc_fini_array+0x28>)
   17fe8:	4d09      	ldr	r5, [pc, #36]	; (18010 <__libc_fini_array+0x2c>)
   17fea:	1aed      	subs	r5, r5, r3
   17fec:	10ad      	asrs	r5, r5, #2
   17fee:	d009      	beq.n	18004 <__libc_fini_array+0x20>
   17ff0:	3d01      	subs	r5, #1
   17ff2:	00ac      	lsls	r4, r5, #2
   17ff4:	18e4      	adds	r4, r4, r3
   17ff6:	e000      	b.n	17ffa <__libc_fini_array+0x16>
   17ff8:	3d01      	subs	r5, #1
   17ffa:	6823      	ldr	r3, [r4, #0]
   17ffc:	4798      	blx	r3
   17ffe:	3c04      	subs	r4, #4
   18000:	2d00      	cmp	r5, #0
   18002:	d1f9      	bne.n	17ff8 <__libc_fini_array+0x14>
   18004:	f000 fbc6 	bl	18794 <_fini>
   18008:	bd38      	pop	{r3, r4, r5, pc}
   1800a:	46c0      	nop			; (mov r8, r8)
   1800c:	000187a0 	.word	0x000187a0
   18010:	000187a4 	.word	0x000187a4

00018014 <__register_exitproc>:
   18014:	b5f0      	push	{r4, r5, r6, r7, lr}
   18016:	464f      	mov	r7, r9
   18018:	4646      	mov	r6, r8
   1801a:	b4c0      	push	{r6, r7}
   1801c:	4698      	mov	r8, r3
   1801e:	4b2b      	ldr	r3, [pc, #172]	; (180cc <__register_exitproc+0xb8>)
   18020:	25a4      	movs	r5, #164	; 0xa4
   18022:	681b      	ldr	r3, [r3, #0]
   18024:	006d      	lsls	r5, r5, #1
   18026:	595c      	ldr	r4, [r3, r5]
   18028:	b083      	sub	sp, #12
   1802a:	1c06      	adds	r6, r0, #0
   1802c:	1c0f      	adds	r7, r1, #0
   1802e:	4691      	mov	r9, r2
   18030:	9301      	str	r3, [sp, #4]
   18032:	2c00      	cmp	r4, #0
   18034:	d044      	beq.n	180c0 <__register_exitproc+0xac>
   18036:	6865      	ldr	r5, [r4, #4]
   18038:	2d1f      	cmp	r5, #31
   1803a:	dd1a      	ble.n	18072 <__register_exitproc+0x5e>
   1803c:	4b24      	ldr	r3, [pc, #144]	; (180d0 <__register_exitproc+0xbc>)
   1803e:	2b00      	cmp	r3, #0
   18040:	d102      	bne.n	18048 <__register_exitproc+0x34>
   18042:	2001      	movs	r0, #1
   18044:	4240      	negs	r0, r0
   18046:	e01c      	b.n	18082 <__register_exitproc+0x6e>
   18048:	20c8      	movs	r0, #200	; 0xc8
   1804a:	0040      	lsls	r0, r0, #1
   1804c:	e000      	b.n	18050 <__register_exitproc+0x3c>
   1804e:	bf00      	nop
   18050:	1e04      	subs	r4, r0, #0
   18052:	d0f6      	beq.n	18042 <__register_exitproc+0x2e>
   18054:	2500      	movs	r5, #0
   18056:	6045      	str	r5, [r0, #4]
   18058:	23a4      	movs	r3, #164	; 0xa4
   1805a:	9801      	ldr	r0, [sp, #4]
   1805c:	005b      	lsls	r3, r3, #1
   1805e:	58c0      	ldr	r0, [r0, r3]
   18060:	9901      	ldr	r1, [sp, #4]
   18062:	6020      	str	r0, [r4, #0]
   18064:	50cc      	str	r4, [r1, r3]
   18066:	23c4      	movs	r3, #196	; 0xc4
   18068:	005b      	lsls	r3, r3, #1
   1806a:	50e5      	str	r5, [r4, r3]
   1806c:	23c6      	movs	r3, #198	; 0xc6
   1806e:	005b      	lsls	r3, r3, #1
   18070:	50e5      	str	r5, [r4, r3]
   18072:	2e00      	cmp	r6, #0
   18074:	d10a      	bne.n	1808c <__register_exitproc+0x78>
   18076:	1c6b      	adds	r3, r5, #1
   18078:	3502      	adds	r5, #2
   1807a:	00ad      	lsls	r5, r5, #2
   1807c:	6063      	str	r3, [r4, #4]
   1807e:	2000      	movs	r0, #0
   18080:	512f      	str	r7, [r5, r4]
   18082:	b003      	add	sp, #12
   18084:	bc0c      	pop	{r2, r3}
   18086:	4690      	mov	r8, r2
   18088:	4699      	mov	r9, r3
   1808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1808c:	00ab      	lsls	r3, r5, #2
   1808e:	18e3      	adds	r3, r4, r3
   18090:	2288      	movs	r2, #136	; 0x88
   18092:	4648      	mov	r0, r9
   18094:	5098      	str	r0, [r3, r2]
   18096:	20c4      	movs	r0, #196	; 0xc4
   18098:	0040      	lsls	r0, r0, #1
   1809a:	1822      	adds	r2, r4, r0
   1809c:	6810      	ldr	r0, [r2, #0]
   1809e:	2101      	movs	r1, #1
   180a0:	40a9      	lsls	r1, r5
   180a2:	4308      	orrs	r0, r1
   180a4:	6010      	str	r0, [r2, #0]
   180a6:	2284      	movs	r2, #132	; 0x84
   180a8:	0052      	lsls	r2, r2, #1
   180aa:	4640      	mov	r0, r8
   180ac:	5098      	str	r0, [r3, r2]
   180ae:	2e02      	cmp	r6, #2
   180b0:	d1e1      	bne.n	18076 <__register_exitproc+0x62>
   180b2:	22c6      	movs	r2, #198	; 0xc6
   180b4:	0052      	lsls	r2, r2, #1
   180b6:	18a3      	adds	r3, r4, r2
   180b8:	6818      	ldr	r0, [r3, #0]
   180ba:	4301      	orrs	r1, r0
   180bc:	6019      	str	r1, [r3, #0]
   180be:	e7da      	b.n	18076 <__register_exitproc+0x62>
   180c0:	1c1c      	adds	r4, r3, #0
   180c2:	344d      	adds	r4, #77	; 0x4d
   180c4:	34ff      	adds	r4, #255	; 0xff
   180c6:	515c      	str	r4, [r3, r5]
   180c8:	e7b5      	b.n	18036 <__register_exitproc+0x22>
   180ca:	46c0      	nop			; (mov r8, r8)
   180cc:	0001877c 	.word	0x0001877c
   180d0:	00000000 	.word	0x00000000
   180d4:	00000002 	.word	0x00000002
   180d8:	00000003 	.word	0x00000003
   180dc:	00000028 	.word	0x00000028
   180e0:	00000029 	.word	0x00000029
   180e4:	00000004 	.word	0x00000004
   180e8:	00000005 	.word	0x00000005
   180ec:	00000006 	.word	0x00000006
   180f0:	00000007 	.word	0x00000007
   180f4:	00000020 	.word	0x00000020
   180f8:	00000021 	.word	0x00000021
   180fc:	00000022 	.word	0x00000022
   18100:	00000023 	.word	0x00000023
   18104:	00000024 	.word	0x00000024
   18108:	00000025 	.word	0x00000025
   1810c:	00000026 	.word	0x00000026
   18110:	00000027 	.word	0x00000027
   18114:	00000008 	.word	0x00000008
   18118:	00000009 	.word	0x00000009
   1811c:	0000000a 	.word	0x0000000a
   18120:	0000000b 	.word	0x0000000b
   18124:	00003600 	.word	0x00003600
   18128:	00003606 	.word	0x00003606
   1812c:	00003606 	.word	0x00003606
   18130:	00003606 	.word	0x00003606
   18134:	00003606 	.word	0x00003606
   18138:	00003606 	.word	0x00003606
   1813c:	00003606 	.word	0x00003606
   18140:	00003606 	.word	0x00003606
   18144:	00003606 	.word	0x00003606
   18148:	00003606 	.word	0x00003606
   1814c:	00003606 	.word	0x00003606
   18150:	00003606 	.word	0x00003606
   18154:	00003606 	.word	0x00003606
   18158:	00003606 	.word	0x00003606
   1815c:	00003606 	.word	0x00003606
   18160:	00003606 	.word	0x00003606
   18164:	000035ca 	.word	0x000035ca
   18168:	00003606 	.word	0x00003606
   1816c:	00003606 	.word	0x00003606
   18170:	00003606 	.word	0x00003606
   18174:	00003606 	.word	0x00003606
   18178:	00003606 	.word	0x00003606
   1817c:	00003606 	.word	0x00003606
   18180:	00003606 	.word	0x00003606
   18184:	00003606 	.word	0x00003606
   18188:	00003606 	.word	0x00003606
   1818c:	00003606 	.word	0x00003606
   18190:	00003606 	.word	0x00003606
   18194:	00003606 	.word	0x00003606
   18198:	00003606 	.word	0x00003606
   1819c:	00003606 	.word	0x00003606
   181a0:	00003606 	.word	0x00003606
   181a4:	000035fa 	.word	0x000035fa
   181a8:	00003606 	.word	0x00003606
   181ac:	00003606 	.word	0x00003606
   181b0:	00003606 	.word	0x00003606
   181b4:	00003606 	.word	0x00003606
   181b8:	00003606 	.word	0x00003606
   181bc:	00003606 	.word	0x00003606
   181c0:	00003606 	.word	0x00003606
   181c4:	00003606 	.word	0x00003606
   181c8:	00003606 	.word	0x00003606
   181cc:	00003606 	.word	0x00003606
   181d0:	00003606 	.word	0x00003606
   181d4:	00003606 	.word	0x00003606
   181d8:	00003606 	.word	0x00003606
   181dc:	00003606 	.word	0x00003606
   181e0:	00003606 	.word	0x00003606
   181e4:	000035f4 	.word	0x000035f4
   181e8:	00003574 	.word	0x00003574
   181ec:	0000358a 	.word	0x0000358a
   181f0:	000035a0 	.word	0x000035a0
   181f4:	0000355a 	.word	0x0000355a
   181f8:	00004556 	.word	0x00004556
   181fc:	00004556 	.word	0x00004556
   18200:	0000454a 	.word	0x0000454a
   18204:	00004556 	.word	0x00004556
   18208:	0000454a 	.word	0x0000454a
   1820c:	0000452a 	.word	0x0000452a
   18210:	0000452a 	.word	0x0000452a
   18214:	00004556 	.word	0x00004556
   18218:	00004556 	.word	0x00004556
   1821c:	00004556 	.word	0x00004556
   18220:	00004556 	.word	0x00004556
   18224:	00004556 	.word	0x00004556
   18228:	00004556 	.word	0x00004556
   1822c:	00004556 	.word	0x00004556
   18230:	00004556 	.word	0x00004556
   18234:	00004556 	.word	0x00004556
   18238:	00004556 	.word	0x00004556
   1823c:	00004556 	.word	0x00004556
   18240:	00004556 	.word	0x00004556
   18244:	00004556 	.word	0x00004556
   18248:	00004556 	.word	0x00004556
   1824c:	00004556 	.word	0x00004556
   18250:	00004556 	.word	0x00004556
   18254:	00004556 	.word	0x00004556
   18258:	00004556 	.word	0x00004556
   1825c:	00004556 	.word	0x00004556
   18260:	00004556 	.word	0x00004556
   18264:	00004556 	.word	0x00004556
   18268:	00004556 	.word	0x00004556
   1826c:	00004556 	.word	0x00004556
   18270:	00004556 	.word	0x00004556
   18274:	00004556 	.word	0x00004556
   18278:	00004556 	.word	0x00004556
   1827c:	00004556 	.word	0x00004556
   18280:	00004556 	.word	0x00004556
   18284:	00004556 	.word	0x00004556
   18288:	00004556 	.word	0x00004556
   1828c:	00004556 	.word	0x00004556
   18290:	00004556 	.word	0x00004556
   18294:	00004556 	.word	0x00004556
   18298:	00004556 	.word	0x00004556
   1829c:	00004556 	.word	0x00004556
   182a0:	00004556 	.word	0x00004556
   182a4:	00004556 	.word	0x00004556
   182a8:	00004556 	.word	0x00004556
   182ac:	00004556 	.word	0x00004556
   182b0:	00004556 	.word	0x00004556
   182b4:	00004556 	.word	0x00004556
   182b8:	00004556 	.word	0x00004556
   182bc:	00004556 	.word	0x00004556
   182c0:	00004556 	.word	0x00004556
   182c4:	00004556 	.word	0x00004556
   182c8:	00004556 	.word	0x00004556
   182cc:	00004556 	.word	0x00004556
   182d0:	00004556 	.word	0x00004556
   182d4:	00004556 	.word	0x00004556
   182d8:	00004556 	.word	0x00004556
   182dc:	00004556 	.word	0x00004556
   182e0:	00004556 	.word	0x00004556
   182e4:	00004556 	.word	0x00004556
   182e8:	00004556 	.word	0x00004556
   182ec:	00004556 	.word	0x00004556
   182f0:	00004556 	.word	0x00004556
   182f4:	00004556 	.word	0x00004556
   182f8:	0000454a 	.word	0x0000454a
   182fc:	0000454a 	.word	0x0000454a
   18300:	0000455a 	.word	0x0000455a
   18304:	0000455a 	.word	0x0000455a
   18308:	0000455a 	.word	0x0000455a
   1830c:	0000455a 	.word	0x0000455a
   18310:	42002000 	.word	0x42002000
   18314:	42002400 	.word	0x42002400
   18318:	42002800 	.word	0x42002800
   1831c:	42002c00 	.word	0x42002c00
   18320:	42003000 	.word	0x42003000
   18324:	42003400 	.word	0x42003400
   18328:	42003800 	.word	0x42003800
   1832c:	42003c00 	.word	0x42003c00
   18330:	14141313 	.word	0x14141313
   18334:	16161515 	.word	0x16161515
   18338:	02000100 	.word	0x02000100
   1833c:	08000400 	.word	0x08000400
   18340:	20001000 	.word	0x20001000
   18344:	80004000 	.word	0x80004000
   18348:	00006bb2 	.word	0x00006bb2
   1834c:	00006b9e 	.word	0x00006b9e
   18350:	00006b9e 	.word	0x00006b9e
   18354:	00006bb2 	.word	0x00006bb2
   18358:	00006c22 	.word	0x00006c22
   1835c:	00006c22 	.word	0x00006c22
   18360:	00006b9e 	.word	0x00006b9e
   18364:	00006bfa 	.word	0x00006bfa
   18368:	00006c0e 	.word	0x00006c0e
   1836c:	00006c56 	.word	0x00006c56
   18370:	00006cc4 	.word	0x00006cc4
   18374:	00006c56 	.word	0x00006c56
   18378:	00006cc4 	.word	0x00006cc4
   1837c:	00006cc4 	.word	0x00006cc4
   18380:	00006ce0 	.word	0x00006ce0
   18384:	00006ce0 	.word	0x00006ce0
   18388:	00006cc4 	.word	0x00006cc4
   1838c:	00006cd2 	.word	0x00006cd2
   18390:	00006cd2 	.word	0x00006cd2
   18394:	00006ce0 	.word	0x00006ce0
   18398:	00006ce0 	.word	0x00006ce0
   1839c:	00006ce0 	.word	0x00006ce0
   183a0:	00006ce0 	.word	0x00006ce0
   183a4:	00006ce0 	.word	0x00006ce0
   183a8:	00006bfa 	.word	0x00006bfa
   183ac:	00006bfa 	.word	0x00006bfa
   183b0:	00006ce0 	.word	0x00006ce0
   183b4:	00006b9e 	.word	0x00006b9e
   183b8:	00006bb2 	.word	0x00006bb2
   183bc:	00006bc6 	.word	0x00006bc6
   183c0:	00006c56 	.word	0x00006c56
   183c4:	00006bfa 	.word	0x00006bfa
   183c8:	00006bfa 	.word	0x00006bfa
   183cc:	00006ce0 	.word	0x00006ce0
   183d0:	00006ce0 	.word	0x00006ce0
   183d4:	00006ce0 	.word	0x00006ce0
   183d8:	00006bfa 	.word	0x00006bfa
   183dc:	000070e0 	.word	0x000070e0
   183e0:	00008c34 	.word	0x00008c34
   183e4:	00006fc8 	.word	0x00006fc8
   183e8:	00007310 	.word	0x00007310
   183ec:	000073a8 	.word	0x000073a8
   183f0:	000074d4 	.word	0x000074d4
   183f4:	00007092 	.word	0x00007092
   183f8:	0000788c 	.word	0x0000788c
   183fc:	00007a46 	.word	0x00007a46
   18400:	00007d94 	.word	0x00007d94
   18404:	00007e0c 	.word	0x00007e0c
   18408:	00007c28 	.word	0x00007c28
   1840c:	000082cc 	.word	0x000082cc
   18410:	00008194 	.word	0x00008194
   18414:	00007424 	.word	0x00007424
   18418:	0000747c 	.word	0x0000747c
   1841c:	000084ca 	.word	0x000084ca
   18420:	000085d2 	.word	0x000085d2
   18424:	000087ec 	.word	0x000087ec
   18428:	000084ca 	.word	0x000084ca
   1842c:	000088f2 	.word	0x000088f2
   18430:	00008b68 	.word	0x00008b68
   18434:	000084ca 	.word	0x000084ca
   18438:	000084ca 	.word	0x000084ca
   1843c:	00007a50 	.word	0x00007a50
   18440:	00007aa6 	.word	0x00007aa6
   18444:	00008c34 	.word	0x00008c34
   18448:	00007032 	.word	0x00007032
   1844c:	0000722c 	.word	0x0000722c
   18450:	000073a8 	.word	0x000073a8
   18454:	00007d94 	.word	0x00007d94
   18458:	00007942 	.word	0x00007942
   1845c:	0000797e 	.word	0x0000797e
   18460:	00007b7e 	.word	0x00007b7e
   18464:	00007bc2 	.word	0x00007bc2
   18468:	00008c34 	.word	0x00008c34
   1846c:	0000784a 	.word	0x0000784a
   18470:	00007588 	.word	0x00007588
   18474:	00007704 	.word	0x00007704
   18478:	00007588 	.word	0x00007588
   1847c:	00007704 	.word	0x00007704
   18480:	00007588 	.word	0x00007588
   18484:	00007704 	.word	0x00007704
   18488:	00007588 	.word	0x00007588
   1848c:	00007704 	.word	0x00007704
   18490:	00007588 	.word	0x00007588
   18494:	00007704 	.word	0x00007704
   18498:	0000b6a0 	.word	0x0000b6a0
   1849c:	0000b6aa 	.word	0x0000b6aa
   184a0:	0000b6b4 	.word	0x0000b6b4
   184a4:	0000b6be 	.word	0x0000b6be
   184a8:	0000b6c8 	.word	0x0000b6c8
   184ac:	0000b89e 	.word	0x0000b89e
   184b0:	0000b8aa 	.word	0x0000b8aa
   184b4:	0000b8b6 	.word	0x0000b8b6
   184b8:	0000b8c2 	.word	0x0000b8c2
   184bc:	0000b8ce 	.word	0x0000b8ce

000184c0 <SwTaskList>:
   184c0:	00006d01 00009a71 00009aa1 0000bc99     .m..q...........
   184d0:	0000cd75 0000b73d 00006ef5 0000ec79     u...=....n..y...
   184e0:	0000cbc9 00010105 00010e3d 0000ec79     ........=...y...
   184f0:	00005ed5 0000f439 0000bfd1 0000ec79     .^..9.......y...
   18500:	0000f2e4 0000f2fc 0000f2fc 0000f2f6     ................
   18510:	0000f2fc 0000f2f0 0000f2ea 0000f2fc     ................
   18520:	0000f2fc 0000f2fc 0000f2ca 0000f2fc     ................
   18530:	0000f2fc 0000f2ca 0000f2c4 0000fc12     ................
   18540:	0000fc4e 0000fbf4 0000fb62 0000fbb0     N.......b.......
   18550:	0000fc4e 0000fb92 0000fc4e 0000fc30     N.......N...0...

00018560 <HoppingFrequencies>:
   18560:	36a0ae20 370b7de0 360817a0 36aff060      ..6.}.7...6`..6
   18570:	36aff060 362e3d40 35d2afc0 36990d00     `..6@=.6...5...6
   18580:	3663a520 3731a380 37226140 3635de60      .c6..17@a"7`.56
   18590:	366b4640 36bf32a0 36bf32a0 35cb0ea0     @Fk6.2.6.2.6...5
   185a0:	365462e0 373944a0 35cb0ea0 36f49a80     .bT6.D97...5...6
   185b0:	37131f00 35da50e0 366b4640 36f49a80     ...7.P.5@Fk6...6
   185c0:	3731a380 363d7f80 36d61600 36fc3ba0     ..17..=6...6.;.6
   185d0:	364cc1c0 36f49a80 3635de60 3731a380     ..L6...6`.56..17
   185e0:	36f49a80 36b79180 372a0260 361efb00     ...6...6`.*7...6
   185f0:	36aff060 373944a0 36269c20 36990d00     `..6.D97 .&6...6
   18600:	35f8d560 36990d00 35d2afc0 35f13440     `..5...6...5@4.5
   18610:	3689cac0 366b4640 360fb8c0 363d7f80     ...6@Fk6...6..=6
   18620:	373944a0 372a0260 364cc1c0 42000800     .D97`.*7..L6...B
   18630:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   18640:	42001c00 0a090807 00000c0b 0001378e     ...B.........7..
   18650:	000137f2 000137f2 000137b2 000137ac     .7...7...7...7..
   18660:	000137b8 00013794 000137be 000139b8     .7...7...7...9..
   18670:	000139f2 000139f2 000139ee 000139aa     .9...9...9...9..
   18680:	000139ca 0001399a 000139dc 00013a3e     .9...9...9..>:..
   18690:	00013a54 00013a54 00013a50 00013a38     T:..T:..P:..8:..
   186a0:	00013a44 00013a32 00013a4a 00776f70     D:..2:..J:..pow.

000186b0 <dp_h>:
	...
   186b8:	40000000 3fe2b803                       ...@...?

000186c0 <dp_l>:
	...
   186c8:	43cfd006 3e4cfdeb                       ...C..L>

000186d0 <bp>:
   186d0:	00000000 3ff00000 00000000 3ff80000     .......?.......?
	...

000186e8 <TWO52>:
   186e8:	00000000 43300000 00000000 c3300000     ......0C......0.
   186f8:	00016310 000162ac 000162f4 000161da     .c...b...b...a..
   18708:	000162f4 000162e8 000162f4 000161da     .b...b...b...a..
   18718:	000162ac 000162ac 000162e8 000161da     .b...b...b...a..
   18728:	000161d0 000161d0 000161d0 00016534     .a...a...a..4e..
   18738:	00016be0 00016dce 00016dce 00016bc0     .k...m...m...k..
   18748:	00016aaa 00016aaa 00016bb2 00016bc0     .j...j...k...k..
   18758:	00016aaa 00016bb2 00016aaa 00016bc0     .j...k...j...k..
   18768:	00016aa8 00016aa8 00016aa8 00016dd6     .j...j...j...m..
   18778:	00000043                                C...

0001877c <_global_impure_ptr>:
   1877c:	20000048                                H.. 

00018780 <_init>:
   18780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18782:	46c0      	nop			; (mov r8, r8)
   18784:	bcf8      	pop	{r3, r4, r5, r6, r7}
   18786:	bc08      	pop	{r3}
   18788:	469e      	mov	lr, r3
   1878a:	4770      	bx	lr

0001878c <__init_array_start>:
   1878c:	00017fbd 	.word	0x00017fbd

00018790 <__frame_dummy_init_array_entry>:
   18790:	000031cd                                .1..

00018794 <_fini>:
   18794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18796:	46c0      	nop			; (mov r8, r8)
   18798:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1879a:	bc08      	pop	{r3}
   1879c:	469e      	mov	lr, r3
   1879e:	4770      	bx	lr

000187a0 <__fini_array_start>:
   187a0:	000031a5 	.word	0x000031a5
