
SPI_QUICK_START_MASTER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000155ac  00003100  00003100  00003100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000186ac  000186ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000474  20000000  000186b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003530  20000474  00018b28  00020474  2**2
                  ALLOC
  4 .stack        00004004  200039a4  0001c058  00020474  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00055ebc  00000000  00000000  000204f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007160  00000000  00000000  000763b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000802d  00000000  00000000  0007d513  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001718  00000000  00000000  00085540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001490  00000000  00000000  00086c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f5d1  00000000  00000000  000880e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025fcc  00000000  00000000  000a76b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006903f  00000000  00000000  000cd685  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005488  00000000  00000000  001366c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003100 <_sfixed>:
    3100:	200079a8 	.word	0x200079a8
    3104:	00014321 	.word	0x00014321
    3108:	000143a5 	.word	0x000143a5
    310c:	000142f9 	.word	0x000142f9
	...
    312c:	000143ad 	.word	0x000143ad
	...
    3138:	000143ad 	.word	0x000143ad
    313c:	000143ad 	.word	0x000143ad
    3140:	000143ad 	.word	0x000143ad
    3144:	000143ad 	.word	0x000143ad
    3148:	000143ad 	.word	0x000143ad
    314c:	000143ad 	.word	0x000143ad
    3150:	000042dd 	.word	0x000042dd
    3154:	000143ad 	.word	0x000143ad
    3158:	000143ad 	.word	0x000143ad
    315c:	000129f9 	.word	0x000129f9
    3160:	00012a0d 	.word	0x00012a0d
    3164:	00012a21 	.word	0x00012a21
    3168:	00012a35 	.word	0x00012a35
    316c:	00012a49 	.word	0x00012a49
    3170:	00012a5d 	.word	0x00012a5d
    3174:	000057c9 	.word	0x000057c9
    3178:	000057dd 	.word	0x000057dd
    317c:	000057f1 	.word	0x000057f1
    3180:	00005805 	.word	0x00005805
    3184:	00005819 	.word	0x00005819
    3188:	0000582d 	.word	0x0000582d
    318c:	00005841 	.word	0x00005841
    3190:	00005855 	.word	0x00005855
    3194:	00003c5d 	.word	0x00003c5d
    3198:	000143ad 	.word	0x000143ad
    319c:	000143ad 	.word	0x000143ad
    31a0:	000143ad 	.word	0x000143ad

000031a4 <__do_global_dtors_aux>:
    31a4:	b510      	push	{r4, lr}
    31a6:	4c06      	ldr	r4, [pc, #24]	; (31c0 <__do_global_dtors_aux+0x1c>)
    31a8:	7823      	ldrb	r3, [r4, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d107      	bne.n	31be <__do_global_dtors_aux+0x1a>
    31ae:	4b05      	ldr	r3, [pc, #20]	; (31c4 <__do_global_dtors_aux+0x20>)
    31b0:	2b00      	cmp	r3, #0
    31b2:	d002      	beq.n	31ba <__do_global_dtors_aux+0x16>
    31b4:	4804      	ldr	r0, [pc, #16]	; (31c8 <__do_global_dtors_aux+0x24>)
    31b6:	e000      	b.n	31ba <__do_global_dtors_aux+0x16>
    31b8:	bf00      	nop
    31ba:	2301      	movs	r3, #1
    31bc:	7023      	strb	r3, [r4, #0]
    31be:	bd10      	pop	{r4, pc}
    31c0:	20000474 	.word	0x20000474
    31c4:	00000000 	.word	0x00000000
    31c8:	000186b4 	.word	0x000186b4

000031cc <frame_dummy>:
    31cc:	b508      	push	{r3, lr}
    31ce:	4b08      	ldr	r3, [pc, #32]	; (31f0 <frame_dummy+0x24>)
    31d0:	2b00      	cmp	r3, #0
    31d2:	d003      	beq.n	31dc <frame_dummy+0x10>
    31d4:	4807      	ldr	r0, [pc, #28]	; (31f4 <frame_dummy+0x28>)
    31d6:	4908      	ldr	r1, [pc, #32]	; (31f8 <frame_dummy+0x2c>)
    31d8:	e000      	b.n	31dc <frame_dummy+0x10>
    31da:	bf00      	nop
    31dc:	4807      	ldr	r0, [pc, #28]	; (31fc <frame_dummy+0x30>)
    31de:	6803      	ldr	r3, [r0, #0]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d003      	beq.n	31ec <frame_dummy+0x20>
    31e4:	4b06      	ldr	r3, [pc, #24]	; (3200 <frame_dummy+0x34>)
    31e6:	2b00      	cmp	r3, #0
    31e8:	d000      	beq.n	31ec <frame_dummy+0x20>
    31ea:	4798      	blx	r3
    31ec:	bd08      	pop	{r3, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00000000 	.word	0x00000000
    31f4:	000186b4 	.word	0x000186b4
    31f8:	20000478 	.word	0x20000478
    31fc:	000186b4 	.word	0x000186b4
    3200:	00000000 	.word	0x00000000

00003204 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3204:	b580      	push	{r7, lr}
    3206:	b082      	sub	sp, #8
    3208:	af00      	add	r7, sp, #0
    320a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    320c:	687b      	ldr	r3, [r7, #4]
    320e:	2200      	movs	r2, #0
    3210:	701a      	strb	r2, [r3, #0]
}
    3212:	46bd      	mov	sp, r7
    3214:	b002      	add	sp, #8
    3216:	bd80      	pop	{r7, pc}

00003218 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	1c02      	adds	r2, r0, #0
    3220:	6039      	str	r1, [r7, #0]
    3222:	1dfb      	adds	r3, r7, #7
    3224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3226:	1dfb      	adds	r3, r7, #7
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b01      	cmp	r3, #1
    322c:	d00a      	beq.n	3244 <system_apb_clock_set_mask+0x2c>
    322e:	2b02      	cmp	r3, #2
    3230:	d00f      	beq.n	3252 <system_apb_clock_set_mask+0x3a>
    3232:	2b00      	cmp	r3, #0
    3234:	d114      	bne.n	3260 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <system_apb_clock_set_mask+0x58>)
    3238:	4a0d      	ldr	r2, [pc, #52]	; (3270 <system_apb_clock_set_mask+0x58>)
    323a:	6991      	ldr	r1, [r2, #24]
    323c:	683a      	ldr	r2, [r7, #0]
    323e:	430a      	orrs	r2, r1
    3240:	619a      	str	r2, [r3, #24]
			break;
    3242:	e00f      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3244:	4b0a      	ldr	r3, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3246:	4a0a      	ldr	r2, [pc, #40]	; (3270 <system_apb_clock_set_mask+0x58>)
    3248:	69d1      	ldr	r1, [r2, #28]
    324a:	683a      	ldr	r2, [r7, #0]
    324c:	430a      	orrs	r2, r1
    324e:	61da      	str	r2, [r3, #28]
			break;
    3250:	e008      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3252:	4b07      	ldr	r3, [pc, #28]	; (3270 <system_apb_clock_set_mask+0x58>)
    3254:	4a06      	ldr	r2, [pc, #24]	; (3270 <system_apb_clock_set_mask+0x58>)
    3256:	6a11      	ldr	r1, [r2, #32]
    3258:	683a      	ldr	r2, [r7, #0]
    325a:	430a      	orrs	r2, r1
    325c:	621a      	str	r2, [r3, #32]
			break;
    325e:	e001      	b.n	3264 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3260:	2317      	movs	r3, #23
    3262:	e000      	b.n	3266 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3264:	2300      	movs	r3, #0
}
    3266:	1c18      	adds	r0, r3, #0
    3268:	46bd      	mov	sp, r7
    326a:	b002      	add	sp, #8
    326c:	bd80      	pop	{r7, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	40000400 	.word	0x40000400

00003274 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3274:	b580      	push	{r7, lr}
    3276:	b082      	sub	sp, #8
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	2280      	movs	r2, #128	; 0x80
    3280:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2200      	movs	r2, #0
    3286:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	2201      	movs	r2, #1
    328c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2200      	movs	r2, #0
    3292:	70da      	strb	r2, [r3, #3]
}
    3294:	46bd      	mov	sp, r7
    3296:	b002      	add	sp, #8
    3298:	bd80      	pop	{r7, pc}
    329a:	46c0      	nop			; (mov r8, r8)

0000329c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	1c02      	adds	r2, r0, #0
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    32a8:	1dfb      	adds	r3, r7, #7
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <system_voltage_reference_enable+0x1a>
    32b0:	2b01      	cmp	r3, #1
    32b2:	d007      	beq.n	32c4 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    32b4:	e00d      	b.n	32d2 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    32b6:	4b08      	ldr	r3, [pc, #32]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32bc:	2102      	movs	r1, #2
    32be:	430a      	orrs	r2, r1
    32c0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32c2:	e006      	b.n	32d2 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    32c4:	4b04      	ldr	r3, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c6:	4a04      	ldr	r2, [pc, #16]	; (32d8 <system_voltage_reference_enable+0x3c>)
    32c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
    32ca:	2104      	movs	r1, #4
    32cc:	430a      	orrs	r2, r1
    32ce:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    32d0:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    32d2:	46bd      	mov	sp, r7
    32d4:	b002      	add	sp, #8
    32d6:	bd80      	pop	{r7, pc}
    32d8:	40000800 	.word	0x40000800

000032dc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32ea:	68fb      	ldr	r3, [r7, #12]
    32ec:	7e5b      	ldrb	r3, [r3, #25]
    32ee:	b2db      	uxtb	r3, r3
    32f0:	b2db      	uxtb	r3, r3
    32f2:	b25b      	sxtb	r3, r3
    32f4:	2b00      	cmp	r3, #0
    32f6:	da01      	bge.n	32fc <adc_is_syncing+0x20>
		return true;
    32f8:	2301      	movs	r3, #1
    32fa:	e000      	b.n	32fe <adc_is_syncing+0x22>
	}

	return false;
    32fc:	2300      	movs	r3, #0
}
    32fe:	1c18      	adds	r0, r3, #0
    3300:	46bd      	mov	sp, r7
    3302:	b004      	add	sp, #16
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)

00003308 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    3308:	b580      	push	{r7, lr}
    330a:	b082      	sub	sp, #8
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	2200      	movs	r2, #0
    3314:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	2200      	movs	r2, #0
    331a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2200      	movs	r2, #0
    3320:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	2200      	movs	r2, #0
    3326:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	2200      	movs	r2, #0
    332c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2200      	movs	r2, #0
    3332:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2200      	movs	r2, #0
    3338:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	2200      	movs	r2, #0
    333e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	2200      	movs	r2, #0
    3344:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	22c0      	movs	r2, #192	; 0xc0
    334a:	0152      	lsls	r2, r2, #5
    334c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	2200      	movs	r2, #0
    3352:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	2200      	movs	r2, #0
    335e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	2200      	movs	r2, #0
    3364:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	2200      	movs	r2, #0
    336a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    336c:	687a      	ldr	r2, [r7, #4]
    336e:	232a      	movs	r3, #42	; 0x2a
    3370:	2100      	movs	r1, #0
    3372:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	2200      	movs	r2, #0
    3378:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	2200      	movs	r2, #0
    337e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    3380:	687a      	ldr	r2, [r7, #4]
    3382:	2324      	movs	r3, #36	; 0x24
    3384:	2100      	movs	r1, #0
    3386:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	2200      	movs	r2, #0
    338c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	2200      	movs	r2, #0
    3392:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	2200      	movs	r2, #0
    3398:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    339a:	687a      	ldr	r2, [r7, #4]
    339c:	232b      	movs	r3, #43	; 0x2b
    339e:	2100      	movs	r1, #0
    33a0:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
    33a2:	687a      	ldr	r2, [r7, #4]
    33a4:	232c      	movs	r3, #44	; 0x2c
    33a6:	2100      	movs	r1, #0
    33a8:	54d1      	strb	r1, [r2, r3]
}
    33aa:	46bd      	mov	sp, r7
    33ac:	b002      	add	sp, #8
    33ae:	bd80      	pop	{r7, pc}

000033b0 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b098      	sub	sp, #96	; 0x60
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    33b8:	1c3a      	adds	r2, r7, #0
    33ba:	320c      	adds	r2, #12
    33bc:	4b15      	ldr	r3, [pc, #84]	; (3414 <_adc_configure_ain_pin+0x64>)
    33be:	1c11      	adds	r1, r2, #0
    33c0:	1c1a      	adds	r2, r3, #0
    33c2:	2350      	movs	r3, #80	; 0x50
    33c4:	1c08      	adds	r0, r1, #0
    33c6:	1c11      	adds	r1, r2, #0
    33c8:	1c1a      	adds	r2, r3, #0
    33ca:	4b13      	ldr	r3, [pc, #76]	; (3418 <_adc_configure_ain_pin+0x68>)
    33cc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    33ce:	4b13      	ldr	r3, [pc, #76]	; (341c <_adc_configure_ain_pin+0x6c>)
    33d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	2b13      	cmp	r3, #19
    33d6:	d81a      	bhi.n	340e <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    33d8:	1c3b      	adds	r3, r7, #0
    33da:	330c      	adds	r3, #12
    33dc:	687a      	ldr	r2, [r7, #4]
    33de:	0092      	lsls	r2, r2, #2
    33e0:	58d3      	ldr	r3, [r2, r3]
    33e2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    33e4:	1c3b      	adds	r3, r7, #0
    33e6:	3308      	adds	r3, #8
    33e8:	1c18      	adds	r0, r3, #0
    33ea:	4b0d      	ldr	r3, [pc, #52]	; (3420 <_adc_configure_ain_pin+0x70>)
    33ec:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    33ee:	1c3b      	adds	r3, r7, #0
    33f0:	3308      	adds	r3, #8
    33f2:	2200      	movs	r2, #0
    33f4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    33f6:	1c3b      	adds	r3, r7, #0
    33f8:	3308      	adds	r3, #8
    33fa:	2201      	movs	r2, #1
    33fc:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    33fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3400:	b2da      	uxtb	r2, r3
    3402:	1c3b      	adds	r3, r7, #0
    3404:	3308      	adds	r3, #8
    3406:	1c10      	adds	r0, r2, #0
    3408:	1c19      	adds	r1, r3, #0
    340a:	4b06      	ldr	r3, [pc, #24]	; (3424 <_adc_configure_ain_pin+0x74>)
    340c:	4798      	blx	r3
	}
}
    340e:	46bd      	mov	sp, r7
    3410:	b018      	add	sp, #96	; 0x60
    3412:	bd80      	pop	{r7, pc}
    3414:	00018014 	.word	0x00018014
    3418:	00017ddd 	.word	0x00017ddd
    341c:	0000ffff 	.word	0x0000ffff
    3420:	00003275 	.word	0x00003275
    3424:	000142a1 	.word	0x000142a1

00003428 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    3428:	b5b0      	push	{r4, r5, r7, lr}
    342a:	b088      	sub	sp, #32
    342c:	af00      	add	r7, sp, #0
    342e:	6078      	str	r0, [r7, #4]
    3430:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    3432:	1c3b      	adds	r3, r7, #0
    3434:	331f      	adds	r3, #31
    3436:	2200      	movs	r2, #0
    3438:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    343a:	2310      	movs	r3, #16
    343c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    343e:	1c3b      	adds	r3, r7, #0
    3440:	3317      	adds	r3, #23
    3442:	2200      	movs	r2, #0
    3444:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
    3446:	4bcc      	ldr	r3, [pc, #816]	; (3778 <_adc_set_config+0x350>)
    3448:	681a      	ldr	r2, [r3, #0]
    344a:	23f0      	movs	r3, #240	; 0xf0
    344c:	021b      	lsls	r3, r3, #8
    344e:	4013      	ands	r3, r2
    3450:	0b1a      	lsrs	r2, r3, #12
    3452:	1c3b      	adds	r3, r7, #0
    3454:	3313      	adds	r3, #19
    3456:	701a      	strb	r2, [r3, #0]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	60fb      	str	r3, [r7, #12]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    345e:	1c3b      	adds	r3, r7, #0
    3460:	3308      	adds	r3, #8
    3462:	1c18      	adds	r0, r3, #0
    3464:	4bc5      	ldr	r3, [pc, #788]	; (377c <_adc_set_config+0x354>)
    3466:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    3468:	683b      	ldr	r3, [r7, #0]
    346a:	781a      	ldrb	r2, [r3, #0]
    346c:	1c3b      	adds	r3, r7, #0
    346e:	3308      	adds	r3, #8
    3470:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    3472:	1c3b      	adds	r3, r7, #0
    3474:	3308      	adds	r3, #8
    3476:	2017      	movs	r0, #23
    3478:	1c19      	adds	r1, r3, #0
    347a:	4bc1      	ldr	r3, [pc, #772]	; (3780 <_adc_set_config+0x358>)
    347c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    347e:	2017      	movs	r0, #23
    3480:	4bc0      	ldr	r3, [pc, #768]	; (3784 <_adc_set_config+0x35c>)
    3482:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    3484:	683a      	ldr	r2, [r7, #0]
    3486:	232c      	movs	r3, #44	; 0x2c
    3488:	5cd3      	ldrb	r3, [r2, r3]
    348a:	2b00      	cmp	r3, #0
    348c:	d040      	beq.n	3510 <_adc_set_config+0xe8>
		uint8_t offset = config->pin_scan.offset_start_scan;
    348e:	1c3b      	adds	r3, r7, #0
    3490:	3316      	adds	r3, #22
    3492:	6839      	ldr	r1, [r7, #0]
    3494:	222b      	movs	r2, #43	; 0x2b
    3496:	5c8a      	ldrb	r2, [r1, r2]
    3498:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    349a:	683b      	ldr	r3, [r7, #0]
    349c:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    349e:	1c3b      	adds	r3, r7, #0
    34a0:	3315      	adds	r3, #21
    34a2:	1c3a      	adds	r2, r7, #0
    34a4:	3216      	adds	r2, #22
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	188a      	adds	r2, r1, r2
    34aa:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    34ac:	683a      	ldr	r2, [r7, #0]
    34ae:	232c      	movs	r3, #44	; 0x2c
    34b0:	5cd1      	ldrb	r1, [r2, r3]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    34b2:	1c3b      	adds	r3, r7, #0
    34b4:	330b      	adds	r3, #11
    34b6:	1c3a      	adds	r2, r7, #0
    34b8:	3215      	adds	r2, #21
    34ba:	7812      	ldrb	r2, [r2, #0]
    34bc:	188a      	adds	r2, r1, r2
    34be:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34c0:	e018      	b.n	34f4 <_adc_set_config+0xcc>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    34c2:	1c3b      	adds	r3, r7, #0
    34c4:	3316      	adds	r3, #22
    34c6:	781a      	ldrb	r2, [r3, #0]
    34c8:	230f      	movs	r3, #15
    34ca:	401a      	ands	r2, r3
    34cc:	683b      	ldr	r3, [r7, #0]
    34ce:	7b1b      	ldrb	r3, [r3, #12]
    34d0:	18d3      	adds	r3, r2, r3
    34d2:	1c18      	adds	r0, r3, #0
    34d4:	4bac      	ldr	r3, [pc, #688]	; (3788 <_adc_set_config+0x360>)
    34d6:	4798      	blx	r3
			start_pin++;
    34d8:	1c3b      	adds	r3, r7, #0
    34da:	3315      	adds	r3, #21
    34dc:	781a      	ldrb	r2, [r3, #0]
    34de:	1c3b      	adds	r3, r7, #0
    34e0:	3315      	adds	r3, #21
    34e2:	3201      	adds	r2, #1
    34e4:	701a      	strb	r2, [r3, #0]
			offset++;
    34e6:	1c3b      	adds	r3, r7, #0
    34e8:	3316      	adds	r3, #22
    34ea:	781a      	ldrb	r2, [r3, #0]
    34ec:	1c3b      	adds	r3, r7, #0
    34ee:	3316      	adds	r3, #22
    34f0:	3201      	adds	r2, #1
    34f2:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    34f4:	1c3a      	adds	r2, r7, #0
    34f6:	3215      	adds	r2, #21
    34f8:	1c3b      	adds	r3, r7, #0
    34fa:	330b      	adds	r3, #11
    34fc:	7812      	ldrb	r2, [r2, #0]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	429a      	cmp	r2, r3
    3502:	d3de      	bcc.n	34c2 <_adc_set_config+0x9a>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	89db      	ldrh	r3, [r3, #14]
    3508:	1c18      	adds	r0, r3, #0
    350a:	4b9f      	ldr	r3, [pc, #636]	; (3788 <_adc_set_config+0x360>)
    350c:	4798      	blx	r3
    350e:	e009      	b.n	3524 <_adc_set_config+0xfc>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    3510:	683b      	ldr	r3, [r7, #0]
    3512:	7b1b      	ldrb	r3, [r3, #12]
    3514:	1c18      	adds	r0, r3, #0
    3516:	4b9c      	ldr	r3, [pc, #624]	; (3788 <_adc_set_config+0x360>)
    3518:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    351a:	683b      	ldr	r3, [r7, #0]
    351c:	89db      	ldrh	r3, [r3, #14]
    351e:	1c18      	adds	r0, r3, #0
    3520:	4b99      	ldr	r3, [pc, #612]	; (3788 <_adc_set_config+0x360>)
    3522:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    3524:	683b      	ldr	r3, [r7, #0]
    3526:	7d5b      	ldrb	r3, [r3, #21]
    3528:	009b      	lsls	r3, r3, #2
    352a:	b2da      	uxtb	r2, r3
    352c:	68fb      	ldr	r3, [r7, #12]
    352e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    3530:	683b      	ldr	r3, [r7, #0]
    3532:	7d9b      	ldrb	r3, [r3, #22]
    3534:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    3536:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    353c:	b2db      	uxtb	r3, r3
    353e:	4313      	orrs	r3, r2
    3540:	b2db      	uxtb	r3, r3
    3542:	b2da      	uxtb	r2, r3
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    3548:	683b      	ldr	r3, [r7, #0]
    354a:	791b      	ldrb	r3, [r3, #4]
    354c:	2b34      	cmp	r3, #52	; 0x34
    354e:	d85a      	bhi.n	3606 <_adc_set_config+0x1de>
    3550:	009a      	lsls	r2, r3, #2
    3552:	4b8e      	ldr	r3, [pc, #568]	; (378c <_adc_set_config+0x364>)
    3554:	18d3      	adds	r3, r2, r3
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    355a:	1c3b      	adds	r3, r7, #0
    355c:	331f      	adds	r3, #31
    355e:	683a      	ldr	r2, [r7, #0]
    3560:	7c52      	ldrb	r2, [r2, #17]
    3562:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    3564:	1c3b      	adds	r3, r7, #0
    3566:	3317      	adds	r3, #23
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	7c12      	ldrb	r2, [r2, #16]
    356c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    356e:	2310      	movs	r3, #16
    3570:	61bb      	str	r3, [r7, #24]
		break;
    3572:	e04a      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    3574:	1c3b      	adds	r3, r7, #0
    3576:	331f      	adds	r3, #31
    3578:	2201      	movs	r2, #1
    357a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    357c:	1c3b      	adds	r3, r7, #0
    357e:	3317      	adds	r3, #23
    3580:	2202      	movs	r2, #2
    3582:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    3584:	2310      	movs	r3, #16
    3586:	61bb      	str	r3, [r7, #24]
		break;
    3588:	e03f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    358a:	1c3b      	adds	r3, r7, #0
    358c:	331f      	adds	r3, #31
    358e:	2202      	movs	r2, #2
    3590:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    3592:	1c3b      	adds	r3, r7, #0
    3594:	3317      	adds	r3, #23
    3596:	2204      	movs	r2, #4
    3598:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    359a:	2310      	movs	r3, #16
    359c:	61bb      	str	r3, [r7, #24]
		break;
    359e:	e034      	b.n	360a <_adc_set_config+0x1e2>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
    35a0:	1c3b      	adds	r3, r7, #0
    35a2:	3313      	adds	r3, #19
    35a4:	781b      	ldrb	r3, [r3, #0]
    35a6:	2b02      	cmp	r3, #2
    35a8:	d804      	bhi.n	35b4 <_adc_set_config+0x18c>
			adjres = ADC_DIVIDE_RESULT_8;
    35aa:	1c3b      	adds	r3, r7, #0
    35ac:	331f      	adds	r3, #31
    35ae:	2203      	movs	r2, #3
    35b0:	701a      	strb	r2, [r3, #0]
    35b2:	e003      	b.n	35bc <_adc_set_config+0x194>
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
    35b4:	1c3b      	adds	r3, r7, #0
    35b6:	331f      	adds	r3, #31
    35b8:	2201      	movs	r2, #1
    35ba:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    35bc:	1c3b      	adds	r3, r7, #0
    35be:	3317      	adds	r3, #23
    35c0:	2206      	movs	r2, #6
    35c2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35c4:	2310      	movs	r3, #16
    35c6:	61bb      	str	r3, [r7, #24]
		break;
    35c8:	e01f      	b.n	360a <_adc_set_config+0x1e2>

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
    35ca:	1c3b      	adds	r3, r7, #0
    35cc:	3313      	adds	r3, #19
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b02      	cmp	r3, #2
    35d2:	d804      	bhi.n	35de <_adc_set_config+0x1b6>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
    35d4:	1c3b      	adds	r3, r7, #0
    35d6:	331f      	adds	r3, #31
    35d8:	2204      	movs	r2, #4
    35da:	701a      	strb	r2, [r3, #0]
    35dc:	e003      	b.n	35e6 <_adc_set_config+0x1be>
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
    35de:	1c3b      	adds	r3, r7, #0
    35e0:	331f      	adds	r3, #31
    35e2:	2200      	movs	r2, #0
    35e4:	701a      	strb	r2, [r3, #0]
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    35e6:	1c3b      	adds	r3, r7, #0
    35e8:	3317      	adds	r3, #23
    35ea:	2208      	movs	r2, #8
    35ec:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    35ee:	2310      	movs	r3, #16
    35f0:	61bb      	str	r3, [r7, #24]
		break;
    35f2:	e00a      	b.n	360a <_adc_set_config+0x1e2>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    35f4:	2330      	movs	r3, #48	; 0x30
    35f6:	61bb      	str	r3, [r7, #24]
		break;
    35f8:	e007      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    35fa:	2320      	movs	r3, #32
    35fc:	61bb      	str	r3, [r7, #24]
		break;
    35fe:	e004      	b.n	360a <_adc_set_config+0x1e2>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    3600:	2300      	movs	r3, #0
    3602:	61bb      	str	r3, [r7, #24]
		break;
    3604:	e001      	b.n	360a <_adc_set_config+0x1e2>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    3606:	2317      	movs	r3, #23
    3608:	e1a9      	b.n	395e <_adc_set_config+0x536>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    360a:	1c3b      	adds	r3, r7, #0
    360c:	331f      	adds	r3, #31
    360e:	781b      	ldrb	r3, [r3, #0]
    3610:	011b      	lsls	r3, r3, #4
    3612:	b2da      	uxtb	r2, r3
    3614:	2370      	movs	r3, #112	; 0x70
    3616:	4013      	ands	r3, r2
    3618:	b2da      	uxtb	r2, r3
    361a:	1c3b      	adds	r3, r7, #0
    361c:	3317      	adds	r3, #23
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	4313      	orrs	r3, r2
    3622:	b2da      	uxtb	r2, r3
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    3628:	683b      	ldr	r3, [r7, #0]
    362a:	7ddb      	ldrb	r3, [r3, #23]
    362c:	2b3f      	cmp	r3, #63	; 0x3f
    362e:	d901      	bls.n	3634 <_adc_set_config+0x20c>
		return STATUS_ERR_INVALID_ARG;
    3630:	2317      	movs	r3, #23
    3632:	e194      	b.n	395e <_adc_set_config+0x536>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	1c18      	adds	r0, r3, #0
    3642:	4b53      	ldr	r3, [pc, #332]	; (3790 <_adc_set_config+0x368>)
    3644:	4798      	blx	r3
    3646:	1c03      	adds	r3, r0, #0
    3648:	2b00      	cmp	r3, #0
    364a:	d1f8      	bne.n	363e <_adc_set_config+0x216>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    364c:	683b      	ldr	r3, [r7, #0]
    364e:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3650:	69bb      	ldr	r3, [r7, #24]
    3652:	b29b      	uxth	r3, r3
    3654:	4313      	orrs	r3, r2
    3656:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    3658:	6839      	ldr	r1, [r7, #0]
    365a:	2324      	movs	r3, #36	; 0x24
    365c:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    365e:	00db      	lsls	r3, r3, #3
    3660:	b29b      	uxth	r3, r3
    3662:	4313      	orrs	r3, r2
    3664:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    3666:	683b      	ldr	r3, [r7, #0]
    3668:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    366a:	009b      	lsls	r3, r3, #2
    366c:	b29b      	uxth	r3, r3
    366e:	4313      	orrs	r3, r2
    3670:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3676:	18db      	adds	r3, r3, r3
    3678:	b29b      	uxth	r3, r3
    367a:	4313      	orrs	r3, r2
    367c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    367e:	683b      	ldr	r3, [r7, #0]
    3680:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    3682:	4313      	orrs	r3, r2
    3684:	b29a      	uxth	r2, r3
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    368a:	683b      	ldr	r3, [r7, #0]
    368c:	7e1b      	ldrb	r3, [r3, #24]
    368e:	2b00      	cmp	r3, #0
    3690:	d100      	bne.n	3694 <_adc_set_config+0x26c>
    3692:	e0bf      	b.n	3814 <_adc_set_config+0x3ec>
		switch (resolution) {
    3694:	69bb      	ldr	r3, [r7, #24]
    3696:	2b10      	cmp	r3, #16
    3698:	d100      	bne.n	369c <_adc_set_config+0x274>
    369a:	e094      	b.n	37c6 <_adc_set_config+0x39e>
    369c:	d802      	bhi.n	36a4 <_adc_set_config+0x27c>
    369e:	2b00      	cmp	r3, #0
    36a0:	d04f      	beq.n	3742 <_adc_set_config+0x31a>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36a2:	e0b7      	b.n	3814 <_adc_set_config+0x3ec>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
    36a4:	2b20      	cmp	r3, #32
    36a6:	d025      	beq.n	36f4 <_adc_set_config+0x2cc>
    36a8:	2b30      	cmp	r3, #48	; 0x30
    36aa:	d000      	beq.n	36ae <_adc_set_config+0x286>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    36ac:	e0b2      	b.n	3814 <_adc_set_config+0x3ec>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	7cdb      	ldrb	r3, [r3, #19]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d013      	beq.n	36de <_adc_set_config+0x2b6>
					(config->window.window_lower_value > 127 ||
    36b6:	683b      	ldr	r3, [r7, #0]
    36b8:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    36ba:	2b7f      	cmp	r3, #127	; 0x7f
    36bc:	dc0d      	bgt.n	36da <_adc_set_config+0x2b2>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    36c2:	1c1a      	adds	r2, r3, #0
    36c4:	3280      	adds	r2, #128	; 0x80
    36c6:	db08      	blt.n	36da <_adc_set_config+0x2b2>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36c8:	683b      	ldr	r3, [r7, #0]
    36ca:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    36cc:	2b7f      	cmp	r3, #127	; 0x7f
    36ce:	dc04      	bgt.n	36da <_adc_set_config+0x2b2>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    36d4:	1c1a      	adds	r2, r3, #0
    36d6:	3280      	adds	r2, #128	; 0x80
    36d8:	da01      	bge.n	36de <_adc_set_config+0x2b6>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36da:	2317      	movs	r3, #23
    36dc:	e13f      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 255 ||
    36de:	683b      	ldr	r3, [r7, #0]
    36e0:	69db      	ldr	r3, [r3, #28]
    36e2:	2bff      	cmp	r3, #255	; 0xff
    36e4:	dc03      	bgt.n	36ee <_adc_set_config+0x2c6>
					config->window.window_upper_value > 255){
    36e6:	683b      	ldr	r3, [r7, #0]
    36e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    36ea:	2bff      	cmp	r3, #255	; 0xff
    36ec:	dd01      	ble.n	36f2 <_adc_set_config+0x2ca>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    36ee:	2317      	movs	r3, #23
    36f0:	e135      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    36f2:	e08f      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    36f4:	683b      	ldr	r3, [r7, #0]
    36f6:	7cdb      	ldrb	r3, [r3, #19]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d015      	beq.n	3728 <_adc_set_config+0x300>
					(config->window.window_lower_value > 511 ||
    36fc:	683b      	ldr	r3, [r7, #0]
    36fe:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    3700:	4b24      	ldr	r3, [pc, #144]	; (3794 <_adc_set_config+0x36c>)
    3702:	429a      	cmp	r2, r3
    3704:	dc0e      	bgt.n	3724 <_adc_set_config+0x2fc>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3706:	683b      	ldr	r3, [r7, #0]
    3708:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    370a:	4b23      	ldr	r3, [pc, #140]	; (3798 <_adc_set_config+0x370>)
    370c:	429a      	cmp	r2, r3
    370e:	db09      	blt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    3710:	683b      	ldr	r3, [r7, #0]
    3712:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    3714:	4b1f      	ldr	r3, [pc, #124]	; (3794 <_adc_set_config+0x36c>)
    3716:	429a      	cmp	r2, r3
    3718:	dc04      	bgt.n	3724 <_adc_set_config+0x2fc>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
    371a:	683b      	ldr	r3, [r7, #0]
    371c:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    371e:	4b1f      	ldr	r3, [pc, #124]	; (379c <_adc_set_config+0x374>)
    3720:	429a      	cmp	r2, r3
    3722:	db01      	blt.n	3728 <_adc_set_config+0x300>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3724:	2317      	movs	r3, #23
    3726:	e11a      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 1023 ||
    3728:	683b      	ldr	r3, [r7, #0]
    372a:	69da      	ldr	r2, [r3, #28]
    372c:	4b1c      	ldr	r3, [pc, #112]	; (37a0 <_adc_set_config+0x378>)
    372e:	429a      	cmp	r2, r3
    3730:	dc04      	bgt.n	373c <_adc_set_config+0x314>
					config->window.window_upper_value > 1023){
    3732:	683b      	ldr	r3, [r7, #0]
    3734:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    3736:	4b1a      	ldr	r3, [pc, #104]	; (37a0 <_adc_set_config+0x378>)
    3738:	429a      	cmp	r2, r3
    373a:	dd01      	ble.n	3740 <_adc_set_config+0x318>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    373c:	2317      	movs	r3, #23
    373e:	e10e      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3740:	e068      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	7cdb      	ldrb	r3, [r3, #19]
    3746:	2b00      	cmp	r3, #0
    3748:	d030      	beq.n	37ac <_adc_set_config+0x384>
					(config->window.window_lower_value > 2047 ||
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    374e:	4b15      	ldr	r3, [pc, #84]	; (37a4 <_adc_set_config+0x37c>)
    3750:	429a      	cmp	r2, r3
    3752:	dc0e      	bgt.n	3772 <_adc_set_config+0x34a>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    3758:	4b13      	ldr	r3, [pc, #76]	; (37a8 <_adc_set_config+0x380>)
    375a:	429a      	cmp	r2, r3
    375c:	db09      	blt.n	3772 <_adc_set_config+0x34a>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    3762:	4b10      	ldr	r3, [pc, #64]	; (37a4 <_adc_set_config+0x37c>)
    3764:	429a      	cmp	r2, r3
    3766:	dc04      	bgt.n	3772 <_adc_set_config+0x34a>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    376c:	4b0e      	ldr	r3, [pc, #56]	; (37a8 <_adc_set_config+0x380>)
    376e:	429a      	cmp	r2, r3
    3770:	da1c      	bge.n	37ac <_adc_set_config+0x384>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    3772:	2317      	movs	r3, #23
    3774:	e0f3      	b.n	395e <_adc_set_config+0x536>
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	41002018 	.word	0x41002018
    377c:	00003205 	.word	0x00003205
    3780:	00013f81 	.word	0x00013f81
    3784:	00013fc1 	.word	0x00013fc1
    3788:	000033b1 	.word	0x000033b1
    378c:	00018064 	.word	0x00018064
    3790:	000032dd 	.word	0x000032dd
    3794:	000001ff 	.word	0x000001ff
    3798:	fffffe00 	.word	0xfffffe00
    379c:	fffffe01 	.word	0xfffffe01
    37a0:	000003ff 	.word	0x000003ff
    37a4:	000007ff 	.word	0x000007ff
    37a8:	fffff800 	.word	0xfffff800
			} else if (config->window.window_lower_value > 4095 ||
    37ac:	683b      	ldr	r3, [r7, #0]
    37ae:	69da      	ldr	r2, [r3, #28]
    37b0:	4b6d      	ldr	r3, [pc, #436]	; (3968 <_adc_set_config+0x540>)
    37b2:	429a      	cmp	r2, r3
    37b4:	dc04      	bgt.n	37c0 <_adc_set_config+0x398>
					config->window.window_upper_value > 4095){
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    37ba:	4b6b      	ldr	r3, [pc, #428]	; (3968 <_adc_set_config+0x540>)
    37bc:	429a      	cmp	r2, r3
    37be:	dd01      	ble.n	37c4 <_adc_set_config+0x39c>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37c0:	2317      	movs	r3, #23
    37c2:	e0cc      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    37c4:	e026      	b.n	3814 <_adc_set_config+0x3ec>
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37c6:	683b      	ldr	r3, [r7, #0]
    37c8:	7cdb      	ldrb	r3, [r3, #19]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d015      	beq.n	37fa <_adc_set_config+0x3d2>
					(config->window.window_lower_value > 32767 ||
    37ce:	683b      	ldr	r3, [r7, #0]
    37d0:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    37d2:	4b66      	ldr	r3, [pc, #408]	; (396c <_adc_set_config+0x544>)
    37d4:	429a      	cmp	r2, r3
    37d6:	dc0e      	bgt.n	37f6 <_adc_set_config+0x3ce>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37d8:	683b      	ldr	r3, [r7, #0]
    37da:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    37dc:	4b64      	ldr	r3, [pc, #400]	; (3970 <_adc_set_config+0x548>)
    37de:	429a      	cmp	r2, r3
    37e0:	db09      	blt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    37e6:	4b61      	ldr	r3, [pc, #388]	; (396c <_adc_set_config+0x544>)
    37e8:	429a      	cmp	r2, r3
    37ea:	dc04      	bgt.n	37f6 <_adc_set_config+0x3ce>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    37ec:	683b      	ldr	r3, [r7, #0]
    37ee:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    37f0:	4b5f      	ldr	r3, [pc, #380]	; (3970 <_adc_set_config+0x548>)
    37f2:	429a      	cmp	r2, r3
    37f4:	da01      	bge.n	37fa <_adc_set_config+0x3d2>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    37f6:	2317      	movs	r3, #23
    37f8:	e0b1      	b.n	395e <_adc_set_config+0x536>
			} else if (config->window.window_lower_value > 65535 ||
    37fa:	683b      	ldr	r3, [r7, #0]
    37fc:	69da      	ldr	r2, [r3, #28]
    37fe:	4b5d      	ldr	r3, [pc, #372]	; (3974 <_adc_set_config+0x54c>)
    3800:	429a      	cmp	r2, r3
    3802:	dc04      	bgt.n	380e <_adc_set_config+0x3e6>
					config->window.window_upper_value > 65535){
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    3808:	4b5a      	ldr	r3, [pc, #360]	; (3974 <_adc_set_config+0x54c>)
    380a:	429a      	cmp	r2, r3
    380c:	dd01      	ble.n	3812 <_adc_set_config+0x3ea>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    380e:	2317      	movs	r3, #23
    3810:	e0a5      	b.n	395e <_adc_set_config+0x536>
			}
			break;
    3812:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    3814:	46c0      	nop			; (mov r8, r8)
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	1c18      	adds	r0, r3, #0
    381a:	4b57      	ldr	r3, [pc, #348]	; (3978 <_adc_set_config+0x550>)
    381c:	4798      	blx	r3
    381e:	1c03      	adds	r3, r0, #0
    3820:	2b00      	cmp	r3, #0
    3822:	d1f8      	bne.n	3816 <_adc_set_config+0x3ee>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	7e1a      	ldrb	r2, [r3, #24]
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    382c:	46c0      	nop			; (mov r8, r8)
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	1c18      	adds	r0, r3, #0
    3832:	4b51      	ldr	r3, [pc, #324]	; (3978 <_adc_set_config+0x550>)
    3834:	4798      	blx	r3
    3836:	1c03      	adds	r3, r0, #0
    3838:	2b00      	cmp	r3, #0
    383a:	d1f8      	bne.n	382e <_adc_set_config+0x406>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    383c:	683b      	ldr	r3, [r7, #0]
    383e:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    3840:	b29a      	uxth	r2, r3
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	1c18      	adds	r0, r3, #0
    384c:	4b4a      	ldr	r3, [pc, #296]	; (3978 <_adc_set_config+0x550>)
    384e:	4798      	blx	r3
    3850:	1c03      	adds	r3, r0, #0
    3852:	2b00      	cmp	r3, #0
    3854:	d1f8      	bne.n	3848 <_adc_set_config+0x420>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    3856:	683b      	ldr	r3, [r7, #0]
    3858:	6a1b      	ldr	r3, [r3, #32]
    385a:	b29a      	uxth	r2, r3
    385c:	68fb      	ldr	r3, [r7, #12]
    385e:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    3860:	1c3b      	adds	r3, r7, #0
    3862:	3314      	adds	r3, #20
    3864:	6839      	ldr	r1, [r7, #0]
    3866:	222c      	movs	r2, #44	; 0x2c
    3868:	5c8a      	ldrb	r2, [r1, r2]
    386a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    386c:	1c3b      	adds	r3, r7, #0
    386e:	3314      	adds	r3, #20
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d006      	beq.n	3884 <_adc_set_config+0x45c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    3876:	1c3b      	adds	r3, r7, #0
    3878:	3314      	adds	r3, #20
    387a:	781a      	ldrb	r2, [r3, #0]
    387c:	1c3b      	adds	r3, r7, #0
    387e:	3314      	adds	r3, #20
    3880:	3a01      	subs	r2, #1
    3882:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3884:	1c3b      	adds	r3, r7, #0
    3886:	3314      	adds	r3, #20
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	2b0f      	cmp	r3, #15
    388c:	d804      	bhi.n	3898 <_adc_set_config+0x470>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    388e:	683a      	ldr	r2, [r7, #0]
    3890:	232b      	movs	r3, #43	; 0x2b
    3892:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3894:	2b0f      	cmp	r3, #15
    3896:	d901      	bls.n	389c <_adc_set_config+0x474>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    3898:	2317      	movs	r3, #23
    389a:	e060      	b.n	395e <_adc_set_config+0x536>
	}

	while (adc_is_syncing(module_inst)) {
    389c:	46c0      	nop			; (mov r8, r8)
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	1c18      	adds	r0, r3, #0
    38a2:	4b35      	ldr	r3, [pc, #212]	; (3978 <_adc_set_config+0x550>)
    38a4:	4798      	blx	r3
    38a6:	1c03      	adds	r3, r0, #0
    38a8:	2b00      	cmp	r3, #0
    38aa:	d1f8      	bne.n	389e <_adc_set_config+0x476>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    38b0:	6839      	ldr	r1, [r7, #0]
    38b2:	232b      	movs	r3, #43	; 0x2b
    38b4:	5ccb      	ldrb	r3, [r1, r3]
    38b6:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    38b8:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38ba:	1c3b      	adds	r3, r7, #0
    38bc:	3314      	adds	r3, #20
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    38c2:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38c4:	683b      	ldr	r3, [r7, #0]
    38c6:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    38c8:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
    38ca:	683b      	ldr	r3, [r7, #0]
    38cc:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    38ce:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    38d0:	68fb      	ldr	r3, [r7, #12]
    38d2:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    38d4:	683a      	ldr	r2, [r7, #0]
    38d6:	232a      	movs	r3, #42	; 0x2a
    38d8:	5cd2      	ldrb	r2, [r2, r3]
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    38de:	68fb      	ldr	r3, [r7, #12]
    38e0:	220f      	movs	r2, #15
    38e2:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    38e4:	683a      	ldr	r2, [r7, #0]
    38e6:	2324      	movs	r3, #36	; 0x24
    38e8:	5cd3      	ldrb	r3, [r2, r3]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d01d      	beq.n	392a <_adc_set_config+0x502>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    38ee:	683b      	ldr	r3, [r7, #0]
    38f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    38f2:	4b1d      	ldr	r3, [pc, #116]	; (3968 <_adc_set_config+0x540>)
    38f4:	429a      	cmp	r2, r3
    38f6:	d901      	bls.n	38fc <_adc_set_config+0x4d4>
			return STATUS_ERR_INVALID_ARG;
    38f8:	2317      	movs	r3, #23
    38fa:	e030      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    38fc:	683b      	ldr	r3, [r7, #0]
    38fe:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    3900:	68fb      	ldr	r3, [r7, #12]
    3902:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3904:	683b      	ldr	r3, [r7, #0]
    3906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3908:	b21a      	sxth	r2, r3
    390a:	4b1c      	ldr	r3, [pc, #112]	; (397c <_adc_set_config+0x554>)
    390c:	429a      	cmp	r2, r3
    390e:	dc05      	bgt.n	391c <_adc_set_config+0x4f4>
				config->correction.offset_correction < -2048) {
    3910:	683b      	ldr	r3, [r7, #0]
    3912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    3914:	b21a      	sxth	r2, r3
    3916:	4b1a      	ldr	r3, [pc, #104]	; (3980 <_adc_set_config+0x558>)
    3918:	429a      	cmp	r2, r3
    391a:	da01      	bge.n	3920 <_adc_set_config+0x4f8>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    391c:	2317      	movs	r3, #23
    391e:	e01e      	b.n	395e <_adc_set_config+0x536>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3924:	b29a      	uxth	r2, r3
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    392a:	4b16      	ldr	r3, [pc, #88]	; (3984 <_adc_set_config+0x55c>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    3930:	b29b      	uxth	r3, r3
    3932:	021b      	lsls	r3, r3, #8
    3934:	b29a      	uxth	r2, r3
    3936:	23e0      	movs	r3, #224	; 0xe0
    3938:	00db      	lsls	r3, r3, #3
    393a:	4013      	ands	r3, r2
    393c:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <_adc_set_config+0x560>)
    3940:	681a      	ldr	r2, [r3, #0]
    3942:	685b      	ldr	r3, [r3, #4]
    3944:	0158      	lsls	r0, r3, #5
    3946:	0ed4      	lsrs	r4, r2, #27
    3948:	4304      	orrs	r4, r0
    394a:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    394c:	b2a2      	uxth	r2, r4
    394e:	23ff      	movs	r3, #255	; 0xff
    3950:	4013      	ands	r3, r2
    3952:	b29b      	uxth	r3, r3
    3954:	430b      	orrs	r3, r1
    3956:	b29a      	uxth	r2, r3
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    395c:	2300      	movs	r3, #0
}
    395e:	1c18      	adds	r0, r3, #0
    3960:	46bd      	mov	sp, r7
    3962:	b008      	add	sp, #32
    3964:	bdb0      	pop	{r4, r5, r7, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	00000fff 	.word	0x00000fff
    396c:	00007fff 	.word	0x00007fff
    3970:	ffff8000 	.word	0xffff8000
    3974:	0000ffff 	.word	0x0000ffff
    3978:	000032dd 	.word	0x000032dd
    397c:	000007ff 	.word	0x000007ff
    3980:	fffff800 	.word	0xfffff800
    3984:	00806024 	.word	0x00806024
    3988:	00806020 	.word	0x00806020

0000398c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    398c:	b580      	push	{r7, lr}
    398e:	b086      	sub	sp, #24
    3990:	af00      	add	r7, sp, #0
    3992:	60f8      	str	r0, [r7, #12]
    3994:	60b9      	str	r1, [r7, #8]
    3996:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3998:	68fb      	ldr	r3, [r7, #12]
    399a:	68ba      	ldr	r2, [r7, #8]
    399c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    399e:	2380      	movs	r3, #128	; 0x80
    39a0:	025b      	lsls	r3, r3, #9
    39a2:	2002      	movs	r0, #2
    39a4:	1c19      	adds	r1, r3, #0
    39a6:	4b32      	ldr	r3, [pc, #200]	; (3a70 <adc_init+0xe4>)
    39a8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    39aa:	68bb      	ldr	r3, [r7, #8]
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	b2db      	uxtb	r3, r3
    39b0:	1c1a      	adds	r2, r3, #0
    39b2:	2301      	movs	r3, #1
    39b4:	4013      	ands	r3, r2
    39b6:	d001      	beq.n	39bc <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    39b8:	2305      	movs	r3, #5
    39ba:	e055      	b.n	3a68 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    39bc:	68bb      	ldr	r3, [r7, #8]
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	b2db      	uxtb	r3, r3
    39c2:	1c1a      	adds	r2, r3, #0
    39c4:	2302      	movs	r3, #2
    39c6:	4013      	ands	r3, r2
    39c8:	d001      	beq.n	39ce <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    39ca:	231c      	movs	r3, #28
    39cc:	e04c      	b.n	3a68 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	785a      	ldrb	r2, [r3, #1]
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	791b      	ldrb	r3, [r3, #4]
    39da:	2b00      	cmp	r3, #0
    39dc:	d102      	bne.n	39e4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    39de:	2001      	movs	r0, #1
    39e0:	4b24      	ldr	r3, [pc, #144]	; (3a74 <adc_init+0xe8>)
    39e2:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39e4:	1c3b      	adds	r3, r7, #0
    39e6:	3317      	adds	r3, #23
    39e8:	2200      	movs	r2, #0
    39ea:	701a      	strb	r2, [r3, #0]
    39ec:	e00e      	b.n	3a0c <adc_init+0x80>
		module_inst->callback[i] = NULL;
    39ee:	1c3b      	adds	r3, r7, #0
    39f0:	3317      	adds	r3, #23
    39f2:	781a      	ldrb	r2, [r3, #0]
    39f4:	68fb      	ldr	r3, [r7, #12]
    39f6:	3202      	adds	r2, #2
    39f8:	0092      	lsls	r2, r2, #2
    39fa:	2100      	movs	r1, #0
    39fc:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    39fe:	1c3b      	adds	r3, r7, #0
    3a00:	3317      	adds	r3, #23
    3a02:	781a      	ldrb	r2, [r3, #0]
    3a04:	1c3b      	adds	r3, r7, #0
    3a06:	3317      	adds	r3, #23
    3a08:	3201      	adds	r2, #1
    3a0a:	701a      	strb	r2, [r3, #0]
    3a0c:	1c3b      	adds	r3, r7, #0
    3a0e:	3317      	adds	r3, #23
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	2b02      	cmp	r3, #2
    3a14:	d9eb      	bls.n	39ee <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	2200      	movs	r2, #0
    3a1a:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    3a1c:	68fb      	ldr	r3, [r7, #12]
    3a1e:	2200      	movs	r2, #0
    3a20:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    3a22:	68fb      	ldr	r3, [r7, #12]
    3a24:	2200      	movs	r2, #0
    3a26:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	2200      	movs	r2, #0
    3a2c:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    3a2e:	4b12      	ldr	r3, [pc, #72]	; (3a78 <adc_init+0xec>)
    3a30:	68fa      	ldr	r2, [r7, #12]
    3a32:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a34:	687a      	ldr	r2, [r7, #4]
    3a36:	232a      	movs	r3, #42	; 0x2a
    3a38:	5cd3      	ldrb	r3, [r2, r3]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d10a      	bne.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	7d1b      	ldrb	r3, [r3, #20]
    3a42:	2201      	movs	r2, #1
    3a44:	4053      	eors	r3, r2
    3a46:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d003      	beq.n	3a54 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	2201      	movs	r2, #1
    3a50:	775a      	strb	r2, [r3, #29]
    3a52:	e002      	b.n	3a5a <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	2200      	movs	r2, #0
    3a58:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    3a5a:	68fa      	ldr	r2, [r7, #12]
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	1c10      	adds	r0, r2, #0
    3a60:	1c19      	adds	r1, r3, #0
    3a62:	4b06      	ldr	r3, [pc, #24]	; (3a7c <adc_init+0xf0>)
    3a64:	4798      	blx	r3
    3a66:	1c03      	adds	r3, r0, #0
}
    3a68:	1c18      	adds	r0, r3, #0
    3a6a:	46bd      	mov	sp, r7
    3a6c:	b006      	add	sp, #24
    3a6e:	bd80      	pop	{r7, pc}
    3a70:	00003219 	.word	0x00003219
    3a74:	0000329d 	.word	0x0000329d
    3a78:	20000540 	.word	0x20000540
    3a7c:	00003429 	.word	0x00003429

00003a80 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3a8e:	68fb      	ldr	r3, [r7, #12]
    3a90:	7e5b      	ldrb	r3, [r3, #25]
    3a92:	b2db      	uxtb	r3, r3
    3a94:	b2db      	uxtb	r3, r3
    3a96:	b25b      	sxtb	r3, r3
    3a98:	2b00      	cmp	r3, #0
    3a9a:	da01      	bge.n	3aa0 <adc_is_syncing+0x20>
		return true;
    3a9c:	2301      	movs	r3, #1
    3a9e:	e000      	b.n	3aa2 <adc_is_syncing+0x22>
	}

	return false;
    3aa0:	2300      	movs	r3, #0
}
    3aa2:	1c18      	adds	r0, r3, #0
    3aa4:	46bd      	mov	sp, r7
    3aa6:	b004      	add	sp, #16
    3aa8:	bd80      	pop	{r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)

00003aac <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b084      	sub	sp, #16
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	1c18      	adds	r0, r3, #0
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <adc_start_conversion+0x44>)
    3ac2:	4798      	blx	r3
    3ac4:	1c03      	adds	r3, r0, #0
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d1f8      	bne.n	3abc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	7b1b      	ldrb	r3, [r3, #12]
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2202      	movs	r2, #2
    3ad2:	4313      	orrs	r3, r2
    3ad4:	b2da      	uxtb	r2, r3
    3ad6:	68fb      	ldr	r3, [r7, #12]
    3ad8:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	1c18      	adds	r0, r3, #0
    3ae0:	4b03      	ldr	r3, [pc, #12]	; (3af0 <adc_start_conversion+0x44>)
    3ae2:	4798      	blx	r3
    3ae4:	1c03      	adds	r3, r0, #0
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d1f8      	bne.n	3adc <adc_start_conversion+0x30>
		/* Wait for synchronization */
	}
}
    3aea:	46bd      	mov	sp, r7
    3aec:	b004      	add	sp, #16
    3aee:	bd80      	pop	{r7, pc}
    3af0:	00003a81 	.word	0x00003a81

00003af4 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b084      	sub	sp, #16
    3af8:	af00      	add	r7, sp, #0
    3afa:	6078      	str	r0, [r7, #4]
    3afc:	1c0a      	adds	r2, r1, #0
    3afe:	1cfb      	adds	r3, r7, #3
    3b00:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    3b08:	68fb      	ldr	r3, [r7, #12]
    3b0a:	1cfa      	adds	r2, r7, #3
    3b0c:	7812      	ldrb	r2, [r2, #0]
    3b0e:	75da      	strb	r2, [r3, #23]
}
    3b10:	46bd      	mov	sp, r7
    3b12:	b004      	add	sp, #16
    3b14:	bd80      	pop	{r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)

00003b18 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b084      	sub	sp, #16
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	6078      	str	r0, [r7, #4]
    3b20:	1c0a      	adds	r2, r1, #0
    3b22:	1cfb      	adds	r3, r7, #3
    3b24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	1cfa      	adds	r2, r7, #3
    3b30:	7812      	ldrb	r2, [r2, #0]
    3b32:	759a      	strb	r2, [r3, #22]
}
    3b34:	46bd      	mov	sp, r7
    3b36:	b004      	add	sp, #16
    3b38:	bd80      	pop	{r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)

00003b3c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    3b3c:	b580      	push	{r7, lr}
    3b3e:	b084      	sub	sp, #16
    3b40:	af00      	add	r7, sp, #0
    3b42:	1c02      	adds	r2, r0, #0
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	781a      	ldrb	r2, [r3, #0]
    3b4c:	4b40      	ldr	r3, [pc, #256]	; (3c50 <_adc_interrupt_handler+0x114>)
    3b4e:	0092      	lsls	r2, r2, #2
    3b50:	58d3      	ldr	r3, [r2, r3]
    3b52:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    3b54:	68fb      	ldr	r3, [r7, #12]
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	7e1b      	ldrb	r3, [r3, #24]
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    3b5e:	68ba      	ldr	r2, [r7, #8]
    3b60:	2301      	movs	r3, #1
    3b62:	4013      	ands	r3, r2
    3b64:	d03e      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	7edb      	ldrb	r3, [r3, #27]
    3b6a:	1c1a      	adds	r2, r3, #0
    3b6c:	2301      	movs	r3, #1
    3b6e:	4013      	ands	r3, r2
    3b70:	d038      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	7e9b      	ldrb	r3, [r3, #26]
    3b76:	1c1a      	adds	r2, r3, #0
    3b78:	2301      	movs	r3, #1
    3b7a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3b7c:	d032      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3b7e:	68fb      	ldr	r3, [r7, #12]
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	2201      	movs	r2, #1
    3b84:	761a      	strb	r2, [r3, #24]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3b86:	68fb      	ldr	r3, [r7, #12]
    3b88:	695b      	ldr	r3, [r3, #20]
    3b8a:	1c99      	adds	r1, r3, #2
    3b8c:	68fa      	ldr	r2, [r7, #12]
    3b8e:	6151      	str	r1, [r2, #20]
    3b90:	68fa      	ldr	r2, [r7, #12]
    3b92:	6812      	ldr	r2, [r2, #0]
    3b94:	8b52      	ldrh	r2, [r2, #26]
    3b96:	b292      	uxth	r2, r2
    3b98:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	8b1b      	ldrh	r3, [r3, #24]
    3b9e:	b29b      	uxth	r3, r3
    3ba0:	3b01      	subs	r3, #1
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	68fa      	ldr	r2, [r7, #12]
    3ba6:	1c19      	adds	r1, r3, #0
    3ba8:	8311      	strh	r1, [r2, #24]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d008      	beq.n	3bc0 <_adc_interrupt_handler+0x84>
				if (module->software_trigger == true) {
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	7f5b      	ldrb	r3, [r3, #29]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d016      	beq.n	3be4 <_adc_interrupt_handler+0xa8>
					adc_start_conversion(module);
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	1c18      	adds	r0, r3, #0
    3bba:	4b26      	ldr	r3, [pc, #152]	; (3c54 <_adc_interrupt_handler+0x118>)
    3bbc:	4798      	blx	r3
    3bbe:	e011      	b.n	3be4 <_adc_interrupt_handler+0xa8>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	7f1b      	ldrb	r3, [r3, #28]
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	2b05      	cmp	r3, #5
    3bc8:	d10c      	bne.n	3be4 <_adc_interrupt_handler+0xa8>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	2200      	movs	r2, #0
    3bce:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	1c18      	adds	r0, r3, #0
    3bd4:	2101      	movs	r1, #1
    3bd6:	4b20      	ldr	r3, [pc, #128]	; (3c58 <_adc_interrupt_handler+0x11c>)
    3bd8:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	689b      	ldr	r3, [r3, #8]
    3bde:	68fa      	ldr	r2, [r7, #12]
    3be0:	1c10      	adds	r0, r2, #0
    3be2:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3be4:	68ba      	ldr	r2, [r7, #8]
    3be6:	2304      	movs	r3, #4
    3be8:	4013      	ands	r3, r2
    3bea:	d014      	beq.n	3c16 <_adc_interrupt_handler+0xda>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2204      	movs	r2, #4
    3bf2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	7edb      	ldrb	r3, [r3, #27]
    3bf8:	1c1a      	adds	r2, r3, #0
    3bfa:	2302      	movs	r3, #2
    3bfc:	4013      	ands	r3, r2
    3bfe:	d00a      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3c00:	68fb      	ldr	r3, [r7, #12]
    3c02:	7e9b      	ldrb	r3, [r3, #26]
    3c04:	1c1a      	adds	r2, r3, #0
    3c06:	2302      	movs	r3, #2
    3c08:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3c0a:	d004      	beq.n	3c16 <_adc_interrupt_handler+0xda>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3c0c:	68fb      	ldr	r3, [r7, #12]
    3c0e:	68db      	ldr	r3, [r3, #12]
    3c10:	68fa      	ldr	r2, [r7, #12]
    3c12:	1c10      	adds	r0, r2, #0
    3c14:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3c16:	68ba      	ldr	r2, [r7, #8]
    3c18:	2302      	movs	r3, #2
    3c1a:	4013      	ands	r3, r2
    3c1c:	d014      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3c1e:	68fb      	ldr	r3, [r7, #12]
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	2202      	movs	r2, #2
    3c24:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	7edb      	ldrb	r3, [r3, #27]
    3c2a:	1c1a      	adds	r2, r3, #0
    3c2c:	2304      	movs	r3, #4
    3c2e:	4013      	ands	r3, r2
    3c30:	d00a      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	7e9b      	ldrb	r3, [r3, #26]
    3c36:	1c1a      	adds	r2, r3, #0
    3c38:	2304      	movs	r3, #4
    3c3a:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3c3c:	d004      	beq.n	3c48 <_adc_interrupt_handler+0x10c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3c3e:	68fb      	ldr	r3, [r7, #12]
    3c40:	691b      	ldr	r3, [r3, #16]
    3c42:	68fa      	ldr	r2, [r7, #12]
    3c44:	1c10      	adds	r0, r2, #0
    3c46:	4798      	blx	r3
		}
	}
}
    3c48:	46bd      	mov	sp, r7
    3c4a:	b004      	add	sp, #16
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	20000540 	.word	0x20000540
    3c54:	00003aad 	.word	0x00003aad
    3c58:	00003b19 	.word	0x00003b19

00003c5c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3c60:	2000      	movs	r0, #0
    3c62:	4b02      	ldr	r3, [pc, #8]	; (3c6c <ADC_Handler+0x10>)
    3c64:	4798      	blx	r3
}
    3c66:	46bd      	mov	sp, r7
    3c68:	bd80      	pop	{r7, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	00003b3d 	.word	0x00003b3d

00003c70 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b084      	sub	sp, #16
    3c74:	af00      	add	r7, sp, #0
    3c76:	60f8      	str	r0, [r7, #12]
    3c78:	60b9      	str	r1, [r7, #8]
    3c7a:	1dfb      	adds	r3, r7, #7
    3c7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3c7e:	1dfb      	adds	r3, r7, #7
    3c80:	781a      	ldrb	r2, [r3, #0]
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	3202      	adds	r2, #2
    3c86:	0092      	lsls	r2, r2, #2
    3c88:	68b9      	ldr	r1, [r7, #8]
    3c8a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    3c8c:	68fb      	ldr	r3, [r7, #12]
    3c8e:	7e9b      	ldrb	r3, [r3, #26]
    3c90:	b2da      	uxtb	r2, r3
    3c92:	1dfb      	adds	r3, r7, #7
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2101      	movs	r1, #1
    3c98:	1c08      	adds	r0, r1, #0
    3c9a:	4098      	lsls	r0, r3
    3c9c:	1c03      	adds	r3, r0, #0
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	4313      	orrs	r3, r2
    3ca2:	b2db      	uxtb	r3, r3
    3ca4:	b2da      	uxtb	r2, r3
    3ca6:	68fb      	ldr	r3, [r7, #12]
    3ca8:	769a      	strb	r2, [r3, #26]
}
    3caa:	46bd      	mov	sp, r7
    3cac:	b004      	add	sp, #16
    3cae:	bd80      	pop	{r7, pc}

00003cb0 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	60f8      	str	r0, [r7, #12]
    3cb8:	60b9      	str	r1, [r7, #8]
    3cba:	1dbb      	adds	r3, r7, #6
    3cbc:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	8b1b      	ldrh	r3, [r3, #24]
    3cc2:	b29b      	uxth	r3, r3
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d104      	bne.n	3cd2 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    3cc8:	68fb      	ldr	r3, [r7, #12]
    3cca:	7f1b      	ldrb	r3, [r3, #28]
    3ccc:	b2db      	uxtb	r3, r3
{
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    3cce:	2b05      	cmp	r3, #5
    3cd0:	d101      	bne.n	3cd6 <adc_read_buffer_job+0x26>
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    3cd2:	2305      	movs	r3, #5
    3cd4:	e017      	b.n	3d06 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    3cd6:	68fb      	ldr	r3, [r7, #12]
    3cd8:	2205      	movs	r2, #5
    3cda:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	1dba      	adds	r2, r7, #6
    3ce0:	8812      	ldrh	r2, [r2, #0]
    3ce2:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    3ce4:	68fb      	ldr	r3, [r7, #12]
    3ce6:	68ba      	ldr	r2, [r7, #8]
    3ce8:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	1c18      	adds	r0, r3, #0
    3cee:	2101      	movs	r1, #1
    3cf0:	4b07      	ldr	r3, [pc, #28]	; (3d10 <adc_read_buffer_job+0x60>)
    3cf2:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    3cf4:	68fb      	ldr	r3, [r7, #12]
    3cf6:	7f5b      	ldrb	r3, [r3, #29]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d003      	beq.n	3d04 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    3cfc:	68fb      	ldr	r3, [r7, #12]
    3cfe:	1c18      	adds	r0, r3, #0
    3d00:	4b04      	ldr	r3, [pc, #16]	; (3d14 <adc_read_buffer_job+0x64>)
    3d02:	4798      	blx	r3
	}

	return STATUS_OK;
    3d04:	2300      	movs	r3, #0
}
    3d06:	1c18      	adds	r0, r3, #0
    3d08:	46bd      	mov	sp, r7
    3d0a:	b004      	add	sp, #16
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	00003af5 	.word	0x00003af5
    3d14:	00003aad 	.word	0x00003aad

00003d18 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	b084      	sub	sp, #16
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	1c02      	adds	r2, r0, #0
    3d20:	6039      	str	r1, [r7, #0]
    3d22:	1dfb      	adds	r3, r7, #7
    3d24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    3d26:	2300      	movs	r3, #0
    3d28:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    3d2a:	4b2b      	ldr	r3, [pc, #172]	; (3dd8 <bod_set_config+0xc0>)
    3d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3d2e:	2302      	movs	r3, #2
    3d30:	4013      	ands	r3, r2
    3d32:	d005      	beq.n	3d40 <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    3d34:	4b28      	ldr	r3, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d36:	4a28      	ldr	r2, [pc, #160]	; (3dd8 <bod_set_config+0xc0>)
    3d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
    3d3a:	2102      	movs	r1, #2
    3d3c:	438a      	bics	r2, r1
    3d3e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d40:	683b      	ldr	r3, [r7, #0]
    3d42:	881b      	ldrh	r3, [r3, #0]
    3d44:	1c1a      	adds	r2, r3, #0
    3d46:	683b      	ldr	r3, [r7, #0]
    3d48:	791b      	ldrb	r3, [r3, #4]
    3d4a:	431a      	orrs	r2, r3
			(uint32_t)conf->mode;
    3d4c:	683b      	ldr	r3, [r7, #0]
    3d4e:	885b      	ldrh	r3, [r3, #2]
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    3d50:	4313      	orrs	r3, r2
    3d52:	68fa      	ldr	r2, [r7, #12]
    3d54:	4313      	orrs	r3, r2
    3d56:	60fb      	str	r3, [r7, #12]
			(uint32_t)conf->mode;

	if (conf->mode == BOD_MODE_SAMPLED) {
    3d58:	683b      	ldr	r3, [r7, #0]
    3d5a:	885a      	ldrh	r2, [r3, #2]
    3d5c:	2380      	movs	r3, #128	; 0x80
    3d5e:	005b      	lsls	r3, r3, #1
    3d60:	429a      	cmp	r2, r3
    3d62:	d104      	bne.n	3d6e <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	0092      	lsls	r2, r2, #2
    3d6a:	4313      	orrs	r3, r2
    3d6c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	799b      	ldrb	r3, [r3, #6]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d003      	beq.n	3d7e <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	2204      	movs	r2, #4
    3d7a:	4313      	orrs	r3, r2
    3d7c:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    3d7e:	683b      	ldr	r3, [r7, #0]
    3d80:	79db      	ldrb	r3, [r3, #7]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d003      	beq.n	3d8e <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    3d86:	68fb      	ldr	r3, [r7, #12]
    3d88:	2240      	movs	r2, #64	; 0x40
    3d8a:	4313      	orrs	r3, r2
    3d8c:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    3d8e:	1dfb      	adds	r3, r7, #7
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d11a      	bne.n	3dcc <bod_set_config+0xb4>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    3d96:	683b      	ldr	r3, [r7, #0]
    3d98:	795b      	ldrb	r3, [r3, #5]
    3d9a:	2b3f      	cmp	r3, #63	; 0x3f
    3d9c:	d901      	bls.n	3da2 <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    3d9e:	2317      	movs	r3, #23
    3da0:	e015      	b.n	3dce <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    3da2:	4b0d      	ldr	r3, [pc, #52]	; (3dd8 <bod_set_config+0xc0>)
    3da4:	683a      	ldr	r2, [r7, #0]
    3da6:	7952      	ldrb	r2, [r2, #5]
    3da8:	0412      	lsls	r2, r2, #16
    3daa:	1c11      	adds	r1, r2, #0
    3dac:	22fc      	movs	r2, #252	; 0xfc
    3dae:	0392      	lsls	r2, r2, #14
    3db0:	4011      	ands	r1, r2
    3db2:	68fa      	ldr	r2, [r7, #12]
    3db4:	430a      	orrs	r2, r1
    3db6:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    3db8:	46c0      	nop			; (mov r8, r8)
    3dba:	4b07      	ldr	r3, [pc, #28]	; (3dd8 <bod_set_config+0xc0>)
    3dbc:	68da      	ldr	r2, [r3, #12]
    3dbe:	2380      	movs	r3, #128	; 0x80
    3dc0:	011b      	lsls	r3, r3, #4
    3dc2:	4013      	ands	r3, r2
    3dc4:	d0f9      	beq.n	3dba <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    3dc6:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3dc8:	2300      	movs	r3, #0
    3dca:	e000      	b.n	3dce <bod_set_config+0xb6>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    3dcc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3dce:	1c18      	adds	r0, r3, #0
    3dd0:	46bd      	mov	sp, r7
    3dd2:	b004      	add	sp, #16
    3dd4:	bd80      	pop	{r7, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	40000800 	.word	0x40000800

00003ddc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b082      	sub	sp, #8
    3de0:	af00      	add	r7, sp, #0
    3de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3de4:	687b      	ldr	r3, [r7, #4]
    3de6:	2280      	movs	r2, #128	; 0x80
    3de8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	2200      	movs	r2, #0
    3dee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	2201      	movs	r2, #1
    3df4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	2200      	movs	r2, #0
    3dfa:	70da      	strb	r2, [r3, #3]
}
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b002      	add	sp, #8
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)

00003e04 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b084      	sub	sp, #16
    3e08:	af00      	add	r7, sp, #0
    3e0a:	1c02      	adds	r2, r0, #0
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3e10:	1c3b      	adds	r3, r7, #0
    3e12:	330f      	adds	r3, #15
    3e14:	1dfa      	adds	r2, r7, #7
    3e16:	7812      	ldrb	r2, [r2, #0]
    3e18:	0952      	lsrs	r2, r2, #5
    3e1a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3e1c:	1c3b      	adds	r3, r7, #0
    3e1e:	330f      	adds	r3, #15
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d10b      	bne.n	3e3e <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e26:	4b08      	ldr	r3, [pc, #32]	; (3e48 <_extint_get_eic_from_channel+0x44>)
    3e28:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3e2a:	1c3b      	adds	r3, r7, #0
    3e2c:	330f      	adds	r3, #15
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	009b      	lsls	r3, r3, #2
    3e32:	2210      	movs	r2, #16
    3e34:	19d2      	adds	r2, r2, r7
    3e36:	18d3      	adds	r3, r2, r3
    3e38:	3b08      	subs	r3, #8
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	e000      	b.n	3e40 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    3e3e:	2300      	movs	r3, #0
	}
}
    3e40:	1c18      	adds	r0, r3, #0
    3e42:	46bd      	mov	sp, r7
    3e44:	b004      	add	sp, #16
    3e46:	bd80      	pop	{r7, pc}
    3e48:	40001800 	.word	0x40001800

00003e4c <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3e52:	4b0f      	ldr	r3, [pc, #60]	; (3e90 <extint_is_syncing+0x44>)
    3e54:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e56:	2300      	movs	r3, #0
    3e58:	607b      	str	r3, [r7, #4]
    3e5a:	e011      	b.n	3e80 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	009b      	lsls	r3, r3, #2
    3e60:	2208      	movs	r2, #8
    3e62:	19d2      	adds	r2, r2, r7
    3e64:	18d3      	adds	r3, r2, r3
    3e66:	3b08      	subs	r3, #8
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	785b      	ldrb	r3, [r3, #1]
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	b25b      	sxtb	r3, r3
    3e72:	2b00      	cmp	r3, #0
    3e74:	da01      	bge.n	3e7a <extint_is_syncing+0x2e>
			return true;
    3e76:	2301      	movs	r3, #1
    3e78:	e006      	b.n	3e88 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	3301      	adds	r3, #1
    3e7e:	607b      	str	r3, [r7, #4]
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	2b00      	cmp	r3, #0
    3e84:	d0ea      	beq.n	3e5c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    3e86:	2300      	movs	r3, #0
}
    3e88:	1c18      	adds	r0, r3, #0
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	40001800 	.word	0x40001800

00003e94 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2200      	movs	r2, #0
    3ea0:	701a      	strb	r2, [r3, #0]
}
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b002      	add	sp, #8
    3ea6:	bd80      	pop	{r7, pc}

00003ea8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	1c02      	adds	r2, r0, #0
    3eb0:	6039      	str	r1, [r7, #0]
    3eb2:	1dfb      	adds	r3, r7, #7
    3eb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3eb6:	1dfb      	adds	r3, r7, #7
    3eb8:	781b      	ldrb	r3, [r3, #0]
    3eba:	2b01      	cmp	r3, #1
    3ebc:	d00a      	beq.n	3ed4 <system_apb_clock_set_mask+0x2c>
    3ebe:	2b02      	cmp	r3, #2
    3ec0:	d00f      	beq.n	3ee2 <system_apb_clock_set_mask+0x3a>
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d114      	bne.n	3ef0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ec6:	4b0e      	ldr	r3, [pc, #56]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ec8:	4a0d      	ldr	r2, [pc, #52]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3eca:	6991      	ldr	r1, [r2, #24]
    3ecc:	683a      	ldr	r2, [r7, #0]
    3ece:	430a      	orrs	r2, r1
    3ed0:	619a      	str	r2, [r3, #24]
			break;
    3ed2:	e00f      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3ed4:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed6:	4a0a      	ldr	r2, [pc, #40]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ed8:	69d1      	ldr	r1, [r2, #28]
    3eda:	683a      	ldr	r2, [r7, #0]
    3edc:	430a      	orrs	r2, r1
    3ede:	61da      	str	r2, [r3, #28]
			break;
    3ee0:	e008      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3ee2:	4b07      	ldr	r3, [pc, #28]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee4:	4a06      	ldr	r2, [pc, #24]	; (3f00 <system_apb_clock_set_mask+0x58>)
    3ee6:	6a11      	ldr	r1, [r2, #32]
    3ee8:	683a      	ldr	r2, [r7, #0]
    3eea:	430a      	orrs	r2, r1
    3eec:	621a      	str	r2, [r3, #32]
			break;
    3eee:	e001      	b.n	3ef4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3ef0:	2317      	movs	r3, #23
    3ef2:	e000      	b.n	3ef6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3ef4:	2300      	movs	r3, #0
}
    3ef6:	1c18      	adds	r0, r3, #0
    3ef8:	46bd      	mov	sp, r7
    3efa:	b002      	add	sp, #8
    3efc:	bd80      	pop	{r7, pc}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	40000400 	.word	0x40000400

00003f04 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	1c02      	adds	r2, r0, #0
    3f0c:	1dfb      	adds	r3, r7, #7
    3f0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f10:	4b06      	ldr	r3, [pc, #24]	; (3f2c <system_interrupt_enable+0x28>)
    3f12:	1dfa      	adds	r2, r7, #7
    3f14:	7812      	ldrb	r2, [r2, #0]
    3f16:	1c11      	adds	r1, r2, #0
    3f18:	221f      	movs	r2, #31
    3f1a:	400a      	ands	r2, r1
    3f1c:	2101      	movs	r1, #1
    3f1e:	1c08      	adds	r0, r1, #0
    3f20:	4090      	lsls	r0, r2
    3f22:	1c02      	adds	r2, r0, #0
    3f24:	601a      	str	r2, [r3, #0]
}
    3f26:	46bd      	mov	sp, r7
    3f28:	b002      	add	sp, #8
    3f2a:	bd80      	pop	{r7, pc}
    3f2c:	e000e100 	.word	0xe000e100

00003f30 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b084      	sub	sp, #16
    3f34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3f36:	4b2c      	ldr	r3, [pc, #176]	; (3fe8 <_system_extint_init+0xb8>)
    3f38:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3f3a:	2000      	movs	r0, #0
    3f3c:	2140      	movs	r1, #64	; 0x40
    3f3e:	4b2b      	ldr	r3, [pc, #172]	; (3fec <_system_extint_init+0xbc>)
    3f40:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3f42:	1c3b      	adds	r3, r7, #0
    3f44:	1c18      	adds	r0, r3, #0
    3f46:	4b2a      	ldr	r3, [pc, #168]	; (3ff0 <_system_extint_init+0xc0>)
    3f48:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3f4a:	1c3b      	adds	r3, r7, #0
    3f4c:	2200      	movs	r2, #0
    3f4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3f50:	1c3b      	adds	r3, r7, #0
    3f52:	2003      	movs	r0, #3
    3f54:	1c19      	adds	r1, r3, #0
    3f56:	4b27      	ldr	r3, [pc, #156]	; (3ff4 <_system_extint_init+0xc4>)
    3f58:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3f5a:	2003      	movs	r0, #3
    3f5c:	4b26      	ldr	r3, [pc, #152]	; (3ff8 <_system_extint_init+0xc8>)
    3f5e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f60:	2300      	movs	r3, #0
    3f62:	60fb      	str	r3, [r7, #12]
    3f64:	e016      	b.n	3f94 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3f66:	68fb      	ldr	r3, [r7, #12]
    3f68:	009b      	lsls	r3, r3, #2
    3f6a:	2110      	movs	r1, #16
    3f6c:	19c9      	adds	r1, r1, r7
    3f6e:	18cb      	adds	r3, r1, r3
    3f70:	3b0c      	subs	r3, #12
    3f72:	681a      	ldr	r2, [r3, #0]
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	009b      	lsls	r3, r3, #2
    3f78:	2110      	movs	r1, #16
    3f7a:	19c9      	adds	r1, r1, r7
    3f7c:	18cb      	adds	r3, r1, r3
    3f7e:	3b0c      	subs	r3, #12
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	b2db      	uxtb	r3, r3
    3f86:	2101      	movs	r1, #1
    3f88:	430b      	orrs	r3, r1
    3f8a:	b2db      	uxtb	r3, r3
    3f8c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	3301      	adds	r3, #1
    3f92:	60fb      	str	r3, [r7, #12]
    3f94:	68fb      	ldr	r3, [r7, #12]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d0e5      	beq.n	3f66 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	4b17      	ldr	r3, [pc, #92]	; (3ffc <_system_extint_init+0xcc>)
    3f9e:	4798      	blx	r3
    3fa0:	1c03      	adds	r3, r0, #0
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d1fa      	bne.n	3f9c <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fa6:	1c3b      	adds	r3, r7, #0
    3fa8:	330b      	adds	r3, #11
    3faa:	2200      	movs	r2, #0
    3fac:	701a      	strb	r2, [r3, #0]
    3fae:	e00d      	b.n	3fcc <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    3fb0:	1c3b      	adds	r3, r7, #0
    3fb2:	330b      	adds	r3, #11
    3fb4:	781a      	ldrb	r2, [r3, #0]
    3fb6:	4b12      	ldr	r3, [pc, #72]	; (4000 <__stack_size__>)
    3fb8:	0092      	lsls	r2, r2, #2
    3fba:	2100      	movs	r1, #0
    3fbc:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3fbe:	1c3b      	adds	r3, r7, #0
    3fc0:	330b      	adds	r3, #11
    3fc2:	781a      	ldrb	r2, [r3, #0]
    3fc4:	1c3b      	adds	r3, r7, #0
    3fc6:	330b      	adds	r3, #11
    3fc8:	3201      	adds	r2, #1
    3fca:	701a      	strb	r2, [r3, #0]
    3fcc:	1c3b      	adds	r3, r7, #0
    3fce:	330b      	adds	r3, #11
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2b0f      	cmp	r3, #15
    3fd4:	d9ec      	bls.n	3fb0 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3fd6:	2004      	movs	r0, #4
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <__stack_size__+0x4>)
    3fda:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3fdc:	4b0a      	ldr	r3, [pc, #40]	; (4008 <__stack_size__+0x8>)
    3fde:	4798      	blx	r3
}
    3fe0:	46bd      	mov	sp, r7
    3fe2:	b004      	add	sp, #16
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	40001800 	.word	0x40001800
    3fec:	00003ea9 	.word	0x00003ea9
    3ff0:	00003e95 	.word	0x00003e95
    3ff4:	00013f81 	.word	0x00013f81
    3ff8:	00013fc1 	.word	0x00013fc1
    3ffc:	00003e4d 	.word	0x00003e4d
    4000:	20000544 	.word	0x20000544
    4004:	00003f05 	.word	0x00003f05
    4008:	0000400d 	.word	0x0000400d

0000400c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4012:	4b14      	ldr	r3, [pc, #80]	; (4064 <_extint_enable+0x58>)
    4014:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4016:	2300      	movs	r3, #0
    4018:	607b      	str	r3, [r7, #4]
    401a:	e016      	b.n	404a <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	009b      	lsls	r3, r3, #2
    4020:	2108      	movs	r1, #8
    4022:	19c9      	adds	r1, r1, r7
    4024:	18cb      	adds	r3, r1, r3
    4026:	3b08      	subs	r3, #8
    4028:	681a      	ldr	r2, [r3, #0]
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	009b      	lsls	r3, r3, #2
    402e:	2108      	movs	r1, #8
    4030:	19c9      	adds	r1, r1, r7
    4032:	18cb      	adds	r3, r1, r3
    4034:	3b08      	subs	r3, #8
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	b2db      	uxtb	r3, r3
    403c:	2102      	movs	r1, #2
    403e:	430b      	orrs	r3, r1
    4040:	b2db      	uxtb	r3, r3
    4042:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	3301      	adds	r3, #1
    4048:	607b      	str	r3, [r7, #4]
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	2b00      	cmp	r3, #0
    404e:	d0e5      	beq.n	401c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <_extint_enable+0x5c>)
    4054:	4798      	blx	r3
    4056:	1c03      	adds	r3, r0, #0
    4058:	2b00      	cmp	r3, #0
    405a:	d1fa      	bne.n	4052 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    405c:	46bd      	mov	sp, r7
    405e:	b002      	add	sp, #8
    4060:	bd80      	pop	{r7, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	40001800 	.word	0x40001800
    4068:	00003e4d 	.word	0x00003e4d

0000406c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    406c:	b590      	push	{r4, r7, lr}
    406e:	b087      	sub	sp, #28
    4070:	af00      	add	r7, sp, #0
    4072:	1c02      	adds	r2, r0, #0
    4074:	6039      	str	r1, [r7, #0]
    4076:	1dfb      	adds	r3, r7, #7
    4078:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    407a:	1c3b      	adds	r3, r7, #0
    407c:	3308      	adds	r3, #8
    407e:	1c18      	adds	r0, r3, #0
    4080:	4b37      	ldr	r3, [pc, #220]	; (4160 <extint_chan_set_config+0xf4>)
    4082:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4084:	683b      	ldr	r3, [r7, #0]
    4086:	685b      	ldr	r3, [r3, #4]
    4088:	b2da      	uxtb	r2, r3
    408a:	1c3b      	adds	r3, r7, #0
    408c:	3308      	adds	r3, #8
    408e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4090:	1c3b      	adds	r3, r7, #0
    4092:	3308      	adds	r3, #8
    4094:	2200      	movs	r2, #0
    4096:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	7a1a      	ldrb	r2, [r3, #8]
    409c:	1c3b      	adds	r3, r7, #0
    409e:	3308      	adds	r3, #8
    40a0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	b2da      	uxtb	r2, r3
    40a8:	1c3b      	adds	r3, r7, #0
    40aa:	3308      	adds	r3, #8
    40ac:	1c10      	adds	r0, r2, #0
    40ae:	1c19      	adds	r1, r3, #0
    40b0:	4b2c      	ldr	r3, [pc, #176]	; (4164 <extint_chan_set_config+0xf8>)
    40b2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	1c18      	adds	r0, r3, #0
    40ba:	4b2b      	ldr	r3, [pc, #172]	; (4168 <extint_chan_set_config+0xfc>)
    40bc:	4798      	blx	r3
    40be:	1c03      	adds	r3, r0, #0
    40c0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	781a      	ldrb	r2, [r3, #0]
    40c6:	2307      	movs	r3, #7
    40c8:	4013      	ands	r3, r2
    40ca:	009b      	lsls	r3, r3, #2
    40cc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	7adb      	ldrb	r3, [r3, #11]
    40d2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    40d4:	683b      	ldr	r3, [r7, #0]
    40d6:	7a9b      	ldrb	r3, [r3, #10]
    40d8:	2b00      	cmp	r3, #0
    40da:	d003      	beq.n	40e4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    40dc:	697b      	ldr	r3, [r7, #20]
    40de:	2208      	movs	r2, #8
    40e0:	4313      	orrs	r3, r2
    40e2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    40e4:	1dfb      	adds	r3, r7, #7
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	08db      	lsrs	r3, r3, #3
    40ea:	b2db      	uxtb	r3, r3
    40ec:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    40ee:	1dfb      	adds	r3, r7, #7
    40f0:	781b      	ldrb	r3, [r3, #0]
    40f2:	08db      	lsrs	r3, r3, #3
    40f4:	b2db      	uxtb	r3, r3
    40f6:	1c19      	adds	r1, r3, #0
    40f8:	693b      	ldr	r3, [r7, #16]
    40fa:	3106      	adds	r1, #6
    40fc:	0089      	lsls	r1, r1, #2
    40fe:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4100:	68f9      	ldr	r1, [r7, #12]
    4102:	200f      	movs	r0, #15
    4104:	1c04      	adds	r4, r0, #0
    4106:	408c      	lsls	r4, r1
    4108:	1c21      	adds	r1, r4, #0
    410a:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    410c:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	6978      	ldr	r0, [r7, #20]
    4112:	1c04      	adds	r4, r0, #0
    4114:	409c      	lsls	r4, r3
    4116:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4118:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    411a:	693b      	ldr	r3, [r7, #16]
    411c:	3206      	adds	r2, #6
    411e:	0092      	lsls	r2, r2, #2
    4120:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4122:	683b      	ldr	r3, [r7, #0]
    4124:	7a5b      	ldrb	r3, [r3, #9]
    4126:	2b00      	cmp	r3, #0
    4128:	d00b      	beq.n	4142 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    412a:	693b      	ldr	r3, [r7, #16]
    412c:	695a      	ldr	r2, [r3, #20]
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2101      	movs	r1, #1
    4134:	1c08      	adds	r0, r1, #0
    4136:	4098      	lsls	r0, r3
    4138:	1c03      	adds	r3, r0, #0
    413a:	431a      	orrs	r2, r3
    413c:	693b      	ldr	r3, [r7, #16]
    413e:	615a      	str	r2, [r3, #20]
    4140:	e00b      	b.n	415a <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4142:	693b      	ldr	r3, [r7, #16]
    4144:	695b      	ldr	r3, [r3, #20]
    4146:	1dfa      	adds	r2, r7, #7
    4148:	7812      	ldrb	r2, [r2, #0]
    414a:	2101      	movs	r1, #1
    414c:	1c0c      	adds	r4, r1, #0
    414e:	4094      	lsls	r4, r2
    4150:	1c22      	adds	r2, r4, #0
    4152:	43d2      	mvns	r2, r2
    4154:	401a      	ands	r2, r3
    4156:	693b      	ldr	r3, [r7, #16]
    4158:	615a      	str	r2, [r3, #20]
	}
}
    415a:	46bd      	mov	sp, r7
    415c:	b007      	add	sp, #28
    415e:	bd90      	pop	{r4, r7, pc}
    4160:	00003ddd 	.word	0x00003ddd
    4164:	000142a1 	.word	0x000142a1
    4168:	00003e05 	.word	0x00003e05

0000416c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    416c:	b580      	push	{r7, lr}
    416e:	b084      	sub	sp, #16
    4170:	af00      	add	r7, sp, #0
    4172:	1c02      	adds	r2, r0, #0
    4174:	1dfb      	adds	r3, r7, #7
    4176:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4178:	1c3b      	adds	r3, r7, #0
    417a:	330f      	adds	r3, #15
    417c:	1dfa      	adds	r2, r7, #7
    417e:	7812      	ldrb	r2, [r2, #0]
    4180:	0952      	lsrs	r2, r2, #5
    4182:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4184:	1c3b      	adds	r3, r7, #0
    4186:	330f      	adds	r3, #15
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	d10b      	bne.n	41a6 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    418e:	4b08      	ldr	r3, [pc, #32]	; (41b0 <_extint_get_eic_from_channel+0x44>)
    4190:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4192:	1c3b      	adds	r3, r7, #0
    4194:	330f      	adds	r3, #15
    4196:	781b      	ldrb	r3, [r3, #0]
    4198:	009b      	lsls	r3, r3, #2
    419a:	2210      	movs	r2, #16
    419c:	19d2      	adds	r2, r2, r7
    419e:	18d3      	adds	r3, r2, r3
    41a0:	3b08      	subs	r3, #8
    41a2:	681b      	ldr	r3, [r3, #0]
    41a4:	e000      	b.n	41a8 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    41a6:	2300      	movs	r3, #0
	}
}
    41a8:	1c18      	adds	r0, r3, #0
    41aa:	46bd      	mov	sp, r7
    41ac:	b004      	add	sp, #16
    41ae:	bd80      	pop	{r7, pc}
    41b0:	40001800 	.word	0x40001800

000041b4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b084      	sub	sp, #16
    41b8:	af00      	add	r7, sp, #0
    41ba:	1c02      	adds	r2, r0, #0
    41bc:	1dfb      	adds	r3, r7, #7
    41be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	1c18      	adds	r0, r3, #0
    41c6:	4b0c      	ldr	r3, [pc, #48]	; (41f8 <extint_chan_is_detected+0x44>)
    41c8:	4798      	blx	r3
    41ca:	1c03      	adds	r3, r0, #0
    41cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    41ce:	1dfb      	adds	r3, r7, #7
    41d0:	781a      	ldrb	r2, [r3, #0]
    41d2:	231f      	movs	r3, #31
    41d4:	4013      	ands	r3, r2
    41d6:	2201      	movs	r2, #1
    41d8:	1c11      	adds	r1, r2, #0
    41da:	4099      	lsls	r1, r3
    41dc:	1c0b      	adds	r3, r1, #0
    41de:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	691b      	ldr	r3, [r3, #16]
    41e4:	68ba      	ldr	r2, [r7, #8]
    41e6:	4013      	ands	r3, r2
    41e8:	1e5a      	subs	r2, r3, #1
    41ea:	4193      	sbcs	r3, r2
    41ec:	b2db      	uxtb	r3, r3
}
    41ee:	1c18      	adds	r0, r3, #0
    41f0:	46bd      	mov	sp, r7
    41f2:	b004      	add	sp, #16
    41f4:	bd80      	pop	{r7, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	0000416d 	.word	0x0000416d

000041fc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b084      	sub	sp, #16
    4200:	af00      	add	r7, sp, #0
    4202:	1c02      	adds	r2, r0, #0
    4204:	1dfb      	adds	r3, r7, #7
    4206:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4208:	1dfb      	adds	r3, r7, #7
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	1c18      	adds	r0, r3, #0
    420e:	4b09      	ldr	r3, [pc, #36]	; (4234 <extint_chan_clear_detected+0x38>)
    4210:	4798      	blx	r3
    4212:	1c03      	adds	r3, r0, #0
    4214:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4216:	1dfb      	adds	r3, r7, #7
    4218:	781a      	ldrb	r2, [r3, #0]
    421a:	231f      	movs	r3, #31
    421c:	4013      	ands	r3, r2
    421e:	2201      	movs	r2, #1
    4220:	1c11      	adds	r1, r2, #0
    4222:	4099      	lsls	r1, r3
    4224:	1c0b      	adds	r3, r1, #0
    4226:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	68ba      	ldr	r2, [r7, #8]
    422c:	611a      	str	r2, [r3, #16]
}
    422e:	46bd      	mov	sp, r7
    4230:	b004      	add	sp, #16
    4232:	bd80      	pop	{r7, pc}
    4234:	0000416d 	.word	0x0000416d

00004238 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	1cfb      	adds	r3, r7, #3
    4242:	7019      	strb	r1, [r3, #0]
    4244:	1cbb      	adds	r3, r7, #2
    4246:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4248:	1cbb      	adds	r3, r7, #2
    424a:	781b      	ldrb	r3, [r3, #0]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4250:	2317      	movs	r3, #23
    4252:	e019      	b.n	4288 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4254:	1cfb      	adds	r3, r7, #3
    4256:	781a      	ldrb	r2, [r3, #0]
    4258:	4b0d      	ldr	r3, [pc, #52]	; (4290 <extint_register_callback+0x58>)
    425a:	0092      	lsls	r2, r2, #2
    425c:	58d3      	ldr	r3, [r2, r3]
    425e:	2b00      	cmp	r3, #0
    4260:	d107      	bne.n	4272 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4262:	1cfb      	adds	r3, r7, #3
    4264:	781a      	ldrb	r2, [r3, #0]
    4266:	4b0a      	ldr	r3, [pc, #40]	; (4290 <extint_register_callback+0x58>)
    4268:	0092      	lsls	r2, r2, #2
    426a:	6879      	ldr	r1, [r7, #4]
    426c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    426e:	2300      	movs	r3, #0
    4270:	e00a      	b.n	4288 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4272:	1cfb      	adds	r3, r7, #3
    4274:	781a      	ldrb	r2, [r3, #0]
    4276:	4b06      	ldr	r3, [pc, #24]	; (4290 <extint_register_callback+0x58>)
    4278:	0092      	lsls	r2, r2, #2
    427a:	58d2      	ldr	r2, [r2, r3]
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	429a      	cmp	r2, r3
    4280:	d101      	bne.n	4286 <extint_register_callback+0x4e>
		return STATUS_OK;
    4282:	2300      	movs	r3, #0
    4284:	e000      	b.n	4288 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4286:	231d      	movs	r3, #29
}
    4288:	1c18      	adds	r0, r3, #0
    428a:	46bd      	mov	sp, r7
    428c:	b002      	add	sp, #8
    428e:	bd80      	pop	{r7, pc}
    4290:	20000544 	.word	0x20000544

00004294 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied.
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4294:	b580      	push	{r7, lr}
    4296:	b084      	sub	sp, #16
    4298:	af00      	add	r7, sp, #0
    429a:	1c0a      	adds	r2, r1, #0
    429c:	1dfb      	adds	r3, r7, #7
    429e:	1c01      	adds	r1, r0, #0
    42a0:	7019      	strb	r1, [r3, #0]
    42a2:	1dbb      	adds	r3, r7, #6
    42a4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    42a6:	1dbb      	adds	r3, r7, #6
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d10e      	bne.n	42cc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    42ae:	1dfb      	adds	r3, r7, #7
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	1c18      	adds	r0, r3, #0
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <extint_chan_enable_callback+0x44>)
    42b6:	4798      	blx	r3
    42b8:	1c03      	adds	r3, r0, #0
    42ba:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	2201      	movs	r2, #1
    42c2:	409a      	lsls	r2, r3
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    42c8:	2300      	movs	r3, #0
    42ca:	e000      	b.n	42ce <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    42cc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    42ce:	1c18      	adds	r0, r3, #0
    42d0:	46bd      	mov	sp, r7
    42d2:	b004      	add	sp, #16
    42d4:	bd80      	pop	{r7, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	0000416d 	.word	0x0000416d

000042dc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    42dc:	b580      	push	{r7, lr}
    42de:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    42e0:	4b15      	ldr	r3, [pc, #84]	; (4338 <EIC_Handler+0x5c>)
    42e2:	2200      	movs	r2, #0
    42e4:	701a      	strb	r2, [r3, #0]
    42e6:	e021      	b.n	432c <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    42e8:	4b13      	ldr	r3, [pc, #76]	; (4338 <EIC_Handler+0x5c>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	1c18      	adds	r0, r3, #0
    42ee:	4b13      	ldr	r3, [pc, #76]	; (433c <EIC_Handler+0x60>)
    42f0:	4798      	blx	r3
    42f2:	1c03      	adds	r3, r0, #0
    42f4:	2b00      	cmp	r3, #0
    42f6:	d013      	beq.n	4320 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    42f8:	4b0f      	ldr	r3, [pc, #60]	; (4338 <EIC_Handler+0x5c>)
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	1c18      	adds	r0, r3, #0
    42fe:	4b10      	ldr	r3, [pc, #64]	; (4340 <EIC_Handler+0x64>)
    4300:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4302:	4b0d      	ldr	r3, [pc, #52]	; (4338 <EIC_Handler+0x5c>)
    4304:	781b      	ldrb	r3, [r3, #0]
    4306:	1c1a      	adds	r2, r3, #0
    4308:	4b0e      	ldr	r3, [pc, #56]	; (4344 <EIC_Handler+0x68>)
    430a:	0092      	lsls	r2, r2, #2
    430c:	58d3      	ldr	r3, [r2, r3]
    430e:	2b00      	cmp	r3, #0
    4310:	d006      	beq.n	4320 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4312:	4b09      	ldr	r3, [pc, #36]	; (4338 <EIC_Handler+0x5c>)
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	1c1a      	adds	r2, r3, #0
    4318:	4b0a      	ldr	r3, [pc, #40]	; (4344 <EIC_Handler+0x68>)
    431a:	0092      	lsls	r2, r2, #2
    431c:	58d3      	ldr	r3, [r2, r3]
    431e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4320:	4b05      	ldr	r3, [pc, #20]	; (4338 <EIC_Handler+0x5c>)
    4322:	781b      	ldrb	r3, [r3, #0]
    4324:	3301      	adds	r3, #1
    4326:	b2da      	uxtb	r2, r3
    4328:	4b03      	ldr	r3, [pc, #12]	; (4338 <EIC_Handler+0x5c>)
    432a:	701a      	strb	r2, [r3, #0]
    432c:	4b02      	ldr	r3, [pc, #8]	; (4338 <EIC_Handler+0x5c>)
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	2b0f      	cmp	r3, #15
    4332:	d9d9      	bls.n	42e8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4334:	46bd      	mov	sp, r7
    4336:	bd80      	pop	{r7, pc}
    4338:	20000584 	.word	0x20000584
    433c:	000041b5 	.word	0x000041b5
    4340:	000041fd 	.word	0x000041fd
    4344:	20000544 	.word	0x20000544

00004348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    434e:	4b07      	ldr	r3, [pc, #28]	; (436c <nvm_is_ready+0x24>)
    4350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	7d1b      	ldrb	r3, [r3, #20]
    4356:	b2db      	uxtb	r3, r3
    4358:	1c1a      	adds	r2, r3, #0
    435a:	2301      	movs	r3, #1
    435c:	4013      	ands	r3, r2
    435e:	1e5a      	subs	r2, r3, #1
    4360:	4193      	sbcs	r3, r2
    4362:	b2db      	uxtb	r3, r3
}
    4364:	1c18      	adds	r0, r3, #0
    4366:	46bd      	mov	sp, r7
    4368:	b002      	add	sp, #8
    436a:	bd80      	pop	{r7, pc}
    436c:	41004000 	.word	0x41004000

00004370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4370:	b580      	push	{r7, lr}
    4372:	b082      	sub	sp, #8
    4374:	af00      	add	r7, sp, #0
    4376:	1c02      	adds	r2, r0, #0
    4378:	6039      	str	r1, [r7, #0]
    437a:	1dfb      	adds	r3, r7, #7
    437c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    437e:	1dfb      	adds	r3, r7, #7
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	2b01      	cmp	r3, #1
    4384:	d00a      	beq.n	439c <system_apb_clock_set_mask+0x2c>
    4386:	2b02      	cmp	r3, #2
    4388:	d00f      	beq.n	43aa <system_apb_clock_set_mask+0x3a>
    438a:	2b00      	cmp	r3, #0
    438c:	d114      	bne.n	43b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    438e:	4b0e      	ldr	r3, [pc, #56]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4390:	4a0d      	ldr	r2, [pc, #52]	; (43c8 <system_apb_clock_set_mask+0x58>)
    4392:	6991      	ldr	r1, [r2, #24]
    4394:	683a      	ldr	r2, [r7, #0]
    4396:	430a      	orrs	r2, r1
    4398:	619a      	str	r2, [r3, #24]
			break;
    439a:	e00f      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    439c:	4b0a      	ldr	r3, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    439e:	4a0a      	ldr	r2, [pc, #40]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43a0:	69d1      	ldr	r1, [r2, #28]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	430a      	orrs	r2, r1
    43a6:	61da      	str	r2, [r3, #28]
			break;
    43a8:	e008      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    43aa:	4b07      	ldr	r3, [pc, #28]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ac:	4a06      	ldr	r2, [pc, #24]	; (43c8 <system_apb_clock_set_mask+0x58>)
    43ae:	6a11      	ldr	r1, [r2, #32]
    43b0:	683a      	ldr	r2, [r7, #0]
    43b2:	430a      	orrs	r2, r1
    43b4:	621a      	str	r2, [r3, #32]
			break;
    43b6:	e001      	b.n	43bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    43b8:	2317      	movs	r3, #23
    43ba:	e000      	b.n	43be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    43bc:	2300      	movs	r3, #0
}
    43be:	1c18      	adds	r0, r3, #0
    43c0:	46bd      	mov	sp, r7
    43c2:	b002      	add	sp, #8
    43c4:	bd80      	pop	{r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	40000400 	.word	0x40000400

000043cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    43d4:	4b33      	ldr	r3, [pc, #204]	; (44a4 <nvm_set_config+0xd8>)
    43d6:	60fb      	str	r3, [r7, #12]
#if (SAML21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    43d8:	2001      	movs	r0, #1
    43da:	2104      	movs	r1, #4
    43dc:	4b32      	ldr	r3, [pc, #200]	; (44a8 <nvm_set_config+0xdc>)
    43de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	8b1b      	ldrh	r3, [r3, #24]
    43e4:	b29b      	uxth	r3, r3
    43e6:	2220      	movs	r2, #32
    43e8:	32ff      	adds	r2, #255	; 0xff
    43ea:	4313      	orrs	r3, r2
    43ec:	b29a      	uxth	r2, r3
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    43f2:	4b2e      	ldr	r3, [pc, #184]	; (44ac <nvm_set_config+0xe0>)
    43f4:	4798      	blx	r3
    43f6:	1c03      	adds	r3, r0, #0
    43f8:	2201      	movs	r2, #1
    43fa:	4053      	eors	r3, r2
    43fc:	b2db      	uxtb	r3, r3
    43fe:	2b00      	cmp	r3, #0
    4400:	d001      	beq.n	4406 <nvm_set_config+0x3a>
		return STATUS_BUSY;
    4402:	2305      	movs	r3, #5
    4404:	e049      	b.n	449a <nvm_set_config+0xce>
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	021b      	lsls	r3, r3, #8
    440c:	1c1a      	adds	r2, r3, #0
    440e:	23c0      	movs	r3, #192	; 0xc0
    4410:	009b      	lsls	r3, r3, #2
    4412:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	785b      	ldrb	r3, [r3, #1]
    4418:	01db      	lsls	r3, r3, #7
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    441a:	1c19      	adds	r1, r3, #0
    441c:	23ff      	movs	r3, #255	; 0xff
    441e:	400b      	ands	r3, r1
    4420:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	789b      	ldrb	r3, [r3, #2]
    4426:	005b      	lsls	r3, r3, #1
    4428:	1c19      	adds	r1, r3, #0
    442a:	231e      	movs	r3, #30
    442c:	400b      	ands	r3, r1
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    442e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	78db      	ldrb	r3, [r3, #3]
    4434:	1c19      	adds	r1, r3, #0
    4436:	2301      	movs	r3, #1
    4438:	400b      	ands	r3, r1
    443a:	049b      	lsls	r3, r3, #18

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    443c:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	791b      	ldrb	r3, [r3, #4]
    4442:	041b      	lsls	r3, r3, #16
    4444:	1c19      	adds	r1, r3, #0
    4446:	23c0      	movs	r3, #192	; 0xc0
    4448:	029b      	lsls	r3, r3, #10
    444a:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    444c:	431a      	orrs	r2, r3
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
	}

	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	605a      	str	r2, [r3, #4]
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	689b      	ldr	r3, [r3, #8]
    4456:	0c1b      	lsrs	r3, r3, #16
    4458:	1c1a      	adds	r2, r3, #0
    445a:	2307      	movs	r3, #7
    445c:	4013      	ands	r3, r2
    445e:	b2db      	uxtb	r3, r3
    4460:	2208      	movs	r2, #8
    4462:	1c11      	adds	r1, r2, #0
    4464:	4099      	lsls	r1, r3
    4466:	1c0b      	adds	r3, r1, #0
    4468:	b29a      	uxth	r2, r3
    446a:	4b11      	ldr	r3, [pc, #68]	; (44b0 <nvm_set_config+0xe4>)
    446c:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	689b      	ldr	r3, [r3, #8]
    4472:	2200      	movs	r2, #0
    4474:	4393      	bics	r3, r2
    4476:	b29a      	uxth	r2, r3
    4478:	4b0d      	ldr	r3, [pc, #52]	; (44b0 <nvm_set_config+0xe4>)
    447a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	785a      	ldrb	r2, [r3, #1]
    4480:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <nvm_set_config+0xe4>)
    4482:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	8b1b      	ldrh	r3, [r3, #24]
    4488:	b29b      	uxth	r3, r3
    448a:	1c1a      	adds	r2, r3, #0
    448c:	2380      	movs	r3, #128	; 0x80
    448e:	005b      	lsls	r3, r3, #1
    4490:	4013      	ands	r3, r2
    4492:	d001      	beq.n	4498 <nvm_set_config+0xcc>
		return STATUS_ERR_IO;
    4494:	2310      	movs	r3, #16
    4496:	e000      	b.n	449a <nvm_set_config+0xce>
	}

	return STATUS_OK;
    4498:	2300      	movs	r3, #0
}
    449a:	1c18      	adds	r0, r3, #0
    449c:	46bd      	mov	sp, r7
    449e:	b004      	add	sp, #16
    44a0:	bd80      	pop	{r7, pc}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	41004000 	.word	0x41004000
    44a8:	00004371 	.word	0x00004371
    44ac:	00004349 	.word	0x00004349
    44b0:	20000490 	.word	0x20000490

000044b4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b086      	sub	sp, #24
    44b8:	af00      	add	r7, sp, #0
    44ba:	60b9      	str	r1, [r7, #8]
    44bc:	607a      	str	r2, [r7, #4]
    44be:	1c3b      	adds	r3, r7, #0
    44c0:	330f      	adds	r3, #15
    44c2:	1c02      	adds	r2, r0, #0
    44c4:	701a      	strb	r2, [r3, #0]
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)){
    44c6:	4b32      	ldr	r3, [pc, #200]	; (4590 <nvm_execute_command+0xdc>)
    44c8:	881b      	ldrh	r3, [r3, #0]
    44ca:	4a31      	ldr	r2, [pc, #196]	; (4590 <nvm_execute_command+0xdc>)
    44cc:	8852      	ldrh	r2, [r2, #2]
    44ce:	435a      	muls	r2, r3
    44d0:	68bb      	ldr	r3, [r7, #8]
    44d2:	429a      	cmp	r2, r3
    44d4:	d201      	bcs.n	44da <nvm_execute_command+0x26>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    44d6:	2318      	movs	r3, #24
    44d8:	e056      	b.n	4588 <nvm_execute_command+0xd4>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    44da:	4b2e      	ldr	r3, [pc, #184]	; (4594 <nvm_execute_command+0xe0>)
    44dc:	617b      	str	r3, [r7, #20]

	/* turn off cache before issuing flash commands */
	temp = nvm_module->CTRLB.reg;
    44de:	697b      	ldr	r3, [r7, #20]
    44e0:	685b      	ldr	r3, [r3, #4]
    44e2:	613b      	str	r3, [r7, #16]
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
    44e4:	693b      	ldr	r3, [r7, #16]
    44e6:	2280      	movs	r2, #128	; 0x80
    44e8:	02d2      	lsls	r2, r2, #11
    44ea:	431a      	orrs	r2, r3
    44ec:	697b      	ldr	r3, [r7, #20]
    44ee:	605a      	str	r2, [r3, #4]

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    44f0:	697b      	ldr	r3, [r7, #20]
    44f2:	8b1b      	ldrh	r3, [r3, #24]
    44f4:	b29b      	uxth	r3, r3
    44f6:	2220      	movs	r2, #32
    44f8:	32ff      	adds	r2, #255	; 0xff
    44fa:	4313      	orrs	r3, r2
    44fc:	b29a      	uxth	r2, r3
    44fe:	697b      	ldr	r3, [r7, #20]
    4500:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4502:	4b25      	ldr	r3, [pc, #148]	; (4598 <nvm_execute_command+0xe4>)
    4504:	4798      	blx	r3
    4506:	1c03      	adds	r3, r0, #0
    4508:	2201      	movs	r2, #1
    450a:	4053      	eors	r3, r2
    450c:	b2db      	uxtb	r3, r3
    450e:	2b00      	cmp	r3, #0
    4510:	d001      	beq.n	4516 <nvm_execute_command+0x62>
		return STATUS_BUSY;
    4512:	2305      	movs	r3, #5
    4514:	e038      	b.n	4588 <nvm_execute_command+0xd4>
	}

	switch (command) {
    4516:	1c3b      	adds	r3, r7, #0
    4518:	330f      	adds	r3, #15
    451a:	781b      	ldrb	r3, [r3, #0]
    451c:	2b45      	cmp	r3, #69	; 0x45
    451e:	d81a      	bhi.n	4556 <nvm_execute_command+0xa2>
    4520:	009a      	lsls	r2, r3, #2
    4522:	4b1e      	ldr	r3, [pc, #120]	; (459c <nvm_execute_command+0xe8>)
    4524:	18d3      	adds	r3, r2, r3
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    452a:	697b      	ldr	r3, [r7, #20]
    452c:	8b1b      	ldrh	r3, [r3, #24]
    452e:	b29b      	uxth	r3, r3
    4530:	1c1a      	adds	r2, r3, #0
    4532:	2380      	movs	r3, #128	; 0x80
    4534:	005b      	lsls	r3, r3, #1
    4536:	4013      	ands	r3, r2
    4538:	d001      	beq.n	453e <nvm_execute_command+0x8a>
				return STATUS_ERR_IO;
    453a:	2310      	movs	r3, #16
    453c:	e024      	b.n	4588 <nvm_execute_command+0xd4>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	089b      	lsrs	r3, r3, #2
    4542:	005a      	lsls	r2, r3, #1
    4544:	697b      	ldr	r3, [r7, #20]
    4546:	61da      	str	r2, [r3, #28]
			break;
    4548:	e008      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    454a:	68bb      	ldr	r3, [r7, #8]
    454c:	089b      	lsrs	r3, r3, #2
    454e:	005a      	lsls	r2, r3, #1
    4550:	697b      	ldr	r3, [r7, #20]
    4552:	61da      	str	r2, [r3, #28]
			break;
    4554:	e002      	b.n	455c <nvm_execute_command+0xa8>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
    4556:	2317      	movs	r3, #23
    4558:	e016      	b.n	4588 <nvm_execute_command+0xd4>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
    455a:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    455c:	1c3b      	adds	r3, r7, #0
    455e:	330f      	adds	r3, #15
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	b29b      	uxth	r3, r3
    4564:	4a0e      	ldr	r2, [pc, #56]	; (45a0 <nvm_execute_command+0xec>)
    4566:	4313      	orrs	r3, r2
    4568:	b29a      	uxth	r2, r3
    456a:	697b      	ldr	r3, [r7, #20]
    456c:	801a      	strh	r2, [r3, #0]

	/* Wait for the nvm controller to become ready */
	while (!nvm_is_ready()) {
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	4b09      	ldr	r3, [pc, #36]	; (4598 <nvm_execute_command+0xe4>)
    4572:	4798      	blx	r3
    4574:	1c03      	adds	r3, r0, #0
    4576:	2201      	movs	r2, #1
    4578:	4053      	eors	r3, r2
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d1f7      	bne.n	4570 <nvm_execute_command+0xbc>
	}

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;
    4580:	697b      	ldr	r3, [r7, #20]
    4582:	693a      	ldr	r2, [r7, #16]
    4584:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4586:	2300      	movs	r3, #0
}
    4588:	1c18      	adds	r0, r3, #0
    458a:	46bd      	mov	sp, r7
    458c:	b006      	add	sp, #24
    458e:	bd80      	pop	{r7, pc}
    4590:	20000490 	.word	0x20000490
    4594:	41004000 	.word	0x41004000
    4598:	00004349 	.word	0x00004349
    459c:	00018138 	.word	0x00018138
    45a0:	ffffa500 	.word	0xffffa500

000045a4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b088      	sub	sp, #32
    45a8:	af00      	add	r7, sp, #0
    45aa:	60f8      	str	r0, [r7, #12]
    45ac:	60b9      	str	r1, [r7, #8]
    45ae:	1dbb      	adds	r3, r7, #6
    45b0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    45b2:	4b46      	ldr	r3, [pc, #280]	; (46cc <nvm_write_buffer+0x128>)
    45b4:	881b      	ldrh	r3, [r3, #0]
    45b6:	4a45      	ldr	r2, [pc, #276]	; (46cc <nvm_write_buffer+0x128>)
    45b8:	8852      	ldrh	r2, [r2, #2]
    45ba:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	429a      	cmp	r2, r3
    45c0:	d201      	bcs.n	45c6 <nvm_write_buffer+0x22>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    45c2:	2318      	movs	r3, #24
    45c4:	e07d      	b.n	46c2 <nvm_write_buffer+0x11e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    45c6:	4b41      	ldr	r3, [pc, #260]	; (46cc <nvm_write_buffer+0x128>)
    45c8:	881b      	ldrh	r3, [r3, #0]
    45ca:	3b01      	subs	r3, #1
    45cc:	68fa      	ldr	r2, [r7, #12]
    45ce:	4013      	ands	r3, r2
    45d0:	d001      	beq.n	45d6 <nvm_write_buffer+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    45d2:	2318      	movs	r3, #24
    45d4:	e075      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
    45d6:	4b3d      	ldr	r3, [pc, #244]	; (46cc <nvm_write_buffer+0x128>)
    45d8:	881b      	ldrh	r3, [r3, #0]
    45da:	1dba      	adds	r2, r7, #6
    45dc:	8812      	ldrh	r2, [r2, #0]
    45de:	429a      	cmp	r2, r3
    45e0:	d901      	bls.n	45e6 <nvm_write_buffer+0x42>
		return STATUS_ERR_INVALID_ARG;
    45e2:	2317      	movs	r3, #23
    45e4:	e06d      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    45e6:	4b3a      	ldr	r3, [pc, #232]	; (46d0 <nvm_write_buffer+0x12c>)
    45e8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    45ea:	4b3a      	ldr	r3, [pc, #232]	; (46d4 <nvm_write_buffer+0x130>)
    45ec:	4798      	blx	r3
    45ee:	1c03      	adds	r3, r0, #0
    45f0:	2201      	movs	r2, #1
    45f2:	4053      	eors	r3, r2
    45f4:	b2db      	uxtb	r3, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	d001      	beq.n	45fe <nvm_write_buffer+0x5a>
		return STATUS_BUSY;
    45fa:	2305      	movs	r3, #5
    45fc:	e061      	b.n	46c2 <nvm_write_buffer+0x11e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    45fe:	697b      	ldr	r3, [r7, #20]
    4600:	4a35      	ldr	r2, [pc, #212]	; (46d8 <nvm_write_buffer+0x134>)
    4602:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    4604:	46c0      	nop			; (mov r8, r8)
    4606:	4b33      	ldr	r3, [pc, #204]	; (46d4 <nvm_write_buffer+0x130>)
    4608:	4798      	blx	r3
    460a:	1c03      	adds	r3, r0, #0
    460c:	2201      	movs	r2, #1
    460e:	4053      	eors	r3, r2
    4610:	b2db      	uxtb	r3, r3
    4612:	2b00      	cmp	r3, #0
    4614:	d1f7      	bne.n	4606 <nvm_write_buffer+0x62>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4616:	697b      	ldr	r3, [r7, #20]
    4618:	8b1b      	ldrh	r3, [r3, #24]
    461a:	b29b      	uxth	r3, r3
    461c:	2220      	movs	r2, #32
    461e:	32ff      	adds	r2, #255	; 0xff
    4620:	4313      	orrs	r3, r2
    4622:	b29a      	uxth	r2, r3
    4624:	697b      	ldr	r3, [r7, #20]
    4626:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    4628:	68fb      	ldr	r3, [r7, #12]
    462a:	085b      	lsrs	r3, r3, #1
    462c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    462e:	1c3b      	adds	r3, r7, #0
    4630:	331a      	adds	r3, #26
    4632:	2200      	movs	r2, #0
    4634:	801a      	strh	r2, [r3, #0]
    4636:	e030      	b.n	469a <nvm_write_buffer+0xf6>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    4638:	1c3b      	adds	r3, r7, #0
    463a:	331a      	adds	r3, #26
    463c:	881b      	ldrh	r3, [r3, #0]
    463e:	68ba      	ldr	r2, [r7, #8]
    4640:	18d3      	adds	r3, r2, r3
    4642:	781a      	ldrb	r2, [r3, #0]
    4644:	1c3b      	adds	r3, r7, #0
    4646:	3318      	adds	r3, #24
    4648:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    464a:	1c3b      	adds	r3, r7, #0
    464c:	331a      	adds	r3, #26
    464e:	881a      	ldrh	r2, [r3, #0]
    4650:	1dbb      	adds	r3, r7, #6
    4652:	881b      	ldrh	r3, [r3, #0]
    4654:	3b01      	subs	r3, #1
    4656:	429a      	cmp	r2, r3
    4658:	da10      	bge.n	467c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    465a:	1c3b      	adds	r3, r7, #0
    465c:	331a      	adds	r3, #26
    465e:	881b      	ldrh	r3, [r3, #0]
    4660:	3301      	adds	r3, #1
    4662:	68ba      	ldr	r2, [r7, #8]
    4664:	18d3      	adds	r3, r2, r3
    4666:	781b      	ldrb	r3, [r3, #0]
    4668:	021b      	lsls	r3, r3, #8
    466a:	b29a      	uxth	r2, r3
    466c:	1c3b      	adds	r3, r7, #0
    466e:	3318      	adds	r3, #24
    4670:	881b      	ldrh	r3, [r3, #0]
    4672:	4313      	orrs	r3, r2
    4674:	b29a      	uxth	r2, r3
    4676:	1c3b      	adds	r3, r7, #0
    4678:	3318      	adds	r3, #24
    467a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    467c:	69fb      	ldr	r3, [r7, #28]
    467e:	1c5a      	adds	r2, r3, #1
    4680:	61fa      	str	r2, [r7, #28]
    4682:	005b      	lsls	r3, r3, #1
    4684:	1c3a      	adds	r2, r7, #0
    4686:	3218      	adds	r2, #24
    4688:	8812      	ldrh	r2, [r2, #0]
    468a:	801a      	strh	r2, [r3, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    468c:	1c3b      	adds	r3, r7, #0
    468e:	331a      	adds	r3, #26
    4690:	1c3a      	adds	r2, r7, #0
    4692:	321a      	adds	r2, #26
    4694:	8812      	ldrh	r2, [r2, #0]
    4696:	3202      	adds	r2, #2
    4698:	801a      	strh	r2, [r3, #0]
    469a:	1c3a      	adds	r2, r7, #0
    469c:	321a      	adds	r2, #26
    469e:	1dbb      	adds	r3, r7, #6
    46a0:	8812      	ldrh	r2, [r2, #0]
    46a2:	881b      	ldrh	r3, [r3, #0]
    46a4:	429a      	cmp	r2, r3
    46a6:	d3c7      	bcc.n	4638 <nvm_write_buffer+0x94>
		NVM_MEMORY[nvm_address++] = data;
	}

	/* Perform a manual NVM write when the length of data to be programmed is
	 * less than page size */
	if (length < NVMCTRL_PAGE_SIZE) {
    46a8:	1dbb      	adds	r3, r7, #6
    46aa:	881b      	ldrh	r3, [r3, #0]
    46ac:	2b3f      	cmp	r3, #63	; 0x3f
    46ae:	d807      	bhi.n	46c0 <nvm_write_buffer+0x11c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ? 
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	2004      	movs	r0, #4
    46b4:	1c19      	adds	r1, r3, #0
    46b6:	2200      	movs	r2, #0
    46b8:	4b08      	ldr	r3, [pc, #32]	; (46dc <nvm_write_buffer+0x138>)
    46ba:	4798      	blx	r3
    46bc:	1c03      	adds	r3, r0, #0
    46be:	e000      	b.n	46c2 <nvm_write_buffer+0x11e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    46c0:	2300      	movs	r3, #0
}
    46c2:	1c18      	adds	r0, r3, #0
    46c4:	46bd      	mov	sp, r7
    46c6:	b008      	add	sp, #32
    46c8:	bd80      	pop	{r7, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	20000490 	.word	0x20000490
    46d0:	41004000 	.word	0x41004000
    46d4:	00004349 	.word	0x00004349
    46d8:	ffffa544 	.word	0xffffa544
    46dc:	000044b5 	.word	0x000044b5

000046e0 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    46e0:	b580      	push	{r7, lr}
    46e2:	b084      	sub	sp, #16
    46e4:	af00      	add	r7, sp, #0
    46e6:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    46e8:	4b1a      	ldr	r3, [pc, #104]	; (4754 <nvm_erase_row+0x74>)
    46ea:	881b      	ldrh	r3, [r3, #0]
    46ec:	4a19      	ldr	r2, [pc, #100]	; (4754 <nvm_erase_row+0x74>)
    46ee:	8852      	ldrh	r2, [r2, #2]
    46f0:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	429a      	cmp	r2, r3
    46f6:	d201      	bcs.n	46fc <nvm_erase_row+0x1c>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    46f8:	2318      	movs	r3, #24
    46fa:	e026      	b.n	474a <nvm_erase_row+0x6a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    46fc:	4b15      	ldr	r3, [pc, #84]	; (4754 <nvm_erase_row+0x74>)
    46fe:	881b      	ldrh	r3, [r3, #0]
    4700:	009b      	lsls	r3, r3, #2
    4702:	3b01      	subs	r3, #1
    4704:	687a      	ldr	r2, [r7, #4]
    4706:	4013      	ands	r3, r2
    4708:	d001      	beq.n	470e <nvm_erase_row+0x2e>
		return STATUS_ERR_BAD_ADDRESS;
    470a:	2318      	movs	r3, #24
    470c:	e01d      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    470e:	4b12      	ldr	r3, [pc, #72]	; (4758 <nvm_erase_row+0x78>)
    4710:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4712:	4b12      	ldr	r3, [pc, #72]	; (475c <nvm_erase_row+0x7c>)
    4714:	4798      	blx	r3
    4716:	1c03      	adds	r3, r0, #0
    4718:	2201      	movs	r2, #1
    471a:	4053      	eors	r3, r2
    471c:	b2db      	uxtb	r3, r3
    471e:	2b00      	cmp	r3, #0
    4720:	d001      	beq.n	4726 <nvm_erase_row+0x46>
		return STATUS_BUSY;
    4722:	2305      	movs	r3, #5
    4724:	e011      	b.n	474a <nvm_erase_row+0x6a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	8b1b      	ldrh	r3, [r3, #24]
    472a:	b29b      	uxth	r3, r3
    472c:	2220      	movs	r2, #32
    472e:	32ff      	adds	r2, #255	; 0xff
    4730:	4313      	orrs	r3, r2
    4732:	b29a      	uxth	r2, r3
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	089b      	lsrs	r3, r3, #2
    473c:	005a      	lsls	r2, r3, #1
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ? 
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4742:	68fb      	ldr	r3, [r7, #12]
    4744:	4a06      	ldr	r2, [pc, #24]	; (4760 <nvm_erase_row+0x80>)
    4746:	801a      	strh	r2, [r3, #0]
#endif
	return STATUS_OK;
    4748:	2300      	movs	r3, #0
}
    474a:	1c18      	adds	r0, r3, #0
    474c:	46bd      	mov	sp, r7
    474e:	b004      	add	sp, #16
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	20000490 	.word	0x20000490
    4758:	41004000 	.word	0x41004000
    475c:	00004349 	.word	0x00004349
    4760:	ffffa502 	.word	0xffffa502

00004764 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4764:	b580      	push	{r7, lr}
    4766:	b082      	sub	sp, #8
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	2200      	movs	r2, #0
    4770:	701a      	strb	r2, [r3, #0]
}
    4772:	46bd      	mov	sp, r7
    4774:	b002      	add	sp, #8
    4776:	bd80      	pop	{r7, pc}

00004778 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4778:	b580      	push	{r7, lr}
    477a:	b082      	sub	sp, #8
    477c:	af00      	add	r7, sp, #0
    477e:	1c02      	adds	r2, r0, #0
    4780:	6039      	str	r1, [r7, #0]
    4782:	1dfb      	adds	r3, r7, #7
    4784:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4786:	1dfb      	adds	r3, r7, #7
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	2b01      	cmp	r3, #1
    478c:	d00a      	beq.n	47a4 <system_apb_clock_set_mask+0x2c>
    478e:	2b02      	cmp	r3, #2
    4790:	d00f      	beq.n	47b2 <system_apb_clock_set_mask+0x3a>
    4792:	2b00      	cmp	r3, #0
    4794:	d114      	bne.n	47c0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4796:	4b0e      	ldr	r3, [pc, #56]	; (47d0 <system_apb_clock_set_mask+0x58>)
    4798:	4a0d      	ldr	r2, [pc, #52]	; (47d0 <system_apb_clock_set_mask+0x58>)
    479a:	6991      	ldr	r1, [r2, #24]
    479c:	683a      	ldr	r2, [r7, #0]
    479e:	430a      	orrs	r2, r1
    47a0:	619a      	str	r2, [r3, #24]
			break;
    47a2:	e00f      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    47a4:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a6:	4a0a      	ldr	r2, [pc, #40]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47a8:	69d1      	ldr	r1, [r2, #28]
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	430a      	orrs	r2, r1
    47ae:	61da      	str	r2, [r3, #28]
			break;
    47b0:	e008      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    47b2:	4b07      	ldr	r3, [pc, #28]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b4:	4a06      	ldr	r2, [pc, #24]	; (47d0 <system_apb_clock_set_mask+0x58>)
    47b6:	6a11      	ldr	r1, [r2, #32]
    47b8:	683a      	ldr	r2, [r7, #0]
    47ba:	430a      	orrs	r2, r1
    47bc:	621a      	str	r2, [r3, #32]
			break;
    47be:	e001      	b.n	47c4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    47c0:	2317      	movs	r3, #23
    47c2:	e000      	b.n	47c6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    47c4:	2300      	movs	r3, #0
}
    47c6:	1c18      	adds	r0, r3, #0
    47c8:	46bd      	mov	sp, r7
    47ca:	b002      	add	sp, #8
    47cc:	bd80      	pop	{r7, pc}
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	40000400 	.word	0x40000400

000047d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b082      	sub	sp, #8
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	2280      	movs	r2, #128	; 0x80
    47e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	2200      	movs	r2, #0
    47e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	2201      	movs	r2, #1
    47ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	2200      	movs	r2, #0
    47f2:	70da      	strb	r2, [r3, #3]
}
    47f4:	46bd      	mov	sp, r7
    47f6:	b002      	add	sp, #8
    47f8:	bd80      	pop	{r7, pc}
    47fa:	46c0      	nop			; (mov r8, r8)

000047fc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4800:	4b05      	ldr	r3, [pc, #20]	; (4818 <system_is_debugger_present+0x1c>)
    4802:	789b      	ldrb	r3, [r3, #2]
    4804:	b2db      	uxtb	r3, r3
    4806:	1c1a      	adds	r2, r3, #0
    4808:	2302      	movs	r3, #2
    480a:	4013      	ands	r3, r2
    480c:	1e5a      	subs	r2, r3, #1
    480e:	4193      	sbcs	r3, r2
    4810:	b2db      	uxtb	r3, r3
}
    4812:	1c18      	adds	r0, r3, #0
    4814:	46bd      	mov	sp, r7
    4816:	bd80      	pop	{r7, pc}
    4818:	41002000 	.word	0x41002000

0000481c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    481c:	b580      	push	{r7, lr}
    481e:	b084      	sub	sp, #16
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	8a1b      	ldrh	r3, [r3, #16]
    482e:	b29b      	uxth	r3, r3
    4830:	1c1a      	adds	r2, r3, #0
    4832:	2380      	movs	r3, #128	; 0x80
    4834:	021b      	lsls	r3, r3, #8
    4836:	4013      	ands	r3, r2
    4838:	1e5a      	subs	r2, r3, #1
    483a:	4193      	sbcs	r3, r2
    483c:	b2db      	uxtb	r3, r3
#endif
}
    483e:	1c18      	adds	r0, r3, #0
    4840:	46bd      	mov	sp, r7
    4842:	b004      	add	sp, #16
    4844:	bd80      	pop	{r7, pc}
    4846:	46c0      	nop			; (mov r8, r8)

00004848 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4848:	b580      	push	{r7, lr}
    484a:	b082      	sub	sp, #8
    484c:	af00      	add	r7, sp, #0
    484e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4850:	46c0      	nop			; (mov r8, r8)
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	1c18      	adds	r0, r3, #0
    4856:	4b04      	ldr	r3, [pc, #16]	; (4868 <_usart_wait_for_sync+0x20>)
    4858:	4798      	blx	r3
    485a:	1c03      	adds	r3, r0, #0
    485c:	2b00      	cmp	r3, #0
    485e:	d1f8      	bne.n	4852 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4860:	46bd      	mov	sp, r7
    4862:	b002      	add	sp, #8
    4864:	bd80      	pop	{r7, pc}
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	0000481d 	.word	0x0000481d

0000486c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    486c:	b5b0      	push	{r4, r5, r7, lr}
    486e:	b08c      	sub	sp, #48	; 0x30
    4870:	af02      	add	r7, sp, #8
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	681b      	ldr	r3, [r3, #0]
    487a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	1c18      	adds	r0, r3, #0
    4882:	4b6d      	ldr	r3, [pc, #436]	; (4a38 <_usart_set_config+0x1cc>)
    4884:	4798      	blx	r3
    4886:	1c03      	adds	r3, r0, #0
    4888:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    488a:	697b      	ldr	r3, [r7, #20]
    488c:	330d      	adds	r3, #13
    488e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4890:	2300      	movs	r3, #0
    4892:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4894:	2300      	movs	r3, #0
    4896:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    4898:	1c3b      	adds	r3, r7, #0
    489a:	330c      	adds	r3, #12
    489c:	2200      	movs	r2, #0
    489e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48a0:	1c3b      	adds	r3, r7, #0
    48a2:	330f      	adds	r3, #15
    48a4:	2200      	movs	r2, #0
    48a6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48a8:	1c3b      	adds	r3, r7, #0
    48aa:	330e      	adds	r3, #14
    48ac:	2210      	movs	r2, #16
    48ae:	701a      	strb	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b0:	683b      	ldr	r3, [r7, #0]
    48b2:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48b8:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	7d9b      	ldrb	r3, [r3, #22]
    48be:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    48c0:	4313      	orrs	r3, r2
    48c2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    48c4:	1c3b      	adds	r3, r7, #0
    48c6:	331f      	adds	r3, #31
    48c8:	2200      	movs	r2, #0
    48ca:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	685b      	ldr	r3, [r3, #4]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d01f      	beq.n	4914 <_usart_set_config+0xa8>
    48d4:	2280      	movs	r2, #128	; 0x80
    48d6:	0552      	lsls	r2, r2, #21
    48d8:	4293      	cmp	r3, r2
    48da:	d14c      	bne.n	4976 <_usart_set_config+0x10a>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    48dc:	683b      	ldr	r3, [r7, #0]
    48de:	7ddb      	ldrb	r3, [r3, #23]
    48e0:	2201      	movs	r2, #1
    48e2:	4053      	eors	r3, r2
    48e4:	b2db      	uxtb	r3, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	d013      	beq.n	4912 <_usart_set_config+0xa6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    48ea:	683b      	ldr	r3, [r7, #0]
    48ec:	691d      	ldr	r5, [r3, #16]
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	b2db      	uxtb	r3, r3
    48f2:	1c18      	adds	r0, r3, #0
    48f4:	4b51      	ldr	r3, [pc, #324]	; (4a3c <_usart_set_config+0x1d0>)
    48f6:	4798      	blx	r3
    48f8:	1c02      	adds	r2, r0, #0
    48fa:	1c3c      	adds	r4, r7, #0
    48fc:	341f      	adds	r4, #31
    48fe:	1c3b      	adds	r3, r7, #0
    4900:	330c      	adds	r3, #12
    4902:	1c28      	adds	r0, r5, #0
    4904:	1c11      	adds	r1, r2, #0
    4906:	1c1a      	adds	r2, r3, #0
    4908:	4b4d      	ldr	r3, [pc, #308]	; (4a40 <_usart_set_config+0x1d4>)
    490a:	4798      	blx	r3
    490c:	1c03      	adds	r3, r0, #0
    490e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4910:	e031      	b.n	4976 <_usart_set_config+0x10a>
    4912:	e030      	b.n	4976 <_usart_set_config+0x10a>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4914:	683b      	ldr	r3, [r7, #0]
    4916:	7ddb      	ldrb	r3, [r3, #23]
    4918:	2b00      	cmp	r3, #0
    491a:	d013      	beq.n	4944 <_usart_set_config+0xd8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	6918      	ldr	r0, [r3, #16]
    4920:	683b      	ldr	r3, [r7, #0]
    4922:	6999      	ldr	r1, [r3, #24]

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    4924:	1c3c      	adds	r4, r7, #0
    4926:	341f      	adds	r4, #31
    4928:	1c3a      	adds	r2, r7, #0
    492a:	320c      	adds	r2, #12
    492c:	1c3b      	adds	r3, r7, #0
    492e:	330f      	adds	r3, #15
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	1c3d      	adds	r5, r7, #0
    4934:	350e      	adds	r5, #14
    4936:	782d      	ldrb	r5, [r5, #0]
    4938:	9500      	str	r5, [sp, #0]
    493a:	4d42      	ldr	r5, [pc, #264]	; (4a44 <_usart_set_config+0x1d8>)
    493c:	47a8      	blx	r5
    493e:	1c03      	adds	r3, r0, #0
    4940:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4942:	e017      	b.n	4974 <_usart_set_config+0x108>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4944:	683b      	ldr	r3, [r7, #0]
    4946:	691d      	ldr	r5, [r3, #16]
    4948:	693b      	ldr	r3, [r7, #16]
    494a:	b2db      	uxtb	r3, r3
    494c:	1c18      	adds	r0, r3, #0
    494e:	4b3b      	ldr	r3, [pc, #236]	; (4a3c <_usart_set_config+0x1d0>)
    4950:	4798      	blx	r3
    4952:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4954:	1c3c      	adds	r4, r7, #0
    4956:	341f      	adds	r4, #31
    4958:	1c3a      	adds	r2, r7, #0
    495a:	320c      	adds	r2, #12
    495c:	1c3b      	adds	r3, r7, #0
    495e:	330f      	adds	r3, #15
    4960:	781b      	ldrb	r3, [r3, #0]
    4962:	1c38      	adds	r0, r7, #0
    4964:	300e      	adds	r0, #14
    4966:	7800      	ldrb	r0, [r0, #0]
    4968:	9000      	str	r0, [sp, #0]
    496a:	1c28      	adds	r0, r5, #0
    496c:	4d35      	ldr	r5, [pc, #212]	; (4a44 <_usart_set_config+0x1d8>)
    496e:	47a8      	blx	r5
    4970:	1c03      	adds	r3, r0, #0
    4972:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4974:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4976:	1c3b      	adds	r3, r7, #0
    4978:	331f      	adds	r3, #31
    497a:	781b      	ldrb	r3, [r3, #0]
    497c:	2b00      	cmp	r3, #0
    497e:	d003      	beq.n	4988 <_usart_set_config+0x11c>
		/* Abort */
		return status_code;
    4980:	1c3b      	adds	r3, r7, #0
    4982:	331f      	adds	r3, #31
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	e052      	b.n	4a2e <_usart_set_config+0x1c2>
		usart_hw->RXPL.reg = config->receive_pulse_length;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	1c18      	adds	r0, r3, #0
    498c:	4b2e      	ldr	r3, [pc, #184]	; (4a48 <_usart_set_config+0x1dc>)
    498e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4990:	1c3b      	adds	r3, r7, #0
    4992:	330c      	adds	r3, #12
    4994:	881a      	ldrh	r2, [r3, #0]
    4996:	69bb      	ldr	r3, [r7, #24]
    4998:	815a      	strh	r2, [r3, #10]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	685b      	ldr	r3, [r3, #4]
    499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    49a0:	4313      	orrs	r3, r2
    49a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	7ddb      	ldrb	r3, [r3, #23]
    49a8:	2201      	movs	r2, #1
    49aa:	4053      	eors	r3, r2
    49ac:	b2db      	uxtb	r3, r3
    49ae:	2b00      	cmp	r3, #0
    49b0:	d003      	beq.n	49ba <_usart_set_config+0x14e>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    49b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b4:	2204      	movs	r2, #4
    49b6:	4313      	orrs	r3, r2
    49b8:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	7a9a      	ldrb	r2, [r3, #10]
    49be:	683b      	ldr	r3, [r7, #0]
    49c0:	7adb      	ldrb	r3, [r3, #11]
    49c2:	4313      	orrs	r3, r2
    49c4:	b2db      	uxtb	r3, r3
    49c6:	1c1a      	adds	r2, r3, #0
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    49c8:	683b      	ldr	r3, [r7, #0]
    49ca:	7d1b      	ldrb	r3, [r3, #20]
    49cc:	045b      	lsls	r3, r3, #17
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49ce:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    49d0:	683b      	ldr	r3, [r7, #0]
    49d2:	7d5b      	ldrb	r3, [r3, #21]
    49d4:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    49d6:	4313      	orrs	r3, r2
    49d8:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    49da:	683b      	ldr	r3, [r7, #0]
    49dc:	891b      	ldrh	r3, [r3, #8]
    49de:	2bff      	cmp	r3, #255	; 0xff
    49e0:	d009      	beq.n	49f6 <_usart_set_config+0x18a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    49e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49e4:	2280      	movs	r2, #128	; 0x80
    49e6:	0452      	lsls	r2, r2, #17
    49e8:	4313      	orrs	r3, r2
    49ea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
		ctrlb |= config->parity;
    49ec:	683b      	ldr	r3, [r7, #0]
    49ee:	891b      	ldrh	r3, [r3, #8]
    49f0:	6a3a      	ldr	r2, [r7, #32]
    49f2:	4313      	orrs	r3, r2
    49f4:	623b      	str	r3, [r7, #32]
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    49f6:	683b      	ldr	r3, [r7, #0]
    49f8:	7f1b      	ldrb	r3, [r3, #28]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d104      	bne.n	4a08 <_usart_set_config+0x19c>
    49fe:	4b13      	ldr	r3, [pc, #76]	; (4a4c <_usart_set_config+0x1e0>)
    4a00:	4798      	blx	r3
    4a02:	1c03      	adds	r3, r0, #0
    4a04:	2b00      	cmp	r3, #0
    4a06:	d003      	beq.n	4a10 <_usart_set_config+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a0a:	2280      	movs	r2, #128	; 0x80
    4a0c:	4313      	orrs	r3, r2
    4a0e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	1c18      	adds	r0, r3, #0
    4a14:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <_usart_set_config+0x1dc>)
    4a16:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4a18:	69bb      	ldr	r3, [r7, #24]
    4a1a:	6a3a      	ldr	r2, [r7, #32]
    4a1c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	1c18      	adds	r0, r3, #0
    4a22:	4b09      	ldr	r3, [pc, #36]	; (4a48 <_usart_set_config+0x1dc>)
    4a24:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4a26:	69bb      	ldr	r3, [r7, #24]
    4a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a2a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4a2c:	2300      	movs	r3, #0
}
    4a2e:	1c18      	adds	r0, r3, #0
    4a30:	46bd      	mov	sp, r7
    4a32:	b00a      	add	sp, #40	; 0x28
    4a34:	bdb0      	pop	{r4, r5, r7, pc}
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	000128ed 	.word	0x000128ed
    4a3c:	000140e1 	.word	0x000140e1
    4a40:	0001247d 	.word	0x0001247d
    4a44:	000124e1 	.word	0x000124e1
    4a48:	00004849 	.word	0x00004849
    4a4c:	000047fd 	.word	0x000047fd

00004a50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4a50:	b590      	push	{r4, r7, lr}
    4a52:	b093      	sub	sp, #76	; 0x4c
    4a54:	af00      	add	r7, sp, #0
    4a56:	60f8      	str	r0, [r7, #12]
    4a58:	60b9      	str	r1, [r7, #8]
    4a5a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4a5c:	1c3b      	adds	r3, r7, #0
    4a5e:	333b      	adds	r3, #59	; 0x3b
    4a60:	2200      	movs	r2, #0
    4a62:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	68ba      	ldr	r2, [r7, #8]
    4a68:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	1c18      	adds	r0, r3, #0
    4a76:	4b7f      	ldr	r3, [pc, #508]	; (4c74 <usart_init+0x224>)
    4a78:	4798      	blx	r3
    4a7a:	1c03      	adds	r3, r0, #0
    4a7c:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a80:	3302      	adds	r3, #2
    4a82:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4a86:	330d      	adds	r3, #13
    4a88:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a8c:	681a      	ldr	r2, [r3, #0]
    4a8e:	2301      	movs	r3, #1
    4a90:	4013      	ands	r3, r2
    4a92:	d001      	beq.n	4a98 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4a94:	2305      	movs	r3, #5
    4a96:	e0e9      	b.n	4c6c <usart_init+0x21c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a9a:	681a      	ldr	r2, [r3, #0]
    4a9c:	2302      	movs	r3, #2
    4a9e:	4013      	ands	r3, r2
    4aa0:	d001      	beq.n	4aa6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4aa2:	231c      	movs	r3, #28
    4aa4:	e0e2      	b.n	4c6c <usart_init+0x21c>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4aa8:	2201      	movs	r2, #1
    4aaa:	1c11      	adds	r1, r2, #0
    4aac:	4099      	lsls	r1, r3
    4aae:	1c0b      	adds	r3, r1, #0
    4ab0:	2002      	movs	r0, #2
    4ab2:	1c19      	adds	r1, r3, #0
    4ab4:	4b70      	ldr	r3, [pc, #448]	; (4c78 <usart_init+0x228>)
    4ab6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4ab8:	1c3b      	adds	r3, r7, #0
    4aba:	3324      	adds	r3, #36	; 0x24
    4abc:	1c18      	adds	r0, r3, #0
    4abe:	4b6f      	ldr	r3, [pc, #444]	; (4c7c <usart_init+0x22c>)
    4ac0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4ac2:	687b      	ldr	r3, [r7, #4]
    4ac4:	7f5a      	ldrb	r2, [r3, #29]
    4ac6:	1c3b      	adds	r3, r7, #0
    4ac8:	3324      	adds	r3, #36	; 0x24
    4aca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ace:	b2da      	uxtb	r2, r3
    4ad0:	1c3b      	adds	r3, r7, #0
    4ad2:	3324      	adds	r3, #36	; 0x24
    4ad4:	1c10      	adds	r0, r2, #0
    4ad6:	1c19      	adds	r1, r3, #0
    4ad8:	4b69      	ldr	r3, [pc, #420]	; (4c80 <usart_init+0x230>)
    4ada:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ade:	b2db      	uxtb	r3, r3
    4ae0:	1c18      	adds	r0, r3, #0
    4ae2:	4b68      	ldr	r3, [pc, #416]	; (4c84 <usart_init+0x234>)
    4ae4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	7f5b      	ldrb	r3, [r3, #29]
    4aea:	1c18      	adds	r0, r3, #0
    4aec:	2100      	movs	r1, #0
    4aee:	4b66      	ldr	r3, [pc, #408]	; (4c88 <usart_init+0x238>)
    4af0:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	7ada      	ldrb	r2, [r3, #11]
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	7d1a      	ldrb	r2, [r3, #20]
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	7d5a      	ldrb	r2, [r3, #21]
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	71da      	strb	r2, [r3, #7]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4b0a:	1c3c      	adds	r4, r7, #0
    4b0c:	343b      	adds	r4, #59	; 0x3b
    4b0e:	68fa      	ldr	r2, [r7, #12]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	1c10      	adds	r0, r2, #0
    4b14:	1c19      	adds	r1, r3, #0
    4b16:	4b5d      	ldr	r3, [pc, #372]	; (4c8c <usart_init+0x23c>)
    4b18:	4798      	blx	r3
    4b1a:	1c03      	adds	r3, r0, #0
    4b1c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4b1e:	1c3b      	adds	r3, r7, #0
    4b20:	333b      	adds	r3, #59	; 0x3b
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d003      	beq.n	4b30 <usart_init+0xe0>
		return status_code;
    4b28:	1c3b      	adds	r3, r7, #0
    4b2a:	333b      	adds	r3, #59	; 0x3b
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	e09d      	b.n	4c6c <usart_init+0x21c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4b30:	1c3b      	adds	r3, r7, #0
    4b32:	3320      	adds	r3, #32
    4b34:	1c18      	adds	r0, r3, #0
    4b36:	4b56      	ldr	r3, [pc, #344]	; (4c90 <usart_init+0x240>)
    4b38:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b3a:	1c3b      	adds	r3, r7, #0
    4b3c:	3320      	adds	r3, #32
    4b3e:	2200      	movs	r2, #0
    4b40:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b42:	1c3b      	adds	r3, r7, #0
    4b44:	3320      	adds	r3, #32
    4b46:	2200      	movs	r2, #0
    4b48:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4b4a:	687b      	ldr	r3, [r7, #4]
    4b4c:	6a1a      	ldr	r2, [r3, #32]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b4e:	1c3b      	adds	r3, r7, #0
    4b50:	3310      	adds	r3, #16
    4b52:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b58:	1c3b      	adds	r3, r7, #0
    4b5a:	3310      	adds	r3, #16
    4b5c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b62:	1c3b      	adds	r3, r7, #0
    4b64:	3310      	adds	r3, #16
    4b66:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4b6c:	1c3b      	adds	r3, r7, #0
    4b6e:	3310      	adds	r3, #16
    4b70:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4b72:	1c3b      	adds	r3, r7, #0
    4b74:	3347      	adds	r3, #71	; 0x47
    4b76:	2200      	movs	r2, #0
    4b78:	701a      	strb	r2, [r3, #0]
    4b7a:	e02c      	b.n	4bd6 <usart_init+0x186>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b7c:	1c3b      	adds	r3, r7, #0
    4b7e:	3347      	adds	r3, #71	; 0x47
    4b80:	781a      	ldrb	r2, [r3, #0]
    4b82:	1c3b      	adds	r3, r7, #0
    4b84:	3310      	adds	r3, #16
    4b86:	0092      	lsls	r2, r2, #2
    4b88:	58d3      	ldr	r3, [r2, r3]
    4b8a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d109      	bne.n	4ba6 <usart_init+0x156>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4b92:	68ba      	ldr	r2, [r7, #8]
    4b94:	1c3b      	adds	r3, r7, #0
    4b96:	3347      	adds	r3, #71	; 0x47
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	1c10      	adds	r0, r2, #0
    4b9c:	1c19      	adds	r1, r3, #0
    4b9e:	4b3d      	ldr	r3, [pc, #244]	; (4c94 <usart_init+0x244>)
    4ba0:	4798      	blx	r3
    4ba2:	1c03      	adds	r3, r0, #0
    4ba4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ba8:	3301      	adds	r3, #1
    4baa:	d00d      	beq.n	4bc8 <usart_init+0x178>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	1c3b      	adds	r3, r7, #0
    4bb2:	3320      	adds	r3, #32
    4bb4:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4bb8:	0c1b      	lsrs	r3, r3, #16
    4bba:	b2da      	uxtb	r2, r3
    4bbc:	1c3b      	adds	r3, r7, #0
    4bbe:	3320      	adds	r3, #32
    4bc0:	1c10      	adds	r0, r2, #0
    4bc2:	1c19      	adds	r1, r3, #0
    4bc4:	4b34      	ldr	r3, [pc, #208]	; (4c98 <usart_init+0x248>)
    4bc6:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4bc8:	1c3b      	adds	r3, r7, #0
    4bca:	3347      	adds	r3, #71	; 0x47
    4bcc:	781a      	ldrb	r2, [r3, #0]
    4bce:	1c3b      	adds	r3, r7, #0
    4bd0:	3347      	adds	r3, #71	; 0x47
    4bd2:	3201      	adds	r2, #1
    4bd4:	701a      	strb	r2, [r3, #0]
    4bd6:	1c3b      	adds	r3, r7, #0
    4bd8:	3347      	adds	r3, #71	; 0x47
    4bda:	781b      	ldrb	r3, [r3, #0]
    4bdc:	2b03      	cmp	r3, #3
    4bde:	d9cd      	bls.n	4b7c <usart_init+0x12c>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4be0:	2300      	movs	r3, #0
    4be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    4be4:	e008      	b.n	4bf8 <usart_init+0x1a8>
		module->callback[i]            = NULL;
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4bea:	3202      	adds	r2, #2
    4bec:	0092      	lsls	r2, r2, #2
    4bee:	2100      	movs	r1, #0
    4bf0:	50d1      	str	r1, [r2, r3]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bf4:	3301      	adds	r3, #1
    4bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    4bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d9f3      	bls.n	4be6 <usart_init+0x196>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	2200      	movs	r2, #0
    4c02:	619a      	str	r2, [r3, #24]
	module->rx_buffer_ptr              = NULL;
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	2200      	movs	r2, #0
    4c08:	615a      	str	r2, [r3, #20]
	module->remaining_tx_buffer_length = 0x0000;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	2200      	movs	r2, #0
    4c0e:	83da      	strh	r2, [r3, #30]
	module->remaining_rx_buffer_length = 0x0000;
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	2200      	movs	r2, #0
    4c14:	839a      	strh	r2, [r3, #28]
	module->callback_reg_mask          = 0x00;
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	2320      	movs	r3, #32
    4c1a:	2100      	movs	r1, #0
    4c1c:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    4c1e:	68fa      	ldr	r2, [r7, #12]
    4c20:	2321      	movs	r3, #33	; 0x21
    4c22:	2100      	movs	r1, #0
    4c24:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    4c26:	68fa      	ldr	r2, [r7, #12]
    4c28:	2322      	movs	r3, #34	; 0x22
    4c2a:	2100      	movs	r1, #0
    4c2c:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    4c2e:	68fa      	ldr	r2, [r7, #12]
    4c30:	2323      	movs	r3, #35	; 0x23
    4c32:	2100      	movs	r1, #0
    4c34:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	1c3c      	adds	r4, r7, #0
    4c3c:	3427      	adds	r4, #39	; 0x27
    4c3e:	1c18      	adds	r0, r3, #0
    4c40:	4b0c      	ldr	r3, [pc, #48]	; (4c74 <usart_init+0x224>)
    4c42:	4798      	blx	r3
    4c44:	1c03      	adds	r3, r0, #0
    4c46:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4c48:	1c3b      	adds	r3, r7, #0
    4c4a:	3327      	adds	r3, #39	; 0x27
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4b13      	ldr	r3, [pc, #76]	; (4c9c <usart_init+0x24c>)
    4c50:	1c10      	adds	r0, r2, #0
    4c52:	1c19      	adds	r1, r3, #0
    4c54:	4b12      	ldr	r3, [pc, #72]	; (4ca0 <usart_init+0x250>)
    4c56:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4c58:	1c3b      	adds	r3, r7, #0
    4c5a:	3327      	adds	r3, #39	; 0x27
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	4b11      	ldr	r3, [pc, #68]	; (4ca4 <usart_init+0x254>)
    4c60:	0092      	lsls	r2, r2, #2
    4c62:	68f9      	ldr	r1, [r7, #12]
    4c64:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4c66:	1c3b      	adds	r3, r7, #0
    4c68:	333b      	adds	r3, #59	; 0x3b
    4c6a:	781b      	ldrb	r3, [r3, #0]
}
    4c6c:	1c18      	adds	r0, r3, #0
    4c6e:	46bd      	mov	sp, r7
    4c70:	b013      	add	sp, #76	; 0x4c
    4c72:	bd90      	pop	{r4, r7, pc}
    4c74:	000128ed 	.word	0x000128ed
    4c78:	00004779 	.word	0x00004779
    4c7c:	00004765 	.word	0x00004765
    4c80:	00013f81 	.word	0x00013f81
    4c84:	00013fc1 	.word	0x00013fc1
    4c88:	00012691 	.word	0x00012691
    4c8c:	0000486d 	.word	0x0000486d
    4c90:	000047d5 	.word	0x000047d5
    4c94:	0001271d 	.word	0x0001271d
    4c98:	000142a1 	.word	0x000142a1
    4c9c:	00004e89 	.word	0x00004e89
    4ca0:	00012939 	.word	0x00012939
    4ca4:	2000398c 	.word	0x2000398c

00004ca8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b084      	sub	sp, #16
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	681b      	ldr	r3, [r3, #0]
    4cb4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	8a1b      	ldrh	r3, [r3, #16]
    4cba:	b29b      	uxth	r3, r3
    4cbc:	1c1a      	adds	r2, r3, #0
    4cbe:	2380      	movs	r3, #128	; 0x80
    4cc0:	021b      	lsls	r3, r3, #8
    4cc2:	4013      	ands	r3, r2
    4cc4:	1e5a      	subs	r2, r3, #1
    4cc6:	4193      	sbcs	r3, r2
    4cc8:	b2db      	uxtb	r3, r3
#endif
}
    4cca:	1c18      	adds	r0, r3, #0
    4ccc:	46bd      	mov	sp, r7
    4cce:	b004      	add	sp, #16
    4cd0:	bd80      	pop	{r7, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4cdc:	46c0      	nop			; (mov r8, r8)
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	1c18      	adds	r0, r3, #0
    4ce2:	4b04      	ldr	r3, [pc, #16]	; (4cf4 <_usart_wait_for_sync+0x20>)
    4ce4:	4798      	blx	r3
    4ce6:	1c03      	adds	r3, r0, #0
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d1f8      	bne.n	4cde <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4cec:	46bd      	mov	sp, r7
    4cee:	b002      	add	sp, #8
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	00004ca9 	.word	0x00004ca9

00004cf8 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b086      	sub	sp, #24
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	60f8      	str	r0, [r7, #12]
    4d00:	60b9      	str	r1, [r7, #8]
    4d02:	1dbb      	adds	r3, r7, #6
    4d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d06:	68fb      	ldr	r3, [r7, #12]
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	617b      	str	r3, [r7, #20]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    4d0c:	68fb      	ldr	r3, [r7, #12]
    4d0e:	1dba      	adds	r2, r7, #6
    4d10:	8812      	ldrh	r2, [r2, #0]
    4d12:	83da      	strh	r2, [r3, #30]
	module->tx_buffer_ptr              = tx_data;
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	68ba      	ldr	r2, [r7, #8]
    4d18:	619a      	str	r2, [r3, #24]
	module->tx_status                  = STATUS_BUSY;
    4d1a:	68fa      	ldr	r2, [r7, #12]
    4d1c:	2323      	movs	r3, #35	; 0x23
    4d1e:	2105      	movs	r1, #5
    4d20:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    4d22:	697b      	ldr	r3, [r7, #20]
    4d24:	2201      	movs	r2, #1
    4d26:	735a      	strb	r2, [r3, #13]
}
    4d28:	46bd      	mov	sp, r7
    4d2a:	b006      	add	sp, #24
    4d2c:	bd80      	pop	{r7, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)

00004d30 <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b086      	sub	sp, #24
    4d34:	af00      	add	r7, sp, #0
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	60b9      	str	r1, [r7, #8]
    4d3a:	1dbb      	adds	r3, r7, #6
    4d3c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	1dba      	adds	r2, r7, #6
    4d48:	8812      	ldrh	r2, [r2, #0]
    4d4a:	839a      	strh	r2, [r3, #28]
	module->rx_buffer_ptr              = rx_data;
    4d4c:	68fb      	ldr	r3, [r7, #12]
    4d4e:	68ba      	ldr	r2, [r7, #8]
    4d50:	615a      	str	r2, [r3, #20]
	module->rx_status                  = STATUS_BUSY;
    4d52:	68fa      	ldr	r2, [r7, #12]
    4d54:	2322      	movs	r3, #34	; 0x22
    4d56:	2105      	movs	r1, #5
    4d58:	54d1      	strb	r1, [r2, r3]
	//EMH 
	module->rxBufferCount = 0; 
    4d5a:	68fb      	ldr	r3, [r7, #12]
    4d5c:	2200      	movs	r2, #0
    4d5e:	84da      	strh	r2, [r3, #38]	; 0x26
	module->rxBufferPreviousByte = 0; 
    4d60:	68fa      	ldr	r2, [r7, #12]
    4d62:	232e      	movs	r3, #46	; 0x2e
    4d64:	2100      	movs	r1, #0
    4d66:	54d1      	strb	r1, [r2, r3]
	module->rxBufferBase = rx_data;
    4d68:	68fb      	ldr	r3, [r7, #12]
    4d6a:	68ba      	ldr	r2, [r7, #8]
    4d6c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rxBufferMaxLength = length; 
    4d6e:	68fb      	ldr	r3, [r7, #12]
    4d70:	1dba      	adds	r2, r7, #6
    4d72:	8812      	ldrh	r2, [r2, #0]
    4d74:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->rxGotStartByte = 0; 
    4d76:	68fa      	ldr	r2, [r7, #12]
    4d78:	2324      	movs	r3, #36	; 0x24
    4d7a:	2100      	movs	r1, #0
    4d7c:	54d1      	strb	r1, [r2, r3]
	
	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4d7e:	697b      	ldr	r3, [r7, #20]
    4d80:	2204      	movs	r2, #4
    4d82:	735a      	strb	r2, [r3, #13]
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif
}
    4d84:	46bd      	mov	sp, r7
    4d86:	b006      	add	sp, #24
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	46c0      	nop			; (mov r8, r8)

00004d8c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b084      	sub	sp, #16
    4d90:	af00      	add	r7, sp, #0
    4d92:	60f8      	str	r0, [r7, #12]
    4d94:	60b9      	str	r1, [r7, #8]
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4d9a:	1dfb      	adds	r3, r7, #7
    4d9c:	781a      	ldrb	r2, [r3, #0]
    4d9e:	68fb      	ldr	r3, [r7, #12]
    4da0:	3202      	adds	r2, #2
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	68b9      	ldr	r1, [r7, #8]
    4da6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4da8:	68fa      	ldr	r2, [r7, #12]
    4daa:	2320      	movs	r3, #32
    4dac:	5cd3      	ldrb	r3, [r2, r3]
    4dae:	b2da      	uxtb	r2, r3
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	2101      	movs	r1, #1
    4db6:	1c08      	adds	r0, r1, #0
    4db8:	4098      	lsls	r0, r3
    4dba:	1c03      	adds	r3, r0, #0
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	4313      	orrs	r3, r2
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	b2d9      	uxtb	r1, r3
    4dc4:	68fa      	ldr	r2, [r7, #12]
    4dc6:	2320      	movs	r3, #32
    4dc8:	54d1      	strb	r1, [r2, r3]
}
    4dca:	46bd      	mov	sp, r7
    4dcc:	b004      	add	sp, #16
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b084      	sub	sp, #16
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	60f8      	str	r0, [r7, #12]
    4dd8:	60b9      	str	r1, [r7, #8]
    4dda:	1dbb      	adds	r3, r7, #6
    4ddc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    4dde:	1dbb      	adds	r3, r7, #6
    4de0:	881b      	ldrh	r3, [r3, #0]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d101      	bne.n	4dea <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4de6:	2317      	movs	r3, #23
    4de8:	e019      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    4dea:	68fb      	ldr	r3, [r7, #12]
    4dec:	8bdb      	ldrh	r3, [r3, #30]
    4dee:	b29b      	uxth	r3, r3
    4df0:	2b00      	cmp	r3, #0
    4df2:	d001      	beq.n	4df8 <usart_write_buffer_job+0x28>
		return STATUS_BUSY;
    4df4:	2305      	movs	r3, #5
    4df6:	e012      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	79db      	ldrb	r3, [r3, #7]
    4dfc:	2201      	movs	r2, #1
    4dfe:	4053      	eors	r3, r2
    4e00:	b2db      	uxtb	r3, r3
    4e02:	2b00      	cmp	r3, #0
    4e04:	d001      	beq.n	4e0a <usart_write_buffer_job+0x3a>
		return STATUS_ERR_DENIED;
    4e06:	231c      	movs	r3, #28
    4e08:	e009      	b.n	4e1e <usart_write_buffer_job+0x4e>
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    4e0a:	68f9      	ldr	r1, [r7, #12]
    4e0c:	68ba      	ldr	r2, [r7, #8]
    4e0e:	1dbb      	adds	r3, r7, #6
    4e10:	881b      	ldrh	r3, [r3, #0]
    4e12:	1c08      	adds	r0, r1, #0
    4e14:	1c11      	adds	r1, r2, #0
    4e16:	1c1a      	adds	r2, r3, #0
    4e18:	4b03      	ldr	r3, [pc, #12]	; (4e28 <usart_write_buffer_job+0x58>)
    4e1a:	4798      	blx	r3

	return STATUS_OK;
    4e1c:	2300      	movs	r3, #0
}
    4e1e:	1c18      	adds	r0, r3, #0
    4e20:	46bd      	mov	sp, r7
    4e22:	b004      	add	sp, #16
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	00004cf9 	.word	0x00004cf9

00004e2c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	60f8      	str	r0, [r7, #12]
    4e34:	60b9      	str	r1, [r7, #8]
    4e36:	1dbb      	adds	r3, r7, #6
    4e38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    4e3a:	1dbb      	adds	r3, r7, #6
    4e3c:	881b      	ldrh	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d101      	bne.n	4e46 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4e42:	2317      	movs	r3, #23
    4e44:	e019      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4e46:	68fb      	ldr	r3, [r7, #12]
    4e48:	799b      	ldrb	r3, [r3, #6]
    4e4a:	2201      	movs	r2, #1
    4e4c:	4053      	eors	r3, r2
    4e4e:	b2db      	uxtb	r3, r3
    4e50:	2b00      	cmp	r3, #0
    4e52:	d001      	beq.n	4e58 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    4e54:	231c      	movs	r3, #28
    4e56:	e010      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	8b9b      	ldrh	r3, [r3, #28]
    4e5c:	b29b      	uxth	r3, r3
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d001      	beq.n	4e66 <usart_read_buffer_job+0x3a>
		return STATUS_BUSY;
    4e62:	2305      	movs	r3, #5
    4e64:	e009      	b.n	4e7a <usart_read_buffer_job+0x4e>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    4e66:	68f9      	ldr	r1, [r7, #12]
    4e68:	68ba      	ldr	r2, [r7, #8]
    4e6a:	1dbb      	adds	r3, r7, #6
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	1c08      	adds	r0, r1, #0
    4e70:	1c11      	adds	r1, r2, #0
    4e72:	1c1a      	adds	r2, r3, #0
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <usart_read_buffer_job+0x58>)
    4e76:	4798      	blx	r3

	return STATUS_OK;
    4e78:	2300      	movs	r3, #0
}
    4e7a:	1c18      	adds	r0, r3, #0
    4e7c:	46bd      	mov	sp, r7
    4e7e:	b004      	add	sp, #16
    4e80:	bd80      	pop	{r7, pc}
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	00004d31 	.word	0x00004d31

00004e88 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b088      	sub	sp, #32
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	1c02      	adds	r2, r0, #0
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    4e94:	1dfb      	adds	r3, r7, #7
    4e96:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4e98:	4bc4      	ldr	r3, [pc, #784]	; (51ac <_usart_interrupt_handler+0x324>)
    4e9a:	0092      	lsls	r2, r2, #2
    4e9c:	58d3      	ldr	r3, [r2, r3]
    4e9e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4ea0:	69bb      	ldr	r3, [r7, #24]
    4ea2:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    4ea4:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4ea6:	69bb      	ldr	r3, [r7, #24]
    4ea8:	1c18      	adds	r0, r3, #0
    4eaa:	4bc1      	ldr	r3, [pc, #772]	; (51b0 <_usart_interrupt_handler+0x328>)
    4eac:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4eae:	697b      	ldr	r3, [r7, #20]
    4eb0:	7b9b      	ldrb	r3, [r3, #14]
    4eb2:	b2da      	uxtb	r2, r3
    4eb4:	1c3b      	adds	r3, r7, #0
    4eb6:	3312      	adds	r3, #18
    4eb8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    4eba:	697b      	ldr	r3, [r7, #20]
    4ebc:	7b5b      	ldrb	r3, [r3, #13]
    4ebe:	b2db      	uxtb	r3, r3
    4ec0:	1c1a      	adds	r2, r3, #0
    4ec2:	1c3b      	adds	r3, r7, #0
    4ec4:	3312      	adds	r3, #18
    4ec6:	1c39      	adds	r1, r7, #0
    4ec8:	3112      	adds	r1, #18
    4eca:	8809      	ldrh	r1, [r1, #0]
    4ecc:	400a      	ands	r2, r1
    4ece:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4ed0:	69ba      	ldr	r2, [r7, #24]
    4ed2:	2320      	movs	r3, #32
    4ed4:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    4ed6:	69b9      	ldr	r1, [r7, #24]
    4ed8:	2221      	movs	r2, #33	; 0x21
    4eda:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4edc:	4013      	ands	r3, r2
    4ede:	b2da      	uxtb	r2, r3
    4ee0:	1c3b      	adds	r3, r7, #0
    4ee2:	3310      	adds	r3, #16
    4ee4:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4ee6:	1c3b      	adds	r3, r7, #0
    4ee8:	3312      	adds	r3, #18
    4eea:	881a      	ldrh	r2, [r3, #0]
    4eec:	2301      	movs	r3, #1
    4eee:	4013      	ands	r3, r2
    4ef0:	d044      	beq.n	4f7c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4ef2:	69bb      	ldr	r3, [r7, #24]
    4ef4:	8bdb      	ldrh	r3, [r3, #30]
    4ef6:	b29b      	uxth	r3, r3
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d03c      	beq.n	4f76 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4efc:	69bb      	ldr	r3, [r7, #24]
    4efe:	699b      	ldr	r3, [r3, #24]
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2da      	uxtb	r2, r3
    4f04:	1c3b      	adds	r3, r7, #0
    4f06:	331e      	adds	r3, #30
    4f08:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4f0a:	69bb      	ldr	r3, [r7, #24]
    4f0c:	699b      	ldr	r3, [r3, #24]
    4f0e:	1c5a      	adds	r2, r3, #1
    4f10:	69bb      	ldr	r3, [r7, #24]
    4f12:	619a      	str	r2, [r3, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4f14:	69bb      	ldr	r3, [r7, #24]
    4f16:	795b      	ldrb	r3, [r3, #5]
    4f18:	2b01      	cmp	r3, #1
    4f1a:	d112      	bne.n	4f42 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4f1c:	69bb      	ldr	r3, [r7, #24]
    4f1e:	699b      	ldr	r3, [r3, #24]
    4f20:	781b      	ldrb	r3, [r3, #0]
    4f22:	b2db      	uxtb	r3, r3
    4f24:	021b      	lsls	r3, r3, #8
    4f26:	b29a      	uxth	r2, r3
    4f28:	1c3b      	adds	r3, r7, #0
    4f2a:	331e      	adds	r3, #30
    4f2c:	881b      	ldrh	r3, [r3, #0]
    4f2e:	4313      	orrs	r3, r2
    4f30:	b29a      	uxth	r2, r3
    4f32:	1c3b      	adds	r3, r7, #0
    4f34:	331e      	adds	r3, #30
    4f36:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4f38:	69bb      	ldr	r3, [r7, #24]
    4f3a:	699b      	ldr	r3, [r3, #24]
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	69bb      	ldr	r3, [r7, #24]
    4f40:	619a      	str	r2, [r3, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4f42:	1c3b      	adds	r3, r7, #0
    4f44:	331e      	adds	r3, #30
    4f46:	881b      	ldrh	r3, [r3, #0]
    4f48:	05db      	lsls	r3, r3, #23
    4f4a:	0ddb      	lsrs	r3, r3, #23
    4f4c:	b29a      	uxth	r2, r3
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	831a      	strh	r2, [r3, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    4f52:	69bb      	ldr	r3, [r7, #24]
    4f54:	8bdb      	ldrh	r3, [r3, #30]
    4f56:	b29b      	uxth	r3, r3
    4f58:	3b01      	subs	r3, #1
    4f5a:	b29b      	uxth	r3, r3
    4f5c:	69ba      	ldr	r2, [r7, #24]
    4f5e:	1c19      	adds	r1, r3, #0
    4f60:	83d1      	strh	r1, [r2, #30]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d106      	bne.n	4f74 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f66:	697b      	ldr	r3, [r7, #20]
    4f68:	2201      	movs	r2, #1
    4f6a:	731a      	strb	r2, [r3, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4f6c:	697b      	ldr	r3, [r7, #20]
    4f6e:	2202      	movs	r2, #2
    4f70:	735a      	strb	r2, [r3, #13]
    4f72:	e003      	b.n	4f7c <_usart_interrupt_handler+0xf4>
    4f74:	e002      	b.n	4f7c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4f76:	697b      	ldr	r3, [r7, #20]
    4f78:	2201      	movs	r2, #1
    4f7a:	731a      	strb	r2, [r3, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4f7c:	1c3b      	adds	r3, r7, #0
    4f7e:	3312      	adds	r3, #18
    4f80:	881a      	ldrh	r2, [r3, #0]
    4f82:	2302      	movs	r3, #2
    4f84:	4013      	ands	r3, r2
    4f86:	d011      	beq.n	4fac <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	2202      	movs	r2, #2
    4f8c:	731a      	strb	r2, [r3, #12]
		module->tx_status = STATUS_OK;
    4f8e:	69ba      	ldr	r2, [r7, #24]
    4f90:	2323      	movs	r3, #35	; 0x23
    4f92:	2100      	movs	r1, #0
    4f94:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4f96:	1c3b      	adds	r3, r7, #0
    4f98:	3310      	adds	r3, #16
    4f9a:	881a      	ldrh	r2, [r3, #0]
    4f9c:	2301      	movs	r3, #1
    4f9e:	4013      	ands	r3, r2
    4fa0:	d004      	beq.n	4fac <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4fa2:	69bb      	ldr	r3, [r7, #24]
    4fa4:	689b      	ldr	r3, [r3, #8]
    4fa6:	69ba      	ldr	r2, [r7, #24]
    4fa8:	1c10      	adds	r0, r2, #0
    4faa:	4798      	blx	r3
	 * there's more data to receive */
	}
	//------------------------------------------------------
	// RECEIVE INTERRUPT OF THE USART. 
	//------------------------------------------------------
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) 
    4fac:	1c3b      	adds	r3, r7, #0
    4fae:	3312      	adds	r3, #18
    4fb0:	881a      	ldrh	r2, [r3, #0]
    4fb2:	2304      	movs	r3, #4
    4fb4:	4013      	ands	r3, r2
    4fb6:	d100      	bne.n	4fba <_usart_interrupt_handler+0x132>
    4fb8:	e0ff      	b.n	51ba <_usart_interrupt_handler+0x332>
	{
		if (module->remaining_rx_buffer_length) 
    4fba:	69bb      	ldr	r3, [r7, #24]
    4fbc:	8b9b      	ldrh	r3, [r3, #28]
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d100      	bne.n	4fc6 <_usart_interrupt_handler+0x13e>
    4fc4:	e0f6      	b.n	51b4 <_usart_interrupt_handler+0x32c>
		{
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4fc6:	697b      	ldr	r3, [r7, #20]
    4fc8:	8a1b      	ldrh	r3, [r3, #16]
    4fca:	b29b      	uxth	r3, r3
    4fcc:	b2d9      	uxtb	r1, r3
    4fce:	1c3b      	adds	r3, r7, #0
    4fd0:	330f      	adds	r3, #15
    4fd2:	2207      	movs	r2, #7
    4fd4:	400a      	ands	r2, r1
    4fd6:	701a      	strb	r2, [r3, #0]
			/* Check if an error has occurred during the receiving */
			if (error_code) 
    4fd8:	1c3b      	adds	r3, r7, #0
    4fda:	330f      	adds	r3, #15
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d044      	beq.n	506c <_usart_interrupt_handler+0x1e4>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4fe2:	1c3b      	adds	r3, r7, #0
    4fe4:	330f      	adds	r3, #15
    4fe6:	781a      	ldrb	r2, [r3, #0]
    4fe8:	2302      	movs	r3, #2
    4fea:	4013      	ands	r3, r2
    4fec:	d00c      	beq.n	5008 <_usart_interrupt_handler+0x180>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4fee:	69ba      	ldr	r2, [r7, #24]
    4ff0:	2322      	movs	r3, #34	; 0x22
    4ff2:	211a      	movs	r1, #26
    4ff4:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    4ff6:	697b      	ldr	r3, [r7, #20]
    4ff8:	8a1b      	ldrh	r3, [r3, #16]
    4ffa:	b29b      	uxth	r3, r3
    4ffc:	2202      	movs	r2, #2
    4ffe:	4313      	orrs	r3, r2
    5000:	b29a      	uxth	r2, r3
    5002:	697b      	ldr	r3, [r7, #20]
    5004:	821a      	strh	r2, [r3, #16]
    5006:	e024      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5008:	1c3b      	adds	r3, r7, #0
    500a:	330f      	adds	r3, #15
    500c:	781a      	ldrb	r2, [r3, #0]
    500e:	2304      	movs	r3, #4
    5010:	4013      	ands	r3, r2
    5012:	d00c      	beq.n	502e <_usart_interrupt_handler+0x1a6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5014:	69ba      	ldr	r2, [r7, #24]
    5016:	2322      	movs	r3, #34	; 0x22
    5018:	211e      	movs	r1, #30
    501a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    501c:	697b      	ldr	r3, [r7, #20]
    501e:	8a1b      	ldrh	r3, [r3, #16]
    5020:	b29b      	uxth	r3, r3
    5022:	2204      	movs	r2, #4
    5024:	4313      	orrs	r3, r2
    5026:	b29a      	uxth	r2, r3
    5028:	697b      	ldr	r3, [r7, #20]
    502a:	821a      	strh	r2, [r3, #16]
    502c:	e011      	b.n	5052 <_usart_interrupt_handler+0x1ca>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    502e:	1c3b      	adds	r3, r7, #0
    5030:	330f      	adds	r3, #15
    5032:	781a      	ldrb	r2, [r3, #0]
    5034:	2301      	movs	r3, #1
    5036:	4013      	ands	r3, r2
    5038:	d00b      	beq.n	5052 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    503a:	69ba      	ldr	r2, [r7, #24]
    503c:	2322      	movs	r3, #34	; 0x22
    503e:	2113      	movs	r1, #19
    5040:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5042:	697b      	ldr	r3, [r7, #20]
    5044:	8a1b      	ldrh	r3, [r3, #16]
    5046:	b29b      	uxth	r3, r3
    5048:	2201      	movs	r2, #1
    504a:	4313      	orrs	r3, r2
    504c:	b29a      	uxth	r2, r3
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	821a      	strh	r2, [r3, #16]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5052:	1c3b      	adds	r3, r7, #0
    5054:	3310      	adds	r3, #16
    5056:	881a      	ldrh	r2, [r3, #0]
    5058:	2304      	movs	r3, #4
    505a:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    505c:	d100      	bne.n	5060 <_usart_interrupt_handler+0x1d8>
    505e:	e0ac      	b.n	51ba <_usart_interrupt_handler+0x332>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5060:	69bb      	ldr	r3, [r7, #24]
    5062:	691b      	ldr	r3, [r3, #16]
    5064:	69ba      	ldr	r2, [r7, #24]
    5066:	1c10      	adds	r0, r2, #0
    5068:	4798      	blx	r3
    506a:	e0a6      	b.n	51ba <_usart_interrupt_handler+0x332>
			else 
			{

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    506c:	697b      	ldr	r3, [r7, #20]
    506e:	8b1b      	ldrh	r3, [r3, #24]
    5070:	b29a      	uxth	r2, r3
    5072:	1c3b      	adds	r3, r7, #0
    5074:	330c      	adds	r3, #12
    5076:	05d2      	lsls	r2, r2, #23
    5078:	0dd2      	lsrs	r2, r2, #23
    507a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    507c:	69bb      	ldr	r3, [r7, #24]
    507e:	695b      	ldr	r3, [r3, #20]
    5080:	1c3a      	adds	r2, r7, #0
    5082:	320c      	adds	r2, #12
    5084:	8812      	ldrh	r2, [r2, #0]
    5086:	b2d2      	uxtb	r2, r2
    5088:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    508a:	69bb      	ldr	r3, [r7, #24]
    508c:	695b      	ldr	r3, [r3, #20]
    508e:	1c5a      	adds	r2, r3, #1
    5090:	69bb      	ldr	r3, [r7, #24]
    5092:	615a      	str	r2, [r3, #20]
				module->rxBufferCount++;
    5094:	69bb      	ldr	r3, [r7, #24]
    5096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    5098:	b29b      	uxth	r3, r3
    509a:	3301      	adds	r3, #1
    509c:	b29a      	uxth	r2, r3
    509e:	69bb      	ldr	r3, [r7, #24]
    50a0:	84da      	strh	r2, [r3, #38]	; 0x26

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) 
    50a2:	69bb      	ldr	r3, [r7, #24]
    50a4:	8b9b      	ldrh	r3, [r3, #28]
    50a6:	b29b      	uxth	r3, r3
    50a8:	3b01      	subs	r3, #1
    50aa:	b29b      	uxth	r3, r3
    50ac:	69ba      	ldr	r2, [r7, #24]
    50ae:	1c19      	adds	r1, r3, #0
    50b0:	8391      	strh	r1, [r2, #28]
    50b2:	2b00      	cmp	r3, #0
    50b4:	d113      	bne.n	50de <_usart_interrupt_handler+0x256>
				{
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    50b6:	697b      	ldr	r3, [r7, #20]
    50b8:	2204      	movs	r2, #4
    50ba:	731a      	strb	r2, [r3, #12]
					module->rx_status = STATUS_OK;
    50bc:	69ba      	ldr	r2, [r7, #24]
    50be:	2322      	movs	r3, #34	; 0x22
    50c0:	2100      	movs	r1, #0
    50c2:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
    50c4:	1c3b      	adds	r3, r7, #0
    50c6:	3310      	adds	r3, #16
    50c8:	881a      	ldrh	r2, [r3, #0]
    50ca:	2302      	movs	r3, #2
    50cc:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    50ce:	d100      	bne.n	50d2 <_usart_interrupt_handler+0x24a>
    50d0:	e06b      	b.n	51aa <_usart_interrupt_handler+0x322>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
					{
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    50d2:	69bb      	ldr	r3, [r7, #24]
    50d4:	68db      	ldr	r3, [r3, #12]
    50d6:	69ba      	ldr	r2, [r7, #24]
    50d8:	1c10      	adds	r0, r2, #0
    50da:	4798      	blx	r3
    50dc:	e06d      	b.n	51ba <_usart_interrupt_handler+0x332>
					}
				}
				else
				{
					
					switch (module->rxBufferCount)
    50de:	69bb      	ldr	r3, [r7, #24]
    50e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    50e2:	b29b      	uxth	r3, r3
    50e4:	2b02      	cmp	r3, #2
    50e6:	d00e      	beq.n	5106 <_usart_interrupt_handler+0x27e>
    50e8:	2b03      	cmp	r3, #3
    50ea:	d027      	beq.n	513c <_usart_interrupt_handler+0x2b4>
    50ec:	2b01      	cmp	r3, #1
    50ee:	d154      	bne.n	519a <_usart_interrupt_handler+0x312>
					{
						case 1:
						{
							if (received_data == '#')
    50f0:	1c3b      	adds	r3, r7, #0
    50f2:	330c      	adds	r3, #12
    50f4:	881b      	ldrh	r3, [r3, #0]
    50f6:	2b23      	cmp	r3, #35	; 0x23
    50f8:	d104      	bne.n	5104 <_usart_interrupt_handler+0x27c>
							{
								module->rxGotStartByte = 1; 
    50fa:	69ba      	ldr	r2, [r7, #24]
    50fc:	2324      	movs	r3, #36	; 0x24
    50fe:	2101      	movs	r1, #1
    5100:	54d1      	strb	r1, [r2, r3]
							}
							break;
    5102:	e04a      	b.n	519a <_usart_interrupt_handler+0x312>
    5104:	e049      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 2:
						{	
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    5106:	69ba      	ldr	r2, [r7, #24]
    5108:	2324      	movs	r3, #36	; 0x24
    510a:	5cd3      	ldrb	r3, [r2, r3]
    510c:	b2db      	uxtb	r3, r3
    510e:	2b00      	cmp	r3, #0
    5110:	d009      	beq.n	5126 <_usart_interrupt_handler+0x29e>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
    5112:	1c3b      	adds	r3, r7, #0
    5114:	330c      	adds	r3, #12
    5116:	881b      	ldrh	r3, [r3, #0]
    5118:	021b      	lsls	r3, r3, #8
    511a:	b29b      	uxth	r3, r3
    511c:	3302      	adds	r3, #2
    511e:	b29a      	uxth	r2, r3
    5120:	69bb      	ldr	r3, [r7, #24]
    5122:	839a      	strh	r2, [r3, #28]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5124:	e039      	b.n	519a <_usart_interrupt_handler+0x312>
							{
							 	module->remaining_rx_buffer_length = (received_data<<8)+2;
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5126:	69bb      	ldr	r3, [r7, #24]
    5128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    512a:	69bb      	ldr	r3, [r7, #24]
    512c:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    512e:	69bb      	ldr	r3, [r7, #24]
    5130:	2200      	movs	r2, #0
    5132:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5134:	69bb      	ldr	r3, [r7, #24]
    5136:	2203      	movs	r2, #3
    5138:	839a      	strh	r2, [r3, #28]
							}							
							break;
    513a:	e02e      	b.n	519a <_usart_interrupt_handler+0x312>
						}
						case 3:
						{
							//-----------------------------
							// packets are in form of <#><packet length>
							if (module->rxGotStartByte != 0)
    513c:	69ba      	ldr	r2, [r7, #24]
    513e:	2324      	movs	r3, #36	; 0x24
    5140:	5cd3      	ldrb	r3, [r2, r3]
    5142:	b2db      	uxtb	r3, r3
    5144:	2b00      	cmp	r3, #0
    5146:	d01c      	beq.n	5182 <_usart_interrupt_handler+0x2fa>
							{
								 
								 module->remaining_rx_buffer_length += (received_data);
    5148:	69bb      	ldr	r3, [r7, #24]
    514a:	8b9b      	ldrh	r3, [r3, #28]
    514c:	b29a      	uxth	r2, r3
    514e:	1c3b      	adds	r3, r7, #0
    5150:	330c      	adds	r3, #12
    5152:	881b      	ldrh	r3, [r3, #0]
    5154:	18d3      	adds	r3, r2, r3
    5156:	b29a      	uxth	r2, r3
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	839a      	strh	r2, [r3, #28]
								 module->remaining_rx_buffer_length -= 4;
    515c:	69bb      	ldr	r3, [r7, #24]
    515e:	8b9b      	ldrh	r3, [r3, #28]
    5160:	b29b      	uxth	r3, r3
    5162:	3b04      	subs	r3, #4
    5164:	b29a      	uxth	r2, r3
    5166:	69bb      	ldr	r3, [r7, #24]
    5168:	839a      	strh	r2, [r3, #28]
								 if (module->remaining_rx_buffer_length > MAX_GENERAL_BUFFER)
    516a:	69bb      	ldr	r3, [r7, #24]
    516c:	8b9b      	ldrh	r3, [r3, #28]
    516e:	b29a      	uxth	r2, r3
    5170:	2382      	movs	r3, #130	; 0x82
    5172:	00db      	lsls	r3, r3, #3
    5174:	429a      	cmp	r2, r3
    5176:	d90f      	bls.n	5198 <_usart_interrupt_handler+0x310>
								 {
									module->rxGotStartByte = 0;  
    5178:	69ba      	ldr	r2, [r7, #24]
    517a:	2324      	movs	r3, #36	; 0x24
    517c:	2100      	movs	r1, #0
    517e:	54d1      	strb	r1, [r2, r3]
							{
								module->rx_buffer_ptr = module->rxBufferBase;
								module->rxBufferCount = 0;
								module->remaining_rx_buffer_length = 3;
							}							
							break;
    5180:	e00a      	b.n	5198 <_usart_interrupt_handler+0x310>
									module->rxGotStartByte = 0;  
								 }
							}
							else
							{
								module->rx_buffer_ptr = module->rxBufferBase;
    5182:	69bb      	ldr	r3, [r7, #24]
    5184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5186:	69bb      	ldr	r3, [r7, #24]
    5188:	615a      	str	r2, [r3, #20]
								module->rxBufferCount = 0;
    518a:	69bb      	ldr	r3, [r7, #24]
    518c:	2200      	movs	r2, #0
    518e:	84da      	strh	r2, [r3, #38]	; 0x26
								module->remaining_rx_buffer_length = 3;
    5190:	69bb      	ldr	r3, [r7, #24]
    5192:	2203      	movs	r2, #3
    5194:	839a      	strh	r2, [r3, #28]
							}							
							break;
    5196:	e7ff      	b.n	5198 <_usart_interrupt_handler+0x310>
    5198:	46c0      	nop			; (mov r8, r8)
						}
					}
					
					module->rxBufferPreviousByte = received_data;
    519a:	1c3b      	adds	r3, r7, #0
    519c:	330c      	adds	r3, #12
    519e:	881b      	ldrh	r3, [r3, #0]
    51a0:	b2d9      	uxtb	r1, r3
    51a2:	69ba      	ldr	r2, [r7, #24]
    51a4:	232e      	movs	r3, #46	; 0x2e
    51a6:	54d1      	strb	r1, [r2, r3]
    51a8:	e007      	b.n	51ba <_usart_interrupt_handler+0x332>
    51aa:	e006      	b.n	51ba <_usart_interrupt_handler+0x332>
    51ac:	2000398c 	.word	0x2000398c
    51b0:	00004cd5 	.word	0x00004cd5
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    51b4:	697b      	ldr	r3, [r7, #20]
    51b6:	2204      	movs	r2, #4
    51b8:	731a      	strb	r2, [r3, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    51ba:	46bd      	mov	sp, r7
    51bc:	b008      	add	sp, #32
    51be:	bd80      	pop	{r7, pc}

000051c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	2200      	movs	r2, #0
    51cc:	701a      	strb	r2, [r3, #0]
}
    51ce:	46bd      	mov	sp, r7
    51d0:	b002      	add	sp, #8
    51d2:	bd80      	pop	{r7, pc}

000051d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b082      	sub	sp, #8
    51d8:	af00      	add	r7, sp, #0
    51da:	1c02      	adds	r2, r0, #0
    51dc:	6039      	str	r1, [r7, #0]
    51de:	1dfb      	adds	r3, r7, #7
    51e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51e2:	1dfb      	adds	r3, r7, #7
    51e4:	781b      	ldrb	r3, [r3, #0]
    51e6:	2b01      	cmp	r3, #1
    51e8:	d00a      	beq.n	5200 <system_apb_clock_set_mask+0x2c>
    51ea:	2b02      	cmp	r3, #2
    51ec:	d00f      	beq.n	520e <system_apb_clock_set_mask+0x3a>
    51ee:	2b00      	cmp	r3, #0
    51f0:	d114      	bne.n	521c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    51f2:	4b0e      	ldr	r3, [pc, #56]	; (522c <system_apb_clock_set_mask+0x58>)
    51f4:	4a0d      	ldr	r2, [pc, #52]	; (522c <system_apb_clock_set_mask+0x58>)
    51f6:	6991      	ldr	r1, [r2, #24]
    51f8:	683a      	ldr	r2, [r7, #0]
    51fa:	430a      	orrs	r2, r1
    51fc:	619a      	str	r2, [r3, #24]
			break;
    51fe:	e00f      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5200:	4b0a      	ldr	r3, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5202:	4a0a      	ldr	r2, [pc, #40]	; (522c <system_apb_clock_set_mask+0x58>)
    5204:	69d1      	ldr	r1, [r2, #28]
    5206:	683a      	ldr	r2, [r7, #0]
    5208:	430a      	orrs	r2, r1
    520a:	61da      	str	r2, [r3, #28]
			break;
    520c:	e008      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <system_apb_clock_set_mask+0x58>)
    5210:	4a06      	ldr	r2, [pc, #24]	; (522c <system_apb_clock_set_mask+0x58>)
    5212:	6a11      	ldr	r1, [r2, #32]
    5214:	683a      	ldr	r2, [r7, #0]
    5216:	430a      	orrs	r2, r1
    5218:	621a      	str	r2, [r3, #32]
			break;
    521a:	e001      	b.n	5220 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    521c:	2317      	movs	r3, #23
    521e:	e000      	b.n	5222 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5220:	2300      	movs	r3, #0
}
    5222:	1c18      	adds	r0, r3, #0
    5224:	46bd      	mov	sp, r7
    5226:	b002      	add	sp, #8
    5228:	bd80      	pop	{r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	40000400 	.word	0x40000400

00005230 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5230:	b580      	push	{r7, lr}
    5232:	b082      	sub	sp, #8
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	2280      	movs	r2, #128	; 0x80
    523c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	2200      	movs	r2, #0
    5242:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	2201      	movs	r2, #1
    5248:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	2200      	movs	r2, #0
    524e:	70da      	strb	r2, [r3, #3]
}
    5250:	46bd      	mov	sp, r7
    5252:	b002      	add	sp, #8
    5254:	bd80      	pop	{r7, pc}
    5256:	46c0      	nop			; (mov r8, r8)

00005258 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5258:	b580      	push	{r7, lr}
    525a:	b084      	sub	sp, #16
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	7bdb      	ldrb	r3, [r3, #15]
    526a:	b2db      	uxtb	r3, r3
    526c:	1c1a      	adds	r2, r3, #0
    526e:	2380      	movs	r3, #128	; 0x80
    5270:	4013      	ands	r3, r2
    5272:	1e5a      	subs	r2, r3, #1
    5274:	4193      	sbcs	r3, r2
    5276:	b2db      	uxtb	r3, r3
}
    5278:	1c18      	adds	r0, r3, #0
    527a:	46bd      	mov	sp, r7
    527c:	b004      	add	sp, #16
    527e:	bd80      	pop	{r7, pc}

00005280 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5280:	b590      	push	{r4, r7, lr}
    5282:	b08d      	sub	sp, #52	; 0x34
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5288:	1c3b      	adds	r3, r7, #0
    528a:	330c      	adds	r3, #12
    528c:	4a0f      	ldr	r2, [pc, #60]	; (52cc <_tc_get_inst_index+0x4c>)
    528e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5290:	c313      	stmia	r3!, {r0, r1, r4}
    5292:	ca13      	ldmia	r2!, {r0, r1, r4}
    5294:	c313      	stmia	r3!, {r0, r1, r4}
    5296:	ca03      	ldmia	r2!, {r0, r1}
    5298:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    529a:	2300      	movs	r3, #0
    529c:	62fb      	str	r3, [r7, #44]	; 0x2c
    529e:	e00d      	b.n	52bc <_tc_get_inst_index+0x3c>
		if (hw == tc_modules[i]) {
    52a0:	1c3b      	adds	r3, r7, #0
    52a2:	330c      	adds	r3, #12
    52a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    52a6:	0092      	lsls	r2, r2, #2
    52a8:	58d2      	ldr	r2, [r2, r3]
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	429a      	cmp	r2, r3
    52ae:	d102      	bne.n	52b6 <_tc_get_inst_index+0x36>
			return i;
    52b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b2:	b2db      	uxtb	r3, r3
    52b4:	e006      	b.n	52c4 <_tc_get_inst_index+0x44>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    52b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52b8:	3301      	adds	r3, #1
    52ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    52bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52be:	2b07      	cmp	r3, #7
    52c0:	d9ee      	bls.n	52a0 <_tc_get_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    52c2:	2300      	movs	r3, #0
}
    52c4:	1c18      	adds	r0, r3, #0
    52c6:	46bd      	mov	sp, r7
    52c8:	b00d      	add	sp, #52	; 0x34
    52ca:	bd90      	pop	{r4, r7, pc}
    52cc:	00018250 	.word	0x00018250

000052d0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    52d0:	b590      	push	{r4, r7, lr}
    52d2:	b08f      	sub	sp, #60	; 0x3c
    52d4:	af00      	add	r7, sp, #0
    52d6:	60f8      	str	r0, [r7, #12]
    52d8:	60b9      	str	r1, [r7, #8]
    52da:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    52dc:	1c3b      	adds	r3, r7, #0
    52de:	3336      	adds	r3, #54	; 0x36
    52e0:	2200      	movs	r2, #0
    52e2:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    52e4:	1c3b      	adds	r3, r7, #0
    52e6:	3335      	adds	r3, #53	; 0x35
    52e8:	2200      	movs	r2, #0
    52ea:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    52ec:	1c3b      	adds	r3, r7, #0
    52ee:	3334      	adds	r3, #52	; 0x34
    52f0:	2200      	movs	r2, #0
    52f2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    52f4:	1c3c      	adds	r4, r7, #0
    52f6:	3431      	adds	r4, #49	; 0x31
    52f8:	68bb      	ldr	r3, [r7, #8]
    52fa:	1c18      	adds	r0, r3, #0
    52fc:	4bc4      	ldr	r3, [pc, #784]	; (5610 <tc_init+0x340>)
    52fe:	4798      	blx	r3
    5300:	1c03      	adds	r3, r0, #0
    5302:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    5304:	1c3a      	adds	r2, r7, #0
    5306:	3228      	adds	r2, #40	; 0x28
    5308:	4bc2      	ldr	r3, [pc, #776]	; (5614 <tc_init+0x344>)
    530a:	1c11      	adds	r1, r2, #0
    530c:	1c1a      	adds	r2, r3, #0
    530e:	2308      	movs	r3, #8
    5310:	1c08      	adds	r0, r1, #0
    5312:	1c11      	adds	r1, r2, #0
    5314:	1c1a      	adds	r2, r3, #0
    5316:	4bc0      	ldr	r3, [pc, #768]	; (5618 <tc_init+0x348>)
    5318:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    531a:	1c3a      	adds	r2, r7, #0
    531c:	3218      	adds	r2, #24
    531e:	4bbf      	ldr	r3, [pc, #764]	; (561c <tc_init+0x34c>)
    5320:	1c11      	adds	r1, r2, #0
    5322:	1c1a      	adds	r2, r3, #0
    5324:	2310      	movs	r3, #16
    5326:	1c08      	adds	r0, r1, #0
    5328:	1c11      	adds	r1, r2, #0
    532a:	1c1a      	adds	r2, r3, #0
    532c:	4bba      	ldr	r3, [pc, #744]	; (5618 <tc_init+0x348>)
    532e:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5330:	1c3b      	adds	r3, r7, #0
    5332:	3333      	adds	r3, #51	; 0x33
    5334:	2200      	movs	r2, #0
    5336:	701a      	strb	r2, [r3, #0]
    5338:	e00e      	b.n	5358 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    533a:	1c3b      	adds	r3, r7, #0
    533c:	3333      	adds	r3, #51	; 0x33
    533e:	781a      	ldrb	r2, [r3, #0]
    5340:	68fb      	ldr	r3, [r7, #12]
    5342:	3202      	adds	r2, #2
    5344:	0092      	lsls	r2, r2, #2
    5346:	2100      	movs	r1, #0
    5348:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    534a:	1c3b      	adds	r3, r7, #0
    534c:	3333      	adds	r3, #51	; 0x33
    534e:	781a      	ldrb	r2, [r3, #0]
    5350:	1c3b      	adds	r3, r7, #0
    5352:	3333      	adds	r3, #51	; 0x33
    5354:	3201      	adds	r2, #1
    5356:	701a      	strb	r2, [r3, #0]
    5358:	1c3b      	adds	r3, r7, #0
    535a:	3333      	adds	r3, #51	; 0x33
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	2b03      	cmp	r3, #3
    5360:	d9eb      	bls.n	533a <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	2200      	movs	r2, #0
    5366:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	2200      	movs	r2, #0
    536c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    536e:	1c3b      	adds	r3, r7, #0
    5370:	3331      	adds	r3, #49	; 0x31
    5372:	781a      	ldrb	r2, [r3, #0]
    5374:	4baa      	ldr	r3, [pc, #680]	; (5620 <tc_init+0x350>)
    5376:	0092      	lsls	r2, r2, #2
    5378:	68f9      	ldr	r1, [r7, #12]
    537a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    537c:	68fb      	ldr	r3, [r7, #12]
    537e:	68ba      	ldr	r2, [r7, #8]
    5380:	601a      	str	r2, [r3, #0]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	789b      	ldrb	r3, [r3, #2]
    5386:	2b08      	cmp	r3, #8
    5388:	d107      	bne.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    538a:	1c3b      	adds	r3, r7, #0
    538c:	3331      	adds	r3, #49	; 0x31
    538e:	781a      	ldrb	r2, [r3, #0]
    5390:	2301      	movs	r3, #1
    5392:	4013      	ands	r3, r2

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5394:	d001      	beq.n	539a <tc_init+0xca>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5396:	2317      	movs	r3, #23
    5398:	e1d5      	b.n	5746 <tc_init+0x476>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	789a      	ldrb	r2, [r3, #2]
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    53a2:	68bb      	ldr	r3, [r7, #8]
    53a4:	881b      	ldrh	r3, [r3, #0]
    53a6:	b29b      	uxth	r3, r3
    53a8:	1c1a      	adds	r2, r3, #0
    53aa:	2301      	movs	r3, #1
    53ac:	4013      	ands	r3, r2
    53ae:	d001      	beq.n	53b4 <tc_init+0xe4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    53b0:	2305      	movs	r3, #5
    53b2:	e1c8      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    53b4:	68bb      	ldr	r3, [r7, #8]
    53b6:	7bdb      	ldrb	r3, [r3, #15]
    53b8:	b2db      	uxtb	r3, r3
    53ba:	1c1a      	adds	r2, r3, #0
    53bc:	2310      	movs	r3, #16
    53be:	4013      	ands	r3, r2
    53c0:	d001      	beq.n	53c6 <tc_init+0xf6>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    53c2:	231c      	movs	r3, #28
    53c4:	e1bf      	b.n	5746 <tc_init+0x476>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    53c6:	68bb      	ldr	r3, [r7, #8]
    53c8:	881b      	ldrh	r3, [r3, #0]
    53ca:	b29b      	uxth	r3, r3
    53cc:	1c1a      	adds	r2, r3, #0
    53ce:	2302      	movs	r3, #2
    53d0:	4013      	ands	r3, r2
    53d2:	d001      	beq.n	53d8 <tc_init+0x108>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    53d4:	231c      	movs	r3, #28
    53d6:	e1b6      	b.n	5746 <tc_init+0x476>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	7c1b      	ldrb	r3, [r3, #16]
    53dc:	2b00      	cmp	r3, #0
    53de:	d017      	beq.n	5410 <tc_init+0x140>
		system_pinmux_get_config_defaults(&pin_config);
    53e0:	1c3b      	adds	r3, r7, #0
    53e2:	3314      	adds	r3, #20
    53e4:	1c18      	adds	r0, r3, #0
    53e6:	4b8f      	ldr	r3, [pc, #572]	; (5624 <tc_init+0x354>)
    53e8:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	699b      	ldr	r3, [r3, #24]
    53ee:	b2da      	uxtb	r2, r3
    53f0:	1c3b      	adds	r3, r7, #0
    53f2:	3314      	adds	r3, #20
    53f4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	3314      	adds	r3, #20
    53fa:	2201      	movs	r2, #1
    53fc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    5402:	b2da      	uxtb	r2, r3
    5404:	1c3b      	adds	r3, r7, #0
    5406:	3314      	adds	r3, #20
    5408:	1c10      	adds	r0, r2, #0
    540a:	1c19      	adds	r1, r3, #0
    540c:	4b86      	ldr	r3, [pc, #536]	; (5628 <tc_init+0x358>)
    540e:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	7f1b      	ldrb	r3, [r3, #28]
    5414:	2b00      	cmp	r3, #0
    5416:	d017      	beq.n	5448 <tc_init+0x178>
		system_pinmux_get_config_defaults(&pin_config);
    5418:	1c3b      	adds	r3, r7, #0
    541a:	3314      	adds	r3, #20
    541c:	1c18      	adds	r0, r3, #0
    541e:	4b81      	ldr	r3, [pc, #516]	; (5624 <tc_init+0x354>)
    5420:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5426:	b2da      	uxtb	r2, r3
    5428:	1c3b      	adds	r3, r7, #0
    542a:	3314      	adds	r3, #20
    542c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    542e:	1c3b      	adds	r3, r7, #0
    5430:	3314      	adds	r3, #20
    5432:	2201      	movs	r2, #1
    5434:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    543a:	b2da      	uxtb	r2, r3
    543c:	1c3b      	adds	r3, r7, #0
    543e:	3314      	adds	r3, #20
    5440:	1c10      	adds	r0, r2, #0
    5442:	1c19      	adds	r1, r3, #0
    5444:	4b78      	ldr	r3, [pc, #480]	; (5628 <tc_init+0x358>)
    5446:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    5448:	1c3b      	adds	r3, r7, #0
    544a:	3331      	adds	r3, #49	; 0x31
    544c:	781a      	ldrb	r2, [r3, #0]
    544e:	1c3b      	adds	r3, r7, #0
    5450:	3318      	adds	r3, #24
    5452:	0052      	lsls	r2, r2, #1
    5454:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5456:	2002      	movs	r0, #2
    5458:	1c19      	adds	r1, r3, #0
    545a:	4b74      	ldr	r3, [pc, #464]	; (562c <tc_init+0x35c>)
    545c:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	789b      	ldrb	r3, [r3, #2]
    5462:	2b08      	cmp	r3, #8
    5464:	d10b      	bne.n	547e <tc_init+0x1ae>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    5466:	1c3b      	adds	r3, r7, #0
    5468:	3331      	adds	r3, #49	; 0x31
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	1c5a      	adds	r2, r3, #1
    546e:	1c3b      	adds	r3, r7, #0
    5470:	3318      	adds	r3, #24
    5472:	0052      	lsls	r2, r2, #1
    5474:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32 bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5476:	2002      	movs	r0, #2
    5478:	1c19      	adds	r1, r3, #0
    547a:	4b6c      	ldr	r3, [pc, #432]	; (562c <tc_init+0x35c>)
    547c:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    547e:	1c3b      	adds	r3, r7, #0
    5480:	3310      	adds	r3, #16
    5482:	1c18      	adds	r0, r3, #0
    5484:	4b6a      	ldr	r3, [pc, #424]	; (5630 <tc_init+0x360>)
    5486:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	781a      	ldrb	r2, [r3, #0]
    548c:	1c3b      	adds	r3, r7, #0
    548e:	3310      	adds	r3, #16
    5490:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5492:	1c3b      	adds	r3, r7, #0
    5494:	3331      	adds	r3, #49	; 0x31
    5496:	781b      	ldrb	r3, [r3, #0]
    5498:	1c3a      	adds	r2, r7, #0
    549a:	3228      	adds	r2, #40	; 0x28
    549c:	5cd2      	ldrb	r2, [r2, r3]
    549e:	1c3b      	adds	r3, r7, #0
    54a0:	3310      	adds	r3, #16
    54a2:	1c10      	adds	r0, r2, #0
    54a4:	1c19      	adds	r1, r3, #0
    54a6:	4b63      	ldr	r3, [pc, #396]	; (5634 <tc_init+0x364>)
    54a8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    54aa:	1c3b      	adds	r3, r7, #0
    54ac:	3331      	adds	r3, #49	; 0x31
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	1c3a      	adds	r2, r7, #0
    54b2:	3228      	adds	r2, #40	; 0x28
    54b4:	5cd3      	ldrb	r3, [r2, r3]
    54b6:	1c18      	adds	r0, r3, #0
    54b8:	4b5f      	ldr	r3, [pc, #380]	; (5638 <tc_init+0x368>)
    54ba:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54c4:	4313      	orrs	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54ce:	4313      	orrs	r3, r2
    54d0:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    54d6:	1c3b      	adds	r3, r7, #0
    54d8:	3336      	adds	r3, #54	; 0x36
    54da:	430a      	orrs	r2, r1
    54dc:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	785b      	ldrb	r3, [r3, #1]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d009      	beq.n	54fa <tc_init+0x22a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    54e6:	1c3b      	adds	r3, r7, #0
    54e8:	3336      	adds	r3, #54	; 0x36
    54ea:	1c3a      	adds	r2, r7, #0
    54ec:	3236      	adds	r2, #54	; 0x36
    54ee:	8812      	ldrh	r2, [r2, #0]
    54f0:	2180      	movs	r1, #128	; 0x80
    54f2:	0109      	lsls	r1, r1, #4
    54f4:	430a      	orrs	r2, r1
    54f6:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    54f8:	e7ff      	b.n	54fa <tc_init+0x22a>
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	68fb      	ldr	r3, [r7, #12]
    54fe:	1c18      	adds	r0, r3, #0
    5500:	4b4e      	ldr	r3, [pc, #312]	; (563c <tc_init+0x36c>)
    5502:	4798      	blx	r3
    5504:	1c03      	adds	r3, r0, #0
    5506:	2b00      	cmp	r3, #0
    5508:	d1f8      	bne.n	54fc <tc_init+0x22c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    550a:	68bb      	ldr	r3, [r7, #8]
    550c:	1c3a      	adds	r2, r7, #0
    550e:	3236      	adds	r2, #54	; 0x36
    5510:	8812      	ldrh	r2, [r2, #0]
    5512:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	7b5b      	ldrb	r3, [r3, #13]
    5518:	2b00      	cmp	r3, #0
    551a:	d003      	beq.n	5524 <tc_init+0x254>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    551c:	1c3b      	adds	r3, r7, #0
    551e:	3335      	adds	r3, #53	; 0x35
    5520:	2204      	movs	r2, #4
    5522:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	7b9b      	ldrb	r3, [r3, #14]
    5528:	2b00      	cmp	r3, #0
    552a:	d008      	beq.n	553e <tc_init+0x26e>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    552c:	1c3b      	adds	r3, r7, #0
    552e:	3335      	adds	r3, #53	; 0x35
    5530:	1c3a      	adds	r2, r7, #0
    5532:	3235      	adds	r2, #53	; 0x35
    5534:	7812      	ldrb	r2, [r2, #0]
    5536:	2101      	movs	r1, #1
    5538:	430a      	orrs	r2, r1
    553a:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    553c:	e7ff      	b.n	553e <tc_init+0x26e>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	1c18      	adds	r0, r3, #0
    5544:	4b3d      	ldr	r3, [pc, #244]	; (563c <tc_init+0x36c>)
    5546:	4798      	blx	r3
    5548:	1c03      	adds	r3, r0, #0
    554a:	2b00      	cmp	r3, #0
    554c:	d1f8      	bne.n	5540 <tc_init+0x270>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	22ff      	movs	r2, #255	; 0xff
    5552:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5554:	1c3b      	adds	r3, r7, #0
    5556:	3335      	adds	r3, #53	; 0x35
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	2b00      	cmp	r3, #0
    555c:	d00c      	beq.n	5578 <tc_init+0x2a8>
		while (tc_is_syncing(module_inst)) {
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	1c18      	adds	r0, r3, #0
    5564:	4b35      	ldr	r3, [pc, #212]	; (563c <tc_init+0x36c>)
    5566:	4798      	blx	r3
    5568:	1c03      	adds	r3, r0, #0
    556a:	2b00      	cmp	r3, #0
    556c:	d1f8      	bne.n	5560 <tc_init+0x290>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	1c3a      	adds	r2, r7, #0
    5572:	3235      	adds	r2, #53	; 0x35
    5574:	7812      	ldrb	r2, [r2, #0]
    5576:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5578:	1c3b      	adds	r3, r7, #0
    557a:	3334      	adds	r3, #52	; 0x34
    557c:	687a      	ldr	r2, [r7, #4]
    557e:	7a92      	ldrb	r2, [r2, #10]
    5580:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5582:	1c3b      	adds	r3, r7, #0
    5584:	3332      	adds	r3, #50	; 0x32
    5586:	2200      	movs	r2, #0
    5588:	701a      	strb	r2, [r3, #0]
    558a:	e01d      	b.n	55c8 <tc_init+0x2f8>
		if (config->enable_capture_on_channel[i] == true) {
    558c:	1c3b      	adds	r3, r7, #0
    558e:	3332      	adds	r3, #50	; 0x32
    5590:	781b      	ldrb	r3, [r3, #0]
    5592:	687a      	ldr	r2, [r7, #4]
    5594:	18d3      	adds	r3, r2, r3
    5596:	7adb      	ldrb	r3, [r3, #11]
    5598:	2b00      	cmp	r3, #0
    559a:	d00e      	beq.n	55ba <tc_init+0x2ea>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    559c:	1c3b      	adds	r3, r7, #0
    559e:	3332      	adds	r3, #50	; 0x32
    55a0:	781b      	ldrb	r3, [r3, #0]
    55a2:	2210      	movs	r2, #16
    55a4:	1c11      	adds	r1, r2, #0
    55a6:	4099      	lsls	r1, r3
    55a8:	1c0b      	adds	r3, r1, #0
    55aa:	b2d9      	uxtb	r1, r3
    55ac:	1c3b      	adds	r3, r7, #0
    55ae:	3334      	adds	r3, #52	; 0x34
    55b0:	1c3a      	adds	r2, r7, #0
    55b2:	3234      	adds	r2, #52	; 0x34
    55b4:	7812      	ldrb	r2, [r2, #0]
    55b6:	430a      	orrs	r2, r1
    55b8:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    55ba:	1c3b      	adds	r3, r7, #0
    55bc:	3332      	adds	r3, #50	; 0x32
    55be:	781a      	ldrb	r2, [r3, #0]
    55c0:	1c3b      	adds	r3, r7, #0
    55c2:	3332      	adds	r3, #50	; 0x32
    55c4:	3201      	adds	r2, #1
    55c6:	701a      	strb	r2, [r3, #0]
    55c8:	1c3b      	adds	r3, r7, #0
    55ca:	3332      	adds	r3, #50	; 0x32
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	2b01      	cmp	r3, #1
    55d0:	d9dc      	bls.n	558c <tc_init+0x2bc>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	68fb      	ldr	r3, [r7, #12]
    55d6:	1c18      	adds	r0, r3, #0
    55d8:	4b18      	ldr	r3, [pc, #96]	; (563c <tc_init+0x36c>)
    55da:	4798      	blx	r3
    55dc:	1c03      	adds	r3, r0, #0
    55de:	2b00      	cmp	r3, #0
    55e0:	d1f8      	bne.n	55d4 <tc_init+0x304>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    55e2:	68bb      	ldr	r3, [r7, #8]
    55e4:	1c3a      	adds	r2, r7, #0
    55e6:	3234      	adds	r2, #52	; 0x34
    55e8:	7812      	ldrb	r2, [r2, #0]
    55ea:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    55ec:	46c0      	nop			; (mov r8, r8)
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	1c18      	adds	r0, r3, #0
    55f2:	4b12      	ldr	r3, [pc, #72]	; (563c <tc_init+0x36c>)
    55f4:	4798      	blx	r3
    55f6:	1c03      	adds	r3, r0, #0
    55f8:	2b00      	cmp	r3, #0
    55fa:	d1f8      	bne.n	55ee <tc_init+0x31e>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	791b      	ldrb	r3, [r3, #4]
    5600:	2b04      	cmp	r3, #4
    5602:	d01d      	beq.n	5640 <tc_init+0x370>
    5604:	2b08      	cmp	r3, #8
    5606:	d100      	bne.n	560a <tc_init+0x33a>
    5608:	e076      	b.n	56f8 <tc_init+0x428>
    560a:	2b00      	cmp	r3, #0
    560c:	d04e      	beq.n	56ac <tc_init+0x3dc>
    560e:	e099      	b.n	5744 <tc_init+0x474>
    5610:	00005281 	.word	0x00005281
    5614:	00018270 	.word	0x00018270
    5618:	00017ddd 	.word	0x00017ddd
    561c:	00018278 	.word	0x00018278
    5620:	20000588 	.word	0x20000588
    5624:	00005231 	.word	0x00005231
    5628:	000142a1 	.word	0x000142a1
    562c:	000051d5 	.word	0x000051d5
    5630:	000051c1 	.word	0x000051c1
    5634:	00013f81 	.word	0x00013f81
    5638:	00013fc1 	.word	0x00013fc1
    563c:	00005259 	.word	0x00005259
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5640:	46c0      	nop			; (mov r8, r8)
    5642:	68fb      	ldr	r3, [r7, #12]
    5644:	1c18      	adds	r0, r3, #0
    5646:	4b42      	ldr	r3, [pc, #264]	; (5750 <tc_init+0x480>)
    5648:	4798      	blx	r3
    564a:	1c03      	adds	r3, r0, #0
    564c:	2b00      	cmp	r3, #0
    564e:	d1f8      	bne.n	5642 <tc_init+0x372>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5650:	687a      	ldr	r2, [r7, #4]
    5652:	2328      	movs	r3, #40	; 0x28
    5654:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    5656:	68bb      	ldr	r3, [r7, #8]
    5658:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	1c18      	adds	r0, r3, #0
    5660:	4b3b      	ldr	r3, [pc, #236]	; (5750 <tc_init+0x480>)
    5662:	4798      	blx	r3
    5664:	1c03      	adds	r3, r0, #0
    5666:	2b00      	cmp	r3, #0
    5668:	d1f8      	bne.n	565c <tc_init+0x38c>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    566a:	687a      	ldr	r2, [r7, #4]
    566c:	2329      	movs	r3, #41	; 0x29
    566e:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    5670:	68bb      	ldr	r3, [r7, #8]
    5672:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    5674:	46c0      	nop			; (mov r8, r8)
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	1c18      	adds	r0, r3, #0
    567a:	4b35      	ldr	r3, [pc, #212]	; (5750 <tc_init+0x480>)
    567c:	4798      	blx	r3
    567e:	1c03      	adds	r3, r0, #0
    5680:	2b00      	cmp	r3, #0
    5682:	d1f8      	bne.n	5676 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5684:	687a      	ldr	r2, [r7, #4]
    5686:	232a      	movs	r3, #42	; 0x2a
    5688:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    568a:	68bb      	ldr	r3, [r7, #8]
    568c:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	1c18      	adds	r0, r3, #0
    5694:	4b2e      	ldr	r3, [pc, #184]	; (5750 <tc_init+0x480>)
    5696:	4798      	blx	r3
    5698:	1c03      	adds	r3, r0, #0
    569a:	2b00      	cmp	r3, #0
    569c:	d1f8      	bne.n	5690 <tc_init+0x3c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    569e:	687a      	ldr	r2, [r7, #4]
    56a0:	232b      	movs	r3, #43	; 0x2b
    56a2:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    56a4:	68bb      	ldr	r3, [r7, #8]
    56a6:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    56a8:	2300      	movs	r3, #0
    56aa:	e04c      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    56ac:	46c0      	nop			; (mov r8, r8)
    56ae:	68fb      	ldr	r3, [r7, #12]
    56b0:	1c18      	adds	r0, r3, #0
    56b2:	4b27      	ldr	r3, [pc, #156]	; (5750 <tc_init+0x480>)
    56b4:	4798      	blx	r3
    56b6:	1c03      	adds	r3, r0, #0
    56b8:	2b00      	cmp	r3, #0
    56ba:	d1f8      	bne.n	56ae <tc_init+0x3de>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    56c0:	68bb      	ldr	r3, [r7, #8]
    56c2:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    56c4:	46c0      	nop			; (mov r8, r8)
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	1c18      	adds	r0, r3, #0
    56ca:	4b21      	ldr	r3, [pc, #132]	; (5750 <tc_init+0x480>)
    56cc:	4798      	blx	r3
    56ce:	1c03      	adds	r3, r0, #0
    56d0:	2b00      	cmp	r3, #0
    56d2:	d1f8      	bne.n	56c6 <tc_init+0x3f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    56d8:	68bb      	ldr	r3, [r7, #8]
    56da:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    56dc:	46c0      	nop			; (mov r8, r8)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	1c18      	adds	r0, r3, #0
    56e2:	4b1b      	ldr	r3, [pc, #108]	; (5750 <tc_init+0x480>)
    56e4:	4798      	blx	r3
    56e6:	1c03      	adds	r3, r0, #0
    56e8:	2b00      	cmp	r3, #0
    56ea:	d1f8      	bne.n	56de <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    56f0:	68bb      	ldr	r3, [r7, #8]
    56f2:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    56f4:	2300      	movs	r3, #0
    56f6:	e026      	b.n	5746 <tc_init+0x476>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	1c18      	adds	r0, r3, #0
    56fe:	4b14      	ldr	r3, [pc, #80]	; (5750 <tc_init+0x480>)
    5700:	4798      	blx	r3
    5702:	1c03      	adds	r3, r0, #0
    5704:	2b00      	cmp	r3, #0
    5706:	d1f8      	bne.n	56fa <tc_init+0x42a>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    570c:	68bb      	ldr	r3, [r7, #8]
    570e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5710:	46c0      	nop			; (mov r8, r8)
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	1c18      	adds	r0, r3, #0
    5716:	4b0e      	ldr	r3, [pc, #56]	; (5750 <tc_init+0x480>)
    5718:	4798      	blx	r3
    571a:	1c03      	adds	r3, r0, #0
    571c:	2b00      	cmp	r3, #0
    571e:	d1f8      	bne.n	5712 <tc_init+0x442>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    5724:	68bb      	ldr	r3, [r7, #8]
    5726:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    5728:	46c0      	nop			; (mov r8, r8)
    572a:	68fb      	ldr	r3, [r7, #12]
    572c:	1c18      	adds	r0, r3, #0
    572e:	4b08      	ldr	r3, [pc, #32]	; (5750 <tc_init+0x480>)
    5730:	4798      	blx	r3
    5732:	1c03      	adds	r3, r0, #0
    5734:	2b00      	cmp	r3, #0
    5736:	d1f8      	bne.n	572a <tc_init+0x45a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    5740:	2300      	movs	r3, #0
    5742:	e000      	b.n	5746 <tc_init+0x476>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5744:	2317      	movs	r3, #23
}
    5746:	1c18      	adds	r0, r3, #0
    5748:	46bd      	mov	sp, r7
    574a:	b00f      	add	sp, #60	; 0x3c
    574c:	bd90      	pop	{r4, r7, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	00005259 	.word	0x00005259

00005754 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	60f8      	str	r0, [r7, #12]
    575c:	60b9      	str	r1, [r7, #8]
    575e:	1dfb      	adds	r3, r7, #7
    5760:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5762:	1dfb      	adds	r3, r7, #7
    5764:	781a      	ldrb	r2, [r3, #0]
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	3202      	adds	r2, #2
    576a:	0092      	lsls	r2, r2, #2
    576c:	68b9      	ldr	r1, [r7, #8]
    576e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5770:	1dfb      	adds	r3, r7, #7
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b02      	cmp	r3, #2
    5776:	d107      	bne.n	5788 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5778:	68fb      	ldr	r3, [r7, #12]
    577a:	7e1b      	ldrb	r3, [r3, #24]
    577c:	2210      	movs	r2, #16
    577e:	4313      	orrs	r3, r2
    5780:	b2da      	uxtb	r2, r3
    5782:	68fb      	ldr	r3, [r7, #12]
    5784:	761a      	strb	r2, [r3, #24]
    5786:	e01a      	b.n	57be <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    5788:	1dfb      	adds	r3, r7, #7
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	2b03      	cmp	r3, #3
    578e:	d107      	bne.n	57a0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	7e1b      	ldrb	r3, [r3, #24]
    5794:	2220      	movs	r2, #32
    5796:	4313      	orrs	r3, r2
    5798:	b2da      	uxtb	r2, r3
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	761a      	strb	r2, [r3, #24]
    579e:	e00e      	b.n	57be <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    57a0:	68fb      	ldr	r3, [r7, #12]
    57a2:	7e1b      	ldrb	r3, [r3, #24]
    57a4:	b2da      	uxtb	r2, r3
    57a6:	1dfb      	adds	r3, r7, #7
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	2101      	movs	r1, #1
    57ac:	1c08      	adds	r0, r1, #0
    57ae:	4098      	lsls	r0, r3
    57b0:	1c03      	adds	r3, r0, #0
    57b2:	b2db      	uxtb	r3, r3
    57b4:	4313      	orrs	r3, r2
    57b6:	b2db      	uxtb	r3, r3
    57b8:	b2da      	uxtb	r2, r3
    57ba:	68fb      	ldr	r3, [r7, #12]
    57bc:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    57be:	2300      	movs	r3, #0
}
    57c0:	1c18      	adds	r0, r3, #0
    57c2:	46bd      	mov	sp, r7
    57c4:	b004      	add	sp, #16
    57c6:	bd80      	pop	{r7, pc}

000057c8 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    57c8:	b580      	push	{r7, lr}
    57ca:	af00      	add	r7, sp, #0
    57cc:	2000      	movs	r0, #0
    57ce:	4b02      	ldr	r3, [pc, #8]	; (57d8 <TC0_Handler+0x10>)
    57d0:	4798      	blx	r3
    57d2:	46bd      	mov	sp, r7
    57d4:	bd80      	pop	{r7, pc}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	00005869 	.word	0x00005869

000057dc <TC1_Handler>:
    57dc:	b580      	push	{r7, lr}
    57de:	af00      	add	r7, sp, #0
    57e0:	2001      	movs	r0, #1
    57e2:	4b02      	ldr	r3, [pc, #8]	; (57ec <TC1_Handler+0x10>)
    57e4:	4798      	blx	r3
    57e6:	46bd      	mov	sp, r7
    57e8:	bd80      	pop	{r7, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	00005869 	.word	0x00005869

000057f0 <TC2_Handler>:
    57f0:	b580      	push	{r7, lr}
    57f2:	af00      	add	r7, sp, #0
    57f4:	2002      	movs	r0, #2
    57f6:	4b02      	ldr	r3, [pc, #8]	; (5800 <TC2_Handler+0x10>)
    57f8:	4798      	blx	r3
    57fa:	46bd      	mov	sp, r7
    57fc:	bd80      	pop	{r7, pc}
    57fe:	46c0      	nop			; (mov r8, r8)
    5800:	00005869 	.word	0x00005869

00005804 <TC3_Handler>:
    5804:	b580      	push	{r7, lr}
    5806:	af00      	add	r7, sp, #0
    5808:	2003      	movs	r0, #3
    580a:	4b02      	ldr	r3, [pc, #8]	; (5814 <TC3_Handler+0x10>)
    580c:	4798      	blx	r3
    580e:	46bd      	mov	sp, r7
    5810:	bd80      	pop	{r7, pc}
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	00005869 	.word	0x00005869

00005818 <TC4_Handler>:
    5818:	b580      	push	{r7, lr}
    581a:	af00      	add	r7, sp, #0
    581c:	2004      	movs	r0, #4
    581e:	4b02      	ldr	r3, [pc, #8]	; (5828 <TC4_Handler+0x10>)
    5820:	4798      	blx	r3
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	00005869 	.word	0x00005869

0000582c <TC5_Handler>:
    582c:	b580      	push	{r7, lr}
    582e:	af00      	add	r7, sp, #0
    5830:	2005      	movs	r0, #5
    5832:	4b02      	ldr	r3, [pc, #8]	; (583c <TC5_Handler+0x10>)
    5834:	4798      	blx	r3
    5836:	46bd      	mov	sp, r7
    5838:	bd80      	pop	{r7, pc}
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	00005869 	.word	0x00005869

00005840 <TC6_Handler>:
    5840:	b580      	push	{r7, lr}
    5842:	af00      	add	r7, sp, #0
    5844:	2006      	movs	r0, #6
    5846:	4b02      	ldr	r3, [pc, #8]	; (5850 <TC6_Handler+0x10>)
    5848:	4798      	blx	r3
    584a:	46bd      	mov	sp, r7
    584c:	bd80      	pop	{r7, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	00005869 	.word	0x00005869

00005854 <TC7_Handler>:
    5854:	b580      	push	{r7, lr}
    5856:	af00      	add	r7, sp, #0
    5858:	2007      	movs	r0, #7
    585a:	4b02      	ldr	r3, [pc, #8]	; (5864 <TC7_Handler+0x10>)
    585c:	4798      	blx	r3
    585e:	46bd      	mov	sp, r7
    5860:	bd80      	pop	{r7, pc}
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	00005869 	.word	0x00005869

00005868 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5868:	b580      	push	{r7, lr}
    586a:	b084      	sub	sp, #16
    586c:	af00      	add	r7, sp, #0
    586e:	1c02      	adds	r2, r0, #0
    5870:	1dfb      	adds	r3, r7, #7
    5872:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    5874:	1dfb      	adds	r3, r7, #7
    5876:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5878:	4b28      	ldr	r3, [pc, #160]	; (591c <_tc_interrupt_handler+0xb4>)
    587a:	0092      	lsls	r2, r2, #2
    587c:	58d3      	ldr	r3, [r2, r3]
    587e:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	7b9b      	ldrb	r3, [r3, #14]
    5886:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    588c:	4013      	ands	r3, r2
    588e:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5894:	1c3b      	adds	r3, r7, #0
    5896:	330b      	adds	r3, #11
    5898:	400a      	ands	r2, r1
    589a:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    589c:	1c3b      	adds	r3, r7, #0
    589e:	330b      	adds	r3, #11
    58a0:	781a      	ldrb	r2, [r3, #0]
    58a2:	2301      	movs	r3, #1
    58a4:	4013      	ands	r3, r2
    58a6:	d008      	beq.n	58ba <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    58a8:	68fb      	ldr	r3, [r7, #12]
    58aa:	689b      	ldr	r3, [r3, #8]
    58ac:	68fa      	ldr	r2, [r7, #12]
    58ae:	1c10      	adds	r0, r2, #0
    58b0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	2201      	movs	r2, #1
    58b8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    58ba:	1c3b      	adds	r3, r7, #0
    58bc:	330b      	adds	r3, #11
    58be:	781a      	ldrb	r2, [r3, #0]
    58c0:	2302      	movs	r3, #2
    58c2:	4013      	ands	r3, r2
    58c4:	d008      	beq.n	58d8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	68db      	ldr	r3, [r3, #12]
    58ca:	68fa      	ldr	r2, [r7, #12]
    58cc:	1c10      	adds	r0, r2, #0
    58ce:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	2202      	movs	r2, #2
    58d6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    58d8:	1c3b      	adds	r3, r7, #0
    58da:	330b      	adds	r3, #11
    58dc:	781a      	ldrb	r2, [r3, #0]
    58de:	2310      	movs	r3, #16
    58e0:	4013      	ands	r3, r2
    58e2:	d008      	beq.n	58f6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	691b      	ldr	r3, [r3, #16]
    58e8:	68fa      	ldr	r2, [r7, #12]
    58ea:	1c10      	adds	r0, r2, #0
    58ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	2210      	movs	r2, #16
    58f4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    58f6:	1c3b      	adds	r3, r7, #0
    58f8:	330b      	adds	r3, #11
    58fa:	781a      	ldrb	r2, [r3, #0]
    58fc:	2320      	movs	r3, #32
    58fe:	4013      	ands	r3, r2
    5900:	d008      	beq.n	5914 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5902:	68fb      	ldr	r3, [r7, #12]
    5904:	695b      	ldr	r3, [r3, #20]
    5906:	68fa      	ldr	r2, [r7, #12]
    5908:	1c10      	adds	r0, r2, #0
    590a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	2220      	movs	r2, #32
    5912:	739a      	strb	r2, [r3, #14]
	}
}
    5914:	46bd      	mov	sp, r7
    5916:	b004      	add	sp, #16
    5918:	bd80      	pop	{r7, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	20000588 	.word	0x20000588

00005920 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5920:	b580      	push	{r7, lr}
    5922:	b082      	sub	sp, #8
    5924:	af00      	add	r7, sp, #0
    5926:	1c02      	adds	r2, r0, #0
    5928:	6039      	str	r1, [r7, #0]
    592a:	1dfb      	adds	r3, r7, #7
    592c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    592e:	1dfb      	adds	r3, r7, #7
    5930:	781b      	ldrb	r3, [r3, #0]
    5932:	2b01      	cmp	r3, #1
    5934:	d00a      	beq.n	594c <system_apb_clock_set_mask+0x2c>
    5936:	2b02      	cmp	r3, #2
    5938:	d00f      	beq.n	595a <system_apb_clock_set_mask+0x3a>
    593a:	2b00      	cmp	r3, #0
    593c:	d114      	bne.n	5968 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    593e:	4b0e      	ldr	r3, [pc, #56]	; (5978 <system_apb_clock_set_mask+0x58>)
    5940:	4a0d      	ldr	r2, [pc, #52]	; (5978 <system_apb_clock_set_mask+0x58>)
    5942:	6991      	ldr	r1, [r2, #24]
    5944:	683a      	ldr	r2, [r7, #0]
    5946:	430a      	orrs	r2, r1
    5948:	619a      	str	r2, [r3, #24]
			break;
    594a:	e00f      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    594c:	4b0a      	ldr	r3, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    594e:	4a0a      	ldr	r2, [pc, #40]	; (5978 <system_apb_clock_set_mask+0x58>)
    5950:	69d1      	ldr	r1, [r2, #28]
    5952:	683a      	ldr	r2, [r7, #0]
    5954:	430a      	orrs	r2, r1
    5956:	61da      	str	r2, [r3, #28]
			break;
    5958:	e008      	b.n	596c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    595a:	4b07      	ldr	r3, [pc, #28]	; (5978 <system_apb_clock_set_mask+0x58>)
    595c:	4a06      	ldr	r2, [pc, #24]	; (5978 <system_apb_clock_set_mask+0x58>)
    595e:	6a11      	ldr	r1, [r2, #32]
    5960:	683a      	ldr	r2, [r7, #0]
    5962:	430a      	orrs	r2, r1
    5964:	621a      	str	r2, [r3, #32]
			break;
    5966:	e001      	b.n	596c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5968:	2317      	movs	r3, #23
    596a:	e000      	b.n	596e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    596c:	2300      	movs	r3, #0
}
    596e:	1c18      	adds	r0, r3, #0
    5970:	46bd      	mov	sp, r7
    5972:	b002      	add	sp, #8
    5974:	bd80      	pop	{r7, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	40000400 	.word	0x40000400

0000597c <wdt_is_syncing>:
 *
 * \retval true If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    597c:	b580      	push	{r7, lr}
    597e:	b082      	sub	sp, #8
    5980:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5982:	4b08      	ldr	r3, [pc, #32]	; (59a4 <wdt_is_syncing+0x28>)
    5984:	607b      	str	r3, [r7, #4]

#if (SAML21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	79db      	ldrb	r3, [r3, #7]
    598a:	b2db      	uxtb	r3, r3
    598c:	b2db      	uxtb	r3, r3
    598e:	b25b      	sxtb	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	da01      	bge.n	5998 <wdt_is_syncing+0x1c>
#endif
		return true;
    5994:	2301      	movs	r3, #1
    5996:	e000      	b.n	599a <wdt_is_syncing+0x1e>
	}

	return false;
    5998:	2300      	movs	r3, #0
}
    599a:	1c18      	adds	r0, r3, #0
    599c:	46bd      	mov	sp, r7
    599e:	b002      	add	sp, #8
    59a0:	bd80      	pop	{r7, pc}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	40001000 	.word	0x40001000

000059a8 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    59a8:	b580      	push	{r7, lr}
    59aa:	b082      	sub	sp, #8
    59ac:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    59ae:	4b07      	ldr	r3, [pc, #28]	; (59cc <wdt_is_locked+0x24>)
    59b0:	607b      	str	r3, [r7, #4]

#if (SAML21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	781b      	ldrb	r3, [r3, #0]
    59b6:	b2db      	uxtb	r3, r3
    59b8:	1c1a      	adds	r2, r3, #0
    59ba:	2380      	movs	r3, #128	; 0x80
    59bc:	4013      	ands	r3, r2
    59be:	1e5a      	subs	r2, r3, #1
    59c0:	4193      	sbcs	r3, r2
    59c2:	b2db      	uxtb	r3, r3
#endif
}
    59c4:	1c18      	adds	r0, r3, #0
    59c6:	46bd      	mov	sp, r7
    59c8:	b002      	add	sp, #8
    59ca:	bd80      	pop	{r7, pc}
    59cc:	40001000 	.word	0x40001000

000059d0 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b086      	sub	sp, #24
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    59d8:	4b56      	ldr	r3, [pc, #344]	; (5b34 <wdt_set_config+0x164>)
    59da:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    59dc:	2000      	movs	r0, #0
    59de:	2110      	movs	r1, #16
    59e0:	4b55      	ldr	r3, [pc, #340]	; (5b38 <wdt_set_config+0x168>)
    59e2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    59e4:	4b55      	ldr	r3, [pc, #340]	; (5b3c <wdt_set_config+0x16c>)
    59e6:	4798      	blx	r3
    59e8:	1c03      	adds	r3, r0, #0
    59ea:	2b00      	cmp	r3, #0
    59ec:	d001      	beq.n	59f2 <wdt_set_config+0x22>
		return STATUS_ERR_IO;
    59ee:	2310      	movs	r3, #16
    59f0:	e09c      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	78db      	ldrb	r3, [r3, #3]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d101      	bne.n	59fe <wdt_set_config+0x2e>
		return STATUS_ERR_INVALID_ARG;
    59fa:	2317      	movs	r3, #23
    59fc:	e096      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	78da      	ldrb	r2, [r3, #3]
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	791b      	ldrb	r3, [r3, #4]
    5a06:	429a      	cmp	r2, r3
    5a08:	d305      	bcc.n	5a16 <wdt_set_config+0x46>
			(config->timeout_period < config->early_warning_period)) {
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	78da      	ldrb	r2, [r3, #3]
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	795b      	ldrb	r3, [r3, #5]
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    5a12:	429a      	cmp	r2, r3
    5a14:	d201      	bcs.n	5a1a <wdt_set_config+0x4a>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
    5a16:	2317      	movs	r3, #23
    5a18:	e088      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    5a1a:	693b      	ldr	r3, [r7, #16]
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	b2db      	uxtb	r3, r3
    5a20:	2202      	movs	r2, #2
    5a22:	4393      	bics	r3, r2
    5a24:	b2da      	uxtb	r2, r3
    5a26:	693b      	ldr	r3, [r7, #16]
    5a28:	701a      	strb	r2, [r3, #0]

	if(config->enable == false) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	785b      	ldrb	r3, [r3, #1]
    5a2e:	2201      	movs	r2, #1
    5a30:	4053      	eors	r3, r2
    5a32:	b2db      	uxtb	r3, r3
    5a34:	2b00      	cmp	r3, #0
    5a36:	d001      	beq.n	5a3c <wdt_set_config+0x6c>
		return STATUS_OK;
    5a38:	2300      	movs	r3, #0
    5a3a:	e077      	b.n	5b2c <wdt_set_config+0x15c>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	789a      	ldrb	r2, [r3, #2]
    5a40:	1c3b      	adds	r3, r7, #0
    5a42:	330c      	adds	r3, #12
    5a44:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    5a46:	1c3b      	adds	r3, r7, #0
    5a48:	330c      	adds	r3, #12
    5a4a:	2001      	movs	r0, #1
    5a4c:	1c19      	adds	r1, r3, #0
    5a4e:	4b3c      	ldr	r3, [pc, #240]	; (5b40 <wdt_set_config+0x170>)
    5a50:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    5a52:	2001      	movs	r0, #1
    5a54:	4b3b      	ldr	r3, [pc, #236]	; (5b44 <wdt_set_config+0x174>)
    5a56:	4798      	blx	r3
	if (config->always_on) {
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	d003      	beq.n	5a68 <wdt_set_config+0x98>
		system_gclk_chan_lock(WDT_GCLK_ID);
    5a60:	2001      	movs	r0, #1
    5a62:	4b39      	ldr	r3, [pc, #228]	; (5b48 <wdt_set_config+0x178>)
    5a64:	4798      	blx	r3
	}

	while (wdt_is_syncing()) {
    5a66:	e7ff      	b.n	5a68 <wdt_set_config+0x98>
    5a68:	46c0      	nop			; (mov r8, r8)
    5a6a:	4b38      	ldr	r3, [pc, #224]	; (5b4c <wdt_set_config+0x17c>)
    5a6c:	4798      	blx	r3
    5a6e:	1c03      	adds	r3, r0, #0
    5a70:	2b00      	cmp	r3, #0
    5a72:	d1fa      	bne.n	5a6a <wdt_set_config+0x9a>
		/* Wait for all hardware modules to complete synchronization */
	}

	uint32_t new_config = 0;
    5a74:	2300      	movs	r3, #0
    5a76:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	78db      	ldrb	r3, [r3, #3]
    5a7c:	3b01      	subs	r3, #1
    5a7e:	697a      	ldr	r2, [r7, #20]
    5a80:	4313      	orrs	r3, r2
    5a82:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	791b      	ldrb	r3, [r3, #4]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d00f      	beq.n	5aac <wdt_set_config+0xdc>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    5a8c:	693b      	ldr	r3, [r7, #16]
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	b2db      	uxtb	r3, r3
    5a92:	2204      	movs	r2, #4
    5a94:	4313      	orrs	r3, r2
    5a96:	b2da      	uxtb	r2, r3
    5a98:	693b      	ldr	r3, [r7, #16]
    5a9a:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	791b      	ldrb	r3, [r3, #4]
    5aa0:	3b01      	subs	r3, #1
    5aa2:	011b      	lsls	r3, r3, #4
    5aa4:	697a      	ldr	r2, [r7, #20]
    5aa6:	4313      	orrs	r3, r2
    5aa8:	617b      	str	r3, [r7, #20]
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
	}

	while (wdt_is_syncing()) {
    5aaa:	e007      	b.n	5abc <wdt_set_config+0xec>

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    5aac:	693b      	ldr	r3, [r7, #16]
    5aae:	781b      	ldrb	r3, [r3, #0]
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	2204      	movs	r2, #4
    5ab4:	4393      	bics	r3, r2
    5ab6:	b2da      	uxtb	r2, r3
    5ab8:	693b      	ldr	r3, [r7, #16]
    5aba:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    5abc:	46c0      	nop			; (mov r8, r8)
    5abe:	4b23      	ldr	r3, [pc, #140]	; (5b4c <wdt_set_config+0x17c>)
    5ac0:	4798      	blx	r3
    5ac2:	1c03      	adds	r3, r0, #0
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d1fa      	bne.n	5abe <wdt_set_config+0xee>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    5ac8:	697b      	ldr	r3, [r7, #20]
    5aca:	b2da      	uxtb	r2, r3
    5acc:	693b      	ldr	r3, [r7, #16]
    5ace:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	795b      	ldrb	r3, [r3, #5]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d00c      	beq.n	5af2 <wdt_set_config+0x122>
		while (wdt_is_syncing()) {
    5ad8:	46c0      	nop			; (mov r8, r8)
    5ada:	4b1c      	ldr	r3, [pc, #112]	; (5b4c <wdt_set_config+0x17c>)
    5adc:	4798      	blx	r3
    5ade:	1c03      	adds	r3, r0, #0
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d1fa      	bne.n	5ada <wdt_set_config+0x10a>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	795b      	ldrb	r3, [r3, #5]
    5ae8:	3b01      	subs	r3, #1
    5aea:	b2da      	uxtb	r2, r3
    5aec:	693b      	ldr	r3, [r7, #16]
    5aee:	709a      	strb	r2, [r3, #2]
	}

	while (wdt_is_syncing()) {
    5af0:	e7ff      	b.n	5af2 <wdt_set_config+0x122>
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	4b15      	ldr	r3, [pc, #84]	; (5b4c <wdt_set_config+0x17c>)
    5af6:	4798      	blx	r3
    5af8:	1c03      	adds	r3, r0, #0
    5afa:	2b00      	cmp	r3, #0
    5afc:	d1fa      	bne.n	5af4 <wdt_set_config+0x124>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	781b      	ldrb	r3, [r3, #0]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d009      	beq.n	5b1a <wdt_set_config+0x14a>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    5b06:	693b      	ldr	r3, [r7, #16]
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	b2db      	uxtb	r3, r3
    5b0c:	2280      	movs	r2, #128	; 0x80
    5b0e:	4252      	negs	r2, r2
    5b10:	4313      	orrs	r3, r2
    5b12:	b2da      	uxtb	r2, r3
    5b14:	693b      	ldr	r3, [r7, #16]
    5b16:	701a      	strb	r2, [r3, #0]
    5b18:	e007      	b.n	5b2a <wdt_set_config+0x15a>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    5b1a:	693b      	ldr	r3, [r7, #16]
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	b2db      	uxtb	r3, r3
    5b20:	2202      	movs	r2, #2
    5b22:	4313      	orrs	r3, r2
    5b24:	b2da      	uxtb	r2, r3
    5b26:	693b      	ldr	r3, [r7, #16]
    5b28:	701a      	strb	r2, [r3, #0]
	}

	return STATUS_OK;
    5b2a:	2300      	movs	r3, #0
}
    5b2c:	1c18      	adds	r0, r3, #0
    5b2e:	46bd      	mov	sp, r7
    5b30:	b006      	add	sp, #24
    5b32:	bd80      	pop	{r7, pc}
    5b34:	40001000 	.word	0x40001000
    5b38:	00005921 	.word	0x00005921
    5b3c:	000059a9 	.word	0x000059a9
    5b40:	00013f81 	.word	0x00013f81
    5b44:	00013fc1 	.word	0x00013fc1
    5b48:	0001409d 	.word	0x0001409d
    5b4c:	0000597d 	.word	0x0000597d

00005b50 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    5b50:	b580      	push	{r7, lr}
    5b52:	b082      	sub	sp, #8
    5b54:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    5b56:	4b07      	ldr	r3, [pc, #28]	; (5b74 <wdt_reset_count+0x24>)
    5b58:	607b      	str	r3, [r7, #4]

	while (wdt_is_syncing()) {
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	4b06      	ldr	r3, [pc, #24]	; (5b78 <wdt_reset_count+0x28>)
    5b5e:	4798      	blx	r3
    5b60:	1c03      	adds	r3, r0, #0
    5b62:	2b00      	cmp	r3, #0
    5b64:	d1fa      	bne.n	5b5c <wdt_reset_count+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	22a5      	movs	r2, #165	; 0xa5
    5b6a:	721a      	strb	r2, [r3, #8]
}
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b002      	add	sp, #8
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	40001000 	.word	0x40001000
    5b78:	0000597d 	.word	0x0000597d

00005b7c <AccelProvideDecisions>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideDecisions(int16_t value, uint8_t direction,int16_t baseline)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b086      	sub	sp, #24
    5b80:	af00      	add	r7, sp, #0
    5b82:	1dbb      	adds	r3, r7, #6
    5b84:	8018      	strh	r0, [r3, #0]
    5b86:	1d7b      	adds	r3, r7, #5
    5b88:	7019      	strb	r1, [r3, #0]
    5b8a:	1cbb      	adds	r3, r7, #2
    5b8c:	801a      	strh	r2, [r3, #0]
	uint8_t status,i,done; 
	status = 0;
    5b8e:	1c3b      	adds	r3, r7, #0
    5b90:	3317      	adds	r3, #23
    5b92:	2200      	movs	r2, #0
    5b94:	701a      	strb	r2, [r3, #0]
	int32_t temp,temp2;
	uint8_t gainin;

	gainin = table0.Item.MaxForce;
    5b96:	1c3b      	adds	r3, r7, #0
    5b98:	3314      	adds	r3, #20
    5b9a:	4a35      	ldr	r2, [pc, #212]	; (5c70 <AccelProvideDecisions+0xf4>)
    5b9c:	7892      	ldrb	r2, [r2, #2]
    5b9e:	701a      	strb	r2, [r3, #0]
	if (xDecisionBufferFill != 0)
    5ba0:	4b34      	ldr	r3, [pc, #208]	; (5c74 <AccelProvideDecisions+0xf8>)
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d05c      	beq.n	5c62 <AccelProvideDecisions+0xe6>
	{
		done = 0;
    5ba8:	1c3b      	adds	r3, r7, #0
    5baa:	3315      	adds	r3, #21
    5bac:	2200      	movs	r2, #0
    5bae:	701a      	strb	r2, [r3, #0]
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5bb0:	1c3b      	adds	r3, r7, #0
    5bb2:	3316      	adds	r3, #22
    5bb4:	2200      	movs	r2, #0
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	e045      	b.n	5c46 <AccelProvideDecisions+0xca>
		{
			temp = xDecisionBuffer[i] - baseline;
    5bba:	1c3b      	adds	r3, r7, #0
    5bbc:	3316      	adds	r3, #22
    5bbe:	781a      	ldrb	r2, [r3, #0]
    5bc0:	4b2d      	ldr	r3, [pc, #180]	; (5c78 <AccelProvideDecisions+0xfc>)
    5bc2:	0052      	lsls	r2, r2, #1
    5bc4:	5ad3      	ldrh	r3, [r2, r3]
    5bc6:	b21a      	sxth	r2, r3
    5bc8:	1cbb      	adds	r3, r7, #2
    5bca:	2100      	movs	r1, #0
    5bcc:	5e5b      	ldrsh	r3, [r3, r1]
    5bce:	1ad3      	subs	r3, r2, r3
    5bd0:	613b      	str	r3, [r7, #16]
			temp2 = gainin*10;
    5bd2:	1c3b      	adds	r3, r7, #0
    5bd4:	3314      	adds	r3, #20
    5bd6:	781a      	ldrb	r2, [r3, #0]
    5bd8:	1c13      	adds	r3, r2, #0
    5bda:	009b      	lsls	r3, r3, #2
    5bdc:	189b      	adds	r3, r3, r2
    5bde:	005b      	lsls	r3, r3, #1
    5be0:	60fb      	str	r3, [r7, #12]
			temp2 = temp2/5; 
    5be2:	68fa      	ldr	r2, [r7, #12]
    5be4:	4b25      	ldr	r3, [pc, #148]	; (5c7c <AccelProvideDecisions+0x100>)
    5be6:	1c10      	adds	r0, r2, #0
    5be8:	2105      	movs	r1, #5
    5bea:	4798      	blx	r3
    5bec:	1c03      	adds	r3, r0, #0
    5bee:	60fb      	str	r3, [r7, #12]
			temp = temp * temp2;
    5bf0:	693b      	ldr	r3, [r7, #16]
    5bf2:	68fa      	ldr	r2, [r7, #12]
    5bf4:	4353      	muls	r3, r2
    5bf6:	613b      	str	r3, [r7, #16]
			temp = temp/10; 
    5bf8:	693a      	ldr	r2, [r7, #16]
    5bfa:	4b20      	ldr	r3, [pc, #128]	; (5c7c <AccelProvideDecisions+0x100>)
    5bfc:	1c10      	adds	r0, r2, #0
    5bfe:	210a      	movs	r1, #10
    5c00:	4798      	blx	r3
    5c02:	1c03      	adds	r3, r0, #0
    5c04:	613b      	str	r3, [r7, #16]
			if (direction == DECISION_GREATER)
    5c06:	1d7b      	adds	r3, r7, #5
    5c08:	781b      	ldrb	r3, [r3, #0]
    5c0a:	2b01      	cmp	r3, #1
    5c0c:	d10a      	bne.n	5c24 <AccelProvideDecisions+0xa8>
			{
				if (temp <value)
    5c0e:	1dbb      	adds	r3, r7, #6
    5c10:	2100      	movs	r1, #0
    5c12:	5e5a      	ldrsh	r2, [r3, r1]
    5c14:	693b      	ldr	r3, [r7, #16]
    5c16:	429a      	cmp	r2, r3
    5c18:	dd0e      	ble.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c1a:	1c3b      	adds	r3, r7, #0
    5c1c:	3315      	adds	r3, #21
    5c1e:	2201      	movs	r2, #1
    5c20:	701a      	strb	r2, [r3, #0]
    5c22:	e009      	b.n	5c38 <AccelProvideDecisions+0xbc>
				}
			}
			else
			{
				if (temp >value)
    5c24:	1dbb      	adds	r3, r7, #6
    5c26:	2100      	movs	r1, #0
    5c28:	5e5a      	ldrsh	r2, [r3, r1]
    5c2a:	693b      	ldr	r3, [r7, #16]
    5c2c:	429a      	cmp	r2, r3
    5c2e:	da03      	bge.n	5c38 <AccelProvideDecisions+0xbc>
				{
					done = 1; 
    5c30:	1c3b      	adds	r3, r7, #0
    5c32:	3315      	adds	r3, #21
    5c34:	2201      	movs	r2, #1
    5c36:	701a      	strb	r2, [r3, #0]

	gainin = table0.Item.MaxForce;
	if (xDecisionBufferFill != 0)
	{
		done = 0;
		for (i=0;i<MAX_DECISION_BUFFER;i++)
    5c38:	1c3b      	adds	r3, r7, #0
    5c3a:	3316      	adds	r3, #22
    5c3c:	781a      	ldrb	r2, [r3, #0]
    5c3e:	1c3b      	adds	r3, r7, #0
    5c40:	3316      	adds	r3, #22
    5c42:	3201      	adds	r2, #1
    5c44:	701a      	strb	r2, [r3, #0]
    5c46:	1c3b      	adds	r3, r7, #0
    5c48:	3316      	adds	r3, #22
    5c4a:	781b      	ldrb	r3, [r3, #0]
    5c4c:	2b04      	cmp	r3, #4
    5c4e:	d9b4      	bls.n	5bba <AccelProvideDecisions+0x3e>
				{
					done = 1; 
				}				
			}
		}
		if (done == 0)
    5c50:	1c3b      	adds	r3, r7, #0
    5c52:	3315      	adds	r3, #21
    5c54:	781b      	ldrb	r3, [r3, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d103      	bne.n	5c62 <AccelProvideDecisions+0xe6>
		{
			status = 1;
    5c5a:	1c3b      	adds	r3, r7, #0
    5c5c:	3317      	adds	r3, #23
    5c5e:	2201      	movs	r2, #1
    5c60:	701a      	strb	r2, [r3, #0]
		*y = positionYaverage;
		*z = positionZaverage;
		status = 1; 
	}
*/	
	return status; 
    5c62:	1c3b      	adds	r3, r7, #0
    5c64:	3317      	adds	r3, #23
    5c66:	781b      	ldrb	r3, [r3, #0]
}
    5c68:	1c18      	adds	r0, r3, #0
    5c6a:	46bd      	mov	sp, r7
    5c6c:	b006      	add	sp, #24
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	20002fb8 	.word	0x20002fb8
    5c74:	20000618 	.word	0x20000618
    5c78:	20000608 	.word	0x20000608
    5c7c:	000157b5 	.word	0x000157b5

00005c80 <AccelProvideReadingChange>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReadingChange(uint16_t *x, uint16_t *y, uint16_t *z,uint8_t *change)
{
    5c80:	b580      	push	{r7, lr}
    5c82:	b086      	sub	sp, #24
    5c84:	af00      	add	r7, sp, #0
    5c86:	60f8      	str	r0, [r7, #12]
    5c88:	60b9      	str	r1, [r7, #8]
    5c8a:	607a      	str	r2, [r7, #4]
    5c8c:	603b      	str	r3, [r7, #0]
	uint8_t status; 
	status = 0;
    5c8e:	1c3b      	adds	r3, r7, #0
    5c90:	3317      	adds	r3, #23
    5c92:	2200      	movs	r2, #0
    5c94:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5c96:	4b14      	ldr	r3, [pc, #80]	; (5ce8 <AccelProvideReadingChange+0x68>)
    5c98:	781b      	ldrb	r3, [r3, #0]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d01c      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
	{
		*x = positionXaverage;
    5c9e:	4b13      	ldr	r3, [pc, #76]	; (5cec <AccelProvideReadingChange+0x6c>)
    5ca0:	881b      	ldrh	r3, [r3, #0]
    5ca2:	b29a      	uxth	r2, r3
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5ca8:	4b11      	ldr	r3, [pc, #68]	; (5cf0 <AccelProvideReadingChange+0x70>)
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	b29a      	uxth	r2, r3
    5cae:	68bb      	ldr	r3, [r7, #8]
    5cb0:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5cb2:	4b10      	ldr	r3, [pc, #64]	; (5cf4 <AccelProvideReadingChange+0x74>)
    5cb4:	881b      	ldrh	r3, [r3, #0]
    5cb6:	b29a      	uxth	r2, r3
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5cbc:	1c3b      	adds	r3, r7, #0
    5cbe:	3317      	adds	r3, #23
    5cc0:	2201      	movs	r2, #1
    5cc2:	701a      	strb	r2, [r3, #0]
		if (accelerometerChange!=0)
    5cc4:	4b0c      	ldr	r3, [pc, #48]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cc6:	781b      	ldrb	r3, [r3, #0]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d005      	beq.n	5cd8 <AccelProvideReadingChange+0x58>
		{
			accelerometerChange = 0; 
    5ccc:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <AccelProvideReadingChange+0x78>)
    5cce:	2200      	movs	r2, #0
    5cd0:	701a      	strb	r2, [r3, #0]
			*change = 1; 
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	2201      	movs	r2, #1
    5cd6:	701a      	strb	r2, [r3, #0]
		}
	}
	return status; 
    5cd8:	1c3b      	adds	r3, r7, #0
    5cda:	3317      	adds	r3, #23
    5cdc:	781b      	ldrb	r3, [r3, #0]
} 
    5cde:	1c18      	adds	r0, r3, #0
    5ce0:	46bd      	mov	sp, r7
    5ce2:	b006      	add	sp, #24
    5ce4:	bd80      	pop	{r7, pc}
    5ce6:	46c0      	nop			; (mov r8, r8)
    5ce8:	200005da 	.word	0x200005da
    5cec:	2000049e 	.word	0x2000049e
    5cf0:	200004a0 	.word	0x200004a0
    5cf4:	200004a2 	.word	0x200004a2
    5cf8:	20000646 	.word	0x20000646

00005cfc <AccelProvideReading>:
// FUNCTION:    
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AccelProvideReading(uint16_t *x, uint16_t *y, uint16_t *z)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b086      	sub	sp, #24
    5d00:	af00      	add	r7, sp, #0
    5d02:	60f8      	str	r0, [r7, #12]
    5d04:	60b9      	str	r1, [r7, #8]
    5d06:	607a      	str	r2, [r7, #4]
	uint8_t status; 
	status = 0;
    5d08:	1c3b      	adds	r3, r7, #0
    5d0a:	3317      	adds	r3, #23
    5d0c:	2200      	movs	r2, #0
    5d0e:	701a      	strb	r2, [r3, #0]
	 

 
	if (acceleromterFirstFill!= 0)
    5d10:	4b0e      	ldr	r3, [pc, #56]	; (5d4c <AccelProvideReading+0x50>)
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d012      	beq.n	5d3e <AccelProvideReading+0x42>
	{
		*x = positionXaverage;
    5d18:	4b0d      	ldr	r3, [pc, #52]	; (5d50 <AccelProvideReading+0x54>)
    5d1a:	881b      	ldrh	r3, [r3, #0]
    5d1c:	b29a      	uxth	r2, r3
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	801a      	strh	r2, [r3, #0]
		*y = positionYaverage;
    5d22:	4b0c      	ldr	r3, [pc, #48]	; (5d54 <AccelProvideReading+0x58>)
    5d24:	881b      	ldrh	r3, [r3, #0]
    5d26:	b29a      	uxth	r2, r3
    5d28:	68bb      	ldr	r3, [r7, #8]
    5d2a:	801a      	strh	r2, [r3, #0]
		*z = positionZaverage;
    5d2c:	4b0a      	ldr	r3, [pc, #40]	; (5d58 <AccelProvideReading+0x5c>)
    5d2e:	881b      	ldrh	r3, [r3, #0]
    5d30:	b29a      	uxth	r2, r3
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	801a      	strh	r2, [r3, #0]
		status = 1; 
    5d36:	1c3b      	adds	r3, r7, #0
    5d38:	3317      	adds	r3, #23
    5d3a:	2201      	movs	r2, #1
    5d3c:	701a      	strb	r2, [r3, #0]
	}
	return status; 
    5d3e:	1c3b      	adds	r3, r7, #0
    5d40:	3317      	adds	r3, #23
    5d42:	781b      	ldrb	r3, [r3, #0]
}
    5d44:	1c18      	adds	r0, r3, #0
    5d46:	46bd      	mov	sp, r7
    5d48:	b006      	add	sp, #24
    5d4a:	bd80      	pop	{r7, pc}
    5d4c:	200005da 	.word	0x200005da
    5d50:	2000049e 	.word	0x2000049e
    5d54:	200004a0 	.word	0x200004a0
    5d58:	200004a2 	.word	0x200004a2

00005d5c <AccelRead>:
// FUNCTION:   AccelRead
//------------------------------------------------------------------------------
// This function Read a byte from the accelerometer. 
//==============================================================================
uint8_t AccelRead(uint8_t address)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	b084      	sub	sp, #16
    5d60:	af00      	add	r7, sp, #0
    5d62:	1c02      	adds	r2, r0, #0
    5d64:	1dfb      	adds	r3, r7, #7
    5d66:	701a      	strb	r2, [r3, #0]
	{
		value = tempBuffer[0]; 
	}
#endif 
#if BRAKEBOARD
	value = 0;
    5d68:	1c3b      	adds	r3, r7, #0
    5d6a:	330f      	adds	r3, #15
    5d6c:	2200      	movs	r2, #0
    5d6e:	701a      	strb	r2, [r3, #0]
	tempBuffer[0] = 0;
    5d70:	1c3b      	adds	r3, r7, #0
    5d72:	330c      	adds	r3, #12
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
	if (I2CAccelBufferRead(tempBuffer,address,1)!= 0)
    5d78:	1c3a      	adds	r2, r7, #0
    5d7a:	320c      	adds	r2, #12
    5d7c:	1dfb      	adds	r3, r7, #7
    5d7e:	781b      	ldrb	r3, [r3, #0]
    5d80:	1c10      	adds	r0, r2, #0
    5d82:	1c19      	adds	r1, r3, #0
    5d84:	2201      	movs	r2, #1
    5d86:	4b09      	ldr	r3, [pc, #36]	; (5dac <AccelRead+0x50>)
    5d88:	4798      	blx	r3
    5d8a:	1c03      	adds	r3, r0, #0
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d005      	beq.n	5d9c <AccelRead+0x40>
	{
		value = tempBuffer[0];
    5d90:	1c3b      	adds	r3, r7, #0
    5d92:	330f      	adds	r3, #15
    5d94:	1c3a      	adds	r2, r7, #0
    5d96:	320c      	adds	r2, #12
    5d98:	7812      	ldrb	r2, [r2, #0]
    5d9a:	701a      	strb	r2, [r3, #0]
	}
#endif
	return value;
    5d9c:	1c3b      	adds	r3, r7, #0
    5d9e:	330f      	adds	r3, #15
    5da0:	781b      	ldrb	r3, [r3, #0]
} 
    5da2:	1c18      	adds	r0, r3, #0
    5da4:	46bd      	mov	sp, r7
    5da6:	b004      	add	sp, #16
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	0000c2b9 	.word	0x0000c2b9

00005db0 <AccelWrite>:
// FUNCTION:   AccelWrite
//------------------------------------------------------------------------------
// This function will write a byte to the accelerometer
//==============================================================================
void AccelWrite(uint8_t address, uint8_t data)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b084      	sub	sp, #16
    5db4:	af00      	add	r7, sp, #0
    5db6:	1c0a      	adds	r2, r1, #0
    5db8:	1dfb      	adds	r3, r7, #7
    5dba:	1c01      	adds	r1, r0, #0
    5dbc:	7019      	strb	r1, [r3, #0]
    5dbe:	1dbb      	adds	r3, r7, #6
    5dc0:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[3];
 	tempBuffer[0] = data;
    5dc2:	1c3b      	adds	r3, r7, #0
    5dc4:	330c      	adds	r3, #12
    5dc6:	1dba      	adds	r2, r7, #6
    5dc8:	7812      	ldrb	r2, [r2, #0]
    5dca:	701a      	strb	r2, [r3, #0]
 	if (SPIAInOut(address,tempBuffer,1)!= 0)
 	{
 	}
#endif
#if BRAKEBOARD
	if (I2CAccelBufferWrite(tempBuffer,address,1)!= 0)
    5dcc:	1c3a      	adds	r2, r7, #0
    5dce:	320c      	adds	r2, #12
    5dd0:	1dfb      	adds	r3, r7, #7
    5dd2:	781b      	ldrb	r3, [r3, #0]
    5dd4:	1c10      	adds	r0, r2, #0
    5dd6:	1c19      	adds	r1, r3, #0
    5dd8:	2201      	movs	r2, #1
    5dda:	4b02      	ldr	r3, [pc, #8]	; (5de4 <AccelWrite+0x34>)
    5ddc:	4798      	blx	r3
	{
		
	}
#endif	 
}
    5dde:	46bd      	mov	sp, r7
    5de0:	b004      	add	sp, #16
    5de2:	bd80      	pop	{r7, pc}
    5de4:	0000c439 	.word	0x0000c439

00005de8 <AccelInit>:
// FUNCTION:   AccelIinit
//------------------------------------------------------------------------------
// This function will Initialize the accelerometer
//==============================================================================
uint8_t AccelInit(void)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
//  GPIO_Init(GPIOC, &GPIO_InitStructure);
 
  //------------------------------------------------
  // Turn on the sensor and Enable X, Y, and Z
  //------------------------------------------------
  AccelWrite(MEMS_CTRL_REG1, ( 0x90 | MEMS_Z_ENABLE
    5dee:	2020      	movs	r0, #32
    5df0:	2197      	movs	r1, #151	; 0x97
    5df2:	4b2c      	ldr	r3, [pc, #176]	; (5ea4 <AccelInit+0xbc>)
    5df4:	4798      	blx	r3
                                       | MEMS_Y_ENABLE | MEMS_X_ENABLE ));
  //-----------------------------------------
  // Set up the Interrupt pin configuration(s)
//  AccelWrite(MEMS_CTRL_REG3, ( MEMS_ICFG_FF_WU ));
	AccelWrite(0x23, ( 0x08 )); 
    5df6:	2023      	movs	r0, #35	; 0x23
    5df8:	2108      	movs	r1, #8
    5dfa:	4b2a      	ldr	r3, [pc, #168]	; (5ea4 <AccelInit+0xbc>)
    5dfc:	4798      	blx	r3
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5dfe:	1dfb      	adds	r3, r7, #7
    5e00:	2200      	movs	r2, #0
    5e02:	701a      	strb	r2, [r3, #0]
    5e04:	e016      	b.n	5e34 <AccelInit+0x4c>
	{
		xPositionBuffer[i]=0;
    5e06:	1dfb      	adds	r3, r7, #7
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	4b27      	ldr	r3, [pc, #156]	; (5ea8 <AccelInit+0xc0>)
    5e0c:	0052      	lsls	r2, r2, #1
    5e0e:	2100      	movs	r1, #0
    5e10:	52d1      	strh	r1, [r2, r3]
		yPositionBuffer[i]=0;
    5e12:	1dfb      	adds	r3, r7, #7
    5e14:	781a      	ldrb	r2, [r3, #0]
    5e16:	4b25      	ldr	r3, [pc, #148]	; (5eac <AccelInit+0xc4>)
    5e18:	0052      	lsls	r2, r2, #1
    5e1a:	2100      	movs	r1, #0
    5e1c:	52d1      	strh	r1, [r2, r3]
		zPositionBuffer[i]=0;
    5e1e:	1dfb      	adds	r3, r7, #7
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	4b23      	ldr	r3, [pc, #140]	; (5eb0 <AccelInit+0xc8>)
    5e24:	0052      	lsls	r2, r2, #1
    5e26:	2100      	movs	r1, #0
    5e28:	52d1      	strh	r1, [r2, r3]
//  AccelWrite(MEMS_FF_WU_THS, (0x30)); // Y axis value must be below
  
  //------------------------------
  // Set the Event duration to immediate
 // AccelWrite(MEMS_FF_WU_DURATION, MEMS_DURATION_NONE);     
	for (i=0;i<MAX_ACCELEROMETER_BUFFER;i++)
    5e2a:	1dfb      	adds	r3, r7, #7
    5e2c:	781a      	ldrb	r2, [r3, #0]
    5e2e:	1dfb      	adds	r3, r7, #7
    5e30:	3201      	adds	r2, #1
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	1dfb      	adds	r3, r7, #7
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	2b13      	cmp	r3, #19
    5e3a:	d9e4      	bls.n	5e06 <AccelInit+0x1e>
	{
		xPositionBuffer[i]=0;
		yPositionBuffer[i]=0;
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
    5e3c:	4b1d      	ldr	r3, [pc, #116]	; (5eb4 <AccelInit+0xcc>)
    5e3e:	2200      	movs	r2, #0
    5e40:	701a      	strb	r2, [r3, #0]
	acceleromterFirstFill=0;
    5e42:	4b1d      	ldr	r3, [pc, #116]	; (5eb8 <AccelInit+0xd0>)
    5e44:	2200      	movs	r2, #0
    5e46:	701a      	strb	r2, [r3, #0]
	accelerometerChange=0;
    5e48:	4b1c      	ldr	r3, [pc, #112]	; (5ebc <AccelInit+0xd4>)
    5e4a:	2200      	movs	r2, #0
    5e4c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e4e:	1dfb      	adds	r3, r7, #7
    5e50:	2200      	movs	r2, #0
    5e52:	701a      	strb	r2, [r3, #0]
    5e54:	e007      	b.n	5e66 <AccelInit+0x7e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
    5e56:	4b1a      	ldr	r3, [pc, #104]	; (5ec0 <AccelInit+0xd8>)
    5e58:	2200      	movs	r2, #0
    5e5a:	815a      	strh	r2, [r3, #10]
		zPositionBuffer[i]=0;
	}
	accelerometerOffset=0;
	acceleromterFirstFill=0;
	accelerometerChange=0;
	for (i=0;i<MAX_DECISION_BUFFER;i++)
    5e5c:	1dfb      	adds	r3, r7, #7
    5e5e:	781a      	ldrb	r2, [r3, #0]
    5e60:	1dfb      	adds	r3, r7, #7
    5e62:	3201      	adds	r2, #1
    5e64:	701a      	strb	r2, [r3, #0]
    5e66:	1dfb      	adds	r3, r7, #7
    5e68:	781b      	ldrb	r3, [r3, #0]
    5e6a:	2b04      	cmp	r3, #4
    5e6c:	d9f3      	bls.n	5e56 <AccelInit+0x6e>
	{
		xDecisionBuffer[MAX_DECISION_BUFFER]=0;
	}
	xDecisionBufferOffset=0;
    5e6e:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <AccelInit+0xdc>)
    5e70:	2200      	movs	r2, #0
    5e72:	701a      	strb	r2, [r3, #0]
	xDecisionBufferFill=0; 	
    5e74:	4b14      	ldr	r3, [pc, #80]	; (5ec8 <AccelInit+0xe0>)
    5e76:	2200      	movs	r2, #0
    5e78:	701a      	strb	r2, [r3, #0]
  //---------------------------------
  // Clear the interrupt latch
 // AccelRead(MEMS_FF_WU_SRC);    // Only use if int latched
 	AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,0); 
    5e7a:	2004      	movs	r0, #4
    5e7c:	2101      	movs	r1, #1
    5e7e:	2200      	movs	r2, #0
    5e80:	4b12      	ldr	r3, [pc, #72]	; (5ecc <AccelInit+0xe4>)
    5e82:	4798      	blx	r3
	if (AccelWhoAmI()== 0x33)
    5e84:	4b12      	ldr	r3, [pc, #72]	; (5ed0 <AccelInit+0xe8>)
    5e86:	4798      	blx	r3
    5e88:	1c03      	adds	r3, r0, #0
    5e8a:	2b33      	cmp	r3, #51	; 0x33
    5e8c:	d104      	bne.n	5e98 <AccelInit+0xb0>
	{
		AppStatusUpdate(INTERFACE_ACCELEROMETER,STATUS_PARTTALKING,1);		
    5e8e:	2004      	movs	r0, #4
    5e90:	2101      	movs	r1, #1
    5e92:	2201      	movs	r2, #1
    5e94:	4b0d      	ldr	r3, [pc, #52]	; (5ecc <AccelInit+0xe4>)
    5e96:	4798      	blx	r3
	}
   return 1;
    5e98:	2301      	movs	r3, #1
}
    5e9a:	1c18      	adds	r0, r3, #0
    5e9c:	46bd      	mov	sp, r7
    5e9e:	b002      	add	sp, #8
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	00005db1 	.word	0x00005db1
    5ea8:	200005ac 	.word	0x200005ac
    5eac:	200005dc 	.word	0x200005dc
    5eb0:	2000061c 	.word	0x2000061c
    5eb4:	20000612 	.word	0x20000612
    5eb8:	200005da 	.word	0x200005da
    5ebc:	20000646 	.word	0x20000646
    5ec0:	20000608 	.word	0x20000608
    5ec4:	20000604 	.word	0x20000604
    5ec8:	20000618 	.word	0x20000618
    5ecc:	0000f579 	.word	0x0000f579
    5ed0:	0000618d 	.word	0x0000618d

00005ed4 <AccelProcess>:
// FUNCTION:   AccelProcess
//------------------------------------------------------------------------------
// This function will Process accelerometer data
//==============================================================================
void AccelProcess(void)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b084      	sub	sp, #16
    5ed8:	af00      	add	r7, sp, #0
	uint16_t itemp,itemp2; 
	int32_t ltemp; 
	uint8_t i; 
  // Is new 3-axis accelerometer data is available?
  
  if(AccelDataAvailable())
    5eda:	4b96      	ldr	r3, [pc, #600]	; (6134 <AccelProcess+0x260>)
    5edc:	4798      	blx	r3
    5ede:	1c03      	adds	r3, r0, #0
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d100      	bne.n	5ee6 <AccelProcess+0x12>
    5ee4:	e11c      	b.n	6120 <AccelProcess+0x24c>
    //------------------------------
    // Get movement
    //------------------------------
    //----------------------------------------
    // Store instantaneous accelerometer measurements in averaging Array
	itemp = AccelRead(MEMS_OUT_X_H);
    5ee6:	2029      	movs	r0, #41	; 0x29
    5ee8:	4b93      	ldr	r3, [pc, #588]	; (6138 <AccelProcess+0x264>)
    5eea:	4798      	blx	r3
    5eec:	1c03      	adds	r3, r0, #0
    5eee:	1c1a      	adds	r2, r3, #0
    5ef0:	1c3b      	adds	r3, r7, #0
    5ef2:	330c      	adds	r3, #12
    5ef4:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_X_L);
    5ef6:	2028      	movs	r0, #40	; 0x28
    5ef8:	4b8f      	ldr	r3, [pc, #572]	; (6138 <AccelProcess+0x264>)
    5efa:	4798      	blx	r3
    5efc:	1c03      	adds	r3, r0, #0
    5efe:	1c1a      	adds	r2, r3, #0
    5f00:	1c3b      	adds	r3, r7, #0
    5f02:	330a      	adds	r3, #10
    5f04:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f06:	1c3b      	adds	r3, r7, #0
    5f08:	330c      	adds	r3, #12
    5f0a:	1c3a      	adds	r2, r7, #0
    5f0c:	320c      	adds	r2, #12
    5f0e:	8812      	ldrh	r2, [r2, #0]
    5f10:	0212      	lsls	r2, r2, #8
    5f12:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    5f14:	1c3b      	adds	r3, r7, #0
    5f16:	330c      	adds	r3, #12
    5f18:	1c39      	adds	r1, r7, #0
    5f1a:	310c      	adds	r1, #12
    5f1c:	1c3a      	adds	r2, r7, #0
    5f1e:	320a      	adds	r2, #10
    5f20:	8809      	ldrh	r1, [r1, #0]
    5f22:	8812      	ldrh	r2, [r2, #0]
    5f24:	430a      	orrs	r2, r1
    5f26:	801a      	strh	r2, [r3, #0]
	position_x  = itemp;
    5f28:	1c3b      	adds	r3, r7, #0
    5f2a:	330c      	adds	r3, #12
    5f2c:	881a      	ldrh	r2, [r3, #0]
    5f2e:	4b83      	ldr	r3, [pc, #524]	; (613c <AccelProcess+0x268>)
    5f30:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Y_H);
    5f32:	202b      	movs	r0, #43	; 0x2b
    5f34:	4b80      	ldr	r3, [pc, #512]	; (6138 <AccelProcess+0x264>)
    5f36:	4798      	blx	r3
    5f38:	1c03      	adds	r3, r0, #0
    5f3a:	1c1a      	adds	r2, r3, #0
    5f3c:	1c3b      	adds	r3, r7, #0
    5f3e:	330c      	adds	r3, #12
    5f40:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Y_L);
    5f42:	202a      	movs	r0, #42	; 0x2a
    5f44:	4b7c      	ldr	r3, [pc, #496]	; (6138 <AccelProcess+0x264>)
    5f46:	4798      	blx	r3
    5f48:	1c03      	adds	r3, r0, #0
    5f4a:	1c1a      	adds	r2, r3, #0
    5f4c:	1c3b      	adds	r3, r7, #0
    5f4e:	330a      	adds	r3, #10
    5f50:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f52:	1c3b      	adds	r3, r7, #0
    5f54:	330c      	adds	r3, #12
    5f56:	1c3a      	adds	r2, r7, #0
    5f58:	320c      	adds	r2, #12
    5f5a:	8812      	ldrh	r2, [r2, #0]
    5f5c:	0212      	lsls	r2, r2, #8
    5f5e:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	
    5f60:	1c3b      	adds	r3, r7, #0
    5f62:	330c      	adds	r3, #12
    5f64:	1c39      	adds	r1, r7, #0
    5f66:	310c      	adds	r1, #12
    5f68:	1c3a      	adds	r2, r7, #0
    5f6a:	320a      	adds	r2, #10
    5f6c:	8809      	ldrh	r1, [r1, #0]
    5f6e:	8812      	ldrh	r2, [r2, #0]
    5f70:	430a      	orrs	r2, r1
    5f72:	801a      	strh	r2, [r3, #0]
	position_y  = itemp;
    5f74:	1c3b      	adds	r3, r7, #0
    5f76:	330c      	adds	r3, #12
    5f78:	881a      	ldrh	r2, [r3, #0]
    5f7a:	4b71      	ldr	r3, [pc, #452]	; (6140 <AccelProcess+0x26c>)
    5f7c:	801a      	strh	r2, [r3, #0]
	
	itemp = AccelRead(MEMS_OUT_Z_H);
    5f7e:	202d      	movs	r0, #45	; 0x2d
    5f80:	4b6d      	ldr	r3, [pc, #436]	; (6138 <AccelProcess+0x264>)
    5f82:	4798      	blx	r3
    5f84:	1c03      	adds	r3, r0, #0
    5f86:	1c1a      	adds	r2, r3, #0
    5f88:	1c3b      	adds	r3, r7, #0
    5f8a:	330c      	adds	r3, #12
    5f8c:	801a      	strh	r2, [r3, #0]
	itemp2 = AccelRead(MEMS_OUT_Z_L);
    5f8e:	202c      	movs	r0, #44	; 0x2c
    5f90:	4b69      	ldr	r3, [pc, #420]	; (6138 <AccelProcess+0x264>)
    5f92:	4798      	blx	r3
    5f94:	1c03      	adds	r3, r0, #0
    5f96:	1c1a      	adds	r2, r3, #0
    5f98:	1c3b      	adds	r3, r7, #0
    5f9a:	330a      	adds	r3, #10
    5f9c:	801a      	strh	r2, [r3, #0]
	itemp = itemp <<8;
    5f9e:	1c3b      	adds	r3, r7, #0
    5fa0:	330c      	adds	r3, #12
    5fa2:	1c3a      	adds	r2, r7, #0
    5fa4:	320c      	adds	r2, #12
    5fa6:	8812      	ldrh	r2, [r2, #0]
    5fa8:	0212      	lsls	r2, r2, #8
    5faa:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 	 
    5fac:	1c3b      	adds	r3, r7, #0
    5fae:	330c      	adds	r3, #12
    5fb0:	1c39      	adds	r1, r7, #0
    5fb2:	310c      	adds	r1, #12
    5fb4:	1c3a      	adds	r2, r7, #0
    5fb6:	320a      	adds	r2, #10
    5fb8:	8809      	ldrh	r1, [r1, #0]
    5fba:	8812      	ldrh	r2, [r2, #0]
    5fbc:	430a      	orrs	r2, r1
    5fbe:	801a      	strh	r2, [r3, #0]
	position_z  = itemp;
    5fc0:	1c3b      	adds	r3, r7, #0
    5fc2:	330c      	adds	r3, #12
    5fc4:	881a      	ldrh	r2, [r3, #0]
    5fc6:	4b5f      	ldr	r3, [pc, #380]	; (6144 <AccelProcess+0x270>)
    5fc8:	801a      	strh	r2, [r3, #0]
 
	//--------------------------
	// place in buffer 
 	xPositionBuffer[accelerometerOffset]=position_x;
    5fca:	4b5f      	ldr	r3, [pc, #380]	; (6148 <AccelProcess+0x274>)
    5fcc:	781b      	ldrb	r3, [r3, #0]
    5fce:	1c1a      	adds	r2, r3, #0
    5fd0:	4b5a      	ldr	r3, [pc, #360]	; (613c <AccelProcess+0x268>)
    5fd2:	8819      	ldrh	r1, [r3, #0]
    5fd4:	4b5d      	ldr	r3, [pc, #372]	; (614c <AccelProcess+0x278>)
    5fd6:	0052      	lsls	r2, r2, #1
    5fd8:	52d1      	strh	r1, [r2, r3]
	yPositionBuffer[accelerometerOffset]=position_y;
    5fda:	4b5b      	ldr	r3, [pc, #364]	; (6148 <AccelProcess+0x274>)
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	1c1a      	adds	r2, r3, #0
    5fe0:	4b57      	ldr	r3, [pc, #348]	; (6140 <AccelProcess+0x26c>)
    5fe2:	8819      	ldrh	r1, [r3, #0]
    5fe4:	4b5a      	ldr	r3, [pc, #360]	; (6150 <AccelProcess+0x27c>)
    5fe6:	0052      	lsls	r2, r2, #1
    5fe8:	52d1      	strh	r1, [r2, r3]
	zPositionBuffer[accelerometerOffset]=position_z;
    5fea:	4b57      	ldr	r3, [pc, #348]	; (6148 <AccelProcess+0x274>)
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	1c1a      	adds	r2, r3, #0
    5ff0:	4b54      	ldr	r3, [pc, #336]	; (6144 <AccelProcess+0x270>)
    5ff2:	8819      	ldrh	r1, [r3, #0]
    5ff4:	4b57      	ldr	r3, [pc, #348]	; (6154 <AccelProcess+0x280>)
    5ff6:	0052      	lsls	r2, r2, #1
    5ff8:	52d1      	strh	r1, [r2, r3]
	accelerometerOffset++;
    5ffa:	4b53      	ldr	r3, [pc, #332]	; (6148 <AccelProcess+0x274>)
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	3301      	adds	r3, #1
    6000:	b2da      	uxtb	r2, r3
    6002:	4b51      	ldr	r3, [pc, #324]	; (6148 <AccelProcess+0x274>)
    6004:	701a      	strb	r2, [r3, #0]
	if (accelerometerOffset >= MAX_ACCELEROMETER_BUFFER)
    6006:	4b50      	ldr	r3, [pc, #320]	; (6148 <AccelProcess+0x274>)
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	2b13      	cmp	r3, #19
    600c:	d96c      	bls.n	60e8 <AccelProcess+0x214>
	{
	
		accelerometerOffset=0;
    600e:	4b4e      	ldr	r3, [pc, #312]	; (6148 <AccelProcess+0x274>)
    6010:	2200      	movs	r2, #0
    6012:	701a      	strb	r2, [r3, #0]
		acceleromterFirstFill=1; 
    6014:	4b50      	ldr	r3, [pc, #320]	; (6158 <AccelProcess+0x284>)
    6016:	2201      	movs	r2, #1
    6018:	701a      	strb	r2, [r3, #0]
		accelerometerChange = 1; 
    601a:	4b50      	ldr	r3, [pc, #320]	; (615c <AccelProcess+0x288>)
    601c:	2201      	movs	r2, #1
    601e:	701a      	strb	r2, [r3, #0]
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
    6020:	4b4f      	ldr	r3, [pc, #316]	; (6160 <AccelProcess+0x28c>)
    6022:	2200      	movs	r2, #0
    6024:	601a      	str	r2, [r3, #0]
    6026:	4b4e      	ldr	r3, [pc, #312]	; (6160 <AccelProcess+0x28c>)
    6028:	681a      	ldr	r2, [r3, #0]
    602a:	4b4e      	ldr	r3, [pc, #312]	; (6164 <AccelProcess+0x290>)
    602c:	601a      	str	r2, [r3, #0]
    602e:	4b4d      	ldr	r3, [pc, #308]	; (6164 <AccelProcess+0x290>)
    6030:	681a      	ldr	r2, [r3, #0]
    6032:	4b4d      	ldr	r3, [pc, #308]	; (6168 <AccelProcess+0x294>)
    6034:	601a      	str	r2, [r3, #0]
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6036:	1c3b      	adds	r3, r7, #0
    6038:	330f      	adds	r3, #15
    603a:	2200      	movs	r2, #0
    603c:	701a      	strb	r2, [r3, #0]
    603e:	e02a      	b.n	6096 <AccelProcess+0x1c2>
		{
		  sumx += xPositionBuffer[i];
    6040:	1c3b      	adds	r3, r7, #0
    6042:	330f      	adds	r3, #15
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	4b41      	ldr	r3, [pc, #260]	; (614c <AccelProcess+0x278>)
    6048:	0052      	lsls	r2, r2, #1
    604a:	5ad3      	ldrh	r3, [r2, r3]
    604c:	b21a      	sxth	r2, r3
    604e:	4b46      	ldr	r3, [pc, #280]	; (6168 <AccelProcess+0x294>)
    6050:	681b      	ldr	r3, [r3, #0]
    6052:	18d2      	adds	r2, r2, r3
    6054:	4b44      	ldr	r3, [pc, #272]	; (6168 <AccelProcess+0x294>)
    6056:	601a      	str	r2, [r3, #0]
		  sumy += yPositionBuffer[i];
    6058:	1c3b      	adds	r3, r7, #0
    605a:	330f      	adds	r3, #15
    605c:	781a      	ldrb	r2, [r3, #0]
    605e:	4b3c      	ldr	r3, [pc, #240]	; (6150 <AccelProcess+0x27c>)
    6060:	0052      	lsls	r2, r2, #1
    6062:	5ad3      	ldrh	r3, [r2, r3]
    6064:	b21a      	sxth	r2, r3
    6066:	4b3f      	ldr	r3, [pc, #252]	; (6164 <AccelProcess+0x290>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	18d2      	adds	r2, r2, r3
    606c:	4b3d      	ldr	r3, [pc, #244]	; (6164 <AccelProcess+0x290>)
    606e:	601a      	str	r2, [r3, #0]
		  sumz += zPositionBuffer[i];
    6070:	1c3b      	adds	r3, r7, #0
    6072:	330f      	adds	r3, #15
    6074:	781a      	ldrb	r2, [r3, #0]
    6076:	4b37      	ldr	r3, [pc, #220]	; (6154 <AccelProcess+0x280>)
    6078:	0052      	lsls	r2, r2, #1
    607a:	5ad3      	ldrh	r3, [r2, r3]
    607c:	b21a      	sxth	r2, r3
    607e:	4b38      	ldr	r3, [pc, #224]	; (6160 <AccelProcess+0x28c>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	18d2      	adds	r2, r2, r3
    6084:	4b36      	ldr	r3, [pc, #216]	; (6160 <AccelProcess+0x28c>)
    6086:	601a      	str	r2, [r3, #0]
		acceleromterFirstFill=1; 
		accelerometerChange = 1; 
		 //-----------------------------  
		// Average the measurements
		sumx=sumy=sumz=0;
		for(i=0; i<MAX_ACCELEROMETER_BUFFER; i++)
    6088:	1c3b      	adds	r3, r7, #0
    608a:	330f      	adds	r3, #15
    608c:	781a      	ldrb	r2, [r3, #0]
    608e:	1c3b      	adds	r3, r7, #0
    6090:	330f      	adds	r3, #15
    6092:	3201      	adds	r2, #1
    6094:	701a      	strb	r2, [r3, #0]
    6096:	1c3b      	adds	r3, r7, #0
    6098:	330f      	adds	r3, #15
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	2b13      	cmp	r3, #19
    609e:	d9cf      	bls.n	6040 <AccelProcess+0x16c>
		{
		  sumx += xPositionBuffer[i];
		  sumy += yPositionBuffer[i];
		  sumz += zPositionBuffer[i];
		}
		ltemp = sumx/MAX_ACCELEROMETER_BUFFER;
    60a0:	4b31      	ldr	r3, [pc, #196]	; (6168 <AccelProcess+0x294>)
    60a2:	681a      	ldr	r2, [r3, #0]
    60a4:	4b31      	ldr	r3, [pc, #196]	; (616c <AccelProcess+0x298>)
    60a6:	1c10      	adds	r0, r2, #0
    60a8:	2114      	movs	r1, #20
    60aa:	4798      	blx	r3
    60ac:	1c03      	adds	r3, r0, #0
    60ae:	607b      	str	r3, [r7, #4]
		positionXaverage = ltemp;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	b29a      	uxth	r2, r3
    60b4:	4b2e      	ldr	r3, [pc, #184]	; (6170 <AccelProcess+0x29c>)
    60b6:	801a      	strh	r2, [r3, #0]
		ltemp = sumy/MAX_ACCELEROMETER_BUFFER;
    60b8:	4b2a      	ldr	r3, [pc, #168]	; (6164 <AccelProcess+0x290>)
    60ba:	681a      	ldr	r2, [r3, #0]
    60bc:	4b2b      	ldr	r3, [pc, #172]	; (616c <AccelProcess+0x298>)
    60be:	1c10      	adds	r0, r2, #0
    60c0:	2114      	movs	r1, #20
    60c2:	4798      	blx	r3
    60c4:	1c03      	adds	r3, r0, #0
    60c6:	607b      	str	r3, [r7, #4]
		positionYaverage = ltemp;	
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	b29a      	uxth	r2, r3
    60cc:	4b29      	ldr	r3, [pc, #164]	; (6174 <AccelProcess+0x2a0>)
    60ce:	801a      	strh	r2, [r3, #0]
		ltemp = sumz/MAX_ACCELEROMETER_BUFFER;
    60d0:	4b23      	ldr	r3, [pc, #140]	; (6160 <AccelProcess+0x28c>)
    60d2:	681a      	ldr	r2, [r3, #0]
    60d4:	4b25      	ldr	r3, [pc, #148]	; (616c <AccelProcess+0x298>)
    60d6:	1c10      	adds	r0, r2, #0
    60d8:	2114      	movs	r1, #20
    60da:	4798      	blx	r3
    60dc:	1c03      	adds	r3, r0, #0
    60de:	607b      	str	r3, [r7, #4]
		positionZaverage = ltemp;	
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	b29a      	uxth	r2, r3
    60e4:	4b24      	ldr	r3, [pc, #144]	; (6178 <AccelProcess+0x2a4>)
    60e6:	801a      	strh	r2, [r3, #0]
	}
	//-----------------fill decision buffer
	if (accelerometerOffset == 0)
    60e8:	4b17      	ldr	r3, [pc, #92]	; (6148 <AccelProcess+0x274>)
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d117      	bne.n	6120 <AccelProcess+0x24c>
	{
		xDecisionBuffer[xDecisionBufferOffset] = positionXaverage;
    60f0:	4b22      	ldr	r3, [pc, #136]	; (617c <AccelProcess+0x2a8>)
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	1c1a      	adds	r2, r3, #0
    60f6:	4b1e      	ldr	r3, [pc, #120]	; (6170 <AccelProcess+0x29c>)
    60f8:	8819      	ldrh	r1, [r3, #0]
    60fa:	4b21      	ldr	r3, [pc, #132]	; (6180 <AccelProcess+0x2ac>)
    60fc:	0052      	lsls	r2, r2, #1
    60fe:	52d1      	strh	r1, [r2, r3]
		xDecisionBufferOffset++;
    6100:	4b1e      	ldr	r3, [pc, #120]	; (617c <AccelProcess+0x2a8>)
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	3301      	adds	r3, #1
    6106:	b2da      	uxtb	r2, r3
    6108:	4b1c      	ldr	r3, [pc, #112]	; (617c <AccelProcess+0x2a8>)
    610a:	701a      	strb	r2, [r3, #0]
		if (xDecisionBufferOffset >= MAX_DECISION_BUFFER)
    610c:	4b1b      	ldr	r3, [pc, #108]	; (617c <AccelProcess+0x2a8>)
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b04      	cmp	r3, #4
    6112:	d905      	bls.n	6120 <AccelProcess+0x24c>
		{
			xDecisionBufferOffset = 0; 
    6114:	4b19      	ldr	r3, [pc, #100]	; (617c <AccelProcess+0x2a8>)
    6116:	2200      	movs	r2, #0
    6118:	701a      	strb	r2, [r3, #0]
			xDecisionBufferFill=1; 	
    611a:	4b1a      	ldr	r3, [pc, #104]	; (6184 <AccelProcess+0x2b0>)
    611c:	2201      	movs	r2, #1
    611e:	701a      	strb	r2, [r3, #0]
		}
	}
  }
#if BRAKEBOARD  
  if (accelerometerChange != 0)
    6120:	4b0e      	ldr	r3, [pc, #56]	; (615c <AccelProcess+0x288>)
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	d001      	beq.n	612c <AccelProcess+0x258>
  {
	MotorBuildGetAcc();
    6128:	4b17      	ldr	r3, [pc, #92]	; (6188 <AccelProcess+0x2b4>)
    612a:	4798      	blx	r3
  }
#endif  
}
    612c:	46bd      	mov	sp, r7
    612e:	b004      	add	sp, #16
    6130:	bd80      	pop	{r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	000061b1 	.word	0x000061b1
    6138:	00005d5d 	.word	0x00005d5d
    613c:	20000498 	.word	0x20000498
    6140:	2000049a 	.word	0x2000049a
    6144:	2000049c 	.word	0x2000049c
    6148:	20000612 	.word	0x20000612
    614c:	200005ac 	.word	0x200005ac
    6150:	200005dc 	.word	0x200005dc
    6154:	2000061c 	.word	0x2000061c
    6158:	200005da 	.word	0x200005da
    615c:	20000646 	.word	0x20000646
    6160:	200005a8 	.word	0x200005a8
    6164:	200005d4 	.word	0x200005d4
    6168:	20000614 	.word	0x20000614
    616c:	000157b5 	.word	0x000157b5
    6170:	2000049e 	.word	0x2000049e
    6174:	200004a0 	.word	0x200004a0
    6178:	200004a2 	.word	0x200004a2
    617c:	20000604 	.word	0x20000604
    6180:	20000608 	.word	0x20000608
    6184:	20000618 	.word	0x20000618
    6188:	00008eb1 	.word	0x00008eb1

0000618c <AccelWhoAmI>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function will get the 
//============================================================================== 
uint8_t AccelWhoAmI(void)
{
    618c:	b590      	push	{r4, r7, lr}
    618e:	b083      	sub	sp, #12
    6190:	af00      	add	r7, sp, #0
  uint8_t x;
  //-------------------------
  // Get the Status Register
  //-------------------------
  x = AccelRead(0x0f);
    6192:	1dfc      	adds	r4, r7, #7
    6194:	200f      	movs	r0, #15
    6196:	4b05      	ldr	r3, [pc, #20]	; (61ac <AccelWhoAmI+0x20>)
    6198:	4798      	blx	r3
    619a:	1c03      	adds	r3, r0, #0
    619c:	7023      	strb	r3, [r4, #0]

  return x;
    619e:	1dfb      	adds	r3, r7, #7
    61a0:	781b      	ldrb	r3, [r3, #0]
}
    61a2:	1c18      	adds	r0, r3, #0
    61a4:	46bd      	mov	sp, r7
    61a6:	b003      	add	sp, #12
    61a8:	bd90      	pop	{r4, r7, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	00005d5d 	.word	0x00005d5d

000061b0 <AccelDataAvailable>:
//------------------------------------------------------------------------------
// This function handles Check for Accelerometer data. Returns TRUE if data is 
// available (for all 3 axis), FALSE otherwise
//============================================================================== 
uint8_t AccelDataAvailable(void)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	af00      	add	r7, sp, #0
  { 
    return 1;
  }
  return 0;
*/
	return 1;   
    61b4:	2301      	movs	r3, #1
}
    61b6:	1c18      	adds	r0, r3, #0
    61b8:	46bd      	mov	sp, r7
    61ba:	bd80      	pop	{r7, pc}

000061bc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b084      	sub	sp, #16
    61c0:	af00      	add	r7, sp, #0
    61c2:	1c02      	adds	r2, r0, #0
    61c4:	1dfb      	adds	r3, r7, #7
    61c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    61c8:	1c3b      	adds	r3, r7, #0
    61ca:	330f      	adds	r3, #15
    61cc:	1dfa      	adds	r2, r7, #7
    61ce:	7812      	ldrb	r2, [r2, #0]
    61d0:	09d2      	lsrs	r2, r2, #7
    61d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    61d4:	1c3b      	adds	r3, r7, #0
    61d6:	330e      	adds	r3, #14
    61d8:	1dfa      	adds	r2, r7, #7
    61da:	7812      	ldrb	r2, [r2, #0]
    61dc:	0952      	lsrs	r2, r2, #5
    61de:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    61e0:	4b0d      	ldr	r3, [pc, #52]	; (6218 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    61e2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    61e4:	1c3b      	adds	r3, r7, #0
    61e6:	330f      	adds	r3, #15
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d10e      	bne.n	620c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    61ee:	1c3b      	adds	r3, r7, #0
    61f0:	330f      	adds	r3, #15
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	009b      	lsls	r3, r3, #2
    61f6:	2210      	movs	r2, #16
    61f8:	19d2      	adds	r2, r2, r7
    61fa:	18d3      	adds	r3, r2, r3
    61fc:	3b08      	subs	r3, #8
    61fe:	681a      	ldr	r2, [r3, #0]
    6200:	1c3b      	adds	r3, r7, #0
    6202:	330e      	adds	r3, #14
    6204:	781b      	ldrb	r3, [r3, #0]
    6206:	01db      	lsls	r3, r3, #7
    6208:	18d3      	adds	r3, r2, r3
    620a:	e000      	b.n	620e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    620c:	2300      	movs	r3, #0
	}
}
    620e:	1c18      	adds	r0, r3, #0
    6210:	46bd      	mov	sp, r7
    6212:	b004      	add	sp, #16
    6214:	bd80      	pop	{r7, pc}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	41004400 	.word	0x41004400

0000621c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	1c02      	adds	r2, r0, #0
    6224:	1dfb      	adds	r3, r7, #7
    6226:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6228:	1dfb      	adds	r3, r7, #7
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	1c18      	adds	r0, r3, #0
    622e:	4b03      	ldr	r3, [pc, #12]	; (623c <port_get_group_from_gpio_pin+0x20>)
    6230:	4798      	blx	r3
    6232:	1c03      	adds	r3, r0, #0
}
    6234:	1c18      	adds	r0, r3, #0
    6236:	46bd      	mov	sp, r7
    6238:	b002      	add	sp, #8
    623a:	bd80      	pop	{r7, pc}
    623c:	000061bd 	.word	0x000061bd

00006240 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6240:	b580      	push	{r7, lr}
    6242:	b082      	sub	sp, #8
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	2200      	movs	r2, #0
    624c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	2201      	movs	r2, #1
    6252:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2200      	movs	r2, #0
    6258:	709a      	strb	r2, [r3, #2]
}
    625a:	46bd      	mov	sp, r7
    625c:	b002      	add	sp, #8
    625e:	bd80      	pop	{r7, pc}

00006260 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6260:	b580      	push	{r7, lr}
    6262:	b084      	sub	sp, #16
    6264:	af00      	add	r7, sp, #0
    6266:	1c0a      	adds	r2, r1, #0
    6268:	1dfb      	adds	r3, r7, #7
    626a:	1c01      	adds	r1, r0, #0
    626c:	7019      	strb	r1, [r3, #0]
    626e:	1dbb      	adds	r3, r7, #6
    6270:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6272:	1dfb      	adds	r3, r7, #7
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	1c18      	adds	r0, r3, #0
    6278:	4b0d      	ldr	r3, [pc, #52]	; (62b0 <port_pin_set_output_level+0x50>)
    627a:	4798      	blx	r3
    627c:	1c03      	adds	r3, r0, #0
    627e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6280:	1dfb      	adds	r3, r7, #7
    6282:	781a      	ldrb	r2, [r3, #0]
    6284:	231f      	movs	r3, #31
    6286:	4013      	ands	r3, r2
    6288:	2201      	movs	r2, #1
    628a:	1c11      	adds	r1, r2, #0
    628c:	4099      	lsls	r1, r3
    628e:	1c0b      	adds	r3, r1, #0
    6290:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6292:	1dbb      	adds	r3, r7, #6
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	2b00      	cmp	r3, #0
    6298:	d003      	beq.n	62a2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	68ba      	ldr	r2, [r7, #8]
    629e:	619a      	str	r2, [r3, #24]
    62a0:	e002      	b.n	62a8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	615a      	str	r2, [r3, #20]
	}
}
    62a8:	46bd      	mov	sp, r7
    62aa:	b004      	add	sp, #16
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	0000621d 	.word	0x0000621d

000062b4 <BlockingTimer>:
// FUNCTION: BlockingTimer
//------------------------------------------------------------------------------
//  
//==============================================================================
void BlockingTimer(uint16_t count)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c02      	adds	r2, r0, #0
    62bc:	1dbb      	adds	r3, r7, #6
    62be:	801a      	strh	r2, [r3, #0]
	blockingTime = count; 
    62c0:	4b05      	ldr	r3, [pc, #20]	; (62d8 <BlockingTimer+0x24>)
    62c2:	1dba      	adds	r2, r7, #6
    62c4:	8812      	ldrh	r2, [r2, #0]
    62c6:	801a      	strh	r2, [r3, #0]
	while (blockingTime >0);
    62c8:	46c0      	nop			; (mov r8, r8)
    62ca:	4b03      	ldr	r3, [pc, #12]	; (62d8 <BlockingTimer+0x24>)
    62cc:	881b      	ldrh	r3, [r3, #0]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d1fb      	bne.n	62ca <BlockingTimer+0x16>
}
    62d2:	46bd      	mov	sp, r7
    62d4:	b002      	add	sp, #8
    62d6:	bd80      	pop	{r7, pc}
    62d8:	200036fc 	.word	0x200036fc

000062dc <BluetoothWakeUp>:
// FUNCTION: BluetoothWakeUp
//------------------------------------------------------------------------------
//  
//==============================================================================
uint8_t BluetoothWakeUp(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b082      	sub	sp, #8
    62e0:	af00      	add	r7, sp, #0
 
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);	
    62e2:	1d3b      	adds	r3, r7, #4
    62e4:	1c18      	adds	r0, r3, #0
    62e6:	4b1b      	ldr	r3, [pc, #108]	; (6354 <BluetoothWakeUp+0x78>)
    62e8:	4798      	blx	r3
 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62ea:	1d3b      	adds	r3, r7, #4
    62ec:	2201      	movs	r2, #1
    62ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    62f0:	1d3b      	adds	r3, r7, #4
    62f2:	2009      	movs	r0, #9
    62f4:	1c19      	adds	r1, r3, #0
    62f6:	4b18      	ldr	r3, [pc, #96]	; (6358 <BluetoothWakeUp+0x7c>)
    62f8:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    62fa:	2009      	movs	r0, #9
    62fc:	2100      	movs	r1, #0
    62fe:	4b17      	ldr	r3, [pc, #92]	; (635c <BluetoothWakeUp+0x80>)
    6300:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    6302:	1d3b      	adds	r3, r7, #4
    6304:	2008      	movs	r0, #8
    6306:	1c19      	adds	r1, r3, #0
    6308:	4b13      	ldr	r3, [pc, #76]	; (6358 <BluetoothWakeUp+0x7c>)
    630a:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);   
    630c:	2008      	movs	r0, #8
    630e:	2101      	movs	r1, #1
    6310:	4b12      	ldr	r3, [pc, #72]	; (635c <BluetoothWakeUp+0x80>)
    6312:	4798      	blx	r3
	BlockingTimer(40);
    6314:	2028      	movs	r0, #40	; 0x28
    6316:	4b12      	ldr	r3, [pc, #72]	; (6360 <BluetoothWakeUp+0x84>)
    6318:	4798      	blx	r3
	 
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    631a:	2009      	movs	r0, #9
    631c:	2101      	movs	r1, #1
    631e:	4b0f      	ldr	r3, [pc, #60]	; (635c <BluetoothWakeUp+0x80>)
    6320:	4798      	blx	r3
	BlockingTimer(40);
    6322:	2028      	movs	r0, #40	; 0x28
    6324:	4b0e      	ldr	r3, [pc, #56]	; (6360 <BluetoothWakeUp+0x84>)
    6326:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    6328:	2008      	movs	r0, #8
    632a:	2101      	movs	r1, #1
    632c:	4b0b      	ldr	r3, [pc, #44]	; (635c <BluetoothWakeUp+0x80>)
    632e:	4798      	blx	r3
	BlockingTimer(20);
    6330:	2014      	movs	r0, #20
    6332:	4b0b      	ldr	r3, [pc, #44]	; (6360 <BluetoothWakeUp+0x84>)
    6334:	4798      	blx	r3
	bluetoothAwake = 1; 
    6336:	4b0b      	ldr	r3, [pc, #44]	; (6364 <BluetoothWakeUp+0x88>)
    6338:	2201      	movs	r2, #1
    633a:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_SOLID;
    633c:	4b0a      	ldr	r3, [pc, #40]	; (6368 <BluetoothWakeUp+0x8c>)
    633e:	2201      	movs	r2, #1
    6340:	701a      	strb	r2, [r3, #0]
	brakeBiLED = BRAKEBILED_GREENSOLID;
    6342:	4b0a      	ldr	r3, [pc, #40]	; (636c <BluetoothWakeUp+0x90>)
    6344:	2200      	movs	r2, #0
    6346:	701a      	strb	r2, [r3, #0]
	
//while(1)
//{	
	BTReceive();
    6348:	4b09      	ldr	r3, [pc, #36]	; (6370 <BluetoothWakeUp+0x94>)
    634a:	4798      	blx	r3
//    receiveIntercharTimeout = FALSE;        
//    while ((response_received == FALSE)&&(rx_timeout == FALSE)&&(receiveIntercharTimeout == FALSE));   
//}
	 
	
}
    634c:	1c18      	adds	r0, r3, #0
    634e:	46bd      	mov	sp, r7
    6350:	b002      	add	sp, #8
    6352:	bd80      	pop	{r7, pc}
    6354:	00006241 	.word	0x00006241
    6358:	00011cfd 	.word	0x00011cfd
    635c:	00006261 	.word	0x00006261
    6360:	000062b5 	.word	0x000062b5
    6364:	200004a4 	.word	0x200004a4
    6368:	20002eb6 	.word	0x20002eb6
    636c:	20002ee8 	.word	0x20002ee8
    6370:	0000e1d9 	.word	0x0000e1d9

00006374 <BluetoothSleep>:
// FUNCTION: BluetoothSleep
//------------------------------------------------------------------------------
//
//==============================================================================
uint8_t BluetoothSleep(void)
{
    6374:	b580      	push	{r7, lr}
    6376:	b082      	sub	sp, #8
    6378:	af00      	add	r7, sp, #0
	
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    637a:	1d3b      	adds	r3, r7, #4
    637c:	1c18      	adds	r0, r3, #0
    637e:	4b13      	ldr	r3, [pc, #76]	; (63cc <BluetoothSleep+0x58>)
    6380:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6382:	1d3b      	adds	r3, r7, #4
    6384:	2201      	movs	r2, #1
    6386:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    6388:	1d3b      	adds	r3, r7, #4
    638a:	2009      	movs	r0, #9
    638c:	1c19      	adds	r1, r3, #0
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <BluetoothSleep+0x5c>)
    6390:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, false);
    6392:	2009      	movs	r0, #9
    6394:	2100      	movs	r1, #0
    6396:	4b0f      	ldr	r3, [pc, #60]	; (63d4 <BluetoothSleep+0x60>)
    6398:	4798      	blx	r3
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    639a:	1d3b      	adds	r3, r7, #4
    639c:	2008      	movs	r0, #8
    639e:	1c19      	adds	r1, r3, #0
    63a0:	4b0b      	ldr	r3, [pc, #44]	; (63d0 <BluetoothSleep+0x5c>)
    63a2:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_PROG, true);
    63a4:	2008      	movs	r0, #8
    63a6:	2101      	movs	r1, #1
    63a8:	4b0a      	ldr	r3, [pc, #40]	; (63d4 <BluetoothSleep+0x60>)
    63aa:	4798      	blx	r3
	BlockingTimer(40);
    63ac:	2028      	movs	r0, #40	; 0x28
    63ae:	4b0a      	ldr	r3, [pc, #40]	; (63d8 <BluetoothSleep+0x64>)
    63b0:	4798      	blx	r3
	
	bluetoothAwake = 0;
    63b2:	4b0a      	ldr	r3, [pc, #40]	; (63dc <BluetoothSleep+0x68>)
    63b4:	2200      	movs	r2, #0
    63b6:	701a      	strb	r2, [r3, #0]
	 brakeBlueLED = BRAKEBLUELED_OFF;
    63b8:	4b09      	ldr	r3, [pc, #36]	; (63e0 <BluetoothSleep+0x6c>)
    63ba:	2202      	movs	r2, #2
    63bc:	701a      	strb	r2, [r3, #0]
	 brakeBiLED = BRAKEBILED_OFF;
    63be:	4b09      	ldr	r3, [pc, #36]	; (63e4 <BluetoothSleep+0x70>)
    63c0:	2202      	movs	r2, #2
    63c2:	701a      	strb	r2, [r3, #0]
}	
    63c4:	1c18      	adds	r0, r3, #0
    63c6:	46bd      	mov	sp, r7
    63c8:	b002      	add	sp, #8
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00006241 	.word	0x00006241
    63d0:	00011cfd 	.word	0x00011cfd
    63d4:	00006261 	.word	0x00006261
    63d8:	000062b5 	.word	0x000062b5
    63dc:	200004a4 	.word	0x200004a4
    63e0:	20002eb6 	.word	0x20002eb6
    63e4:	20002ee8 	.word	0x20002ee8

000063e8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b082      	sub	sp, #8
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	2200      	movs	r2, #0
    63f4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	2200      	movs	r2, #0
    63fa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	2201      	movs	r2, #1
    6400:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	2201      	movs	r2, #1
    6406:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	2200      	movs	r2, #0
    640c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2202      	movs	r2, #2
    6412:	72da      	strb	r2, [r3, #11]
}
    6414:	46bd      	mov	sp, r7
    6416:	b002      	add	sp, #8
    6418:	bd80      	pop	{r7, pc}
    641a:	46c0      	nop			; (mov r8, r8)

0000641c <MotorFindEncoderMatch>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t MotorFindEncoderMatch(uint16_t matchCurrent)
{
    641c:	b580      	push	{r7, lr}
    641e:	b084      	sub	sp, #16
    6420:	af00      	add	r7, sp, #0
    6422:	1c02      	adds	r2, r0, #0
    6424:	1dbb      	adds	r3, r7, #6
    6426:	801a      	strh	r2, [r3, #0]
	uint16_t countBack,i,newOffset; 
	uint8_t done; 
	
	countBack = 0; 
    6428:	1c3b      	adds	r3, r7, #0
    642a:	330e      	adds	r3, #14
    642c:	2200      	movs	r2, #0
    642e:	801a      	strh	r2, [r3, #0]
	//----------------------------
	// go back from encoderTableOffset and look for first current 
	// less than matchCurrent. 
	// record the encoder count match. 
	//------------------------------
	done = 0;
    6430:	1c3b      	adds	r3, r7, #0
    6432:	3309      	adds	r3, #9
    6434:	2200      	movs	r2, #0
    6436:	701a      	strb	r2, [r3, #0]
	newOffset = encoderTableOffset; 
    6438:	1c3b      	adds	r3, r7, #0
    643a:	330a      	adds	r3, #10
    643c:	4a42      	ldr	r2, [pc, #264]	; (6548 <MotorFindEncoderMatch+0x12c>)
    643e:	8812      	ldrh	r2, [r2, #0]
    6440:	801a      	strh	r2, [r3, #0]
	if (newOffset >0)
    6442:	1c3b      	adds	r3, r7, #0
    6444:	330a      	adds	r3, #10
    6446:	881b      	ldrh	r3, [r3, #0]
    6448:	2b00      	cmp	r3, #0
    644a:	d007      	beq.n	645c <MotorFindEncoderMatch+0x40>
	{
		newOffset--;
    644c:	1c3b      	adds	r3, r7, #0
    644e:	330a      	adds	r3, #10
    6450:	881a      	ldrh	r2, [r3, #0]
    6452:	1c3b      	adds	r3, r7, #0
    6454:	330a      	adds	r3, #10
    6456:	3a01      	subs	r2, #1
    6458:	801a      	strh	r2, [r3, #0]
    645a:	e004      	b.n	6466 <MotorFindEncoderMatch+0x4a>
	}
	else
	{
		newOffset = MAX_BUILDTABLE; 
    645c:	1c3b      	adds	r3, r7, #0
    645e:	330a      	adds	r3, #10
    6460:	2280      	movs	r2, #128	; 0x80
    6462:	00d2      	lsls	r2, r2, #3
    6464:	801a      	strh	r2, [r3, #0]
	}
	i = 0; 
    6466:	1c3b      	adds	r3, r7, #0
    6468:	330c      	adds	r3, #12
    646a:	2200      	movs	r2, #0
    646c:	801a      	strh	r2, [r3, #0]
	if (encoderFillOffset > MAX_BUILDTABLE)
    646e:	4b37      	ldr	r3, [pc, #220]	; (654c <MotorFindEncoderMatch+0x130>)
    6470:	881a      	ldrh	r2, [r3, #0]
    6472:	2380      	movs	r3, #128	; 0x80
    6474:	00db      	lsls	r3, r3, #3
    6476:	429a      	cmp	r2, r3
    6478:	d904      	bls.n	6484 <MotorFindEncoderMatch+0x68>
	{
		encoderFillOffset = MAX_BUILDTABLE;
    647a:	4b34      	ldr	r3, [pc, #208]	; (654c <MotorFindEncoderMatch+0x130>)
    647c:	2280      	movs	r2, #128	; 0x80
    647e:	00d2      	lsls	r2, r2, #3
    6480:	801a      	strh	r2, [r3, #0]
	}
	while ((done==0) && (i<encoderFillOffset))
    6482:	e04d      	b.n	6520 <MotorFindEncoderMatch+0x104>
    6484:	e04c      	b.n	6520 <MotorFindEncoderMatch+0x104>
	{
		if (encoderTable.Current[newOffset] < matchCurrent)
    6486:	1c3b      	adds	r3, r7, #0
    6488:	330a      	adds	r3, #10
    648a:	881a      	ldrh	r2, [r3, #0]
    648c:	4b30      	ldr	r3, [pc, #192]	; (6550 <MotorFindEncoderMatch+0x134>)
    648e:	0052      	lsls	r2, r2, #1
    6490:	5ad3      	ldrh	r3, [r2, r3]
    6492:	1dba      	adds	r2, r7, #6
    6494:	8812      	ldrh	r2, [r2, #0]
    6496:	429a      	cmp	r2, r3
    6498:	d916      	bls.n	64c8 <MotorFindEncoderMatch+0xac>
		{
			done = 1; 
    649a:	1c3b      	adds	r3, r7, #0
    649c:	3309      	adds	r3, #9
    649e:	2201      	movs	r2, #1
    64a0:	701a      	strb	r2, [r3, #0]
    64a2:	1c3b      	adds	r3, r7, #0
    64a4:	330e      	adds	r3, #14
    64a6:	1c3a      	adds	r2, r7, #0
    64a8:	320e      	adds	r2, #14
    64aa:	8812      	ldrh	r2, [r2, #0]
    64ac:	801a      	strh	r2, [r3, #0]
    64ae:	1c3b      	adds	r3, r7, #0
    64b0:	330c      	adds	r3, #12
    64b2:	1c3a      	adds	r2, r7, #0
    64b4:	320c      	adds	r2, #12
    64b6:	8812      	ldrh	r2, [r2, #0]
    64b8:	801a      	strh	r2, [r3, #0]
    64ba:	1c3b      	adds	r3, r7, #0
    64bc:	330a      	adds	r3, #10
    64be:	1c3a      	adds	r2, r7, #0
    64c0:	320a      	adds	r2, #10
    64c2:	8812      	ldrh	r2, [r2, #0]
    64c4:	801a      	strh	r2, [r3, #0]
    64c6:	e02b      	b.n	6520 <MotorFindEncoderMatch+0x104>
		}
		else
		{
			i++;
    64c8:	1c3b      	adds	r3, r7, #0
    64ca:	330c      	adds	r3, #12
    64cc:	881a      	ldrh	r2, [r3, #0]
    64ce:	1c3b      	adds	r3, r7, #0
    64d0:	330c      	adds	r3, #12
    64d2:	3201      	adds	r2, #1
    64d4:	801a      	strh	r2, [r3, #0]
			countBack++;
    64d6:	1c3b      	adds	r3, r7, #0
    64d8:	330e      	adds	r3, #14
    64da:	881a      	ldrh	r2, [r3, #0]
    64dc:	1c3b      	adds	r3, r7, #0
    64de:	330e      	adds	r3, #14
    64e0:	3201      	adds	r2, #1
    64e2:	801a      	strh	r2, [r3, #0]
			if (newOffset >0)
    64e4:	1c3b      	adds	r3, r7, #0
    64e6:	330a      	adds	r3, #10
    64e8:	881b      	ldrh	r3, [r3, #0]
    64ea:	2b00      	cmp	r3, #0
    64ec:	d00d      	beq.n	650a <MotorFindEncoderMatch+0xee>
			{
				newOffset--;
    64ee:	1c3b      	adds	r3, r7, #0
    64f0:	330a      	adds	r3, #10
    64f2:	881a      	ldrh	r2, [r3, #0]
    64f4:	1c3b      	adds	r3, r7, #0
    64f6:	330a      	adds	r3, #10
    64f8:	3a01      	subs	r2, #1
    64fa:	801a      	strh	r2, [r3, #0]
    64fc:	1c3b      	adds	r3, r7, #0
    64fe:	3309      	adds	r3, #9
    6500:	1c3a      	adds	r2, r7, #0
    6502:	3209      	adds	r2, #9
    6504:	7812      	ldrb	r2, [r2, #0]
    6506:	701a      	strb	r2, [r3, #0]
    6508:	e00a      	b.n	6520 <MotorFindEncoderMatch+0x104>
			}
			else
			{
				newOffset = MAX_BUILDTABLE; 
    650a:	1c3b      	adds	r3, r7, #0
    650c:	330a      	adds	r3, #10
    650e:	2280      	movs	r2, #128	; 0x80
    6510:	00d2      	lsls	r2, r2, #3
    6512:	801a      	strh	r2, [r3, #0]
    6514:	1c3b      	adds	r3, r7, #0
    6516:	3309      	adds	r3, #9
    6518:	1c3a      	adds	r2, r7, #0
    651a:	3209      	adds	r2, #9
    651c:	7812      	ldrb	r2, [r2, #0]
    651e:	701a      	strb	r2, [r3, #0]
	i = 0; 
	if (encoderFillOffset > MAX_BUILDTABLE)
	{
		encoderFillOffset = MAX_BUILDTABLE;
	}
	while ((done==0) && (i<encoderFillOffset))
    6520:	1c3b      	adds	r3, r7, #0
    6522:	3309      	adds	r3, #9
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	2b00      	cmp	r3, #0
    6528:	d106      	bne.n	6538 <MotorFindEncoderMatch+0x11c>
    652a:	4b08      	ldr	r3, [pc, #32]	; (654c <MotorFindEncoderMatch+0x130>)
    652c:	881b      	ldrh	r3, [r3, #0]
    652e:	1c3a      	adds	r2, r7, #0
    6530:	320c      	adds	r2, #12
    6532:	8812      	ldrh	r2, [r2, #0]
    6534:	429a      	cmp	r2, r3
    6536:	d3a6      	bcc.n	6486 <MotorFindEncoderMatch+0x6a>
			{
				newOffset = MAX_BUILDTABLE; 
			}			
		}
	}
	return countBack; 
    6538:	1c3b      	adds	r3, r7, #0
    653a:	330e      	adds	r3, #14
    653c:	881b      	ldrh	r3, [r3, #0]
}
    653e:	1c18      	adds	r0, r3, #0
    6540:	46bd      	mov	sp, r7
    6542:	b004      	add	sp, #16
    6544:	bd80      	pop	{r7, pc}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	20001e9e 	.word	0x20001e9e
    654c:	200004a6 	.word	0x200004a6
    6550:	20001ea0 	.word	0x20001ea0

00006554 <ConfigureEncoder>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 void ConfigureEncoder(void)
 {
    6554:	b580      	push	{r7, lr}
    6556:	b084      	sub	sp, #16
    6558:	af00      	add	r7, sp, #0
	 struct extint_chan_conf config_extint_chan;
	 extint_chan_get_config_defaults(&config_extint_chan);
    655a:	1d3b      	adds	r3, r7, #4
    655c:	1c18      	adds	r0, r3, #0
    655e:	4b0b      	ldr	r3, [pc, #44]	; (658c <ConfigureEncoder+0x38>)
    6560:	4798      	blx	r3
	 config_extint_chan.gpio_pin = PIN_PB11A_EIC_EXTINT11;
    6562:	1d3b      	adds	r3, r7, #4
    6564:	222b      	movs	r2, #43	; 0x2b
    6566:	601a      	str	r2, [r3, #0]
	 config_extint_chan.gpio_pin_mux = MUX_PB11A_EIC_EXTINT11;
    6568:	1d3b      	adds	r3, r7, #4
    656a:	2200      	movs	r2, #0
    656c:	605a      	str	r2, [r3, #4]
	 config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    656e:	1d3b      	adds	r3, r7, #4
    6570:	2200      	movs	r2, #0
    6572:	721a      	strb	r2, [r3, #8]
	 config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6574:	1d3b      	adds	r3, r7, #4
    6576:	2203      	movs	r2, #3
    6578:	72da      	strb	r2, [r3, #11]
	 extint_chan_set_config(11, &config_extint_chan);
    657a:	1d3b      	adds	r3, r7, #4
    657c:	200b      	movs	r0, #11
    657e:	1c19      	adds	r1, r3, #0
    6580:	4b03      	ldr	r3, [pc, #12]	; (6590 <ConfigureEncoder+0x3c>)
    6582:	4798      	blx	r3
 }
    6584:	46bd      	mov	sp, r7
    6586:	b004      	add	sp, #16
    6588:	bd80      	pop	{r7, pc}
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	000063e9 	.word	0x000063e9
    6590:	0000406d 	.word	0x0000406d

00006594 <ConfigureEncoderCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureEncoderCallbacks(void)
{
    6594:	b580      	push	{r7, lr}
    6596:	af00      	add	r7, sp, #0
	extint_register_callback(EncoderCallback,11,EXTINT_CALLBACK_TYPE_DETECT);
    6598:	4b05      	ldr	r3, [pc, #20]	; (65b0 <ConfigureEncoderCallbacks+0x1c>)
    659a:	1c18      	adds	r0, r3, #0
    659c:	210b      	movs	r1, #11
    659e:	2200      	movs	r2, #0
    65a0:	4b04      	ldr	r3, [pc, #16]	; (65b4 <ConfigureEncoderCallbacks+0x20>)
    65a2:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    65a4:	200b      	movs	r0, #11
    65a6:	2100      	movs	r1, #0
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <ConfigureEncoderCallbacks+0x24>)
    65aa:	4798      	blx	r3
} 
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	000065bd 	.word	0x000065bd
    65b4:	00004239 	.word	0x00004239
    65b8:	00004295 	.word	0x00004295

000065bc <EncoderCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void EncoderCallback(void)
{
    65bc:	b598      	push	{r3, r4, r7, lr}
    65be:	af00      	add	r7, sp, #0
	encoderCount++;
    65c0:	4b2d      	ldr	r3, [pc, #180]	; (6678 <EncoderCallback+0xbc>)
    65c2:	881b      	ldrh	r3, [r3, #0]
    65c4:	3301      	adds	r3, #1
    65c6:	b29a      	uxth	r2, r3
    65c8:	4b2b      	ldr	r3, [pc, #172]	; (6678 <EncoderCallback+0xbc>)
    65ca:	801a      	strh	r2, [r3, #0]
	if (action == EXTENDING)
    65cc:	4b2b      	ldr	r3, [pc, #172]	; (667c <EncoderCallback+0xc0>)
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	2b01      	cmp	r3, #1
    65d2:	d124      	bne.n	661e <EncoderCallback+0x62>
	{
		if (encoderTableOffset >= MAX_BUILDTABLE)
    65d4:	4b2a      	ldr	r3, [pc, #168]	; (6680 <EncoderCallback+0xc4>)
    65d6:	881a      	ldrh	r2, [r3, #0]
    65d8:	4b2a      	ldr	r3, [pc, #168]	; (6684 <EncoderCallback+0xc8>)
    65da:	429a      	cmp	r2, r3
    65dc:	d905      	bls.n	65ea <EncoderCallback+0x2e>
		{
			encoderTableOffset = 0;
    65de:	4b28      	ldr	r3, [pc, #160]	; (6680 <EncoderCallback+0xc4>)
    65e0:	2200      	movs	r2, #0
    65e2:	801a      	strh	r2, [r3, #0]
			encoderFlip = 1; 
    65e4:	4b28      	ldr	r3, [pc, #160]	; (6688 <EncoderCallback+0xcc>)
    65e6:	2201      	movs	r2, #1
    65e8:	701a      	strb	r2, [r3, #0]
		}
		encoderTable.Current[encoderTableOffset] = ADCGetReading(ADC_INPUT_CURRENT);
    65ea:	4b25      	ldr	r3, [pc, #148]	; (6680 <EncoderCallback+0xc4>)
    65ec:	881b      	ldrh	r3, [r3, #0]
    65ee:	1c1c      	adds	r4, r3, #0
    65f0:	2001      	movs	r0, #1
    65f2:	4b26      	ldr	r3, [pc, #152]	; (668c <EncoderCallback+0xd0>)
    65f4:	4798      	blx	r3
    65f6:	1c03      	adds	r3, r0, #0
    65f8:	1c19      	adds	r1, r3, #0
    65fa:	4b25      	ldr	r3, [pc, #148]	; (6690 <EncoderCallback+0xd4>)
    65fc:	0062      	lsls	r2, r4, #1
    65fe:	52d1      	strh	r1, [r2, r3]
		encoderTable.EncoderCount[encoderTableOffset++] = encoderCount;
    6600:	4b1f      	ldr	r3, [pc, #124]	; (6680 <EncoderCallback+0xc4>)
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	1c5a      	adds	r2, r3, #1
    6606:	b291      	uxth	r1, r2
    6608:	4a1d      	ldr	r2, [pc, #116]	; (6680 <EncoderCallback+0xc4>)
    660a:	8011      	strh	r1, [r2, #0]
    660c:	1c1a      	adds	r2, r3, #0
    660e:	4b1a      	ldr	r3, [pc, #104]	; (6678 <EncoderCallback+0xbc>)
    6610:	8819      	ldrh	r1, [r3, #0]
    6612:	4b1f      	ldr	r3, [pc, #124]	; (6690 <EncoderCallback+0xd4>)
    6614:	2080      	movs	r0, #128	; 0x80
    6616:	00c0      	lsls	r0, r0, #3
    6618:	1812      	adds	r2, r2, r0
    661a:	0052      	lsls	r2, r2, #1
    661c:	52d1      	strh	r1, [r2, r3]
	}
	if (action == EXTENDING_BY_ENCODER)
    661e:	4b17      	ldr	r3, [pc, #92]	; (667c <EncoderCallback+0xc0>)
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	2b04      	cmp	r3, #4
    6624:	d110      	bne.n	6648 <EncoderCallback+0x8c>
	{
		if (encoderCountBack >0)
    6626:	4b1b      	ldr	r3, [pc, #108]	; (6694 <EncoderCallback+0xd8>)
    6628:	881b      	ldrh	r3, [r3, #0]
    662a:	2b00      	cmp	r3, #0
    662c:	d00c      	beq.n	6648 <EncoderCallback+0x8c>
		{
			encoderCountBack--;
    662e:	4b19      	ldr	r3, [pc, #100]	; (6694 <EncoderCallback+0xd8>)
    6630:	881b      	ldrh	r3, [r3, #0]
    6632:	3b01      	subs	r3, #1
    6634:	b29a      	uxth	r2, r3
    6636:	4b17      	ldr	r3, [pc, #92]	; (6694 <EncoderCallback+0xd8>)
    6638:	801a      	strh	r2, [r3, #0]
			if (encoderCountBack == 0)
    663a:	4b16      	ldr	r3, [pc, #88]	; (6694 <EncoderCallback+0xd8>)
    663c:	881b      	ldrh	r3, [r3, #0]
    663e:	2b00      	cmp	r3, #0
    6640:	d102      	bne.n	6648 <EncoderCallback+0x8c>
			{
				MotorOff(0);
    6642:	2000      	movs	r0, #0
    6644:	4b14      	ldr	r3, [pc, #80]	; (6698 <EncoderCallback+0xdc>)
    6646:	4798      	blx	r3
			}
		}
	}	
	if (action == RETRACTING_BY_ENCODER)
    6648:	4b0c      	ldr	r3, [pc, #48]	; (667c <EncoderCallback+0xc0>)
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	2b03      	cmp	r3, #3
    664e:	d110      	bne.n	6672 <EncoderCallback+0xb6>
	{
		if (encoderCountBack >0)
    6650:	4b10      	ldr	r3, [pc, #64]	; (6694 <EncoderCallback+0xd8>)
    6652:	881b      	ldrh	r3, [r3, #0]
    6654:	2b00      	cmp	r3, #0
    6656:	d00c      	beq.n	6672 <EncoderCallback+0xb6>
		{
			encoderCountBack--;
    6658:	4b0e      	ldr	r3, [pc, #56]	; (6694 <EncoderCallback+0xd8>)
    665a:	881b      	ldrh	r3, [r3, #0]
    665c:	3b01      	subs	r3, #1
    665e:	b29a      	uxth	r2, r3
    6660:	4b0c      	ldr	r3, [pc, #48]	; (6694 <EncoderCallback+0xd8>)
    6662:	801a      	strh	r2, [r3, #0]
			if (encoderCountBack == 0)
    6664:	4b0b      	ldr	r3, [pc, #44]	; (6694 <EncoderCallback+0xd8>)
    6666:	881b      	ldrh	r3, [r3, #0]
    6668:	2b00      	cmp	r3, #0
    666a:	d102      	bne.n	6672 <EncoderCallback+0xb6>
			{
				MotorOff(0);
    666c:	2000      	movs	r0, #0
    666e:	4b0a      	ldr	r3, [pc, #40]	; (6698 <EncoderCallback+0xdc>)
    6670:	4798      	blx	r3
			}
		}
	}	
}
    6672:	46bd      	mov	sp, r7
    6674:	bd98      	pop	{r3, r4, r7, pc}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	200004a8 	.word	0x200004a8
    667c:	200004ae 	.word	0x200004ae
    6680:	20001e9e 	.word	0x20001e9e
    6684:	000003ff 	.word	0x000003ff
    6688:	200004aa 	.word	0x200004aa
    668c:	0000b409 	.word	0x0000b409
    6690:	20001ea0 	.word	0x20001ea0
    6694:	20002ee2 	.word	0x20002ee2
    6698:	00009ac9 	.word	0x00009ac9

0000669c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    669c:	b580      	push	{r7, lr}
    669e:	b084      	sub	sp, #16
    66a0:	af00      	add	r7, sp, #0
    66a2:	1c02      	adds	r2, r0, #0
    66a4:	1dfb      	adds	r3, r7, #7
    66a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    66a8:	1c3b      	adds	r3, r7, #0
    66aa:	330f      	adds	r3, #15
    66ac:	1dfa      	adds	r2, r7, #7
    66ae:	7812      	ldrb	r2, [r2, #0]
    66b0:	09d2      	lsrs	r2, r2, #7
    66b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    66b4:	1c3b      	adds	r3, r7, #0
    66b6:	330e      	adds	r3, #14
    66b8:	1dfa      	adds	r2, r7, #7
    66ba:	7812      	ldrb	r2, [r2, #0]
    66bc:	0952      	lsrs	r2, r2, #5
    66be:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    66c0:	4b0d      	ldr	r3, [pc, #52]	; (66f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    66c2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    66c4:	1c3b      	adds	r3, r7, #0
    66c6:	330f      	adds	r3, #15
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d10e      	bne.n	66ec <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    66ce:	1c3b      	adds	r3, r7, #0
    66d0:	330f      	adds	r3, #15
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	009b      	lsls	r3, r3, #2
    66d6:	2210      	movs	r2, #16
    66d8:	19d2      	adds	r2, r2, r7
    66da:	18d3      	adds	r3, r2, r3
    66dc:	3b08      	subs	r3, #8
    66de:	681a      	ldr	r2, [r3, #0]
    66e0:	1c3b      	adds	r3, r7, #0
    66e2:	330e      	adds	r3, #14
    66e4:	781b      	ldrb	r3, [r3, #0]
    66e6:	01db      	lsls	r3, r3, #7
    66e8:	18d3      	adds	r3, r2, r3
    66ea:	e000      	b.n	66ee <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    66ec:	2300      	movs	r3, #0
	}
}
    66ee:	1c18      	adds	r0, r3, #0
    66f0:	46bd      	mov	sp, r7
    66f2:	b004      	add	sp, #16
    66f4:	bd80      	pop	{r7, pc}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	41004400 	.word	0x41004400

000066fc <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    6700:	4b03      	ldr	r3, [pc, #12]	; (6710 <system_interrupt_enable_global+0x14>)
    6702:	2201      	movs	r2, #1
    6704:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    6706:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    670a:	b662      	cpsie	i
}
    670c:	46bd      	mov	sp, r7
    670e:	bd80      	pop	{r7, pc}
    6710:	20000044 	.word	0x20000044

00006714 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6714:	b580      	push	{r7, lr}
    6716:	b082      	sub	sp, #8
    6718:	af00      	add	r7, sp, #0
    671a:	1c02      	adds	r2, r0, #0
    671c:	1dfb      	adds	r3, r7, #7
    671e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6720:	1dfb      	adds	r3, r7, #7
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	1c18      	adds	r0, r3, #0
    6726:	4b03      	ldr	r3, [pc, #12]	; (6734 <port_get_group_from_gpio_pin+0x20>)
    6728:	4798      	blx	r3
    672a:	1c03      	adds	r3, r0, #0
}
    672c:	1c18      	adds	r0, r3, #0
    672e:	46bd      	mov	sp, r7
    6730:	b002      	add	sp, #8
    6732:	bd80      	pop	{r7, pc}
    6734:	0000669d 	.word	0x0000669d

00006738 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    6738:	b580      	push	{r7, lr}
    673a:	b082      	sub	sp, #8
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	2200      	movs	r2, #0
    6744:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	2201      	movs	r2, #1
    674a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	2200      	movs	r2, #0
    6750:	709a      	strb	r2, [r3, #2]
}
    6752:	46bd      	mov	sp, r7
    6754:	b002      	add	sp, #8
    6756:	bd80      	pop	{r7, pc}

00006758 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    6758:	b580      	push	{r7, lr}
    675a:	b084      	sub	sp, #16
    675c:	af00      	add	r7, sp, #0
    675e:	1c02      	adds	r2, r0, #0
    6760:	1dfb      	adds	r3, r7, #7
    6762:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6764:	1dfb      	adds	r3, r7, #7
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	1c18      	adds	r0, r3, #0
    676a:	4b0c      	ldr	r3, [pc, #48]	; (679c <port_pin_get_input_level+0x44>)
    676c:	4798      	blx	r3
    676e:	1c03      	adds	r3, r0, #0
    6770:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6772:	1dfb      	adds	r3, r7, #7
    6774:	781a      	ldrb	r2, [r3, #0]
    6776:	231f      	movs	r3, #31
    6778:	4013      	ands	r3, r2
    677a:	2201      	movs	r2, #1
    677c:	1c11      	adds	r1, r2, #0
    677e:	4099      	lsls	r1, r3
    6780:	1c0b      	adds	r3, r1, #0
    6782:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    6784:	68fb      	ldr	r3, [r7, #12]
    6786:	6a1b      	ldr	r3, [r3, #32]
    6788:	68ba      	ldr	r2, [r7, #8]
    678a:	4013      	ands	r3, r2
    678c:	1e5a      	subs	r2, r3, #1
    678e:	4193      	sbcs	r3, r2
    6790:	b2db      	uxtb	r3, r3
}
    6792:	1c18      	adds	r0, r3, #0
    6794:	46bd      	mov	sp, r7
    6796:	b004      	add	sp, #16
    6798:	bd80      	pop	{r7, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	00006715 	.word	0x00006715

000067a0 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    67a0:	b580      	push	{r7, lr}
    67a2:	b084      	sub	sp, #16
    67a4:	af00      	add	r7, sp, #0
    67a6:	1c0a      	adds	r2, r1, #0
    67a8:	1dfb      	adds	r3, r7, #7
    67aa:	1c01      	adds	r1, r0, #0
    67ac:	7019      	strb	r1, [r3, #0]
    67ae:	1dbb      	adds	r3, r7, #6
    67b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    67b2:	1dfb      	adds	r3, r7, #7
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	1c18      	adds	r0, r3, #0
    67b8:	4b0d      	ldr	r3, [pc, #52]	; (67f0 <port_pin_set_output_level+0x50>)
    67ba:	4798      	blx	r3
    67bc:	1c03      	adds	r3, r0, #0
    67be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    67c0:	1dfb      	adds	r3, r7, #7
    67c2:	781a      	ldrb	r2, [r3, #0]
    67c4:	231f      	movs	r3, #31
    67c6:	4013      	ands	r3, r2
    67c8:	2201      	movs	r2, #1
    67ca:	1c11      	adds	r1, r2, #0
    67cc:	4099      	lsls	r1, r3
    67ce:	1c0b      	adds	r3, r1, #0
    67d0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    67d2:	1dbb      	adds	r3, r7, #6
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d003      	beq.n	67e2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    67da:	68fb      	ldr	r3, [r7, #12]
    67dc:	68ba      	ldr	r2, [r7, #8]
    67de:	619a      	str	r2, [r3, #24]
    67e0:	e002      	b.n	67e8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    67e2:	68fb      	ldr	r3, [r7, #12]
    67e4:	68ba      	ldr	r2, [r7, #8]
    67e6:	615a      	str	r2, [r3, #20]
	}
}
    67e8:	46bd      	mov	sp, r7
    67ea:	b004      	add	sp, #16
    67ec:	bd80      	pop	{r7, pc}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	00006715 	.word	0x00006715

000067f4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	2200      	movs	r2, #0
    6800:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    6802:	687b      	ldr	r3, [r7, #4]
    6804:	2200      	movs	r2, #0
    6806:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	2201      	movs	r2, #1
    680c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	2201      	movs	r2, #1
    6812:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	2200      	movs	r2, #0
    6818:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	2202      	movs	r2, #2
    681e:	72da      	strb	r2, [r3, #11]
}
    6820:	46bd      	mov	sp, r7
    6822:	b002      	add	sp, #8
    6824:	bd80      	pop	{r7, pc}
    6826:	46c0      	nop			; (mov r8, r8)

00006828 <BrakeHoldOff>:
// ---------------------------GLOBAL FUNCTIONS ----------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
uint16_t testValue = 0; 

void BrakeHoldOff(uint16_t howLong)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	1c02      	adds	r2, r0, #0
    6830:	1dbb      	adds	r3, r7, #6
    6832:	801a      	strh	r2, [r3, #0]
	brakeHoldOffTime = howLong; 
    6834:	4b05      	ldr	r3, [pc, #20]	; (684c <BrakeHoldOff+0x24>)
    6836:	1dba      	adds	r2, r7, #6
    6838:	8812      	ldrh	r2, [r2, #0]
    683a:	801a      	strh	r2, [r3, #0]
	while (brakeHoldOffTime >0)
    683c:	46c0      	nop			; (mov r8, r8)
    683e:	4b03      	ldr	r3, [pc, #12]	; (684c <BrakeHoldOff+0x24>)
    6840:	881b      	ldrh	r3, [r3, #0]
    6842:	2b00      	cmp	r3, #0
    6844:	d1fb      	bne.n	683e <BrakeHoldOff+0x16>
	{
		
	}	
}
    6846:	46bd      	mov	sp, r7
    6848:	b002      	add	sp, #8
    684a:	bd80      	pop	{r7, pc}
    684c:	200036c0 	.word	0x200036c0

00006850 <LoadCell>:


uint16_t LoadCell(uint8_t whichState)
{
    6850:	b590      	push	{r4, r7, lr}
    6852:	b085      	sub	sp, #20
    6854:	af00      	add	r7, sp, #0
    6856:	1c02      	adds	r2, r0, #0
    6858:	1dfb      	adds	r3, r7, #7
    685a:	701a      	strb	r2, [r3, #0]
	uint16_t value,itemp; 
	value = 0; 
    685c:	1c3b      	adds	r3, r7, #0
    685e:	330e      	adds	r3, #14
    6860:	2200      	movs	r2, #0
    6862:	801a      	strh	r2, [r3, #0]
	
	itemp = ADCGetReading(ADC_INPUT_FSR);	
    6864:	1c3c      	adds	r4, r7, #0
    6866:	340c      	adds	r4, #12
    6868:	2002      	movs	r0, #2
    686a:	4b21      	ldr	r3, [pc, #132]	; (68f0 <LoadCell+0xa0>)
    686c:	4798      	blx	r3
    686e:	1c03      	adds	r3, r0, #0
    6870:	8023      	strh	r3, [r4, #0]
	if ((loadState != whichState)||(itemp<0x60))
    6872:	4b20      	ldr	r3, [pc, #128]	; (68f4 <LoadCell+0xa4>)
    6874:	781b      	ldrb	r3, [r3, #0]
    6876:	1dfa      	adds	r2, r7, #7
    6878:	7812      	ldrb	r2, [r2, #0]
    687a:	429a      	cmp	r2, r3
    687c:	d104      	bne.n	6888 <LoadCell+0x38>
    687e:	1c3b      	adds	r3, r7, #0
    6880:	330c      	adds	r3, #12
    6882:	881b      	ldrh	r3, [r3, #0]
    6884:	2b5f      	cmp	r3, #95	; 0x5f
    6886:	d821      	bhi.n	68cc <LoadCell+0x7c>
	{
		//----------------------
		// start the time to average over. 
		switch (whichState)
    6888:	1dfb      	adds	r3, r7, #7
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	2b09      	cmp	r3, #9
    688e:	d014      	beq.n	68ba <LoadCell+0x6a>
    6890:	dc02      	bgt.n	6898 <LoadCell+0x48>
    6892:	2b04      	cmp	r3, #4
    6894:	d005      	beq.n	68a2 <LoadCell+0x52>
    6896:	e015      	b.n	68c4 <LoadCell+0x74>
    6898:	2b0b      	cmp	r3, #11
    689a:	d00a      	beq.n	68b2 <LoadCell+0x62>
    689c:	2b22      	cmp	r3, #34	; 0x22
    689e:	d004      	beq.n	68aa <LoadCell+0x5a>
    68a0:	e010      	b.n	68c4 <LoadCell+0x74>
		{
			case BRAKESTATE_WAITONSETUP:
			{
				loadTime = 100;
    68a2:	4b15      	ldr	r3, [pc, #84]	; (68f8 <LoadCell+0xa8>)
    68a4:	2264      	movs	r2, #100	; 0x64
    68a6:	801a      	strh	r2, [r3, #0]
				break;
    68a8:	e00c      	b.n	68c4 <LoadCell+0x74>
			}	
			case BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP:
			{
				loadTime = 100;
    68aa:	4b13      	ldr	r3, [pc, #76]	; (68f8 <LoadCell+0xa8>)
    68ac:	2264      	movs	r2, #100	; 0x64
    68ae:	801a      	strh	r2, [r3, #0]
				break;
    68b0:	e008      	b.n	68c4 <LoadCell+0x74>
			}	
			case BRAKESTATE_HOLDOFF_ACTIVE:
			{
				loadTime = 100;
    68b2:	4b11      	ldr	r3, [pc, #68]	; (68f8 <LoadCell+0xa8>)
    68b4:	2264      	movs	r2, #100	; 0x64
    68b6:	801a      	strh	r2, [r3, #0]
				break;
    68b8:	e004      	b.n	68c4 <LoadCell+0x74>
			}				
			case BRAKESTATE_ACTIVE:
			{
				loadTime = 500;  //01_28  was 100 
    68ba:	4b0f      	ldr	r3, [pc, #60]	; (68f8 <LoadCell+0xa8>)
    68bc:	22fa      	movs	r2, #250	; 0xfa
    68be:	0052      	lsls	r2, r2, #1
    68c0:	801a      	strh	r2, [r3, #0]
				break;
    68c2:	46c0      	nop			; (mov r8, r8)
			}							
		}
		loadState = whichState; 
    68c4:	4b0b      	ldr	r3, [pc, #44]	; (68f4 <LoadCell+0xa4>)
    68c6:	1dfa      	adds	r2, r7, #7
    68c8:	7812      	ldrb	r2, [r2, #0]
    68ca:	701a      	strb	r2, [r3, #0]
	}
	if (loadTime == 0)
    68cc:	4b0a      	ldr	r3, [pc, #40]	; (68f8 <LoadCell+0xa8>)
    68ce:	881b      	ldrh	r3, [r3, #0]
    68d0:	2b00      	cmp	r3, #0
    68d2:	d105      	bne.n	68e0 <LoadCell+0x90>
	{
		value = itemp;
    68d4:	1c3b      	adds	r3, r7, #0
    68d6:	330e      	adds	r3, #14
    68d8:	1c3a      	adds	r2, r7, #0
    68da:	320c      	adds	r2, #12
    68dc:	8812      	ldrh	r2, [r2, #0]
    68de:	801a      	strh	r2, [r3, #0]
//V01.30	if (value >4000)
//V01.30	{
//V01.30		value = 0; 
//V01.30	}
// testing only 	value = testValue; 
	return value;
    68e0:	1c3b      	adds	r3, r7, #0
    68e2:	330e      	adds	r3, #14
    68e4:	881b      	ldrh	r3, [r3, #0]
}
    68e6:	1c18      	adds	r0, r3, #0
    68e8:	46bd      	mov	sp, r7
    68ea:	b005      	add	sp, #20
    68ec:	bd90      	pop	{r4, r7, pc}
    68ee:	46c0      	nop			; (mov r8, r8)
    68f0:	0000b409 	.word	0x0000b409
    68f4:	200004b3 	.word	0x200004b3
    68f8:	200004b4 	.word	0x200004b4

000068fc <BrakeInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeInit(void)
{
    68fc:	b580      	push	{r7, lr}
    68fe:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6900:	4b12      	ldr	r3, [pc, #72]	; (694c <BrakeInit+0x50>)
    6902:	2202      	movs	r2, #2
    6904:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    6906:	4b12      	ldr	r3, [pc, #72]	; (6950 <BrakeInit+0x54>)
    6908:	2202      	movs	r2, #2
    690a:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF; 
    690c:	4b11      	ldr	r3, [pc, #68]	; (6954 <BrakeInit+0x58>)
    690e:	2201      	movs	r2, #1
    6910:	701a      	strb	r2, [r3, #0]
	brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    6912:	4b11      	ldr	r3, [pc, #68]	; (6958 <BrakeInit+0x5c>)
    6914:	791b      	ldrb	r3, [r3, #4]
    6916:	2204      	movs	r2, #4
    6918:	4313      	orrs	r3, r2
    691a:	b2da      	uxtb	r2, r3
    691c:	4b0e      	ldr	r3, [pc, #56]	; (6958 <BrakeInit+0x5c>)
    691e:	711a      	strb	r2, [r3, #4]
	brakeState = BRAKESTATE_POWERINGUP; 
    6920:	4b0e      	ldr	r3, [pc, #56]	; (695c <BrakeInit+0x60>)
    6922:	2202      	movs	r2, #2
    6924:	701a      	strb	r2, [r3, #0]
	table0.Item.MaxForce = 5; 
    6926:	4b0e      	ldr	r3, [pc, #56]	; (6960 <BrakeInit+0x64>)
    6928:	2205      	movs	r2, #5
    692a:	709a      	strb	r2, [r3, #2]
	BrakeBoardStateMachineTask();	
    692c:	4b0d      	ldr	r3, [pc, #52]	; (6964 <BrakeInit+0x68>)
    692e:	4798      	blx	r3
	gPrime = 0; 
    6930:	4b0d      	ldr	r3, [pc, #52]	; (6968 <BrakeInit+0x6c>)
    6932:	2200      	movs	r2, #0
    6934:	801a      	strh	r2, [r3, #0]
	//------------------------
//V01_11	poweredUp = 1;
//V01_11	brakeState = BRAKESTATE_RESET;
	poweredUp = 0;
    6936:	4b0d      	ldr	r3, [pc, #52]	; (696c <BrakeInit+0x70>)
    6938:	2200      	movs	r2, #0
    693a:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_POWERINGUP;	
    693c:	4b07      	ldr	r3, [pc, #28]	; (695c <BrakeInit+0x60>)
    693e:	2202      	movs	r2, #2
    6940:	701a      	strb	r2, [r3, #0]
	
	BrakeBoardStateMachineTask();	
    6942:	4b08      	ldr	r3, [pc, #32]	; (6964 <BrakeInit+0x68>)
    6944:	4798      	blx	r3
}
    6946:	46bd      	mov	sp, r7
    6948:	bd80      	pop	{r7, pc}
    694a:	46c0      	nop			; (mov r8, r8)
    694c:	20002ee8 	.word	0x20002ee8
    6950:	20002eb6 	.word	0x20002eb6
    6954:	20002eb0 	.word	0x20002eb0
    6958:	20003694 	.word	0x20003694
    695c:	20002ebf 	.word	0x20002ebf
    6960:	20002fb8 	.word	0x20002fb8
    6964:	00006ec9 	.word	0x00006ec9
    6968:	20002ee6 	.word	0x20002ee6
    696c:	200036b5 	.word	0x200036b5

00006970 <BrakeEnterIdleSleepMode>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeEnterIdleSleepMode(void)
{
    6970:	b580      	push	{r7, lr}
    6972:	af00      	add	r7, sp, #0
	brakeBiLED = BRAKEBILED_OFF;
    6974:	4b06      	ldr	r3, [pc, #24]	; (6990 <BrakeEnterIdleSleepMode+0x20>)
    6976:	2202      	movs	r2, #2
    6978:	701a      	strb	r2, [r3, #0]
	brakeBlueLED = BRAKEBLUELED_OFF;
    697a:	4b06      	ldr	r3, [pc, #24]	; (6994 <BrakeEnterIdleSleepMode+0x24>)
    697c:	2202      	movs	r2, #2
    697e:	701a      	strb	r2, [r3, #0]
	brakeRedLED = BRAKEREDLED_OFF;
    6980:	4b05      	ldr	r3, [pc, #20]	; (6998 <BrakeEnterIdleSleepMode+0x28>)
    6982:	2201      	movs	r2, #1
    6984:	701a      	strb	r2, [r3, #0]
	brakeState = BRAKESTATE_IDLESLEEP;
    6986:	4b05      	ldr	r3, [pc, #20]	; (699c <BrakeEnterIdleSleepMode+0x2c>)
    6988:	2201      	movs	r2, #1
    698a:	701a      	strb	r2, [r3, #0]
 
	
}
    698c:	46bd      	mov	sp, r7
    698e:	bd80      	pop	{r7, pc}
    6990:	20002ee8 	.word	0x20002ee8
    6994:	20002eb6 	.word	0x20002eb6
    6998:	20002eb0 	.word	0x20002eb0
    699c:	20002ebf 	.word	0x20002ebf

000069a0 <BrakeActuatorControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint8_t BrakeActuatorControl(uint8_t which)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b084      	sub	sp, #16
    69a4:	af00      	add	r7, sp, #0
    69a6:	1c02      	adds	r2, r0, #0
    69a8:	1dfb      	adds	r3, r7, #7
    69aa:	701a      	strb	r2, [r3, #0]
	uint8_t status; 
	status = BRAKE_GOOD; 
    69ac:	1c3b      	adds	r3, r7, #0
    69ae:	330f      	adds	r3, #15
    69b0:	2201      	movs	r2, #1
    69b2:	701a      	strb	r2, [r3, #0]
	switch (which)
    69b4:	1dfb      	adds	r3, r7, #7
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	2b01      	cmp	r3, #1
    69ba:	d03d      	beq.n	6a38 <BrakeActuatorControl+0x98>
    69bc:	dc02      	bgt.n	69c4 <BrakeActuatorControl+0x24>
    69be:	2b00      	cmp	r3, #0
    69c0:	d006      	beq.n	69d0 <BrakeActuatorControl+0x30>
    69c2:	e0af      	b.n	6b24 <BrakeActuatorControl+0x184>
    69c4:	2b02      	cmp	r3, #2
    69c6:	d066      	beq.n	6a96 <BrakeActuatorControl+0xf6>
    69c8:	2b03      	cmp	r3, #3
    69ca:	d100      	bne.n	69ce <BrakeActuatorControl+0x2e>
    69cc:	e07b      	b.n	6ac6 <BrakeActuatorControl+0x126>
    69ce:	e0a9      	b.n	6b24 <BrakeActuatorControl+0x184>
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
    69d0:	4b65      	ldr	r3, [pc, #404]	; (6b68 <BrakeActuatorControl+0x1c8>)
    69d2:	781b      	ldrb	r3, [r3, #0]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d026      	beq.n	6a26 <BrakeActuatorControl+0x86>
    69d8:	4b64      	ldr	r3, [pc, #400]	; (6b6c <BrakeActuatorControl+0x1cc>)
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	2b01      	cmp	r3, #1
    69de:	d122      	bne.n	6a26 <BrakeActuatorControl+0x86>
			{	 
				if (encoderCount == 0)
    69e0:	4b63      	ldr	r3, [pc, #396]	; (6b70 <BrakeActuatorControl+0x1d0>)
    69e2:	881b      	ldrh	r3, [r3, #0]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d10b      	bne.n	6a00 <BrakeActuatorControl+0x60>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    69e8:	4b62      	ldr	r3, [pc, #392]	; (6b74 <BrakeActuatorControl+0x1d4>)
    69ea:	789b      	ldrb	r3, [r3, #2]
    69ec:	2240      	movs	r2, #64	; 0x40
    69ee:	4313      	orrs	r3, r2
    69f0:	b2da      	uxtb	r2, r3
    69f2:	4b60      	ldr	r3, [pc, #384]	; (6b74 <BrakeActuatorControl+0x1d4>)
    69f4:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    69f6:	1c3b      	adds	r3, r7, #0
    69f8:	330f      	adds	r3, #15
    69fa:	2200      	movs	r2, #0
    69fc:	701a      	strb	r2, [r3, #0]
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
			{	 
				if (encoderCount == 0)
    69fe:	e01a      	b.n	6a36 <BrakeActuatorControl+0x96>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEOFFFAIL;
    6a00:	4b5c      	ldr	r3, [pc, #368]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a02:	789b      	ldrb	r3, [r3, #2]
    6a04:	2204      	movs	r2, #4
    6a06:	4313      	orrs	r3, r2
    6a08:	b2da      	uxtb	r2, r3
    6a0a:	4b5a      	ldr	r3, [pc, #360]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a0c:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6a0e:	4b59      	ldr	r3, [pc, #356]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a10:	789b      	ldrb	r3, [r3, #2]
    6a12:	2240      	movs	r2, #64	; 0x40
    6a14:	4393      	bics	r3, r2
    6a16:	b2da      	uxtb	r2, r3
    6a18:	4b56      	ldr	r3, [pc, #344]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a1a:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR; 
    6a1c:	1c3b      	adds	r3, r7, #0
    6a1e:	330f      	adds	r3, #15
    6a20:	2200      	movs	r2, #0
    6a22:	701a      	strb	r2, [r3, #0]
	{
		case BRAKE_HOME:
		{
			if ((hlimitState != 0)&&(homeLimit == HOME_OUT)) //V01_26
			{	 
				if (encoderCount == 0)
    6a24:	e007      	b.n	6a36 <BrakeActuatorControl+0x96>
					status = BRAKE_ERROR; 
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEOFFFAIL;
    6a26:	4b53      	ldr	r3, [pc, #332]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a28:	789b      	ldrb	r3, [r3, #2]
    6a2a:	2204      	movs	r2, #4
    6a2c:	4393      	bics	r3, r2
    6a2e:	b2da      	uxtb	r2, r3
    6a30:	4b50      	ldr	r3, [pc, #320]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a32:	709a      	strb	r2, [r3, #2]
			}
			break;
    6a34:	e076      	b.n	6b24 <BrakeActuatorControl+0x184>
    6a36:	e075      	b.n	6b24 <BrakeActuatorControl+0x184>
		}
		case BRAKE_AWAY:
		{
			if (flimitState != 0)
    6a38:	4b4f      	ldr	r3, [pc, #316]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d022      	beq.n	6a86 <BrakeActuatorControl+0xe6>
			{
				if (encoderCount == 0)
    6a40:	4b4b      	ldr	r3, [pc, #300]	; (6b70 <BrakeActuatorControl+0x1d0>)
    6a42:	881b      	ldrh	r3, [r3, #0]
    6a44:	2b00      	cmp	r3, #0
    6a46:	d10b      	bne.n	6a60 <BrakeActuatorControl+0xc0>
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    6a48:	4b4a      	ldr	r3, [pc, #296]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a4a:	789b      	ldrb	r3, [r3, #2]
    6a4c:	2240      	movs	r2, #64	; 0x40
    6a4e:	4313      	orrs	r3, r2
    6a50:	b2da      	uxtb	r2, r3
    6a52:	4b48      	ldr	r3, [pc, #288]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a54:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    6a56:	1c3b      	adds	r3, r7, #0
    6a58:	330f      	adds	r3, #15
    6a5a:	2200      	movs	r2, #0
    6a5c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    6a5e:	e061      	b.n	6b24 <BrakeActuatorControl+0x184>
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
					status = BRAKE_ERROR;
				}
				else
				{
					brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDOFFFAIL;
    6a60:	4b44      	ldr	r3, [pc, #272]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a62:	789b      	ldrb	r3, [r3, #2]
    6a64:	2208      	movs	r2, #8
    6a66:	4313      	orrs	r3, r2
    6a68:	b2da      	uxtb	r2, r3
    6a6a:	4b42      	ldr	r3, [pc, #264]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a6c:	709a      	strb	r2, [r3, #2]
					brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6a6e:	4b41      	ldr	r3, [pc, #260]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a70:	789b      	ldrb	r3, [r3, #2]
    6a72:	2240      	movs	r2, #64	; 0x40
    6a74:	4393      	bics	r3, r2
    6a76:	b2da      	uxtb	r2, r3
    6a78:	4b3e      	ldr	r3, [pc, #248]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a7a:	709a      	strb	r2, [r3, #2]
					status = BRAKE_ERROR;
    6a7c:	1c3b      	adds	r3, r7, #0
    6a7e:	330f      	adds	r3, #15
    6a80:	2200      	movs	r2, #0
    6a82:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
			}
			break;
    6a84:	e04e      	b.n	6b24 <BrakeActuatorControl+0x184>
					status = BRAKE_ERROR;
				}
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDOFFFAIL;
    6a86:	4b3b      	ldr	r3, [pc, #236]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a88:	789b      	ldrb	r3, [r3, #2]
    6a8a:	2208      	movs	r2, #8
    6a8c:	4393      	bics	r3, r2
    6a8e:	b2da      	uxtb	r2, r3
    6a90:	4b38      	ldr	r3, [pc, #224]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6a92:	709a      	strb	r2, [r3, #2]
			}
			break;
    6a94:	e046      	b.n	6b24 <BrakeActuatorControl+0x184>
		}		
		case BRAKE_RUN:
		{
			if (encoderCount == 0)
    6a96:	4b36      	ldr	r3, [pc, #216]	; (6b70 <BrakeActuatorControl+0x1d0>)
    6a98:	881b      	ldrh	r3, [r3, #0]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d10b      	bne.n	6ab6 <BrakeActuatorControl+0x116>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
    6a9e:	4b35      	ldr	r3, [pc, #212]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6aa0:	789b      	ldrb	r3, [r3, #2]
    6aa2:	2240      	movs	r2, #64	; 0x40
    6aa4:	4313      	orrs	r3, r2
    6aa6:	b2da      	uxtb	r2, r3
    6aa8:	4b32      	ldr	r3, [pc, #200]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6aaa:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6aac:	1c3b      	adds	r3, r7, #0
    6aae:	330f      	adds	r3, #15
    6ab0:	2200      	movs	r2, #0
    6ab2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
			}
			break;
    6ab4:	e036      	b.n	6b24 <BrakeActuatorControl+0x184>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_ENCODERFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_ENCODERFAIL;
    6ab6:	4b2f      	ldr	r3, [pc, #188]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ab8:	789b      	ldrb	r3, [r3, #2]
    6aba:	2240      	movs	r2, #64	; 0x40
    6abc:	4393      	bics	r3, r2
    6abe:	b2da      	uxtb	r2, r3
    6ac0:	4b2c      	ldr	r3, [pc, #176]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ac2:	709a      	strb	r2, [r3, #2]
			}
			break;
    6ac4:	e02e      	b.n	6b24 <BrakeActuatorControl+0x184>
		}		
		case BRAKE_MIDDLESTOP:
		{
			if (flimitState == 0)
    6ac6:	4b2c      	ldr	r3, [pc, #176]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	2b00      	cmp	r3, #0
    6acc:	d10b      	bne.n	6ae6 <BrakeActuatorControl+0x146>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDONFAIL;
    6ace:	4b29      	ldr	r3, [pc, #164]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ad0:	789b      	ldrb	r3, [r3, #2]
    6ad2:	2202      	movs	r2, #2
    6ad4:	4313      	orrs	r3, r2
    6ad6:	b2da      	uxtb	r2, r3
    6ad8:	4b26      	ldr	r3, [pc, #152]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ada:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6adc:	1c3b      	adds	r3, r7, #0
    6ade:	330f      	adds	r3, #15
    6ae0:	2200      	movs	r2, #0
    6ae2:	701a      	strb	r2, [r3, #0]
    6ae4:	e006      	b.n	6af4 <BrakeActuatorControl+0x154>
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_EXTENDONFAIL;
    6ae6:	4b23      	ldr	r3, [pc, #140]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6ae8:	789b      	ldrb	r3, [r3, #2]
    6aea:	2202      	movs	r2, #2
    6aec:	4393      	bics	r3, r2
    6aee:	b2da      	uxtb	r2, r3
    6af0:	4b20      	ldr	r3, [pc, #128]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6af2:	709a      	strb	r2, [r3, #2]
			}
			if (hlimitState == 0)
    6af4:	4b1c      	ldr	r3, [pc, #112]	; (6b68 <BrakeActuatorControl+0x1c8>)
    6af6:	781b      	ldrb	r3, [r3, #0]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d10b      	bne.n	6b14 <BrakeActuatorControl+0x174>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
    6afc:	4b1d      	ldr	r3, [pc, #116]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6afe:	789b      	ldrb	r3, [r3, #2]
    6b00:	2201      	movs	r2, #1
    6b02:	4313      	orrs	r3, r2
    6b04:	b2da      	uxtb	r2, r3
    6b06:	4b1b      	ldr	r3, [pc, #108]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b08:	709a      	strb	r2, [r3, #2]
				status = BRAKE_ERROR;
    6b0a:	1c3b      	adds	r3, r7, #0
    6b0c:	330f      	adds	r3, #15
    6b0e:	2200      	movs	r2, #0
    6b10:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
			}			
			break;
    6b12:	e006      	b.n	6b22 <BrakeActuatorControl+0x182>
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_HOMEONFAIL;
				status = BRAKE_ERROR;
			}
			else
			{
				brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_HOMEONFAIL;
    6b14:	4b17      	ldr	r3, [pc, #92]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b16:	789b      	ldrb	r3, [r3, #2]
    6b18:	2201      	movs	r2, #1
    6b1a:	4393      	bics	r3, r2
    6b1c:	b2da      	uxtb	r2, r3
    6b1e:	4b15      	ldr	r3, [pc, #84]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b20:	709a      	strb	r2, [r3, #2]
			}			
			break;
    6b22:	46c0      	nop			; (mov r8, r8)
		}		
	}
	if ((flimitState == 0)&&(hlimitState ==0))
    6b24:	4b14      	ldr	r3, [pc, #80]	; (6b78 <BrakeActuatorControl+0x1d8>)
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d10f      	bne.n	6b4c <BrakeActuatorControl+0x1ac>
    6b2c:	4b0e      	ldr	r3, [pc, #56]	; (6b68 <BrakeActuatorControl+0x1c8>)
    6b2e:	781b      	ldrb	r3, [r3, #0]
    6b30:	2b00      	cmp	r3, #0
    6b32:	d10b      	bne.n	6b4c <BrakeActuatorControl+0x1ac>
	{
		brakeStatus.ActuatorStatus |= ACTUATORSTATUS_BOTHLIMITSACTIVE;	
    6b34:	4b0f      	ldr	r3, [pc, #60]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b36:	789b      	ldrb	r3, [r3, #2]
    6b38:	2220      	movs	r2, #32
    6b3a:	4313      	orrs	r3, r2
    6b3c:	b2da      	uxtb	r2, r3
    6b3e:	4b0d      	ldr	r3, [pc, #52]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b40:	709a      	strb	r2, [r3, #2]
		status = BRAKE_ERROR;
    6b42:	1c3b      	adds	r3, r7, #0
    6b44:	330f      	adds	r3, #15
    6b46:	2200      	movs	r2, #0
    6b48:	701a      	strb	r2, [r3, #0]
    6b4a:	e006      	b.n	6b5a <BrakeActuatorControl+0x1ba>
	}
	else
	{
		brakeStatus.ActuatorStatus &= ~ACTUATORSTATUS_BOTHLIMITSACTIVE;
    6b4c:	4b09      	ldr	r3, [pc, #36]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b4e:	789b      	ldrb	r3, [r3, #2]
    6b50:	2220      	movs	r2, #32
    6b52:	4393      	bics	r3, r2
    6b54:	b2da      	uxtb	r2, r3
    6b56:	4b07      	ldr	r3, [pc, #28]	; (6b74 <BrakeActuatorControl+0x1d4>)
    6b58:	709a      	strb	r2, [r3, #2]
	}
	return status; 
    6b5a:	1c3b      	adds	r3, r7, #0
    6b5c:	330f      	adds	r3, #15
    6b5e:	781b      	ldrb	r3, [r3, #0]
}
    6b60:	1c18      	adds	r0, r3, #0
    6b62:	46bd      	mov	sp, r7
    6b64:	b004      	add	sp, #16
    6b66:	bd80      	pop	{r7, pc}
    6b68:	20003068 	.word	0x20003068
    6b6c:	20000001 	.word	0x20000001
    6b70:	200004a8 	.word	0x200004a8
    6b74:	20003694 	.word	0x20003694
    6b78:	20003072 	.word	0x20003072

00006b7c <BrakeLEDControl>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeLEDControl(void)
{
    6b7c:	b580      	push	{r7, lr}
    6b7e:	af00      	add	r7, sp, #0
	//--------------------------------
	// what should the bi color LED be doing?
	// 1. flash red for the following errors: 
	//    a. brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;	
	if (poweredUp != 0)
    6b80:	4b55      	ldr	r3, [pc, #340]	; (6cd8 <BrakeLEDControl+0x15c>)
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d100      	bne.n	6b8a <BrakeLEDControl+0xe>
    6b88:	e0a4      	b.n	6cd4 <BrakeLEDControl+0x158>
	{
	switch (brakeState)
    6b8a:	4b54      	ldr	r3, [pc, #336]	; (6cdc <BrakeLEDControl+0x160>)
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2b24      	cmp	r3, #36	; 0x24
    6b90:	d900      	bls.n	6b94 <BrakeLEDControl+0x18>
    6b92:	e09f      	b.n	6cd4 <BrakeLEDControl+0x158>
    6b94:	009a      	lsls	r2, r3, #2
    6b96:	4b52      	ldr	r3, [pc, #328]	; (6ce0 <BrakeLEDControl+0x164>)
    6b98:	18d3      	adds	r3, r2, r3
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	469f      	mov	pc, r3
		case BRAKESTATE_POWEREDUP0:		
		case BRAKESTATE_POWEREDUP:
		case BRAKESTATE_IDLESLEEP:
		{
			//leds are off 
			brakeBiLED = BRAKEBILED_OFF;
    6b9e:	4b51      	ldr	r3, [pc, #324]	; (6ce4 <BrakeLEDControl+0x168>)
    6ba0:	2202      	movs	r2, #2
    6ba2:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF; 
    6ba4:	4b50      	ldr	r3, [pc, #320]	; (6ce8 <BrakeLEDControl+0x16c>)
    6ba6:	2202      	movs	r2, #2
    6ba8:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6baa:	4b50      	ldr	r3, [pc, #320]	; (6cec <BrakeLEDControl+0x170>)
    6bac:	2201      	movs	r2, #1
    6bae:	701a      	strb	r2, [r3, #0]
			break; 
    6bb0:	e090      	b.n	6cd4 <BrakeLEDControl+0x158>
		}
		case BRAKESTATE_RESET:
		case BRAKESTATE_PRESETUP:
		case BRAKESTATE_PRESETUP0:
		{
			brakeBiLED = BRAKEBILED_OFF;
    6bb2:	4b4c      	ldr	r3, [pc, #304]	; (6ce4 <BrakeLEDControl+0x168>)
    6bb4:	2202      	movs	r2, #2
    6bb6:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6bb8:	4b4b      	ldr	r3, [pc, #300]	; (6ce8 <BrakeLEDControl+0x16c>)
    6bba:	2203      	movs	r2, #3
    6bbc:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 
    6bbe:	4b4b      	ldr	r3, [pc, #300]	; (6cec <BrakeLEDControl+0x170>)
    6bc0:	2201      	movs	r2, #1
    6bc2:	701a      	strb	r2, [r3, #0]
			break;
    6bc4:	e086      	b.n	6cd4 <BrakeLEDControl+0x158>
		}		
		case BRAKESTATE_WAITONSETUPLOADCELL:
		{
			//v01_57
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6bc6:	4b4a      	ldr	r3, [pc, #296]	; (6cf0 <BrakeLEDControl+0x174>)
    6bc8:	791b      	ldrb	r3, [r3, #4]
    6bca:	1c1a      	adds	r2, r3, #0
    6bcc:	2308      	movs	r3, #8
    6bce:	4013      	ands	r3, r2
    6bd0:	d009      	beq.n	6be6 <BrakeLEDControl+0x6a>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6bd2:	4b44      	ldr	r3, [pc, #272]	; (6ce4 <BrakeLEDControl+0x168>)
    6bd4:	2204      	movs	r2, #4
    6bd6:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_OFF;
    6bd8:	4b43      	ldr	r3, [pc, #268]	; (6ce8 <BrakeLEDControl+0x16c>)
    6bda:	2202      	movs	r2, #2
    6bdc:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6bde:	4b43      	ldr	r3, [pc, #268]	; (6cec <BrakeLEDControl+0x170>)
    6be0:	2201      	movs	r2, #1
    6be2:	701a      	strb	r2, [r3, #0]
			{			
				brakeBiLED = BRAKEBILED_REDSOLID;
				brakeBlueLED = BRAKEBLUELED_SOLID;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			break;
    6be4:	e076      	b.n	6cd4 <BrakeLEDControl+0x158>
				brakeBlueLED = BRAKEBLUELED_OFF;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			else
			{			
				brakeBiLED = BRAKEBILED_REDSOLID;
    6be6:	4b3f      	ldr	r3, [pc, #252]	; (6ce4 <BrakeLEDControl+0x168>)
    6be8:	2208      	movs	r2, #8
    6bea:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_SOLID;
    6bec:	4b3e      	ldr	r3, [pc, #248]	; (6ce8 <BrakeLEDControl+0x16c>)
    6bee:	2201      	movs	r2, #1
    6bf0:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6bf2:	4b3e      	ldr	r3, [pc, #248]	; (6cec <BrakeLEDControl+0x170>)
    6bf4:	2201      	movs	r2, #1
    6bf6:	701a      	strb	r2, [r3, #0]
			}
			break;
    6bf8:	e06c      	b.n	6cd4 <BrakeLEDControl+0x158>
		case BRAKESTATE_ERROR_FINAL:
		case BRAKESTATE_ERRORLOAD:
		case BRAKESTATE_ERRORLOADWAIT:
		case BRAKESTATE_ERROR_VOLTAGE_ACTIVE:					
		{
			brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6bfa:	4b3a      	ldr	r3, [pc, #232]	; (6ce4 <BrakeLEDControl+0x168>)
    6bfc:	2204      	movs	r2, #4
    6bfe:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF;
    6c00:	4b39      	ldr	r3, [pc, #228]	; (6ce8 <BrakeLEDControl+0x16c>)
    6c02:	2202      	movs	r2, #2
    6c04:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6c06:	4b39      	ldr	r3, [pc, #228]	; (6cec <BrakeLEDControl+0x170>)
    6c08:	2201      	movs	r2, #1
    6c0a:	701a      	strb	r2, [r3, #0]
			break;
    6c0c:	e062      	b.n	6cd4 <BrakeLEDControl+0x158>
		}				
		case BRAKESTATE_ERROR:
		{
			brakeBiLED = BRAKEBILED_REDFLASH;
    6c0e:	4b35      	ldr	r3, [pc, #212]	; (6ce4 <BrakeLEDControl+0x168>)
    6c10:	2203      	movs	r2, #3
    6c12:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_OFF;
    6c14:	4b34      	ldr	r3, [pc, #208]	; (6ce8 <BrakeLEDControl+0x16c>)
    6c16:	2202      	movs	r2, #2
    6c18:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6c1a:	4b34      	ldr	r3, [pc, #208]	; (6cec <BrakeLEDControl+0x170>)
    6c1c:	2201      	movs	r2, #1
    6c1e:	701a      	strb	r2, [r3, #0]
			break;
    6c20:	e058      	b.n	6cd4 <BrakeLEDControl+0x158>
		}		
		case BRAKESTATE_SETUP:
		case BRAKESTATE_SETUPACTIVE:
		{
			//v01_57
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6c22:	4b33      	ldr	r3, [pc, #204]	; (6cf0 <BrakeLEDControl+0x174>)
    6c24:	791b      	ldrb	r3, [r3, #4]
    6c26:	1c1a      	adds	r2, r3, #0
    6c28:	2308      	movs	r3, #8
    6c2a:	4013      	ands	r3, r2
    6c2c:	d009      	beq.n	6c42 <BrakeLEDControl+0xc6>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6c2e:	4b2d      	ldr	r3, [pc, #180]	; (6ce4 <BrakeLEDControl+0x168>)
    6c30:	2204      	movs	r2, #4
    6c32:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_OFF;
    6c34:	4b2c      	ldr	r3, [pc, #176]	; (6ce8 <BrakeLEDControl+0x16c>)
    6c36:	2202      	movs	r2, #2
    6c38:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF;
    6c3a:	4b2c      	ldr	r3, [pc, #176]	; (6cec <BrakeLEDControl+0x170>)
    6c3c:	2201      	movs	r2, #1
    6c3e:	701a      	strb	r2, [r3, #0]
			{
				brakeBiLED = BRAKEBILED_OFF;
				brakeBlueLED = BRAKEBLUELED_ALTGREEN;
				brakeRedLED = BRAKEREDLED_OFF; 			
			}
			break;
    6c40:	e048      	b.n	6cd4 <BrakeLEDControl+0x158>
				brakeBlueLED = BRAKEBLUELED_OFF;
				brakeRedLED = BRAKEREDLED_OFF;
			}
			else
			{
				brakeBiLED = BRAKEBILED_OFF;
    6c42:	4b28      	ldr	r3, [pc, #160]	; (6ce4 <BrakeLEDControl+0x168>)
    6c44:	2202      	movs	r2, #2
    6c46:	701a      	strb	r2, [r3, #0]
				brakeBlueLED = BRAKEBLUELED_ALTGREEN;
    6c48:	4b27      	ldr	r3, [pc, #156]	; (6ce8 <BrakeLEDControl+0x16c>)
    6c4a:	2203      	movs	r2, #3
    6c4c:	701a      	strb	r2, [r3, #0]
				brakeRedLED = BRAKEREDLED_OFF; 			
    6c4e:	4b27      	ldr	r3, [pc, #156]	; (6cec <BrakeLEDControl+0x170>)
    6c50:	2201      	movs	r2, #1
    6c52:	701a      	strb	r2, [r3, #0]
			}
			break;
    6c54:	e03e      	b.n	6cd4 <BrakeLEDControl+0x158>
		}		
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_ACTIVELOAD:
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{
			brakeBiLED = BRAKEBILED_GREENSOLID;
    6c56:	4b23      	ldr	r3, [pc, #140]	; (6ce4 <BrakeLEDControl+0x168>)
    6c58:	2200      	movs	r2, #0
    6c5a:	701a      	strb	r2, [r3, #0]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6c5c:	4b24      	ldr	r3, [pc, #144]	; (6cf0 <BrakeLEDControl+0x174>)
    6c5e:	791b      	ldrb	r3, [r3, #4]
    6c60:	1c1a      	adds	r2, r3, #0
    6c62:	2308      	movs	r3, #8
    6c64:	4013      	ands	r3, r2
    6c66:	d003      	beq.n	6c70 <BrakeLEDControl+0xf4>
			{
				brakeBiLED = BRAKEBILED_YELLOWFLASH;
    6c68:	4b1e      	ldr	r3, [pc, #120]	; (6ce4 <BrakeLEDControl+0x168>)
    6c6a:	2204      	movs	r2, #4
    6c6c:	701a      	strb	r2, [r3, #0]
    6c6e:	e01c      	b.n	6caa <BrakeLEDControl+0x12e>
			}
			else
			{
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6c70:	4b1f      	ldr	r3, [pc, #124]	; (6cf0 <BrakeLEDControl+0x174>)
    6c72:	791b      	ldrb	r3, [r3, #4]
    6c74:	1c1a      	adds	r2, r3, #0
    6c76:	2308      	movs	r3, #8
    6c78:	4013      	ands	r3, r2
    6c7a:	d00d      	beq.n	6c98 <BrakeLEDControl+0x11c>
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6c7c:	4b1c      	ldr	r3, [pc, #112]	; (6cf0 <BrakeLEDControl+0x174>)
    6c7e:	791b      	ldrb	r3, [r3, #4]
    6c80:	1c1a      	adds	r2, r3, #0
    6c82:	2301      	movs	r3, #1
    6c84:	4013      	ands	r3, r2
    6c86:	d003      	beq.n	6c90 <BrakeLEDControl+0x114>
					{
						brakeBiLED = BRAKEBILED_YELLOWFLICKER;
    6c88:	4b16      	ldr	r3, [pc, #88]	; (6ce4 <BrakeLEDControl+0x168>)
    6c8a:	2207      	movs	r2, #7
    6c8c:	701a      	strb	r2, [r3, #0]
    6c8e:	e00c      	b.n	6caa <BrakeLEDControl+0x12e>
					}
					else	
					{			
						brakeBiLED = BRAKEBILED_YELLOWSOLID;
    6c90:	4b14      	ldr	r3, [pc, #80]	; (6ce4 <BrakeLEDControl+0x168>)
    6c92:	2206      	movs	r2, #6
    6c94:	701a      	strb	r2, [r3, #0]
    6c96:	e008      	b.n	6caa <BrakeLEDControl+0x12e>
					}
				}
				else
				{
					if ((brakeStatus.BrakeState & BRAKESTATE_COMMERROR)!= 0)
    6c98:	4b15      	ldr	r3, [pc, #84]	; (6cf0 <BrakeLEDControl+0x174>)
    6c9a:	791b      	ldrb	r3, [r3, #4]
    6c9c:	1c1a      	adds	r2, r3, #0
    6c9e:	2301      	movs	r3, #1
    6ca0:	4013      	ands	r3, r2
    6ca2:	d002      	beq.n	6caa <BrakeLEDControl+0x12e>
					{
//V01_11				brakeBiLED = BRAKEBILED_GREENFLICKER;
						brakeBiLED = BRAKEBILED_GREENSOLID;						
    6ca4:	4b0f      	ldr	r3, [pc, #60]	; (6ce4 <BrakeLEDControl+0x168>)
    6ca6:	2200      	movs	r2, #0
    6ca8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			brakeBlueLED = BRAKEBLUELED_OFF;	
    6caa:	4b0f      	ldr	r3, [pc, #60]	; (6ce8 <BrakeLEDControl+0x16c>)
    6cac:	2202      	movs	r2, #2
    6cae:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 					
    6cb0:	4b0e      	ldr	r3, [pc, #56]	; (6cec <BrakeLEDControl+0x170>)
    6cb2:	2201      	movs	r2, #1
    6cb4:	701a      	strb	r2, [r3, #0]
			break;
    6cb6:	e00d      	b.n	6cd4 <BrakeLEDControl+0x158>
		case BRAKESTATE_ACTIVE_EXTEND:
		case BRAKESTATE_ACTIVE_RETRACT:
		case BRAKESTATE_ACTIVE_HOLD:
		case BRAKESTATE_END_RETRACT:
		{
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6cb8:	4b0b      	ldr	r3, [pc, #44]	; (6ce8 <BrakeLEDControl+0x16c>)
    6cba:	2201      	movs	r2, #1
    6cbc:	701a      	strb	r2, [r3, #0]
			brakeRedLED = BRAKEREDLED_OFF; 			
    6cbe:	4b0b      	ldr	r3, [pc, #44]	; (6cec <BrakeLEDControl+0x170>)
    6cc0:	2201      	movs	r2, #1
    6cc2:	701a      	strb	r2, [r3, #0]
			break;
    6cc4:	e006      	b.n	6cd4 <BrakeLEDControl+0x158>
		}		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			brakeRedLED = BRAKEREDLED_SOLID;
    6cc6:	4b09      	ldr	r3, [pc, #36]	; (6cec <BrakeLEDControl+0x170>)
    6cc8:	2202      	movs	r2, #2
    6cca:	701a      	strb	r2, [r3, #0]
			brakeBlueLED = BRAKEBLUELED_SOLID;
    6ccc:	4b06      	ldr	r3, [pc, #24]	; (6ce8 <BrakeLEDControl+0x16c>)
    6cce:	2201      	movs	r2, #1
    6cd0:	701a      	strb	r2, [r3, #0]
			break;
    6cd2:	46c0      	nop			; (mov r8, r8)
		} 
	}
	}
}
    6cd4:	46bd      	mov	sp, r7
    6cd6:	bd80      	pop	{r7, pc}
    6cd8:	200036b5 	.word	0x200036b5
    6cdc:	20002ebf 	.word	0x20002ebf
    6ce0:	00018288 	.word	0x00018288
    6ce4:	20002ee8 	.word	0x20002ee8
    6ce8:	20002eb6 	.word	0x20002eb6
    6cec:	20002eb0 	.word	0x20002eb0
    6cf0:	20003694 	.word	0x20003694

00006cf4 <BrakeSupervisorytask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeSupervisorytask(void)
{
    6cf4:	b580      	push	{r7, lr}
    6cf6:	af00      	add	r7, sp, #0

	
	//--------------------------------
	// check voltages
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
    6cf8:	2000      	movs	r0, #0
    6cfa:	4b63      	ldr	r3, [pc, #396]	; (6e88 <BrakeSupervisorytask+0x194>)
    6cfc:	4798      	blx	r3
    6cfe:	1c03      	adds	r3, r0, #0
    6d00:	1c1a      	adds	r2, r3, #0
    6d02:	4b62      	ldr	r3, [pc, #392]	; (6e8c <BrakeSupervisorytask+0x198>)
    6d04:	801a      	strh	r2, [r3, #0]
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
    6d06:	2003      	movs	r0, #3
    6d08:	4b5f      	ldr	r3, [pc, #380]	; (6e88 <BrakeSupervisorytask+0x194>)
    6d0a:	4798      	blx	r3
    6d0c:	1c03      	adds	r3, r0, #0
    6d0e:	1c1a      	adds	r2, r3, #0
    6d10:	4b5f      	ldr	r3, [pc, #380]	; (6e90 <BrakeSupervisorytask+0x19c>)
    6d12:	801a      	strh	r2, [r3, #0]
	if (currentvalue< ADC_INPUTVOLTAGE_8PT5)  //ADC_INPUTVOLTAGE_8)
    6d14:	4b5d      	ldr	r3, [pc, #372]	; (6e8c <BrakeSupervisorytask+0x198>)
    6d16:	881a      	ldrh	r2, [r3, #0]
    6d18:	4b5e      	ldr	r3, [pc, #376]	; (6e94 <BrakeSupervisorytask+0x1a0>)
    6d1a:	429a      	cmp	r2, r3
    6d1c:	d828      	bhi.n	6d70 <BrakeSupervisorytask+0x7c>
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
    6d1e:	4b5e      	ldr	r3, [pc, #376]	; (6e98 <BrakeSupervisorytask+0x1a4>)
    6d20:	881b      	ldrh	r3, [r3, #0]
    6d22:	2b18      	cmp	r3, #24
    6d24:	d924      	bls.n	6d70 <BrakeSupervisorytask+0x7c>
		((brakeState == BRAKESTATE_PRESETUP0)||
    6d26:	4b5d      	ldr	r3, [pc, #372]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d28:	781b      	ldrb	r3, [r3, #0]
	// check voltages
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
	if (currentvalue< ADC_INPUTVOLTAGE_8PT5)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
    6d2a:	2b1c      	cmp	r3, #28
    6d2c:	d013      	beq.n	6d56 <BrakeSupervisorytask+0x62>
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
    6d2e:	4b5b      	ldr	r3, [pc, #364]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d30:	781b      	ldrb	r3, [r3, #0]
	currentvalue = ADCGetReading(ADC_INPUT_VOLTAGE);
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
	if (currentvalue< ADC_INPUTVOLTAGE_8PT5)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
    6d32:	2b04      	cmp	r3, #4
    6d34:	d00f      	beq.n	6d56 <BrakeSupervisorytask+0x62>
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
    6d36:	4b59      	ldr	r3, [pc, #356]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d38:	781b      	ldrb	r3, [r3, #0]
	supercapValue = ADCGetReading(ADC_INPUT_SUPERCAP);		
	if (currentvalue< ADC_INPUTVOLTAGE_8PT5)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
    6d3a:	2b03      	cmp	r3, #3
    6d3c:	d00b      	beq.n	6d56 <BrakeSupervisorytask+0x62>
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
    6d3e:	4b57      	ldr	r3, [pc, #348]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d40:	781b      	ldrb	r3, [r3, #0]
	if (currentvalue< ADC_INPUTVOLTAGE_8PT5)  //ADC_INPUTVOLTAGE_8)
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
    6d42:	2b02      	cmp	r3, #2
    6d44:	d007      	beq.n	6d56 <BrakeSupervisorytask+0x62>
		(brakeState == BRAKESTATE_POWERINGUP)||
		(brakeState == BRAKESTATE_POWEREDUP)||
    6d46:	4b55      	ldr	r3, [pc, #340]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d48:	781b      	ldrb	r3, [r3, #0]
	{
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
    6d4a:	2b06      	cmp	r3, #6
    6d4c:	d003      	beq.n	6d56 <BrakeSupervisorytask+0x62>
		(brakeState == BRAKESTATE_POWEREDUP)||
		(brakeState == BRAKESTATE_POWEREDUP0)))
    6d4e:	4b53      	ldr	r3, [pc, #332]	; (6e9c <BrakeSupervisorytask+0x1a8>)
    6d50:	781b      	ldrb	r3, [r3, #0]
		if ((fastVoltageBadTime >= VOLTAGEFAST_BAD_TIME)&&
		((brakeState == BRAKESTATE_PRESETUP0)||
		(brakeState == BRAKESTATE_WAITONSETUP)||
		(brakeState == BRAKESTATE_PRESETUP)||
		(brakeState == BRAKESTATE_POWERINGUP)||
		(brakeState == BRAKESTATE_POWEREDUP)||
    6d52:	2b1b      	cmp	r3, #27
    6d54:	d10c      	bne.n	6d70 <BrakeSupervisorytask+0x7c>
		(brakeState == BRAKESTATE_POWEREDUP0)))
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    6d56:	4b52      	ldr	r3, [pc, #328]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d58:	791b      	ldrb	r3, [r3, #4]
    6d5a:	1c1a      	adds	r2, r3, #0
    6d5c:	2308      	movs	r3, #8
    6d5e:	4013      	ands	r3, r2
    6d60:	d106      	bne.n	6d70 <BrakeSupervisorytask+0x7c>
			{
				brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;
    6d62:	4b4f      	ldr	r3, [pc, #316]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d64:	791b      	ldrb	r3, [r3, #4]
    6d66:	2208      	movs	r2, #8
    6d68:	4313      	orrs	r3, r2
    6d6a:	b2da      	uxtb	r2, r3
    6d6c:	4b4c      	ldr	r3, [pc, #304]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d6e:	711a      	strb	r2, [r3, #4]
			}
		}	
	}
	if (currentvalue< ADC_INPUTVOLTAGE_10PT2)  //ADC_INPUTVOLTAGE_8)
    6d70:	4b46      	ldr	r3, [pc, #280]	; (6e8c <BrakeSupervisorytask+0x198>)
    6d72:	881a      	ldrh	r2, [r3, #0]
    6d74:	4b4b      	ldr	r3, [pc, #300]	; (6ea4 <BrakeSupervisorytask+0x1b0>)
    6d76:	429a      	cmp	r2, r3
    6d78:	d811      	bhi.n	6d9e <BrakeSupervisorytask+0xaa>
	{
		if (voltageBadTime >= VOLTAGE_BAD_TIME)
    6d7a:	4b4b      	ldr	r3, [pc, #300]	; (6ea8 <BrakeSupervisorytask+0x1b4>)
    6d7c:	881b      	ldrh	r3, [r3, #0]
    6d7e:	2b04      	cmp	r3, #4
    6d80:	d933      	bls.n	6dea <BrakeSupervisorytask+0xf6>
		{
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    6d82:	4b47      	ldr	r3, [pc, #284]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d84:	791b      	ldrb	r3, [r3, #4]
    6d86:	1c1a      	adds	r2, r3, #0
    6d88:	2308      	movs	r3, #8
    6d8a:	4013      	ands	r3, r2
    6d8c:	d12d      	bne.n	6dea <BrakeSupervisorytask+0xf6>
			{
				brakeStatus.BrakeState |= BRAKESTATE_INPUTVOLTAGEBAD;
    6d8e:	4b44      	ldr	r3, [pc, #272]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d90:	791b      	ldrb	r3, [r3, #4]
    6d92:	2208      	movs	r2, #8
    6d94:	4313      	orrs	r3, r2
    6d96:	b2da      	uxtb	r2, r3
    6d98:	4b41      	ldr	r3, [pc, #260]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6d9a:	711a      	strb	r2, [r3, #4]
    6d9c:	e025      	b.n	6dea <BrakeSupervisorytask+0xf6>
			}
		}
	}
	else
	{
		if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6d9e:	4b40      	ldr	r3, [pc, #256]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6da0:	791b      	ldrb	r3, [r3, #4]
    6da2:	1c1a      	adds	r2, r3, #0
    6da4:	2308      	movs	r3, #8
    6da6:	4013      	ands	r3, r2
    6da8:	d019      	beq.n	6dde <BrakeSupervisorytask+0xea>
		{
			if ((currentvalue> ADC_INPUTVOLTAGE_8PT5)&&(supercapValue > 0x800))
    6daa:	4b38      	ldr	r3, [pc, #224]	; (6e8c <BrakeSupervisorytask+0x198>)
    6dac:	881a      	ldrh	r2, [r3, #0]
    6dae:	4b3f      	ldr	r3, [pc, #252]	; (6eac <BrakeSupervisorytask+0x1b8>)
    6db0:	429a      	cmp	r2, r3
    6db2:	d91a      	bls.n	6dea <BrakeSupervisorytask+0xf6>
    6db4:	4b36      	ldr	r3, [pc, #216]	; (6e90 <BrakeSupervisorytask+0x19c>)
    6db6:	881a      	ldrh	r2, [r3, #0]
    6db8:	2380      	movs	r3, #128	; 0x80
    6dba:	011b      	lsls	r3, r3, #4
    6dbc:	429a      	cmp	r2, r3
    6dbe:	d914      	bls.n	6dea <BrakeSupervisorytask+0xf6>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_INPUTVOLTAGEBAD;	
    6dc0:	4b37      	ldr	r3, [pc, #220]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6dc2:	791b      	ldrb	r3, [r3, #4]
    6dc4:	2208      	movs	r2, #8
    6dc6:	4393      	bics	r3, r2
    6dc8:	b2da      	uxtb	r2, r3
    6dca:	4b35      	ldr	r3, [pc, #212]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6dcc:	711a      	strb	r2, [r3, #4]
				brakeStatus.BrakeState &= ~BRAKESTATE_LOWSUPERCAP;	
    6dce:	4b34      	ldr	r3, [pc, #208]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6dd0:	791b      	ldrb	r3, [r3, #4]
    6dd2:	2220      	movs	r2, #32
    6dd4:	4393      	bics	r3, r2
    6dd6:	b2da      	uxtb	r2, r3
    6dd8:	4b31      	ldr	r3, [pc, #196]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6dda:	711a      	strb	r2, [r3, #4]
    6ddc:	e005      	b.n	6dea <BrakeSupervisorytask+0xf6>
			}
		}
		else
		{
			voltageBadTime = 0; 
    6dde:	4b32      	ldr	r3, [pc, #200]	; (6ea8 <BrakeSupervisorytask+0x1b4>)
    6de0:	2200      	movs	r2, #0
    6de2:	801a      	strh	r2, [r3, #0]
			fastVoltageBadTime = 0; 
    6de4:	4b2c      	ldr	r3, [pc, #176]	; (6e98 <BrakeSupervisorytask+0x1a4>)
    6de6:	2200      	movs	r2, #0
    6de8:	801a      	strh	r2, [r3, #0]
		}
	}
	//-----------------------------------------
	// if voltage is over 10.5 volts and board is turned on - 
	// enable the super cap. 
	if (currentvalue> ADC_INPUTVOLTAGE_10PT5)
    6dea:	4b28      	ldr	r3, [pc, #160]	; (6e8c <BrakeSupervisorytask+0x198>)
    6dec:	881a      	ldrh	r2, [r3, #0]
    6dee:	4b30      	ldr	r3, [pc, #192]	; (6eb0 <BrakeSupervisorytask+0x1bc>)
    6df0:	429a      	cmp	r2, r3
    6df2:	d91d      	bls.n	6e30 <BrakeSupervisorytask+0x13c>
	{	
		//----------------boc //01_38_#2
		if (chargingSupercap == 0)
    6df4:	4b2f      	ldr	r3, [pc, #188]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d10c      	bne.n	6e16 <BrakeSupervisorytask+0x122>
		{
			if (supercapValue < SUPERCAP_17V)
    6dfc:	4b24      	ldr	r3, [pc, #144]	; (6e90 <BrakeSupervisorytask+0x19c>)
    6dfe:	881a      	ldrh	r2, [r3, #0]
    6e00:	4b2d      	ldr	r3, [pc, #180]	; (6eb8 <BrakeSupervisorytask+0x1c4>)
    6e02:	429a      	cmp	r2, r3
    6e04:	d830      	bhi.n	6e68 <BrakeSupervisorytask+0x174>
			{
				port_pin_set_output_level(SUPERCAPEN, true);  
    6e06:	2025      	movs	r0, #37	; 0x25
    6e08:	2101      	movs	r1, #1
    6e0a:	4b2c      	ldr	r3, [pc, #176]	; (6ebc <BrakeSupervisorytask+0x1c8>)
    6e0c:	4798      	blx	r3
				chargingSupercap = 1;   
    6e0e:	4b29      	ldr	r3, [pc, #164]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6e10:	2201      	movs	r2, #1
    6e12:	701a      	strb	r2, [r3, #0]
    6e14:	e028      	b.n	6e68 <BrakeSupervisorytask+0x174>
			}
		}
		else
		{
			if (supercapValue > SUPERCAP_17PT5)
    6e16:	4b1e      	ldr	r3, [pc, #120]	; (6e90 <BrakeSupervisorytask+0x19c>)
    6e18:	881a      	ldrh	r2, [r3, #0]
    6e1a:	4b29      	ldr	r3, [pc, #164]	; (6ec0 <BrakeSupervisorytask+0x1cc>)
    6e1c:	429a      	cmp	r2, r3
    6e1e:	d923      	bls.n	6e68 <BrakeSupervisorytask+0x174>
			{
				port_pin_set_output_level(SUPERCAPEN, false);
    6e20:	2025      	movs	r0, #37	; 0x25
    6e22:	2100      	movs	r1, #0
    6e24:	4b25      	ldr	r3, [pc, #148]	; (6ebc <BrakeSupervisorytask+0x1c8>)
    6e26:	4798      	blx	r3
				chargingSupercap = 0;   
    6e28:	4b22      	ldr	r3, [pc, #136]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6e2a:	2200      	movs	r2, #0
    6e2c:	701a      	strb	r2, [r3, #0]
    6e2e:	e01b      	b.n	6e68 <BrakeSupervisorytask+0x174>
			}		
		}
	}
	else
	{
		if (currentvalue< ADC_INPUTVOLTAGE_10PT2)
    6e30:	4b16      	ldr	r3, [pc, #88]	; (6e8c <BrakeSupervisorytask+0x198>)
    6e32:	881a      	ldrh	r2, [r3, #0]
    6e34:	4b1b      	ldr	r3, [pc, #108]	; (6ea4 <BrakeSupervisorytask+0x1b0>)
    6e36:	429a      	cmp	r2, r3
    6e38:	d816      	bhi.n	6e68 <BrakeSupervisorytask+0x174>
		{
			if (chargingSupercap != 0)
    6e3a:	4b1e      	ldr	r3, [pc, #120]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d006      	beq.n	6e50 <BrakeSupervisorytask+0x15c>
			{				
				port_pin_set_output_level(SUPERCAPEN, false);
    6e42:	2025      	movs	r0, #37	; 0x25
    6e44:	2100      	movs	r1, #0
    6e46:	4b1d      	ldr	r3, [pc, #116]	; (6ebc <BrakeSupervisorytask+0x1c8>)
    6e48:	4798      	blx	r3
				chargingSupercap = 0;
    6e4a:	4b1a      	ldr	r3, [pc, #104]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6e4c:	2200      	movs	r2, #0
    6e4e:	701a      	strb	r2, [r3, #0]
			}
			if (supercapValue < 0x0400)
    6e50:	4b0f      	ldr	r3, [pc, #60]	; (6e90 <BrakeSupervisorytask+0x19c>)
    6e52:	881a      	ldrh	r2, [r3, #0]
    6e54:	4b1b      	ldr	r3, [pc, #108]	; (6ec4 <BrakeSupervisorytask+0x1d0>)
    6e56:	429a      	cmp	r2, r3
    6e58:	d806      	bhi.n	6e68 <BrakeSupervisorytask+0x174>
			{
				brakeStatus.BrakeState |= BRAKESTATE_LOWSUPERCAP;					
    6e5a:	4b11      	ldr	r3, [pc, #68]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6e5c:	791b      	ldrb	r3, [r3, #4]
    6e5e:	2220      	movs	r2, #32
    6e60:	4313      	orrs	r3, r2
    6e62:	b2da      	uxtb	r2, r3
    6e64:	4b0e      	ldr	r3, [pc, #56]	; (6ea0 <BrakeSupervisorytask+0x1ac>)
    6e66:	711a      	strb	r2, [r3, #4]
			}				
		}
	}
	if (chargingSupercap == 0)
    6e68:	4b12      	ldr	r3, [pc, #72]	; (6eb4 <BrakeSupervisorytask+0x1c0>)
    6e6a:	781b      	ldrb	r3, [r3, #0]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d104      	bne.n	6e7a <BrakeSupervisorytask+0x186>
	{
		port_pin_set_output_level(SUPERCAPEN, false);  		
    6e70:	2025      	movs	r0, #37	; 0x25
    6e72:	2100      	movs	r1, #0
    6e74:	4b11      	ldr	r3, [pc, #68]	; (6ebc <BrakeSupervisorytask+0x1c8>)
    6e76:	4798      	blx	r3
    6e78:	e003      	b.n	6e82 <BrakeSupervisorytask+0x18e>
	}
	else
	{
		port_pin_set_output_level(SUPERCAPEN, true);  		
    6e7a:	2025      	movs	r0, #37	; 0x25
    6e7c:	2101      	movs	r1, #1
    6e7e:	4b0f      	ldr	r3, [pc, #60]	; (6ebc <BrakeSupervisorytask+0x1c8>)
    6e80:	4798      	blx	r3
	}		
}
    6e82:	46bd      	mov	sp, r7
    6e84:	bd80      	pop	{r7, pc}
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	0000b409 	.word	0x0000b409
    6e8c:	20002ed0 	.word	0x20002ed0
    6e90:	200004ac 	.word	0x200004ac
    6e94:	00000524 	.word	0x00000524
    6e98:	20002ed6 	.word	0x20002ed6
    6e9c:	20002ebf 	.word	0x20002ebf
    6ea0:	20003694 	.word	0x20003694
    6ea4:	0000062c 	.word	0x0000062c
    6ea8:	20002ed8 	.word	0x20002ed8
    6eac:	00000525 	.word	0x00000525
    6eb0:	0000065b 	.word	0x0000065b
    6eb4:	200004ab 	.word	0x200004ab
    6eb8:	00000a36 	.word	0x00000a36
    6ebc:	000067a1 	.word	0x000067a1
    6ec0:	00000a82 	.word	0x00000a82
    6ec4:	000003ff 	.word	0x000003ff

00006ec8 <BrakeBoardStateMachineTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void BrakeBoardStateMachineTask(void)
{
    6ec8:	b590      	push	{r4, r7, lr}
    6eca:	b085      	sub	sp, #20
    6ecc:	af00      	add	r7, sp, #0
	uint8_t i,done,button,itemp,forceExtend;
	uint16_t itemp2,itemp3;

//----- boc 01_38_#3	
	prevBrakeState2 = prevBrakeState;
    6ece:	4bcc      	ldr	r3, [pc, #816]	; (7200 <BrakeBoardStateMachineTask+0x338>)
    6ed0:	781a      	ldrb	r2, [r3, #0]
    6ed2:	4bcc      	ldr	r3, [pc, #816]	; (7204 <BrakeBoardStateMachineTask+0x33c>)
    6ed4:	701a      	strb	r2, [r3, #0]
	prevBrakeState = brakeState; 
    6ed6:	4bcc      	ldr	r3, [pc, #816]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6ed8:	781a      	ldrb	r2, [r3, #0]
    6eda:	4bc9      	ldr	r3, [pc, #804]	; (7200 <BrakeBoardStateMachineTask+0x338>)
    6edc:	701a      	strb	r2, [r3, #0]
	// check that encoder count is changing. 
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
    6ede:	4bcb      	ldr	r3, [pc, #812]	; (720c <BrakeBoardStateMachineTask+0x344>)
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	2b01      	cmp	r3, #1
    6ee4:	d00b      	beq.n	6efe <BrakeBoardStateMachineTask+0x36>
    6ee6:	4bc9      	ldr	r3, [pc, #804]	; (720c <BrakeBoardStateMachineTask+0x344>)
    6ee8:	781b      	ldrb	r3, [r3, #0]
    6eea:	2b03      	cmp	r3, #3
    6eec:	d007      	beq.n	6efe <BrakeBoardStateMachineTask+0x36>
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6eee:	4bc7      	ldr	r3, [pc, #796]	; (720c <BrakeBoardStateMachineTask+0x344>)
    6ef0:	781b      	ldrb	r3, [r3, #0]
	// check that encoder count is changing. 
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
    6ef2:	2b02      	cmp	r3, #2
    6ef4:	d003      	beq.n	6efe <BrakeBoardStateMachineTask+0x36>
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6ef6:	4bc5      	ldr	r3, [pc, #788]	; (720c <BrakeBoardStateMachineTask+0x344>)
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	2b04      	cmp	r3, #4
    6efc:	d12d      	bne.n	6f5a <BrakeBoardStateMachineTask+0x92>
		 (brakeState !=BRAKESTATE_ERROR_FINAL ))
    6efe:	4bc2      	ldr	r3, [pc, #776]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6f00:	781b      	ldrb	r3, [r3, #0]
	// if not, there is an error. 
	// runs every 25msec for for 1 sec 
	// 1000/25 = 40
	//----------------------------
	if (((action == EXTENDING)||(action == RETRACTING_BY_ENCODER) ||
	     (action == RETRACTING)||(action == EXTENDING_BY_ENCODER))   && 
    6f02:	2b18      	cmp	r3, #24
    6f04:	d029      	beq.n	6f5a <BrakeBoardStateMachineTask+0x92>
	{
		if (encoderCount == 0)
	    {
	//		brakeState = BRAKESTATE_ERROR_FINAL;
		}
		if (prevEncoderCount != encoderCount)
    6f06:	4bc2      	ldr	r3, [pc, #776]	; (7210 <BrakeBoardStateMachineTask+0x348>)
    6f08:	881a      	ldrh	r2, [r3, #0]
    6f0a:	4bc2      	ldr	r3, [pc, #776]	; (7214 <BrakeBoardStateMachineTask+0x34c>)
    6f0c:	881b      	ldrh	r3, [r3, #0]
    6f0e:	429a      	cmp	r2, r3
    6f10:	d003      	beq.n	6f1a <BrakeBoardStateMachineTask+0x52>
		{
			actionEncoderSample = 0; 
    6f12:	4bc1      	ldr	r3, [pc, #772]	; (7218 <BrakeBoardStateMachineTask+0x350>)
    6f14:	2200      	movs	r2, #0
    6f16:	701a      	strb	r2, [r3, #0]
    6f18:	e01b      	b.n	6f52 <BrakeBoardStateMachineTask+0x8a>
		}
		else
		{	
			actionEncoderSample++;	
    6f1a:	4bbf      	ldr	r3, [pc, #764]	; (7218 <BrakeBoardStateMachineTask+0x350>)
    6f1c:	781b      	ldrb	r3, [r3, #0]
    6f1e:	3301      	adds	r3, #1
    6f20:	b2da      	uxtb	r2, r3
    6f22:	4bbd      	ldr	r3, [pc, #756]	; (7218 <BrakeBoardStateMachineTask+0x350>)
    6f24:	701a      	strb	r2, [r3, #0]
			if (actionEncoderSample >120) //20)  //0)
    6f26:	4bbc      	ldr	r3, [pc, #752]	; (7218 <BrakeBoardStateMachineTask+0x350>)
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	2b78      	cmp	r3, #120	; 0x78
    6f2c:	d911      	bls.n	6f52 <BrakeBoardStateMachineTask+0x8a>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    6f2e:	4bb6      	ldr	r3, [pc, #728]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6f30:	2207      	movs	r2, #7
    6f32:	701a      	strb	r2, [r3, #0]
 				brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;
    6f34:	4bb9      	ldr	r3, [pc, #740]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f36:	791b      	ldrb	r3, [r3, #4]
    6f38:	2204      	movs	r2, #4
    6f3a:	4313      	orrs	r3, r2
    6f3c:	b2da      	uxtb	r2, r3
    6f3e:	4bb7      	ldr	r3, [pc, #732]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f40:	711a      	strb	r2, [r3, #4]
 				brakeStatus.BrakeState |= BRAKESTATE_ERRORLOADSET;					
    6f42:	4bb6      	ldr	r3, [pc, #728]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f44:	791b      	ldrb	r3, [r3, #4]
    6f46:	2280      	movs	r2, #128	; 0x80
    6f48:	4252      	negs	r2, r2
    6f4a:	4313      	orrs	r3, r2
    6f4c:	b2da      	uxtb	r2, r3
    6f4e:	4bb3      	ldr	r3, [pc, #716]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f50:	711a      	strb	r2, [r3, #4]
			}
		}
		prevEncoderCount = encoderCount;  
    6f52:	4bb0      	ldr	r3, [pc, #704]	; (7214 <BrakeBoardStateMachineTask+0x34c>)
    6f54:	881a      	ldrh	r2, [r3, #0]
    6f56:	4bae      	ldr	r3, [pc, #696]	; (7210 <BrakeBoardStateMachineTask+0x348>)
    6f58:	801a      	strh	r2, [r3, #0]
	}
//---- eoc 01_38_#3 
	
//	table0.Item.MaxForce = 5;  //hard coded for testing
	done = 0;
    6f5a:	1c3b      	adds	r3, r7, #0
    6f5c:	330e      	adds	r3, #14
    6f5e:	2200      	movs	r2, #0
    6f60:	701a      	strb	r2, [r3, #0]
	button = ButtonChanged();
    6f62:	1c3c      	adds	r4, r7, #0
    6f64:	3409      	adds	r4, #9
    6f66:	4bae      	ldr	r3, [pc, #696]	; (7220 <BrakeBoardStateMachineTask+0x358>)
    6f68:	4798      	blx	r3
    6f6a:	1c03      	adds	r3, r0, #0
    6f6c:	7023      	strb	r3, [r4, #0]
	BrakeSupervisorytask();
    6f6e:	4bad      	ldr	r3, [pc, #692]	; (7224 <BrakeBoardStateMachineTask+0x35c>)
    6f70:	4798      	blx	r3
	if (breakawayRing_pressed == 1)
    6f72:	4bad      	ldr	r3, [pc, #692]	; (7228 <BrakeBoardStateMachineTask+0x360>)
    6f74:	881b      	ldrh	r3, [r3, #0]
    6f76:	b21b      	sxth	r3, r3
    6f78:	2b01      	cmp	r3, #1
    6f7a:	d107      	bne.n	6f8c <BrakeBoardStateMachineTask+0xc4>
	{
		brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYREADY;
    6f7c:	4ba7      	ldr	r3, [pc, #668]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f7e:	791b      	ldrb	r3, [r3, #4]
    6f80:	2240      	movs	r2, #64	; 0x40
    6f82:	4313      	orrs	r3, r2
    6f84:	b2da      	uxtb	r2, r3
    6f86:	4ba5      	ldr	r3, [pc, #660]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f88:	711a      	strb	r2, [r3, #4]
    6f8a:	e006      	b.n	6f9a <BrakeBoardStateMachineTask+0xd2>
	}
	else
	{
		brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYREADY;
    6f8c:	4ba3      	ldr	r3, [pc, #652]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f8e:	791b      	ldrb	r3, [r3, #4]
    6f90:	2240      	movs	r2, #64	; 0x40
    6f92:	4393      	bics	r3, r2
    6f94:	b2da      	uxtb	r2, r3
    6f96:	4ba1      	ldr	r3, [pc, #644]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6f98:	711a      	strb	r2, [r3, #4]
	}	

	
	switch(brakeState)
    6f9a:	4b9b      	ldr	r3, [pc, #620]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	2b24      	cmp	r3, #36	; 0x24
    6fa0:	d901      	bls.n	6fa6 <BrakeBoardStateMachineTask+0xde>
    6fa2:	f001 ff46 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    6fa6:	009a      	lsls	r2, r3, #2
    6fa8:	4ba0      	ldr	r3, [pc, #640]	; (722c <BrakeBoardStateMachineTask+0x364>)
    6faa:	18d3      	adds	r3, r2, r3
    6fac:	681b      	ldr	r3, [r3, #0]
    6fae:	469f      	mov	pc, r3
// powered up and power is added. This is REALLY A FIRST TIME board has any 
// power on it and the supercaps are just going to get charged. 
//-------------------------------		
		case BRAKESTATE_POWERINGUP:
		{
			MotorOff(1);
    6fb0:	2001      	movs	r0, #1
    6fb2:	4b9f      	ldr	r3, [pc, #636]	; (7230 <BrakeBoardStateMachineTask+0x368>)
    6fb4:	4798      	blx	r3
			brakeState = BRAKESTATE_POWEREDUP;
    6fb6:	4b94      	ldr	r3, [pc, #592]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6fb8:	2206      	movs	r2, #6
    6fba:	701a      	strb	r2, [r3, #0]
			encoderCountBack =0;
    6fbc:	4b9d      	ldr	r3, [pc, #628]	; (7234 <BrakeBoardStateMachineTask+0x36c>)
    6fbe:	2200      	movs	r2, #0
    6fc0:	801a      	strh	r2, [r3, #0]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    6fc2:	4b96      	ldr	r3, [pc, #600]	; (721c <BrakeBoardStateMachineTask+0x354>)
    6fc4:	791b      	ldrb	r3, [r3, #4]
    6fc6:	1c1a      	adds	r2, r3, #0
    6fc8:	2308      	movs	r3, #8
    6fca:	4013      	ands	r3, r2
    6fcc:	d003      	beq.n	6fd6 <BrakeBoardStateMachineTask+0x10e>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    6fce:	4b8e      	ldr	r3, [pc, #568]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6fd0:	2207      	movs	r2, #7
    6fd2:	701a      	strb	r2, [r3, #0]
    6fd4:	e018      	b.n	7008 <BrakeBoardStateMachineTask+0x140>
			}	
			else
			{		
				if (hlimitState != 0)
    6fd6:	4b98      	ldr	r3, [pc, #608]	; (7238 <BrakeBoardStateMachineTask+0x370>)
    6fd8:	781b      	ldrb	r3, [r3, #0]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d014      	beq.n	7008 <BrakeBoardStateMachineTask+0x140>
				{
					brakeState = BRAKESTATE_POWEREDUP0;
    6fde:	4b8a      	ldr	r3, [pc, #552]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    6fe0:	221b      	movs	r2, #27
    6fe2:	701a      	strb	r2, [r3, #0]
					MotorCW();
    6fe4:	4b95      	ldr	r3, [pc, #596]	; (723c <BrakeBoardStateMachineTask+0x374>)
    6fe6:	4798      	blx	r3
					brakeSupTime = 20;  //3 seconds to EXTEND
    6fe8:	4b95      	ldr	r3, [pc, #596]	; (7240 <BrakeBoardStateMachineTask+0x378>)
    6fea:	2214      	movs	r2, #20
    6fec:	801a      	strh	r2, [r3, #0]
					//----- boc 1_23 ---- control by encode counts 
					encoderCountBack = ENCODER_EXTEND_STARTCOUNT; 
    6fee:	4b91      	ldr	r3, [pc, #580]	; (7234 <BrakeBoardStateMachineTask+0x36c>)
    6ff0:	22af      	movs	r2, #175	; 0xaf
    6ff2:	801a      	strh	r2, [r3, #0]
					action = EXTENDING_BY_ENCODER; 
    6ff4:	4b85      	ldr	r3, [pc, #532]	; (720c <BrakeBoardStateMachineTask+0x344>)
    6ff6:	2204      	movs	r2, #4
    6ff8:	701a      	strb	r2, [r3, #0]
					//----- eoc 1_23 
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    6ffa:	4b92      	ldr	r3, [pc, #584]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    6ffc:	781b      	ldrb	r3, [r3, #0]
    6ffe:	2202      	movs	r2, #2
    7000:	4393      	bics	r3, r2
    7002:	b2da      	uxtb	r2, r3
    7004:	4b8f      	ldr	r3, [pc, #572]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    7006:	701a      	strb	r2, [r3, #0]
				}
			}
			brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
    7008:	4b84      	ldr	r3, [pc, #528]	; (721c <BrakeBoardStateMachineTask+0x354>)
    700a:	791a      	ldrb	r2, [r3, #4]
    700c:	2328      	movs	r3, #40	; 0x28
    700e:	4013      	ands	r3, r2
    7010:	b2da      	uxtb	r2, r3
    7012:	4b82      	ldr	r3, [pc, #520]	; (721c <BrakeBoardStateMachineTask+0x354>)
    7014:	711a      	strb	r2, [r3, #4]
			break;
    7016:	f001 ff0c 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
//v00_20 added the POWEREDUP0 state to handle a short extension first		
		case BRAKESTATE_POWEREDUP0:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack ==0))
    701a:	4b8a      	ldr	r3, [pc, #552]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    701c:	781b      	ldrb	r3, [r3, #0]
    701e:	1c1a      	adds	r2, r3, #0
    7020:	2302      	movs	r3, #2
    7022:	4013      	ands	r3, r2
    7024:	d103      	bne.n	702e <BrakeBoardStateMachineTask+0x166>
    7026:	4b83      	ldr	r3, [pc, #524]	; (7234 <BrakeBoardStateMachineTask+0x36c>)
    7028:	881b      	ldrh	r3, [r3, #0]
    702a:	2b00      	cmp	r3, #0
    702c:	d111      	bne.n	7052 <BrakeBoardStateMachineTask+0x18a>
			{
				MotorOff(1);
    702e:	2001      	movs	r0, #1
    7030:	4b7f      	ldr	r3, [pc, #508]	; (7230 <BrakeBoardStateMachineTask+0x368>)
    7032:	4798      	blx	r3
				brakeState = BRAKESTATE_POWEREDUP;
    7034:	4b74      	ldr	r3, [pc, #464]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    7036:	2206      	movs	r2, #6
    7038:	701a      	strb	r2, [r3, #0]
				MotorCCW();
    703a:	4b83      	ldr	r3, [pc, #524]	; (7248 <BrakeBoardStateMachineTask+0x380>)
    703c:	4798      	blx	r3
				brakeSupTime = 150;  //15 seconds to retract
    703e:	4b80      	ldr	r3, [pc, #512]	; (7240 <BrakeBoardStateMachineTask+0x378>)
    7040:	2296      	movs	r2, #150	; 0x96
    7042:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7044:	4b7f      	ldr	r3, [pc, #508]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	2202      	movs	r2, #2
    704a:	4393      	bics	r3, r2
    704c:	b2da      	uxtb	r2, r3
    704e:	4b7d      	ldr	r3, [pc, #500]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    7050:	701a      	strb	r2, [r3, #0]
			}
			brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
    7052:	4b72      	ldr	r3, [pc, #456]	; (721c <BrakeBoardStateMachineTask+0x354>)
    7054:	791a      	ldrb	r2, [r3, #4]
    7056:	2328      	movs	r3, #40	; 0x28
    7058:	4013      	ands	r3, r2
    705a:	b2da      	uxtb	r2, r3
    705c:	4b6f      	ldr	r3, [pc, #444]	; (721c <BrakeBoardStateMachineTask+0x354>)
    705e:	711a      	strb	r2, [r3, #4]
			break;
    7060:	f001 fee7 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7064:	4b77      	ldr	r3, [pc, #476]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	1c1a      	adds	r2, r3, #0
    706a:	2302      	movs	r3, #2
    706c:	4013      	ands	r3, r2
    706e:	d107      	bne.n	7080 <BrakeBoardStateMachineTask+0x1b8>
			((hlimitState ==0)||(homeLimit == HOME_IN))) //V01_26
    7070:	4b71      	ldr	r3, [pc, #452]	; (7238 <BrakeBoardStateMachineTask+0x370>)
    7072:	781b      	ldrb	r3, [r3, #0]
			brakeStatus.BrakeState &= (BRAKESTATE_INPUTVOLTAGEBAD|BRAKESTATE_LOWSUPERCAP); 
			break;
		}		
		case BRAKESTATE_POWEREDUP:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7074:	2b00      	cmp	r3, #0
    7076:	d003      	beq.n	7080 <BrakeBoardStateMachineTask+0x1b8>
			((hlimitState ==0)||(homeLimit == HOME_IN))) //V01_26
    7078:	4b74      	ldr	r3, [pc, #464]	; (724c <BrakeBoardStateMachineTask+0x384>)
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	2b00      	cmp	r3, #0
    707e:	d116      	bne.n	70ae <BrakeBoardStateMachineTask+0x1e6>
			{
				MotorOff(1);
    7080:	2001      	movs	r0, #1
    7082:	4b6b      	ldr	r3, [pc, #428]	; (7230 <BrakeBoardStateMachineTask+0x368>)
    7084:	4798      	blx	r3
				brakeSupTime = 0;
    7086:	4b6e      	ldr	r3, [pc, #440]	; (7240 <BrakeBoardStateMachineTask+0x378>)
    7088:	2200      	movs	r2, #0
    708a:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    708c:	4b6d      	ldr	r3, [pc, #436]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	2202      	movs	r2, #2
    7092:	4393      	bics	r3, r2
    7094:	b2da      	uxtb	r2, r3
    7096:	4b6b      	ldr	r3, [pc, #428]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    7098:	701a      	strb	r2, [r3, #0]
				BrakeActuatorControl(BRAKE_HOME);
    709a:	2000      	movs	r0, #0
    709c:	4b6c      	ldr	r3, [pc, #432]	; (7250 <BrakeBoardStateMachineTask+0x388>)
    709e:	4798      	blx	r3
				brakeState = BRAKESTATE_IDLESLEEP;
    70a0:	4b59      	ldr	r3, [pc, #356]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    70a2:	2201      	movs	r2, #1
    70a4:	701a      	strb	r2, [r3, #0]
				BrakeEnterIdleSleepMode();
    70a6:	4b6b      	ldr	r3, [pc, #428]	; (7254 <BrakeBoardStateMachineTask+0x38c>)
    70a8:	4798      	blx	r3
			}
			break;
    70aa:	f001 fec2 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    70ae:	f001 fec0 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
//------------------------------------
// POWER ON KEY HAS BEEN PRESSED. 
//------------------------------------		
		case BRAKESTATE_RESET:
		{
			motorAccBaseline = 0; 
    70b2:	4b69      	ldr	r3, [pc, #420]	; (7258 <BrakeBoardStateMachineTask+0x390>)
    70b4:	2200      	movs	r2, #0
    70b6:	701a      	strb	r2, [r3, #0]
			thresholdmet = 0; 
    70b8:	4b68      	ldr	r3, [pc, #416]	; (725c <BrakeBoardStateMachineTask+0x394>)
    70ba:	2200      	movs	r2, #0
    70bc:	701a      	strb	r2, [r3, #0]
			breakawayHoldTimer = 0; 
    70be:	4b68      	ldr	r3, [pc, #416]	; (7260 <BrakeBoardStateMachineTask+0x398>)
    70c0:	2200      	movs	r2, #0
    70c2:	801a      	strh	r2, [r3, #0]
			brakeState = BRAKESTATE_PRESETUP;
    70c4:	4b50      	ldr	r3, [pc, #320]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    70c6:	2203      	movs	r2, #3
    70c8:	701a      	strb	r2, [r3, #0]
#if TESTWITHOUTSETUP
#else		
			brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;	
    70ca:	4b54      	ldr	r3, [pc, #336]	; (721c <BrakeBoardStateMachineTask+0x354>)
    70cc:	791b      	ldrb	r3, [r3, #4]
    70ce:	2204      	movs	r2, #4
    70d0:	4313      	orrs	r3, r2
    70d2:	b2da      	uxtb	r2, r3
    70d4:	4b51      	ldr	r3, [pc, #324]	; (721c <BrakeBoardStateMachineTask+0x354>)
    70d6:	711a      	strb	r2, [r3, #4]
#endif			
//			system_interrupt_disable_global();
			wdt_reset_count();
    70d8:	4b62      	ldr	r3, [pc, #392]	; (7264 <BrakeBoardStateMachineTask+0x39c>)
    70da:	4798      	blx	r3
			//-----ADC--------------
			ADCInit();
    70dc:	4b62      	ldr	r3, [pc, #392]	; (7268 <BrakeBoardStateMachineTask+0x3a0>)
    70de:	4798      	blx	r3
			wdt_reset_count();
    70e0:	4b60      	ldr	r3, [pc, #384]	; (7264 <BrakeBoardStateMachineTask+0x39c>)
    70e2:	4798      	blx	r3
			//---------------LORA/FSK radio
			//---------------------
			// SET FCC stuff up
			setTXContinuous = 0;
    70e4:	4b61      	ldr	r3, [pc, #388]	; (726c <BrakeBoardStateMachineTask+0x3a4>)
    70e6:	2200      	movs	r2, #0
    70e8:	701a      	strb	r2, [r3, #0]
			setCW = 0;
    70ea:	4b61      	ldr	r3, [pc, #388]	; (7270 <BrakeBoardStateMachineTask+0x3a8>)
    70ec:	2200      	movs	r2, #0
    70ee:	701a      	strb	r2, [r3, #0]
			setRXContinuous = 0;
    70f0:	4b60      	ldr	r3, [pc, #384]	; (7274 <BrakeBoardStateMachineTask+0x3ac>)
    70f2:	2200      	movs	r2, #0
    70f4:	701a      	strb	r2, [r3, #0]
			for (i=0;i<10;i++)
    70f6:	1c3b      	adds	r3, r7, #0
    70f8:	330f      	adds	r3, #15
    70fa:	2200      	movs	r2, #0
    70fc:	701a      	strb	r2, [r3, #0]
    70fe:	e006      	b.n	710e <BrakeBoardStateMachineTask+0x246>
    7100:	1c3b      	adds	r3, r7, #0
    7102:	330f      	adds	r3, #15
    7104:	781a      	ldrb	r2, [r3, #0]
    7106:	1c3b      	adds	r3, r7, #0
    7108:	330f      	adds	r3, #15
    710a:	3201      	adds	r2, #1
    710c:	701a      	strb	r2, [r3, #0]
    710e:	1c3b      	adds	r3, r7, #0
    7110:	330f      	adds	r3, #15
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	2b09      	cmp	r3, #9
    7116:	d9f3      	bls.n	7100 <BrakeBoardStateMachineTask+0x238>
			{
//				FCCSample();
			}
			if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    7118:	4b57      	ldr	r3, [pc, #348]	; (7278 <BrakeBoardStateMachineTask+0x3b0>)
    711a:	881b      	ldrh	r3, [r3, #0]
    711c:	2b00      	cmp	r3, #0
    711e:	d00a      	beq.n	7136 <BrakeBoardStateMachineTask+0x26e>
    7120:	4b56      	ldr	r3, [pc, #344]	; (727c <BrakeBoardStateMachineTask+0x3b4>)
    7122:	881b      	ldrh	r3, [r3, #0]
    7124:	2b00      	cmp	r3, #0
    7126:	d106      	bne.n	7136 <BrakeBoardStateMachineTask+0x26e>
    7128:	4b55      	ldr	r3, [pc, #340]	; (7280 <BrakeBoardStateMachineTask+0x3b8>)
    712a:	881b      	ldrh	r3, [r3, #0]
    712c:	2b00      	cmp	r3, #0
    712e:	d102      	bne.n	7136 <BrakeBoardStateMachineTask+0x26e>
			{
				setTXContinuous = 1;
    7130:	4b4e      	ldr	r3, [pc, #312]	; (726c <BrakeBoardStateMachineTask+0x3a4>)
    7132:	2201      	movs	r2, #1
    7134:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    7136:	4b50      	ldr	r3, [pc, #320]	; (7278 <BrakeBoardStateMachineTask+0x3b0>)
    7138:	881b      	ldrh	r3, [r3, #0]
    713a:	2b00      	cmp	r3, #0
    713c:	d10a      	bne.n	7154 <BrakeBoardStateMachineTask+0x28c>
    713e:	4b4f      	ldr	r3, [pc, #316]	; (727c <BrakeBoardStateMachineTask+0x3b4>)
    7140:	881b      	ldrh	r3, [r3, #0]
    7142:	2b00      	cmp	r3, #0
    7144:	d006      	beq.n	7154 <BrakeBoardStateMachineTask+0x28c>
    7146:	4b4e      	ldr	r3, [pc, #312]	; (7280 <BrakeBoardStateMachineTask+0x3b8>)
    7148:	881b      	ldrh	r3, [r3, #0]
    714a:	2b00      	cmp	r3, #0
    714c:	d102      	bne.n	7154 <BrakeBoardStateMachineTask+0x28c>
			{
				setRXContinuous = 1;
    714e:	4b49      	ldr	r3, [pc, #292]	; (7274 <BrakeBoardStateMachineTask+0x3ac>)
    7150:	2201      	movs	r2, #1
    7152:	701a      	strb	r2, [r3, #0]
			}
			if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    7154:	4b48      	ldr	r3, [pc, #288]	; (7278 <BrakeBoardStateMachineTask+0x3b0>)
    7156:	881b      	ldrh	r3, [r3, #0]
    7158:	2b00      	cmp	r3, #0
    715a:	d10a      	bne.n	7172 <BrakeBoardStateMachineTask+0x2aa>
    715c:	4b47      	ldr	r3, [pc, #284]	; (727c <BrakeBoardStateMachineTask+0x3b4>)
    715e:	881b      	ldrh	r3, [r3, #0]
    7160:	2b00      	cmp	r3, #0
    7162:	d106      	bne.n	7172 <BrakeBoardStateMachineTask+0x2aa>
    7164:	4b46      	ldr	r3, [pc, #280]	; (7280 <BrakeBoardStateMachineTask+0x3b8>)
    7166:	881b      	ldrh	r3, [r3, #0]
    7168:	2b00      	cmp	r3, #0
    716a:	d002      	beq.n	7172 <BrakeBoardStateMachineTask+0x2aa>
			{
				setCW = 1;
    716c:	4b40      	ldr	r3, [pc, #256]	; (7270 <BrakeBoardStateMachineTask+0x3a8>)
    716e:	2201      	movs	r2, #1
    7170:	701a      	strb	r2, [r3, #0]
			}			
			whichRadio = WHICHRADIO_LORA; 
    7172:	4b44      	ldr	r3, [pc, #272]	; (7284 <BrakeBoardStateMachineTask+0x3bc>)
    7174:	2299      	movs	r2, #153	; 0x99
    7176:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE; 
    7178:	4b43      	ldr	r3, [pc, #268]	; (7288 <BrakeBoardStateMachineTask+0x3c0>)
    717a:	2200      	movs	r2, #0
    717c:	701a      	strb	r2, [r3, #0]
			CommInit();
    717e:	4b43      	ldr	r3, [pc, #268]	; (728c <BrakeBoardStateMachineTask+0x3c4>)
    7180:	4798      	blx	r3
			wdt_reset_count();
    7182:	4b38      	ldr	r3, [pc, #224]	; (7264 <BrakeBoardStateMachineTask+0x39c>)
    7184:	4798      	blx	r3

			system_interrupt_enable_global();
    7186:	4b42      	ldr	r3, [pc, #264]	; (7290 <BrakeBoardStateMachineTask+0x3c8>)
    7188:	4798      	blx	r3
			ADCStart();
    718a:	4b42      	ldr	r3, [pc, #264]	; (7294 <BrakeBoardStateMachineTask+0x3cc>)
    718c:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    718e:	1c3b      	adds	r3, r7, #0
    7190:	330f      	adds	r3, #15
    7192:	2200      	movs	r2, #0
    7194:	701a      	strb	r2, [r3, #0]
    7196:	e008      	b.n	71aa <BrakeBoardStateMachineTask+0x2e2>
			{
				ButtonSample();
    7198:	4b3f      	ldr	r3, [pc, #252]	; (7298 <BrakeBoardStateMachineTask+0x3d0>)
    719a:	4798      	blx	r3
			//------------------
			// make surE the break away has been sampled.
			// ButtonSample - will give you the breakaway inputs, and
			//    the limits.
			//------------------
			for (i=0;i<8;i++)
    719c:	1c3b      	adds	r3, r7, #0
    719e:	330f      	adds	r3, #15
    71a0:	781a      	ldrb	r2, [r3, #0]
    71a2:	1c3b      	adds	r3, r7, #0
    71a4:	330f      	adds	r3, #15
    71a6:	3201      	adds	r2, #1
    71a8:	701a      	strb	r2, [r3, #0]
    71aa:	1c3b      	adds	r3, r7, #0
    71ac:	330f      	adds	r3, #15
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2b07      	cmp	r3, #7
    71b2:	d9f1      	bls.n	7198 <BrakeBoardStateMachineTask+0x2d0>
			{
				ButtonSample();
			}
			
//--- V01_20 added short extend for new setup		
			MotorOff(1);
    71b4:	2001      	movs	r0, #1
    71b6:	4b1e      	ldr	r3, [pc, #120]	; (7230 <BrakeBoardStateMachineTask+0x368>)
    71b8:	4798      	blx	r3
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    71ba:	4b18      	ldr	r3, [pc, #96]	; (721c <BrakeBoardStateMachineTask+0x354>)
    71bc:	791b      	ldrb	r3, [r3, #4]
    71be:	1c1a      	adds	r2, r3, #0
    71c0:	2308      	movs	r3, #8
    71c2:	4013      	ands	r3, r2
    71c4:	d004      	beq.n	71d0 <BrakeBoardStateMachineTask+0x308>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    71c6:	4b10      	ldr	r3, [pc, #64]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    71c8:	2207      	movs	r2, #7
    71ca:	701a      	strb	r2, [r3, #0]
				encoderCountBack = ENCODER_EXTEND_STARTCOUNT;
				action = EXTENDING_BY_ENCODER;
				//----- eoc 1_23				
				brakeChange &= ~BRAKECHANGE_SUPTIME;
			}
			break;
    71cc:	f001 fe31 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
			}	
			else
			{
				brakeState = BRAKESTATE_PRESETUP0;
    71d0:	4b0d      	ldr	r3, [pc, #52]	; (7208 <BrakeBoardStateMachineTask+0x340>)
    71d2:	221c      	movs	r2, #28
    71d4:	701a      	strb	r2, [r3, #0]
				MotorCW();
    71d6:	4b19      	ldr	r3, [pc, #100]	; (723c <BrakeBoardStateMachineTask+0x374>)
    71d8:	4798      	blx	r3
				brakeSupTime = 20;  //3 seconds to EXTEND
    71da:	4b19      	ldr	r3, [pc, #100]	; (7240 <BrakeBoardStateMachineTask+0x378>)
    71dc:	2214      	movs	r2, #20
    71de:	801a      	strh	r2, [r3, #0]
				//----- boc 1_23 ---- control by encode counts
				encoderCountBack = ENCODER_EXTEND_STARTCOUNT;
    71e0:	4b14      	ldr	r3, [pc, #80]	; (7234 <BrakeBoardStateMachineTask+0x36c>)
    71e2:	22af      	movs	r2, #175	; 0xaf
    71e4:	801a      	strh	r2, [r3, #0]
				action = EXTENDING_BY_ENCODER;
    71e6:	4b09      	ldr	r3, [pc, #36]	; (720c <BrakeBoardStateMachineTask+0x344>)
    71e8:	2204      	movs	r2, #4
    71ea:	701a      	strb	r2, [r3, #0]
				//----- eoc 1_23				
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    71ec:	4b15      	ldr	r3, [pc, #84]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	2202      	movs	r2, #2
    71f2:	4393      	bics	r3, r2
    71f4:	b2da      	uxtb	r2, r3
    71f6:	4b13      	ldr	r3, [pc, #76]	; (7244 <BrakeBoardStateMachineTask+0x37c>)
    71f8:	701a      	strb	r2, [r3, #0]
			}
			break;
    71fa:	f001 fe1a 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	20002ea4 	.word	0x20002ea4
    7204:	20002eca 	.word	0x20002eca
    7208:	20002ebf 	.word	0x20002ebf
    720c:	200004ae 	.word	0x200004ae
    7210:	20002ec6 	.word	0x20002ec6
    7214:	200004a8 	.word	0x200004a8
    7218:	20002ebe 	.word	0x20002ebe
    721c:	20003694 	.word	0x20003694
    7220:	0000bbc9 	.word	0x0000bbc9
    7224:	00006cf5 	.word	0x00006cf5
    7228:	2000306a 	.word	0x2000306a
    722c:	0001831c 	.word	0x0001831c
    7230:	00009ac9 	.word	0x00009ac9
    7234:	20002ee2 	.word	0x20002ee2
    7238:	20003068 	.word	0x20003068
    723c:	00009c99 	.word	0x00009c99
    7240:	200036c4 	.word	0x200036c4
    7244:	20002eee 	.word	0x20002eee
    7248:	00009bdd 	.word	0x00009bdd
    724c:	20000001 	.word	0x20000001
    7250:	000069a1 	.word	0x000069a1
    7254:	00006971 	.word	0x00006971
    7258:	20002ece 	.word	0x20002ece
    725c:	200004b2 	.word	0x200004b2
    7260:	20002ef2 	.word	0x20002ef2
    7264:	00005b51 	.word	0x00005b51
    7268:	0000b889 	.word	0x0000b889
    726c:	20003693 	.word	0x20003693
    7270:	20003690 	.word	0x20003690
    7274:	20003691 	.word	0x20003691
    7278:	200004c4 	.word	0x200004c4
    727c:	200004c6 	.word	0x200004c6
    7280:	200004c8 	.word	0x200004c8
    7284:	200036d2 	.word	0x200036d2
    7288:	200004ba 	.word	0x200004ba
    728c:	0000f441 	.word	0x0000f441
    7290:	000066fd 	.word	0x000066fd
    7294:	0000b91d 	.word	0x0000b91d
    7298:	0000bbed 	.word	0x0000bbed
		}
//----- V01_20 below state added 		
		case BRAKESTATE_PRESETUP0:
		{

			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack==0))
    729c:	4bc7      	ldr	r3, [pc, #796]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    729e:	781b      	ldrb	r3, [r3, #0]
    72a0:	1c1a      	adds	r2, r3, #0
    72a2:	2302      	movs	r3, #2
    72a4:	4013      	ands	r3, r2
    72a6:	d103      	bne.n	72b0 <BrakeBoardStateMachineTask+0x3e8>
    72a8:	4bc5      	ldr	r3, [pc, #788]	; (75c0 <BrakeBoardStateMachineTask+0x6f8>)
    72aa:	881b      	ldrh	r3, [r3, #0]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d11d      	bne.n	72ec <BrakeBoardStateMachineTask+0x424>
			{
				MotorOff(1);		
    72b0:	2001      	movs	r0, #1
    72b2:	4bc4      	ldr	r3, [pc, #784]	; (75c4 <BrakeBoardStateMachineTask+0x6fc>)
    72b4:	4798      	blx	r3
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    72b6:	4bc4      	ldr	r3, [pc, #784]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    72b8:	791b      	ldrb	r3, [r3, #4]
    72ba:	1c1a      	adds	r2, r3, #0
    72bc:	2308      	movs	r3, #8
    72be:	4013      	ands	r3, r2
    72c0:	d003      	beq.n	72ca <BrakeBoardStateMachineTask+0x402>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    72c2:	4bc2      	ldr	r3, [pc, #776]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    72c4:	2207      	movs	r2, #7
    72c6:	701a      	strb	r2, [r3, #0]
    72c8:	e010      	b.n	72ec <BrakeBoardStateMachineTask+0x424>
				}
				else
				{				
					brakeState = BRAKESTATE_PRESETUP;
    72ca:	4bc0      	ldr	r3, [pc, #768]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    72cc:	2203      	movs	r2, #3
    72ce:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    72d0:	4bbf      	ldr	r3, [pc, #764]	; (75d0 <BrakeBoardStateMachineTask+0x708>)
    72d2:	4798      	blx	r3
					brakeSupTime = 150;  //5 seconds to retract
    72d4:	4bbf      	ldr	r3, [pc, #764]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    72d6:	2296      	movs	r2, #150	; 0x96
    72d8:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    72da:	4bb8      	ldr	r3, [pc, #736]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	2202      	movs	r2, #2
    72e0:	4393      	bics	r3, r2
    72e2:	b2da      	uxtb	r2, r3
    72e4:	4bb5      	ldr	r3, [pc, #724]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    72e6:	701a      	strb	r2, [r3, #0]
				}
			}
			break;			
    72e8:	f001 fda3 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    72ec:	f001 fda1 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_PRESETUP:
		{

			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    72f0:	4bb2      	ldr	r3, [pc, #712]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	1c1a      	adds	r2, r3, #0
    72f6:	2302      	movs	r3, #2
    72f8:	4013      	ands	r3, r2
    72fa:	d107      	bne.n	730c <BrakeBoardStateMachineTask+0x444>
			((hlimitState ==0)||(homeLimit == HOME_IN)))  //V01_26
    72fc:	4bb6      	ldr	r3, [pc, #728]	; (75d8 <BrakeBoardStateMachineTask+0x710>)
    72fe:	781b      	ldrb	r3, [r3, #0]
			break;			
		}
		case BRAKESTATE_PRESETUP:
		{

			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7300:	2b00      	cmp	r3, #0
    7302:	d003      	beq.n	730c <BrakeBoardStateMachineTask+0x444>
			((hlimitState ==0)||(homeLimit == HOME_IN)))  //V01_26
    7304:	4bb5      	ldr	r3, [pc, #724]	; (75dc <BrakeBoardStateMachineTask+0x714>)
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	2b00      	cmp	r3, #0
    730a:	d13b      	bne.n	7384 <BrakeBoardStateMachineTask+0x4bc>
			{
				MotorOff(1);
    730c:	2001      	movs	r0, #1
    730e:	4bad      	ldr	r3, [pc, #692]	; (75c4 <BrakeBoardStateMachineTask+0x6fc>)
    7310:	4798      	blx	r3
				brakeSupTime = 0;
    7312:	4bb0      	ldr	r3, [pc, #704]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    7314:	2200      	movs	r2, #0
    7316:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7318:	4ba8      	ldr	r3, [pc, #672]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    731a:	781b      	ldrb	r3, [r3, #0]
    731c:	2202      	movs	r2, #2
    731e:	4393      	bics	r3, r2
    7320:	b2da      	uxtb	r2, r3
    7322:	4ba6      	ldr	r3, [pc, #664]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    7324:	701a      	strb	r2, [r3, #0]
							if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7326:	4ba8      	ldr	r3, [pc, #672]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    7328:	791b      	ldrb	r3, [r3, #4]
    732a:	1c1a      	adds	r2, r3, #0
    732c:	2308      	movs	r3, #8
    732e:	4013      	ands	r3, r2
    7330:	d003      	beq.n	733a <BrakeBoardStateMachineTask+0x472>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    7332:	4ba6      	ldr	r3, [pc, #664]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    7334:	2207      	movs	r2, #7
    7336:	701a      	strb	r2, [r3, #0]
    7338:	e024      	b.n	7384 <BrakeBoardStateMachineTask+0x4bc>
				}
				else
				{				
					if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    733a:	2000      	movs	r0, #0
    733c:	4ba8      	ldr	r3, [pc, #672]	; (75e0 <BrakeBoardStateMachineTask+0x718>)
    733e:	4798      	blx	r3
    7340:	1c03      	adds	r3, r0, #0
    7342:	2b00      	cmp	r3, #0
    7344:	d103      	bne.n	734e <BrakeBoardStateMachineTask+0x486>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    7346:	4ba1      	ldr	r3, [pc, #644]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    7348:	2207      	movs	r2, #7
    734a:	701a      	strb	r2, [r3, #0]
    734c:	e01a      	b.n	7384 <BrakeBoardStateMachineTask+0x4bc>
					}
					else
					{
						if ((brakeStatus.BrakeState & BRAKESTATE_NOTSETUP)== 0)
    734e:	4b9e      	ldr	r3, [pc, #632]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    7350:	791b      	ldrb	r3, [r3, #4]
    7352:	1c1a      	adds	r2, r3, #0
    7354:	2304      	movs	r3, #4
    7356:	4013      	ands	r3, r2
    7358:	d10f      	bne.n	737a <BrakeBoardStateMachineTask+0x4b2>
						{
							MotorNeedNewBaseline();
    735a:	4ba2      	ldr	r3, [pc, #648]	; (75e4 <BrakeBoardStateMachineTask+0x71c>)
    735c:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;	
    735e:	4b9d      	ldr	r3, [pc, #628]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    7360:	2264      	movs	r2, #100	; 0x64
    7362:	801a      	strh	r2, [r3, #0]
							brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7364:	4b99      	ldr	r3, [pc, #612]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    7366:	220b      	movs	r2, #11
    7368:	701a      	strb	r2, [r3, #0]
							brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    736a:	4b97      	ldr	r3, [pc, #604]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    736c:	791b      	ldrb	r3, [r3, #4]
    736e:	2204      	movs	r2, #4
    7370:	4393      	bics	r3, r2
    7372:	b2da      	uxtb	r2, r3
    7374:	4b94      	ldr	r3, [pc, #592]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    7376:	711a      	strb	r2, [r3, #4]
    7378:	e004      	b.n	7384 <BrakeBoardStateMachineTask+0x4bc>
						}
						else
						{
							brakeState = BRAKESTATE_WAITONSETUP;
    737a:	4b94      	ldr	r3, [pc, #592]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    737c:	2204      	movs	r2, #4
    737e:	701a      	strb	r2, [r3, #0]
						}	 		
					}
				}
			}
			break;
    7380:	f001 fd57 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7384:	f001 fd55 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		case BRAKESTATE_WAITONSETUP:
		case BRAKESTATE_WAITONSETUPLOADCELL:		
		{
			//----- boc V01_23 check for force on pedal before setup
//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
			itemp3 = LoadCell(BRAKESTATE_WAITONSETUP);
    7388:	1dbc      	adds	r4, r7, #6
    738a:	2004      	movs	r0, #4
    738c:	4b96      	ldr	r3, [pc, #600]	; (75e8 <BrakeBoardStateMachineTask+0x720>)
    738e:	4798      	blx	r3
    7390:	1c03      	adds	r3, r0, #0
    7392:	8023      	strh	r3, [r4, #0]
			if (itemp3>0x60)								
    7394:	1dbb      	adds	r3, r7, #6
    7396:	881b      	ldrh	r3, [r3, #0]
    7398:	2b60      	cmp	r3, #96	; 0x60
    739a:	d903      	bls.n	73a4 <BrakeBoardStateMachineTask+0x4dc>
			{
				brakeState = BRAKESTATE_WAITONSETUPLOADCELL;
    739c:	4b8b      	ldr	r3, [pc, #556]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    739e:	221d      	movs	r2, #29
    73a0:	701a      	strb	r2, [r3, #0]
    73a2:	e02d      	b.n	7400 <BrakeBoardStateMachineTask+0x538>
			}	
			else
			//---- eoc V01_23 
			{
				//v01_56 add to check if input voltage is present. 
				if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    73a4:	4b88      	ldr	r3, [pc, #544]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    73a6:	791b      	ldrb	r3, [r3, #4]
    73a8:	1c1a      	adds	r2, r3, #0
    73aa:	2308      	movs	r3, #8
    73ac:	4013      	ands	r3, r2
    73ae:	d127      	bne.n	7400 <BrakeBoardStateMachineTask+0x538>
				{
					brakeState = BRAKESTATE_WAITONSETUP;
    73b0:	4b86      	ldr	r3, [pc, #536]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    73b2:	2204      	movs	r2, #4
    73b4:	701a      	strb	r2, [r3, #0]
					if (setup_pressed != 0)
    73b6:	4b8d      	ldr	r3, [pc, #564]	; (75ec <BrakeBoardStateMachineTask+0x724>)
    73b8:	881b      	ldrh	r3, [r3, #0]
    73ba:	2b00      	cmp	r3, #0
    73bc:	d020      	beq.n	7400 <BrakeBoardStateMachineTask+0x538>
					{
						brakeState = BRAKESTATE_SETUPACTIVE;
    73be:	4b83      	ldr	r3, [pc, #524]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    73c0:	2205      	movs	r2, #5
    73c2:	701a      	strb	r2, [r3, #0]
						brakeSetupExtend = 0;
    73c4:	4b8a      	ldr	r3, [pc, #552]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    73c6:	2200      	movs	r2, #0
    73c8:	801a      	strh	r2, [r3, #0]
						maxCurrentRead = 0;
    73ca:	4b8a      	ldr	r3, [pc, #552]	; (75f4 <BrakeBoardStateMachineTask+0x72c>)
    73cc:	2200      	movs	r2, #0
    73ce:	801a      	strh	r2, [r3, #0]
						maxFSRRead = 0; //V01_41 
    73d0:	4b89      	ldr	r3, [pc, #548]	; (75f8 <BrakeBoardStateMachineTask+0x730>)
    73d2:	2200      	movs	r2, #0
    73d4:	801a      	strh	r2, [r3, #0]
						setupExtendTriggered = 0;
    73d6:	4b89      	ldr	r3, [pc, #548]	; (75fc <BrakeBoardStateMachineTask+0x734>)
    73d8:	2200      	movs	r2, #0
    73da:	701a      	strb	r2, [r3, #0]
						if (flimitState != 0)
    73dc:	4b88      	ldr	r3, [pc, #544]	; (7600 <BrakeBoardStateMachineTask+0x738>)
    73de:	781b      	ldrb	r3, [r3, #0]
    73e0:	2b00      	cmp	r3, #0
    73e2:	d00d      	beq.n	7400 <BrakeBoardStateMachineTask+0x538>
						{
							MotorCW();
    73e4:	4b87      	ldr	r3, [pc, #540]	; (7604 <BrakeBoardStateMachineTask+0x73c>)
    73e6:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;   
    73e8:	4b7a      	ldr	r3, [pc, #488]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    73ea:	2264      	movs	r2, #100	; 0x64
    73ec:	801a      	strh	r2, [r3, #0]
							brakeChange &= ~BRAKECHANGE_SUPTIME;
    73ee:	4b73      	ldr	r3, [pc, #460]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	2202      	movs	r2, #2
    73f4:	4393      	bics	r3, r2
    73f6:	b2da      	uxtb	r2, r3
    73f8:	4b70      	ldr	r3, [pc, #448]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    73fa:	701a      	strb	r2, [r3, #0]
						}
					}
				}		
			} 
			break;
    73fc:	f001 fd19 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7400:	f001 fd17 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
// ACTIVE SETUP STATES
// - SETUP key has been pressed and now doing the setup. The first EXTEND CW has 
// been started from the WAITONSETUP state. 		
		case BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND:
		{
						if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7404:	4b70      	ldr	r3, [pc, #448]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    7406:	791b      	ldrb	r3, [r3, #4]
    7408:	1c1a      	adds	r2, r3, #0
    740a:	2308      	movs	r3, #8
    740c:	4013      	ands	r3, r2
    740e:	d003      	beq.n	7418 <BrakeBoardStateMachineTask+0x550>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    7410:	4b6e      	ldr	r3, [pc, #440]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    7412:	2207      	movs	r2, #7
    7414:	701a      	strb	r2, [r3, #0]
    7416:	e01f      	b.n	7458 <BrakeBoardStateMachineTask+0x590>
			}	
			else
			{	
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0) 
    7418:	4b68      	ldr	r3, [pc, #416]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	1c1a      	adds	r2, r3, #0
    741e:	2302      	movs	r3, #2
    7420:	4013      	ands	r3, r2
    7422:	d019      	beq.n	7458 <BrakeBoardStateMachineTask+0x590>
				{
				 
					brakeSupTime = 0;
    7424:	4b6b      	ldr	r3, [pc, #428]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    7426:	2200      	movs	r2, #0
    7428:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;		
    742a:	4b64      	ldr	r3, [pc, #400]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    742c:	781b      	ldrb	r3, [r3, #0]
    742e:	2202      	movs	r2, #2
    7430:	4393      	bics	r3, r2
    7432:	b2da      	uxtb	r2, r3
    7434:	4b61      	ldr	r3, [pc, #388]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    7436:	701a      	strb	r2, [r3, #0]
					brakeSetupExtend++;
    7438:	4b6d      	ldr	r3, [pc, #436]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    743a:	881b      	ldrh	r3, [r3, #0]
    743c:	3301      	adds	r3, #1
    743e:	b29a      	uxth	r2, r3
    7440:	4b6b      	ldr	r3, [pc, #428]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    7442:	801a      	strh	r2, [r3, #0]
					MotorCCW();
    7444:	4b62      	ldr	r3, [pc, #392]	; (75d0 <BrakeBoardStateMachineTask+0x708>)
    7446:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;  	
    7448:	4b62      	ldr	r3, [pc, #392]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    744a:	2264      	movs	r2, #100	; 0x64
    744c:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_SETUPACTIVE;
    744e:	4b5f      	ldr	r3, [pc, #380]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    7450:	2205      	movs	r2, #5
    7452:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    7454:	f001 fced 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7458:	f001 fceb 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT:
		{
						if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    745c:	4b5a      	ldr	r3, [pc, #360]	; (75c8 <BrakeBoardStateMachineTask+0x700>)
    745e:	791b      	ldrb	r3, [r3, #4]
    7460:	1c1a      	adds	r2, r3, #0
    7462:	2308      	movs	r3, #8
    7464:	4013      	ands	r3, r2
    7466:	d003      	beq.n	7470 <BrakeBoardStateMachineTask+0x5a8>
			{
				brakeState = BRAKESTATE_ERROR_RETRACT;
    7468:	4b58      	ldr	r3, [pc, #352]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    746a:	2207      	movs	r2, #7
    746c:	701a      	strb	r2, [r3, #0]
    746e:	e01f      	b.n	74b0 <BrakeBoardStateMachineTask+0x5e8>
			}			
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7470:	4b52      	ldr	r3, [pc, #328]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	1c1a      	adds	r2, r3, #0
    7476:	2302      	movs	r3, #2
    7478:	4013      	ands	r3, r2
    747a:	d019      	beq.n	74b0 <BrakeBoardStateMachineTask+0x5e8>
				{
				
					brakeSupTime = 0;
    747c:	4b55      	ldr	r3, [pc, #340]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    747e:	2200      	movs	r2, #0
    7480:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7482:	4b4e      	ldr	r3, [pc, #312]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    7484:	781b      	ldrb	r3, [r3, #0]
    7486:	2202      	movs	r2, #2
    7488:	4393      	bics	r3, r2
    748a:	b2da      	uxtb	r2, r3
    748c:	4b4b      	ldr	r3, [pc, #300]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    748e:	701a      	strb	r2, [r3, #0]
					brakeSetupExtend++;
    7490:	4b57      	ldr	r3, [pc, #348]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    7492:	881b      	ldrh	r3, [r3, #0]
    7494:	3301      	adds	r3, #1
    7496:	b29a      	uxth	r2, r3
    7498:	4b55      	ldr	r3, [pc, #340]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    749a:	801a      	strh	r2, [r3, #0]
					MotorCW();
    749c:	4b59      	ldr	r3, [pc, #356]	; (7604 <BrakeBoardStateMachineTask+0x73c>)
    749e:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;  
    74a0:	4b4c      	ldr	r3, [pc, #304]	; (75d4 <BrakeBoardStateMachineTask+0x70c>)
    74a2:	2264      	movs	r2, #100	; 0x64
    74a4:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_SETUPACTIVE;
    74a6:	4b49      	ldr	r3, [pc, #292]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    74a8:	2205      	movs	r2, #5
    74aa:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    74ac:	f001 fcc1 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    74b0:	f001 fcbf 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
		case BRAKESTATE_SETUPACTIVE:
		{
			done = 0; 
    74b4:	1c3b      	adds	r3, r7, #0
    74b6:	330e      	adds	r3, #14
    74b8:	2200      	movs	r2, #0
    74ba:	701a      	strb	r2, [r3, #0]
//			if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
//			{
//				done = 1; 
//				brakeState = BRAKESTATE_POWERINGUP;
//			}
			if (brakeSetupExtend==(MAX_BRAKESETUPEXTEND-1))
    74bc:	4b4c      	ldr	r3, [pc, #304]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    74be:	881b      	ldrh	r3, [r3, #0]
    74c0:	2b08      	cmp	r3, #8
    74c2:	d130      	bne.n	7526 <BrakeBoardStateMachineTask+0x65e>
			{
				//building table 
				if ((brakeChange & BRAKECHANGE_TABLESAMPLE)!= 0)
    74c4:	4b3d      	ldr	r3, [pc, #244]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    74c6:	781b      	ldrb	r3, [r3, #0]
    74c8:	1c1a      	adds	r2, r3, #0
    74ca:	2304      	movs	r3, #4
    74cc:	4013      	ands	r3, r2
    74ce:	d02a      	beq.n	7526 <BrakeBoardStateMachineTask+0x65e>
				{
					brakeChange &= ~BRAKECHANGE_TABLESAMPLE; 
    74d0:	4b3a      	ldr	r3, [pc, #232]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	2204      	movs	r2, #4
    74d6:	4393      	bics	r3, r2
    74d8:	b2da      	uxtb	r2, r3
    74da:	4b38      	ldr	r3, [pc, #224]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    74dc:	701a      	strb	r2, [r3, #0]
					if (buildTableOffset >= MAX_BUILDTABLE)
    74de:	4b4a      	ldr	r3, [pc, #296]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    74e0:	881a      	ldrh	r2, [r3, #0]
    74e2:	4b4a      	ldr	r3, [pc, #296]	; (760c <BrakeBoardStateMachineTask+0x744>)
    74e4:	429a      	cmp	r2, r3
    74e6:	d902      	bls.n	74ee <BrakeBoardStateMachineTask+0x626>
					{
						buildTableOffset = 0;
    74e8:	4b47      	ldr	r3, [pc, #284]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    74ea:	2200      	movs	r2, #0
    74ec:	801a      	strh	r2, [r3, #0]
					}
					buildTable.Current[buildTableOffset] = ADCGetReading(ADC_INPUT_CURRENT); 
    74ee:	4b46      	ldr	r3, [pc, #280]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    74f0:	881b      	ldrh	r3, [r3, #0]
    74f2:	1c1c      	adds	r4, r3, #0
    74f4:	2001      	movs	r0, #1
    74f6:	4b46      	ldr	r3, [pc, #280]	; (7610 <BrakeBoardStateMachineTask+0x748>)
    74f8:	4798      	blx	r3
    74fa:	1c03      	adds	r3, r0, #0
    74fc:	1c19      	adds	r1, r3, #0
    74fe:	4b45      	ldr	r3, [pc, #276]	; (7614 <BrakeBoardStateMachineTask+0x74c>)
    7500:	0062      	lsls	r2, r4, #1
    7502:	52d1      	strh	r1, [r2, r3]
					buildTable.EncoderCount[buildTableOffset] = encoderCount;
    7504:	4b40      	ldr	r3, [pc, #256]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    7506:	881b      	ldrh	r3, [r3, #0]
    7508:	1c1a      	adds	r2, r3, #0
    750a:	4b43      	ldr	r3, [pc, #268]	; (7618 <BrakeBoardStateMachineTask+0x750>)
    750c:	8819      	ldrh	r1, [r3, #0]
    750e:	4b41      	ldr	r3, [pc, #260]	; (7614 <BrakeBoardStateMachineTask+0x74c>)
    7510:	2080      	movs	r0, #128	; 0x80
    7512:	00c0      	lsls	r0, r0, #3
    7514:	1812      	adds	r2, r2, r0
    7516:	0052      	lsls	r2, r2, #1
    7518:	52d1      	strh	r1, [r2, r3]
					buildTableOffset++;
    751a:	4b3b      	ldr	r3, [pc, #236]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    751c:	881b      	ldrh	r3, [r3, #0]
    751e:	3301      	adds	r3, #1
    7520:	b29a      	uxth	r2, r3
    7522:	4b39      	ldr	r3, [pc, #228]	; (7608 <BrakeBoardStateMachineTask+0x740>)
    7524:	801a      	strh	r2, [r3, #0]
				}
			}

			if (done == 0)
    7526:	1c3b      	adds	r3, r7, #0
    7528:	330e      	adds	r3, #14
    752a:	781b      	ldrb	r3, [r3, #0]
    752c:	2b00      	cmp	r3, #0
    752e:	d000      	beq.n	7532 <BrakeBoardStateMachineTask+0x66a>
    7530:	e179      	b.n	7826 <BrakeBoardStateMachineTask+0x95e>
			{
			//---------------------------------
			// brakeSetupExtend
			// * counts 0,2,4,6,8 - extend
			// * counts 1,3,5,7,9 - retract
			if ((brakeSetupExtend & 0x01)==0)
    7532:	4b2f      	ldr	r3, [pc, #188]	; (75f0 <BrakeBoardStateMachineTask+0x728>)
    7534:	881b      	ldrh	r3, [r3, #0]
    7536:	1c1a      	adds	r2, r3, #0
    7538:	2301      	movs	r3, #1
    753a:	4013      	ands	r3, r2
    753c:	d104      	bne.n	7548 <BrakeBoardStateMachineTask+0x680>
			{
				forceExtend = 0x00; 
    753e:	1c3b      	adds	r3, r7, #0
    7540:	330d      	adds	r3, #13
    7542:	2200      	movs	r2, #0
    7544:	701a      	strb	r2, [r3, #0]
    7546:	e003      	b.n	7550 <BrakeBoardStateMachineTask+0x688>
			}
			else
			{
				forceExtend = 0x01;
    7548:	1c3b      	adds	r3, r7, #0
    754a:	330d      	adds	r3, #13
    754c:	2201      	movs	r2, #1
    754e:	701a      	strb	r2, [r3, #0]
			}
			switch (forceExtend)   //brakeSetupExtend)
    7550:	1c3b      	adds	r3, r7, #0
    7552:	330d      	adds	r3, #13
    7554:	781b      	ldrb	r3, [r3, #0]
    7556:	2b09      	cmp	r3, #9
    7558:	d901      	bls.n	755e <BrakeBoardStateMachineTask+0x696>
    755a:	f001 fc69 	bl	8e30 <BrakeBoardStateMachineTask+0x1f68>
    755e:	009a      	lsls	r2, r3, #2
    7560:	4b2e      	ldr	r3, [pc, #184]	; (761c <BrakeBoardStateMachineTask+0x754>)
    7562:	18d3      	adds	r3, r2, r3
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	469f      	mov	pc, r3
				case 2:
				case 4:
				case 6:
				case 8:
				{
					if (flimitState == 0)
    7568:	4b25      	ldr	r3, [pc, #148]	; (7600 <BrakeBoardStateMachineTask+0x738>)
    756a:	781b      	ldrb	r3, [r3, #0]
    756c:	2b00      	cmp	r3, #0
    756e:	d117      	bne.n	75a0 <BrakeBoardStateMachineTask+0x6d8>
					{
						if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    7570:	2001      	movs	r0, #1
    7572:	4b1b      	ldr	r3, [pc, #108]	; (75e0 <BrakeBoardStateMachineTask+0x718>)
    7574:	4798      	blx	r3
    7576:	1c03      	adds	r3, r0, #0
    7578:	2b00      	cmp	r3, #0
    757a:	d103      	bne.n	7584 <BrakeBoardStateMachineTask+0x6bc>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    757c:	4b13      	ldr	r3, [pc, #76]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    757e:	2207      	movs	r2, #7
    7580:	701a      	strb	r2, [r3, #0]
    7582:	e005      	b.n	7590 <BrakeBoardStateMachineTask+0x6c8>
						}		
						else
						{	
							setupExtendTriggered = 1;		
    7584:	4b1d      	ldr	r3, [pc, #116]	; (75fc <BrakeBoardStateMachineTask+0x734>)
    7586:	2201      	movs	r2, #1
    7588:	701a      	strb	r2, [r3, #0]
							brakeState = BRAKESTATE_ERROR_RETRACT;				
    758a:	4b10      	ldr	r3, [pc, #64]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    758c:	2207      	movs	r2, #7
    758e:	701a      	strb	r2, [r3, #0]
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7590:	4b0a      	ldr	r3, [pc, #40]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    7592:	781b      	ldrb	r3, [r3, #0]
    7594:	2202      	movs	r2, #2
    7596:	4393      	bics	r3, r2
    7598:	b2da      	uxtb	r2, r3
    759a:	4b08      	ldr	r3, [pc, #32]	; (75bc <BrakeBoardStateMachineTask+0x6f4>)
    759c:	701a      	strb	r2, [r3, #0]
    759e:	e0a0      	b.n	76e2 <BrakeBoardStateMachineTask+0x81a>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    75a0:	2002      	movs	r0, #2
    75a2:	4b0f      	ldr	r3, [pc, #60]	; (75e0 <BrakeBoardStateMachineTask+0x718>)
    75a4:	4798      	blx	r3
    75a6:	1c03      	adds	r3, r0, #0
    75a8:	2b00      	cmp	r3, #0
    75aa:	d13b      	bne.n	7624 <BrakeBoardStateMachineTask+0x75c>
    75ac:	4b1c      	ldr	r3, [pc, #112]	; (7620 <BrakeBoardStateMachineTask+0x758>)
    75ae:	881b      	ldrh	r3, [r3, #0]
    75b0:	2b00      	cmp	r3, #0
    75b2:	d137      	bne.n	7624 <BrakeBoardStateMachineTask+0x75c>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;			
    75b4:	4b05      	ldr	r3, [pc, #20]	; (75cc <BrakeBoardStateMachineTask+0x704>)
    75b6:	2207      	movs	r2, #7
    75b8:	701a      	strb	r2, [r3, #0]
    75ba:	e092      	b.n	76e2 <BrakeBoardStateMachineTask+0x81a>
    75bc:	20002eee 	.word	0x20002eee
    75c0:	20002ee2 	.word	0x20002ee2
    75c4:	00009ac9 	.word	0x00009ac9
    75c8:	20003694 	.word	0x20003694
    75cc:	20002ebf 	.word	0x20002ebf
    75d0:	00009bdd 	.word	0x00009bdd
    75d4:	200036c4 	.word	0x200036c4
    75d8:	20003068 	.word	0x20003068
    75dc:	20000001 	.word	0x20000001
    75e0:	000069a1 	.word	0x000069a1
    75e4:	00008e95 	.word	0x00008e95
    75e8:	00006851 	.word	0x00006851
    75ec:	2000306e 	.word	0x2000306e
    75f0:	20002ecc 	.word	0x20002ecc
    75f4:	200004be 	.word	0x200004be
    75f8:	200004c0 	.word	0x200004c0
    75fc:	200004b1 	.word	0x200004b1
    7600:	20003072 	.word	0x20003072
    7604:	00009c99 	.word	0x00009c99
    7608:	20001e9c 	.word	0x20001e9c
    760c:	000003ff 	.word	0x000003ff
    7610:	0000b409 	.word	0x0000b409
    7614:	20000e9c 	.word	0x20000e9c
    7618:	200004a8 	.word	0x200004a8
    761c:	000183b0 	.word	0x000183b0
    7620:	20002eb2 	.word	0x20002eb2
						}	
						else
						{
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7624:	4bce      	ldr	r3, [pc, #824]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7626:	781b      	ldrb	r3, [r3, #0]
    7628:	1c1a      	adds	r2, r3, #0
    762a:	2302      	movs	r3, #2
    762c:	4013      	ands	r3, r2
    762e:	d01d      	beq.n	766c <BrakeBoardStateMachineTask+0x7a4>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    7630:	4bcb      	ldr	r3, [pc, #812]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7632:	781b      	ldrb	r3, [r3, #0]
    7634:	2202      	movs	r2, #2
    7636:	4393      	bics	r3, r2
    7638:	b2da      	uxtb	r2, r3
    763a:	4bc9      	ldr	r3, [pc, #804]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    763c:	701a      	strb	r2, [r3, #0]
								MotorOff(1);
    763e:	2001      	movs	r0, #1
    7640:	4bc8      	ldr	r3, [pc, #800]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7642:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    7644:	2002      	movs	r0, #2
    7646:	4bc8      	ldr	r3, [pc, #800]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    7648:	4798      	blx	r3
    764a:	1c03      	adds	r3, r0, #0
    764c:	2b00      	cmp	r3, #0
    764e:	d103      	bne.n	7658 <BrakeBoardStateMachineTask+0x790>
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    7650:	4bc6      	ldr	r3, [pc, #792]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    7652:	2207      	movs	r2, #7
    7654:	701a      	strb	r2, [r3, #0]
    7656:	e002      	b.n	765e <BrakeBoardStateMachineTask+0x796>
								}
								else
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    7658:	4bc4      	ldr	r3, [pc, #784]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    765a:	2207      	movs	r2, #7
    765c:	701a      	strb	r2, [r3, #0]
								}	
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    765e:	4bc0      	ldr	r3, [pc, #768]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7660:	781b      	ldrb	r3, [r3, #0]
    7662:	2202      	movs	r2, #2
    7664:	4393      	bics	r3, r2
    7666:	b2da      	uxtb	r2, r3
    7668:	4bbd      	ldr	r3, [pc, #756]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    766a:	701a      	strb	r2, [r3, #0]
							}			
							if (motorRunTime == 0)
    766c:	4bc0      	ldr	r3, [pc, #768]	; (7970 <BrakeBoardStateMachineTask+0xaa8>)
    766e:	881b      	ldrh	r3, [r3, #0]
    7670:	2b00      	cmp	r3, #0
    7672:	d136      	bne.n	76e2 <BrakeBoardStateMachineTask+0x81a>
								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
//								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
//								((brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))								
#else								
								setupCurrent = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet);
    7674:	4bbf      	ldr	r3, [pc, #764]	; (7974 <BrakeBoardStateMachineTask+0xaac>)
    7676:	7d9b      	ldrb	r3, [r3, #22]
    7678:	1c18      	adds	r0, r3, #0
    767a:	4bbf      	ldr	r3, [pc, #764]	; (7978 <BrakeBoardStateMachineTask+0xab0>)
    767c:	4798      	blx	r3
    767e:	1c03      	adds	r3, r0, #0
    7680:	1c1a      	adds	r2, r3, #0
    7682:	4bbe      	ldr	r3, [pc, #760]	; (797c <BrakeBoardStateMachineTask+0xab4>)
    7684:	801a      	strh	r2, [r3, #0]
								if (((maxCurrentRead > setupCurrent)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||								
    7686:	4bbe      	ldr	r3, [pc, #760]	; (7980 <BrakeBoardStateMachineTask+0xab8>)
    7688:	881a      	ldrh	r2, [r3, #0]
    768a:	4bbc      	ldr	r3, [pc, #752]	; (797c <BrakeBoardStateMachineTask+0xab4>)
    768c:	881b      	ldrh	r3, [r3, #0]
    768e:	429a      	cmp	r2, r3
    7690:	d903      	bls.n	769a <BrakeBoardStateMachineTask+0x7d2>
    7692:	4bbc      	ldr	r3, [pc, #752]	; (7984 <BrakeBoardStateMachineTask+0xabc>)
    7694:	881b      	ldrh	r3, [r3, #0]
    7696:	2b08      	cmp	r3, #8
    7698:	d108      	bne.n	76ac <BrakeBoardStateMachineTask+0x7e4>
//v1.05							if (((maxCurrentRead > CURRENT_THRESHOLD_SETUP)&&(brakeSetupExtend!= 8))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
    769a:	4bb9      	ldr	r3, [pc, #740]	; (7980 <BrakeBoardStateMachineTask+0xab8>)
    769c:	881a      	ldrh	r2, [r3, #0]
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
//								if (((maxFSRRead > setupFSR)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||
//								((brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))								
#else								
								setupCurrent = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet);
								if (((maxCurrentRead > setupCurrent)&&(brakeSetupExtend!= (MAX_BRAKESETUPEXTEND-1)))||								
    769e:	4bba      	ldr	r3, [pc, #744]	; (7988 <BrakeBoardStateMachineTask+0xac0>)
    76a0:	429a      	cmp	r2, r3
    76a2:	d91e      	bls.n	76e2 <BrakeBoardStateMachineTask+0x81a>
//v1.05							if (((maxCurrentRead > CURRENT_THRESHOLD_SETUP)&&(brakeSetupExtend!= 8))||
								((maxCurrentRead > CURRENT_THRESHOLD_TABLEBUILD)&&(brakeSetupExtend== (MAX_BRAKESETUPEXTEND-1))))
    76a4:	4bb7      	ldr	r3, [pc, #732]	; (7984 <BrakeBoardStateMachineTask+0xabc>)
    76a6:	881b      	ldrh	r3, [r3, #0]
    76a8:	2b08      	cmp	r3, #8
    76aa:	d11a      	bne.n	76e2 <BrakeBoardStateMachineTask+0x81a>
#endif
								{
									MotorOff(1);
    76ac:	2001      	movs	r0, #1
    76ae:	4bad      	ldr	r3, [pc, #692]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    76b0:	4798      	blx	r3
									if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    76b2:	2002      	movs	r0, #2
    76b4:	4bac      	ldr	r3, [pc, #688]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    76b6:	4798      	blx	r3
    76b8:	1c03      	adds	r3, r0, #0
    76ba:	2b00      	cmp	r3, #0
    76bc:	d103      	bne.n	76c6 <BrakeBoardStateMachineTask+0x7fe>
									{
										brakeState = BRAKESTATE_ERROR_RETRACT;
    76be:	4bab      	ldr	r3, [pc, #684]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    76c0:	2207      	movs	r2, #7
    76c2:	701a      	strb	r2, [r3, #0]
    76c4:	e005      	b.n	76d2 <BrakeBoardStateMachineTask+0x80a>
									}
									else
									{								
										brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_EXTEND; 										
    76c6:	4ba9      	ldr	r3, [pc, #676]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    76c8:	220e      	movs	r2, #14
    76ca:	701a      	strb	r2, [r3, #0]
										brakeSupTime = BRAKESUPTIME_SETUPPAUSE;  									
    76cc:	4baf      	ldr	r3, [pc, #700]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    76ce:	2214      	movs	r2, #20
    76d0:	801a      	strh	r2, [r3, #0]
									}
									brakeChange &= ~BRAKECHANGE_SUPTIME;
    76d2:	4ba3      	ldr	r3, [pc, #652]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2202      	movs	r2, #2
    76d8:	4393      	bics	r3, r2
    76da:	b2da      	uxtb	r2, r3
    76dc:	4ba0      	ldr	r3, [pc, #640]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    76de:	701a      	strb	r2, [r3, #0]
								}
							}
						}
					}
					break;
    76e0:	e0a1      	b.n	7826 <BrakeBoardStateMachineTask+0x95e>
    76e2:	e0a0      	b.n	7826 <BrakeBoardStateMachineTask+0x95e>
				case 3:
				case 5:
				case 7:
				case 9:
				{
					if ((hlimitState == 0)||(homeLimit== HOME_IN)) //V01_26
    76e4:	4baa      	ldr	r3, [pc, #680]	; (7990 <BrakeBoardStateMachineTask+0xac8>)
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d003      	beq.n	76f4 <BrakeBoardStateMachineTask+0x82c>
    76ec:	4ba9      	ldr	r3, [pc, #676]	; (7994 <BrakeBoardStateMachineTask+0xacc>)
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	2b00      	cmp	r3, #0
    76f2:	d13f      	bne.n	7774 <BrakeBoardStateMachineTask+0x8ac>
					{
						if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    76f4:	2000      	movs	r0, #0
    76f6:	4b9c      	ldr	r3, [pc, #624]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    76f8:	4798      	blx	r3
    76fa:	1c03      	adds	r3, r0, #0
    76fc:	2b00      	cmp	r3, #0
    76fe:	d106      	bne.n	770e <BrakeBoardStateMachineTask+0x846>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    7700:	4b9a      	ldr	r3, [pc, #616]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    7702:	2207      	movs	r2, #7
    7704:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    7706:	4ba1      	ldr	r3, [pc, #644]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7708:	2200      	movs	r2, #0
    770a:	801a      	strh	r2, [r3, #0]
    770c:	e02a      	b.n	7764 <BrakeBoardStateMachineTask+0x89c>
						}
						else
						{		
							if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    770e:	4b9d      	ldr	r3, [pc, #628]	; (7984 <BrakeBoardStateMachineTask+0xabc>)
    7710:	881b      	ldrh	r3, [r3, #0]
    7712:	2b01      	cmp	r3, #1
    7714:	d120      	bne.n	7758 <BrakeBoardStateMachineTask+0x890>
//V1.05									if (brakeSetupExtend == 9)												
							{
										if (setupExtendTriggered != 0)
    7716:	4ba0      	ldr	r3, [pc, #640]	; (7998 <BrakeBoardStateMachineTask+0xad0>)
    7718:	781b      	ldrb	r3, [r3, #0]
    771a:	2b00      	cmp	r3, #0
    771c:	d006      	beq.n	772c <BrakeBoardStateMachineTask+0x864>
										{
											brakeState = BRAKESTATE_ERROR_RETRACT;
    771e:	4b93      	ldr	r3, [pc, #588]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    7720:	2207      	movs	r2, #7
    7722:	701a      	strb	r2, [r3, #0]
											MotorOff(1);										
    7724:	2001      	movs	r0, #1
    7726:	4b8f      	ldr	r3, [pc, #572]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7728:	4798      	blx	r3
    772a:	e01b      	b.n	7764 <BrakeBoardStateMachineTask+0x89c>
										}
										else
										{		
											brakeState = BRAKESTATE_SETUPACTIVE_END; //BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    772c:	4b8f      	ldr	r3, [pc, #572]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    772e:	2221      	movs	r2, #33	; 0x21
    7730:	701a      	strb	r2, [r3, #0]
											MotorOff(1);
    7732:	2001      	movs	r0, #1
    7734:	4b8b      	ldr	r3, [pc, #556]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7736:	4798      	blx	r3
											brakeSupTime =BRAKESUPTIME;   
    7738:	4b94      	ldr	r3, [pc, #592]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    773a:	2264      	movs	r2, #100	; 0x64
    773c:	801a      	strh	r2, [r3, #0]
														if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    773e:	4b97      	ldr	r3, [pc, #604]	; (799c <BrakeBoardStateMachineTask+0xad4>)
    7740:	791b      	ldrb	r3, [r3, #4]
    7742:	1c1a      	adds	r2, r3, #0
    7744:	2308      	movs	r3, #8
    7746:	4013      	ands	r3, r2
    7748:	d003      	beq.n	7752 <BrakeBoardStateMachineTask+0x88a>
											{
												brakeState = BRAKESTATE_ERROR_RETRACT;
    774a:	4b88      	ldr	r3, [pc, #544]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    774c:	2207      	movs	r2, #7
    774e:	701a      	strb	r2, [r3, #0]
    7750:	e008      	b.n	7764 <BrakeBoardStateMachineTask+0x89c>
											}
											else
											{
												MotorCCW(); //V01_27
    7752:	4b93      	ldr	r3, [pc, #588]	; (79a0 <BrakeBoardStateMachineTask+0xad8>)
    7754:	4798      	blx	r3
    7756:	e005      	b.n	7764 <BrakeBoardStateMachineTask+0x89c>
											//--------------v1.05 eoc													
										}				
							}	
							else
							{
								brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 								
    7758:	4b84      	ldr	r3, [pc, #528]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    775a:	220f      	movs	r2, #15
    775c:	701a      	strb	r2, [r3, #0]
 								brakeSupTime = BRAKESUPTIME_SETUPPAUSE;  
    775e:	4b8b      	ldr	r3, [pc, #556]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7760:	2214      	movs	r2, #20
    7762:	801a      	strh	r2, [r3, #0]
							}
						}
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7764:	4b7e      	ldr	r3, [pc, #504]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	2202      	movs	r2, #2
    776a:	4393      	bics	r3, r2
    776c:	b2da      	uxtb	r2, r3
    776e:	4b7c      	ldr	r3, [pc, #496]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7770:	701a      	strb	r2, [r3, #0]
    7772:	e057      	b.n	7824 <BrakeBoardStateMachineTask+0x95c>
					}
					else
					{
						if ((BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)&&(motorRunTime ==0))
    7774:	2002      	movs	r0, #2
    7776:	4b7c      	ldr	r3, [pc, #496]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    7778:	4798      	blx	r3
    777a:	1c03      	adds	r3, r0, #0
    777c:	2b00      	cmp	r3, #0
    777e:	d10d      	bne.n	779c <BrakeBoardStateMachineTask+0x8d4>
    7780:	4b7b      	ldr	r3, [pc, #492]	; (7970 <BrakeBoardStateMachineTask+0xaa8>)
    7782:	881b      	ldrh	r3, [r3, #0]
    7784:	2b00      	cmp	r3, #0
    7786:	d109      	bne.n	779c <BrakeBoardStateMachineTask+0x8d4>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;
    7788:	4b78      	ldr	r3, [pc, #480]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    778a:	2207      	movs	r2, #7
    778c:	701a      	strb	r2, [r3, #0]
							brakeSupTime = 0;
    778e:	4b7f      	ldr	r3, [pc, #508]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7790:	2200      	movs	r2, #0
    7792:	801a      	strh	r2, [r3, #0]
							MotorOff(1);
    7794:	2001      	movs	r0, #1
    7796:	4b73      	ldr	r3, [pc, #460]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7798:	4798      	blx	r3
    779a:	e043      	b.n	7824 <BrakeBoardStateMachineTask+0x95c>
						}
						else
						{						
							if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    779c:	4b70      	ldr	r3, [pc, #448]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	1c1a      	adds	r2, r3, #0
    77a2:	2302      	movs	r3, #2
    77a4:	4013      	ands	r3, r2
    77a6:	d03d      	beq.n	7824 <BrakeBoardStateMachineTask+0x95c>
							{
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    77a8:	4b6d      	ldr	r3, [pc, #436]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	2202      	movs	r2, #2
    77ae:	4393      	bics	r3, r2
    77b0:	b2da      	uxtb	r2, r3
    77b2:	4b6b      	ldr	r3, [pc, #428]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    77b4:	701a      	strb	r2, [r3, #0]
								//						brakeState = BRAKESTATE_IDLE;
								//						brakeBiLED = BRAKEBILED_SOLIDGREEN;
								//----------------ERROR here????
								MotorOff(1);
    77b6:	2001      	movs	r0, #1
    77b8:	4b6a      	ldr	r3, [pc, #424]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    77ba:	4798      	blx	r3
								if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    77bc:	2002      	movs	r0, #2
    77be:	4b6a      	ldr	r3, [pc, #424]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    77c0:	4798      	blx	r3
    77c2:	1c03      	adds	r3, r0, #0
    77c4:	2b00      	cmp	r3, #0
    77c6:	d106      	bne.n	77d6 <BrakeBoardStateMachineTask+0x90e>
								{
									brakeState = BRAKESTATE_ERROR_RETRACT;
    77c8:	4b68      	ldr	r3, [pc, #416]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    77ca:	2207      	movs	r2, #7
    77cc:	701a      	strb	r2, [r3, #0]
									brakeSupTime = 0;
    77ce:	4b6f      	ldr	r3, [pc, #444]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    77d0:	2200      	movs	r2, #0
    77d2:	801a      	strh	r2, [r3, #0]
    77d4:	e01e      	b.n	7814 <BrakeBoardStateMachineTask+0x94c>
								}
								else
								{
									if (brakeSetupExtend == STOP_BRAKESETUPEXTEND)
    77d6:	4b6b      	ldr	r3, [pc, #428]	; (7984 <BrakeBoardStateMachineTask+0xabc>)
    77d8:	881b      	ldrh	r3, [r3, #0]
    77da:	2b01      	cmp	r3, #1
    77dc:	d114      	bne.n	7808 <BrakeBoardStateMachineTask+0x940>
//V1.05									if (brakeSetupExtend == 9)									
									{
										if (setupExtendTriggered != 0)
    77de:	4b6e      	ldr	r3, [pc, #440]	; (7998 <BrakeBoardStateMachineTask+0xad0>)
    77e0:	781b      	ldrb	r3, [r3, #0]
    77e2:	2b00      	cmp	r3, #0
    77e4:	d006      	beq.n	77f4 <BrakeBoardStateMachineTask+0x92c>
										{
											brakeState = BRAKESTATE_ERROR_RETRACT;
    77e6:	4b61      	ldr	r3, [pc, #388]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    77e8:	2207      	movs	r2, #7
    77ea:	701a      	strb	r2, [r3, #0]
											MotorOff(1);									
    77ec:	2001      	movs	r0, #1
    77ee:	4b5d      	ldr	r3, [pc, #372]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    77f0:	4798      	blx	r3
    77f2:	e00f      	b.n	7814 <BrakeBoardStateMachineTask+0x94c>
										}
										else
										{		
//											MotorNeedNewBaseline();					
//											brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
											brakeState = BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    77f4:	4b5d      	ldr	r3, [pc, #372]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    77f6:	2222      	movs	r2, #34	; 0x22
    77f8:	701a      	strb	r2, [r3, #0]
											MotorOff(1);
    77fa:	2001      	movs	r0, #1
    77fc:	4b59      	ldr	r3, [pc, #356]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    77fe:	4798      	blx	r3
											brakeSupTime = 30; // BRAKESUPTIME;	
    7800:	4b62      	ldr	r3, [pc, #392]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7802:	221e      	movs	r2, #30
    7804:	801a      	strh	r2, [r3, #0]
    7806:	e005      	b.n	7814 <BrakeBoardStateMachineTask+0x94c>
											//--------------v1.05 eoc													
										}
									}
									else
									{						
										brakeState = BRAKESTATE_SETUPACTIVE_PAUSE_RETRACT; 
    7808:	4b58      	ldr	r3, [pc, #352]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    780a:	220f      	movs	r2, #15
    780c:	701a      	strb	r2, [r3, #0]
										brakeSupTime = BRAKESUPTIME_SETUPPAUSE;
    780e:	4b5f      	ldr	r3, [pc, #380]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7810:	2214      	movs	r2, #20
    7812:	801a      	strh	r2, [r3, #0]
									}
								}
								brakeChange &= ~BRAKECHANGE_SUPTIME;
    7814:	4b52      	ldr	r3, [pc, #328]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	2202      	movs	r2, #2
    781a:	4393      	bics	r3, r2
    781c:	b2da      	uxtb	r2, r3
    781e:	4b50      	ldr	r3, [pc, #320]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7820:	701a      	strb	r2, [r3, #0]
							}			
						}
					}
					break;
    7822:	e7ff      	b.n	7824 <BrakeBoardStateMachineTask+0x95c>
    7824:	46c0      	nop			; (mov r8, r8)
				}
			}
			}
			break;
    7826:	f001 fb03 	bl	8e30 <BrakeBoardStateMachineTask+0x1f68>
		}
//----------------------------------
// error handling states
		case BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE:
		{
				if (((brakeChange & BRAKECHANGE_SUPTIME)!=0)||(brakeSupTime==0))
    782a:	4b4d      	ldr	r3, [pc, #308]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	1c1a      	adds	r2, r3, #0
    7830:	2302      	movs	r3, #2
    7832:	4013      	ands	r3, r2
    7834:	d103      	bne.n	783e <BrakeBoardStateMachineTask+0x976>
    7836:	4b55      	ldr	r3, [pc, #340]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7838:	881b      	ldrh	r3, [r3, #0]
    783a:	2b00      	cmp	r3, #0
    783c:	d114      	bne.n	7868 <BrakeBoardStateMachineTask+0x9a0>
				{
					MotorOff(1);
    783e:	2001      	movs	r0, #1
    7840:	4b48      	ldr	r3, [pc, #288]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7842:	4798      	blx	r3
					brakeSupTime = 0;
    7844:	4b51      	ldr	r3, [pc, #324]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7846:	2200      	movs	r2, #0
    7848:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    784a:	4b45      	ldr	r3, [pc, #276]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	2202      	movs	r2, #2
    7850:	4393      	bics	r3, r2
    7852:	b2da      	uxtb	r2, r3
    7854:	4b42      	ldr	r3, [pc, #264]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7856:	701a      	strb	r2, [r3, #0]
					BrakeActuatorControl(BRAKE_HOME);
    7858:	2000      	movs	r0, #0
    785a:	4b43      	ldr	r3, [pc, #268]	; (7968 <BrakeBoardStateMachineTask+0xaa0>)
    785c:	4798      	blx	r3
					brakeState = BRAKESTATE_ERROR_FINAL;
    785e:	4b43      	ldr	r3, [pc, #268]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    7860:	2218      	movs	r2, #24
    7862:	701a      	strb	r2, [r3, #0]
				}
			break;
    7864:	f001 fae5 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7868:	f001 fae3 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_ERROR_RETRACT:
		{
			switch (action)
    786c:	4b4d      	ldr	r3, [pc, #308]	; (79a4 <BrakeBoardStateMachineTask+0xadc>)
    786e:	781b      	ldrb	r3, [r3, #0]
    7870:	2b01      	cmp	r3, #1
    7872:	d02f      	beq.n	78d4 <BrakeBoardStateMachineTask+0xa0c>
    7874:	2b04      	cmp	r3, #4
    7876:	d02d      	beq.n	78d4 <BrakeBoardStateMachineTask+0xa0c>
    7878:	2b00      	cmp	r3, #0
    787a:	d13e      	bne.n	78fa <BrakeBoardStateMachineTask+0xa32>
			{
				case NONE:
				{
					if ((prevAction == EXTENDING)||(prevAction == EXTENDING_BY_ENCODER))
    787c:	4b4a      	ldr	r3, [pc, #296]	; (79a8 <BrakeBoardStateMachineTask+0xae0>)
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	2b01      	cmp	r3, #1
    7882:	d003      	beq.n	788c <BrakeBoardStateMachineTask+0x9c4>
    7884:	4b48      	ldr	r3, [pc, #288]	; (79a8 <BrakeBoardStateMachineTask+0xae0>)
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	2b04      	cmp	r3, #4
    788a:	d112      	bne.n	78b2 <BrakeBoardStateMachineTask+0x9ea>
					{
						MotorOff(1);
    788c:	2001      	movs	r0, #1
    788e:	4b35      	ldr	r3, [pc, #212]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    7890:	4798      	blx	r3
						MotorCCW();
    7892:	4b43      	ldr	r3, [pc, #268]	; (79a0 <BrakeBoardStateMachineTask+0xad8>)
    7894:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME_MEDIUM;
    7896:	4b3d      	ldr	r3, [pc, #244]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7898:	221e      	movs	r2, #30
    789a:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    789c:	4b30      	ldr	r3, [pc, #192]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    789e:	781b      	ldrb	r3, [r3, #0]
    78a0:	2202      	movs	r2, #2
    78a2:	4393      	bics	r3, r2
    78a4:	b2da      	uxtb	r2, r3
    78a6:	4b2e      	ldr	r3, [pc, #184]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    78a8:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    78aa:	4b30      	ldr	r3, [pc, #192]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    78ac:	2224      	movs	r2, #36	; 0x24
    78ae:	701a      	strb	r2, [r3, #0]
						MotorOff(1);
						brakeSupTime = 0;
						brakeChange |= BRAKECHANGE_SUPTIME;
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
					}
					break;
    78b0:	e035      	b.n	791e <BrakeBoardStateMachineTask+0xa56>
						brakeChange &= ~BRAKECHANGE_SUPTIME;
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
					}
					else
					{
						MotorOff(1);
    78b2:	2001      	movs	r0, #1
    78b4:	4b2b      	ldr	r3, [pc, #172]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    78b6:	4798      	blx	r3
						brakeSupTime = 0;
    78b8:	4b34      	ldr	r3, [pc, #208]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    78ba:	2200      	movs	r2, #0
    78bc:	801a      	strh	r2, [r3, #0]
						brakeChange |= BRAKECHANGE_SUPTIME;
    78be:	4b28      	ldr	r3, [pc, #160]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    78c0:	781b      	ldrb	r3, [r3, #0]
    78c2:	2202      	movs	r2, #2
    78c4:	4313      	orrs	r3, r2
    78c6:	b2da      	uxtb	r2, r3
    78c8:	4b25      	ldr	r3, [pc, #148]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    78ca:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    78cc:	4b27      	ldr	r3, [pc, #156]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    78ce:	2224      	movs	r2, #36	; 0x24
    78d0:	701a      	strb	r2, [r3, #0]
					}
					break;
    78d2:	e024      	b.n	791e <BrakeBoardStateMachineTask+0xa56>
				}
				case EXTENDING:
				case EXTENDING_BY_ENCODER:
				{
					MotorOff(1);
    78d4:	2001      	movs	r0, #1
    78d6:	4b23      	ldr	r3, [pc, #140]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    78d8:	4798      	blx	r3
					MotorCCW();
    78da:	4b31      	ldr	r3, [pc, #196]	; (79a0 <BrakeBoardStateMachineTask+0xad8>)
    78dc:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME_MEDIUM;
    78de:	4b2b      	ldr	r3, [pc, #172]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    78e0:	221e      	movs	r2, #30
    78e2:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    78e4:	4b1e      	ldr	r3, [pc, #120]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	2202      	movs	r2, #2
    78ea:	4393      	bics	r3, r2
    78ec:	b2da      	uxtb	r2, r3
    78ee:	4b1c      	ldr	r3, [pc, #112]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    78f0:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    78f2:	4b1e      	ldr	r3, [pc, #120]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    78f4:	2224      	movs	r2, #36	; 0x24
    78f6:	701a      	strb	r2, [r3, #0]
					break;
    78f8:	e011      	b.n	791e <BrakeBoardStateMachineTask+0xa56>
				}
				default:
				{
					MotorOff(1);
    78fa:	2001      	movs	r0, #1
    78fc:	4b19      	ldr	r3, [pc, #100]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    78fe:	4798      	blx	r3
					brakeSupTime = 0;
    7900:	4b22      	ldr	r3, [pc, #136]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7902:	2200      	movs	r2, #0
    7904:	801a      	strh	r2, [r3, #0]
					brakeChange |= BRAKECHANGE_SUPTIME;
    7906:	4b16      	ldr	r3, [pc, #88]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	2202      	movs	r2, #2
    790c:	4313      	orrs	r3, r2
    790e:	b2da      	uxtb	r2, r3
    7910:	4b13      	ldr	r3, [pc, #76]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7912:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ERROR_RETRACT_LOWVOLTAGE;
    7914:	4b15      	ldr	r3, [pc, #84]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    7916:	2224      	movs	r2, #36	; 0x24
    7918:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    791a:	f001 fa8a 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    791e:	f001 fa88 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_ERRORLOAD:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||(encoderCountBack==0))
    7922:	4b0f      	ldr	r3, [pc, #60]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7924:	781b      	ldrb	r3, [r3, #0]
    7926:	1c1a      	adds	r2, r3, #0
    7928:	2302      	movs	r3, #2
    792a:	4013      	ands	r3, r2
    792c:	d103      	bne.n	7936 <BrakeBoardStateMachineTask+0xa6e>
    792e:	4b1f      	ldr	r3, [pc, #124]	; (79ac <BrakeBoardStateMachineTask+0xae4>)
    7930:	881b      	ldrh	r3, [r3, #0]
    7932:	2b00      	cmp	r3, #0
    7934:	d111      	bne.n	795a <BrakeBoardStateMachineTask+0xa92>
			{
				MotorOff(1);
    7936:	2001      	movs	r0, #1
    7938:	4b0a      	ldr	r3, [pc, #40]	; (7964 <BrakeBoardStateMachineTask+0xa9c>)
    793a:	4798      	blx	r3
				brakeState = BRAKESTATE_ERRORLOADWAIT;
    793c:	4b0b      	ldr	r3, [pc, #44]	; (796c <BrakeBoardStateMachineTask+0xaa4>)
    793e:	2220      	movs	r2, #32
    7940:	701a      	strb	r2, [r3, #0]
				brakeSupTime = 10;  //1 second
    7942:	4b12      	ldr	r3, [pc, #72]	; (798c <BrakeBoardStateMachineTask+0xac4>)
    7944:	220a      	movs	r2, #10
    7946:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7948:	4b05      	ldr	r3, [pc, #20]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	2202      	movs	r2, #2
    794e:	4393      	bics	r3, r2
    7950:	b2da      	uxtb	r2, r3
    7952:	4b03      	ldr	r3, [pc, #12]	; (7960 <BrakeBoardStateMachineTask+0xa98>)
    7954:	701a      	strb	r2, [r3, #0]
			}		
			break;
    7956:	f001 fa6c 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    795a:	f001 fa6a 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	20002eee 	.word	0x20002eee
    7964:	00009ac9 	.word	0x00009ac9
    7968:	000069a1 	.word	0x000069a1
    796c:	20002ebf 	.word	0x20002ebf
    7970:	20002eb2 	.word	0x20002eb2
    7974:	20002fb8 	.word	0x20002fb8
    7978:	00009499 	.word	0x00009499
    797c:	20002ee0 	.word	0x20002ee0
    7980:	200004be 	.word	0x200004be
    7984:	20002ecc 	.word	0x20002ecc
    7988:	00000345 	.word	0x00000345
    798c:	200036c4 	.word	0x200036c4
    7990:	20003068 	.word	0x20003068
    7994:	20000001 	.word	0x20000001
    7998:	200004b1 	.word	0x200004b1
    799c:	20003694 	.word	0x20003694
    79a0:	00009bdd 	.word	0x00009bdd
    79a4:	200004ae 	.word	0x200004ae
    79a8:	200004af 	.word	0x200004af
    79ac:	20002ee2 	.word	0x20002ee2
		}
		case BRAKESTATE_ERRORLOADWAIT:
		{
			itemp3 = LoadCell(brakeState);
    79b0:	4bba      	ldr	r3, [pc, #744]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	1dbc      	adds	r4, r7, #6
    79b6:	1c18      	adds	r0, r3, #0
    79b8:	4bb9      	ldr	r3, [pc, #740]	; (7ca0 <BrakeBoardStateMachineTask+0xdd8>)
    79ba:	4798      	blx	r3
    79bc:	1c03      	adds	r3, r0, #0
    79be:	8023      	strh	r3, [r4, #0]
			if (itemp3<0x60)								
    79c0:	1dbb      	adds	r3, r7, #6
    79c2:	881b      	ldrh	r3, [r3, #0]
    79c4:	2b5f      	cmp	r3, #95	; 0x5f
    79c6:	d80d      	bhi.n	79e4 <BrakeBoardStateMachineTask+0xb1c>
			{
     			brakeState = BRAKESTATE_ACTIVELOAD;
    79c8:	4bb4      	ldr	r3, [pc, #720]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    79ca:	221e      	movs	r2, #30
    79cc:	701a      	strb	r2, [r3, #0]
		//v01_29		brakeState = BRAKESTATE_ACTIVE;				
				brakeSupTime = 0;
    79ce:	4bb5      	ldr	r3, [pc, #724]	; (7ca4 <BrakeBoardStateMachineTask+0xddc>)
    79d0:	2200      	movs	r2, #0
    79d2:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    79d4:	4bb4      	ldr	r3, [pc, #720]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	2202      	movs	r2, #2
    79da:	4393      	bics	r3, r2
    79dc:	b2da      	uxtb	r2, r3
    79de:	4bb2      	ldr	r3, [pc, #712]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    79e0:	701a      	strb	r2, [r3, #0]
    79e2:	e019      	b.n	7a18 <BrakeBoardStateMachineTask+0xb50>

			}
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0) 
    79e4:	4bb0      	ldr	r3, [pc, #704]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	1c1a      	adds	r2, r3, #0
    79ea:	2302      	movs	r3, #2
    79ec:	4013      	ands	r3, r2
    79ee:	d013      	beq.n	7a18 <BrakeBoardStateMachineTask+0xb50>
				{
					brakeStatus.BrakeState |= BRAKESTATE_NOTSETUP;
    79f0:	4bae      	ldr	r3, [pc, #696]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    79f2:	791b      	ldrb	r3, [r3, #4]
    79f4:	2204      	movs	r2, #4
    79f6:	4313      	orrs	r3, r2
    79f8:	b2da      	uxtb	r2, r3
    79fa:	4bac      	ldr	r3, [pc, #688]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    79fc:	711a      	strb	r2, [r3, #4]
					brakeStatus.BrakeState |= BRAKESTATE_ERRORLOADSET;  //V01_28 added 
    79fe:	4bab      	ldr	r3, [pc, #684]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a00:	791b      	ldrb	r3, [r3, #4]
    7a02:	2280      	movs	r2, #128	; 0x80
    7a04:	4252      	negs	r2, r2
    7a06:	4313      	orrs	r3, r2
    7a08:	b2da      	uxtb	r2, r3
    7a0a:	4ba8      	ldr	r3, [pc, #672]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a0c:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ERROR;			
    7a0e:	4ba3      	ldr	r3, [pc, #652]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7a10:	2208      	movs	r2, #8
    7a12:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    7a14:	f001 fa0d 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7a18:	f001 fa0b 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_ERROR:
		{
			MotorOff(0);
    7a1c:	2000      	movs	r0, #0
    7a1e:	4ba4      	ldr	r3, [pc, #656]	; (7cb0 <BrakeBoardStateMachineTask+0xde8>)
    7a20:	4798      	blx	r3
			break;
    7a22:	f001 fa06 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
		case BRAKESTATE_ERROR_FINAL:
		{
			MotorOff(0);
    7a26:	2000      	movs	r0, #0
    7a28:	4ba1      	ldr	r3, [pc, #644]	; (7cb0 <BrakeBoardStateMachineTask+0xde8>)
    7a2a:	4798      	blx	r3
			if (setupExtendTriggered != 0)
    7a2c:	4ba1      	ldr	r3, [pc, #644]	; (7cb4 <BrakeBoardStateMachineTask+0xdec>)
    7a2e:	781b      	ldrb	r3, [r3, #0]
    7a30:	2b00      	cmp	r3, #0
    7a32:	d007      	beq.n	7a44 <BrakeBoardStateMachineTask+0xb7c>
			{
				brakeStatus.ActuatorStatus |= ACTUATORSTATUS_EXTENDTRIGGEREDINSETUP;
    7a34:	4b9d      	ldr	r3, [pc, #628]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a36:	789b      	ldrb	r3, [r3, #2]
    7a38:	2280      	movs	r2, #128	; 0x80
    7a3a:	4252      	negs	r2, r2
    7a3c:	4313      	orrs	r3, r2
    7a3e:	b2da      	uxtb	r2, r3
    7a40:	4b9a      	ldr	r3, [pc, #616]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a42:	709a      	strb	r2, [r3, #2]
			}
			brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7a44:	4b99      	ldr	r3, [pc, #612]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a46:	791b      	ldrb	r3, [r3, #4]
    7a48:	2210      	movs	r2, #16
    7a4a:	4393      	bics	r3, r2
    7a4c:	b2da      	uxtb	r2, r3
    7a4e:	4b97      	ldr	r3, [pc, #604]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a50:	711a      	strb	r2, [r3, #4]
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    7a52:	4b96      	ldr	r3, [pc, #600]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a54:	791b      	ldrb	r3, [r3, #4]
    7a56:	1c1a      	adds	r2, r3, #0
    7a58:	2308      	movs	r3, #8
    7a5a:	4013      	ands	r3, r2
    7a5c:	d10c      	bne.n	7a78 <BrakeBoardStateMachineTask+0xbb0>
			{
				if (poweredUp != 0)
    7a5e:	4b96      	ldr	r3, [pc, #600]	; (7cb8 <BrakeBoardStateMachineTask+0xdf0>)
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	2b00      	cmp	r3, #0
    7a64:	d002      	beq.n	7a6c <BrakeBoardStateMachineTask+0xba4>
				{
					brakeState = BRAKESTATE_RESET;
    7a66:	4b8d      	ldr	r3, [pc, #564]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7a68:	2200      	movs	r2, #0
    7a6a:	701a      	strb	r2, [r3, #0]
				}
				done = 1;
    7a6c:	1c3b      	adds	r3, r7, #0
    7a6e:	330e      	adds	r3, #14
    7a70:	2201      	movs	r2, #1
    7a72:	701a      	strb	r2, [r3, #0]
			}			
			break;
    7a74:	f001 f9dd 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7a78:	f001 f9db 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}	
		case BRAKESTATE_ERROR_VOLTAGE_ACTIVE:
		{
			done = 0;
    7a7c:	1c3b      	adds	r3, r7, #0
    7a7e:	330e      	adds	r3, #14
    7a80:	2200      	movs	r2, #0
    7a82:	701a      	strb	r2, [r3, #0]
			//V00_60 - recover after voltage comes back
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)== 0)
    7a84:	4b89      	ldr	r3, [pc, #548]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7a86:	791b      	ldrb	r3, [r3, #4]
    7a88:	1c1a      	adds	r2, r3, #0
    7a8a:	2308      	movs	r3, #8
    7a8c:	4013      	ands	r3, r2
    7a8e:	d106      	bne.n	7a9e <BrakeBoardStateMachineTask+0xbd6>
			{
				brakeState = BRAKESTATE_ACTIVE;
    7a90:	4b82      	ldr	r3, [pc, #520]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7a92:	2209      	movs	r2, #9
    7a94:	701a      	strb	r2, [r3, #0]
				done = 1;
    7a96:	1c3b      	adds	r3, r7, #0
    7a98:	330e      	adds	r3, #14
    7a9a:	2201      	movs	r2, #1
    7a9c:	701a      	strb	r2, [r3, #0]
			}
			if (done == 0)
    7a9e:	1c3b      	adds	r3, r7, #0
    7aa0:	330e      	adds	r3, #14
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d153      	bne.n	7b50 <BrakeBoardStateMachineTask+0xc88>
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    7aa8:	4b84      	ldr	r3, [pc, #528]	; (7cbc <BrakeBoardStateMachineTask+0xdf4>)
    7aaa:	881b      	ldrh	r3, [r3, #0]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d008      	beq.n	7ac2 <BrakeBoardStateMachineTask+0xbfa>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7ab0:	4b82      	ldr	r3, [pc, #520]	; (7cbc <BrakeBoardStateMachineTask+0xdf4>)
    7ab2:	881b      	ldrh	r3, [r3, #0]
				done = 1;
			}
			if (done == 0)
			{
				//---------------------check for breakaway
				if ((breakawayRing_pressed == 0) ||
    7ab4:	b21b      	sxth	r3, r3
    7ab6:	2b01      	cmp	r3, #1
    7ab8:	d10a      	bne.n	7ad0 <BrakeBoardStateMachineTask+0xc08>
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7aba:	4b81      	ldr	r3, [pc, #516]	; (7cc0 <BrakeBoardStateMachineTask+0xdf8>)
    7abc:	881b      	ldrh	r3, [r3, #0]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d106      	bne.n	7ad0 <BrakeBoardStateMachineTask+0xc08>
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7ac2:	4b7a      	ldr	r3, [pc, #488]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7ac4:	791b      	ldrb	r3, [r3, #4]
    7ac6:	2202      	movs	r2, #2
    7ac8:	4393      	bics	r3, r2
    7aca:	b2da      	uxtb	r2, r3
    7acc:	4b77      	ldr	r3, [pc, #476]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7ace:	711a      	strb	r2, [r3, #4]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7ad0:	4b7b      	ldr	r3, [pc, #492]	; (7cc0 <BrakeBoardStateMachineTask+0xdf8>)
    7ad2:	881b      	ldrh	r3, [r3, #0]
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d00a      	beq.n	7aee <BrakeBoardStateMachineTask+0xc26>
    7ad8:	4b78      	ldr	r3, [pc, #480]	; (7cbc <BrakeBoardStateMachineTask+0xdf4>)
    7ada:	881b      	ldrh	r3, [r3, #0]
    7adc:	2b00      	cmp	r3, #0
    7ade:	d006      	beq.n	7aee <BrakeBoardStateMachineTask+0xc26>
				(breakawayHoldTimer ==0))
    7ae0:	4b78      	ldr	r3, [pc, #480]	; (7cc4 <BrakeBoardStateMachineTask+0xdfc>)
    7ae2:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayRing_pressed == 0) ||
				((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
				{
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d102      	bne.n	7aee <BrakeBoardStateMachineTask+0xc26>
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
    7ae8:	4b76      	ldr	r3, [pc, #472]	; (7cc4 <BrakeBoardStateMachineTask+0xdfc>)
    7aea:	2201      	movs	r2, #1
    7aec:	801a      	strh	r2, [r3, #0]
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7aee:	4b74      	ldr	r3, [pc, #464]	; (7cc0 <BrakeBoardStateMachineTask+0xdf8>)
    7af0:	881b      	ldrh	r3, [r3, #0]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d02c      	beq.n	7b50 <BrakeBoardStateMachineTask+0xc88>
    7af6:	4b71      	ldr	r3, [pc, #452]	; (7cbc <BrakeBoardStateMachineTask+0xdf4>)
    7af8:	881b      	ldrh	r3, [r3, #0]
    7afa:	2b00      	cmp	r3, #0
    7afc:	d028      	beq.n	7b50 <BrakeBoardStateMachineTask+0xc88>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7afe:	4b71      	ldr	r3, [pc, #452]	; (7cc4 <BrakeBoardStateMachineTask+0xdfc>)
    7b00:	881b      	ldrh	r3, [r3, #0]
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
				(breakawayHoldTimer ==0))
				{
					breakawayHoldTimer = 1;
				}
				if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7b02:	2b13      	cmp	r3, #19
    7b04:	d924      	bls.n	7b50 <BrakeBoardStateMachineTask+0xc88>
				(breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7b06:	4b69      	ldr	r3, [pc, #420]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7b08:	791b      	ldrb	r3, [r3, #4]
    7b0a:	1c1a      	adds	r2, r3, #0
    7b0c:	2302      	movs	r3, #2
    7b0e:	4013      	ands	r3, r2
    7b10:	d11e      	bne.n	7b50 <BrakeBoardStateMachineTask+0xc88>
				{
					done = 1;
    7b12:	1c3b      	adds	r3, r7, #0
    7b14:	330e      	adds	r3, #14
    7b16:	2201      	movs	r2, #1
    7b18:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    7b1a:	4b64      	ldr	r3, [pc, #400]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7b1c:	791b      	ldrb	r3, [r3, #4]
    7b1e:	2202      	movs	r2, #2
    7b20:	4313      	orrs	r3, r2
    7b22:	b2da      	uxtb	r2, r3
    7b24:	4b61      	ldr	r3, [pc, #388]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7b26:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    7b28:	4b5c      	ldr	r3, [pc, #368]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7b2a:	2211      	movs	r2, #17
    7b2c:	701a      	strb	r2, [r3, #0]
					MotorCW();
    7b2e:	4b66      	ldr	r3, [pc, #408]	; (7cc8 <BrakeBoardStateMachineTask+0xe00>)
    7b30:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7b32:	4b5c      	ldr	r3, [pc, #368]	; (7ca4 <BrakeBoardStateMachineTask+0xddc>)
    7b34:	2264      	movs	r2, #100	; 0x64
    7b36:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7b38:	4b5b      	ldr	r3, [pc, #364]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	2202      	movs	r2, #2
    7b3e:	4393      	bics	r3, r2
    7b40:	b2da      	uxtb	r2, r3
    7b42:	4b59      	ldr	r3, [pc, #356]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7b44:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    7b46:	4b61      	ldr	r3, [pc, #388]	; (7ccc <BrakeBoardStateMachineTask+0xe04>)
    7b48:	2200      	movs	r2, #0
    7b4a:	701a      	strb	r2, [r3, #0]
				}			
			}
			break;
    7b4c:	f001 f971 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7b50:	f001 f96f 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}	
		case BRAKESTATE_SETUPACTIVE_END:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7b54:	4b54      	ldr	r3, [pc, #336]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7b56:	781b      	ldrb	r3, [r3, #0]
    7b58:	1c1a      	adds	r2, r3, #0
    7b5a:	2302      	movs	r3, #2
    7b5c:	4013      	ands	r3, r2
    7b5e:	d107      	bne.n	7b70 <BrakeBoardStateMachineTask+0xca8>
			(hlimitState == 0)||(homeLimit== HOME_IN))
    7b60:	4b5b      	ldr	r3, [pc, #364]	; (7cd0 <BrakeBoardStateMachineTask+0xe08>)
    7b62:	781b      	ldrb	r3, [r3, #0]
			}
			break;
		}	
		case BRAKESTATE_SETUPACTIVE_END:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)||
    7b64:	2b00      	cmp	r3, #0
    7b66:	d003      	beq.n	7b70 <BrakeBoardStateMachineTask+0xca8>
			(hlimitState == 0)||(homeLimit== HOME_IN))
    7b68:	4b5a      	ldr	r3, [pc, #360]	; (7cd4 <BrakeBoardStateMachineTask+0xe0c>)
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d111      	bne.n	7b94 <BrakeBoardStateMachineTask+0xccc>
			{
				brakeSupTime = 10;
    7b70:	4b4c      	ldr	r3, [pc, #304]	; (7ca4 <BrakeBoardStateMachineTask+0xddc>)
    7b72:	220a      	movs	r2, #10
    7b74:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7b76:	4b4c      	ldr	r3, [pc, #304]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	2202      	movs	r2, #2
    7b7c:	4393      	bics	r3, r2
    7b7e:	b2da      	uxtb	r2, r3
    7b80:	4b49      	ldr	r3, [pc, #292]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7b82:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    7b84:	2001      	movs	r0, #1
    7b86:	4b4a      	ldr	r3, [pc, #296]	; (7cb0 <BrakeBoardStateMachineTask+0xde8>)
    7b88:	4798      	blx	r3
				brakeState = BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP;
    7b8a:	4b44      	ldr	r3, [pc, #272]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7b8c:	2222      	movs	r2, #34	; 0x22
    7b8e:	701a      	strb	r2, [r3, #0]
			}
			break;
    7b90:	f001 f94f 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7b94:	f001 f94d 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
		case BRAKESTATE_HOLDOFF_ACTIVEFROMSETUP:
		{
			itemp3 = LoadCell(brakeState);
    7b98:	4b40      	ldr	r3, [pc, #256]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7b9a:	781b      	ldrb	r3, [r3, #0]
    7b9c:	1dbc      	adds	r4, r7, #6
    7b9e:	1c18      	adds	r0, r3, #0
    7ba0:	4b3f      	ldr	r3, [pc, #252]	; (7ca0 <BrakeBoardStateMachineTask+0xdd8>)
    7ba2:	4798      	blx	r3
    7ba4:	1c03      	adds	r3, r0, #0
    7ba6:	8023      	strh	r3, [r4, #0]
			if (itemp3>0x60)								
    7ba8:	1dbb      	adds	r3, r7, #6
    7baa:	881b      	ldrh	r3, [r3, #0]
    7bac:	2b60      	cmp	r3, #96	; 0x60
    7bae:	d904      	bls.n	7bba <BrakeBoardStateMachineTask+0xcf2>
			{
				brakeState = BRAKESTATE_ERROR;		
    7bb0:	4b3a      	ldr	r3, [pc, #232]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7bb2:	2208      	movs	r2, #8
    7bb4:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 10;		
					}
				}										 
				brakeChange &= ~BRAKECHANGE_SUPTIME; 			
			}		
			break;
    7bb6:	f001 f93c 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
				brakeState = BRAKESTATE_ERROR;		
			}
			else
			{
				
				if ((brakeChange & BRAKECHANGE_SUPTIME)!=0)
    7bba:	4b3b      	ldr	r3, [pc, #236]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	1c1a      	adds	r2, r3, #0
    7bc0:	2302      	movs	r3, #2
    7bc2:	4013      	ands	r3, r2
    7bc4:	d012      	beq.n	7bec <BrakeBoardStateMachineTask+0xd24>
				{			
					MotorOff(1);		
    7bc6:	2001      	movs	r0, #1
    7bc8:	4b39      	ldr	r3, [pc, #228]	; (7cb0 <BrakeBoardStateMachineTask+0xde8>)
    7bca:	4798      	blx	r3
					if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7bcc:	4b37      	ldr	r3, [pc, #220]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7bce:	791b      	ldrb	r3, [r3, #4]
    7bd0:	1c1a      	adds	r2, r3, #0
    7bd2:	2308      	movs	r3, #8
    7bd4:	4013      	ands	r3, r2
    7bd6:	d003      	beq.n	7be0 <BrakeBoardStateMachineTask+0xd18>
					{
						brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7bd8:	4b30      	ldr	r3, [pc, #192]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7bda:	2219      	movs	r2, #25
    7bdc:	701a      	strb	r2, [r3, #0]
    7bde:	e005      	b.n	7bec <BrakeBoardStateMachineTask+0xd24>
					}		
					else
					{
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;				
    7be0:	4b2e      	ldr	r3, [pc, #184]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7be2:	220b      	movs	r2, #11
    7be4:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 10;		
    7be6:	4b2f      	ldr	r3, [pc, #188]	; (7ca4 <BrakeBoardStateMachineTask+0xddc>)
    7be8:	220a      	movs	r2, #10
    7bea:	801a      	strh	r2, [r3, #0]
					}
				}										 
				brakeChange &= ~BRAKECHANGE_SUPTIME; 			
    7bec:	4b2e      	ldr	r3, [pc, #184]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	2202      	movs	r2, #2
    7bf2:	4393      	bics	r3, r2
    7bf4:	b2da      	uxtb	r2, r3
    7bf6:	4b2c      	ldr	r3, [pc, #176]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7bf8:	701a      	strb	r2, [r3, #0]
			}		
			break;
    7bfa:	f001 f91a 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
//-----------------------------------------		
		case BRAKESTATE_HOLDOFF_ACTIVE:
		{	
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7bfe:	4b2b      	ldr	r3, [pc, #172]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7c00:	791b      	ldrb	r3, [r3, #4]
    7c02:	1c1a      	adds	r2, r3, #0
    7c04:	2308      	movs	r3, #8
    7c06:	4013      	ands	r3, r2
    7c08:	d003      	beq.n	7c12 <BrakeBoardStateMachineTask+0xd4a>
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7c0a:	4b24      	ldr	r3, [pc, #144]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7c0c:	2219      	movs	r2, #25
    7c0e:	701a      	strb	r2, [r3, #0]
    7c10:	e0a0      	b.n	7d54 <BrakeBoardStateMachineTask+0xe8c>
			}		
			else
			{		
				if ((brakeStatus.BrakeState & BRAKESTATE_NOTSETUP)!= 0)
    7c12:	4b26      	ldr	r3, [pc, #152]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7c14:	791b      	ldrb	r3, [r3, #4]
    7c16:	1c1a      	adds	r2, r3, #0
    7c18:	2304      	movs	r3, #4
    7c1a:	4013      	ands	r3, r2
    7c1c:	d064      	beq.n	7ce8 <BrakeBoardStateMachineTask+0xe20>
				{
					if ((brakeChange & BRAKECHANGE_SUPTIME)!=0)
    7c1e:	4b22      	ldr	r3, [pc, #136]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	1c1a      	adds	r2, r3, #0
    7c24:	2302      	movs	r3, #2
    7c26:	4013      	ands	r3, r2
    7c28:	d100      	bne.n	7c2c <BrakeBoardStateMachineTask+0xd64>
    7c2a:	e093      	b.n	7d54 <BrakeBoardStateMachineTask+0xe8c>
					{
	//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
						itemp3 = LoadCell(brakeState);
    7c2c:	4b1b      	ldr	r3, [pc, #108]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	1dbc      	adds	r4, r7, #6
    7c32:	1c18      	adds	r0, r3, #0
    7c34:	4b1a      	ldr	r3, [pc, #104]	; (7ca0 <BrakeBoardStateMachineTask+0xdd8>)
    7c36:	4798      	blx	r3
    7c38:	1c03      	adds	r3, r0, #0
    7c3a:	8023      	strh	r3, [r4, #0]
						if (itemp3>0x60)								
    7c3c:	1dbb      	adds	r3, r7, #6
    7c3e:	881b      	ldrh	r3, [r3, #0]
    7c40:	2b60      	cmp	r3, #96	; 0x60
    7c42:	d903      	bls.n	7c4c <BrakeBoardStateMachineTask+0xd84>
						{
							brakeState = BRAKESTATE_ERROR_RETRACT;								
    7c44:	4b15      	ldr	r3, [pc, #84]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7c46:	2207      	movs	r2, #7
    7c48:	701a      	strb	r2, [r3, #0]
    7c4a:	e01e      	b.n	7c8a <BrakeBoardStateMachineTask+0xdc2>
						}
						else
						{
							MotorNeedNewBaseline();
    7c4c:	4b22      	ldr	r3, [pc, #136]	; (7cd8 <BrakeBoardStateMachineTask+0xe10>)
    7c4e:	4798      	blx	r3
							brakeStatus.BrakeState &= ~BRAKESTATE_NOTSETUP;
    7c50:	4b16      	ldr	r3, [pc, #88]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7c52:	791b      	ldrb	r3, [r3, #4]
    7c54:	2204      	movs	r2, #4
    7c56:	4393      	bics	r3, r2
    7c58:	b2da      	uxtb	r2, r3
    7c5a:	4b14      	ldr	r3, [pc, #80]	; (7cac <BrakeBoardStateMachineTask+0xde4>)
    7c5c:	711a      	strb	r2, [r3, #4]
							brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    7c5e:	4b0f      	ldr	r3, [pc, #60]	; (7c9c <BrakeBoardStateMachineTask+0xdd4>)
    7c60:	220b      	movs	r2, #11
    7c62:	701a      	strb	r2, [r3, #0]
							MotorOff(1);		
    7c64:	2001      	movs	r0, #1
    7c66:	4b12      	ldr	r3, [pc, #72]	; (7cb0 <BrakeBoardStateMachineTask+0xde8>)
    7c68:	4798      	blx	r3
							brakeSupTime = BRAKESUPTIME;	
    7c6a:	4b0e      	ldr	r3, [pc, #56]	; (7ca4 <BrakeBoardStateMachineTask+0xddc>)
    7c6c:	2264      	movs	r2, #100	; 0x64
    7c6e:	801a      	strh	r2, [r3, #0]
							//------------v1.05 boc
							brakeInitiationCount = 0;
    7c70:	4b1a      	ldr	r3, [pc, #104]	; (7cdc <BrakeBoardStateMachineTask+0xe14>)
    7c72:	2200      	movs	r2, #0
    7c74:	701a      	strb	r2, [r3, #0]
							brakeCycleCount = 0;
    7c76:	4b1a      	ldr	r3, [pc, #104]	; (7ce0 <BrakeBoardStateMachineTask+0xe18>)
    7c78:	2200      	movs	r2, #0
    7c7a:	701a      	strb	r2, [r3, #0]
							if (table0.Item.Hybrid == TRUE)
    7c7c:	4b19      	ldr	r3, [pc, #100]	; (7ce4 <BrakeBoardStateMachineTask+0xe1c>)
    7c7e:	7e5b      	ldrb	r3, [r3, #25]
    7c80:	2b01      	cmp	r3, #1
    7c82:	d102      	bne.n	7c8a <BrakeBoardStateMachineTask+0xdc2>
							{
								brakeInitiationCount = 10;
    7c84:	4b15      	ldr	r3, [pc, #84]	; (7cdc <BrakeBoardStateMachineTask+0xe14>)
    7c86:	220a      	movs	r2, #10
    7c88:	701a      	strb	r2, [r3, #0]
							}
							//--------------v1.05 eoc																				
						}										 
						brakeChange &= ~BRAKECHANGE_SUPTIME; 
    7c8a:	4b07      	ldr	r3, [pc, #28]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	2202      	movs	r2, #2
    7c90:	4393      	bics	r3, r2
    7c92:	b2da      	uxtb	r2, r3
    7c94:	4b04      	ldr	r3, [pc, #16]	; (7ca8 <BrakeBoardStateMachineTask+0xde0>)
    7c96:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE; 
					}
					encoderCountBackTotal = 0;
				}
			}
			break;
    7c98:	f001 f8cb 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7c9c:	20002ebf 	.word	0x20002ebf
    7ca0:	00006851 	.word	0x00006851
    7ca4:	200036c4 	.word	0x200036c4
    7ca8:	20002eee 	.word	0x20002eee
    7cac:	20003694 	.word	0x20003694
    7cb0:	00009ac9 	.word	0x00009ac9
    7cb4:	200004b1 	.word	0x200004b1
    7cb8:	200036b5 	.word	0x200036b5
    7cbc:	2000306a 	.word	0x2000306a
    7cc0:	20003070 	.word	0x20003070
    7cc4:	20002ef2 	.word	0x20002ef2
    7cc8:	00009c99 	.word	0x00009c99
    7ccc:	200004b2 	.word	0x200004b2
    7cd0:	20003068 	.word	0x20003068
    7cd4:	20000001 	.word	0x20000001
    7cd8:	00008e95 	.word	0x00008e95
    7cdc:	200004b6 	.word	0x200004b6
    7ce0:	200004b7 	.word	0x200004b7
    7ce4:	20002fb8 	.word	0x20002fb8
						brakeChange &= ~BRAKECHANGE_SUPTIME; 
					}			
				}
				else
				{
					gPrime = 0; 
    7ce8:	4bd1      	ldr	r3, [pc, #836]	; (8030 <BrakeBoardStateMachineTask+0x1168>)
    7cea:	2200      	movs	r2, #0
    7cec:	801a      	strh	r2, [r3, #0]
					if ((breakawayRing_pressed == 0) || 
    7cee:	4bd1      	ldr	r3, [pc, #836]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7cf0:	881b      	ldrh	r3, [r3, #0]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d008      	beq.n	7d08 <BrakeBoardStateMachineTask+0xe40>
					   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7cf6:	4bcf      	ldr	r3, [pc, #828]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7cf8:	881b      	ldrh	r3, [r3, #0]
					}			
				}
				else
				{
					gPrime = 0; 
					if ((breakawayRing_pressed == 0) || 
    7cfa:	b21b      	sxth	r3, r3
    7cfc:	2b01      	cmp	r3, #1
    7cfe:	d10a      	bne.n	7d16 <BrakeBoardStateMachineTask+0xe4e>
					   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7d00:	4bcd      	ldr	r3, [pc, #820]	; (8038 <BrakeBoardStateMachineTask+0x1170>)
    7d02:	881b      	ldrh	r3, [r3, #0]
    7d04:	2b00      	cmp	r3, #0
    7d06:	d106      	bne.n	7d16 <BrakeBoardStateMachineTask+0xe4e>
					{
						brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7d08:	4bcc      	ldr	r3, [pc, #816]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7d0a:	791b      	ldrb	r3, [r3, #4]
    7d0c:	2202      	movs	r2, #2
    7d0e:	4393      	bics	r3, r2
    7d10:	b2da      	uxtb	r2, r3
    7d12:	4bca      	ldr	r3, [pc, #808]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7d14:	711a      	strb	r2, [r3, #4]
					}						
					thresholdmet = 0; 	
    7d16:	4bca      	ldr	r3, [pc, #808]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7d18:	2200      	movs	r2, #0
    7d1a:	701a      	strb	r2, [r3, #0]
					tempdiffx = MotorGetAcc(FALSE);
    7d1c:	2000      	movs	r0, #0
    7d1e:	4bc9      	ldr	r3, [pc, #804]	; (8044 <BrakeBoardStateMachineTask+0x117c>)
    7d20:	4798      	blx	r3
    7d22:	1c03      	adds	r3, r0, #0
    7d24:	1c1a      	adds	r2, r3, #0
    7d26:	4bc8      	ldr	r3, [pc, #800]	; (8048 <BrakeBoardStateMachineTask+0x1180>)
    7d28:	801a      	strh	r2, [r3, #0]
					if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    7d2a:	4bc8      	ldr	r3, [pc, #800]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	1c1a      	adds	r2, r3, #0
    7d30:	2302      	movs	r3, #2
    7d32:	4013      	ands	r3, r2
    7d34:	d009      	beq.n	7d4a <BrakeBoardStateMachineTask+0xe82>
					{
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    7d36:	4bc5      	ldr	r3, [pc, #788]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	2202      	movs	r2, #2
    7d3c:	4393      	bics	r3, r2
    7d3e:	b2da      	uxtb	r2, r3
    7d40:	4bc2      	ldr	r3, [pc, #776]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7d42:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE; 
    7d44:	4bc2      	ldr	r3, [pc, #776]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7d46:	2209      	movs	r2, #9
    7d48:	701a      	strb	r2, [r3, #0]
					}
					encoderCountBackTotal = 0;
    7d4a:	4bc2      	ldr	r3, [pc, #776]	; (8054 <BrakeBoardStateMachineTask+0x118c>)
    7d4c:	2200      	movs	r2, #0
    7d4e:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
    7d50:	f001 f86f 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    7d54:	f001 f86d 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_ACTIVE:
		case BRAKESTATE_ACTIVELOAD:
		{
			done = 0; 
    7d58:	1c3b      	adds	r3, r7, #0
    7d5a:	330e      	adds	r3, #14
    7d5c:	2200      	movs	r2, #0
    7d5e:	701a      	strb	r2, [r3, #0]
			//------------------ v1.23 
			// check for pedal press. 
//			itemp3 = ADCGetReading(ADC_INPUT_FSR);
			itemp3 = LoadCell(brakeState);
    7d60:	4bbb      	ldr	r3, [pc, #748]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7d62:	781b      	ldrb	r3, [r3, #0]
    7d64:	1dbc      	adds	r4, r7, #6
    7d66:	1c18      	adds	r0, r3, #0
    7d68:	4bbb      	ldr	r3, [pc, #748]	; (8058 <BrakeBoardStateMachineTask+0x1190>)
    7d6a:	4798      	blx	r3
    7d6c:	1c03      	adds	r3, r0, #0
    7d6e:	8023      	strh	r3, [r4, #0]
//V01_29			if ((itemp3>0x60)&&(brakeState == BRAKESTATE_ACTIVE))		
			if (itemp3>0x60)										
    7d70:	1dbb      	adds	r3, r7, #6
    7d72:	881b      	ldrh	r3, [r3, #0]
    7d74:	2b60      	cmp	r3, #96	; 0x60
    7d76:	d922      	bls.n	7dbe <BrakeBoardStateMachineTask+0xef6>
			{
				
				MotorOff(1);	
    7d78:	2001      	movs	r0, #1
    7d7a:	4bb8      	ldr	r3, [pc, #736]	; (805c <BrakeBoardStateMachineTask+0x1194>)
    7d7c:	4798      	blx	r3
				brakeSupTime = 10;  //2 seconds to EXTEND
    7d7e:	4bb8      	ldr	r3, [pc, #736]	; (8060 <BrakeBoardStateMachineTask+0x1198>)
    7d80:	220a      	movs	r2, #10
    7d82:	801a      	strh	r2, [r3, #0]
				if (brakeState == BRAKESTATE_ACTIVE)  //V01_29
    7d84:	4bb2      	ldr	r3, [pc, #712]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	2b09      	cmp	r3, #9
    7d8a:	d10a      	bne.n	7da2 <BrakeBoardStateMachineTask+0xeda>
				{
					MotorCCW();
    7d8c:	4bb5      	ldr	r3, [pc, #724]	; (8064 <BrakeBoardStateMachineTask+0x119c>)
    7d8e:	4798      	blx	r3
					brakeSupTime = 20;  //2 seconds to EXTEND
    7d90:	4bb3      	ldr	r3, [pc, #716]	; (8060 <BrakeBoardStateMachineTask+0x1198>)
    7d92:	2214      	movs	r2, #20
    7d94:	801a      	strh	r2, [r3, #0]
					//----- boc 1_23 ---- control by encode counts 
					encoderCountBack = ENCODER_RETRACT_ACTIVECOUNT; 
    7d96:	4bb4      	ldr	r3, [pc, #720]	; (8068 <BrakeBoardStateMachineTask+0x11a0>)
    7d98:	224b      	movs	r2, #75	; 0x4b
    7d9a:	801a      	strh	r2, [r3, #0]
					action = RETRACTING_BY_ENCODER; 
    7d9c:	4bb3      	ldr	r3, [pc, #716]	; (806c <BrakeBoardStateMachineTask+0x11a4>)
    7d9e:	2203      	movs	r2, #3
    7da0:	701a      	strb	r2, [r3, #0]
				}
				//----- eoc 1_23 
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7da2:	4baa      	ldr	r3, [pc, #680]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	2202      	movs	r2, #2
    7da8:	4393      	bics	r3, r2
    7daa:	b2da      	uxtb	r2, r3
    7dac:	4ba7      	ldr	r3, [pc, #668]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7dae:	701a      	strb	r2, [r3, #0]
				brakeState = BRAKESTATE_ERRORLOAD;
    7db0:	4ba7      	ldr	r3, [pc, #668]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7db2:	221f      	movs	r2, #31
    7db4:	701a      	strb	r2, [r3, #0]
				done = 1; 									
    7db6:	1c3b      	adds	r3, r7, #0
    7db8:	330e      	adds	r3, #14
    7dba:	2201      	movs	r2, #1
    7dbc:	701a      	strb	r2, [r3, #0]
			}
			
			if ((brakeStatus.BrakeState & BRAKESTATE_INPUTVOLTAGEBAD)!= 0)
    7dbe:	4b9f      	ldr	r3, [pc, #636]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7dc0:	791b      	ldrb	r3, [r3, #4]
    7dc2:	1c1a      	adds	r2, r3, #0
    7dc4:	2308      	movs	r3, #8
    7dc6:	4013      	ands	r3, r2
    7dc8:	d006      	beq.n	7dd8 <BrakeBoardStateMachineTask+0xf10>
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
    7dca:	4ba1      	ldr	r3, [pc, #644]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7dcc:	2219      	movs	r2, #25
    7dce:	701a      	strb	r2, [r3, #0]
				done = 1; 
    7dd0:	1c3b      	adds	r3, r7, #0
    7dd2:	330e      	adds	r3, #14
    7dd4:	2201      	movs	r2, #1
    7dd6:	701a      	strb	r2, [r3, #0]
			}					
			//---------------------check for breakaway
			if ((breakawayRing_pressed == 0) || 
    7dd8:	4b96      	ldr	r3, [pc, #600]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7dda:	881b      	ldrh	r3, [r3, #0]
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d008      	beq.n	7df2 <BrakeBoardStateMachineTask+0xf2a>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7de0:	4b94      	ldr	r3, [pc, #592]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7de2:	881b      	ldrh	r3, [r3, #0]
			{
				brakeState = BRAKESTATE_ERROR_VOLTAGE_ACTIVE; 
				done = 1; 
			}					
			//---------------------check for breakaway
			if ((breakawayRing_pressed == 0) || 
    7de4:	b21b      	sxth	r3, r3
    7de6:	2b01      	cmp	r3, #1
    7de8:	d10a      	bne.n	7e00 <BrakeBoardStateMachineTask+0xf38>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    7dea:	4b93      	ldr	r3, [pc, #588]	; (8038 <BrakeBoardStateMachineTask+0x1170>)
    7dec:	881b      	ldrh	r3, [r3, #0]
    7dee:	2b00      	cmp	r3, #0
    7df0:	d106      	bne.n	7e00 <BrakeBoardStateMachineTask+0xf38>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    7df2:	4b92      	ldr	r3, [pc, #584]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7df4:	791b      	ldrb	r3, [r3, #4]
    7df6:	2202      	movs	r2, #2
    7df8:	4393      	bics	r3, r2
    7dfa:	b2da      	uxtb	r2, r3
    7dfc:	4b8f      	ldr	r3, [pc, #572]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7dfe:	711a      	strb	r2, [r3, #4]
			}								
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7e00:	4b8d      	ldr	r3, [pc, #564]	; (8038 <BrakeBoardStateMachineTask+0x1170>)
    7e02:	881b      	ldrh	r3, [r3, #0]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d00a      	beq.n	7e1e <BrakeBoardStateMachineTask+0xf56>
    7e08:	4b8a      	ldr	r3, [pc, #552]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7e0a:	881b      	ldrh	r3, [r3, #0]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d006      	beq.n	7e1e <BrakeBoardStateMachineTask+0xf56>
			        (breakawayHoldTimer ==0))
    7e10:	4b97      	ldr	r3, [pc, #604]	; (8070 <BrakeBoardStateMachineTask+0x11a8>)
    7e12:	881b      	ldrh	r3, [r3, #0]
			if ((breakawayRing_pressed == 0) || 
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
			}								
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
    7e14:	2b00      	cmp	r3, #0
    7e16:	d102      	bne.n	7e1e <BrakeBoardStateMachineTask+0xf56>
			        (breakawayHoldTimer ==0))
			{
				breakawayHoldTimer = 1; 
    7e18:	4b95      	ldr	r3, [pc, #596]	; (8070 <BrakeBoardStateMachineTask+0x11a8>)
    7e1a:	2201      	movs	r2, #1
    7e1c:	801a      	strh	r2, [r3, #0]
			}
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&(done==0)&& //v1_23 added the done here
    7e1e:	4b86      	ldr	r3, [pc, #536]	; (8038 <BrakeBoardStateMachineTask+0x1170>)
    7e20:	881b      	ldrh	r3, [r3, #0]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d02f      	beq.n	7e86 <BrakeBoardStateMachineTask+0xfbe>
    7e26:	4b83      	ldr	r3, [pc, #524]	; (8034 <BrakeBoardStateMachineTask+0x116c>)
    7e28:	881b      	ldrh	r3, [r3, #0]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d02b      	beq.n	7e86 <BrakeBoardStateMachineTask+0xfbe>
    7e2e:	1c3b      	adds	r3, r7, #0
    7e30:	330e      	adds	r3, #14
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	2b00      	cmp	r3, #0
    7e36:	d126      	bne.n	7e86 <BrakeBoardStateMachineTask+0xfbe>
			        (breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7e38:	4b8d      	ldr	r3, [pc, #564]	; (8070 <BrakeBoardStateMachineTask+0x11a8>)
    7e3a:	881b      	ldrh	r3, [r3, #0]
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&
			        (breakawayHoldTimer ==0))
			{
				breakawayHoldTimer = 1; 
			}
 			if ((breakawayTip_pressed!=0)&&(breakawayRing_pressed != 0)&&(done==0)&& //v1_23 added the done here
    7e3c:	2b13      	cmp	r3, #19
    7e3e:	d922      	bls.n	7e86 <BrakeBoardStateMachineTask+0xfbe>
			        (breakawayHoldTimer >= BREAKAWAY_HOLD_TIME)&&((brakeStatus.BrakeState &BRAKESTATE_BREAKAWAYTIP)==0))
    7e40:	4b7e      	ldr	r3, [pc, #504]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7e42:	791b      	ldrb	r3, [r3, #4]
    7e44:	1c1a      	adds	r2, r3, #0
    7e46:	2302      	movs	r3, #2
    7e48:	4013      	ands	r3, r2
    7e4a:	d11c      	bne.n	7e86 <BrakeBoardStateMachineTask+0xfbe>
			{
				done = 1;
    7e4c:	1c3b      	adds	r3, r7, #0
    7e4e:	330e      	adds	r3, #14
    7e50:	2201      	movs	r2, #1
    7e52:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    7e54:	4b79      	ldr	r3, [pc, #484]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7e56:	791b      	ldrb	r3, [r3, #4]
    7e58:	2202      	movs	r2, #2
    7e5a:	4313      	orrs	r3, r2
    7e5c:	b2da      	uxtb	r2, r3
    7e5e:	4b77      	ldr	r3, [pc, #476]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7e60:	711a      	strb	r2, [r3, #4]
				brakeState = BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY;
    7e62:	4b7b      	ldr	r3, [pc, #492]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7e64:	2211      	movs	r2, #17
    7e66:	701a      	strb	r2, [r3, #0]
				MotorCW();
    7e68:	4b82      	ldr	r3, [pc, #520]	; (8074 <BrakeBoardStateMachineTask+0x11ac>)
    7e6a:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;
    7e6c:	4b7c      	ldr	r3, [pc, #496]	; (8060 <BrakeBoardStateMachineTask+0x1198>)
    7e6e:	2264      	movs	r2, #100	; 0x64
    7e70:	801a      	strh	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    7e72:	4b76      	ldr	r3, [pc, #472]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	2202      	movs	r2, #2
    7e78:	4393      	bics	r3, r2
    7e7a:	b2da      	uxtb	r2, r3
    7e7c:	4b73      	ldr	r3, [pc, #460]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7e7e:	701a      	strb	r2, [r3, #0]
				thresholdmet = 0;
    7e80:	4b6f      	ldr	r3, [pc, #444]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7e82:	2200      	movs	r2, #0
    7e84:	701a      	strb	r2, [r3, #0]
			}			
			//---------------------check for manual
			if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    7e86:	4b7c      	ldr	r3, [pc, #496]	; (8078 <BrakeBoardStateMachineTask+0x11b0>)
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	1c1a      	adds	r2, r3, #0
    7e8c:	2301      	movs	r3, #1
    7e8e:	4013      	ands	r3, r2
    7e90:	d106      	bne.n	7ea0 <BrakeBoardStateMachineTask+0xfd8>
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    7e92:	4b6a      	ldr	r3, [pc, #424]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7e94:	791b      	ldrb	r3, [r3, #4]
    7e96:	2210      	movs	r2, #16
    7e98:	4393      	bics	r3, r2
    7e9a:	b2da      	uxtb	r2, r3
    7e9c:	4b67      	ldr	r3, [pc, #412]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7e9e:	711a      	strb	r2, [r3, #4]
			}			
			if (done == 0)
    7ea0:	1c3b      	adds	r3, r7, #0
    7ea2:	330e      	adds	r3, #14
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d12f      	bne.n	7f0a <BrakeBoardStateMachineTask+0x1042>
			{
				if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    7eaa:	4b73      	ldr	r3, [pc, #460]	; (8078 <BrakeBoardStateMachineTask+0x11b0>)
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	1c1a      	adds	r2, r3, #0
    7eb0:	2301      	movs	r3, #1
    7eb2:	4013      	ands	r3, r2
    7eb4:	d029      	beq.n	7f0a <BrakeBoardStateMachineTask+0x1042>
				       ((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
    7eb6:	4b61      	ldr	r3, [pc, #388]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7eb8:	791b      	ldrb	r3, [r3, #4]
    7eba:	1c1a      	adds	r2, r3, #0
    7ebc:	2310      	movs	r3, #16
    7ebe:	4013      	ands	r3, r2
			{
				brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
			}			
			if (done == 0)
			{
				if (((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE)!=0)&&
    7ec0:	d123      	bne.n	7f0a <BrakeBoardStateMachineTask+0x1042>
				       ((brakeStatus.BrakeState & BRAKESTATE_MANUALBRAKE)==0))
				{
 					done = 1;
    7ec2:	1c3b      	adds	r3, r7, #0
    7ec4:	330e      	adds	r3, #14
    7ec6:	2201      	movs	r2, #1
    7ec8:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    7eca:	4b5c      	ldr	r3, [pc, #368]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7ecc:	791b      	ldrb	r3, [r3, #4]
    7ece:	2210      	movs	r2, #16
    7ed0:	4313      	orrs	r3, r2
    7ed2:	b2da      	uxtb	r2, r3
    7ed4:	4b59      	ldr	r3, [pc, #356]	; (803c <BrakeBoardStateMachineTask+0x1174>)
    7ed6:	711a      	strb	r2, [r3, #4]
					brakeState = BRAKESTATE_ACTIVE_EXTEND_MANUAL;
    7ed8:	4b5d      	ldr	r3, [pc, #372]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7eda:	2214      	movs	r2, #20
    7edc:	701a      	strb	r2, [r3, #0]
					//------------v1.05 boc
					if (brakeInitiationCount <10)
    7ede:	4b67      	ldr	r3, [pc, #412]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	2b09      	cmp	r3, #9
    7ee4:	d805      	bhi.n	7ef2 <BrakeBoardStateMachineTask+0x102a>
					{
						brakeInitiationCount++;
    7ee6:	4b65      	ldr	r3, [pc, #404]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	3301      	adds	r3, #1
    7eec:	b2da      	uxtb	r2, r3
    7eee:	4b63      	ldr	r3, [pc, #396]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7ef0:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc
					MotorCW();
    7ef2:	4b60      	ldr	r3, [pc, #384]	; (8074 <BrakeBoardStateMachineTask+0x11ac>)
    7ef4:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    7ef6:	4b5a      	ldr	r3, [pc, #360]	; (8060 <BrakeBoardStateMachineTask+0x1198>)
    7ef8:	2264      	movs	r2, #100	; 0x64
    7efa:	801a      	strh	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    7efc:	4b53      	ldr	r3, [pc, #332]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	2202      	movs	r2, #2
    7f02:	4393      	bics	r3, r2
    7f04:	b2da      	uxtb	r2, r3
    7f06:	4b51      	ldr	r3, [pc, #324]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7f08:	701a      	strb	r2, [r3, #0]
				}
			}					
			//------------------------
			// check accelerometer. 
			if (done==0)
    7f0a:	1c3b      	adds	r3, r7, #0
    7f0c:	330e      	adds	r3, #14
    7f0e:	781b      	ldrb	r3, [r3, #0]
    7f10:	2b00      	cmp	r3, #0
    7f12:	d16a      	bne.n	7fea <BrakeBoardStateMachineTask+0x1122>
			{
				tempdiffx = MotorGetAcc(FALSE);
    7f14:	2000      	movs	r0, #0
    7f16:	4b4b      	ldr	r3, [pc, #300]	; (8044 <BrakeBoardStateMachineTask+0x117c>)
    7f18:	4798      	blx	r3
    7f1a:	1c03      	adds	r3, r0, #0
    7f1c:	1c1a      	adds	r2, r3, #0
    7f1e:	4b4a      	ldr	r3, [pc, #296]	; (8048 <BrakeBoardStateMachineTask+0x1180>)
    7f20:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    7f22:	4b57      	ldr	r3, [pc, #348]	; (8080 <BrakeBoardStateMachineTask+0x11b8>)
    7f24:	7eda      	ldrb	r2, [r3, #27]
    7f26:	1c3b      	adds	r3, r7, #0
    7f28:	330a      	adds	r3, #10
    7f2a:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    7f2c:	1c3b      	adds	r3, r7, #0
    7f2e:	330a      	adds	r3, #10
    7f30:	881b      	ldrh	r3, [r3, #0]
    7f32:	2b09      	cmp	r3, #9
    7f34:	d903      	bls.n	7f3e <BrakeBoardStateMachineTask+0x1076>
				{
					itemp2 = 0;
    7f36:	1c3b      	adds	r3, r7, #0
    7f38:	330a      	adds	r3, #10
    7f3a:	2200      	movs	r2, #0
    7f3c:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    7f3e:	1c3a      	adds	r2, r7, #0
    7f40:	320a      	adds	r2, #10
    7f42:	1c3b      	adds	r3, r7, #0
    7f44:	330a      	adds	r3, #10
    7f46:	881b      	ldrh	r3, [r3, #0]
    7f48:	1c19      	adds	r1, r3, #0
    7f4a:	00c9      	lsls	r1, r1, #3
    7f4c:	18cb      	adds	r3, r1, r3
    7f4e:	1c19      	adds	r1, r3, #0
    7f50:	00c8      	lsls	r0, r1, #3
    7f52:	1c19      	adds	r1, r3, #0
    7f54:	1c03      	adds	r3, r0, #0
    7f56:	18cb      	adds	r3, r1, r3
    7f58:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_SIXTEENTHS_G;
    7f5a:	1c3b      	adds	r3, r7, #0
    7f5c:	330a      	adds	r3, #10
    7f5e:	1c3a      	adds	r2, r7, #0
    7f60:	320a      	adds	r2, #10
    7f62:	8812      	ldrh	r2, [r2, #0]
    7f64:	2180      	movs	r1, #128	; 0x80
    7f66:	00c9      	lsls	r1, r1, #3
    7f68:	1852      	adds	r2, r2, r1
    7f6a:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_GREATER,motorAccXBaseline)!=0) //V062 was ACC_SIXTEENTHS_G
    7f6c:	1c3b      	adds	r3, r7, #0
    7f6e:	330a      	adds	r3, #10
    7f70:	881a      	ldrh	r2, [r3, #0]
    7f72:	4b44      	ldr	r3, [pc, #272]	; (8084 <BrakeBoardStateMachineTask+0x11bc>)
    7f74:	881b      	ldrh	r3, [r3, #0]
    7f76:	b212      	sxth	r2, r2
    7f78:	b21b      	sxth	r3, r3
    7f7a:	1c10      	adds	r0, r2, #0
    7f7c:	2101      	movs	r1, #1
    7f7e:	1c1a      	adds	r2, r3, #0
    7f80:	4b41      	ldr	r3, [pc, #260]	; (8088 <BrakeBoardStateMachineTask+0x11c0>)
    7f82:	4798      	blx	r3
    7f84:	1c03      	adds	r3, r0, #0
    7f86:	2b00      	cmp	r3, #0
    7f88:	d02a      	beq.n	7fe0 <BrakeBoardStateMachineTask+0x1118>
				{
					thresholdmet++; 
    7f8a:	4b2d      	ldr	r3, [pc, #180]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	3301      	adds	r3, #1
    7f90:	b2da      	uxtb	r2, r3
    7f92:	4b2b      	ldr	r3, [pc, #172]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7f94:	701a      	strb	r2, [r3, #0]
//					if (thresholdmet >= MAX_THRESHOLD_NEEDED)
//					{
						done = 1; 
    7f96:	1c3b      	adds	r3, r7, #0
    7f98:	330e      	adds	r3, #14
    7f9a:	2201      	movs	r2, #1
    7f9c:	701a      	strb	r2, [r3, #0]
						thresholdmet = MAX_THRESHOLD_NEEDED;
    7f9e:	4b28      	ldr	r3, [pc, #160]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7fa0:	2203      	movs	r2, #3
    7fa2:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_EXTEND;
    7fa4:	4b2a      	ldr	r3, [pc, #168]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    7fa6:	220a      	movs	r2, #10
    7fa8:	701a      	strb	r2, [r3, #0]
						//------------v1.05 boc
						if (brakeInitiationCount <10)
    7faa:	4b34      	ldr	r3, [pc, #208]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7fac:	781b      	ldrb	r3, [r3, #0]
    7fae:	2b09      	cmp	r3, #9
    7fb0:	d805      	bhi.n	7fbe <BrakeBoardStateMachineTask+0x10f6>
						{
							brakeInitiationCount++;
    7fb2:	4b32      	ldr	r3, [pc, #200]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7fb4:	781b      	ldrb	r3, [r3, #0]
    7fb6:	3301      	adds	r3, #1
    7fb8:	b2da      	uxtb	r2, r3
    7fba:	4b30      	ldr	r3, [pc, #192]	; (807c <BrakeBoardStateMachineTask+0x11b4>)
    7fbc:	701a      	strb	r2, [r3, #0]
						//--------------v1.05 eoc						
						//----------------------------------
						// EXTEND - 
						// 1. set max time to 5 seconds
						// 2. set hold max time to 15 seconds 						
						MotorCW();
    7fbe:	4b2d      	ldr	r3, [pc, #180]	; (8074 <BrakeBoardStateMachineTask+0x11ac>)
    7fc0:	4798      	blx	r3
						thresholdmet = 0;   //01_39_#1
    7fc2:	4b1f      	ldr	r3, [pc, #124]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7fc4:	2200      	movs	r2, #0
    7fc6:	701a      	strb	r2, [r3, #0]
						brakeSupTime = BRAKESUPTIME;
    7fc8:	4b25      	ldr	r3, [pc, #148]	; (8060 <BrakeBoardStateMachineTask+0x1198>)
    7fca:	2264      	movs	r2, #100	; 0x64
    7fcc:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;											
    7fce:	4b1f      	ldr	r3, [pc, #124]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	2202      	movs	r2, #2
    7fd4:	4393      	bics	r3, r2
    7fd6:	b2da      	uxtb	r2, r3
    7fd8:	4b1c      	ldr	r3, [pc, #112]	; (804c <BrakeBoardStateMachineTask+0x1184>)
    7fda:	701a      	strb	r2, [r3, #0]
			else
			{
				thresholdmet = 0;				
			}

			break;
    7fdc:	f000 ff29 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
						brakeChange &= ~BRAKECHANGE_SUPTIME;											
//					}
				}
				else
				{
					thresholdmet = 0; 
    7fe0:	4b17      	ldr	r3, [pc, #92]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7fe2:	2200      	movs	r2, #0
    7fe4:	701a      	strb	r2, [r3, #0]
			else
			{
				thresholdmet = 0;				
			}

			break;
    7fe6:	f000 ff24 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
					thresholdmet = 0; 
				}
			} 			
			else
			{
				thresholdmet = 0;				
    7fea:	4b15      	ldr	r3, [pc, #84]	; (8040 <BrakeBoardStateMachineTask+0x1178>)
    7fec:	2200      	movs	r2, #0
    7fee:	701a      	strb	r2, [r3, #0]
			}

			break;
    7ff0:	f000 ff1f 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
//------------------------- 
// ACTIVE EXTEND STATE 
//-------------------------		
		case BRAKESTATE_ACTIVE_EXTEND:
		{
			done = 0; 
    7ff4:	1c3b      	adds	r3, r7, #0
    7ff6:	330e      	adds	r3, #14
    7ff8:	2200      	movs	r2, #0
    7ffa:	701a      	strb	r2, [r3, #0]
			// you are braking .... so 
			// 1. look for 500 counts on current to stop braking. 
			// 2. when at 1/10 g then retract 
			// 3. also maximum time of braking is 15 second. 
			// 
 			if ((flimitState == 0)&&(done == 0))
    7ffc:	4b23      	ldr	r3, [pc, #140]	; (808c <BrakeBoardStateMachineTask+0x11c4>)
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	2b00      	cmp	r3, #0
    8002:	d164      	bne.n	80ce <BrakeBoardStateMachineTask+0x1206>
    8004:	1c3b      	adds	r3, r7, #0
    8006:	330e      	adds	r3, #14
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	2b00      	cmp	r3, #0
    800c:	d15f      	bne.n	80ce <BrakeBoardStateMachineTask+0x1206>
			{
				done = 1; 
    800e:	1c3b      	adds	r3, r7, #0
    8010:	330e      	adds	r3, #14
    8012:	2201      	movs	r2, #1
    8014:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    8016:	2001      	movs	r0, #1
    8018:	4b10      	ldr	r3, [pc, #64]	; (805c <BrakeBoardStateMachineTask+0x1194>)
    801a:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    801c:	2001      	movs	r0, #1
    801e:	4b1c      	ldr	r3, [pc, #112]	; (8090 <BrakeBoardStateMachineTask+0x11c8>)
    8020:	4798      	blx	r3
    8022:	1c03      	adds	r3, r0, #0
    8024:	2b00      	cmp	r3, #0
    8026:	d135      	bne.n	8094 <BrakeBoardStateMachineTask+0x11cc>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8028:	4b09      	ldr	r3, [pc, #36]	; (8050 <BrakeBoardStateMachineTask+0x1188>)
    802a:	2207      	movs	r2, #7
    802c:	701a      	strb	r2, [r3, #0]
    802e:	e04e      	b.n	80ce <BrakeBoardStateMachineTask+0x1206>
    8030:	20002ee6 	.word	0x20002ee6
    8034:	2000306a 	.word	0x2000306a
    8038:	20003070 	.word	0x20003070
    803c:	20003694 	.word	0x20003694
    8040:	200004b2 	.word	0x200004b2
    8044:	000090a1 	.word	0x000090a1
    8048:	20002ec4 	.word	0x20002ec4
    804c:	20002eee 	.word	0x20002eee
    8050:	20002ebf 	.word	0x20002ebf
    8054:	20002ede 	.word	0x20002ede
    8058:	00006851 	.word	0x00006851
    805c:	00009ac9 	.word	0x00009ac9
    8060:	200036c4 	.word	0x200036c4
    8064:	00009bdd 	.word	0x00009bdd
    8068:	20002ee2 	.word	0x20002ee2
    806c:	200004ae 	.word	0x200004ae
    8070:	20002ef2 	.word	0x20002ef2
    8074:	00009c99 	.word	0x00009c99
    8078:	20002f1c 	.word	0x20002f1c
    807c:	200004b6 	.word	0x200004b6
    8080:	20002fb8 	.word	0x20002fb8
    8084:	20002ef4 	.word	0x20002ef4
    8088:	00005b7d 	.word	0x00005b7d
    808c:	20003072 	.word	0x20003072
    8090:	000069a1 	.word	0x000069a1
				}
				else
				{
					thresholdmet = 0; 
    8094:	4bc7      	ldr	r3, [pc, #796]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    8096:	2200      	movs	r2, #0
    8098:	701a      	strb	r2, [r3, #0]
					brakeState = BRAKESTATE_ACTIVE_HOLD; 
    809a:	4bc7      	ldr	r3, [pc, #796]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    809c:	220d      	movs	r2, #13
    809e:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_DITHER;
    80a0:	4bc6      	ldr	r3, [pc, #792]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	2210      	movs	r2, #16
    80a6:	4393      	bics	r3, r2
    80a8:	b2da      	uxtb	r2, r3
    80aa:	4bc4      	ldr	r3, [pc, #784]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    80ac:	701a      	strb	r2, [r3, #0]
					ditherTimer = 0;  
    80ae:	4bc4      	ldr	r3, [pc, #784]	; (83c0 <BrakeBoardStateMachineTask+0x14f8>)
    80b0:	2200      	movs	r2, #0
    80b2:	801a      	strh	r2, [r3, #0]
					if (encoderFlip != 0)
    80b4:	4bc3      	ldr	r3, [pc, #780]	; (83c4 <BrakeBoardStateMachineTask+0x14fc>)
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	2b00      	cmp	r3, #0
    80ba:	d004      	beq.n	80c6 <BrakeBoardStateMachineTask+0x11fe>
					{
						encoderFillOffset = MAX_BUILDTABLE;
    80bc:	4bc2      	ldr	r3, [pc, #776]	; (83c8 <BrakeBoardStateMachineTask+0x1500>)
    80be:	2280      	movs	r2, #128	; 0x80
    80c0:	00d2      	lsls	r2, r2, #3
    80c2:	801a      	strh	r2, [r3, #0]
    80c4:	e003      	b.n	80ce <BrakeBoardStateMachineTask+0x1206>
					}
					else
					{
						encoderFillOffset = encoderTableOffset; 
    80c6:	4bc1      	ldr	r3, [pc, #772]	; (83cc <BrakeBoardStateMachineTask+0x1504>)
    80c8:	881a      	ldrh	r2, [r3, #0]
    80ca:	4bbf      	ldr	r3, [pc, #764]	; (83c8 <BrakeBoardStateMachineTask+0x1500>)
    80cc:	801a      	strh	r2, [r3, #0]
					}
				}
				
			}	
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    80ce:	4bbb      	ldr	r3, [pc, #748]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	1c1a      	adds	r2, r3, #0
    80d4:	2302      	movs	r3, #2
    80d6:	4013      	ands	r3, r2
    80d8:	d02e      	beq.n	8138 <BrakeBoardStateMachineTask+0x1270>
    80da:	1c3b      	adds	r3, r7, #0
    80dc:	330e      	adds	r3, #14
    80de:	781b      	ldrb	r3, [r3, #0]
    80e0:	2b00      	cmp	r3, #0
    80e2:	d129      	bne.n	8138 <BrakeBoardStateMachineTask+0x1270>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    80e4:	4bb5      	ldr	r3, [pc, #724]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	2202      	movs	r2, #2
    80ea:	4393      	bics	r3, r2
    80ec:	b2da      	uxtb	r2, r3
    80ee:	4bb3      	ldr	r3, [pc, #716]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    80f0:	701a      	strb	r2, [r3, #0]
				MotorOff(1);	
    80f2:	2001      	movs	r0, #1
    80f4:	4bb6      	ldr	r3, [pc, #728]	; (83d0 <BrakeBoardStateMachineTask+0x1508>)
    80f6:	4798      	blx	r3
				done = 1; 
    80f8:	1c3b      	adds	r3, r7, #0
    80fa:	330e      	adds	r3, #14
    80fc:	2201      	movs	r2, #1
    80fe:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8100:	2002      	movs	r0, #2
    8102:	4bb4      	ldr	r3, [pc, #720]	; (83d4 <BrakeBoardStateMachineTask+0x150c>)
    8104:	4798      	blx	r3
    8106:	1c03      	adds	r3, r0, #0
    8108:	2b00      	cmp	r3, #0
    810a:	d106      	bne.n	811a <BrakeBoardStateMachineTask+0x1252>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    810c:	4baa      	ldr	r3, [pc, #680]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    810e:	2207      	movs	r2, #7
    8110:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8112:	4bb1      	ldr	r3, [pc, #708]	; (83d8 <BrakeBoardStateMachineTask+0x1510>)
    8114:	2200      	movs	r2, #0
    8116:	801a      	strh	r2, [r3, #0]
    8118:	e007      	b.n	812a <BrakeBoardStateMachineTask+0x1262>
				}
				else
				{
 					MotorCCW();
    811a:	4bb0      	ldr	r3, [pc, #704]	; (83dc <BrakeBoardStateMachineTask+0x1514>)
    811c:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    811e:	4bae      	ldr	r3, [pc, #696]	; (83d8 <BrakeBoardStateMachineTask+0x1510>)
    8120:	2264      	movs	r2, #100	; 0x64
    8122:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    8124:	4ba4      	ldr	r3, [pc, #656]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    8126:	2217      	movs	r2, #23
    8128:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    812a:	4ba4      	ldr	r3, [pc, #656]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    812c:	781b      	ldrb	r3, [r3, #0]
    812e:	2202      	movs	r2, #2
    8130:	4393      	bics	r3, r2
    8132:	b2da      	uxtb	r2, r3
    8134:	4ba1      	ldr	r3, [pc, #644]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8136:	701a      	strb	r2, [r3, #0]
			}			
			if ((motorRunTime == 0)&&(done == 0))
    8138:	4ba9      	ldr	r3, [pc, #676]	; (83e0 <BrakeBoardStateMachineTask+0x1518>)
    813a:	881b      	ldrh	r3, [r3, #0]
    813c:	2b00      	cmp	r3, #0
    813e:	d000      	beq.n	8142 <BrakeBoardStateMachineTask+0x127a>
    8140:	e0ab      	b.n	829a <BrakeBoardStateMachineTask+0x13d2>
    8142:	1c3b      	adds	r3, r7, #0
    8144:	330e      	adds	r3, #14
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	2b00      	cmp	r3, #0
    814a:	d000      	beq.n	814e <BrakeBoardStateMachineTask+0x1286>
    814c:	e0a5      	b.n	829a <BrakeBoardStateMachineTask+0x13d2>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    814e:	2001      	movs	r0, #1
    8150:	4ba4      	ldr	r3, [pc, #656]	; (83e4 <BrakeBoardStateMachineTask+0x151c>)
    8152:	4798      	blx	r3
    8154:	1c03      	adds	r3, r0, #0
    8156:	1c1a      	adds	r2, r3, #0
    8158:	4ba3      	ldr	r3, [pc, #652]	; (83e8 <BrakeBoardStateMachineTask+0x1520>)
    815a:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculated();
    815c:	4ba3      	ldr	r3, [pc, #652]	; (83ec <BrakeBoardStateMachineTask+0x1524>)
    815e:	4798      	blx	r3
    8160:	1c03      	adds	r3, r0, #0
    8162:	1c1a      	adds	r2, r3, #0
    8164:	4ba2      	ldr	r3, [pc, #648]	; (83f0 <BrakeBoardStateMachineTask+0x1528>)
    8166:	801a      	strh	r2, [r3, #0]
				//---------------v1.05 
				if (table0.Item.Hybrid == FALSE)
    8168:	4ba2      	ldr	r3, [pc, #648]	; (83f4 <BrakeBoardStateMachineTask+0x152c>)
    816a:	7e5b      	ldrb	r3, [r3, #25]
    816c:	2b00      	cmp	r3, #0
    816e:	d119      	bne.n	81a4 <BrakeBoardStateMachineTask+0x12dc>
				{								
					if (brakeCycleCount <2)
    8170:	4ba1      	ldr	r3, [pc, #644]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    8172:	781b      	ldrb	r3, [r3, #0]
    8174:	2b01      	cmp	r3, #1
    8176:	d806      	bhi.n	8186 <BrakeBoardStateMachineTask+0x12be>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    8178:	2002      	movs	r0, #2
    817a:	4ba0      	ldr	r3, [pc, #640]	; (83fc <BrakeBoardStateMachineTask+0x1534>)
    817c:	4798      	blx	r3
    817e:	1c03      	adds	r3, r0, #0
    8180:	1c1a      	adds	r2, r3, #0
    8182:	4b9b      	ldr	r3, [pc, #620]	; (83f0 <BrakeBoardStateMachineTask+0x1528>)
    8184:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    8186:	4b9c      	ldr	r3, [pc, #624]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	2b02      	cmp	r3, #2
    818c:	d10a      	bne.n	81a4 <BrakeBoardStateMachineTask+0x12dc>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    818e:	4b99      	ldr	r3, [pc, #612]	; (83f4 <BrakeBoardStateMachineTask+0x152c>)
    8190:	7d9b      	ldrb	r3, [r3, #22]
    8192:	085b      	lsrs	r3, r3, #1
    8194:	b2db      	uxtb	r3, r3
    8196:	1c18      	adds	r0, r3, #0
    8198:	4b98      	ldr	r3, [pc, #608]	; (83fc <BrakeBoardStateMachineTask+0x1534>)
    819a:	4798      	blx	r3
    819c:	1c03      	adds	r3, r0, #0
    819e:	1c1a      	adds	r2, r3, #0
    81a0:	4b93      	ldr	r3, [pc, #588]	; (83f0 <BrakeBoardStateMachineTask+0x1528>)
    81a2:	801a      	strh	r2, [r3, #0]
					}					
				}
//V01_41 boc
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    81a4:	2002      	movs	r0, #2
    81a6:	4b8f      	ldr	r3, [pc, #572]	; (83e4 <BrakeBoardStateMachineTask+0x151c>)
    81a8:	4798      	blx	r3
    81aa:	1c03      	adds	r3, r0, #0
    81ac:	1c1a      	adds	r2, r3, #0
    81ae:	4b94      	ldr	r3, [pc, #592]	; (8400 <BrakeBoardStateMachineTask+0x1538>)
    81b0:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculated();
    81b2:	4b94      	ldr	r3, [pc, #592]	; (8404 <BrakeBoardStateMachineTask+0x153c>)
    81b4:	4798      	blx	r3
    81b6:	1c03      	adds	r3, r0, #0
    81b8:	1c1a      	adds	r2, r3, #0
    81ba:	4b93      	ldr	r3, [pc, #588]	; (8408 <BrakeBoardStateMachineTask+0x1540>)
    81bc:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    81be:	4b8d      	ldr	r3, [pc, #564]	; (83f4 <BrakeBoardStateMachineTask+0x152c>)
    81c0:	7e5b      	ldrb	r3, [r3, #25]
    81c2:	2b00      	cmp	r3, #0
    81c4:	d119      	bne.n	81fa <BrakeBoardStateMachineTask+0x1332>
				{
					if (brakeCycleCount <2)
    81c6:	4b8c      	ldr	r3, [pc, #560]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    81c8:	781b      	ldrb	r3, [r3, #0]
    81ca:	2b01      	cmp	r3, #1
    81cc:	d806      	bhi.n	81dc <BrakeBoardStateMachineTask+0x1314>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(2);
    81ce:	2002      	movs	r0, #2
    81d0:	4b8e      	ldr	r3, [pc, #568]	; (840c <BrakeBoardStateMachineTask+0x1544>)
    81d2:	4798      	blx	r3
    81d4:	1c03      	adds	r3, r0, #0
    81d6:	1c1a      	adds	r2, r3, #0
    81d8:	4b8b      	ldr	r3, [pc, #556]	; (8408 <BrakeBoardStateMachineTask+0x1540>)
    81da:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    81dc:	4b86      	ldr	r3, [pc, #536]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	2b02      	cmp	r3, #2
    81e2:	d10a      	bne.n	81fa <BrakeBoardStateMachineTask+0x1332>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    81e4:	4b83      	ldr	r3, [pc, #524]	; (83f4 <BrakeBoardStateMachineTask+0x152c>)
    81e6:	7d9b      	ldrb	r3, [r3, #22]
    81e8:	085b      	lsrs	r3, r3, #1
    81ea:	b2db      	uxtb	r3, r3
    81ec:	1c18      	adds	r0, r3, #0
    81ee:	4b87      	ldr	r3, [pc, #540]	; (840c <BrakeBoardStateMachineTask+0x1544>)
    81f0:	4798      	blx	r3
    81f2:	1c03      	adds	r3, r0, #0
    81f4:	1c1a      	adds	r2, r3, #0
    81f6:	4b84      	ldr	r3, [pc, #528]	; (8408 <BrakeBoardStateMachineTask+0x1540>)
    81f8:	801a      	strh	r2, [r3, #0]
				//--------------------v1.05
//v01_41	
#if FSR_USE			
				if (fsrRead > newFSRThreshold)
#else
				if (currentRead > newCurrentThreshold)   
    81fa:	4b7b      	ldr	r3, [pc, #492]	; (83e8 <BrakeBoardStateMachineTask+0x1520>)
    81fc:	881a      	ldrh	r2, [r3, #0]
    81fe:	4b7c      	ldr	r3, [pc, #496]	; (83f0 <BrakeBoardStateMachineTask+0x1528>)
    8200:	881b      	ldrh	r3, [r3, #0]
    8202:	429a      	cmp	r2, r3
    8204:	d949      	bls.n	829a <BrakeBoardStateMachineTask+0x13d2>
#endif				
				{
					MotorOff(1);		
    8206:	2001      	movs	r0, #1
    8208:	4b71      	ldr	r3, [pc, #452]	; (83d0 <BrakeBoardStateMachineTask+0x1508>)
    820a:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    820c:	4b7a      	ldr	r3, [pc, #488]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b09      	cmp	r3, #9
    8212:	d805      	bhi.n	8220 <BrakeBoardStateMachineTask+0x1358>
					{
						brakeCycleCount++;
    8214:	4b78      	ldr	r3, [pc, #480]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	3301      	adds	r3, #1
    821a:	b2da      	uxtb	r2, r3
    821c:	4b76      	ldr	r3, [pc, #472]	; (83f8 <BrakeBoardStateMachineTask+0x1530>)
    821e:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8220:	2002      	movs	r0, #2
    8222:	4b6c      	ldr	r3, [pc, #432]	; (83d4 <BrakeBoardStateMachineTask+0x150c>)
    8224:	4798      	blx	r3
    8226:	1c03      	adds	r3, r0, #0
    8228:	2b00      	cmp	r3, #0
    822a:	d111      	bne.n	8250 <BrakeBoardStateMachineTask+0x1388>
					{
						done = 1; 
    822c:	1c3b      	adds	r3, r7, #0
    822e:	330e      	adds	r3, #14
    8230:	2201      	movs	r2, #1
    8232:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ERROR_RETRACT;
    8234:	4b60      	ldr	r3, [pc, #384]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    8236:	2207      	movs	r2, #7
    8238:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    823a:	4b67      	ldr	r3, [pc, #412]	; (83d8 <BrakeBoardStateMachineTask+0x1510>)
    823c:	2200      	movs	r2, #0
    823e:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8240:	4b5e      	ldr	r3, [pc, #376]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	2202      	movs	r2, #2
    8246:	4393      	bics	r3, r2
    8248:	b2da      	uxtb	r2, r3
    824a:	4b5c      	ldr	r3, [pc, #368]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    824c:	701a      	strb	r2, [r3, #0]
    824e:	e024      	b.n	829a <BrakeBoardStateMachineTask+0x13d2>
					}
					else
					{
						done =1; 
    8250:	1c3b      	adds	r3, r7, #0
    8252:	330e      	adds	r3, #14
    8254:	2201      	movs	r2, #1
    8256:	701a      	strb	r2, [r3, #0]
						thresholdmet = 0;
    8258:	4b56      	ldr	r3, [pc, #344]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    825a:	2200      	movs	r2, #0
    825c:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_HOLD;  		
    825e:	4b56      	ldr	r3, [pc, #344]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    8260:	220d      	movs	r2, #13
    8262:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    8264:	4b55      	ldr	r3, [pc, #340]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	2210      	movs	r2, #16
    826a:	4393      	bics	r3, r2
    826c:	b2da      	uxtb	r2, r3
    826e:	4b53      	ldr	r3, [pc, #332]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8270:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;  	
    8272:	4b53      	ldr	r3, [pc, #332]	; (83c0 <BrakeBoardStateMachineTask+0x14f8>)
    8274:	2200      	movs	r2, #0
    8276:	801a      	strh	r2, [r3, #0]
						holdG = instantGain; 	
    8278:	4b65      	ldr	r3, [pc, #404]	; (8410 <BrakeBoardStateMachineTask+0x1548>)
    827a:	881a      	ldrh	r2, [r3, #0]
    827c:	4b65      	ldr	r3, [pc, #404]	; (8414 <BrakeBoardStateMachineTask+0x154c>)
    827e:	801a      	strh	r2, [r3, #0]
						if (encoderFlip != 0)
    8280:	4b50      	ldr	r3, [pc, #320]	; (83c4 <BrakeBoardStateMachineTask+0x14fc>)
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	2b00      	cmp	r3, #0
    8286:	d004      	beq.n	8292 <BrakeBoardStateMachineTask+0x13ca>
						{
							encoderFillOffset = MAX_BUILDTABLE;
    8288:	4b4f      	ldr	r3, [pc, #316]	; (83c8 <BrakeBoardStateMachineTask+0x1500>)
    828a:	2280      	movs	r2, #128	; 0x80
    828c:	00d2      	lsls	r2, r2, #3
    828e:	801a      	strh	r2, [r3, #0]
    8290:	e003      	b.n	829a <BrakeBoardStateMachineTask+0x13d2>
						}
						else
						{
							encoderFillOffset = encoderTableOffset;
    8292:	4b4e      	ldr	r3, [pc, #312]	; (83cc <BrakeBoardStateMachineTask+0x1504>)
    8294:	881a      	ldrh	r2, [r3, #0]
    8296:	4b4c      	ldr	r3, [pc, #304]	; (83c8 <BrakeBoardStateMachineTask+0x1500>)
    8298:	801a      	strh	r2, [r3, #0]
						}													
					}
				}
			}
			//----------------------boc ----- v01_39_#1
			if (done == 0)
    829a:	1c3b      	adds	r3, r7, #0
    829c:	330e      	adds	r3, #14
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	2b00      	cmp	r3, #0
    82a2:	d160      	bne.n	8366 <BrakeBoardStateMachineTask+0x149e>
			{
				tempdiffx = MotorGetAcc(TRUE);				
    82a4:	2001      	movs	r0, #1
    82a6:	4b5c      	ldr	r3, [pc, #368]	; (8418 <BrakeBoardStateMachineTask+0x1550>)
    82a8:	4798      	blx	r3
    82aa:	1c03      	adds	r3, r0, #0
    82ac:	1c1a      	adds	r2, r3, #0
    82ae:	4b5b      	ldr	r3, [pc, #364]	; (841c <BrakeBoardStateMachineTask+0x1554>)
    82b0:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    82b2:	4b50      	ldr	r3, [pc, #320]	; (83f4 <BrakeBoardStateMachineTask+0x152c>)
    82b4:	7eda      	ldrb	r2, [r3, #27]
    82b6:	1c3b      	adds	r3, r7, #0
    82b8:	330a      	adds	r3, #10
    82ba:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    82bc:	1c3b      	adds	r3, r7, #0
    82be:	330a      	adds	r3, #10
    82c0:	881b      	ldrh	r3, [r3, #0]
    82c2:	2b09      	cmp	r3, #9
    82c4:	d903      	bls.n	82ce <BrakeBoardStateMachineTask+0x1406>
				{
					itemp2 = 0;
    82c6:	1c3b      	adds	r3, r7, #0
    82c8:	330a      	adds	r3, #10
    82ca:	2200      	movs	r2, #0
    82cc:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    82ce:	1c3a      	adds	r2, r7, #0
    82d0:	320a      	adds	r2, #10
    82d2:	1c3b      	adds	r3, r7, #0
    82d4:	330a      	adds	r3, #10
    82d6:	881b      	ldrh	r3, [r3, #0]
    82d8:	1c19      	adds	r1, r3, #0
    82da:	00c9      	lsls	r1, r1, #3
    82dc:	18cb      	adds	r3, r1, r3
    82de:	1c19      	adds	r1, r3, #0
    82e0:	00c8      	lsls	r0, r1, #3
    82e2:	1c19      	adds	r1, r3, #0
    82e4:	1c03      	adds	r3, r0, #0
    82e6:	18cb      	adds	r3, r1, r3
    82e8:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_TWENTYITH_G;
    82ea:	1c3b      	adds	r3, r7, #0
    82ec:	330a      	adds	r3, #10
    82ee:	1c3a      	adds	r2, r7, #0
    82f0:	320a      	adds	r2, #10
    82f2:	8812      	ldrh	r2, [r2, #0]
    82f4:	484a      	ldr	r0, [pc, #296]	; (8420 <BrakeBoardStateMachineTask+0x1558>)
    82f6:	1812      	adds	r2, r2, r0
    82f8:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_LESS,motorAccXBaseline)!=0)
    82fa:	1c3b      	adds	r3, r7, #0
    82fc:	330a      	adds	r3, #10
    82fe:	881a      	ldrh	r2, [r3, #0]
    8300:	4b48      	ldr	r3, [pc, #288]	; (8424 <BrakeBoardStateMachineTask+0x155c>)
    8302:	881b      	ldrh	r3, [r3, #0]
    8304:	b212      	sxth	r2, r2
    8306:	b21b      	sxth	r3, r3
    8308:	1c10      	adds	r0, r2, #0
    830a:	2102      	movs	r1, #2
    830c:	1c1a      	adds	r2, r3, #0
    830e:	4b46      	ldr	r3, [pc, #280]	; (8428 <BrakeBoardStateMachineTask+0x1560>)
    8310:	4798      	blx	r3
    8312:	1c03      	adds	r3, r0, #0
    8314:	2b00      	cmp	r3, #0
    8316:	d023      	beq.n	8360 <BrakeBoardStateMachineTask+0x1498>
				{
					thresholdmet++; 
    8318:	4b26      	ldr	r3, [pc, #152]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	3301      	adds	r3, #1
    831e:	b2da      	uxtb	r2, r3
    8320:	4b24      	ldr	r3, [pc, #144]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    8322:	701a      	strb	r2, [r3, #0]
					if (thresholdmet > MAX_THRESHOLD_NEEDED)
    8324:	4b23      	ldr	r3, [pc, #140]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	2b03      	cmp	r3, #3
    832a:	d91c      	bls.n	8366 <BrakeBoardStateMachineTask+0x149e>
					{
 						done = 1; 
    832c:	1c3b      	adds	r3, r7, #0
    832e:	330e      	adds	r3, #14
    8330:	2201      	movs	r2, #1
    8332:	701a      	strb	r2, [r3, #0]
						thresholdmet = 0;
    8334:	4b1f      	ldr	r3, [pc, #124]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    8336:	2200      	movs	r2, #0
    8338:	701a      	strb	r2, [r3, #0]
						MotorOff(1);
    833a:	2001      	movs	r0, #1
    833c:	4b24      	ldr	r3, [pc, #144]	; (83d0 <BrakeBoardStateMachineTask+0x1508>)
    833e:	4798      	blx	r3
						MotorCCW();
    8340:	4b26      	ldr	r3, [pc, #152]	; (83dc <BrakeBoardStateMachineTask+0x1514>)
    8342:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;   
    8344:	4b24      	ldr	r3, [pc, #144]	; (83d8 <BrakeBoardStateMachineTask+0x1510>)
    8346:	2264      	movs	r2, #100	; 0x64
    8348:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT;  
    834a:	4b1b      	ldr	r3, [pc, #108]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    834c:	2210      	movs	r2, #16
    834e:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;		
    8350:	4b1a      	ldr	r3, [pc, #104]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	2202      	movs	r2, #2
    8356:	4393      	bics	r3, r2
    8358:	b2da      	uxtb	r2, r3
    835a:	4b18      	ldr	r3, [pc, #96]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    835c:	701a      	strb	r2, [r3, #0]
    835e:	e002      	b.n	8366 <BrakeBoardStateMachineTask+0x149e>
					}
				}
				else
				{
					thresholdmet = 0; 
    8360:	4b14      	ldr	r3, [pc, #80]	; (83b4 <BrakeBoardStateMachineTask+0x14ec>)
    8362:	2200      	movs	r2, #0
    8364:	701a      	strb	r2, [r3, #0]
			}			
			//---------- eoc v01_39_#1 
		}				
		case BRAKESTATE_ACTIVE_HOLD:
		{
			done = 0;
    8366:	1c3b      	adds	r3, r7, #0
    8368:	330e      	adds	r3, #14
    836a:	2200      	movs	r2, #0
    836c:	701a      	strb	r2, [r3, #0]
			// you are braking .... so
			// 1. look for 500 counts on current to stop braking.
			// 2. when at 1/10 g then retract
			// 3. also maximum time of braking is 15 second.
			//
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    836e:	4b13      	ldr	r3, [pc, #76]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8370:	781b      	ldrb	r3, [r3, #0]
    8372:	1c1a      	adds	r2, r3, #0
    8374:	2302      	movs	r3, #2
    8376:	4013      	ands	r3, r2
    8378:	d067      	beq.n	844a <BrakeBoardStateMachineTask+0x1582>
    837a:	1c3b      	adds	r3, r7, #0
    837c:	330e      	adds	r3, #14
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	2b00      	cmp	r3, #0
    8382:	d162      	bne.n	844a <BrakeBoardStateMachineTask+0x1582>
			{
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8384:	4b0d      	ldr	r3, [pc, #52]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8386:	781b      	ldrb	r3, [r3, #0]
    8388:	2202      	movs	r2, #2
    838a:	4393      	bics	r3, r2
    838c:	b2da      	uxtb	r2, r3
    838e:	4b0b      	ldr	r3, [pc, #44]	; (83bc <BrakeBoardStateMachineTask+0x14f4>)
    8390:	701a      	strb	r2, [r3, #0]
				MotorOff(1);		
    8392:	2001      	movs	r0, #1
    8394:	4b0e      	ldr	r3, [pc, #56]	; (83d0 <BrakeBoardStateMachineTask+0x1508>)
    8396:	4798      	blx	r3
				done = 1; 
    8398:	1c3b      	adds	r3, r7, #0
    839a:	330e      	adds	r3, #14
    839c:	2201      	movs	r2, #1
    839e:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    83a0:	2002      	movs	r0, #2
    83a2:	4b0c      	ldr	r3, [pc, #48]	; (83d4 <BrakeBoardStateMachineTask+0x150c>)
    83a4:	4798      	blx	r3
    83a6:	1c03      	adds	r3, r0, #0
    83a8:	2b00      	cmp	r3, #0
    83aa:	d13f      	bne.n	842c <BrakeBoardStateMachineTask+0x1564>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    83ac:	4b02      	ldr	r3, [pc, #8]	; (83b8 <BrakeBoardStateMachineTask+0x14f0>)
    83ae:	2207      	movs	r2, #7
    83b0:	701a      	strb	r2, [r3, #0]
    83b2:	e043      	b.n	843c <BrakeBoardStateMachineTask+0x1574>
    83b4:	200004b2 	.word	0x200004b2
    83b8:	20002ebf 	.word	0x20002ebf
    83bc:	20002eee 	.word	0x20002eee
    83c0:	20002ed4 	.word	0x20002ed4
    83c4:	200004aa 	.word	0x200004aa
    83c8:	200004a6 	.word	0x200004a6
    83cc:	20001e9e 	.word	0x20001e9e
    83d0:	00009ac9 	.word	0x00009ac9
    83d4:	000069a1 	.word	0x000069a1
    83d8:	200036c4 	.word	0x200036c4
    83dc:	00009bdd 	.word	0x00009bdd
    83e0:	20002eb2 	.word	0x20002eb2
    83e4:	0000b409 	.word	0x0000b409
    83e8:	20002ea6 	.word	0x20002ea6
    83ec:	000090c1 	.word	0x000090c1
    83f0:	20002eaa 	.word	0x20002eaa
    83f4:	20002fb8 	.word	0x20002fb8
    83f8:	200004b7 	.word	0x200004b7
    83fc:	00009499 	.word	0x00009499
    8400:	20002eea 	.word	0x20002eea
    8404:	00009211 	.word	0x00009211
    8408:	20002eac 	.word	0x20002eac
    840c:	00009515 	.word	0x00009515
    8410:	20002ef6 	.word	0x20002ef6
    8414:	20002ec2 	.word	0x20002ec2
    8418:	000090a1 	.word	0x000090a1
    841c:	20002ec4 	.word	0x20002ec4
    8420:	00000333 	.word	0x00000333
    8424:	20002ef4 	.word	0x20002ef4
    8428:	00005b7d 	.word	0x00005b7d
				}
				else
				{
 					MotorCCW();
    842c:	4bd5      	ldr	r3, [pc, #852]	; (8784 <BrakeBoardStateMachineTask+0x18bc>)
    842e:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8430:	4bd5      	ldr	r3, [pc, #852]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    8432:	2264      	movs	r2, #100	; 0x64
    8434:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    8436:	4bd5      	ldr	r3, [pc, #852]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    8438:	2217      	movs	r2, #23
    843a:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    843c:	4bd4      	ldr	r3, [pc, #848]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    843e:	781b      	ldrb	r3, [r3, #0]
    8440:	2202      	movs	r2, #2
    8442:	4393      	bics	r3, r2
    8444:	b2da      	uxtb	r2, r3
    8446:	4bd2      	ldr	r3, [pc, #840]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8448:	701a      	strb	r2, [r3, #0]
			}			
			if (done == 0)
    844a:	1c3b      	adds	r3, r7, #0
    844c:	330e      	adds	r3, #14
    844e:	781b      	ldrb	r3, [r3, #0]
    8450:	2b00      	cmp	r3, #0
    8452:	d15e      	bne.n	8512 <BrakeBoardStateMachineTask+0x164a>
			{
				tempdiffx = MotorGetAcc(TRUE);				
    8454:	2001      	movs	r0, #1
    8456:	4bcf      	ldr	r3, [pc, #828]	; (8794 <BrakeBoardStateMachineTask+0x18cc>)
    8458:	4798      	blx	r3
    845a:	1c03      	adds	r3, r0, #0
    845c:	1c1a      	adds	r2, r3, #0
    845e:	4bce      	ldr	r3, [pc, #824]	; (8798 <BrakeBoardStateMachineTask+0x18d0>)
    8460:	801a      	strh	r2, [r3, #0]
				itemp2 = table0.Item.SensitivitySet;;
    8462:	4bce      	ldr	r3, [pc, #824]	; (879c <BrakeBoardStateMachineTask+0x18d4>)
    8464:	7eda      	ldrb	r2, [r3, #27]
    8466:	1c3b      	adds	r3, r7, #0
    8468:	330a      	adds	r3, #10
    846a:	801a      	strh	r2, [r3, #0]
				if (itemp2 >9)
    846c:	1c3b      	adds	r3, r7, #0
    846e:	330a      	adds	r3, #10
    8470:	881b      	ldrh	r3, [r3, #0]
    8472:	2b09      	cmp	r3, #9
    8474:	d903      	bls.n	847e <BrakeBoardStateMachineTask+0x15b6>
				{
					itemp2 = 0;
    8476:	1c3b      	adds	r3, r7, #0
    8478:	330a      	adds	r3, #10
    847a:	2200      	movs	r2, #0
    847c:	801a      	strh	r2, [r3, #0]
				}
				itemp2 = itemp2 * ACC_THRESHOLD_MULTIPLIER;
    847e:	1c3a      	adds	r2, r7, #0
    8480:	320a      	adds	r2, #10
    8482:	1c3b      	adds	r3, r7, #0
    8484:	330a      	adds	r3, #10
    8486:	881b      	ldrh	r3, [r3, #0]
    8488:	1c19      	adds	r1, r3, #0
    848a:	00c9      	lsls	r1, r1, #3
    848c:	18cb      	adds	r3, r1, r3
    848e:	1c19      	adds	r1, r3, #0
    8490:	00c8      	lsls	r0, r1, #3
    8492:	1c19      	adds	r1, r3, #0
    8494:	1c03      	adds	r3, r0, #0
    8496:	18cb      	adds	r3, r1, r3
    8498:	8013      	strh	r3, [r2, #0]
				itemp2 = itemp2 + ACC_TWENTYITH_G;
    849a:	1c3b      	adds	r3, r7, #0
    849c:	330a      	adds	r3, #10
    849e:	1c3a      	adds	r2, r7, #0
    84a0:	320a      	adds	r2, #10
    84a2:	8812      	ldrh	r2, [r2, #0]
    84a4:	49be      	ldr	r1, [pc, #760]	; (87a0 <BrakeBoardStateMachineTask+0x18d8>)
    84a6:	1852      	adds	r2, r2, r1
    84a8:	801a      	strh	r2, [r3, #0]
			    if (AccelProvideDecisions(itemp2,DECISION_LESS,motorAccXBaseline)!=0)
    84aa:	1c3b      	adds	r3, r7, #0
    84ac:	330a      	adds	r3, #10
    84ae:	881a      	ldrh	r2, [r3, #0]
    84b0:	4bbc      	ldr	r3, [pc, #752]	; (87a4 <BrakeBoardStateMachineTask+0x18dc>)
    84b2:	881b      	ldrh	r3, [r3, #0]
    84b4:	b212      	sxth	r2, r2
    84b6:	b21b      	sxth	r3, r3
    84b8:	1c10      	adds	r0, r2, #0
    84ba:	2102      	movs	r1, #2
    84bc:	1c1a      	adds	r2, r3, #0
    84be:	4bba      	ldr	r3, [pc, #744]	; (87a8 <BrakeBoardStateMachineTask+0x18e0>)
    84c0:	4798      	blx	r3
    84c2:	1c03      	adds	r3, r0, #0
    84c4:	2b00      	cmp	r3, #0
    84c6:	d01f      	beq.n	8508 <BrakeBoardStateMachineTask+0x1640>
				{
					thresholdmet++; 
    84c8:	4bb8      	ldr	r3, [pc, #736]	; (87ac <BrakeBoardStateMachineTask+0x18e4>)
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	3301      	adds	r3, #1
    84ce:	b2da      	uxtb	r2, r3
    84d0:	4bb6      	ldr	r3, [pc, #728]	; (87ac <BrakeBoardStateMachineTask+0x18e4>)
    84d2:	701a      	strb	r2, [r3, #0]
 					done = 1; 
    84d4:	1c3b      	adds	r3, r7, #0
    84d6:	330e      	adds	r3, #14
    84d8:	2201      	movs	r2, #1
    84da:	701a      	strb	r2, [r3, #0]
					thresholdmet = 0;
    84dc:	4bb3      	ldr	r3, [pc, #716]	; (87ac <BrakeBoardStateMachineTask+0x18e4>)
    84de:	2200      	movs	r2, #0
    84e0:	701a      	strb	r2, [r3, #0]
					MotorOff(1);
    84e2:	2001      	movs	r0, #1
    84e4:	4bb2      	ldr	r3, [pc, #712]	; (87b0 <BrakeBoardStateMachineTask+0x18e8>)
    84e6:	4798      	blx	r3
					MotorCCW();
    84e8:	4ba6      	ldr	r3, [pc, #664]	; (8784 <BrakeBoardStateMachineTask+0x18bc>)
    84ea:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;   
    84ec:	4ba6      	ldr	r3, [pc, #664]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    84ee:	2264      	movs	r2, #100	; 0x64
    84f0:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT;  
    84f2:	4ba6      	ldr	r3, [pc, #664]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    84f4:	2210      	movs	r2, #16
    84f6:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;				
    84f8:	4ba5      	ldr	r3, [pc, #660]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	2202      	movs	r2, #2
    84fe:	4393      	bics	r3, r2
    8500:	b2da      	uxtb	r2, r3
    8502:	4ba3      	ldr	r3, [pc, #652]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8504:	701a      	strb	r2, [r3, #0]
    8506:	e004      	b.n	8512 <BrakeBoardStateMachineTask+0x164a>
				}
				else
				{
					thresholdmet = 0; 
    8508:	4ba8      	ldr	r3, [pc, #672]	; (87ac <BrakeBoardStateMachineTask+0x18e4>)
    850a:	2200      	movs	r2, #0
    850c:	701a      	strb	r2, [r3, #0]
						MotorExtendMore(); 								
					} 
				}				
			}
#endif			
			break;
    850e:	f000 fc90 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    8512:	f000 fc8e 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
		case BRAKESTATE_ACTIVE_RETRACT:
		{
			done = 0;
    8516:	1c3b      	adds	r3, r7, #0
    8518:	330e      	adds	r3, #14
    851a:	2200      	movs	r2, #0
    851c:	701a      	strb	r2, [r3, #0]
 			if (((hlimitState == 0)||(homeLimit == HOME_IN))&&(done == 0)) //V01_26
    851e:	4ba5      	ldr	r3, [pc, #660]	; (87b4 <BrakeBoardStateMachineTask+0x18ec>)
    8520:	781b      	ldrb	r3, [r3, #0]
    8522:	2b00      	cmp	r3, #0
    8524:	d003      	beq.n	852e <BrakeBoardStateMachineTask+0x1666>
    8526:	4ba4      	ldr	r3, [pc, #656]	; (87b8 <BrakeBoardStateMachineTask+0x18f0>)
    8528:	781b      	ldrb	r3, [r3, #0]
    852a:	2b00      	cmp	r3, #0
    852c:	d11e      	bne.n	856c <BrakeBoardStateMachineTask+0x16a4>
    852e:	1c3b      	adds	r3, r7, #0
    8530:	330e      	adds	r3, #14
    8532:	781b      	ldrb	r3, [r3, #0]
    8534:	2b00      	cmp	r3, #0
    8536:	d119      	bne.n	856c <BrakeBoardStateMachineTask+0x16a4>
			{
				done = 1; 
    8538:	1c3b      	adds	r3, r7, #0
    853a:	330e      	adds	r3, #14
    853c:	2201      	movs	r2, #1
    853e:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    8540:	2000      	movs	r0, #0
    8542:	4b9e      	ldr	r3, [pc, #632]	; (87bc <BrakeBoardStateMachineTask+0x18f4>)
    8544:	4798      	blx	r3
    8546:	1c03      	adds	r3, r0, #0
    8548:	2b00      	cmp	r3, #0
    854a:	d106      	bne.n	855a <BrakeBoardStateMachineTask+0x1692>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    854c:	4b8f      	ldr	r3, [pc, #572]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    854e:	2207      	movs	r2, #7
    8550:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8552:	4b8d      	ldr	r3, [pc, #564]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    8554:	2200      	movs	r2, #0
    8556:	801a      	strh	r2, [r3, #0]
    8558:	e008      	b.n	856c <BrakeBoardStateMachineTask+0x16a4>
				}
				else
				{
//					MotorNeedNewBaseline();
					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    855a:	4b8c      	ldr	r3, [pc, #560]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    855c:	220b      	movs	r2, #11
    855e:	701a      	strb	r2, [r3, #0]
					MotorOff(1);	
    8560:	2001      	movs	r0, #1
    8562:	4b93      	ldr	r3, [pc, #588]	; (87b0 <BrakeBoardStateMachineTask+0x18e8>)
    8564:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIMESHORT;
    8566:	4b88      	ldr	r3, [pc, #544]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    8568:	220a      	movs	r2, #10
    856a:	801a      	strh	r2, [r3, #0]
				}
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    856c:	4b88      	ldr	r3, [pc, #544]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    856e:	781b      	ldrb	r3, [r3, #0]
    8570:	1c1a      	adds	r2, r3, #0
    8572:	2302      	movs	r3, #2
    8574:	4013      	ands	r3, r2
    8576:	d027      	beq.n	85c8 <BrakeBoardStateMachineTask+0x1700>
    8578:	1c3b      	adds	r3, r7, #0
    857a:	330e      	adds	r3, #14
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	2b00      	cmp	r3, #0
    8580:	d122      	bne.n	85c8 <BrakeBoardStateMachineTask+0x1700>
			{
				done = 1; 
    8582:	1c3b      	adds	r3, r7, #0
    8584:	330e      	adds	r3, #14
    8586:	2201      	movs	r2, #1
    8588:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    858a:	4b81      	ldr	r3, [pc, #516]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    858c:	781b      	ldrb	r3, [r3, #0]
    858e:	2202      	movs	r2, #2
    8590:	4393      	bics	r3, r2
    8592:	b2da      	uxtb	r2, r3
    8594:	4b7e      	ldr	r3, [pc, #504]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8596:	701a      	strb	r2, [r3, #0]
				MotorOff(1);		
    8598:	2001      	movs	r0, #1
    859a:	4b85      	ldr	r3, [pc, #532]	; (87b0 <BrakeBoardStateMachineTask+0x18e8>)
    859c:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    859e:	2002      	movs	r0, #2
    85a0:	4b86      	ldr	r3, [pc, #536]	; (87bc <BrakeBoardStateMachineTask+0x18f4>)
    85a2:	4798      	blx	r3
    85a4:	1c03      	adds	r3, r0, #0
    85a6:	2b00      	cmp	r3, #0
    85a8:	d106      	bne.n	85b8 <BrakeBoardStateMachineTask+0x16f0>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    85aa:	4b78      	ldr	r3, [pc, #480]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    85ac:	2207      	movs	r2, #7
    85ae:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    85b0:	4b75      	ldr	r3, [pc, #468]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    85b2:	2200      	movs	r2, #0
    85b4:	801a      	strh	r2, [r3, #0]
    85b6:	e007      	b.n	85c8 <BrakeBoardStateMachineTask+0x1700>
				}
				else
				{
					MotorCCW();
    85b8:	4b72      	ldr	r3, [pc, #456]	; (8784 <BrakeBoardStateMachineTask+0x18bc>)
    85ba:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    85bc:	4b72      	ldr	r3, [pc, #456]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    85be:	2264      	movs	r2, #100	; 0x64
    85c0:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_TIMEOUT;
    85c2:	4b72      	ldr	r3, [pc, #456]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    85c4:	2217      	movs	r2, #23
    85c6:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((done == 0)&&(action == NONE)&&((brakeChange & BRAKECHANGE_DITHER)!=0))
    85c8:	1c3b      	adds	r3, r7, #0
    85ca:	330e      	adds	r3, #14
    85cc:	781b      	ldrb	r3, [r3, #0]
    85ce:	2b00      	cmp	r3, #0
    85d0:	d000      	beq.n	85d4 <BrakeBoardStateMachineTask+0x170c>
    85d2:	e07a      	b.n	86ca <BrakeBoardStateMachineTask+0x1802>
    85d4:	4b7a      	ldr	r3, [pc, #488]	; (87c0 <BrakeBoardStateMachineTask+0x18f8>)
    85d6:	781b      	ldrb	r3, [r3, #0]
    85d8:	2b00      	cmp	r3, #0
    85da:	d000      	beq.n	85de <BrakeBoardStateMachineTask+0x1716>
    85dc:	e075      	b.n	86ca <BrakeBoardStateMachineTask+0x1802>
    85de:	4b6c      	ldr	r3, [pc, #432]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    85e0:	781b      	ldrb	r3, [r3, #0]
    85e2:	1c1a      	adds	r2, r3, #0
    85e4:	2310      	movs	r3, #16
    85e6:	4013      	ands	r3, r2
    85e8:	d100      	bne.n	85ec <BrakeBoardStateMachineTask+0x1724>
    85ea:	e06e      	b.n	86ca <BrakeBoardStateMachineTask+0x1802>
			{
				brakeChange &= ~BRAKECHANGE_DITHER; 
    85ec:	4b68      	ldr	r3, [pc, #416]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    85ee:	781b      	ldrb	r3, [r3, #0]
    85f0:	2210      	movs	r2, #16
    85f2:	4393      	bics	r3, r2
    85f4:	b2da      	uxtb	r2, r3
    85f6:	4b66      	ldr	r3, [pc, #408]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    85f8:	701a      	strb	r2, [r3, #0]
				//--------------------------
				// at 100msec check gain value 
				newG = MotorGetAcc(TRUE);
    85fa:	2001      	movs	r0, #1
    85fc:	4b65      	ldr	r3, [pc, #404]	; (8794 <BrakeBoardStateMachineTask+0x18cc>)
    85fe:	4798      	blx	r3
    8600:	1c03      	adds	r3, r0, #0
    8602:	b29a      	uxth	r2, r3
    8604:	4b6f      	ldr	r3, [pc, #444]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    8606:	801a      	strh	r2, [r3, #0]
				if (newG < holdG)
    8608:	4b6e      	ldr	r3, [pc, #440]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    860a:	881a      	ldrh	r2, [r3, #0]
    860c:	4b6e      	ldr	r3, [pc, #440]	; (87c8 <BrakeBoardStateMachineTask+0x1900>)
    860e:	881b      	ldrh	r3, [r3, #0]
    8610:	429a      	cmp	r2, r3
    8612:	d239      	bcs.n	8688 <BrakeBoardStateMachineTask+0x17c0>
				{
					diffG = (holdG - newG); 
    8614:	4b6c      	ldr	r3, [pc, #432]	; (87c8 <BrakeBoardStateMachineTask+0x1900>)
    8616:	881a      	ldrh	r2, [r3, #0]
    8618:	4b6a      	ldr	r3, [pc, #424]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    861a:	881b      	ldrh	r3, [r3, #0]
    861c:	1ad3      	subs	r3, r2, r3
    861e:	b29a      	uxth	r2, r3
    8620:	4b6a      	ldr	r3, [pc, #424]	; (87cc <BrakeBoardStateMachineTask+0x1904>)
    8622:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    8624:	4b69      	ldr	r3, [pc, #420]	; (87cc <BrakeBoardStateMachineTask+0x1904>)
    8626:	881a      	ldrh	r2, [r3, #0]
    8628:	4b69      	ldr	r3, [pc, #420]	; (87d0 <BrakeBoardStateMachineTask+0x1908>)
    862a:	429a      	cmp	r2, r3
    862c:	d94d      	bls.n	86ca <BrakeBoardStateMachineTask+0x1802>
					{
						//---------------------
						// Calculate the current from the equation for the g 
						matchCurrent = CurrentMotorCalculatedForG(newG);
    862e:	4b65      	ldr	r3, [pc, #404]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    8630:	881b      	ldrh	r3, [r3, #0]
    8632:	1c18      	adds	r0, r3, #0
    8634:	4b67      	ldr	r3, [pc, #412]	; (87d4 <BrakeBoardStateMachineTask+0x190c>)
    8636:	4798      	blx	r3
    8638:	1c03      	adds	r3, r0, #0
    863a:	1c1a      	adds	r2, r3, #0
    863c:	4b66      	ldr	r3, [pc, #408]	; (87d8 <BrakeBoardStateMachineTask+0x1910>)
    863e:	801a      	strh	r2, [r3, #0]
						itemp = MotorFindEncoderMatch(matchCurrent);
    8640:	4b65      	ldr	r3, [pc, #404]	; (87d8 <BrakeBoardStateMachineTask+0x1910>)
    8642:	881b      	ldrh	r3, [r3, #0]
    8644:	1c18      	adds	r0, r3, #0
    8646:	4b65      	ldr	r3, [pc, #404]	; (87dc <BrakeBoardStateMachineTask+0x1914>)
    8648:	4798      	blx	r3
    864a:	1c03      	adds	r3, r0, #0
    864c:	1c1a      	adds	r2, r3, #0
    864e:	1d7b      	adds	r3, r7, #5
    8650:	701a      	strb	r2, [r3, #0]
						if (itemp > MAX_ENCODERCOUNT_BACK)
						{
							itemp = MAX_ENCODERCOUNT_BACK; 
						}
						encoderCountBackTotal += itemp; 
    8652:	1d7b      	adds	r3, r7, #5
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	b29a      	uxth	r2, r3
    8658:	4b61      	ldr	r3, [pc, #388]	; (87e0 <BrakeBoardStateMachineTask+0x1918>)
    865a:	881b      	ldrh	r3, [r3, #0]
    865c:	18d3      	adds	r3, r2, r3
    865e:	b29a      	uxth	r2, r3
    8660:	4b5f      	ldr	r3, [pc, #380]	; (87e0 <BrakeBoardStateMachineTask+0x1918>)
    8662:	801a      	strh	r2, [r3, #0]
						//--------------------------
						if (encoderCountBackTotal <1000)
    8664:	4b5e      	ldr	r3, [pc, #376]	; (87e0 <BrakeBoardStateMachineTask+0x1918>)
    8666:	881a      	ldrh	r2, [r3, #0]
    8668:	4b5e      	ldr	r3, [pc, #376]	; (87e4 <BrakeBoardStateMachineTask+0x191c>)
    866a:	429a      	cmp	r2, r3
    866c:	d82d      	bhi.n	86ca <BrakeBoardStateMachineTask+0x1802>
						{
							encoderCountBack = itemp; 
    866e:	1d7b      	adds	r3, r7, #5
    8670:	781b      	ldrb	r3, [r3, #0]
    8672:	b29a      	uxth	r2, r3
    8674:	4b5c      	ldr	r3, [pc, #368]	; (87e8 <BrakeBoardStateMachineTask+0x1920>)
    8676:	801a      	strh	r2, [r3, #0]
							RetractByEncoderCount();	
    8678:	4b5c      	ldr	r3, [pc, #368]	; (87ec <BrakeBoardStateMachineTask+0x1924>)
    867a:	4798      	blx	r3
							holdG = newG; 	
    867c:	4b51      	ldr	r3, [pc, #324]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    867e:	881a      	ldrh	r2, [r3, #0]
    8680:	4b51      	ldr	r3, [pc, #324]	; (87c8 <BrakeBoardStateMachineTask+0x1900>)
    8682:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
 									
					} 
				}							
			}  			
			break;
    8684:	f000 fbd5 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
						}
					}
				}			
				else
				{
					diffG = (newG - holdG);
    8688:	4b4e      	ldr	r3, [pc, #312]	; (87c4 <BrakeBoardStateMachineTask+0x18fc>)
    868a:	881a      	ldrh	r2, [r3, #0]
    868c:	4b4e      	ldr	r3, [pc, #312]	; (87c8 <BrakeBoardStateMachineTask+0x1900>)
    868e:	881b      	ldrh	r3, [r3, #0]
    8690:	1ad3      	subs	r3, r2, r3
    8692:	b29a      	uxth	r2, r3
    8694:	4b4d      	ldr	r3, [pc, #308]	; (87cc <BrakeBoardStateMachineTask+0x1904>)
    8696:	801a      	strh	r2, [r3, #0]
					if (diffG > ACC_DITHER_TRIGGER_G)
    8698:	4b4c      	ldr	r3, [pc, #304]	; (87cc <BrakeBoardStateMachineTask+0x1904>)
    869a:	881a      	ldrh	r2, [r3, #0]
    869c:	4b4c      	ldr	r3, [pc, #304]	; (87d0 <BrakeBoardStateMachineTask+0x1908>)
    869e:	429a      	cmp	r2, r3
    86a0:	d913      	bls.n	86ca <BrakeBoardStateMachineTask+0x1802>
					{
						//---------------Extend
						thresholdmet = 0;
    86a2:	4b42      	ldr	r3, [pc, #264]	; (87ac <BrakeBoardStateMachineTask+0x18e4>)
    86a4:	2200      	movs	r2, #0
    86a6:	701a      	strb	r2, [r3, #0]
						brakeState = BRAKESTATE_ACTIVE_EXTEND;
    86a8:	4b38      	ldr	r3, [pc, #224]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    86aa:	220a      	movs	r2, #10
    86ac:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_DITHER;
    86ae:	4b38      	ldr	r3, [pc, #224]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	2210      	movs	r2, #16
    86b4:	4393      	bics	r3, r2
    86b6:	b2da      	uxtb	r2, r3
    86b8:	4b35      	ldr	r3, [pc, #212]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    86ba:	701a      	strb	r2, [r3, #0]
						ditherTimer = 0;
    86bc:	4b4c      	ldr	r3, [pc, #304]	; (87f0 <BrakeBoardStateMachineTask+0x1928>)
    86be:	2200      	movs	r2, #0
    86c0:	801a      	strh	r2, [r3, #0]
						MotorExtendMore();
    86c2:	4b4c      	ldr	r3, [pc, #304]	; (87f4 <BrakeBoardStateMachineTask+0x192c>)
    86c4:	4798      	blx	r3
 									
					} 
				}							
			}  			
			break;
    86c6:	f000 fbb4 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    86ca:	f000 fbb2 	bl	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		case BRAKESTATE_END_RETRACT_TIMEOUT:
		case BRAKESTATE_END_RETRACT:
		case BRAKESTATE_END_RETRACT_BREAKAWAY:
		case BRAKESTATE_END_RETRACT_MANUAL:
		{
			breakawayHoldTimer = 0; 
    86ce:	4b4a      	ldr	r3, [pc, #296]	; (87f8 <BrakeBoardStateMachineTask+0x1930>)
    86d0:	2200      	movs	r2, #0
    86d2:	801a      	strh	r2, [r3, #0]
 			if ((hlimitState == 0)||(homeLimit == HOME_IN))  //V01_26
    86d4:	4b37      	ldr	r3, [pc, #220]	; (87b4 <BrakeBoardStateMachineTask+0x18ec>)
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	2b00      	cmp	r3, #0
    86da:	d003      	beq.n	86e4 <BrakeBoardStateMachineTask+0x181c>
    86dc:	4b36      	ldr	r3, [pc, #216]	; (87b8 <BrakeBoardStateMachineTask+0x18f0>)
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d131      	bne.n	8748 <BrakeBoardStateMachineTask+0x1880>
			{
				MotorOff(1);		
    86e4:	2001      	movs	r0, #1
    86e6:	4b32      	ldr	r3, [pc, #200]	; (87b0 <BrakeBoardStateMachineTask+0x18e8>)
    86e8:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_HOME)==BRAKE_ERROR)
    86ea:	2000      	movs	r0, #0
    86ec:	4b33      	ldr	r3, [pc, #204]	; (87bc <BrakeBoardStateMachineTask+0x18f4>)
    86ee:	4798      	blx	r3
    86f0:	1c03      	adds	r3, r0, #0
    86f2:	2b00      	cmp	r3, #0
    86f4:	d106      	bne.n	8704 <BrakeBoardStateMachineTask+0x183c>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    86f6:	4b25      	ldr	r3, [pc, #148]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    86f8:	2207      	movs	r2, #7
    86fa:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    86fc:	4b22      	ldr	r3, [pc, #136]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    86fe:	2200      	movs	r2, #0
    8700:	801a      	strh	r2, [r3, #0]
    8702:	e019      	b.n	8738 <BrakeBoardStateMachineTask+0x1870>
				}
				else
				{
					brakeSupTime = BRAKESUPTIME_SHORT;
    8704:	4b20      	ldr	r3, [pc, #128]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    8706:	2214      	movs	r2, #20
    8708:	801a      	strh	r2, [r3, #0]
					if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    870a:	4b20      	ldr	r3, [pc, #128]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    870c:	781b      	ldrb	r3, [r3, #0]
    870e:	2b17      	cmp	r3, #23
    8710:	d102      	bne.n	8718 <BrakeBoardStateMachineTask+0x1850>
					{
						brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    8712:	4b1d      	ldr	r3, [pc, #116]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    8714:	2296      	movs	r2, #150	; 0x96
    8716:	801a      	strh	r2, [r3, #0]
					}
//					MotorNeedNewBaseline();
					brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    8718:	4b1c      	ldr	r3, [pc, #112]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    871a:	220b      	movs	r2, #11
    871c:	701a      	strb	r2, [r3, #0]
					
					if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    871e:	4b37      	ldr	r3, [pc, #220]	; (87fc <BrakeBoardStateMachineTask+0x1934>)
    8720:	781b      	ldrb	r3, [r3, #0]
    8722:	1c1a      	adds	r2, r3, #0
    8724:	2301      	movs	r3, #1
    8726:	4013      	ands	r3, r2
    8728:	d106      	bne.n	8738 <BrakeBoardStateMachineTask+0x1870>
					{
						brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    872a:	4b35      	ldr	r3, [pc, #212]	; (8800 <BrakeBoardStateMachineTask+0x1938>)
    872c:	791b      	ldrb	r3, [r3, #4]
    872e:	2210      	movs	r2, #16
    8730:	4393      	bics	r3, r2
    8732:	b2da      	uxtb	r2, r3
    8734:	4b32      	ldr	r3, [pc, #200]	; (8800 <BrakeBoardStateMachineTask+0x1938>)
    8736:	711a      	strb	r2, [r3, #4]
					}
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8738:	4b15      	ldr	r3, [pc, #84]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    873a:	781b      	ldrb	r3, [r3, #0]
    873c:	2202      	movs	r2, #2
    873e:	4393      	bics	r3, r2
    8740:	b2da      	uxtb	r2, r3
    8742:	4b13      	ldr	r3, [pc, #76]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8744:	701a      	strb	r2, [r3, #0]
    8746:	e07f      	b.n	8848 <BrakeBoardStateMachineTask+0x1980>
			}
			else
			{
				if ((brakeChange & BRAKECHANGE_SUPTIME)!= 0)
    8748:	4b11      	ldr	r3, [pc, #68]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    874a:	781b      	ldrb	r3, [r3, #0]
    874c:	1c1a      	adds	r2, r3, #0
    874e:	2302      	movs	r3, #2
    8750:	4013      	ands	r3, r2
    8752:	d100      	bne.n	8756 <BrakeBoardStateMachineTask+0x188e>
    8754:	e078      	b.n	8848 <BrakeBoardStateMachineTask+0x1980>
				{
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8756:	4b0e      	ldr	r3, [pc, #56]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8758:	781b      	ldrb	r3, [r3, #0]
    875a:	2202      	movs	r2, #2
    875c:	4393      	bics	r3, r2
    875e:	b2da      	uxtb	r2, r3
    8760:	4b0b      	ldr	r3, [pc, #44]	; (8790 <BrakeBoardStateMachineTask+0x18c8>)
    8762:	701a      	strb	r2, [r3, #0]
					MotorOff(1);				
    8764:	2001      	movs	r0, #1
    8766:	4b12      	ldr	r3, [pc, #72]	; (87b0 <BrakeBoardStateMachineTask+0x18e8>)
    8768:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    876a:	2002      	movs	r0, #2
    876c:	4b13      	ldr	r3, [pc, #76]	; (87bc <BrakeBoardStateMachineTask+0x18f4>)
    876e:	4798      	blx	r3
    8770:	1c03      	adds	r3, r0, #0
    8772:	2b00      	cmp	r3, #0
    8774:	d146      	bne.n	8804 <BrakeBoardStateMachineTask+0x193c>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    8776:	4b05      	ldr	r3, [pc, #20]	; (878c <BrakeBoardStateMachineTask+0x18c4>)
    8778:	2207      	movs	r2, #7
    877a:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    877c:	4b02      	ldr	r3, [pc, #8]	; (8788 <BrakeBoardStateMachineTask+0x18c0>)
    877e:	2200      	movs	r2, #0
    8780:	801a      	strh	r2, [r3, #0]
    8782:	e059      	b.n	8838 <BrakeBoardStateMachineTask+0x1970>
    8784:	00009bdd 	.word	0x00009bdd
    8788:	200036c4 	.word	0x200036c4
    878c:	20002ebf 	.word	0x20002ebf
    8790:	20002eee 	.word	0x20002eee
    8794:	000090a1 	.word	0x000090a1
    8798:	20002ec4 	.word	0x20002ec4
    879c:	20002fb8 	.word	0x20002fb8
    87a0:	00000333 	.word	0x00000333
    87a4:	20002ef4 	.word	0x20002ef4
    87a8:	00005b7d 	.word	0x00005b7d
    87ac:	200004b2 	.word	0x200004b2
    87b0:	00009ac9 	.word	0x00009ac9
    87b4:	20003068 	.word	0x20003068
    87b8:	20000001 	.word	0x20000001
    87bc:	000069a1 	.word	0x000069a1
    87c0:	200004ae 	.word	0x200004ae
    87c4:	20002ec8 	.word	0x20002ec8
    87c8:	20002ec2 	.word	0x20002ec2
    87cc:	20002eba 	.word	0x20002eba
    87d0:	00000666 	.word	0x00000666
    87d4:	00009361 	.word	0x00009361
    87d8:	20002eb8 	.word	0x20002eb8
    87dc:	0000641d 	.word	0x0000641d
    87e0:	20002ede 	.word	0x20002ede
    87e4:	000003e7 	.word	0x000003e7
    87e8:	20002ee2 	.word	0x20002ee2
    87ec:	00009b79 	.word	0x00009b79
    87f0:	20002ed4 	.word	0x20002ed4
    87f4:	00009d71 	.word	0x00009d71
    87f8:	20002ef2 	.word	0x20002ef2
    87fc:	20002f1c 	.word	0x20002f1c
    8800:	20003694 	.word	0x20003694
					}
					else
					{
						brakeSupTime = BRAKESUPTIME_SHORT;
    8804:	4bcd      	ldr	r3, [pc, #820]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8806:	2214      	movs	r2, #20
    8808:	801a      	strh	r2, [r3, #0]
						if (brakeState == BRAKESTATE_END_RETRACT_TIMEOUT)
    880a:	4bcd      	ldr	r3, [pc, #820]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    880c:	781b      	ldrb	r3, [r3, #0]
    880e:	2b17      	cmp	r3, #23
    8810:	d102      	bne.n	8818 <BrakeBoardStateMachineTask+0x1950>
						{
							brakeSupTime = BRAKESUPTIME_TIMEOUT;	
    8812:	4bca      	ldr	r3, [pc, #808]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8814:	2296      	movs	r2, #150	; 0x96
    8816:	801a      	strh	r2, [r3, #0]
						}		
//						MotorNeedNewBaseline();				
						brakeState = BRAKESTATE_HOLDOFF_ACTIVE;
    8818:	4bc9      	ldr	r3, [pc, #804]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    881a:	220b      	movs	r2, #11
    881c:	701a      	strb	r2, [r3, #0]
						if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    881e:	4bc9      	ldr	r3, [pc, #804]	; (8b44 <BrakeBoardStateMachineTask+0x1c7c>)
    8820:	781b      	ldrb	r3, [r3, #0]
    8822:	1c1a      	adds	r2, r3, #0
    8824:	2301      	movs	r3, #1
    8826:	4013      	ands	r3, r2
    8828:	d106      	bne.n	8838 <BrakeBoardStateMachineTask+0x1970>
						{
							brakeStatus.BrakeState &= ~BRAKESTATE_MANUALBRAKE;
    882a:	4bc7      	ldr	r3, [pc, #796]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    882c:	791b      	ldrb	r3, [r3, #4]
    882e:	2210      	movs	r2, #16
    8830:	4393      	bics	r3, r2
    8832:	b2da      	uxtb	r2, r3
    8834:	4bc4      	ldr	r3, [pc, #784]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    8836:	711a      	strb	r2, [r3, #4]
						}
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8838:	4bc4      	ldr	r3, [pc, #784]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    883a:	781b      	ldrb	r3, [r3, #0]
    883c:	2202      	movs	r2, #2
    883e:	4393      	bics	r3, r2
    8840:	b2da      	uxtb	r2, r3
    8842:	4bc2      	ldr	r3, [pc, #776]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8844:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
    8846:	e2f4      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    8848:	e2f3      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}		
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    884a:	4bbf      	ldr	r3, [pc, #764]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    884c:	791b      	ldrb	r3, [r3, #4]
    884e:	2202      	movs	r2, #2
    8850:	4313      	orrs	r3, r2
    8852:	b2da      	uxtb	r2, r3
    8854:	4bbc      	ldr	r3, [pc, #752]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    8856:	711a      	strb	r2, [r3, #4]
			if ((breakawayRing_pressed == 0) || 
    8858:	4bbd      	ldr	r3, [pc, #756]	; (8b50 <BrakeBoardStateMachineTask+0x1c88>)
    885a:	881b      	ldrh	r3, [r3, #0]
    885c:	2b00      	cmp	r3, #0
    885e:	d008      	beq.n	8872 <BrakeBoardStateMachineTask+0x19aa>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8860:	4bbb      	ldr	r3, [pc, #748]	; (8b50 <BrakeBoardStateMachineTask+0x1c88>)
    8862:	881b      	ldrh	r3, [r3, #0]
//-----------------------
// BREAKAWAY 		
		case BRAKESTATE_ACTIVE_EXTEND_BREAKAWAY:
		{	
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			if ((breakawayRing_pressed == 0) || 
    8864:	b21b      	sxth	r3, r3
    8866:	2b01      	cmp	r3, #1
    8868:	d11d      	bne.n	88a6 <BrakeBoardStateMachineTask+0x19de>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    886a:	4bba      	ldr	r3, [pc, #744]	; (8b54 <BrakeBoardStateMachineTask+0x1c8c>)
    886c:	881b      	ldrh	r3, [r3, #0]
    886e:	2b00      	cmp	r3, #0
    8870:	d119      	bne.n	88a6 <BrakeBoardStateMachineTask+0x19de>
			{			
					done = 1;
    8872:	1c3b      	adds	r3, r7, #0
    8874:	330e      	adds	r3, #14
    8876:	2201      	movs	r2, #1
    8878:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    887a:	4bb7      	ldr	r3, [pc, #732]	; (8b58 <BrakeBoardStateMachineTask+0x1c90>)
    887c:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    887e:	4baf      	ldr	r3, [pc, #700]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8880:	2264      	movs	r2, #100	; 0x64
    8882:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8884:	4bae      	ldr	r3, [pc, #696]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8886:	2213      	movs	r2, #19
    8888:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    888a:	4bb0      	ldr	r3, [pc, #704]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	2202      	movs	r2, #2
    8890:	4393      	bics	r3, r2
    8892:	b2da      	uxtb	r2, r3
    8894:	4bad      	ldr	r3, [pc, #692]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8896:	701a      	strb	r2, [r3, #0]
					brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    8898:	4bab      	ldr	r3, [pc, #684]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    889a:	791b      	ldrb	r3, [r3, #4]
    889c:	2202      	movs	r2, #2
    889e:	4393      	bics	r3, r2
    88a0:	b2da      	uxtb	r2, r3
    88a2:	4ba9      	ldr	r3, [pc, #676]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    88a4:	711a      	strb	r2, [r3, #4]
			}
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    88a6:	4ba9      	ldr	r3, [pc, #676]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	1c1a      	adds	r2, r3, #0
    88ac:	2302      	movs	r3, #2
    88ae:	4013      	ands	r3, r2
    88b0:	d02e      	beq.n	8910 <BrakeBoardStateMachineTask+0x1a48>
    88b2:	1c3b      	adds	r3, r7, #0
    88b4:	330e      	adds	r3, #14
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	2b00      	cmp	r3, #0
    88ba:	d129      	bne.n	8910 <BrakeBoardStateMachineTask+0x1a48>
			{
				done = 1;
    88bc:	1c3b      	adds	r3, r7, #0
    88be:	330e      	adds	r3, #14
    88c0:	2201      	movs	r2, #1
    88c2:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    88c4:	4ba1      	ldr	r3, [pc, #644]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	2202      	movs	r2, #2
    88ca:	4393      	bics	r3, r2
    88cc:	b2da      	uxtb	r2, r3
    88ce:	4b9f      	ldr	r3, [pc, #636]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    88d0:	701a      	strb	r2, [r3, #0]
				MotorOff(1);	
    88d2:	2001      	movs	r0, #1
    88d4:	4ba1      	ldr	r3, [pc, #644]	; (8b5c <BrakeBoardStateMachineTask+0x1c94>)
    88d6:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    88d8:	2002      	movs	r0, #2
    88da:	4ba1      	ldr	r3, [pc, #644]	; (8b60 <BrakeBoardStateMachineTask+0x1c98>)
    88dc:	4798      	blx	r3
    88de:	1c03      	adds	r3, r0, #0
    88e0:	2b00      	cmp	r3, #0
    88e2:	d106      	bne.n	88f2 <BrakeBoardStateMachineTask+0x1a2a>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    88e4:	4b96      	ldr	r3, [pc, #600]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    88e6:	2207      	movs	r2, #7
    88e8:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    88ea:	4b94      	ldr	r3, [pc, #592]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    88ec:	2200      	movs	r2, #0
    88ee:	801a      	strh	r2, [r3, #0]
    88f0:	e00e      	b.n	8910 <BrakeBoardStateMachineTask+0x1a48>
				}
				else
				{
					MotorCCW();
    88f2:	4b99      	ldr	r3, [pc, #612]	; (8b58 <BrakeBoardStateMachineTask+0x1c90>)
    88f4:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    88f6:	4b91      	ldr	r3, [pc, #580]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    88f8:	2264      	movs	r2, #100	; 0x64
    88fa:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    88fc:	4b90      	ldr	r3, [pc, #576]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    88fe:	2213      	movs	r2, #19
    8900:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8902:	4b92      	ldr	r3, [pc, #584]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	2202      	movs	r2, #2
    8908:	4393      	bics	r3, r2
    890a:	b2da      	uxtb	r2, r3
    890c:	4b8f      	ldr	r3, [pc, #572]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    890e:	701a      	strb	r2, [r3, #0]
				}
			}						
 			if ((flimitState == 0)&&(done == 0))
    8910:	4b94      	ldr	r3, [pc, #592]	; (8b64 <BrakeBoardStateMachineTask+0x1c9c>)
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	2b00      	cmp	r3, #0
    8916:	d122      	bne.n	895e <BrakeBoardStateMachineTask+0x1a96>
    8918:	1c3b      	adds	r3, r7, #0
    891a:	330e      	adds	r3, #14
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	2b00      	cmp	r3, #0
    8920:	d11d      	bne.n	895e <BrakeBoardStateMachineTask+0x1a96>
			{
				done = 1; 
    8922:	1c3b      	adds	r3, r7, #0
    8924:	330e      	adds	r3, #14
    8926:	2201      	movs	r2, #1
    8928:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    892a:	2001      	movs	r0, #1
    892c:	4b8c      	ldr	r3, [pc, #560]	; (8b60 <BrakeBoardStateMachineTask+0x1c98>)
    892e:	4798      	blx	r3
    8930:	1c03      	adds	r3, r0, #0
    8932:	2b00      	cmp	r3, #0
    8934:	d106      	bne.n	8944 <BrakeBoardStateMachineTask+0x1a7c>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8936:	4b82      	ldr	r3, [pc, #520]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8938:	2207      	movs	r2, #7
    893a:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    893c:	4b7f      	ldr	r3, [pc, #508]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    893e:	2200      	movs	r2, #0
    8940:	801a      	strh	r2, [r3, #0]
    8942:	e005      	b.n	8950 <BrakeBoardStateMachineTask+0x1a88>
				}
				else
				{
					MotorOff(1);				
    8944:	2001      	movs	r0, #1
    8946:	4b85      	ldr	r3, [pc, #532]	; (8b5c <BrakeBoardStateMachineTask+0x1c94>)
    8948:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY; 
    894a:	4b7d      	ldr	r3, [pc, #500]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    894c:	2212      	movs	r2, #18
    894e:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8950:	4b7e      	ldr	r3, [pc, #504]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8952:	781b      	ldrb	r3, [r3, #0]
    8954:	2202      	movs	r2, #2
    8956:	4393      	bics	r3, r2
    8958:	b2da      	uxtb	r2, r3
    895a:	4b7c      	ldr	r3, [pc, #496]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    895c:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    895e:	4b82      	ldr	r3, [pc, #520]	; (8b68 <BrakeBoardStateMachineTask+0x1ca0>)
    8960:	881b      	ldrh	r3, [r3, #0]
    8962:	2b00      	cmp	r3, #0
    8964:	d13f      	bne.n	89e6 <BrakeBoardStateMachineTask+0x1b1e>
    8966:	1c3b      	adds	r3, r7, #0
    8968:	330e      	adds	r3, #14
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	2b00      	cmp	r3, #0
    896e:	d13a      	bne.n	89e6 <BrakeBoardStateMachineTask+0x1b1e>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    8970:	2001      	movs	r0, #1
    8972:	4b7e      	ldr	r3, [pc, #504]	; (8b6c <BrakeBoardStateMachineTask+0x1ca4>)
    8974:	4798      	blx	r3
    8976:	1c03      	adds	r3, r0, #0
    8978:	1c1a      	adds	r2, r3, #0
    897a:	4b7d      	ldr	r3, [pc, #500]	; (8b70 <BrakeBoardStateMachineTask+0x1ca8>)
    897c:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedBreakaway();
    897e:	4b7d      	ldr	r3, [pc, #500]	; (8b74 <BrakeBoardStateMachineTask+0x1cac>)
    8980:	4798      	blx	r3
    8982:	1c03      	adds	r3, r0, #0
    8984:	1c1a      	adds	r2, r3, #0
    8986:	4b7c      	ldr	r3, [pc, #496]	; (8b78 <BrakeBoardStateMachineTask+0x1cb0>)
    8988:	801a      	strh	r2, [r3, #0]
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    898a:	2002      	movs	r0, #2
    898c:	4b77      	ldr	r3, [pc, #476]	; (8b6c <BrakeBoardStateMachineTask+0x1ca4>)
    898e:	4798      	blx	r3
    8990:	1c03      	adds	r3, r0, #0
    8992:	1c1a      	adds	r2, r3, #0
    8994:	4b79      	ldr	r3, [pc, #484]	; (8b7c <BrakeBoardStateMachineTask+0x1cb4>)
    8996:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculatedBreakaway();				
    8998:	4b79      	ldr	r3, [pc, #484]	; (8b80 <BrakeBoardStateMachineTask+0x1cb8>)
    899a:	4798      	blx	r3
    899c:	1c03      	adds	r3, r0, #0
    899e:	1c1a      	adds	r2, r3, #0
    89a0:	4b78      	ldr	r3, [pc, #480]	; (8b84 <BrakeBoardStateMachineTask+0x1cbc>)
    89a2:	801a      	strh	r2, [r3, #0]
#if FSR_USE				
				if (fsrRead > newFSRThreshold)   
#else
				if (currentRead > newCurrentThreshold)   	
    89a4:	4b72      	ldr	r3, [pc, #456]	; (8b70 <BrakeBoardStateMachineTask+0x1ca8>)
    89a6:	881a      	ldrh	r2, [r3, #0]
    89a8:	4b73      	ldr	r3, [pc, #460]	; (8b78 <BrakeBoardStateMachineTask+0x1cb0>)
    89aa:	881b      	ldrh	r3, [r3, #0]
    89ac:	429a      	cmp	r2, r3
    89ae:	d91a      	bls.n	89e6 <BrakeBoardStateMachineTask+0x1b1e>
#endif 				
				{
					MotorOff(1);		
    89b0:	2001      	movs	r0, #1
    89b2:	4b6a      	ldr	r3, [pc, #424]	; (8b5c <BrakeBoardStateMachineTask+0x1c94>)
    89b4:	4798      	blx	r3
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    89b6:	2002      	movs	r0, #2
    89b8:	4b69      	ldr	r3, [pc, #420]	; (8b60 <BrakeBoardStateMachineTask+0x1c98>)
    89ba:	4798      	blx	r3
    89bc:	1c03      	adds	r3, r0, #0
    89be:	2b00      	cmp	r3, #0
    89c0:	d106      	bne.n	89d0 <BrakeBoardStateMachineTask+0x1b08>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    89c2:	4b5f      	ldr	r3, [pc, #380]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    89c4:	2207      	movs	r2, #7
    89c6:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    89c8:	4b5c      	ldr	r3, [pc, #368]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    89ca:	2200      	movs	r2, #0
    89cc:	801a      	strh	r2, [r3, #0]
    89ce:	e002      	b.n	89d6 <BrakeBoardStateMachineTask+0x1b0e>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_BREAKAWAY;  			
    89d0:	4b5b      	ldr	r3, [pc, #364]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    89d2:	2212      	movs	r2, #18
    89d4:	701a      	strb	r2, [r3, #0]
					}
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    89d6:	4b5d      	ldr	r3, [pc, #372]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    89d8:	781b      	ldrb	r3, [r3, #0]
    89da:	2202      	movs	r2, #2
    89dc:	4393      	bics	r3, r2
    89de:	b2da      	uxtb	r2, r3
    89e0:	4b5a      	ldr	r3, [pc, #360]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    89e2:	701a      	strb	r2, [r3, #0]
				}
			}			
			break;
    89e4:	e225      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    89e6:	e224      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}
		case BRAKESTATE_ACTIVE_HOLD_BREAKAWAY:
		{
			done = 0;
    89e8:	1c3b      	adds	r3, r7, #0
    89ea:	330e      	adds	r3, #14
    89ec:	2200      	movs	r2, #0
    89ee:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
    89f0:	4b55      	ldr	r3, [pc, #340]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    89f2:	791b      	ldrb	r3, [r3, #4]
    89f4:	2202      	movs	r2, #2
    89f6:	4313      	orrs	r3, r2
    89f8:	b2da      	uxtb	r2, r3
    89fa:	4b53      	ldr	r3, [pc, #332]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    89fc:	711a      	strb	r2, [r3, #4]
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    89fe:	4b54      	ldr	r3, [pc, #336]	; (8b50 <BrakeBoardStateMachineTask+0x1c88>)
    8a00:	881b      	ldrh	r3, [r3, #0]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d008      	beq.n	8a18 <BrakeBoardStateMachineTask+0x1b50>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8a06:	4b52      	ldr	r3, [pc, #328]	; (8b50 <BrakeBoardStateMachineTask+0x1c88>)
    8a08:	881b      	ldrh	r3, [r3, #0]
		{
			done = 0;
			brakeStatus.BrakeState |= BRAKESTATE_BREAKAWAYTIP;
			//------------------------
			// you are braking ....  
			if ((breakawayRing_pressed == 0) || 
    8a0a:	b21b      	sxth	r3, r3
    8a0c:	2b01      	cmp	r3, #1
    8a0e:	d11d      	bne.n	8a4c <BrakeBoardStateMachineTask+0x1b84>
			   ((breakawayRing_pressed ==1) && (breakawayTip_pressed ==0)))
    8a10:	4b50      	ldr	r3, [pc, #320]	; (8b54 <BrakeBoardStateMachineTask+0x1c8c>)
    8a12:	881b      	ldrh	r3, [r3, #0]
    8a14:	2b00      	cmp	r3, #0
    8a16:	d119      	bne.n	8a4c <BrakeBoardStateMachineTask+0x1b84>
			{		
				//----------------------------
				// Hold until cleared by: break-away signal 
				// returning to normal, set-up button pressed 
				// on brake unit or cleared with remote.  	
				done = 1;
    8a18:	1c3b      	adds	r3, r7, #0
    8a1a:	330e      	adds	r3, #14
    8a1c:	2201      	movs	r2, #1
    8a1e:	701a      	strb	r2, [r3, #0]
				MotorCCW();
    8a20:	4b4d      	ldr	r3, [pc, #308]	; (8b58 <BrakeBoardStateMachineTask+0x1c90>)
    8a22:	4798      	blx	r3
				brakeSupTime = BRAKESUPTIME;
    8a24:	4b45      	ldr	r3, [pc, #276]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8a26:	2264      	movs	r2, #100	; 0x64
    8a28:	801a      	strh	r2, [r3, #0]
				brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8a2a:	4b45      	ldr	r3, [pc, #276]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8a2c:	2213      	movs	r2, #19
    8a2e:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8a30:	4b46      	ldr	r3, [pc, #280]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	2202      	movs	r2, #2
    8a36:	4393      	bics	r3, r2
    8a38:	b2da      	uxtb	r2, r3
    8a3a:	4b44      	ldr	r3, [pc, #272]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a3c:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_BREAKAWAYTIP;
    8a3e:	4b42      	ldr	r3, [pc, #264]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    8a40:	791b      	ldrb	r3, [r3, #4]
    8a42:	2202      	movs	r2, #2
    8a44:	4393      	bics	r3, r2
    8a46:	b2da      	uxtb	r2, r3
    8a48:	4b3f      	ldr	r3, [pc, #252]	; (8b48 <BrakeBoardStateMachineTask+0x1c80>)
    8a4a:	711a      	strb	r2, [r3, #4]
			}
			if (done == 0)
    8a4c:	1c3b      	adds	r3, r7, #0
    8a4e:	330e      	adds	r3, #14
    8a50:	781b      	ldrb	r3, [r3, #0]
    8a52:	2b00      	cmp	r3, #0
    8a54:	d124      	bne.n	8aa0 <BrakeBoardStateMachineTask+0x1bd8>
			{
				if ((button & KEY_SETUP)!=0)
    8a56:	1c3b      	adds	r3, r7, #0
    8a58:	3309      	adds	r3, #9
    8a5a:	781a      	ldrb	r2, [r3, #0]
    8a5c:	2301      	movs	r3, #1
    8a5e:	4013      	ands	r3, r2
    8a60:	d01e      	beq.n	8aa0 <BrakeBoardStateMachineTask+0x1bd8>
				{
					if (setup_pressed == 1)
    8a62:	4b49      	ldr	r3, [pc, #292]	; (8b88 <BrakeBoardStateMachineTask+0x1cc0>)
    8a64:	881b      	ldrh	r3, [r3, #0]
    8a66:	b21b      	sxth	r3, r3
    8a68:	2b01      	cmp	r3, #1
    8a6a:	d119      	bne.n	8aa0 <BrakeBoardStateMachineTask+0x1bd8>
					{
						done = 1;
    8a6c:	1c3b      	adds	r3, r7, #0
    8a6e:	330e      	adds	r3, #14
    8a70:	2201      	movs	r2, #1
    8a72:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    8a74:	4b35      	ldr	r3, [pc, #212]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a76:	781b      	ldrb	r3, [r3, #0]
    8a78:	2208      	movs	r2, #8
    8a7a:	4393      	bics	r3, r2
    8a7c:	b2da      	uxtb	r2, r3
    8a7e:	4b33      	ldr	r3, [pc, #204]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a80:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    8a82:	4b35      	ldr	r3, [pc, #212]	; (8b58 <BrakeBoardStateMachineTask+0x1c90>)
    8a84:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    8a86:	4b2d      	ldr	r3, [pc, #180]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8a88:	2264      	movs	r2, #100	; 0x64
    8a8a:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8a8c:	4b2c      	ldr	r3, [pc, #176]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8a8e:	2213      	movs	r2, #19
    8a90:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8a92:	4b2e      	ldr	r3, [pc, #184]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a94:	781b      	ldrb	r3, [r3, #0]
    8a96:	2202      	movs	r2, #2
    8a98:	4393      	bics	r3, r2
    8a9a:	b2da      	uxtb	r2, r3
    8a9c:	4b2b      	ldr	r3, [pc, #172]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8a9e:	701a      	strb	r2, [r3, #0]
					}
				}	
			}		
			if (done == 0)
    8aa0:	1c3b      	adds	r3, r7, #0
    8aa2:	330e      	adds	r3, #14
    8aa4:	781b      	ldrb	r3, [r3, #0]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d120      	bne.n	8aec <BrakeBoardStateMachineTask+0x1c24>
			{
				if ((remoteStatus & REMOTE_CLEARBREAKAWAY)!=0)
    8aaa:	4b26      	ldr	r3, [pc, #152]	; (8b44 <BrakeBoardStateMachineTask+0x1c7c>)
    8aac:	781b      	ldrb	r3, [r3, #0]
    8aae:	1c1a      	adds	r2, r3, #0
    8ab0:	2302      	movs	r3, #2
    8ab2:	4013      	ands	r3, r2
    8ab4:	d01a      	beq.n	8aec <BrakeBoardStateMachineTask+0x1c24>
				{
						done = 1;
    8ab6:	1c3b      	adds	r3, r7, #0
    8ab8:	330e      	adds	r3, #14
    8aba:	2201      	movs	r2, #1
    8abc:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_HOLDTIME;
    8abe:	4b23      	ldr	r3, [pc, #140]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8ac0:	781b      	ldrb	r3, [r3, #0]
    8ac2:	2208      	movs	r2, #8
    8ac4:	4393      	bics	r3, r2
    8ac6:	b2da      	uxtb	r2, r3
    8ac8:	4b20      	ldr	r3, [pc, #128]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8aca:	701a      	strb	r2, [r3, #0]
						MotorCCW();
    8acc:	4b22      	ldr	r3, [pc, #136]	; (8b58 <BrakeBoardStateMachineTask+0x1c90>)
    8ace:	4798      	blx	r3
						brakeSupTime = BRAKESUPTIME;
    8ad0:	4b1a      	ldr	r3, [pc, #104]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8ad2:	2264      	movs	r2, #100	; 0x64
    8ad4:	801a      	strh	r2, [r3, #0]
						brakeState = BRAKESTATE_END_RETRACT_BREAKAWAY;
    8ad6:	4b1a      	ldr	r3, [pc, #104]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8ad8:	2213      	movs	r2, #19
    8ada:	701a      	strb	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8adc:	4b1b      	ldr	r3, [pc, #108]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	2202      	movs	r2, #2
    8ae2:	4393      	bics	r3, r2
    8ae4:	b2da      	uxtb	r2, r3
    8ae6:	4b19      	ldr	r3, [pc, #100]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8ae8:	701a      	strb	r2, [r3, #0]
				}	
			}									
			break;
    8aea:	e1a2      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    8aec:	e1a1      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
	//--------------------------------
	// MANUAL STATES. 
	//--------------------------------		
		case BRAKESTATE_ACTIVE_EXTEND_MANUAL:
		{
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    8aee:	4b17      	ldr	r3, [pc, #92]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	1c1a      	adds	r2, r3, #0
    8af4:	2302      	movs	r3, #2
    8af6:	4013      	ands	r3, r2
    8af8:	d057      	beq.n	8baa <BrakeBoardStateMachineTask+0x1ce2>
    8afa:	1c3b      	adds	r3, r7, #0
    8afc:	330e      	adds	r3, #14
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d152      	bne.n	8baa <BrakeBoardStateMachineTask+0x1ce2>
			{
				done = 1;
    8b04:	1c3b      	adds	r3, r7, #0
    8b06:	330e      	adds	r3, #14
    8b08:	2201      	movs	r2, #1
    8b0a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8b0c:	4b0f      	ldr	r3, [pc, #60]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8b0e:	781b      	ldrb	r3, [r3, #0]
    8b10:	2202      	movs	r2, #2
    8b12:	4393      	bics	r3, r2
    8b14:	b2da      	uxtb	r2, r3
    8b16:	4b0d      	ldr	r3, [pc, #52]	; (8b4c <BrakeBoardStateMachineTask+0x1c84>)
    8b18:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    8b1a:	2001      	movs	r0, #1
    8b1c:	4b0f      	ldr	r3, [pc, #60]	; (8b5c <BrakeBoardStateMachineTask+0x1c94>)
    8b1e:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8b20:	2002      	movs	r0, #2
    8b22:	4b0f      	ldr	r3, [pc, #60]	; (8b60 <BrakeBoardStateMachineTask+0x1c98>)
    8b24:	4798      	blx	r3
    8b26:	1c03      	adds	r3, r0, #0
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d12f      	bne.n	8b8c <BrakeBoardStateMachineTask+0x1cc4>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8b2c:	4b04      	ldr	r3, [pc, #16]	; (8b40 <BrakeBoardStateMachineTask+0x1c78>)
    8b2e:	2207      	movs	r2, #7
    8b30:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8b32:	4b02      	ldr	r3, [pc, #8]	; (8b3c <BrakeBoardStateMachineTask+0x1c74>)
    8b34:	2200      	movs	r2, #0
    8b36:	801a      	strh	r2, [r3, #0]
    8b38:	e037      	b.n	8baa <BrakeBoardStateMachineTask+0x1ce2>
    8b3a:	46c0      	nop			; (mov r8, r8)
    8b3c:	200036c4 	.word	0x200036c4
    8b40:	20002ebf 	.word	0x20002ebf
    8b44:	20002f1c 	.word	0x20002f1c
    8b48:	20003694 	.word	0x20003694
    8b4c:	20002eee 	.word	0x20002eee
    8b50:	2000306a 	.word	0x2000306a
    8b54:	20003070 	.word	0x20003070
    8b58:	00009bdd 	.word	0x00009bdd
    8b5c:	00009ac9 	.word	0x00009ac9
    8b60:	000069a1 	.word	0x000069a1
    8b64:	20003072 	.word	0x20003072
    8b68:	20002eb2 	.word	0x20002eb2
    8b6c:	0000b409 	.word	0x0000b409
    8b70:	20002ea6 	.word	0x20002ea6
    8b74:	0000959d 	.word	0x0000959d
    8b78:	20002eaa 	.word	0x20002eaa
    8b7c:	20002eea 	.word	0x20002eea
    8b80:	00009639 	.word	0x00009639
    8b84:	20002eac 	.word	0x20002eac
    8b88:	2000306e 	.word	0x2000306e
				}
				else
				{
					MotorCCW();
    8b8c:	4bab      	ldr	r3, [pc, #684]	; (8e3c <BrakeBoardStateMachineTask+0x1f74>)
    8b8e:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8b90:	4bab      	ldr	r3, [pc, #684]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8b92:	2264      	movs	r2, #100	; 0x64
    8b94:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8b96:	4bab      	ldr	r3, [pc, #684]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8b98:	2216      	movs	r2, #22
    8b9a:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8b9c:	4baa      	ldr	r3, [pc, #680]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8b9e:	781b      	ldrb	r3, [r3, #0]
    8ba0:	2202      	movs	r2, #2
    8ba2:	4393      	bics	r3, r2
    8ba4:	b2da      	uxtb	r2, r3
    8ba6:	4ba8      	ldr	r3, [pc, #672]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8ba8:	701a      	strb	r2, [r3, #0]
				}
			}			
			if ((flimitState == 0)&&(done == 0))
    8baa:	4ba8      	ldr	r3, [pc, #672]	; (8e4c <BrakeBoardStateMachineTask+0x1f84>)
    8bac:	781b      	ldrb	r3, [r3, #0]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d122      	bne.n	8bf8 <BrakeBoardStateMachineTask+0x1d30>
    8bb2:	1c3b      	adds	r3, r7, #0
    8bb4:	330e      	adds	r3, #14
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d11d      	bne.n	8bf8 <BrakeBoardStateMachineTask+0x1d30>
			{
				done = 1;
    8bbc:	1c3b      	adds	r3, r7, #0
    8bbe:	330e      	adds	r3, #14
    8bc0:	2201      	movs	r2, #1
    8bc2:	701a      	strb	r2, [r3, #0]
				if (BrakeActuatorControl(BRAKE_AWAY)==BRAKE_ERROR)
    8bc4:	2001      	movs	r0, #1
    8bc6:	4ba2      	ldr	r3, [pc, #648]	; (8e50 <BrakeBoardStateMachineTask+0x1f88>)
    8bc8:	4798      	blx	r3
    8bca:	1c03      	adds	r3, r0, #0
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d106      	bne.n	8bde <BrakeBoardStateMachineTask+0x1d16>
				{
					brakeState = BRAKESTATE_ERROR;
    8bd0:	4b9c      	ldr	r3, [pc, #624]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8bd2:	2208      	movs	r2, #8
    8bd4:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8bd6:	4b9a      	ldr	r3, [pc, #616]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8bd8:	2200      	movs	r2, #0
    8bda:	801a      	strh	r2, [r3, #0]
    8bdc:	e005      	b.n	8bea <BrakeBoardStateMachineTask+0x1d22>
				}
				else
				{
					MotorOff(1);
    8bde:	2001      	movs	r0, #1
    8be0:	4b9c      	ldr	r3, [pc, #624]	; (8e54 <BrakeBoardStateMachineTask+0x1f8c>)
    8be2:	4798      	blx	r3
					brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    8be4:	4b97      	ldr	r3, [pc, #604]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8be6:	2215      	movs	r2, #21
    8be8:	701a      	strb	r2, [r3, #0]
				}
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8bea:	4b97      	ldr	r3, [pc, #604]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8bec:	781b      	ldrb	r3, [r3, #0]
    8bee:	2202      	movs	r2, #2
    8bf0:	4393      	bics	r3, r2
    8bf2:	b2da      	uxtb	r2, r3
    8bf4:	4b94      	ldr	r3, [pc, #592]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8bf6:	701a      	strb	r2, [r3, #0]
			}
			if ((motorRunTime == 0)&&(done == 0))
    8bf8:	4b97      	ldr	r3, [pc, #604]	; (8e58 <BrakeBoardStateMachineTask+0x1f90>)
    8bfa:	881b      	ldrh	r3, [r3, #0]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d000      	beq.n	8c02 <BrakeBoardStateMachineTask+0x1d3a>
    8c00:	e085      	b.n	8d0e <BrakeBoardStateMachineTask+0x1e46>
    8c02:	1c3b      	adds	r3, r7, #0
    8c04:	330e      	adds	r3, #14
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d000      	beq.n	8c0e <BrakeBoardStateMachineTask+0x1d46>
    8c0c:	e07f      	b.n	8d0e <BrakeBoardStateMachineTask+0x1e46>
			{
				currentRead = ADCGetReading(ADC_INPUT_CURRENT);
    8c0e:	2001      	movs	r0, #1
    8c10:	4b92      	ldr	r3, [pc, #584]	; (8e5c <BrakeBoardStateMachineTask+0x1f94>)
    8c12:	4798      	blx	r3
    8c14:	1c03      	adds	r3, r0, #0
    8c16:	1c1a      	adds	r2, r3, #0
    8c18:	4b91      	ldr	r3, [pc, #580]	; (8e60 <BrakeBoardStateMachineTask+0x1f98>)
    8c1a:	801a      	strh	r2, [r3, #0]
				newCurrentThreshold = CurrentMotorCalculatedManual();
    8c1c:	4b91      	ldr	r3, [pc, #580]	; (8e64 <BrakeBoardStateMachineTask+0x1f9c>)
    8c1e:	4798      	blx	r3
    8c20:	1c03      	adds	r3, r0, #0
    8c22:	1c1a      	adds	r2, r3, #0
    8c24:	4b90      	ldr	r3, [pc, #576]	; (8e68 <BrakeBoardStateMachineTask+0x1fa0>)
    8c26:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    8c28:	4b90      	ldr	r3, [pc, #576]	; (8e6c <BrakeBoardStateMachineTask+0x1fa4>)
    8c2a:	7e5b      	ldrb	r3, [r3, #25]
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d119      	bne.n	8c64 <BrakeBoardStateMachineTask+0x1d9c>
				{
					if (brakeCycleCount <2)
    8c30:	4b8f      	ldr	r3, [pc, #572]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8c32:	781b      	ldrb	r3, [r3, #0]
    8c34:	2b01      	cmp	r3, #1
    8c36:	d806      	bhi.n	8c46 <BrakeBoardStateMachineTask+0x1d7e>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(2);
    8c38:	2002      	movs	r0, #2
    8c3a:	4b8e      	ldr	r3, [pc, #568]	; (8e74 <BrakeBoardStateMachineTask+0x1fac>)
    8c3c:	4798      	blx	r3
    8c3e:	1c03      	adds	r3, r0, #0
    8c40:	1c1a      	adds	r2, r3, #0
    8c42:	4b89      	ldr	r3, [pc, #548]	; (8e68 <BrakeBoardStateMachineTask+0x1fa0>)
    8c44:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    8c46:	4b8a      	ldr	r3, [pc, #552]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2b02      	cmp	r3, #2
    8c4c:	d10a      	bne.n	8c64 <BrakeBoardStateMachineTask+0x1d9c>
					{
						newCurrentThreshold = CurrentMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    8c4e:	4b87      	ldr	r3, [pc, #540]	; (8e6c <BrakeBoardStateMachineTask+0x1fa4>)
    8c50:	7d9b      	ldrb	r3, [r3, #22]
    8c52:	085b      	lsrs	r3, r3, #1
    8c54:	b2db      	uxtb	r3, r3
    8c56:	1c18      	adds	r0, r3, #0
    8c58:	4b86      	ldr	r3, [pc, #536]	; (8e74 <BrakeBoardStateMachineTask+0x1fac>)
    8c5a:	4798      	blx	r3
    8c5c:	1c03      	adds	r3, r0, #0
    8c5e:	1c1a      	adds	r2, r3, #0
    8c60:	4b81      	ldr	r3, [pc, #516]	; (8e68 <BrakeBoardStateMachineTask+0x1fa0>)
    8c62:	801a      	strh	r2, [r3, #0]
					}
				}	
				//V01_41 boc
				fsrRead = ADCGetReading(ADC_INPUT_FSR);
    8c64:	2002      	movs	r0, #2
    8c66:	4b7d      	ldr	r3, [pc, #500]	; (8e5c <BrakeBoardStateMachineTask+0x1f94>)
    8c68:	4798      	blx	r3
    8c6a:	1c03      	adds	r3, r0, #0
    8c6c:	1c1a      	adds	r2, r3, #0
    8c6e:	4b82      	ldr	r3, [pc, #520]	; (8e78 <BrakeBoardStateMachineTask+0x1fb0>)
    8c70:	801a      	strh	r2, [r3, #0]
				newFSRThreshold = FsrMotorCalculatedManual();
    8c72:	4b82      	ldr	r3, [pc, #520]	; (8e7c <BrakeBoardStateMachineTask+0x1fb4>)
    8c74:	4798      	blx	r3
    8c76:	1c03      	adds	r3, r0, #0
    8c78:	1c1a      	adds	r2, r3, #0
    8c7a:	4b81      	ldr	r3, [pc, #516]	; (8e80 <BrakeBoardStateMachineTask+0x1fb8>)
    8c7c:	801a      	strh	r2, [r3, #0]
				//---------------v1.05
				if (table0.Item.Hybrid == FALSE)
    8c7e:	4b7b      	ldr	r3, [pc, #492]	; (8e6c <BrakeBoardStateMachineTask+0x1fa4>)
    8c80:	7e5b      	ldrb	r3, [r3, #25]
    8c82:	2b00      	cmp	r3, #0
    8c84:	d119      	bne.n	8cba <BrakeBoardStateMachineTask+0x1df2>
				{
					if (brakeCycleCount <2)
    8c86:	4b7a      	ldr	r3, [pc, #488]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	2b01      	cmp	r3, #1
    8c8c:	d806      	bhi.n	8c9c <BrakeBoardStateMachineTask+0x1dd4>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(2);
    8c8e:	2002      	movs	r0, #2
    8c90:	4b7c      	ldr	r3, [pc, #496]	; (8e84 <BrakeBoardStateMachineTask+0x1fbc>)
    8c92:	4798      	blx	r3
    8c94:	1c03      	adds	r3, r0, #0
    8c96:	1c1a      	adds	r2, r3, #0
    8c98:	4b79      	ldr	r3, [pc, #484]	; (8e80 <BrakeBoardStateMachineTask+0x1fb8>)
    8c9a:	801a      	strh	r2, [r3, #0]
					}
					if (brakeCycleCount == 2)
    8c9c:	4b74      	ldr	r3, [pc, #464]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	2b02      	cmp	r3, #2
    8ca2:	d10a      	bne.n	8cba <BrakeBoardStateMachineTask+0x1df2>
					{
						newFSRThreshold = FsrMotorCalculatedStartup(table0.Item.ForceMaxSet/2);
    8ca4:	4b71      	ldr	r3, [pc, #452]	; (8e6c <BrakeBoardStateMachineTask+0x1fa4>)
    8ca6:	7d9b      	ldrb	r3, [r3, #22]
    8ca8:	085b      	lsrs	r3, r3, #1
    8caa:	b2db      	uxtb	r3, r3
    8cac:	1c18      	adds	r0, r3, #0
    8cae:	4b75      	ldr	r3, [pc, #468]	; (8e84 <BrakeBoardStateMachineTask+0x1fbc>)
    8cb0:	4798      	blx	r3
    8cb2:	1c03      	adds	r3, r0, #0
    8cb4:	1c1a      	adds	r2, r3, #0
    8cb6:	4b72      	ldr	r3, [pc, #456]	; (8e80 <BrakeBoardStateMachineTask+0x1fb8>)
    8cb8:	801a      	strh	r2, [r3, #0]
				//V01_41 eoc
				//--------------------v1.05
#if FSR_USE					
				if (fsrRead > newFSRThreshold)		
#else
				if (currentRead > newCurrentThreshold)
    8cba:	4b69      	ldr	r3, [pc, #420]	; (8e60 <BrakeBoardStateMachineTask+0x1f98>)
    8cbc:	881a      	ldrh	r2, [r3, #0]
    8cbe:	4b6a      	ldr	r3, [pc, #424]	; (8e68 <BrakeBoardStateMachineTask+0x1fa0>)
    8cc0:	881b      	ldrh	r3, [r3, #0]
    8cc2:	429a      	cmp	r2, r3
    8cc4:	d923      	bls.n	8d0e <BrakeBoardStateMachineTask+0x1e46>
#endif									
				{
					MotorOff(1);
    8cc6:	2001      	movs	r0, #1
    8cc8:	4b62      	ldr	r3, [pc, #392]	; (8e54 <BrakeBoardStateMachineTask+0x1f8c>)
    8cca:	4798      	blx	r3
					//------------v1.05 boc
					if (brakeCycleCount <10)
    8ccc:	4b68      	ldr	r3, [pc, #416]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	2b09      	cmp	r3, #9
    8cd2:	d805      	bhi.n	8ce0 <BrakeBoardStateMachineTask+0x1e18>
					{
						brakeCycleCount++;
    8cd4:	4b66      	ldr	r3, [pc, #408]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8cd6:	781b      	ldrb	r3, [r3, #0]
    8cd8:	3301      	adds	r3, #1
    8cda:	b2da      	uxtb	r2, r3
    8cdc:	4b64      	ldr	r3, [pc, #400]	; (8e70 <BrakeBoardStateMachineTask+0x1fa8>)
    8cde:	701a      	strb	r2, [r3, #0]
					}
					//--------------v1.05 eoc					
					if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8ce0:	2002      	movs	r0, #2
    8ce2:	4b5b      	ldr	r3, [pc, #364]	; (8e50 <BrakeBoardStateMachineTask+0x1f88>)
    8ce4:	4798      	blx	r3
    8ce6:	1c03      	adds	r3, r0, #0
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d10d      	bne.n	8d08 <BrakeBoardStateMachineTask+0x1e40>
					{
						brakeState = BRAKESTATE_ERROR_RETRACT;
    8cec:	4b55      	ldr	r3, [pc, #340]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8cee:	2207      	movs	r2, #7
    8cf0:	701a      	strb	r2, [r3, #0]
						brakeSupTime = 0;
    8cf2:	4b53      	ldr	r3, [pc, #332]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8cf4:	2200      	movs	r2, #0
    8cf6:	801a      	strh	r2, [r3, #0]
						brakeChange &= ~BRAKECHANGE_SUPTIME;
    8cf8:	4b53      	ldr	r3, [pc, #332]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8cfa:	781b      	ldrb	r3, [r3, #0]
    8cfc:	2202      	movs	r2, #2
    8cfe:	4393      	bics	r3, r2
    8d00:	b2da      	uxtb	r2, r3
    8d02:	4b51      	ldr	r3, [pc, #324]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d04:	701a      	strb	r2, [r3, #0]
    8d06:	e002      	b.n	8d0e <BrakeBoardStateMachineTask+0x1e46>
					}
					else
					{
						brakeState = BRAKESTATE_ACTIVE_HOLD_MANUAL;
    8d08:	4b4e      	ldr	r3, [pc, #312]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8d0a:	2215      	movs	r2, #21
    8d0c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			//------------------------
			// you are braking ....
			if (done == 0)
    8d0e:	1c3b      	adds	r3, r7, #0
    8d10:	330e      	adds	r3, #14
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	2b00      	cmp	r3, #0
    8d16:	d118      	bne.n	8d4a <BrakeBoardStateMachineTask+0x1e82>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8d18:	4b5b      	ldr	r3, [pc, #364]	; (8e88 <BrakeBoardStateMachineTask+0x1fc0>)
    8d1a:	781b      	ldrb	r3, [r3, #0]
    8d1c:	1c1a      	adds	r2, r3, #0
    8d1e:	2301      	movs	r3, #1
    8d20:	4013      	ands	r3, r2
    8d22:	d112      	bne.n	8d4a <BrakeBoardStateMachineTask+0x1e82>
				{
					done = 1;
    8d24:	1c3b      	adds	r3, r7, #0
    8d26:	330e      	adds	r3, #14
    8d28:	2201      	movs	r2, #1
    8d2a:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8d2c:	4b43      	ldr	r3, [pc, #268]	; (8e3c <BrakeBoardStateMachineTask+0x1f74>)
    8d2e:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8d30:	4b43      	ldr	r3, [pc, #268]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8d32:	2264      	movs	r2, #100	; 0x64
    8d34:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8d36:	4b43      	ldr	r3, [pc, #268]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8d38:	2216      	movs	r2, #22
    8d3a:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8d3c:	4b42      	ldr	r3, [pc, #264]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d3e:	781b      	ldrb	r3, [r3, #0]
    8d40:	2202      	movs	r2, #2
    8d42:	4393      	bics	r3, r2
    8d44:	b2da      	uxtb	r2, r3
    8d46:	4b40      	ldr	r3, [pc, #256]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d48:	701a      	strb	r2, [r3, #0]
				}
			}			
			if (done == 0)
    8d4a:	1c3b      	adds	r3, r7, #0
    8d4c:	330e      	adds	r3, #14
    8d4e:	781b      	ldrb	r3, [r3, #0]
    8d50:	2b00      	cmp	r3, #0
    8d52:	d107      	bne.n	8d64 <BrakeBoardStateMachineTask+0x1e9c>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8d54:	4b4d      	ldr	r3, [pc, #308]	; (8e8c <BrakeBoardStateMachineTask+0x1fc4>)
    8d56:	791b      	ldrb	r3, [r3, #4]
    8d58:	2210      	movs	r2, #16
    8d5a:	4313      	orrs	r3, r2
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	4b4b      	ldr	r3, [pc, #300]	; (8e8c <BrakeBoardStateMachineTask+0x1fc4>)
    8d60:	711a      	strb	r2, [r3, #4]
			}
			break;
    8d62:	e066      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    8d64:	e065      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
		}	
		case BRAKESTATE_ACTIVE_HOLD_MANUAL:
		{
			done = 0;
    8d66:	1c3b      	adds	r3, r7, #0
    8d68:	330e      	adds	r3, #14
    8d6a:	2200      	movs	r2, #0
    8d6c:	701a      	strb	r2, [r3, #0]
			if (((brakeChange & BRAKECHANGE_SUPTIME)!= 0)&&(done == 0))
    8d6e:	4b36      	ldr	r3, [pc, #216]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	1c1a      	adds	r2, r3, #0
    8d74:	2302      	movs	r3, #2
    8d76:	4013      	ands	r3, r2
    8d78:	d02e      	beq.n	8dd8 <BrakeBoardStateMachineTask+0x1f10>
    8d7a:	1c3b      	adds	r3, r7, #0
    8d7c:	330e      	adds	r3, #14
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	2b00      	cmp	r3, #0
    8d82:	d129      	bne.n	8dd8 <BrakeBoardStateMachineTask+0x1f10>
			{
				done = 1;
    8d84:	1c3b      	adds	r3, r7, #0
    8d86:	330e      	adds	r3, #14
    8d88:	2201      	movs	r2, #1
    8d8a:	701a      	strb	r2, [r3, #0]
				brakeChange &= ~BRAKECHANGE_SUPTIME;
    8d8c:	4b2e      	ldr	r3, [pc, #184]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	2202      	movs	r2, #2
    8d92:	4393      	bics	r3, r2
    8d94:	b2da      	uxtb	r2, r3
    8d96:	4b2c      	ldr	r3, [pc, #176]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8d98:	701a      	strb	r2, [r3, #0]
				MotorOff(1);
    8d9a:	2001      	movs	r0, #1
    8d9c:	4b2d      	ldr	r3, [pc, #180]	; (8e54 <BrakeBoardStateMachineTask+0x1f8c>)
    8d9e:	4798      	blx	r3
				if (BrakeActuatorControl(BRAKE_RUN)==BRAKE_ERROR)
    8da0:	2002      	movs	r0, #2
    8da2:	4b2b      	ldr	r3, [pc, #172]	; (8e50 <BrakeBoardStateMachineTask+0x1f88>)
    8da4:	4798      	blx	r3
    8da6:	1c03      	adds	r3, r0, #0
    8da8:	2b00      	cmp	r3, #0
    8daa:	d106      	bne.n	8dba <BrakeBoardStateMachineTask+0x1ef2>
				{
					brakeState = BRAKESTATE_ERROR_RETRACT;
    8dac:	4b25      	ldr	r3, [pc, #148]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8dae:	2207      	movs	r2, #7
    8db0:	701a      	strb	r2, [r3, #0]
					brakeSupTime = 0;
    8db2:	4b23      	ldr	r3, [pc, #140]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8db4:	2200      	movs	r2, #0
    8db6:	801a      	strh	r2, [r3, #0]
    8db8:	e00e      	b.n	8dd8 <BrakeBoardStateMachineTask+0x1f10>
				}
				else
				{
					MotorCCW();
    8dba:	4b20      	ldr	r3, [pc, #128]	; (8e3c <BrakeBoardStateMachineTask+0x1f74>)
    8dbc:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8dbe:	4b20      	ldr	r3, [pc, #128]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8dc0:	2264      	movs	r2, #100	; 0x64
    8dc2:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8dc4:	4b1f      	ldr	r3, [pc, #124]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8dc6:	2216      	movs	r2, #22
    8dc8:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8dca:	4b1f      	ldr	r3, [pc, #124]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	2202      	movs	r2, #2
    8dd0:	4393      	bics	r3, r2
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	4b1c      	ldr	r3, [pc, #112]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8dd6:	701a      	strb	r2, [r3, #0]
				}
			}			
			//------------------------
			// you are braking ....
			if (done == 0)
    8dd8:	1c3b      	adds	r3, r7, #0
    8dda:	330e      	adds	r3, #14
    8ddc:	781b      	ldrb	r3, [r3, #0]
    8dde:	2b00      	cmp	r3, #0
    8de0:	d118      	bne.n	8e14 <BrakeBoardStateMachineTask+0x1f4c>
			{
				//----------------------------
				// Hold until cleared by: break-away signal
				// returning to normal, set-up button pressed
				// on brake unit or cleared with remote.
				if ((remoteStatus & REMOTE_MANUALBRAKE_ACTIVE) == 0)
    8de2:	4b29      	ldr	r3, [pc, #164]	; (8e88 <BrakeBoardStateMachineTask+0x1fc0>)
    8de4:	781b      	ldrb	r3, [r3, #0]
    8de6:	1c1a      	adds	r2, r3, #0
    8de8:	2301      	movs	r3, #1
    8dea:	4013      	ands	r3, r2
    8dec:	d112      	bne.n	8e14 <BrakeBoardStateMachineTask+0x1f4c>
				{
					done = 1;
    8dee:	1c3b      	adds	r3, r7, #0
    8df0:	330e      	adds	r3, #14
    8df2:	2201      	movs	r2, #1
    8df4:	701a      	strb	r2, [r3, #0]
					MotorCCW();
    8df6:	4b11      	ldr	r3, [pc, #68]	; (8e3c <BrakeBoardStateMachineTask+0x1f74>)
    8df8:	4798      	blx	r3
					brakeSupTime = BRAKESUPTIME;
    8dfa:	4b11      	ldr	r3, [pc, #68]	; (8e40 <BrakeBoardStateMachineTask+0x1f78>)
    8dfc:	2264      	movs	r2, #100	; 0x64
    8dfe:	801a      	strh	r2, [r3, #0]
					brakeState = BRAKESTATE_END_RETRACT_MANUAL;
    8e00:	4b10      	ldr	r3, [pc, #64]	; (8e44 <BrakeBoardStateMachineTask+0x1f7c>)
    8e02:	2216      	movs	r2, #22
    8e04:	701a      	strb	r2, [r3, #0]
					brakeChange &= ~BRAKECHANGE_SUPTIME;
    8e06:	4b10      	ldr	r3, [pc, #64]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8e08:	781b      	ldrb	r3, [r3, #0]
    8e0a:	2202      	movs	r2, #2
    8e0c:	4393      	bics	r3, r2
    8e0e:	b2da      	uxtb	r2, r3
    8e10:	4b0d      	ldr	r3, [pc, #52]	; (8e48 <BrakeBoardStateMachineTask+0x1f80>)
    8e12:	701a      	strb	r2, [r3, #0]
				}
			}
			if (done == 0)
    8e14:	1c3b      	adds	r3, r7, #0
    8e16:	330e      	adds	r3, #14
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d107      	bne.n	8e2e <BrakeBoardStateMachineTask+0x1f66>
			{
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
    8e1e:	4b1b      	ldr	r3, [pc, #108]	; (8e8c <BrakeBoardStateMachineTask+0x1fc4>)
    8e20:	791b      	ldrb	r3, [r3, #4]
    8e22:	2210      	movs	r2, #16
    8e24:	4313      	orrs	r3, r2
    8e26:	b2da      	uxtb	r2, r3
    8e28:	4b18      	ldr	r3, [pc, #96]	; (8e8c <BrakeBoardStateMachineTask+0x1fc4>)
    8e2a:	711a      	strb	r2, [r3, #4]
			}
			break;
    8e2c:	e001      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
    8e2e:	e000      	b.n	8e32 <BrakeBoardStateMachineTask+0x1f6a>
					}
					break;
				}
			}
			}
			break;
    8e30:	46c0      	nop			; (mov r8, r8)
				brakeStatus.BrakeState |= BRAKESTATE_MANUALBRAKE;
			}
			break;
		}	
	}
	BrakeLEDControl();
    8e32:	4b17      	ldr	r3, [pc, #92]	; (8e90 <BrakeBoardStateMachineTask+0x1fc8>)
    8e34:	4798      	blx	r3
}
    8e36:	46bd      	mov	sp, r7
    8e38:	b005      	add	sp, #20
    8e3a:	bd90      	pop	{r4, r7, pc}
    8e3c:	00009bdd 	.word	0x00009bdd
    8e40:	200036c4 	.word	0x200036c4
    8e44:	20002ebf 	.word	0x20002ebf
    8e48:	20002eee 	.word	0x20002eee
    8e4c:	20003072 	.word	0x20003072
    8e50:	000069a1 	.word	0x000069a1
    8e54:	00009ac9 	.word	0x00009ac9
    8e58:	20002eb2 	.word	0x20002eb2
    8e5c:	0000b409 	.word	0x0000b409
    8e60:	20002ea6 	.word	0x20002ea6
    8e64:	000096dd 	.word	0x000096dd
    8e68:	20002eaa 	.word	0x20002eaa
    8e6c:	20002fb8 	.word	0x20002fb8
    8e70:	200004b7 	.word	0x200004b7
    8e74:	00009499 	.word	0x00009499
    8e78:	20002eea 	.word	0x20002eea
    8e7c:	0000977d 	.word	0x0000977d
    8e80:	20002eac 	.word	0x20002eac
    8e84:	00009515 	.word	0x00009515
    8e88:	20002f1c 	.word	0x20002f1c
    8e8c:	20003694 	.word	0x20003694
    8e90:	00006b7d 	.word	0x00006b7d

00008e94 <MotorNeedNewBaseline>:

//XXXXXXXXXXXXXXXXXXXXXXXXX DEACCELERATION DETECTION XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
int16_t motorTempDiffx = 0;

void MotorNeedNewBaseline(void)
{
    8e94:	b580      	push	{r7, lr}
    8e96:	af00      	add	r7, sp, #0
	needNewBaseline=1;
    8e98:	4b03      	ldr	r3, [pc, #12]	; (8ea8 <MotorNeedNewBaseline+0x14>)
    8e9a:	2201      	movs	r2, #1
    8e9c:	701a      	strb	r2, [r3, #0]
	needNewBaselineTimer=NEEDNEWBASELINE_TIME; 
    8e9e:	4b03      	ldr	r3, [pc, #12]	; (8eac <MotorNeedNewBaseline+0x18>)
    8ea0:	2264      	movs	r2, #100	; 0x64
    8ea2:	801a      	strh	r2, [r3, #0]
}
    8ea4:	46bd      	mov	sp, r7
    8ea6:	bd80      	pop	{r7, pc}
    8ea8:	20000000 	.word	0x20000000
    8eac:	20000644 	.word	0x20000644

00008eb0 <MotorBuildGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
void MotorBuildGetAcc(void)
{
    8eb0:	b590      	push	{r4, r7, lr}
    8eb2:	b085      	sub	sp, #20
    8eb4:	af00      	add	r7, sp, #0
	int16_t mytempdiffx,newMotorx;
	uint8_t change;
	int32_t ltemp;
	
	mytempdiffx = 0;
    8eb6:	1c3b      	adds	r3, r7, #0
    8eb8:	330e      	adds	r3, #14
    8eba:	2200      	movs	r2, #0
    8ebc:	801a      	strh	r2, [r3, #0]
	//   when some event requires this to happen -
	//   events noted today: power-up, just return to home, acceleration detected (-g)
	// DURING needNewBaseline - mytempdiffx returned will be zero 0000000000
	// needNewBaseline will be on a 10 second timer.
	//----------------------------------------
	if (AccelProvideReadingChange(&motorx,&motory,&motorz,&change)!= 0)
    8ebe:	4866      	ldr	r0, [pc, #408]	; (9058 <MotorBuildGetAcc+0x1a8>)
    8ec0:	4966      	ldr	r1, [pc, #408]	; (905c <MotorBuildGetAcc+0x1ac>)
    8ec2:	4a67      	ldr	r2, [pc, #412]	; (9060 <MotorBuildGetAcc+0x1b0>)
    8ec4:	1d7b      	adds	r3, r7, #5
    8ec6:	4c67      	ldr	r4, [pc, #412]	; (9064 <MotorBuildGetAcc+0x1b4>)
    8ec8:	47a0      	blx	r4
    8eca:	1c03      	adds	r3, r0, #0
    8ecc:	2b00      	cmp	r3, #0
    8ece:	d100      	bne.n	8ed2 <MotorBuildGetAcc+0x22>
    8ed0:	e0b1      	b.n	9036 <MotorBuildGetAcc+0x186>
	{
//v01_26		if ((change != 0)&&(hlimitState == 0))
		if ((change != 0)&&((hlimitState == 0)||(homeLimit == HOME_IN)))		
    8ed2:	1d7b      	adds	r3, r7, #5
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	d100      	bne.n	8edc <MotorBuildGetAcc+0x2c>
    8eda:	e098      	b.n	900e <MotorBuildGetAcc+0x15e>
    8edc:	4b62      	ldr	r3, [pc, #392]	; (9068 <MotorBuildGetAcc+0x1b8>)
    8ede:	781b      	ldrb	r3, [r3, #0]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d004      	beq.n	8eee <MotorBuildGetAcc+0x3e>
    8ee4:	4b61      	ldr	r3, [pc, #388]	; (906c <MotorBuildGetAcc+0x1bc>)
    8ee6:	781b      	ldrb	r3, [r3, #0]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d000      	beq.n	8eee <MotorBuildGetAcc+0x3e>
    8eec:	e08f      	b.n	900e <MotorBuildGetAcc+0x15e>
		{
			newMotorx = (int16_t)motorx;
    8eee:	4b5a      	ldr	r3, [pc, #360]	; (9058 <MotorBuildGetAcc+0x1a8>)
    8ef0:	881a      	ldrh	r2, [r3, #0]
    8ef2:	1dbb      	adds	r3, r7, #6
    8ef4:	801a      	strh	r2, [r3, #0]
			ltemp = (int32_t)motorAccXBaseline;
    8ef6:	4b5e      	ldr	r3, [pc, #376]	; (9070 <MotorBuildGetAcc+0x1c0>)
    8ef8:	881b      	ldrh	r3, [r3, #0]
    8efa:	b21b      	sxth	r3, r3
    8efc:	60bb      	str	r3, [r7, #8]
			
			if (needNewBaseline != 0)
    8efe:	4b5d      	ldr	r3, [pc, #372]	; (9074 <MotorBuildGetAcc+0x1c4>)
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	2b00      	cmp	r3, #0
    8f04:	d041      	beq.n	8f8a <MotorBuildGetAcc+0xda>
			{
				if (newMotorx >0)
    8f06:	1dbb      	adds	r3, r7, #6
    8f08:	2200      	movs	r2, #0
    8f0a:	5e9b      	ldrsh	r3, [r3, r2]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	dd11      	ble.n	8f34 <MotorBuildGetAcc+0x84>
				{
					ltemp = ltemp * 100;
    8f10:	68bb      	ldr	r3, [r7, #8]
    8f12:	2264      	movs	r2, #100	; 0x64
    8f14:	4353      	muls	r3, r2
    8f16:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8f18:	1dbb      	adds	r3, r7, #6
    8f1a:	2200      	movs	r2, #0
    8f1c:	5e9b      	ldrsh	r3, [r3, r2]
    8f1e:	68ba      	ldr	r2, [r7, #8]
    8f20:	18d3      	adds	r3, r2, r3
    8f22:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8f24:	68ba      	ldr	r2, [r7, #8]
    8f26:	4b54      	ldr	r3, [pc, #336]	; (9078 <MotorBuildGetAcc+0x1c8>)
    8f28:	1c10      	adds	r0, r2, #0
    8f2a:	2165      	movs	r1, #101	; 0x65
    8f2c:	4798      	blx	r3
    8f2e:	1c03      	adds	r3, r0, #0
    8f30:	60bb      	str	r3, [r7, #8]
    8f32:	e010      	b.n	8f56 <MotorBuildGetAcc+0xa6>
				}
				else
				{
					ltemp = ltemp * 100;
    8f34:	68bb      	ldr	r3, [r7, #8]
    8f36:	2264      	movs	r2, #100	; 0x64
    8f38:	4353      	muls	r3, r2
    8f3a:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8f3c:	1dbb      	adds	r3, r7, #6
    8f3e:	2200      	movs	r2, #0
    8f40:	5e9b      	ldrsh	r3, [r3, r2]
    8f42:	68ba      	ldr	r2, [r7, #8]
    8f44:	18d3      	adds	r3, r2, r3
    8f46:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/101;
    8f48:	68ba      	ldr	r2, [r7, #8]
    8f4a:	4b4b      	ldr	r3, [pc, #300]	; (9078 <MotorBuildGetAcc+0x1c8>)
    8f4c:	1c10      	adds	r0, r2, #0
    8f4e:	2165      	movs	r1, #101	; 0x65
    8f50:	4798      	blx	r3
    8f52:	1c03      	adds	r3, r0, #0
    8f54:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    8f56:	4b49      	ldr	r3, [pc, #292]	; (907c <MotorBuildGetAcc+0x1cc>)
    8f58:	781b      	ldrb	r3, [r3, #0]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d106      	bne.n	8f6c <MotorBuildGetAcc+0xbc>
				{
					ltemp = newMotorx;
    8f5e:	1dbb      	adds	r3, r7, #6
    8f60:	2200      	movs	r2, #0
    8f62:	5e9b      	ldrsh	r3, [r3, r2]
    8f64:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    8f66:	4b45      	ldr	r3, [pc, #276]	; (907c <MotorBuildGetAcc+0x1cc>)
    8f68:	2201      	movs	r2, #1
    8f6a:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    8f6c:	68bb      	ldr	r3, [r7, #8]
    8f6e:	b29a      	uxth	r2, r3
    8f70:	4b3f      	ldr	r3, [pc, #252]	; (9070 <MotorBuildGetAcc+0x1c0>)
    8f72:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    8f74:	4b39      	ldr	r3, [pc, #228]	; (905c <MotorBuildGetAcc+0x1ac>)
    8f76:	881b      	ldrh	r3, [r3, #0]
    8f78:	b29a      	uxth	r2, r3
    8f7a:	4b41      	ldr	r3, [pc, #260]	; (9080 <MotorBuildGetAcc+0x1d0>)
    8f7c:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;				
    8f7e:	4b38      	ldr	r3, [pc, #224]	; (9060 <MotorBuildGetAcc+0x1b0>)
    8f80:	881b      	ldrh	r3, [r3, #0]
    8f82:	b29a      	uxth	r2, r3
    8f84:	4b3f      	ldr	r3, [pc, #252]	; (9084 <MotorBuildGetAcc+0x1d4>)
    8f86:	801a      	strh	r2, [r3, #0]
    8f88:	e041      	b.n	900e <MotorBuildGetAcc+0x15e>
			}
			else
			{
				if (newMotorx >0)
    8f8a:	1dbb      	adds	r3, r7, #6
    8f8c:	2200      	movs	r2, #0
    8f8e:	5e9b      	ldrsh	r3, [r3, r2]
    8f90:	2b00      	cmp	r3, #0
    8f92:	dd12      	ble.n	8fba <MotorBuildGetAcc+0x10a>
				{
					ltemp = ltemp * 1000;
    8f94:	68bb      	ldr	r3, [r7, #8]
    8f96:	22fa      	movs	r2, #250	; 0xfa
    8f98:	0092      	lsls	r2, r2, #2
    8f9a:	4353      	muls	r3, r2
    8f9c:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8f9e:	1dbb      	adds	r3, r7, #6
    8fa0:	2200      	movs	r2, #0
    8fa2:	5e9b      	ldrsh	r3, [r3, r2]
    8fa4:	68ba      	ldr	r2, [r7, #8]
    8fa6:	18d3      	adds	r3, r2, r3
    8fa8:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/1001;
    8faa:	68ba      	ldr	r2, [r7, #8]
    8fac:	4b32      	ldr	r3, [pc, #200]	; (9078 <MotorBuildGetAcc+0x1c8>)
    8fae:	1c10      	adds	r0, r2, #0
    8fb0:	4935      	ldr	r1, [pc, #212]	; (9088 <MotorBuildGetAcc+0x1d8>)
    8fb2:	4798      	blx	r3
    8fb4:	1c03      	adds	r3, r0, #0
    8fb6:	60bb      	str	r3, [r7, #8]
    8fb8:	e010      	b.n	8fdc <MotorBuildGetAcc+0x12c>
				}
				else
				{
					ltemp = ltemp * 5000;
    8fba:	68bb      	ldr	r3, [r7, #8]
    8fbc:	4a33      	ldr	r2, [pc, #204]	; (908c <MotorBuildGetAcc+0x1dc>)
    8fbe:	4353      	muls	r3, r2
    8fc0:	60bb      	str	r3, [r7, #8]
					ltemp += newMotorx;
    8fc2:	1dbb      	adds	r3, r7, #6
    8fc4:	2200      	movs	r2, #0
    8fc6:	5e9b      	ldrsh	r3, [r3, r2]
    8fc8:	68ba      	ldr	r2, [r7, #8]
    8fca:	18d3      	adds	r3, r2, r3
    8fcc:	60bb      	str	r3, [r7, #8]
					ltemp = ltemp/5001;
    8fce:	68ba      	ldr	r2, [r7, #8]
    8fd0:	4b29      	ldr	r3, [pc, #164]	; (9078 <MotorBuildGetAcc+0x1c8>)
    8fd2:	1c10      	adds	r0, r2, #0
    8fd4:	492e      	ldr	r1, [pc, #184]	; (9090 <MotorBuildGetAcc+0x1e0>)
    8fd6:	4798      	blx	r3
    8fd8:	1c03      	adds	r3, r0, #0
    8fda:	60bb      	str	r3, [r7, #8]
				}
				if (motorAccBaseline == 0)
    8fdc:	4b27      	ldr	r3, [pc, #156]	; (907c <MotorBuildGetAcc+0x1cc>)
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d106      	bne.n	8ff2 <MotorBuildGetAcc+0x142>
				{
					ltemp = newMotorx;
    8fe4:	1dbb      	adds	r3, r7, #6
    8fe6:	2200      	movs	r2, #0
    8fe8:	5e9b      	ldrsh	r3, [r3, r2]
    8fea:	60bb      	str	r3, [r7, #8]
					motorAccBaseline = 1;
    8fec:	4b23      	ldr	r3, [pc, #140]	; (907c <MotorBuildGetAcc+0x1cc>)
    8fee:	2201      	movs	r2, #1
    8ff0:	701a      	strb	r2, [r3, #0]
				}
				motorAccXBaseline = (int16_t)ltemp;
    8ff2:	68bb      	ldr	r3, [r7, #8]
    8ff4:	b29a      	uxth	r2, r3
    8ff6:	4b1e      	ldr	r3, [pc, #120]	; (9070 <MotorBuildGetAcc+0x1c0>)
    8ff8:	801a      	strh	r2, [r3, #0]
				motorAccYBaseline = (int16_t)motory;
    8ffa:	4b18      	ldr	r3, [pc, #96]	; (905c <MotorBuildGetAcc+0x1ac>)
    8ffc:	881b      	ldrh	r3, [r3, #0]
    8ffe:	b29a      	uxth	r2, r3
    9000:	4b1f      	ldr	r3, [pc, #124]	; (9080 <MotorBuildGetAcc+0x1d0>)
    9002:	801a      	strh	r2, [r3, #0]
				motorAccZBaseline = (int16_t)motorz;
    9004:	4b16      	ldr	r3, [pc, #88]	; (9060 <MotorBuildGetAcc+0x1b0>)
    9006:	881b      	ldrh	r3, [r3, #0]
    9008:	b29a      	uxth	r2, r3
    900a:	4b1e      	ldr	r3, [pc, #120]	; (9084 <MotorBuildGetAcc+0x1d4>)
    900c:	801a      	strh	r2, [r3, #0]
			}
		}
		tempx = (int16_t)motorx;
    900e:	4b12      	ldr	r3, [pc, #72]	; (9058 <MotorBuildGetAcc+0x1a8>)
    9010:	881b      	ldrh	r3, [r3, #0]
    9012:	b29a      	uxth	r2, r3
    9014:	4b1f      	ldr	r3, [pc, #124]	; (9094 <MotorBuildGetAcc+0x1e4>)
    9016:	801a      	strh	r2, [r3, #0]
		tempbasex = (int16_t) motorAccXBaseline;
    9018:	4b15      	ldr	r3, [pc, #84]	; (9070 <MotorBuildGetAcc+0x1c0>)
    901a:	881a      	ldrh	r2, [r3, #0]
    901c:	4b1e      	ldr	r3, [pc, #120]	; (9098 <MotorBuildGetAcc+0x1e8>)
    901e:	801a      	strh	r2, [r3, #0]
		mytempdiffx = tempx- tempbasex;
    9020:	4b1c      	ldr	r3, [pc, #112]	; (9094 <MotorBuildGetAcc+0x1e4>)
    9022:	881b      	ldrh	r3, [r3, #0]
    9024:	b29a      	uxth	r2, r3
    9026:	4b1c      	ldr	r3, [pc, #112]	; (9098 <MotorBuildGetAcc+0x1e8>)
    9028:	881b      	ldrh	r3, [r3, #0]
    902a:	b29b      	uxth	r3, r3
    902c:	1ad3      	subs	r3, r2, r3
    902e:	b29a      	uxth	r2, r3
    9030:	1c3b      	adds	r3, r7, #0
    9032:	330e      	adds	r3, #14
    9034:	801a      	strh	r2, [r3, #0]
		
	}
	if (needNewBaseline != 0)
    9036:	4b0f      	ldr	r3, [pc, #60]	; (9074 <MotorBuildGetAcc+0x1c4>)
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	2b00      	cmp	r3, #0
    903c:	d003      	beq.n	9046 <MotorBuildGetAcc+0x196>
	{
		mytempdiffx = 0; 
    903e:	1c3b      	adds	r3, r7, #0
    9040:	330e      	adds	r3, #14
    9042:	2200      	movs	r2, #0
    9044:	801a      	strh	r2, [r3, #0]
	}
	motorTempDiffx = mytempdiffx;
    9046:	4b15      	ldr	r3, [pc, #84]	; (909c <MotorBuildGetAcc+0x1ec>)
    9048:	1c3a      	adds	r2, r7, #0
    904a:	320e      	adds	r2, #14
    904c:	8812      	ldrh	r2, [r2, #0]
    904e:	801a      	strh	r2, [r3, #0]
}
    9050:	46bd      	mov	sp, r7
    9052:	b005      	add	sp, #20
    9054:	bd90      	pop	{r4, r7, pc}
    9056:	46c0      	nop			; (mov r8, r8)
    9058:	20002ef0 	.word	0x20002ef0
    905c:	20002ea8 	.word	0x20002ea8
    9060:	20002ebc 	.word	0x20002ebc
    9064:	00005c81 	.word	0x00005c81
    9068:	20003068 	.word	0x20003068
    906c:	20000001 	.word	0x20000001
    9070:	20002ef4 	.word	0x20002ef4
    9074:	20000000 	.word	0x20000000
    9078:	000157b5 	.word	0x000157b5
    907c:	20002ece 	.word	0x20002ece
    9080:	20002eae 	.word	0x20002eae
    9084:	20002ec0 	.word	0x20002ec0
    9088:	000003e9 	.word	0x000003e9
    908c:	00001388 	.word	0x00001388
    9090:	00001389 	.word	0x00001389
    9094:	20002eda 	.word	0x20002eda
    9098:	20002edc 	.word	0x20002edc
    909c:	200004b8 	.word	0x200004b8

000090a0 <MotorGetAcc>:
//------------------------------------------------------------------------------
// This function
// NOTE: activeBraking does not matter swiched to the hlimitState to know this.
//==============================================================================
int16_t MotorGetAcc(uint8_t activeBraking)
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b082      	sub	sp, #8
    90a4:	af00      	add	r7, sp, #0
    90a6:	1c02      	adds	r2, r0, #0
    90a8:	1dfb      	adds	r3, r7, #7
    90aa:	701a      	strb	r2, [r3, #0]
	return motorTempDiffx;
    90ac:	4b03      	ldr	r3, [pc, #12]	; (90bc <MotorGetAcc+0x1c>)
    90ae:	881b      	ldrh	r3, [r3, #0]
    90b0:	b21b      	sxth	r3, r3
}
    90b2:	1c18      	adds	r0, r3, #0
    90b4:	46bd      	mov	sp, r7
    90b6:	b002      	add	sp, #8
    90b8:	bd80      	pop	{r7, pc}
    90ba:	46c0      	nop			; (mov r8, r8)
    90bc:	200004b8 	.word	0x200004b8

000090c0 <CurrentMotorCalculated>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculated(void)
{
    90c0:	b580      	push	{r7, lr}
    90c2:	b084      	sub	sp, #16
    90c4:	af00      	add	r7, sp, #0
	uint32_t ltemp1,temp2;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    90c6:	1c3b      	adds	r3, r7, #0
    90c8:	330a      	adds	r3, #10
    90ca:	2200      	movs	r2, #0
    90cc:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    90ce:	4b46      	ldr	r3, [pc, #280]	; (91e8 <CurrentMotorCalculated+0x128>)
    90d0:	7d9a      	ldrb	r2, [r3, #22]
    90d2:	4b46      	ldr	r3, [pc, #280]	; (91ec <CurrentMotorCalculated+0x12c>)
    90d4:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    90d6:	4b44      	ldr	r3, [pc, #272]	; (91e8 <CurrentMotorCalculated+0x128>)
    90d8:	789a      	ldrb	r2, [r3, #2]
    90da:	4b45      	ldr	r3, [pc, #276]	; (91f0 <CurrentMotorCalculated+0x130>)
    90dc:	701a      	strb	r2, [r3, #0]
	
	if ((fm<1)||(fm>9))
    90de:	4b43      	ldr	r3, [pc, #268]	; (91ec <CurrentMotorCalculated+0x12c>)
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	2b00      	cmp	r3, #0
    90e4:	d003      	beq.n	90ee <CurrentMotorCalculated+0x2e>
    90e6:	4b41      	ldr	r3, [pc, #260]	; (91ec <CurrentMotorCalculated+0x12c>)
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	2b09      	cmp	r3, #9
    90ec:	d902      	bls.n	90f4 <CurrentMotorCalculated+0x34>
	{
		fm = 5;
    90ee:	4b3f      	ldr	r3, [pc, #252]	; (91ec <CurrentMotorCalculated+0x12c>)
    90f0:	2205      	movs	r2, #5
    90f2:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    90f4:	4b3e      	ldr	r3, [pc, #248]	; (91f0 <CurrentMotorCalculated+0x130>)
    90f6:	781b      	ldrb	r3, [r3, #0]
    90f8:	2b00      	cmp	r3, #0
    90fa:	d003      	beq.n	9104 <CurrentMotorCalculated+0x44>
    90fc:	4b3c      	ldr	r3, [pc, #240]	; (91f0 <CurrentMotorCalculated+0x130>)
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	2b09      	cmp	r3, #9
    9102:	d902      	bls.n	910a <CurrentMotorCalculated+0x4a>
	{
		gain = 5;
    9104:	4b3a      	ldr	r3, [pc, #232]	; (91f0 <CurrentMotorCalculated+0x130>)
    9106:	2205      	movs	r2, #5
    9108:	701a      	strb	r2, [r3, #0]
	}		 
	instantGain = MotorGetAcc(TRUE);
    910a:	2001      	movs	r0, #1
    910c:	4b39      	ldr	r3, [pc, #228]	; (91f4 <CurrentMotorCalculated+0x134>)
    910e:	4798      	blx	r3
    9110:	1c03      	adds	r3, r0, #0
    9112:	b29a      	uxth	r2, r3
    9114:	4b38      	ldr	r3, [pc, #224]	; (91f8 <CurrentMotorCalculated+0x138>)
    9116:	801a      	strh	r2, [r3, #0]
	if (instantGain > 0)
    9118:	4b37      	ldr	r3, [pc, #220]	; (91f8 <CurrentMotorCalculated+0x138>)
    911a:	881b      	ldrh	r3, [r3, #0]
    911c:	2b00      	cmp	r3, #0
    911e:	d102      	bne.n	9126 <CurrentMotorCalculated+0x66>
//		instantGain = -1 * instantGain; 
//		instantGain =1; 
	}
	else
	{
		instantGain =0;  //1; 
    9120:	4b35      	ldr	r3, [pc, #212]	; (91f8 <CurrentMotorCalculated+0x138>)
    9122:	2200      	movs	r2, #0
    9124:	801a      	strh	r2, [r3, #0]
//	{
//		instantGain = -1 * instantGain; 
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = instantGain * (gain*10)/5;
    9126:	4b34      	ldr	r3, [pc, #208]	; (91f8 <CurrentMotorCalculated+0x138>)
    9128:	881b      	ldrh	r3, [r3, #0]
    912a:	1c19      	adds	r1, r3, #0
    912c:	4b30      	ldr	r3, [pc, #192]	; (91f0 <CurrentMotorCalculated+0x130>)
    912e:	781b      	ldrb	r3, [r3, #0]
    9130:	1c1a      	adds	r2, r3, #0
    9132:	1c13      	adds	r3, r2, #0
    9134:	009b      	lsls	r3, r3, #2
    9136:	189b      	adds	r3, r3, r2
    9138:	005b      	lsls	r3, r3, #1
    913a:	1c1a      	adds	r2, r3, #0
    913c:	434a      	muls	r2, r1
    913e:	4b2f      	ldr	r3, [pc, #188]	; (91fc <CurrentMotorCalculated+0x13c>)
    9140:	1c10      	adds	r0, r2, #0
    9142:	2105      	movs	r1, #5
    9144:	4798      	blx	r3
    9146:	1c03      	adds	r3, r0, #0
    9148:	60fb      	str	r3, [r7, #12]
		temp2 = temp2/10; 
    914a:	68fa      	ldr	r2, [r7, #12]
    914c:	4b2c      	ldr	r3, [pc, #176]	; (9200 <CurrentMotorCalculated+0x140>)
    914e:	1c10      	adds	r0, r2, #0
    9150:	210a      	movs	r1, #10
    9152:	4798      	blx	r3
    9154:	1c03      	adds	r3, r0, #0
    9156:	60fb      	str	r3, [r7, #12]
		if (temp2 > ACC_HALF_G)
    9158:	68fa      	ldr	r2, [r7, #12]
    915a:	2380      	movs	r3, #128	; 0x80
    915c:	019b      	lsls	r3, r3, #6
    915e:	429a      	cmp	r2, r3
    9160:	d902      	bls.n	9168 <CurrentMotorCalculated+0xa8>
		{
			temp2 = ACC_HALF_G; 
    9162:	2380      	movs	r3, #128	; 0x80
    9164:	019b      	lsls	r3, r3, #6
    9166:	60fb      	str	r3, [r7, #12]
		}
		ltemp = temp2;
    9168:	4b26      	ldr	r3, [pc, #152]	; (9204 <CurrentMotorCalculated+0x144>)
    916a:	68fa      	ldr	r2, [r7, #12]
    916c:	601a      	str	r2, [r3, #0]
		ltemp = ltemp * 100; 
    916e:	4b25      	ldr	r3, [pc, #148]	; (9204 <CurrentMotorCalculated+0x144>)
    9170:	681b      	ldr	r3, [r3, #0]
    9172:	2264      	movs	r2, #100	; 0x64
    9174:	435a      	muls	r2, r3
    9176:	4b23      	ldr	r3, [pc, #140]	; (9204 <CurrentMotorCalculated+0x144>)
    9178:	601a      	str	r2, [r3, #0]
		ltemp = ltemp/ACC_ONE_G;
    917a:	4b22      	ldr	r3, [pc, #136]	; (9204 <CurrentMotorCalculated+0x144>)
    917c:	681b      	ldr	r3, [r3, #0]
    917e:	0b9a      	lsrs	r2, r3, #14
    9180:	4b20      	ldr	r3, [pc, #128]	; (9204 <CurrentMotorCalculated+0x144>)
    9182:	601a      	str	r2, [r3, #0]
		temp2 = ltemp; 		
    9184:	4b1f      	ldr	r3, [pc, #124]	; (9204 <CurrentMotorCalculated+0x144>)
    9186:	681b      	ldr	r3, [r3, #0]
    9188:	60fb      	str	r3, [r7, #12]
		//----------------------------
		ltemp1 = temp2;
    918a:	68fb      	ldr	r3, [r7, #12]
    918c:	607b      	str	r3, [r7, #4]
		gPrime = ltemp1; 
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	b29a      	uxth	r2, r3
    9192:	4b1d      	ldr	r3, [pc, #116]	; (9208 <CurrentMotorCalculated+0x148>)
    9194:	801a      	strh	r2, [r3, #0]
		ltemp1 = (ltemp1 * fm * 70 *RUSSELLAMPCHANGE);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    9196:	4b15      	ldr	r3, [pc, #84]	; (91ec <CurrentMotorCalculated+0x12c>)
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	687a      	ldr	r2, [r7, #4]
    919c:	4353      	muls	r3, r2
    919e:	2246      	movs	r2, #70	; 0x46
    91a0:	4353      	muls	r3, r2
    91a2:	607b      	str	r3, [r7, #4]
		ltemp1 = 19000 + ltemp1;  //V00_78
    91a4:	687b      	ldr	r3, [r7, #4]
    91a6:	4a19      	ldr	r2, [pc, #100]	; (920c <CurrentMotorCalculated+0x14c>)
    91a8:	189b      	adds	r3, r3, r2
    91aa:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1 * 205; 
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	22cd      	movs	r2, #205	; 0xcd
    91b0:	4353      	muls	r3, r2
    91b2:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    91b4:	687a      	ldr	r2, [r7, #4]
    91b6:	4b12      	ldr	r3, [pc, #72]	; (9200 <CurrentMotorCalculated+0x140>)
    91b8:	1c10      	adds	r0, r2, #0
    91ba:	2164      	movs	r1, #100	; 0x64
    91bc:	4798      	blx	r3
    91be:	1c03      	adds	r3, r0, #0
    91c0:	607b      	str	r3, [r7, #4]
		ltemp1 = ltemp1/100;
    91c2:	687a      	ldr	r2, [r7, #4]
    91c4:	4b0e      	ldr	r3, [pc, #56]	; (9200 <CurrentMotorCalculated+0x140>)
    91c6:	1c10      	adds	r0, r2, #0
    91c8:	2164      	movs	r1, #100	; 0x64
    91ca:	4798      	blx	r3
    91cc:	1c03      	adds	r3, r0, #0
    91ce:	607b      	str	r3, [r7, #4]
		returnCurrent = ltemp1; 
    91d0:	1c3b      	adds	r3, r7, #0
    91d2:	330a      	adds	r3, #10
    91d4:	687a      	ldr	r2, [r7, #4]
    91d6:	801a      	strh	r2, [r3, #0]
//	}
//	else
//	{
//		returnCurrent = 1; 
//	}
	return returnCurrent;
    91d8:	1c3b      	adds	r3, r7, #0
    91da:	330a      	adds	r3, #10
    91dc:	881b      	ldrh	r3, [r3, #0]
}
    91de:	1c18      	adds	r0, r3, #0
    91e0:	46bd      	mov	sp, r7
    91e2:	b004      	add	sp, #16
    91e4:	bd80      	pop	{r7, pc}
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	20002fb8 	.word	0x20002fb8
    91ec:	20002eb4 	.word	0x20002eb4
    91f0:	20002ed2 	.word	0x20002ed2
    91f4:	000090a1 	.word	0x000090a1
    91f8:	20002ef6 	.word	0x20002ef6
    91fc:	000157b5 	.word	0x000157b5
    9200:	00015719 	.word	0x00015719
    9204:	20002ea0 	.word	0x20002ea0
    9208:	20002ee6 	.word	0x20002ee6
    920c:	00004a38 	.word	0x00004a38

00009210 <FsrMotorCalculated>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculated(void)
{
    9210:	b580      	push	{r7, lr}
    9212:	b084      	sub	sp, #16
    9214:	af00      	add	r7, sp, #0
	uint32_t ltemp1,temp2;
	uint16_t returnFsr;
	
	returnFsr = 0;
    9216:	1c3b      	adds	r3, r7, #0
    9218:	330a      	adds	r3, #10
    921a:	2200      	movs	r2, #0
    921c:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    921e:	4b46      	ldr	r3, [pc, #280]	; (9338 <FsrMotorCalculated+0x128>)
    9220:	7d9a      	ldrb	r2, [r3, #22]
    9222:	4b46      	ldr	r3, [pc, #280]	; (933c <FsrMotorCalculated+0x12c>)
    9224:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9226:	4b44      	ldr	r3, [pc, #272]	; (9338 <FsrMotorCalculated+0x128>)
    9228:	789a      	ldrb	r2, [r3, #2]
    922a:	4b45      	ldr	r3, [pc, #276]	; (9340 <FsrMotorCalculated+0x130>)
    922c:	701a      	strb	r2, [r3, #0]
	
	if ((fm<1)||(fm>9))
    922e:	4b43      	ldr	r3, [pc, #268]	; (933c <FsrMotorCalculated+0x12c>)
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	2b00      	cmp	r3, #0
    9234:	d003      	beq.n	923e <FsrMotorCalculated+0x2e>
    9236:	4b41      	ldr	r3, [pc, #260]	; (933c <FsrMotorCalculated+0x12c>)
    9238:	781b      	ldrb	r3, [r3, #0]
    923a:	2b09      	cmp	r3, #9
    923c:	d902      	bls.n	9244 <FsrMotorCalculated+0x34>
	{
		fm = 5;
    923e:	4b3f      	ldr	r3, [pc, #252]	; (933c <FsrMotorCalculated+0x12c>)
    9240:	2205      	movs	r2, #5
    9242:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    9244:	4b3e      	ldr	r3, [pc, #248]	; (9340 <FsrMotorCalculated+0x130>)
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	2b00      	cmp	r3, #0
    924a:	d003      	beq.n	9254 <FsrMotorCalculated+0x44>
    924c:	4b3c      	ldr	r3, [pc, #240]	; (9340 <FsrMotorCalculated+0x130>)
    924e:	781b      	ldrb	r3, [r3, #0]
    9250:	2b09      	cmp	r3, #9
    9252:	d902      	bls.n	925a <FsrMotorCalculated+0x4a>
	{
		gain = 5;
    9254:	4b3a      	ldr	r3, [pc, #232]	; (9340 <FsrMotorCalculated+0x130>)
    9256:	2205      	movs	r2, #5
    9258:	701a      	strb	r2, [r3, #0]
	}
	instantGain = MotorGetAcc(TRUE);
    925a:	2001      	movs	r0, #1
    925c:	4b39      	ldr	r3, [pc, #228]	; (9344 <FsrMotorCalculated+0x134>)
    925e:	4798      	blx	r3
    9260:	1c03      	adds	r3, r0, #0
    9262:	b29a      	uxth	r2, r3
    9264:	4b38      	ldr	r3, [pc, #224]	; (9348 <FsrMotorCalculated+0x138>)
    9266:	801a      	strh	r2, [r3, #0]
	if (instantGain > 0)
    9268:	4b37      	ldr	r3, [pc, #220]	; (9348 <FsrMotorCalculated+0x138>)
    926a:	881b      	ldrh	r3, [r3, #0]
    926c:	2b00      	cmp	r3, #0
    926e:	d102      	bne.n	9276 <FsrMotorCalculated+0x66>
		//		instantGain = -1 * instantGain;
		//		instantGain =1;
	}
	else
	{
		instantGain =0;  //1;
    9270:	4b35      	ldr	r3, [pc, #212]	; (9348 <FsrMotorCalculated+0x138>)
    9272:	2200      	movs	r2, #0
    9274:	801a      	strh	r2, [r3, #0]
	//	{
	//		instantGain = -1 * instantGain;
	//-----------------------
	// g' = g * G/5 and limite to .5g
	// *multiply by 10 to get to whole numbers
	temp2 = instantGain * (gain*10)/5;
    9276:	4b34      	ldr	r3, [pc, #208]	; (9348 <FsrMotorCalculated+0x138>)
    9278:	881b      	ldrh	r3, [r3, #0]
    927a:	1c19      	adds	r1, r3, #0
    927c:	4b30      	ldr	r3, [pc, #192]	; (9340 <FsrMotorCalculated+0x130>)
    927e:	781b      	ldrb	r3, [r3, #0]
    9280:	1c1a      	adds	r2, r3, #0
    9282:	1c13      	adds	r3, r2, #0
    9284:	009b      	lsls	r3, r3, #2
    9286:	189b      	adds	r3, r3, r2
    9288:	005b      	lsls	r3, r3, #1
    928a:	1c1a      	adds	r2, r3, #0
    928c:	434a      	muls	r2, r1
    928e:	4b2f      	ldr	r3, [pc, #188]	; (934c <FsrMotorCalculated+0x13c>)
    9290:	1c10      	adds	r0, r2, #0
    9292:	2105      	movs	r1, #5
    9294:	4798      	blx	r3
    9296:	1c03      	adds	r3, r0, #0
    9298:	60fb      	str	r3, [r7, #12]
	temp2 = temp2/10;
    929a:	68fa      	ldr	r2, [r7, #12]
    929c:	4b2c      	ldr	r3, [pc, #176]	; (9350 <FsrMotorCalculated+0x140>)
    929e:	1c10      	adds	r0, r2, #0
    92a0:	210a      	movs	r1, #10
    92a2:	4798      	blx	r3
    92a4:	1c03      	adds	r3, r0, #0
    92a6:	60fb      	str	r3, [r7, #12]
	if (temp2 > ACC_HALF_G)
    92a8:	68fa      	ldr	r2, [r7, #12]
    92aa:	2380      	movs	r3, #128	; 0x80
    92ac:	019b      	lsls	r3, r3, #6
    92ae:	429a      	cmp	r2, r3
    92b0:	d902      	bls.n	92b8 <FsrMotorCalculated+0xa8>
	{
		temp2 = ACC_HALF_G;
    92b2:	2380      	movs	r3, #128	; 0x80
    92b4:	019b      	lsls	r3, r3, #6
    92b6:	60fb      	str	r3, [r7, #12]
	}
	ltemp = temp2;
    92b8:	4b26      	ldr	r3, [pc, #152]	; (9354 <FsrMotorCalculated+0x144>)
    92ba:	68fa      	ldr	r2, [r7, #12]
    92bc:	601a      	str	r2, [r3, #0]
	ltemp = ltemp * 100;
    92be:	4b25      	ldr	r3, [pc, #148]	; (9354 <FsrMotorCalculated+0x144>)
    92c0:	681b      	ldr	r3, [r3, #0]
    92c2:	2264      	movs	r2, #100	; 0x64
    92c4:	435a      	muls	r2, r3
    92c6:	4b23      	ldr	r3, [pc, #140]	; (9354 <FsrMotorCalculated+0x144>)
    92c8:	601a      	str	r2, [r3, #0]
	ltemp = ltemp/ACC_ONE_G;
    92ca:	4b22      	ldr	r3, [pc, #136]	; (9354 <FsrMotorCalculated+0x144>)
    92cc:	681b      	ldr	r3, [r3, #0]
    92ce:	0b9a      	lsrs	r2, r3, #14
    92d0:	4b20      	ldr	r3, [pc, #128]	; (9354 <FsrMotorCalculated+0x144>)
    92d2:	601a      	str	r2, [r3, #0]
	temp2 = ltemp;
    92d4:	4b1f      	ldr	r3, [pc, #124]	; (9354 <FsrMotorCalculated+0x144>)
    92d6:	681b      	ldr	r3, [r3, #0]
    92d8:	60fb      	str	r3, [r7, #12]
	//----------------------------
	ltemp1 = temp2;
    92da:	68fb      	ldr	r3, [r7, #12]
    92dc:	607b      	str	r3, [r7, #4]
	gPrime = ltemp1;
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	b29a      	uxth	r2, r3
    92e2:	4b1d      	ldr	r3, [pc, #116]	; (9358 <FsrMotorCalculated+0x148>)
    92e4:	801a      	strh	r2, [r3, #0]
//	ltemp1 = (ltemp1 * fm * 2 *3686);   
	ltemp1 = (ltemp1 * fm * 2 *2600)+400;   	
    92e6:	4b15      	ldr	r3, [pc, #84]	; (933c <FsrMotorCalculated+0x12c>)
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	687a      	ldr	r2, [r7, #4]
    92ec:	4353      	muls	r3, r2
    92ee:	4a1b      	ldr	r2, [pc, #108]	; (935c <FsrMotorCalculated+0x14c>)
    92f0:	4353      	muls	r3, r2
    92f2:	3391      	adds	r3, #145	; 0x91
    92f4:	33ff      	adds	r3, #255	; 0xff
    92f6:	607b      	str	r3, [r7, #4]
	ltemp1 = ltemp1/9;  
    92f8:	687a      	ldr	r2, [r7, #4]
    92fa:	4b15      	ldr	r3, [pc, #84]	; (9350 <FsrMotorCalculated+0x140>)
    92fc:	1c10      	adds	r0, r2, #0
    92fe:	2109      	movs	r1, #9
    9300:	4798      	blx	r3
    9302:	1c03      	adds	r3, r0, #0
    9304:	607b      	str	r3, [r7, #4]
	ltemp1 = ltemp1/100;
    9306:	687a      	ldr	r2, [r7, #4]
    9308:	4b11      	ldr	r3, [pc, #68]	; (9350 <FsrMotorCalculated+0x140>)
    930a:	1c10      	adds	r0, r2, #0
    930c:	2164      	movs	r1, #100	; 0x64
    930e:	4798      	blx	r3
    9310:	1c03      	adds	r3, r0, #0
    9312:	607b      	str	r3, [r7, #4]
	
	returnFsr = ltemp1;
    9314:	1c3b      	adds	r3, r7, #0
    9316:	330a      	adds	r3, #10
    9318:	687a      	ldr	r2, [r7, #4]
    931a:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    931c:	1c3a      	adds	r2, r7, #0
    931e:	320a      	adds	r2, #10
    9320:	1c3b      	adds	r3, r7, #0
    9322:	330a      	adds	r3, #10
    9324:	881b      	ldrh	r3, [r3, #0]
    9326:	18db      	adds	r3, r3, r3
    9328:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    932a:	1c3b      	adds	r3, r7, #0
    932c:	330a      	adds	r3, #10
    932e:	881b      	ldrh	r3, [r3, #0]
} 
    9330:	1c18      	adds	r0, r3, #0
    9332:	46bd      	mov	sp, r7
    9334:	b004      	add	sp, #16
    9336:	bd80      	pop	{r7, pc}
    9338:	20002fb8 	.word	0x20002fb8
    933c:	20002eb4 	.word	0x20002eb4
    9340:	20002ed2 	.word	0x20002ed2
    9344:	000090a1 	.word	0x000090a1
    9348:	20002ef6 	.word	0x20002ef6
    934c:	000157b5 	.word	0x000157b5
    9350:	00015719 	.word	0x00015719
    9354:	20002ea0 	.word	0x20002ea0
    9358:	20002ee6 	.word	0x20002ee6
    935c:	00001450 	.word	0x00001450

00009360 <CurrentMotorCalculatedForG>:
 
 
uint16_t CurrentMotorCalculatedForG(uint16_t gin)
{
    9360:	b580      	push	{r7, lr}
    9362:	b088      	sub	sp, #32
    9364:	af00      	add	r7, sp, #0
    9366:	1c02      	adds	r2, r0, #0
    9368:	1dbb      	adds	r3, r7, #6
    936a:	801a      	strh	r2, [r3, #0]
	
	uint32_t ltemp1,ltemp,temp2;
	uint8_t fm; 
	uint16_t returnCurrent,iGain;
	
	returnCurrent = 0;
    936c:	1c3b      	adds	r3, r7, #0
    936e:	3318      	adds	r3, #24
    9370:	2200      	movs	r2, #0
    9372:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    9374:	1c3b      	adds	r3, r7, #0
    9376:	331b      	adds	r3, #27
    9378:	2207      	movs	r2, #7
    937a:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    937c:	1c3b      	adds	r3, r7, #0
    937e:	331b      	adds	r3, #27
    9380:	4a40      	ldr	r2, [pc, #256]	; (9484 <CurrentMotorCalculatedForG+0x124>)
    9382:	7d92      	ldrb	r2, [r2, #22]
    9384:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9386:	4b3f      	ldr	r3, [pc, #252]	; (9484 <CurrentMotorCalculatedForG+0x124>)
    9388:	789a      	ldrb	r2, [r3, #2]
    938a:	4b3f      	ldr	r3, [pc, #252]	; (9488 <CurrentMotorCalculatedForG+0x128>)
    938c:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    938e:	1c3b      	adds	r3, r7, #0
    9390:	331b      	adds	r3, #27
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	2b00      	cmp	r3, #0
    9396:	d004      	beq.n	93a2 <CurrentMotorCalculatedForG+0x42>
    9398:	1c3b      	adds	r3, r7, #0
    939a:	331b      	adds	r3, #27
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	2b09      	cmp	r3, #9
    93a0:	d903      	bls.n	93aa <CurrentMotorCalculatedForG+0x4a>
	{
		fm = 5;
    93a2:	1c3b      	adds	r3, r7, #0
    93a4:	331b      	adds	r3, #27
    93a6:	2205      	movs	r2, #5
    93a8:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    93aa:	4b37      	ldr	r3, [pc, #220]	; (9488 <CurrentMotorCalculatedForG+0x128>)
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	2b00      	cmp	r3, #0
    93b0:	d003      	beq.n	93ba <CurrentMotorCalculatedForG+0x5a>
    93b2:	4b35      	ldr	r3, [pc, #212]	; (9488 <CurrentMotorCalculatedForG+0x128>)
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2b09      	cmp	r3, #9
    93b8:	d902      	bls.n	93c0 <CurrentMotorCalculatedForG+0x60>
	{
		gain = 5;
    93ba:	4b33      	ldr	r3, [pc, #204]	; (9488 <CurrentMotorCalculatedForG+0x128>)
    93bc:	2205      	movs	r2, #5
    93be:	701a      	strb	r2, [r3, #0]
	}
			 
	iGain = gin;
    93c0:	1c3b      	adds	r3, r7, #0
    93c2:	3316      	adds	r3, #22
    93c4:	1dba      	adds	r2, r7, #6
    93c6:	8812      	ldrh	r2, [r2, #0]
    93c8:	801a      	strh	r2, [r3, #0]
	if (iGain != 0)
    93ca:	1c3b      	adds	r3, r7, #0
    93cc:	3316      	adds	r3, #22
    93ce:	881b      	ldrh	r3, [r3, #0]
    93d0:	2b00      	cmp	r3, #0
    93d2:	d04f      	beq.n	9474 <CurrentMotorCalculatedForG+0x114>
	{
		//-----------------------
		// g' = g * G/5 and limite to .5g 
		// *multiply by 10 to get to whole numbers 
		temp2 = iGain * (gain*10)/5;
    93d4:	1c3b      	adds	r3, r7, #0
    93d6:	3316      	adds	r3, #22
    93d8:	8819      	ldrh	r1, [r3, #0]
    93da:	4b2b      	ldr	r3, [pc, #172]	; (9488 <CurrentMotorCalculatedForG+0x128>)
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	1c1a      	adds	r2, r3, #0
    93e0:	1c13      	adds	r3, r2, #0
    93e2:	009b      	lsls	r3, r3, #2
    93e4:	189b      	adds	r3, r3, r2
    93e6:	005b      	lsls	r3, r3, #1
    93e8:	1c1a      	adds	r2, r3, #0
    93ea:	434a      	muls	r2, r1
    93ec:	4b27      	ldr	r3, [pc, #156]	; (948c <CurrentMotorCalculatedForG+0x12c>)
    93ee:	1c10      	adds	r0, r2, #0
    93f0:	2105      	movs	r1, #5
    93f2:	4798      	blx	r3
    93f4:	1c03      	adds	r3, r0, #0
    93f6:	61fb      	str	r3, [r7, #28]
		temp2 = temp2/10; 
    93f8:	69fa      	ldr	r2, [r7, #28]
    93fa:	4b25      	ldr	r3, [pc, #148]	; (9490 <CurrentMotorCalculatedForG+0x130>)
    93fc:	1c10      	adds	r0, r2, #0
    93fe:	210a      	movs	r1, #10
    9400:	4798      	blx	r3
    9402:	1c03      	adds	r3, r0, #0
    9404:	61fb      	str	r3, [r7, #28]
		if (temp2 > ACC_HALF_G)
    9406:	69fa      	ldr	r2, [r7, #28]
    9408:	2380      	movs	r3, #128	; 0x80
    940a:	019b      	lsls	r3, r3, #6
    940c:	429a      	cmp	r2, r3
    940e:	d902      	bls.n	9416 <CurrentMotorCalculatedForG+0xb6>
		{
			temp2 = ACC_HALF_G; 
    9410:	2380      	movs	r3, #128	; 0x80
    9412:	019b      	lsls	r3, r3, #6
    9414:	61fb      	str	r3, [r7, #28]
		}
		ltemp = temp2;
    9416:	69fb      	ldr	r3, [r7, #28]
    9418:	613b      	str	r3, [r7, #16]
		ltemp = ltemp * 100; 
    941a:	693b      	ldr	r3, [r7, #16]
    941c:	2264      	movs	r2, #100	; 0x64
    941e:	4353      	muls	r3, r2
    9420:	613b      	str	r3, [r7, #16]
		ltemp = ltemp/ACC_ONE_G;
    9422:	693b      	ldr	r3, [r7, #16]
    9424:	0b9b      	lsrs	r3, r3, #14
    9426:	613b      	str	r3, [r7, #16]
		temp2 = ltemp; 		
    9428:	693b      	ldr	r3, [r7, #16]
    942a:	61fb      	str	r3, [r7, #28]
		//----------------------------
		ltemp1 = temp2;
    942c:	69fb      	ldr	r3, [r7, #28]
    942e:	60fb      	str	r3, [r7, #12]
		ltemp1 = (ltemp1 * fm * 70*RUSSELLAMPCHANGE);  //V00_82 from 100 to 70 V00_62  was *100 now *150
    9430:	1c3b      	adds	r3, r7, #0
    9432:	331b      	adds	r3, #27
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	68fa      	ldr	r2, [r7, #12]
    9438:	4353      	muls	r3, r2
    943a:	2246      	movs	r2, #70	; 0x46
    943c:	4353      	muls	r3, r2
    943e:	60fb      	str	r3, [r7, #12]
		ltemp1 = 19000 + ltemp1;  //V00_78
    9440:	68fb      	ldr	r3, [r7, #12]
    9442:	4a14      	ldr	r2, [pc, #80]	; (9494 <CurrentMotorCalculatedForG+0x134>)
    9444:	189b      	adds	r3, r3, r2
    9446:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1 * 205; 
    9448:	68fb      	ldr	r3, [r7, #12]
    944a:	22cd      	movs	r2, #205	; 0xcd
    944c:	4353      	muls	r3, r2
    944e:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    9450:	68fa      	ldr	r2, [r7, #12]
    9452:	4b0f      	ldr	r3, [pc, #60]	; (9490 <CurrentMotorCalculatedForG+0x130>)
    9454:	1c10      	adds	r0, r2, #0
    9456:	2164      	movs	r1, #100	; 0x64
    9458:	4798      	blx	r3
    945a:	1c03      	adds	r3, r0, #0
    945c:	60fb      	str	r3, [r7, #12]
		ltemp1 = ltemp1/100;
    945e:	68fa      	ldr	r2, [r7, #12]
    9460:	4b0b      	ldr	r3, [pc, #44]	; (9490 <CurrentMotorCalculatedForG+0x130>)
    9462:	1c10      	adds	r0, r2, #0
    9464:	2164      	movs	r1, #100	; 0x64
    9466:	4798      	blx	r3
    9468:	1c03      	adds	r3, r0, #0
    946a:	60fb      	str	r3, [r7, #12]
		returnCurrent = ltemp1; 
    946c:	1c3b      	adds	r3, r7, #0
    946e:	3318      	adds	r3, #24
    9470:	68fa      	ldr	r2, [r7, #12]
    9472:	801a      	strh	r2, [r3, #0]
	}
	return returnCurrent;
    9474:	1c3b      	adds	r3, r7, #0
    9476:	3318      	adds	r3, #24
    9478:	881b      	ldrh	r3, [r3, #0]
} 
    947a:	1c18      	adds	r0, r3, #0
    947c:	46bd      	mov	sp, r7
    947e:	b008      	add	sp, #32
    9480:	bd80      	pop	{r7, pc}
    9482:	46c0      	nop			; (mov r8, r8)
    9484:	20002fb8 	.word	0x20002fb8
    9488:	20002ed2 	.word	0x20002ed2
    948c:	000157b5 	.word	0x000157b5
    9490:	00015719 	.word	0x00015719
    9494:	00004a38 	.word	0x00004a38

00009498 <CurrentMotorCalculatedStartup>:
//------------------------------------------------------------------------------
// This function
// Imotor=1.5+Fm*0.56 
//==============================================================================
uint16_t CurrentMotorCalculatedStartup(uint8_t forceMax)
{
    9498:	b580      	push	{r7, lr}
    949a:	b084      	sub	sp, #16
    949c:	af00      	add	r7, sp, #0
    949e:	1c02      	adds	r2, r0, #0
    94a0:	1dfb      	adds	r3, r7, #7
    94a2:	701a      	strb	r2, [r3, #0]
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    94a4:	1c3b      	adds	r3, r7, #0
    94a6:	330e      	adds	r3, #14
    94a8:	2200      	movs	r2, #0
    94aa:	801a      	strh	r2, [r3, #0]
//	fm = table0.Item.ForceMaxSet;
	fm = forceMax;
    94ac:	4b16      	ldr	r3, [pc, #88]	; (9508 <CurrentMotorCalculatedStartup+0x70>)
    94ae:	1dfa      	adds	r2, r7, #7
    94b0:	7812      	ldrb	r2, [r2, #0]
    94b2:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    94b4:	4b14      	ldr	r3, [pc, #80]	; (9508 <CurrentMotorCalculatedStartup+0x70>)
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	2b00      	cmp	r3, #0
    94ba:	d003      	beq.n	94c4 <CurrentMotorCalculatedStartup+0x2c>
    94bc:	4b12      	ldr	r3, [pc, #72]	; (9508 <CurrentMotorCalculatedStartup+0x70>)
    94be:	781b      	ldrb	r3, [r3, #0]
    94c0:	2b09      	cmp	r3, #9
    94c2:	d902      	bls.n	94ca <CurrentMotorCalculatedStartup+0x32>
	{
		fm = 5;
    94c4:	4b10      	ldr	r3, [pc, #64]	; (9508 <CurrentMotorCalculatedStartup+0x70>)
    94c6:	2205      	movs	r2, #5
    94c8:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1500 + (fm * 560*RUSSELLAMPCHANGE);  //V00_62  was *375 now *560 //V00_78
    94ca:	4b0f      	ldr	r3, [pc, #60]	; (9508 <CurrentMotorCalculatedStartup+0x70>)
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	228c      	movs	r2, #140	; 0x8c
    94d0:	0092      	lsls	r2, r2, #2
    94d2:	4353      	muls	r3, r2
    94d4:	4a0d      	ldr	r2, [pc, #52]	; (950c <CurrentMotorCalculatedStartup+0x74>)
    94d6:	189b      	adds	r3, r3, r2
    94d8:	60bb      	str	r3, [r7, #8]
	temp1 = temp1 * 205;
    94da:	68bb      	ldr	r3, [r7, #8]
    94dc:	22cd      	movs	r2, #205	; 0xcd
    94de:	4353      	muls	r3, r2
    94e0:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/1000;
    94e2:	68ba      	ldr	r2, [r7, #8]
    94e4:	4b0a      	ldr	r3, [pc, #40]	; (9510 <CurrentMotorCalculatedStartup+0x78>)
    94e6:	1c10      	adds	r0, r2, #0
    94e8:	22fa      	movs	r2, #250	; 0xfa
    94ea:	0091      	lsls	r1, r2, #2
    94ec:	4798      	blx	r3
    94ee:	1c03      	adds	r3, r0, #0
    94f0:	60bb      	str	r3, [r7, #8]
	returnCurrent = temp1;
    94f2:	1c3b      	adds	r3, r7, #0
    94f4:	330e      	adds	r3, #14
    94f6:	68ba      	ldr	r2, [r7, #8]
    94f8:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    94fa:	1c3b      	adds	r3, r7, #0
    94fc:	330e      	adds	r3, #14
    94fe:	881b      	ldrh	r3, [r3, #0]
} 
    9500:	1c18      	adds	r0, r3, #0
    9502:	46bd      	mov	sp, r7
    9504:	b004      	add	sp, #16
    9506:	bd80      	pop	{r7, pc}
    9508:	20002eb4 	.word	0x20002eb4
    950c:	000005dc 	.word	0x000005dc
    9510:	00015719 	.word	0x00015719

00009514 <FsrMotorCalculatedStartup>:
//------------------------------------------------------------------------------
// This function
// Imotor=1.5+Fm*0.56
//==============================================================================
uint16_t FsrMotorCalculatedStartup(uint8_t forceMax)
{
    9514:	b580      	push	{r7, lr}
    9516:	b084      	sub	sp, #16
    9518:	af00      	add	r7, sp, #0
    951a:	1c02      	adds	r2, r0, #0
    951c:	1dfb      	adds	r3, r7, #7
    951e:	701a      	strb	r2, [r3, #0]
	uint32_t temp1;
	uint16_t returnFSR;
	
	returnFSR = 0;
    9520:	1c3b      	adds	r3, r7, #0
    9522:	330e      	adds	r3, #14
    9524:	2200      	movs	r2, #0
    9526:	801a      	strh	r2, [r3, #0]
	//	fm = table0.Item.ForceMaxSet;
	fm = forceMax;
    9528:	4b19      	ldr	r3, [pc, #100]	; (9590 <FsrMotorCalculatedStartup+0x7c>)
    952a:	1dfa      	adds	r2, r7, #7
    952c:	7812      	ldrb	r2, [r2, #0]
    952e:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    9530:	4b17      	ldr	r3, [pc, #92]	; (9590 <FsrMotorCalculatedStartup+0x7c>)
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	2b00      	cmp	r3, #0
    9536:	d003      	beq.n	9540 <FsrMotorCalculatedStartup+0x2c>
    9538:	4b15      	ldr	r3, [pc, #84]	; (9590 <FsrMotorCalculatedStartup+0x7c>)
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	2b09      	cmp	r3, #9
    953e:	d902      	bls.n	9546 <FsrMotorCalculatedStartup+0x32>
	{
		fm = 5;
    9540:	4b13      	ldr	r3, [pc, #76]	; (9590 <FsrMotorCalculatedStartup+0x7c>)
    9542:	2205      	movs	r2, #5
    9544:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * 25* 3686);  //V00_62  was *375 now *560 //V00_78
    9546:	4b12      	ldr	r3, [pc, #72]	; (9590 <FsrMotorCalculatedStartup+0x7c>)
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	4a12      	ldr	r2, [pc, #72]	; (9594 <FsrMotorCalculatedStartup+0x80>)
    954c:	4353      	muls	r3, r2
    954e:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/9;
    9550:	68ba      	ldr	r2, [r7, #8]
    9552:	4b11      	ldr	r3, [pc, #68]	; (9598 <FsrMotorCalculatedStartup+0x84>)
    9554:	1c10      	adds	r0, r2, #0
    9556:	2109      	movs	r1, #9
    9558:	4798      	blx	r3
    955a:	1c03      	adds	r3, r0, #0
    955c:	60bb      	str	r3, [r7, #8]
	temp1 = temp1/100;
    955e:	68ba      	ldr	r2, [r7, #8]
    9560:	4b0d      	ldr	r3, [pc, #52]	; (9598 <FsrMotorCalculatedStartup+0x84>)
    9562:	1c10      	adds	r0, r2, #0
    9564:	2164      	movs	r1, #100	; 0x64
    9566:	4798      	blx	r3
    9568:	1c03      	adds	r3, r0, #0
    956a:	60bb      	str	r3, [r7, #8]
	returnFSR = temp1;
    956c:	1c3b      	adds	r3, r7, #0
    956e:	330e      	adds	r3, #14
    9570:	68ba      	ldr	r2, [r7, #8]
    9572:	801a      	strh	r2, [r3, #0]
//	returnFSR = returnFSR/4; 
	returnFSR = returnFSR *2; 
    9574:	1c3a      	adds	r2, r7, #0
    9576:	320e      	adds	r2, #14
    9578:	1c3b      	adds	r3, r7, #0
    957a:	330e      	adds	r3, #14
    957c:	881b      	ldrh	r3, [r3, #0]
    957e:	18db      	adds	r3, r3, r3
    9580:	8013      	strh	r3, [r2, #0]
	return returnFSR;
    9582:	1c3b      	adds	r3, r7, #0
    9584:	330e      	adds	r3, #14
    9586:	881b      	ldrh	r3, [r3, #0]
} 
    9588:	1c18      	adds	r0, r3, #0
    958a:	46bd      	mov	sp, r7
    958c:	b004      	add	sp, #16
    958e:	bd80      	pop	{r7, pc}
    9590:	20002eb4 	.word	0x20002eb4
    9594:	000167f6 	.word	0x000167f6
    9598:	00015719 	.word	0x00015719

0000959c <CurrentMotorCalculatedBreakaway>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedBreakaway(void)
{
    959c:	b580      	push	{r7, lr}
    959e:	b082      	sub	sp, #8
    95a0:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    95a2:	1dbb      	adds	r3, r7, #6
    95a4:	2200      	movs	r2, #0
    95a6:	801a      	strh	r2, [r3, #0]
	fm = FM;  
    95a8:	4b1e      	ldr	r3, [pc, #120]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95aa:	2207      	movs	r2, #7
    95ac:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    95ae:	4b1e      	ldr	r3, [pc, #120]	; (9628 <CurrentMotorCalculatedBreakaway+0x8c>)
    95b0:	7d9a      	ldrb	r2, [r3, #22]
    95b2:	4b1c      	ldr	r3, [pc, #112]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95b4:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    95b6:	4b1c      	ldr	r3, [pc, #112]	; (9628 <CurrentMotorCalculatedBreakaway+0x8c>)
    95b8:	789a      	ldrb	r2, [r3, #2]
    95ba:	4b1c      	ldr	r3, [pc, #112]	; (962c <CurrentMotorCalculatedBreakaway+0x90>)
    95bc:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    95be:	4b19      	ldr	r3, [pc, #100]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95c0:	781b      	ldrb	r3, [r3, #0]
    95c2:	2b00      	cmp	r3, #0
    95c4:	d003      	beq.n	95ce <CurrentMotorCalculatedBreakaway+0x32>
    95c6:	4b17      	ldr	r3, [pc, #92]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95c8:	781b      	ldrb	r3, [r3, #0]
    95ca:	2b09      	cmp	r3, #9
    95cc:	d902      	bls.n	95d4 <CurrentMotorCalculatedBreakaway+0x38>
	{
		fm = 5;
    95ce:	4b15      	ldr	r3, [pc, #84]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95d0:	2205      	movs	r2, #5
    95d2:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    95d4:	4b15      	ldr	r3, [pc, #84]	; (962c <CurrentMotorCalculatedBreakaway+0x90>)
    95d6:	781b      	ldrb	r3, [r3, #0]
    95d8:	2b00      	cmp	r3, #0
    95da:	d003      	beq.n	95e4 <CurrentMotorCalculatedBreakaway+0x48>
    95dc:	4b13      	ldr	r3, [pc, #76]	; (962c <CurrentMotorCalculatedBreakaway+0x90>)
    95de:	781b      	ldrb	r3, [r3, #0]
    95e0:	2b09      	cmp	r3, #9
    95e2:	d902      	bls.n	95ea <CurrentMotorCalculatedBreakaway+0x4e>
	{
		gain = 5;
    95e4:	4b11      	ldr	r3, [pc, #68]	; (962c <CurrentMotorCalculatedBreakaway+0x90>)
    95e6:	2205      	movs	r2, #5
    95e8:	701a      	strb	r2, [r3, #0]
	}
 	//----------------------------
	temp1 = 1900 + (fm * 375*RUSSELLAMPCHANGE);  //V00_62  was *375 now *560 //V00_78
    95ea:	4b0e      	ldr	r3, [pc, #56]	; (9624 <CurrentMotorCalculatedBreakaway+0x88>)
    95ec:	781b      	ldrb	r3, [r3, #0]
    95ee:	2278      	movs	r2, #120	; 0x78
    95f0:	32ff      	adds	r2, #255	; 0xff
    95f2:	4353      	muls	r3, r2
    95f4:	4a0e      	ldr	r2, [pc, #56]	; (9630 <CurrentMotorCalculatedBreakaway+0x94>)
    95f6:	189b      	adds	r3, r3, r2
    95f8:	603b      	str	r3, [r7, #0]
	temp1 = temp1 * 205;
    95fa:	683b      	ldr	r3, [r7, #0]
    95fc:	22cd      	movs	r2, #205	; 0xcd
    95fe:	4353      	muls	r3, r2
    9600:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    9602:	683a      	ldr	r2, [r7, #0]
    9604:	4b0b      	ldr	r3, [pc, #44]	; (9634 <CurrentMotorCalculatedBreakaway+0x98>)
    9606:	1c10      	adds	r0, r2, #0
    9608:	22fa      	movs	r2, #250	; 0xfa
    960a:	0091      	lsls	r1, r2, #2
    960c:	4798      	blx	r3
    960e:	1c03      	adds	r3, r0, #0
    9610:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    9612:	1dbb      	adds	r3, r7, #6
    9614:	683a      	ldr	r2, [r7, #0]
    9616:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    9618:	1dbb      	adds	r3, r7, #6
    961a:	881b      	ldrh	r3, [r3, #0]
} 
    961c:	1c18      	adds	r0, r3, #0
    961e:	46bd      	mov	sp, r7
    9620:	b002      	add	sp, #8
    9622:	bd80      	pop	{r7, pc}
    9624:	20002eb4 	.word	0x20002eb4
    9628:	20002fb8 	.word	0x20002fb8
    962c:	20002ed2 	.word	0x20002ed2
    9630:	0000076c 	.word	0x0000076c
    9634:	00015719 	.word	0x00015719

00009638 <FsrMotorCalculatedBreakaway>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculatedBreakaway(void)
{
    9638:	b580      	push	{r7, lr}
    963a:	b082      	sub	sp, #8
    963c:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnFsr;
	
	returnFsr = 0;
    963e:	1dbb      	adds	r3, r7, #6
    9640:	2200      	movs	r2, #0
    9642:	801a      	strh	r2, [r3, #0]
	fm = FM;
    9644:	4b20      	ldr	r3, [pc, #128]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    9646:	2207      	movs	r2, #7
    9648:	701a      	strb	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    964a:	4b20      	ldr	r3, [pc, #128]	; (96cc <FsrMotorCalculatedBreakaway+0x94>)
    964c:	7d9a      	ldrb	r2, [r3, #22]
    964e:	4b1e      	ldr	r3, [pc, #120]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    9650:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9652:	4b1e      	ldr	r3, [pc, #120]	; (96cc <FsrMotorCalculatedBreakaway+0x94>)
    9654:	789a      	ldrb	r2, [r3, #2]
    9656:	4b1e      	ldr	r3, [pc, #120]	; (96d0 <FsrMotorCalculatedBreakaway+0x98>)
    9658:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    965a:	4b1b      	ldr	r3, [pc, #108]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2b00      	cmp	r3, #0
    9660:	d003      	beq.n	966a <FsrMotorCalculatedBreakaway+0x32>
    9662:	4b19      	ldr	r3, [pc, #100]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	2b09      	cmp	r3, #9
    9668:	d902      	bls.n	9670 <FsrMotorCalculatedBreakaway+0x38>
	{
		fm = 5;
    966a:	4b17      	ldr	r3, [pc, #92]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    966c:	2205      	movs	r2, #5
    966e:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    9670:	4b17      	ldr	r3, [pc, #92]	; (96d0 <FsrMotorCalculatedBreakaway+0x98>)
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	2b00      	cmp	r3, #0
    9676:	d003      	beq.n	9680 <FsrMotorCalculatedBreakaway+0x48>
    9678:	4b15      	ldr	r3, [pc, #84]	; (96d0 <FsrMotorCalculatedBreakaway+0x98>)
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	2b09      	cmp	r3, #9
    967e:	d902      	bls.n	9686 <FsrMotorCalculatedBreakaway+0x4e>
	{
		gain = 5;
    9680:	4b13      	ldr	r3, [pc, #76]	; (96d0 <FsrMotorCalculatedBreakaway+0x98>)
    9682:	2205      	movs	r2, #5
    9684:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * 5*3686);  
    9686:	4b10      	ldr	r3, [pc, #64]	; (96c8 <FsrMotorCalculatedBreakaway+0x90>)
    9688:	781b      	ldrb	r3, [r3, #0]
    968a:	4a12      	ldr	r2, [pc, #72]	; (96d4 <FsrMotorCalculatedBreakaway+0x9c>)
    968c:	4353      	muls	r3, r2
    968e:	603b      	str	r3, [r7, #0]
	temp1 = temp1/9;
    9690:	683a      	ldr	r2, [r7, #0]
    9692:	4b11      	ldr	r3, [pc, #68]	; (96d8 <FsrMotorCalculatedBreakaway+0xa0>)
    9694:	1c10      	adds	r0, r2, #0
    9696:	2109      	movs	r1, #9
    9698:	4798      	blx	r3
    969a:	1c03      	adds	r3, r0, #0
    969c:	603b      	str	r3, [r7, #0]
	temp1 = temp1/10;
    969e:	683a      	ldr	r2, [r7, #0]
    96a0:	4b0d      	ldr	r3, [pc, #52]	; (96d8 <FsrMotorCalculatedBreakaway+0xa0>)
    96a2:	1c10      	adds	r0, r2, #0
    96a4:	210a      	movs	r1, #10
    96a6:	4798      	blx	r3
    96a8:	1c03      	adds	r3, r0, #0
    96aa:	603b      	str	r3, [r7, #0]
	returnFsr = temp1;
    96ac:	1dbb      	adds	r3, r7, #6
    96ae:	683a      	ldr	r2, [r7, #0]
    96b0:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    96b2:	1dba      	adds	r2, r7, #6
    96b4:	1dbb      	adds	r3, r7, #6
    96b6:	881b      	ldrh	r3, [r3, #0]
    96b8:	18db      	adds	r3, r3, r3
    96ba:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    96bc:	1dbb      	adds	r3, r7, #6
    96be:	881b      	ldrh	r3, [r3, #0]
} 
    96c0:	1c18      	adds	r0, r3, #0
    96c2:	46bd      	mov	sp, r7
    96c4:	b002      	add	sp, #8
    96c6:	bd80      	pop	{r7, pc}
    96c8:	20002eb4 	.word	0x20002eb4
    96cc:	20002fb8 	.word	0x20002fb8
    96d0:	20002ed2 	.word	0x20002ed2
    96d4:	000047fe 	.word	0x000047fe
    96d8:	00015719 	.word	0x00015719

000096dc <CurrentMotorCalculatedManual>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
uint16_t CurrentMotorCalculatedManual(void)
{
    96dc:	b580      	push	{r7, lr}
    96de:	b082      	sub	sp, #8
    96e0:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnCurrent;
	
	returnCurrent = 0;
    96e2:	1dbb      	adds	r3, r7, #6
    96e4:	2200      	movs	r2, #0
    96e6:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;  
    96e8:	4b1f      	ldr	r3, [pc, #124]	; (9768 <CurrentMotorCalculatedManual+0x8c>)
    96ea:	7d9a      	ldrb	r2, [r3, #22]
    96ec:	4b1f      	ldr	r3, [pc, #124]	; (976c <CurrentMotorCalculatedManual+0x90>)
    96ee:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    96f0:	4b1d      	ldr	r3, [pc, #116]	; (9768 <CurrentMotorCalculatedManual+0x8c>)
    96f2:	789a      	ldrb	r2, [r3, #2]
    96f4:	4b1e      	ldr	r3, [pc, #120]	; (9770 <CurrentMotorCalculatedManual+0x94>)
    96f6:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    96f8:	4b1c      	ldr	r3, [pc, #112]	; (976c <CurrentMotorCalculatedManual+0x90>)
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	2b00      	cmp	r3, #0
    96fe:	d003      	beq.n	9708 <CurrentMotorCalculatedManual+0x2c>
    9700:	4b1a      	ldr	r3, [pc, #104]	; (976c <CurrentMotorCalculatedManual+0x90>)
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	2b09      	cmp	r3, #9
    9706:	d902      	bls.n	970e <CurrentMotorCalculatedManual+0x32>
	{
		fm = 5;
    9708:	4b18      	ldr	r3, [pc, #96]	; (976c <CurrentMotorCalculatedManual+0x90>)
    970a:	2205      	movs	r2, #5
    970c:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    970e:	4b18      	ldr	r3, [pc, #96]	; (9770 <CurrentMotorCalculatedManual+0x94>)
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	2b00      	cmp	r3, #0
    9714:	d003      	beq.n	971e <CurrentMotorCalculatedManual+0x42>
    9716:	4b16      	ldr	r3, [pc, #88]	; (9770 <CurrentMotorCalculatedManual+0x94>)
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	2b09      	cmp	r3, #9
    971c:	d902      	bls.n	9724 <CurrentMotorCalculatedManual+0x48>
	{
		gain = 5;
    971e:	4b14      	ldr	r3, [pc, #80]	; (9770 <CurrentMotorCalculatedManual+0x94>)
    9720:	2205      	movs	r2, #5
    9722:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = 1900 + (fm * gain * 56*RUSSELLAMPCHANGE); //V00_62  was *56 now *84 //V00_78
    9724:	4b11      	ldr	r3, [pc, #68]	; (976c <CurrentMotorCalculatedManual+0x90>)
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	4a11      	ldr	r2, [pc, #68]	; (9770 <CurrentMotorCalculatedManual+0x94>)
    972a:	7812      	ldrb	r2, [r2, #0]
    972c:	435a      	muls	r2, r3
    972e:	1c13      	adds	r3, r2, #0
    9730:	00db      	lsls	r3, r3, #3
    9732:	1a9b      	subs	r3, r3, r2
    9734:	00db      	lsls	r3, r3, #3
    9736:	4a0f      	ldr	r2, [pc, #60]	; (9774 <CurrentMotorCalculatedManual+0x98>)
    9738:	189b      	adds	r3, r3, r2
    973a:	603b      	str	r3, [r7, #0]
	//---------------------
	// to make it 75% divide now by 100
	//---------------------
	temp1 = temp1 * 205;
    973c:	683b      	ldr	r3, [r7, #0]
    973e:	22cd      	movs	r2, #205	; 0xcd
    9740:	4353      	muls	r3, r2
    9742:	603b      	str	r3, [r7, #0]
	temp1 = temp1/1000;
    9744:	683a      	ldr	r2, [r7, #0]
    9746:	4b0c      	ldr	r3, [pc, #48]	; (9778 <CurrentMotorCalculatedManual+0x9c>)
    9748:	1c10      	adds	r0, r2, #0
    974a:	22fa      	movs	r2, #250	; 0xfa
    974c:	0091      	lsls	r1, r2, #2
    974e:	4798      	blx	r3
    9750:	1c03      	adds	r3, r0, #0
    9752:	603b      	str	r3, [r7, #0]
	returnCurrent = temp1;
    9754:	1dbb      	adds	r3, r7, #6
    9756:	683a      	ldr	r2, [r7, #0]
    9758:	801a      	strh	r2, [r3, #0]
	return returnCurrent;
    975a:	1dbb      	adds	r3, r7, #6
    975c:	881b      	ldrh	r3, [r3, #0]
} 
    975e:	1c18      	adds	r0, r3, #0
    9760:	46bd      	mov	sp, r7
    9762:	b002      	add	sp, #8
    9764:	bd80      	pop	{r7, pc}
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	20002fb8 	.word	0x20002fb8
    976c:	20002eb4 	.word	0x20002eb4
    9770:	20002ed2 	.word	0x20002ed2
    9774:	0000076c 	.word	0x0000076c
    9778:	00015719 	.word	0x00015719

0000977c <FsrMotorCalculatedManual>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
uint16_t FsrMotorCalculatedManual(void)
{
    977c:	b580      	push	{r7, lr}
    977e:	b082      	sub	sp, #8
    9780:	af00      	add	r7, sp, #0
	uint32_t temp1;
	uint16_t returnFsr;
	
	returnFsr = 0;
    9782:	1dbb      	adds	r3, r7, #6
    9784:	2200      	movs	r2, #0
    9786:	801a      	strh	r2, [r3, #0]
	fm = table0.Item.ForceMaxSet;
    9788:	4b20      	ldr	r3, [pc, #128]	; (980c <FsrMotorCalculatedManual+0x90>)
    978a:	7d9a      	ldrb	r2, [r3, #22]
    978c:	4b20      	ldr	r3, [pc, #128]	; (9810 <FsrMotorCalculatedManual+0x94>)
    978e:	701a      	strb	r2, [r3, #0]
	gain = table0.Item.MaxForce;
    9790:	4b1e      	ldr	r3, [pc, #120]	; (980c <FsrMotorCalculatedManual+0x90>)
    9792:	789a      	ldrb	r2, [r3, #2]
    9794:	4b1f      	ldr	r3, [pc, #124]	; (9814 <FsrMotorCalculatedManual+0x98>)
    9796:	701a      	strb	r2, [r3, #0]
	if ((fm<1)||(fm>9))
    9798:	4b1d      	ldr	r3, [pc, #116]	; (9810 <FsrMotorCalculatedManual+0x94>)
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	2b00      	cmp	r3, #0
    979e:	d003      	beq.n	97a8 <FsrMotorCalculatedManual+0x2c>
    97a0:	4b1b      	ldr	r3, [pc, #108]	; (9810 <FsrMotorCalculatedManual+0x94>)
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	2b09      	cmp	r3, #9
    97a6:	d902      	bls.n	97ae <FsrMotorCalculatedManual+0x32>
	{
		fm = 5;
    97a8:	4b19      	ldr	r3, [pc, #100]	; (9810 <FsrMotorCalculatedManual+0x94>)
    97aa:	2205      	movs	r2, #5
    97ac:	701a      	strb	r2, [r3, #0]
	}
	if ((gain<1)||(gain>9))
    97ae:	4b19      	ldr	r3, [pc, #100]	; (9814 <FsrMotorCalculatedManual+0x98>)
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	2b00      	cmp	r3, #0
    97b4:	d003      	beq.n	97be <FsrMotorCalculatedManual+0x42>
    97b6:	4b17      	ldr	r3, [pc, #92]	; (9814 <FsrMotorCalculatedManual+0x98>)
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	2b09      	cmp	r3, #9
    97bc:	d902      	bls.n	97c4 <FsrMotorCalculatedManual+0x48>
	{
		gain = 5;
    97be:	4b15      	ldr	r3, [pc, #84]	; (9814 <FsrMotorCalculatedManual+0x98>)
    97c0:	2205      	movs	r2, #5
    97c2:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------
	temp1 = (fm * gain * 3686); 
    97c4:	4b12      	ldr	r3, [pc, #72]	; (9810 <FsrMotorCalculatedManual+0x94>)
    97c6:	781b      	ldrb	r3, [r3, #0]
    97c8:	4a12      	ldr	r2, [pc, #72]	; (9814 <FsrMotorCalculatedManual+0x98>)
    97ca:	7812      	ldrb	r2, [r2, #0]
    97cc:	4353      	muls	r3, r2
    97ce:	4a12      	ldr	r2, [pc, #72]	; (9818 <FsrMotorCalculatedManual+0x9c>)
    97d0:	4353      	muls	r3, r2
    97d2:	603b      	str	r3, [r7, #0]
	//---------------------
	//  
	//---------------------
	temp1 = temp1/9;
    97d4:	683a      	ldr	r2, [r7, #0]
    97d6:	4b11      	ldr	r3, [pc, #68]	; (981c <FsrMotorCalculatedManual+0xa0>)
    97d8:	1c10      	adds	r0, r2, #0
    97da:	2109      	movs	r1, #9
    97dc:	4798      	blx	r3
    97de:	1c03      	adds	r3, r0, #0
    97e0:	603b      	str	r3, [r7, #0]
	temp1 = temp1/9;
    97e2:	683a      	ldr	r2, [r7, #0]
    97e4:	4b0d      	ldr	r3, [pc, #52]	; (981c <FsrMotorCalculatedManual+0xa0>)
    97e6:	1c10      	adds	r0, r2, #0
    97e8:	2109      	movs	r1, #9
    97ea:	4798      	blx	r3
    97ec:	1c03      	adds	r3, r0, #0
    97ee:	603b      	str	r3, [r7, #0]
	returnFsr = temp1;
    97f0:	1dbb      	adds	r3, r7, #6
    97f2:	683a      	ldr	r2, [r7, #0]
    97f4:	801a      	strh	r2, [r3, #0]
//	returnFsr = returnFsr/4; 
	returnFsr = returnFsr *2; 
    97f6:	1dba      	adds	r2, r7, #6
    97f8:	1dbb      	adds	r3, r7, #6
    97fa:	881b      	ldrh	r3, [r3, #0]
    97fc:	18db      	adds	r3, r3, r3
    97fe:	8013      	strh	r3, [r2, #0]
	return returnFsr;
    9800:	1dbb      	adds	r3, r7, #6
    9802:	881b      	ldrh	r3, [r3, #0]
} 
    9804:	1c18      	adds	r0, r3, #0
    9806:	46bd      	mov	sp, r7
    9808:	b002      	add	sp, #8
    980a:	bd80      	pop	{r7, pc}
    980c:	20002fb8 	.word	0x20002fb8
    9810:	20002eb4 	.word	0x20002eb4
    9814:	20002ed2 	.word	0x20002ed2
    9818:	00000e66 	.word	0x00000e66
    981c:	00015719 	.word	0x00015719

00009820 <ConfigureMotorFLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitChannel(void)
{
    9820:	b580      	push	{r7, lr}
    9822:	b084      	sub	sp, #16
    9824:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    9826:	1d3b      	adds	r3, r7, #4
    9828:	1c18      	adds	r0, r3, #0
    982a:	4b0b      	ldr	r3, [pc, #44]	; (9858 <ConfigureMotorFLimitChannel+0x38>)
    982c:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA21A_EIC_EXTINT5;
    982e:	1d3b      	adds	r3, r7, #4
    9830:	2215      	movs	r2, #21
    9832:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA21A_EIC_EXTINT5;
    9834:	1d3b      	adds	r3, r7, #4
    9836:	2200      	movs	r2, #0
    9838:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    983a:	1d3b      	adds	r3, r7, #4
    983c:	2200      	movs	r2, #0
    983e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    9840:	1d3b      	adds	r3, r7, #4
    9842:	2203      	movs	r2, #3
    9844:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(5, &config_extint_chan);
    9846:	1d3b      	adds	r3, r7, #4
    9848:	2005      	movs	r0, #5
    984a:	1c19      	adds	r1, r3, #0
    984c:	4b03      	ldr	r3, [pc, #12]	; (985c <ConfigureMotorFLimitChannel+0x3c>)
    984e:	4798      	blx	r3
}
    9850:	46bd      	mov	sp, r7
    9852:	b004      	add	sp, #16
    9854:	bd80      	pop	{r7, pc}
    9856:	46c0      	nop			; (mov r8, r8)
    9858:	000067f5 	.word	0x000067f5
    985c:	0000406d 	.word	0x0000406d

00009860 <ConfigureMotorFLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorFLimitCallbacks(void)
{
    9860:	b580      	push	{r7, lr}
    9862:	af00      	add	r7, sp, #0
	extint_register_callback(MotorFLimitCallback,5,EXTINT_CALLBACK_TYPE_DETECT);
    9864:	4b05      	ldr	r3, [pc, #20]	; (987c <ConfigureMotorFLimitCallbacks+0x1c>)
    9866:	1c18      	adds	r0, r3, #0
    9868:	2105      	movs	r1, #5
    986a:	2200      	movs	r2, #0
    986c:	4b04      	ldr	r3, [pc, #16]	; (9880 <ConfigureMotorFLimitCallbacks+0x20>)
    986e:	4798      	blx	r3
	extint_chan_enable_callback(5,EXTINT_CALLBACK_TYPE_DETECT);
    9870:	2005      	movs	r0, #5
    9872:	2100      	movs	r1, #0
    9874:	4b03      	ldr	r3, [pc, #12]	; (9884 <ConfigureMotorFLimitCallbacks+0x24>)
    9876:	4798      	blx	r3
}
    9878:	46bd      	mov	sp, r7
    987a:	bd80      	pop	{r7, pc}
    987c:	00009889 	.word	0x00009889
    9880:	00004239 	.word	0x00004239
    9884:	00004295 	.word	0x00004295

00009888 <MotorFLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorFLimitCallback(void)
{
    9888:	b580      	push	{r7, lr}
    988a:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORFLIMIT;
    988c:	4b0c      	ldr	r3, [pc, #48]	; (98c0 <MotorFLimitCallback+0x38>)
    988e:	681b      	ldr	r3, [r3, #0]
    9890:	2204      	movs	r2, #4
    9892:	431a      	orrs	r2, r3
    9894:	4b0a      	ldr	r3, [pc, #40]	; (98c0 <MotorFLimitCallback+0x38>)
    9896:	601a      	str	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);		
    9898:	2015      	movs	r0, #21
    989a:	4b0a      	ldr	r3, [pc, #40]	; (98c4 <MotorFLimitCallback+0x3c>)
    989c:	4798      	blx	r3
    989e:	1c03      	adds	r3, r0, #0
    98a0:	1c1a      	adds	r2, r3, #0
    98a2:	4b09      	ldr	r3, [pc, #36]	; (98c8 <MotorFLimitCallback+0x40>)
    98a4:	701a      	strb	r2, [r3, #0]
	if ((flimitState == 0)&&(action!=RETRACTING))
    98a6:	4b08      	ldr	r3, [pc, #32]	; (98c8 <MotorFLimitCallback+0x40>)
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	2b00      	cmp	r3, #0
    98ac:	d106      	bne.n	98bc <MotorFLimitCallback+0x34>
    98ae:	4b07      	ldr	r3, [pc, #28]	; (98cc <MotorFLimitCallback+0x44>)
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2b02      	cmp	r3, #2
    98b4:	d002      	beq.n	98bc <MotorFLimitCallback+0x34>
	{
		MotorOff(0);
    98b6:	2000      	movs	r0, #0
    98b8:	4b05      	ldr	r3, [pc, #20]	; (98d0 <MotorFLimitCallback+0x48>)
    98ba:	4798      	blx	r3
	}
}
    98bc:	46bd      	mov	sp, r7
    98be:	bd80      	pop	{r7, pc}
    98c0:	2000369c 	.word	0x2000369c
    98c4:	00006759 	.word	0x00006759
    98c8:	20003072 	.word	0x20003072
    98cc:	200004ae 	.word	0x200004ae
    98d0:	00009ac9 	.word	0x00009ac9

000098d4 <ConfigureMotorHLimitChannel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitChannel(void)
{
    98d4:	b580      	push	{r7, lr}
    98d6:	b084      	sub	sp, #16
    98d8:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    98da:	1d3b      	adds	r3, r7, #4
    98dc:	1c18      	adds	r0, r3, #0
    98de:	4b0b      	ldr	r3, [pc, #44]	; (990c <ConfigureMotorHLimitChannel+0x38>)
    98e0:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PA20A_EIC_EXTINT4;   
    98e2:	1d3b      	adds	r3, r7, #4
    98e4:	2214      	movs	r2, #20
    98e6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PA20A_EIC_EXTINT4;   
    98e8:	1d3b      	adds	r3, r7, #4
    98ea:	2200      	movs	r2, #0
    98ec:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
    98ee:	1d3b      	adds	r3, r7, #4
    98f0:	2200      	movs	r2, #0
    98f2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH; 
    98f4:	1d3b      	adds	r3, r7, #4
    98f6:	2203      	movs	r2, #3
    98f8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(4, &config_extint_chan);   
    98fa:	1d3b      	adds	r3, r7, #4
    98fc:	2004      	movs	r0, #4
    98fe:	1c19      	adds	r1, r3, #0
    9900:	4b03      	ldr	r3, [pc, #12]	; (9910 <ConfigureMotorHLimitChannel+0x3c>)
    9902:	4798      	blx	r3
}
    9904:	46bd      	mov	sp, r7
    9906:	b004      	add	sp, #16
    9908:	bd80      	pop	{r7, pc}
    990a:	46c0      	nop			; (mov r8, r8)
    990c:	000067f5 	.word	0x000067f5
    9910:	0000406d 	.word	0x0000406d

00009914 <ConfigureMotorHLimitCallbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void ConfigureMotorHLimitCallbacks(void)
{
    9914:	b580      	push	{r7, lr}
    9916:	af00      	add	r7, sp, #0
	extint_register_callback(MotorHLimitCallback,4,EXTINT_CALLBACK_TYPE_DETECT);
    9918:	4b05      	ldr	r3, [pc, #20]	; (9930 <ConfigureMotorHLimitCallbacks+0x1c>)
    991a:	1c18      	adds	r0, r3, #0
    991c:	2104      	movs	r1, #4
    991e:	2200      	movs	r2, #0
    9920:	4b04      	ldr	r3, [pc, #16]	; (9934 <ConfigureMotorHLimitCallbacks+0x20>)
    9922:	4798      	blx	r3
	extint_chan_enable_callback(4,EXTINT_CALLBACK_TYPE_DETECT);
    9924:	2004      	movs	r0, #4
    9926:	2100      	movs	r1, #0
    9928:	4b03      	ldr	r3, [pc, #12]	; (9938 <ConfigureMotorHLimitCallbacks+0x24>)
    992a:	4798      	blx	r3
}
    992c:	46bd      	mov	sp, r7
    992e:	bd80      	pop	{r7, pc}
    9930:	0000993d 	.word	0x0000993d
    9934:	00004239 	.word	0x00004239
    9938:	00004295 	.word	0x00004295

0000993c <MotorHLimitCallback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorHLimitCallback(void)
{
    993c:	b580      	push	{r7, lr}
    993e:	af00      	add	r7, sp, #0
	schedByte |= SCHEDBYTE_MOTORHLIMIT;
    9940:	4b1a      	ldr	r3, [pc, #104]	; (99ac <MotorHLimitCallback+0x70>)
    9942:	681b      	ldr	r3, [r3, #0]
    9944:	2202      	movs	r2, #2
    9946:	431a      	orrs	r2, r3
    9948:	4b18      	ldr	r3, [pc, #96]	; (99ac <MotorHLimitCallback+0x70>)
    994a:	601a      	str	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    994c:	2014      	movs	r0, #20
    994e:	4b18      	ldr	r3, [pc, #96]	; (99b0 <MotorHLimitCallback+0x74>)
    9950:	4798      	blx	r3
    9952:	1c03      	adds	r3, r0, #0
    9954:	1c1a      	adds	r2, r3, #0
    9956:	4b17      	ldr	r3, [pc, #92]	; (99b4 <MotorHLimitCallback+0x78>)
    9958:	701a      	strb	r2, [r3, #0]
	
 	if (hlimitState == 0)
    995a:	4b16      	ldr	r3, [pc, #88]	; (99b4 <MotorHLimitCallback+0x78>)
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	2b00      	cmp	r3, #0
    9960:	d112      	bne.n	9988 <MotorHLimitCallback+0x4c>
	{
		if ((action != EXTENDING)&&(action !=EXTENDING_BY_ENCODER))
    9962:	4b15      	ldr	r3, [pc, #84]	; (99b8 <MotorHLimitCallback+0x7c>)
    9964:	781b      	ldrb	r3, [r3, #0]
    9966:	2b01      	cmp	r3, #1
    9968:	d00a      	beq.n	9980 <MotorHLimitCallback+0x44>
    996a:	4b13      	ldr	r3, [pc, #76]	; (99b8 <MotorHLimitCallback+0x7c>)
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	2b04      	cmp	r3, #4
    9970:	d006      	beq.n	9980 <MotorHLimitCallback+0x44>
		{
			MotorOff(0);
    9972:	2000      	movs	r0, #0
    9974:	4b11      	ldr	r3, [pc, #68]	; (99bc <MotorHLimitCallback+0x80>)
    9976:	4798      	blx	r3
			homeLimit = HOME_IN;
    9978:	4b11      	ldr	r3, [pc, #68]	; (99c0 <MotorHLimitCallback+0x84>)
    997a:	2200      	movs	r2, #0
    997c:	701a      	strb	r2, [r3, #0]
    997e:	e012      	b.n	99a6 <MotorHLimitCallback+0x6a>
		}
		else
		{
			homeLimit = HOME_OUT;
    9980:	4b0f      	ldr	r3, [pc, #60]	; (99c0 <MotorHLimitCallback+0x84>)
    9982:	2201      	movs	r2, #1
    9984:	701a      	strb	r2, [r3, #0]
    9986:	e00e      	b.n	99a6 <MotorHLimitCallback+0x6a>
		}
	}
	else
	{
		// added below logic v01_27
		if ((action != EXTENDING)&&(action !=EXTENDING_BY_ENCODER))
    9988:	4b0b      	ldr	r3, [pc, #44]	; (99b8 <MotorHLimitCallback+0x7c>)
    998a:	781b      	ldrb	r3, [r3, #0]
    998c:	2b01      	cmp	r3, #1
    998e:	d007      	beq.n	99a0 <MotorHLimitCallback+0x64>
    9990:	4b09      	ldr	r3, [pc, #36]	; (99b8 <MotorHLimitCallback+0x7c>)
    9992:	781b      	ldrb	r3, [r3, #0]
    9994:	2b04      	cmp	r3, #4
    9996:	d003      	beq.n	99a0 <MotorHLimitCallback+0x64>
		{
//			MotorOff();
			homeLimit = HOME_IN;
    9998:	4b09      	ldr	r3, [pc, #36]	; (99c0 <MotorHLimitCallback+0x84>)
    999a:	2200      	movs	r2, #0
    999c:	701a      	strb	r2, [r3, #0]
    999e:	e002      	b.n	99a6 <MotorHLimitCallback+0x6a>
		}
		else
		{
			homeLimit = HOME_OUT;
    99a0:	4b07      	ldr	r3, [pc, #28]	; (99c0 <MotorHLimitCallback+0x84>)
    99a2:	2201      	movs	r2, #1
    99a4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    99a6:	46bd      	mov	sp, r7
    99a8:	bd80      	pop	{r7, pc}
    99aa:	46c0      	nop			; (mov r8, r8)
    99ac:	2000369c 	.word	0x2000369c
    99b0:	00006759 	.word	0x00006759
    99b4:	20003068 	.word	0x20003068
    99b8:	200004ae 	.word	0x200004ae
    99bc:	00009ac9 	.word	0x00009ac9
    99c0:	20000001 	.word	0x20000001

000099c4 <MotorHLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorHLimitTask(void)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	af00      	add	r7, sp, #0
	hlimitCount++;	
    99c8:	4b07      	ldr	r3, [pc, #28]	; (99e8 <MotorHLimitTask+0x24>)
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	3301      	adds	r3, #1
    99ce:	b2da      	uxtb	r2, r3
    99d0:	4b05      	ldr	r3, [pc, #20]	; (99e8 <MotorHLimitTask+0x24>)
    99d2:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    99d4:	2014      	movs	r0, #20
    99d6:	4b05      	ldr	r3, [pc, #20]	; (99ec <MotorHLimitTask+0x28>)
    99d8:	4798      	blx	r3
    99da:	1c03      	adds	r3, r0, #0
    99dc:	1c1a      	adds	r2, r3, #0
    99de:	4b04      	ldr	r3, [pc, #16]	; (99f0 <MotorHLimitTask+0x2c>)
    99e0:	701a      	strb	r2, [r3, #0]
}
    99e2:	46bd      	mov	sp, r7
    99e4:	bd80      	pop	{r7, pc}
    99e6:	46c0      	nop			; (mov r8, r8)
    99e8:	20002eef 	.word	0x20002eef
    99ec:	00006759 	.word	0x00006759
    99f0:	20003068 	.word	0x20003068

000099f4 <MotorFLimitTask>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorFLimitTask(void)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	af00      	add	r7, sp, #0
	flimitCount++;
    99f8:	4b0c      	ldr	r3, [pc, #48]	; (9a2c <MotorFLimitTask+0x38>)
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	3301      	adds	r3, #1
    99fe:	b2da      	uxtb	r2, r3
    9a00:	4b0a      	ldr	r3, [pc, #40]	; (9a2c <MotorFLimitTask+0x38>)
    9a02:	701a      	strb	r2, [r3, #0]
	flimitState = port_pin_get_input_level(FLIMIT);
    9a04:	2015      	movs	r0, #21
    9a06:	4b0a      	ldr	r3, [pc, #40]	; (9a30 <MotorFLimitTask+0x3c>)
    9a08:	4798      	blx	r3
    9a0a:	1c03      	adds	r3, r0, #0
    9a0c:	1c1a      	adds	r2, r3, #0
    9a0e:	4b09      	ldr	r3, [pc, #36]	; (9a34 <MotorFLimitTask+0x40>)
    9a10:	701a      	strb	r2, [r3, #0]
	
	if ((flimitState == 0)&&(action!= RETRACTING))
    9a12:	4b08      	ldr	r3, [pc, #32]	; (9a34 <MotorFLimitTask+0x40>)
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	2b00      	cmp	r3, #0
    9a18:	d106      	bne.n	9a28 <MotorFLimitTask+0x34>
    9a1a:	4b07      	ldr	r3, [pc, #28]	; (9a38 <MotorFLimitTask+0x44>)
    9a1c:	781b      	ldrb	r3, [r3, #0]
    9a1e:	2b02      	cmp	r3, #2
    9a20:	d002      	beq.n	9a28 <MotorFLimitTask+0x34>
	{
		MotorOff(1);
    9a22:	2001      	movs	r0, #1
    9a24:	4b05      	ldr	r3, [pc, #20]	; (9a3c <MotorFLimitTask+0x48>)
    9a26:	4798      	blx	r3
	}	
}
    9a28:	46bd      	mov	sp, r7
    9a2a:	bd80      	pop	{r7, pc}
    9a2c:	20002eb5 	.word	0x20002eb5
    9a30:	00006759 	.word	0x00006759
    9a34:	20003072 	.word	0x20003072
    9a38:	200004ae 	.word	0x200004ae
    9a3c:	00009ac9 	.word	0x00009ac9

00009a40 <MotorInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void MotorInit(void)
{
    9a40:	b580      	push	{r7, lr}
    9a42:	af00      	add	r7, sp, #0
	hlimitCount = 0;
    9a44:	4b13      	ldr	r3, [pc, #76]	; (9a94 <MotorInit+0x54>)
    9a46:	2200      	movs	r2, #0
    9a48:	701a      	strb	r2, [r3, #0]
	flimitCount = 0; 
    9a4a:	4b13      	ldr	r3, [pc, #76]	; (9a98 <MotorInit+0x58>)
    9a4c:	2200      	movs	r2, #0
    9a4e:	701a      	strb	r2, [r3, #0]
	
	ConfigureMotorHLimitChannel();
    9a50:	4b12      	ldr	r3, [pc, #72]	; (9a9c <MotorInit+0x5c>)
    9a52:	4798      	blx	r3
	ConfigureMotorHLimitCallbacks();
    9a54:	4b12      	ldr	r3, [pc, #72]	; (9aa0 <MotorInit+0x60>)
    9a56:	4798      	blx	r3
	
	ConfigureMotorFLimitChannel();
    9a58:	4b12      	ldr	r3, [pc, #72]	; (9aa4 <MotorInit+0x64>)
    9a5a:	4798      	blx	r3
	ConfigureMotorFLimitCallbacks();	
    9a5c:	4b12      	ldr	r3, [pc, #72]	; (9aa8 <MotorInit+0x68>)
    9a5e:	4798      	blx	r3
	
	flimitState = port_pin_get_input_level(FLIMIT);
    9a60:	2015      	movs	r0, #21
    9a62:	4b12      	ldr	r3, [pc, #72]	; (9aac <MotorInit+0x6c>)
    9a64:	4798      	blx	r3
    9a66:	1c03      	adds	r3, r0, #0
    9a68:	1c1a      	adds	r2, r3, #0
    9a6a:	4b11      	ldr	r3, [pc, #68]	; (9ab0 <MotorInit+0x70>)
    9a6c:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);	
    9a6e:	2014      	movs	r0, #20
    9a70:	4b0e      	ldr	r3, [pc, #56]	; (9aac <MotorInit+0x6c>)
    9a72:	4798      	blx	r3
    9a74:	1c03      	adds	r3, r0, #0
    9a76:	1c1a      	adds	r2, r3, #0
    9a78:	4b0e      	ldr	r3, [pc, #56]	; (9ab4 <MotorInit+0x74>)
    9a7a:	701a      	strb	r2, [r3, #0]
	
	ConfigureEncoder();
    9a7c:	4b0e      	ldr	r3, [pc, #56]	; (9ab8 <MotorInit+0x78>)
    9a7e:	4798      	blx	r3
	ConfigureEncoderCallbacks();
    9a80:	4b0e      	ldr	r3, [pc, #56]	; (9abc <MotorInit+0x7c>)
    9a82:	4798      	blx	r3
	encoderCount = 0; 
    9a84:	4b0e      	ldr	r3, [pc, #56]	; (9ac0 <MotorInit+0x80>)
    9a86:	2200      	movs	r2, #0
    9a88:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    9a8a:	4b0e      	ldr	r3, [pc, #56]	; (9ac4 <MotorInit+0x84>)
    9a8c:	2200      	movs	r2, #0
    9a8e:	801a      	strh	r2, [r3, #0]
}
    9a90:	46bd      	mov	sp, r7
    9a92:	bd80      	pop	{r7, pc}
    9a94:	20002eef 	.word	0x20002eef
    9a98:	20002eb5 	.word	0x20002eb5
    9a9c:	000098d5 	.word	0x000098d5
    9aa0:	00009915 	.word	0x00009915
    9aa4:	00009821 	.word	0x00009821
    9aa8:	00009861 	.word	0x00009861
    9aac:	00006759 	.word	0x00006759
    9ab0:	20003072 	.word	0x20003072
    9ab4:	20003068 	.word	0x20003068
    9ab8:	00006555 	.word	0x00006555
    9abc:	00006595 	.word	0x00006595
    9ac0:	200004a8 	.word	0x200004a8
    9ac4:	20001e9c 	.word	0x20001e9c

00009ac8 <MotorOff>:
// FUNCTION:   MotorOff
//------------------------------------------------------------------------------
// This function Initializes registers to allow button interrupts
//==============================================================================
void MotorOff(uint8_t useHoldOff)
{
    9ac8:	b580      	push	{r7, lr}
    9aca:	b084      	sub	sp, #16
    9acc:	af00      	add	r7, sp, #0
    9ace:	1c02      	adds	r2, r0, #0
    9ad0:	1dfb      	adds	r3, r7, #7
    9ad2:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    9ad4:	1c3b      	adds	r3, r7, #0
    9ad6:	330c      	adds	r3, #12
    9ad8:	1c18      	adds	r0, r3, #0
    9ada:	4b20      	ldr	r3, [pc, #128]	; (9b5c <MotorOff+0x94>)
    9adc:	4798      	blx	r3
  
	motorOn = FALSE; 
    9ade:	4b20      	ldr	r3, [pc, #128]	; (9b60 <MotorOff+0x98>)
    9ae0:	2200      	movs	r2, #0
    9ae2:	701a      	strb	r2, [r3, #0]
	motorRunTime = 0;	
    9ae4:	4b1f      	ldr	r3, [pc, #124]	; (9b64 <MotorOff+0x9c>)
    9ae6:	2200      	movs	r2, #0
    9ae8:	801a      	strh	r2, [r3, #0]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    9aea:	1c3b      	adds	r3, r7, #0
    9aec:	330c      	adds	r3, #12
    9aee:	2201      	movs	r2, #1
    9af0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);
    9af2:	1c3b      	adds	r3, r7, #0
    9af4:	330c      	adds	r3, #12
    9af6:	2012      	movs	r0, #18
    9af8:	1c19      	adds	r1, r3, #0
    9afa:	4b1b      	ldr	r3, [pc, #108]	; (9b68 <MotorOff+0xa0>)
    9afc:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    9afe:	2012      	movs	r0, #18
    9b00:	2100      	movs	r1, #0
    9b02:	4b1a      	ldr	r3, [pc, #104]	; (9b6c <MotorOff+0xa4>)
    9b04:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9b06:	1c3b      	adds	r3, r7, #0
    9b08:	330c      	adds	r3, #12
    9b0a:	2018      	movs	r0, #24
    9b0c:	1c19      	adds	r1, r3, #0
    9b0e:	4b16      	ldr	r3, [pc, #88]	; (9b68 <MotorOff+0xa0>)
    9b10:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    9b12:	2018      	movs	r0, #24
    9b14:	2100      	movs	r1, #0
    9b16:	4b15      	ldr	r3, [pc, #84]	; (9b6c <MotorOff+0xa4>)
    9b18:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);
    9b1a:	1c3b      	adds	r3, r7, #0
    9b1c:	330c      	adds	r3, #12
    9b1e:	2013      	movs	r0, #19
    9b20:	1c19      	adds	r1, r3, #0
    9b22:	4b11      	ldr	r3, [pc, #68]	; (9b68 <MotorOff+0xa0>)
    9b24:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    9b26:	2013      	movs	r0, #19
    9b28:	2100      	movs	r1, #0
    9b2a:	4b10      	ldr	r3, [pc, #64]	; (9b6c <MotorOff+0xa4>)
    9b2c:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);
    9b2e:	1c3b      	adds	r3, r7, #0
    9b30:	330c      	adds	r3, #12
    9b32:	2019      	movs	r0, #25
    9b34:	1c19      	adds	r1, r3, #0
    9b36:	4b0c      	ldr	r3, [pc, #48]	; (9b68 <MotorOff+0xa0>)
    9b38:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9b3a:	2019      	movs	r0, #25
    9b3c:	2100      	movs	r1, #0
    9b3e:	4b0b      	ldr	r3, [pc, #44]	; (9b6c <MotorOff+0xa4>)
    9b40:	4798      	blx	r3
	
	action = NONE; 
    9b42:	4b0b      	ldr	r3, [pc, #44]	; (9b70 <MotorOff+0xa8>)
    9b44:	2200      	movs	r2, #0
    9b46:	701a      	strb	r2, [r3, #0]
	if (useHoldOff != 0)
    9b48:	1dfb      	adds	r3, r7, #7
    9b4a:	781b      	ldrb	r3, [r3, #0]
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d002      	beq.n	9b56 <MotorOff+0x8e>
	{
		BrakeHoldOff(100);
    9b50:	2064      	movs	r0, #100	; 0x64
    9b52:	4b08      	ldr	r3, [pc, #32]	; (9b74 <MotorOff+0xac>)
    9b54:	4798      	blx	r3
	}
}
    9b56:	46bd      	mov	sp, r7
    9b58:	b004      	add	sp, #16
    9b5a:	bd80      	pop	{r7, pc}
    9b5c:	00006739 	.word	0x00006739
    9b60:	200004b0 	.word	0x200004b0
    9b64:	20002eb2 	.word	0x20002eb2
    9b68:	00011cfd 	.word	0x00011cfd
    9b6c:	000067a1 	.word	0x000067a1
    9b70:	200004ae 	.word	0x200004ae
    9b74:	00006829 	.word	0x00006829

00009b78 <RetractByEncoderCount>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RetractByEncoderCount(void)
{
    9b78:	b580      	push	{r7, lr}
    9b7a:	b082      	sub	sp, #8
    9b7c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9b7e:	1d3b      	adds	r3, r7, #4
    9b80:	1c18      	adds	r0, r3, #0
    9b82:	4b11      	ldr	r3, [pc, #68]	; (9bc8 <RetractByEncoderCount+0x50>)
    9b84:	4798      	blx	r3
	
	motorOn = TRUE; 
    9b86:	4b11      	ldr	r3, [pc, #68]	; (9bcc <RetractByEncoderCount+0x54>)
    9b88:	2201      	movs	r2, #1
    9b8a:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    9b8c:	2013      	movs	r0, #19
    9b8e:	2100      	movs	r1, #0
    9b90:	4b0f      	ldr	r3, [pc, #60]	; (9bd0 <RetractByEncoderCount+0x58>)
    9b92:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    9b94:	2019      	movs	r0, #25
    9b96:	2101      	movs	r1, #1
    9b98:	4b0d      	ldr	r3, [pc, #52]	; (9bd0 <RetractByEncoderCount+0x58>)
    9b9a:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9b9c:	1d3b      	adds	r3, r7, #4
    9b9e:	2200      	movs	r2, #0
    9ba0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9ba2:	1d3b      	adds	r3, r7, #4
    9ba4:	2200      	movs	r2, #0
    9ba6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9ba8:	1d3b      	adds	r3, r7, #4
    9baa:	2012      	movs	r0, #18
    9bac:	1c19      	adds	r1, r3, #0
    9bae:	4b09      	ldr	r3, [pc, #36]	; (9bd4 <RetractByEncoderCount+0x5c>)
    9bb0:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9bb2:	1d3b      	adds	r3, r7, #4
    9bb4:	2018      	movs	r0, #24
    9bb6:	1c19      	adds	r1, r3, #0
    9bb8:	4b06      	ldr	r3, [pc, #24]	; (9bd4 <RetractByEncoderCount+0x5c>)
    9bba:	4798      	blx	r3
	action = RETRACTING_BY_ENCODER; 
    9bbc:	4b06      	ldr	r3, [pc, #24]	; (9bd8 <RetractByEncoderCount+0x60>)
    9bbe:	2203      	movs	r2, #3
    9bc0:	701a      	strb	r2, [r3, #0]
}
    9bc2:	46bd      	mov	sp, r7
    9bc4:	b002      	add	sp, #8
    9bc6:	bd80      	pop	{r7, pc}
    9bc8:	00006739 	.word	0x00006739
    9bcc:	200004b0 	.word	0x200004b0
    9bd0:	000067a1 	.word	0x000067a1
    9bd4:	00011cfd 	.word	0x00011cfd
    9bd8:	200004ae 	.word	0x200004ae

00009bdc <MotorCCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorCCW(void)
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	b082      	sub	sp, #8
    9be0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9be2:	1d3b      	adds	r3, r7, #4
    9be4:	1c18      	adds	r0, r3, #0
    9be6:	4b1f      	ldr	r3, [pc, #124]	; (9c64 <MotorCCW+0x88>)
    9be8:	4798      	blx	r3
	
	motorOn = TRUE; 
    9bea:	4b1f      	ldr	r3, [pc, #124]	; (9c68 <MotorCCW+0x8c>)
    9bec:	2201      	movs	r2, #1
    9bee:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    9bf0:	4b1e      	ldr	r3, [pc, #120]	; (9c6c <MotorCCW+0x90>)
    9bf2:	2296      	movs	r2, #150	; 0x96
    9bf4:	0052      	lsls	r2, r2, #1
    9bf6:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0; 
    9bf8:	4b1d      	ldr	r3, [pc, #116]	; (9c70 <MotorCCW+0x94>)
    9bfa:	2200      	movs	r2, #0
    9bfc:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9bfe:	4b1d      	ldr	r3, [pc, #116]	; (9c74 <MotorCCW+0x98>)
    9c00:	2200      	movs	r2, #0
    9c02:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;
    9c04:	4b1c      	ldr	r3, [pc, #112]	; (9c78 <MotorCCW+0x9c>)
    9c06:	2200      	movs	r2, #0
    9c08:	801a      	strh	r2, [r3, #0]
	buildTableOffset = 0;	
    9c0a:	4b1c      	ldr	r3, [pc, #112]	; (9c7c <MotorCCW+0xa0>)
    9c0c:	2200      	movs	r2, #0
    9c0e:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, false);
    9c10:	2013      	movs	r0, #19
    9c12:	2100      	movs	r1, #0
    9c14:	4b1a      	ldr	r3, [pc, #104]	; (9c80 <MotorCCW+0xa4>)
    9c16:	4798      	blx	r3
	port_pin_set_output_level(INb, true);
    9c18:	2019      	movs	r0, #25
    9c1a:	2101      	movs	r1, #1
    9c1c:	4b18      	ldr	r3, [pc, #96]	; (9c80 <MotorCCW+0xa4>)
    9c1e:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9c20:	1d3b      	adds	r3, r7, #4
    9c22:	2200      	movs	r2, #0
    9c24:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9c26:	1d3b      	adds	r3, r7, #4
    9c28:	2200      	movs	r2, #0
    9c2a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9c2c:	1d3b      	adds	r3, r7, #4
    9c2e:	2012      	movs	r0, #18
    9c30:	1c19      	adds	r1, r3, #0
    9c32:	4b14      	ldr	r3, [pc, #80]	; (9c84 <MotorCCW+0xa8>)
    9c34:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9c36:	1d3b      	adds	r3, r7, #4
    9c38:	2018      	movs	r0, #24
    9c3a:	1c19      	adds	r1, r3, #0
    9c3c:	4b11      	ldr	r3, [pc, #68]	; (9c84 <MotorCCW+0xa8>)
    9c3e:	4798      	blx	r3
	action = RETRACTING; 
    9c40:	4b11      	ldr	r3, [pc, #68]	; (9c88 <MotorCCW+0xac>)
    9c42:	2202      	movs	r2, #2
    9c44:	701a      	strb	r2, [r3, #0]
	prevEncoderCount = encoderCount; //01_38_#3
    9c46:	4b0c      	ldr	r3, [pc, #48]	; (9c78 <MotorCCW+0x9c>)
    9c48:	881a      	ldrh	r2, [r3, #0]
    9c4a:	4b10      	ldr	r3, [pc, #64]	; (9c8c <MotorCCW+0xb0>)
    9c4c:	801a      	strh	r2, [r3, #0]
	actionEncoderSample = 0; //01_38_#3
    9c4e:	4b10      	ldr	r3, [pc, #64]	; (9c90 <MotorCCW+0xb4>)
    9c50:	2200      	movs	r2, #0
    9c52:	701a      	strb	r2, [r3, #0]
	prevAction = action; 
    9c54:	4b0c      	ldr	r3, [pc, #48]	; (9c88 <MotorCCW+0xac>)
    9c56:	781a      	ldrb	r2, [r3, #0]
    9c58:	4b0e      	ldr	r3, [pc, #56]	; (9c94 <MotorCCW+0xb8>)
    9c5a:	701a      	strb	r2, [r3, #0]
}
    9c5c:	46bd      	mov	sp, r7
    9c5e:	b002      	add	sp, #8
    9c60:	bd80      	pop	{r7, pc}
    9c62:	46c0      	nop			; (mov r8, r8)
    9c64:	00006739 	.word	0x00006739
    9c68:	200004b0 	.word	0x200004b0
    9c6c:	20002eb2 	.word	0x20002eb2
    9c70:	200004be 	.word	0x200004be
    9c74:	200004c0 	.word	0x200004c0
    9c78:	200004a8 	.word	0x200004a8
    9c7c:	20001e9c 	.word	0x20001e9c
    9c80:	000067a1 	.word	0x000067a1
    9c84:	00011cfd 	.word	0x00011cfd
    9c88:	200004ae 	.word	0x200004ae
    9c8c:	20002ec6 	.word	0x20002ec6
    9c90:	20002ebe 	.word	0x20002ebe
    9c94:	200004af 	.word	0x200004af

00009c98 <MotorCW>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void MotorCW(void)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b082      	sub	sp, #8
    9c9c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);	
    9c9e:	1d3b      	adds	r3, r7, #4
    9ca0:	1c18      	adds	r0, r3, #0
    9ca2:	4b23      	ldr	r3, [pc, #140]	; (9d30 <MotorCW+0x98>)
    9ca4:	4798      	blx	r3

	motorOn = TRUE; 
    9ca6:	4b23      	ldr	r3, [pc, #140]	; (9d34 <MotorCW+0x9c>)
    9ca8:	2201      	movs	r2, #1
    9caa:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;	
    9cac:	4b22      	ldr	r3, [pc, #136]	; (9d38 <MotorCW+0xa0>)
    9cae:	2296      	movs	r2, #150	; 0x96
    9cb0:	0052      	lsls	r2, r2, #1
    9cb2:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    9cb4:	4b21      	ldr	r3, [pc, #132]	; (9d3c <MotorCW+0xa4>)
    9cb6:	2200      	movs	r2, #0
    9cb8:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9cba:	4b21      	ldr	r3, [pc, #132]	; (9d40 <MotorCW+0xa8>)
    9cbc:	2200      	movs	r2, #0
    9cbe:	801a      	strh	r2, [r3, #0]
	encoderCount = 0;	
    9cc0:	4b20      	ldr	r3, [pc, #128]	; (9d44 <MotorCW+0xac>)
    9cc2:	2200      	movs	r2, #0
    9cc4:	801a      	strh	r2, [r3, #0]
	encoderFlip = 0; 
    9cc6:	4b20      	ldr	r3, [pc, #128]	; (9d48 <MotorCW+0xb0>)
    9cc8:	2200      	movs	r2, #0
    9cca:	701a      	strb	r2, [r3, #0]
	buildTableOffset = 0;
    9ccc:	4b1f      	ldr	r3, [pc, #124]	; (9d4c <MotorCW+0xb4>)
    9cce:	2200      	movs	r2, #0
    9cd0:	801a      	strh	r2, [r3, #0]
	encoderTableOffset = 0; 
    9cd2:	4b1f      	ldr	r3, [pc, #124]	; (9d50 <MotorCW+0xb8>)
    9cd4:	2200      	movs	r2, #0
    9cd6:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(INa, true);
    9cd8:	2013      	movs	r0, #19
    9cda:	2101      	movs	r1, #1
    9cdc:	4b1d      	ldr	r3, [pc, #116]	; (9d54 <MotorCW+0xbc>)
    9cde:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9ce0:	2019      	movs	r0, #25
    9ce2:	2100      	movs	r1, #0
    9ce4:	4b1b      	ldr	r3, [pc, #108]	; (9d54 <MotorCW+0xbc>)
    9ce6:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9ce8:	1d3b      	adds	r3, r7, #4
    9cea:	2200      	movs	r2, #0
    9cec:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9cee:	1d3b      	adds	r3, r7, #4
    9cf0:	2200      	movs	r2, #0
    9cf2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9cf4:	1d3b      	adds	r3, r7, #4
    9cf6:	2012      	movs	r0, #18
    9cf8:	1c19      	adds	r1, r3, #0
    9cfa:	4b17      	ldr	r3, [pc, #92]	; (9d58 <MotorCW+0xc0>)
    9cfc:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9cfe:	1d3b      	adds	r3, r7, #4
    9d00:	2018      	movs	r0, #24
    9d02:	1c19      	adds	r1, r3, #0
    9d04:	4b14      	ldr	r3, [pc, #80]	; (9d58 <MotorCW+0xc0>)
    9d06:	4798      	blx	r3
	action = EXTENDING; 
    9d08:	4b14      	ldr	r3, [pc, #80]	; (9d5c <MotorCW+0xc4>)
    9d0a:	2201      	movs	r2, #1
    9d0c:	701a      	strb	r2, [r3, #0]
	homeLimit = HOME_OUT;
    9d0e:	4b14      	ldr	r3, [pc, #80]	; (9d60 <MotorCW+0xc8>)
    9d10:	2201      	movs	r2, #1
    9d12:	701a      	strb	r2, [r3, #0]
	prevEncoderCount = encoderCount; //01_38_#3
    9d14:	4b0b      	ldr	r3, [pc, #44]	; (9d44 <MotorCW+0xac>)
    9d16:	881a      	ldrh	r2, [r3, #0]
    9d18:	4b12      	ldr	r3, [pc, #72]	; (9d64 <MotorCW+0xcc>)
    9d1a:	801a      	strh	r2, [r3, #0]
	actionEncoderSample = 0; //01_38_#3
    9d1c:	4b12      	ldr	r3, [pc, #72]	; (9d68 <MotorCW+0xd0>)
    9d1e:	2200      	movs	r2, #0
    9d20:	701a      	strb	r2, [r3, #0]
	prevAction = action; 
    9d22:	4b0e      	ldr	r3, [pc, #56]	; (9d5c <MotorCW+0xc4>)
    9d24:	781a      	ldrb	r2, [r3, #0]
    9d26:	4b11      	ldr	r3, [pc, #68]	; (9d6c <MotorCW+0xd4>)
    9d28:	701a      	strb	r2, [r3, #0]
}
    9d2a:	46bd      	mov	sp, r7
    9d2c:	b002      	add	sp, #8
    9d2e:	bd80      	pop	{r7, pc}
    9d30:	00006739 	.word	0x00006739
    9d34:	200004b0 	.word	0x200004b0
    9d38:	20002eb2 	.word	0x20002eb2
    9d3c:	200004be 	.word	0x200004be
    9d40:	200004c0 	.word	0x200004c0
    9d44:	200004a8 	.word	0x200004a8
    9d48:	200004aa 	.word	0x200004aa
    9d4c:	20001e9c 	.word	0x20001e9c
    9d50:	20001e9e 	.word	0x20001e9e
    9d54:	000067a1 	.word	0x000067a1
    9d58:	00011cfd 	.word	0x00011cfd
    9d5c:	200004ae 	.word	0x200004ae
    9d60:	20000001 	.word	0x20000001
    9d64:	20002ec6 	.word	0x20002ec6
    9d68:	20002ebe 	.word	0x20002ebe
    9d6c:	200004af 	.word	0x200004af

00009d70 <MotorExtendMore>:
// FUNCTION:   MotorCW
//------------------------------------------------------------------------------
// This function
//==============================================================================
void MotorExtendMore(void)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	b082      	sub	sp, #8
    9d74:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    9d76:	1d3b      	adds	r3, r7, #4
    9d78:	1c18      	adds	r0, r3, #0
    9d7a:	4b18      	ldr	r3, [pc, #96]	; (9ddc <MotorExtendMore+0x6c>)
    9d7c:	4798      	blx	r3

	motorOn = TRUE;
    9d7e:	4b18      	ldr	r3, [pc, #96]	; (9de0 <MotorExtendMore+0x70>)
    9d80:	2201      	movs	r2, #1
    9d82:	701a      	strb	r2, [r3, #0]
	motorRunTime = MOTOR_RUN_TIME;
    9d84:	4b17      	ldr	r3, [pc, #92]	; (9de4 <MotorExtendMore+0x74>)
    9d86:	2296      	movs	r2, #150	; 0x96
    9d88:	0052      	lsls	r2, r2, #1
    9d8a:	801a      	strh	r2, [r3, #0]
	maxCurrentRead = 0;
    9d8c:	4b16      	ldr	r3, [pc, #88]	; (9de8 <MotorExtendMore+0x78>)
    9d8e:	2200      	movs	r2, #0
    9d90:	801a      	strh	r2, [r3, #0]
	maxFSRRead = 0;  //V01_41
    9d92:	4b16      	ldr	r3, [pc, #88]	; (9dec <MotorExtendMore+0x7c>)
    9d94:	2200      	movs	r2, #0
    9d96:	801a      	strh	r2, [r3, #0]
//	encoderCount = 0;
//	encoderFlip = 0;
	buildTableOffset = 0;
    9d98:	4b15      	ldr	r3, [pc, #84]	; (9df0 <MotorExtendMore+0x80>)
    9d9a:	2200      	movs	r2, #0
    9d9c:	801a      	strh	r2, [r3, #0]
//	encoderTableOffset = 0;
	port_pin_set_output_level(INa, true);
    9d9e:	2013      	movs	r0, #19
    9da0:	2101      	movs	r1, #1
    9da2:	4b14      	ldr	r3, [pc, #80]	; (9df4 <MotorExtendMore+0x84>)
    9da4:	4798      	blx	r3
	port_pin_set_output_level(INb, false);
    9da6:	2019      	movs	r0, #25
    9da8:	2100      	movs	r1, #0
    9daa:	4b12      	ldr	r3, [pc, #72]	; (9df4 <MotorExtendMore+0x84>)
    9dac:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9dae:	1d3b      	adds	r3, r7, #4
    9db0:	2200      	movs	r2, #0
    9db2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    9db4:	1d3b      	adds	r3, r7, #4
    9db6:	2200      	movs	r2, #0
    9db8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ENa, &pin_conf);
    9dba:	1d3b      	adds	r3, r7, #4
    9dbc:	2012      	movs	r0, #18
    9dbe:	1c19      	adds	r1, r3, #0
    9dc0:	4b0d      	ldr	r3, [pc, #52]	; (9df8 <MotorExtendMore+0x88>)
    9dc2:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);
    9dc4:	1d3b      	adds	r3, r7, #4
    9dc6:	2018      	movs	r0, #24
    9dc8:	1c19      	adds	r1, r3, #0
    9dca:	4b0b      	ldr	r3, [pc, #44]	; (9df8 <MotorExtendMore+0x88>)
    9dcc:	4798      	blx	r3
	action = EXTENDING;
    9dce:	4b0b      	ldr	r3, [pc, #44]	; (9dfc <MotorExtendMore+0x8c>)
    9dd0:	2201      	movs	r2, #1
    9dd2:	701a      	strb	r2, [r3, #0]
	
}
    9dd4:	46bd      	mov	sp, r7
    9dd6:	b002      	add	sp, #8
    9dd8:	bd80      	pop	{r7, pc}
    9dda:	46c0      	nop			; (mov r8, r8)
    9ddc:	00006739 	.word	0x00006739
    9de0:	200004b0 	.word	0x200004b0
    9de4:	20002eb2 	.word	0x20002eb2
    9de8:	200004be 	.word	0x200004be
    9dec:	200004c0 	.word	0x200004c0
    9df0:	20001e9c 	.word	0x20001e9c
    9df4:	000067a1 	.word	0x000067a1
    9df8:	00011cfd 	.word	0x00011cfd
    9dfc:	200004ae 	.word	0x200004ae

00009e00 <AppProtocolChecksum>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
uint8_t AppProtocolChecksum(uint8_t *buffers,uint16_t length)
{
    9e00:	b580      	push	{r7, lr}
    9e02:	b086      	sub	sp, #24
    9e04:	af00      	add	r7, sp, #0
    9e06:	6078      	str	r0, [r7, #4]
    9e08:	1c0a      	adds	r2, r1, #0
    9e0a:	1cbb      	adds	r3, r7, #2
    9e0c:	801a      	strh	r2, [r3, #0]
	uint8_t checksum,*ptr; 
	uint16_t i; 
	
	checksum = 0; 
    9e0e:	1c3b      	adds	r3, r7, #0
    9e10:	3317      	adds	r3, #23
    9e12:	2200      	movs	r2, #0
    9e14:	701a      	strb	r2, [r3, #0]
	ptr = buffers; 
    9e16:	687b      	ldr	r3, [r7, #4]
    9e18:	613b      	str	r3, [r7, #16]
	
	for (i=0;i<length;i++)
    9e1a:	1c3b      	adds	r3, r7, #0
    9e1c:	330e      	adds	r3, #14
    9e1e:	2200      	movs	r2, #0
    9e20:	801a      	strh	r2, [r3, #0]
    9e22:	e011      	b.n	9e48 <AppProtocolChecksum+0x48>
	{
		checksum += *ptr++;	
    9e24:	693b      	ldr	r3, [r7, #16]
    9e26:	1c5a      	adds	r2, r3, #1
    9e28:	613a      	str	r2, [r7, #16]
    9e2a:	7819      	ldrb	r1, [r3, #0]
    9e2c:	1c3b      	adds	r3, r7, #0
    9e2e:	3317      	adds	r3, #23
    9e30:	1c3a      	adds	r2, r7, #0
    9e32:	3217      	adds	r2, #23
    9e34:	7812      	ldrb	r2, [r2, #0]
    9e36:	188a      	adds	r2, r1, r2
    9e38:	701a      	strb	r2, [r3, #0]
	uint16_t i; 
	
	checksum = 0; 
	ptr = buffers; 
	
	for (i=0;i<length;i++)
    9e3a:	1c3b      	adds	r3, r7, #0
    9e3c:	330e      	adds	r3, #14
    9e3e:	881a      	ldrh	r2, [r3, #0]
    9e40:	1c3b      	adds	r3, r7, #0
    9e42:	330e      	adds	r3, #14
    9e44:	3201      	adds	r2, #1
    9e46:	801a      	strh	r2, [r3, #0]
    9e48:	1c3a      	adds	r2, r7, #0
    9e4a:	320e      	adds	r2, #14
    9e4c:	1cbb      	adds	r3, r7, #2
    9e4e:	8812      	ldrh	r2, [r2, #0]
    9e50:	881b      	ldrh	r3, [r3, #0]
    9e52:	429a      	cmp	r2, r3
    9e54:	d3e6      	bcc.n	9e24 <AppProtocolChecksum+0x24>
	{
		checksum += *ptr++;	
	}
	return checksum; 
    9e56:	1c3b      	adds	r3, r7, #0
    9e58:	3317      	adds	r3, #23
    9e5a:	781b      	ldrb	r3, [r3, #0]
}
    9e5c:	1c18      	adds	r0, r3, #0
    9e5e:	46bd      	mov	sp, r7
    9e60:	b006      	add	sp, #24
    9e62:	bd80      	pop	{r7, pc}

00009e64 <NewRemoteDownload>:

#if BRAKEBOARD		

uint8_t newRemoteDownloadNeeded = FALSE; 
uint8_t NewRemoteDownload(void)
{
    9e64:	b580      	push	{r7, lr}
    9e66:	af00      	add	r7, sp, #0
	//----------------- if there is a remote version in SCRATCH 
	//                    RETURN the information and allow the remote 
	//                    to decide if it wants a download. 
	//----------------------------------------
	CheckScratch();
    9e68:	4b03      	ldr	r3, [pc, #12]	; (9e78 <NewRemoteDownload+0x14>)
    9e6a:	4798      	blx	r3
	return newRemoteDownloadNeeded; 
    9e6c:	4b03      	ldr	r3, [pc, #12]	; (9e7c <NewRemoteDownload+0x18>)
    9e6e:	781b      	ldrb	r3, [r3, #0]
}
    9e70:	1c18      	adds	r0, r3, #0
    9e72:	46bd      	mov	sp, r7
    9e74:	bd80      	pop	{r7, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	0000beed 	.word	0x0000beed
    9e7c:	200004bb 	.word	0x200004bb

00009e80 <AppProtocolBrake>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function  
//==============================================================================
void AppProtocolBrake(uint8_t *buffers)
{
    9e80:	b590      	push	{r4, r7, lr}
    9e82:	b08f      	sub	sp, #60	; 0x3c
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
	uint8_t length,i,match,temp,offset,goodmsg,checksum;  
	uint16_t x,y,z;
	uint32_t ltemp1,ltemp2;
	uint8_t *lptr; 

	if ((buffers[1] == '#')&&(buffers[0]>3))
    9e88:	687b      	ldr	r3, [r7, #4]
    9e8a:	3301      	adds	r3, #1
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	2b23      	cmp	r3, #35	; 0x23
    9e90:	d001      	beq.n	9e96 <AppProtocolBrake+0x16>
    9e92:	f000 ffbd 	bl	ae10 <AppProtocolBrake+0xf90>
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	781b      	ldrb	r3, [r3, #0]
    9e9a:	2b03      	cmp	r3, #3
    9e9c:	d801      	bhi.n	9ea2 <AppProtocolBrake+0x22>
    9e9e:	f000 ffb7 	bl	ae10 <AppProtocolBrake+0xf90>
		//--------------------------------
		// Qualify the received message - match is TRUE 
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
    9ea2:	1c3b      	adds	r3, r7, #0
    9ea4:	3336      	adds	r3, #54	; 0x36
    9ea6:	2200      	movs	r2, #0
    9ea8:	701a      	strb	r2, [r3, #0]
		goodmsg = FALSE;
    9eaa:	1c3b      	adds	r3, r7, #0
    9eac:	3334      	adds	r3, #52	; 0x34
    9eae:	2200      	movs	r2, #0
    9eb0:	701a      	strb	r2, [r3, #0]
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	3302      	adds	r3, #2
    9eb6:	781a      	ldrb	r2, [r3, #0]
    9eb8:	4bc9      	ldr	r3, [pc, #804]	; (a1e0 <AppProtocolBrake+0x360>)
    9eba:	7bdb      	ldrb	r3, [r3, #15]
    9ebc:	429a      	cmp	r2, r3
    9ebe:	d10a      	bne.n	9ed6 <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	3303      	adds	r3, #3
    9ec4:	781a      	ldrb	r2, [r3, #0]
    9ec6:	4bc6      	ldr	r3, [pc, #792]	; (a1e0 <AppProtocolBrake+0x360>)
    9ec8:	7c1b      	ldrb	r3, [r3, #16]
		// if the address is paired with the board. 
		// goodMsg = true if checksum/header/etc are good 
		//-----------------------------------
		match = FALSE; 
		goodmsg = FALSE;
		if((buffers[2] == table0.Item.EepromManDevSerial[4])&&
    9eca:	429a      	cmp	r2, r3
    9ecc:	d103      	bne.n	9ed6 <AppProtocolBrake+0x56>
			(buffers[3] == table0.Item.EepromManDevSerial[5]))
		{
			match = TRUE; 
    9ece:	1c3b      	adds	r3, r7, #0
    9ed0:	3336      	adds	r3, #54	; 0x36
    9ed2:	2201      	movs	r2, #1
    9ed4:	701a      	strb	r2, [r3, #0]
		}		
		//----------------
		// build the command
		itemp = buffers[4];
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	3304      	adds	r3, #4
    9eda:	781a      	ldrb	r2, [r3, #0]
    9edc:	1c3b      	adds	r3, r7, #0
    9ede:	332e      	adds	r3, #46	; 0x2e
    9ee0:	801a      	strh	r2, [r3, #0]
		itemp2 = buffers[5];
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	3305      	adds	r3, #5
    9ee6:	781a      	ldrb	r2, [r3, #0]
    9ee8:	1c3b      	adds	r3, r7, #0
    9eea:	332c      	adds	r3, #44	; 0x2c
    9eec:	801a      	strh	r2, [r3, #0]
		itemp = itemp<<8; 
    9eee:	1c3b      	adds	r3, r7, #0
    9ef0:	332e      	adds	r3, #46	; 0x2e
    9ef2:	1c3a      	adds	r2, r7, #0
    9ef4:	322e      	adds	r2, #46	; 0x2e
    9ef6:	8812      	ldrh	r2, [r2, #0]
    9ef8:	0212      	lsls	r2, r2, #8
    9efa:	801a      	strh	r2, [r3, #0]
		itemp |= itemp2; 
    9efc:	1c3b      	adds	r3, r7, #0
    9efe:	332e      	adds	r3, #46	; 0x2e
    9f00:	1c39      	adds	r1, r7, #0
    9f02:	312e      	adds	r1, #46	; 0x2e
    9f04:	1c3a      	adds	r2, r7, #0
    9f06:	322c      	adds	r2, #44	; 0x2c
    9f08:	8809      	ldrh	r1, [r1, #0]
    9f0a:	8812      	ldrh	r2, [r2, #0]
    9f0c:	430a      	orrs	r2, r1
    9f0e:	801a      	strh	r2, [r3, #0]
		command = itemp;
    9f10:	1c3b      	adds	r3, r7, #0
    9f12:	332a      	adds	r3, #42	; 0x2a
    9f14:	1c3a      	adds	r2, r7, #0
    9f16:	322e      	adds	r2, #46	; 0x2e
    9f18:	8812      	ldrh	r2, [r2, #0]
    9f1a:	801a      	strh	r2, [r3, #0]
		//----------------
		// get the length
		length = buffers[0];
    9f1c:	1c3b      	adds	r3, r7, #0
    9f1e:	3329      	adds	r3, #41	; 0x29
    9f20:	687a      	ldr	r2, [r7, #4]
    9f22:	7812      	ldrb	r2, [r2, #0]
    9f24:	701a      	strb	r2, [r3, #0]
	
		goodmsg = AppProtocolChecksum(&buffers[1],length-2);	
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	1c5a      	adds	r2, r3, #1
    9f2a:	1c3b      	adds	r3, r7, #0
    9f2c:	3329      	adds	r3, #41	; 0x29
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	b29b      	uxth	r3, r3
    9f32:	3b02      	subs	r3, #2
    9f34:	b29b      	uxth	r3, r3
    9f36:	1c3c      	adds	r4, r7, #0
    9f38:	3434      	adds	r4, #52	; 0x34
    9f3a:	1c10      	adds	r0, r2, #0
    9f3c:	1c19      	adds	r1, r3, #0
    9f3e:	4ba9      	ldr	r3, [pc, #676]	; (a1e4 <AppProtocolBrake+0x364>)
    9f40:	4798      	blx	r3
    9f42:	1c03      	adds	r3, r0, #0
    9f44:	7023      	strb	r3, [r4, #0]
		if (goodmsg == buffers[length-1])
    9f46:	1c3b      	adds	r3, r7, #0
    9f48:	3329      	adds	r3, #41	; 0x29
    9f4a:	781b      	ldrb	r3, [r3, #0]
    9f4c:	3b01      	subs	r3, #1
    9f4e:	687a      	ldr	r2, [r7, #4]
    9f50:	18d3      	adds	r3, r2, r3
    9f52:	781b      	ldrb	r3, [r3, #0]
    9f54:	1c3a      	adds	r2, r7, #0
    9f56:	3234      	adds	r2, #52	; 0x34
    9f58:	7812      	ldrb	r2, [r2, #0]
    9f5a:	429a      	cmp	r2, r3
    9f5c:	d104      	bne.n	9f68 <AppProtocolBrake+0xe8>
		{
			goodmsg = TRUE; 
    9f5e:	1c3b      	adds	r3, r7, #0
    9f60:	3334      	adds	r3, #52	; 0x34
    9f62:	2201      	movs	r2, #1
    9f64:	701a      	strb	r2, [r3, #0]
    9f66:	e003      	b.n	9f70 <AppProtocolBrake+0xf0>
		}
		else
		{
			goodmsg = FALSE; 
    9f68:	1c3b      	adds	r3, r7, #0
    9f6a:	3334      	adds	r3, #52	; 0x34
    9f6c:	2200      	movs	r2, #0
    9f6e:	701a      	strb	r2, [r3, #0]
		}
								
		if ((((command == MSG_PR)&&(buffers[2] == 0xff)&&(buffers[3]==0xff)) ||
    9f70:	1c3b      	adds	r3, r7, #0
    9f72:	332a      	adds	r3, #42	; 0x2a
    9f74:	881a      	ldrh	r2, [r3, #0]
    9f76:	4b9c      	ldr	r3, [pc, #624]	; (a1e8 <AppProtocolBrake+0x368>)
    9f78:	429a      	cmp	r2, r3
    9f7a:	d109      	bne.n	9f90 <AppProtocolBrake+0x110>
    9f7c:	687b      	ldr	r3, [r7, #4]
    9f7e:	3302      	adds	r3, #2
    9f80:	781b      	ldrb	r3, [r3, #0]
    9f82:	2bff      	cmp	r3, #255	; 0xff
    9f84:	d104      	bne.n	9f90 <AppProtocolBrake+0x110>
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	3303      	adds	r3, #3
    9f8a:	781b      	ldrb	r3, [r3, #0]
    9f8c:	2bff      	cmp	r3, #255	; 0xff
    9f8e:	d00e      	beq.n	9fae <AppProtocolBrake+0x12e>
    9f90:	1c3b      	adds	r3, r7, #0
    9f92:	332a      	adds	r3, #42	; 0x2a
    9f94:	881a      	ldrh	r2, [r3, #0]
    9f96:	4b94      	ldr	r3, [pc, #592]	; (a1e8 <AppProtocolBrake+0x368>)
    9f98:	429a      	cmp	r2, r3
    9f9a:	d101      	bne.n	9fa0 <AppProtocolBrake+0x120>
    9f9c:	f000 ff38 	bl	ae10 <AppProtocolBrake+0xf90>
			((command != MSG_PR)&&(match == TRUE)))&&(goodmsg == TRUE))
    9fa0:	1c3b      	adds	r3, r7, #0
    9fa2:	3336      	adds	r3, #54	; 0x36
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	2b01      	cmp	r3, #1
    9fa8:	d001      	beq.n	9fae <AppProtocolBrake+0x12e>
    9faa:	f000 ff31 	bl	ae10 <AppProtocolBrake+0xf90>
    9fae:	1c3b      	adds	r3, r7, #0
    9fb0:	3334      	adds	r3, #52	; 0x34
    9fb2:	781b      	ldrb	r3, [r3, #0]
    9fb4:	2b01      	cmp	r3, #1
    9fb6:	d001      	beq.n	9fbc <AppProtocolBrake+0x13c>
    9fb8:	f000 ff2a 	bl	ae10 <AppProtocolBrake+0xf90>
		{
	
			if ((buffers[1] == '#')&&(length>3))
    9fbc:	687b      	ldr	r3, [r7, #4]
    9fbe:	3301      	adds	r3, #1
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	2b23      	cmp	r3, #35	; 0x23
    9fc4:	d001      	beq.n	9fca <AppProtocolBrake+0x14a>
    9fc6:	f000 ff23 	bl	ae10 <AppProtocolBrake+0xf90>
    9fca:	1c3b      	adds	r3, r7, #0
    9fcc:	3329      	adds	r3, #41	; 0x29
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	2b03      	cmp	r3, #3
    9fd2:	d801      	bhi.n	9fd8 <AppProtocolBrake+0x158>
    9fd4:	f000 ff1c 	bl	ae10 <AppProtocolBrake+0xf90>
			{
				commSupTimer = COMM_SUP_TIME; 
    9fd8:	4b84      	ldr	r3, [pc, #528]	; (a1ec <AppProtocolBrake+0x36c>)
    9fda:	22fa      	movs	r2, #250	; 0xfa
    9fdc:	0052      	lsls	r2, r2, #1
    9fde:	801a      	strh	r2, [r3, #0]
				commFailureCount = 0; 
    9fe0:	4b83      	ldr	r3, [pc, #524]	; (a1f0 <AppProtocolBrake+0x370>)
    9fe2:	2200      	movs	r2, #0
    9fe4:	701a      	strb	r2, [r3, #0]
				commErrorCount = 0; 	
    9fe6:	4b83      	ldr	r3, [pc, #524]	; (a1f4 <AppProtocolBrake+0x374>)
    9fe8:	2200      	movs	r2, #0
    9fea:	701a      	strb	r2, [r3, #0]
				brakeStatus.BrakeState &= ~BRAKESTATE_COMMERROR; 
    9fec:	4b82      	ldr	r3, [pc, #520]	; (a1f8 <AppProtocolBrake+0x378>)
    9fee:	791b      	ldrb	r3, [r3, #4]
    9ff0:	2201      	movs	r2, #1
    9ff2:	4393      	bics	r3, r2
    9ff4:	b2da      	uxtb	r2, r3
    9ff6:	4b80      	ldr	r3, [pc, #512]	; (a1f8 <AppProtocolBrake+0x378>)
    9ff8:	711a      	strb	r2, [r3, #4]
					
				if ((command == MSG_STATUS)||(command == MSG_FV)||(command==0x5245)||(command==0x5241))		
    9ffa:	1c3b      	adds	r3, r7, #0
    9ffc:	332a      	adds	r3, #42	; 0x2a
    9ffe:	881a      	ldrh	r2, [r3, #0]
    a000:	4b7e      	ldr	r3, [pc, #504]	; (a1fc <AppProtocolBrake+0x37c>)
    a002:	429a      	cmp	r2, r3
    a004:	d012      	beq.n	a02c <AppProtocolBrake+0x1ac>
    a006:	1c3b      	adds	r3, r7, #0
    a008:	332a      	adds	r3, #42	; 0x2a
    a00a:	881a      	ldrh	r2, [r3, #0]
    a00c:	4b7c      	ldr	r3, [pc, #496]	; (a200 <AppProtocolBrake+0x380>)
    a00e:	429a      	cmp	r2, r3
    a010:	d00c      	beq.n	a02c <AppProtocolBrake+0x1ac>
    a012:	1c3b      	adds	r3, r7, #0
    a014:	332a      	adds	r3, #42	; 0x2a
    a016:	881a      	ldrh	r2, [r3, #0]
    a018:	4b7a      	ldr	r3, [pc, #488]	; (a204 <AppProtocolBrake+0x384>)
    a01a:	429a      	cmp	r2, r3
    a01c:	d006      	beq.n	a02c <AppProtocolBrake+0x1ac>
    a01e:	1c3b      	adds	r3, r7, #0
    a020:	332a      	adds	r3, #42	; 0x2a
    a022:	881a      	ldrh	r2, [r3, #0]
    a024:	4b78      	ldr	r3, [pc, #480]	; (a208 <AppProtocolBrake+0x388>)
    a026:	429a      	cmp	r2, r3
    a028:	d000      	beq.n	a02c <AppProtocolBrake+0x1ac>
    a02a:	e0a7      	b.n	a17c <AppProtocolBrake+0x2fc>
				{
						remoteStatus = buffers[7];
    a02c:	687b      	ldr	r3, [r7, #4]
    a02e:	79da      	ldrb	r2, [r3, #7]
    a030:	4b76      	ldr	r3, [pc, #472]	; (a20c <AppProtocolBrake+0x38c>)
    a032:	701a      	strb	r2, [r3, #0]
						remoteForce = buffers[8]; 
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	7a1a      	ldrb	r2, [r3, #8]
    a038:	4b75      	ldr	r3, [pc, #468]	; (a210 <AppProtocolBrake+0x390>)
    a03a:	701a      	strb	r2, [r3, #0]
						remoteSettings = buffers[9];
    a03c:	687b      	ldr	r3, [r7, #4]
    a03e:	7a5a      	ldrb	r2, [r3, #9]
    a040:	4b74      	ldr	r3, [pc, #464]	; (a214 <AppProtocolBrake+0x394>)
    a042:	701a      	strb	r2, [r3, #0]
						//-----------------------force setting
						if ((remoteForce & 0x0f) != (table0.Item.MaxForce))	
    a044:	4b72      	ldr	r3, [pc, #456]	; (a210 <AppProtocolBrake+0x390>)
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	1c1a      	adds	r2, r3, #0
    a04a:	230f      	movs	r3, #15
    a04c:	401a      	ands	r2, r3
    a04e:	4b64      	ldr	r3, [pc, #400]	; (a1e0 <AppProtocolBrake+0x360>)
    a050:	789b      	ldrb	r3, [r3, #2]
    a052:	429a      	cmp	r2, r3
    a054:	d00c      	beq.n	a070 <AppProtocolBrake+0x1f0>
						{
							table0.Item.MaxForce = remoteForce & 0x0f; 
    a056:	4b6e      	ldr	r3, [pc, #440]	; (a210 <AppProtocolBrake+0x390>)
    a058:	781a      	ldrb	r2, [r3, #0]
    a05a:	230f      	movs	r3, #15
    a05c:	4013      	ands	r3, r2
    a05e:	b2da      	uxtb	r2, r3
    a060:	4b5f      	ldr	r3, [pc, #380]	; (a1e0 <AppProtocolBrake+0x360>)
    a062:	709a      	strb	r2, [r3, #2]
							ConfigUpdate(table0.Item.MaxForce,MaxForce_Setting);
    a064:	4b5e      	ldr	r3, [pc, #376]	; (a1e0 <AppProtocolBrake+0x360>)
    a066:	789b      	ldrb	r3, [r3, #2]
    a068:	1c18      	adds	r0, r3, #0
    a06a:	212a      	movs	r1, #42	; 0x2a
    a06c:	4b6a      	ldr	r3, [pc, #424]	; (a218 <AppProtocolBrake+0x398>)
    a06e:	4798      	blx	r3
						}
						//--------------------- max force set 
						temp = remoteForce >>4; 
    a070:	4b67      	ldr	r3, [pc, #412]	; (a210 <AppProtocolBrake+0x390>)
    a072:	781a      	ldrb	r2, [r3, #0]
    a074:	1c3b      	adds	r3, r7, #0
    a076:	3335      	adds	r3, #53	; 0x35
    a078:	0912      	lsrs	r2, r2, #4
    a07a:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f; 
    a07c:	1c3b      	adds	r3, r7, #0
    a07e:	3335      	adds	r3, #53	; 0x35
    a080:	1c3a      	adds	r2, r7, #0
    a082:	3235      	adds	r2, #53	; 0x35
    a084:	7811      	ldrb	r1, [r2, #0]
    a086:	220f      	movs	r2, #15
    a088:	400a      	ands	r2, r1
    a08a:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.ForceMaxSet))	
    a08c:	4b54      	ldr	r3, [pc, #336]	; (a1e0 <AppProtocolBrake+0x360>)
    a08e:	7d9b      	ldrb	r3, [r3, #22]
    a090:	1c3a      	adds	r2, r7, #0
    a092:	3235      	adds	r2, #53	; 0x35
    a094:	7812      	ldrb	r2, [r2, #0]
    a096:	429a      	cmp	r2, r3
    a098:	d00d      	beq.n	a0b6 <AppProtocolBrake+0x236>
						{
							table0.Item.ForceMaxSet = temp & 0x0f; 
    a09a:	1c3b      	adds	r3, r7, #0
    a09c:	3335      	adds	r3, #53	; 0x35
    a09e:	781a      	ldrb	r2, [r3, #0]
    a0a0:	230f      	movs	r3, #15
    a0a2:	4013      	ands	r3, r2
    a0a4:	b2da      	uxtb	r2, r3
    a0a6:	4b4e      	ldr	r3, [pc, #312]	; (a1e0 <AppProtocolBrake+0x360>)
    a0a8:	759a      	strb	r2, [r3, #22]
							ConfigUpdate(table0.Item.ForceMaxSet,ForceMaxSetting);
    a0aa:	4b4d      	ldr	r3, [pc, #308]	; (a1e0 <AppProtocolBrake+0x360>)
    a0ac:	7d9b      	ldrb	r3, [r3, #22]
    a0ae:	1c18      	adds	r0, r3, #0
    a0b0:	213e      	movs	r1, #62	; 0x3e
    a0b2:	4b59      	ldr	r3, [pc, #356]	; (a218 <AppProtocolBrake+0x398>)
    a0b4:	4798      	blx	r3
						}					
						//-------------------handle active brake enable setting 	
						//--------------------- sensitivity set
						temp = remoteSettings >>4;
    a0b6:	4b57      	ldr	r3, [pc, #348]	; (a214 <AppProtocolBrake+0x394>)
    a0b8:	781a      	ldrb	r2, [r3, #0]
    a0ba:	1c3b      	adds	r3, r7, #0
    a0bc:	3335      	adds	r3, #53	; 0x35
    a0be:	0912      	lsrs	r2, r2, #4
    a0c0:	701a      	strb	r2, [r3, #0]
						temp &= 0x0f;
    a0c2:	1c3b      	adds	r3, r7, #0
    a0c4:	3335      	adds	r3, #53	; 0x35
    a0c6:	1c3a      	adds	r2, r7, #0
    a0c8:	3235      	adds	r2, #53	; 0x35
    a0ca:	7811      	ldrb	r1, [r2, #0]
    a0cc:	220f      	movs	r2, #15
    a0ce:	400a      	ands	r2, r1
    a0d0:	701a      	strb	r2, [r3, #0]
						if ((temp) != (table0.Item.SensitivitySet))
    a0d2:	4b43      	ldr	r3, [pc, #268]	; (a1e0 <AppProtocolBrake+0x360>)
    a0d4:	7edb      	ldrb	r3, [r3, #27]
    a0d6:	1c3a      	adds	r2, r7, #0
    a0d8:	3235      	adds	r2, #53	; 0x35
    a0da:	7812      	ldrb	r2, [r2, #0]
    a0dc:	429a      	cmp	r2, r3
    a0de:	d00d      	beq.n	a0fc <AppProtocolBrake+0x27c>
						{
							table0.Item.SensitivitySet= temp & 0x0f;
    a0e0:	1c3b      	adds	r3, r7, #0
    a0e2:	3335      	adds	r3, #53	; 0x35
    a0e4:	781a      	ldrb	r2, [r3, #0]
    a0e6:	230f      	movs	r3, #15
    a0e8:	4013      	ands	r3, r2
    a0ea:	b2da      	uxtb	r2, r3
    a0ec:	4b3c      	ldr	r3, [pc, #240]	; (a1e0 <AppProtocolBrake+0x360>)
    a0ee:	76da      	strb	r2, [r3, #27]
							ConfigUpdate(table0.Item.SensitivitySet,SensitivitySetting);
    a0f0:	4b3b      	ldr	r3, [pc, #236]	; (a1e0 <AppProtocolBrake+0x360>)
    a0f2:	7edb      	ldrb	r3, [r3, #27]
    a0f4:	1c18      	adds	r0, r3, #0
    a0f6:	2143      	movs	r1, #67	; 0x43
    a0f8:	4b47      	ldr	r3, [pc, #284]	; (a218 <AppProtocolBrake+0x398>)
    a0fa:	4798      	blx	r3
						}					
						temp = 0; 
    a0fc:	1c3b      	adds	r3, r7, #0
    a0fe:	3335      	adds	r3, #53	; 0x35
    a100:	2200      	movs	r2, #0
    a102:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_ACTIVEBRAKEENABLE)!= FALSE)
    a104:	4b43      	ldr	r3, [pc, #268]	; (a214 <AppProtocolBrake+0x394>)
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	1c1a      	adds	r2, r3, #0
    a10a:	2301      	movs	r3, #1
    a10c:	4013      	ands	r3, r2
    a10e:	d003      	beq.n	a118 <AppProtocolBrake+0x298>
						{
							temp = TRUE; 
    a110:	1c3b      	adds	r3, r7, #0
    a112:	3335      	adds	r3, #53	; 0x35
    a114:	2201      	movs	r2, #1
    a116:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.ActiveBrakeEnable)	
    a118:	4b31      	ldr	r3, [pc, #196]	; (a1e0 <AppProtocolBrake+0x360>)
    a11a:	7ddb      	ldrb	r3, [r3, #23]
    a11c:	1c3a      	adds	r2, r7, #0
    a11e:	3235      	adds	r2, #53	; 0x35
    a120:	7812      	ldrb	r2, [r2, #0]
    a122:	429a      	cmp	r2, r3
    a124:	d00a      	beq.n	a13c <AppProtocolBrake+0x2bc>
						{
							table0.Item.ActiveBrakeEnable = temp;
    a126:	4b2e      	ldr	r3, [pc, #184]	; (a1e0 <AppProtocolBrake+0x360>)
    a128:	1c3a      	adds	r2, r7, #0
    a12a:	3235      	adds	r2, #53	; 0x35
    a12c:	7812      	ldrb	r2, [r2, #0]
    a12e:	75da      	strb	r2, [r3, #23]
							ConfigUpdate(table0.Item.ActiveBrakeEnable,ActiveBrakeEnableSetting);
    a130:	4b2b      	ldr	r3, [pc, #172]	; (a1e0 <AppProtocolBrake+0x360>)
    a132:	7ddb      	ldrb	r3, [r3, #23]
    a134:	1c18      	adds	r0, r3, #0
    a136:	213f      	movs	r1, #63	; 0x3f
    a138:	4b37      	ldr	r3, [pc, #220]	; (a218 <AppProtocolBrake+0x398>)
    a13a:	4798      	blx	r3
						}			
						//-------------------handle TPMS Enable setting 	
						temp = 0; 
    a13c:	1c3b      	adds	r3, r7, #0
    a13e:	3335      	adds	r3, #53	; 0x35
    a140:	2200      	movs	r2, #0
    a142:	701a      	strb	r2, [r3, #0]
						if ((remoteSettings & REMOTE_TPMSENABLE)!= FALSE)
    a144:	4b33      	ldr	r3, [pc, #204]	; (a214 <AppProtocolBrake+0x394>)
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	1c1a      	adds	r2, r3, #0
    a14a:	2302      	movs	r3, #2
    a14c:	4013      	ands	r3, r2
    a14e:	d003      	beq.n	a158 <AppProtocolBrake+0x2d8>
						{
							temp = TRUE; 
    a150:	1c3b      	adds	r3, r7, #0
    a152:	3335      	adds	r3, #53	; 0x35
    a154:	2201      	movs	r2, #1
    a156:	701a      	strb	r2, [r3, #0]
						}
						if (temp != table0.Item.TPMSEnable)	
    a158:	4b21      	ldr	r3, [pc, #132]	; (a1e0 <AppProtocolBrake+0x360>)
    a15a:	7e1b      	ldrb	r3, [r3, #24]
    a15c:	1c3a      	adds	r2, r7, #0
    a15e:	3235      	adds	r2, #53	; 0x35
    a160:	7812      	ldrb	r2, [r2, #0]
    a162:	429a      	cmp	r2, r3
    a164:	d00a      	beq.n	a17c <AppProtocolBrake+0x2fc>
						{
							table0.Item.TPMSEnable = temp;
    a166:	4b1e      	ldr	r3, [pc, #120]	; (a1e0 <AppProtocolBrake+0x360>)
    a168:	1c3a      	adds	r2, r7, #0
    a16a:	3235      	adds	r2, #53	; 0x35
    a16c:	7812      	ldrb	r2, [r2, #0]
    a16e:	761a      	strb	r2, [r3, #24]
							ConfigUpdate(table0.Item.TPMSEnable,TPMSEnableSetting);
    a170:	4b1b      	ldr	r3, [pc, #108]	; (a1e0 <AppProtocolBrake+0x360>)
    a172:	7e1b      	ldrb	r3, [r3, #24]
    a174:	1c18      	adds	r0, r3, #0
    a176:	2140      	movs	r1, #64	; 0x40
    a178:	4b27      	ldr	r3, [pc, #156]	; (a218 <AppProtocolBrake+0x398>)
    a17a:	4798      	blx	r3
						}																		
				}
				switch (command)
    a17c:	1c3b      	adds	r3, r7, #0
    a17e:	332a      	adds	r3, #42	; 0x2a
    a180:	881b      	ldrh	r3, [r3, #0]
    a182:	4a19      	ldr	r2, [pc, #100]	; (a1e8 <AppProtocolBrake+0x368>)
    a184:	4293      	cmp	r3, r2
    a186:	d100      	bne.n	a18a <AppProtocolBrake+0x30a>
    a188:	e2ce      	b.n	a728 <AppProtocolBrake+0x8a8>
    a18a:	4a17      	ldr	r2, [pc, #92]	; (a1e8 <AppProtocolBrake+0x368>)
    a18c:	4293      	cmp	r3, r2
    a18e:	dc0c      	bgt.n	a1aa <AppProtocolBrake+0x32a>
    a190:	4a22      	ldr	r2, [pc, #136]	; (a21c <AppProtocolBrake+0x39c>)
    a192:	4293      	cmp	r3, r2
    a194:	d048      	beq.n	a228 <AppProtocolBrake+0x3a8>
    a196:	4a1a      	ldr	r2, [pc, #104]	; (a200 <AppProtocolBrake+0x380>)
    a198:	4293      	cmp	r3, r2
    a19a:	d100      	bne.n	a19e <AppProtocolBrake+0x31e>
    a19c:	e305      	b.n	a7aa <AppProtocolBrake+0x92a>
    a19e:	4a17      	ldr	r2, [pc, #92]	; (a1fc <AppProtocolBrake+0x37c>)
    a1a0:	4293      	cmp	r3, r2
    a1a2:	d100      	bne.n	a1a6 <AppProtocolBrake+0x326>
    a1a4:	e36e      	b.n	a884 <AppProtocolBrake+0xa04>
    a1a6:	f000 fe33 	bl	ae10 <AppProtocolBrake+0xf90>
    a1aa:	4a16      	ldr	r2, [pc, #88]	; (a204 <AppProtocolBrake+0x384>)
    a1ac:	4293      	cmp	r3, r2
    a1ae:	d101      	bne.n	a1b4 <AppProtocolBrake+0x334>
    a1b0:	f000 fc2a 	bl	aa08 <AppProtocolBrake+0xb88>
    a1b4:	4a13      	ldr	r2, [pc, #76]	; (a204 <AppProtocolBrake+0x384>)
    a1b6:	4293      	cmp	r3, r2
    a1b8:	dc06      	bgt.n	a1c8 <AppProtocolBrake+0x348>
    a1ba:	4a13      	ldr	r2, [pc, #76]	; (a208 <AppProtocolBrake+0x388>)
    a1bc:	4293      	cmp	r3, r2
    a1be:	d101      	bne.n	a1c4 <AppProtocolBrake+0x344>
    a1c0:	f000 fc6f 	bl	aaa2 <AppProtocolBrake+0xc22>
    a1c4:	f000 fe24 	bl	ae10 <AppProtocolBrake+0xf90>
    a1c8:	4a15      	ldr	r2, [pc, #84]	; (a220 <AppProtocolBrake+0x3a0>)
    a1ca:	4293      	cmp	r3, r2
    a1cc:	d101      	bne.n	a1d2 <AppProtocolBrake+0x352>
    a1ce:	f000 fcf9 	bl	abc4 <AppProtocolBrake+0xd44>
    a1d2:	4a14      	ldr	r2, [pc, #80]	; (a224 <AppProtocolBrake+0x3a4>)
    a1d4:	4293      	cmp	r3, r2
    a1d6:	d100      	bne.n	a1da <AppProtocolBrake+0x35a>
    a1d8:	e269      	b.n	a6ae <AppProtocolBrake+0x82e>
    a1da:	f000 fe19 	bl	ae10 <AppProtocolBrake+0xf90>
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	20002fb8 	.word	0x20002fb8
    a1e4:	00009e01 	.word	0x00009e01
    a1e8:	0000504d 	.word	0x0000504d
    a1ec:	200036ba 	.word	0x200036ba
    a1f0:	200036b8 	.word	0x200036b8
    a1f4:	200036b1 	.word	0x200036b1
    a1f8:	20003694 	.word	0x20003694
    a1fc:	0000424d 	.word	0x0000424d
    a200:	0000464d 	.word	0x0000464d
    a204:	00005245 	.word	0x00005245
    a208:	00005241 	.word	0x00005241
    a20c:	20002f1c 	.word	0x20002f1c
    a210:	20002efa 	.word	0x20002efa
    a214:	20002fb6 	.word	0x20002fb6
    a218:	0000b259 	.word	0x0000b259
    a21c:	00004452 	.word	0x00004452
    a220:	00005254 	.word	0x00005254
    a224:	00005357 	.word	0x00005357
					case 0x4452:
					{
						//----------------------------------
						// check the offset and see if download mode. 
						//----------------------------------
						protocolBuffer[0] = '#';
    a228:	4bd3      	ldr	r3, [pc, #844]	; (a578 <AppProtocolBrake+0x6f8>)
    a22a:	2223      	movs	r2, #35	; 0x23
    a22c:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a22e:	4bd3      	ldr	r3, [pc, #844]	; (a57c <AppProtocolBrake+0x6fc>)
    a230:	7bda      	ldrb	r2, [r3, #15]
    a232:	4bd1      	ldr	r3, [pc, #836]	; (a578 <AppProtocolBrake+0x6f8>)
    a234:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a236:	4bd1      	ldr	r3, [pc, #836]	; (a57c <AppProtocolBrake+0x6fc>)
    a238:	7c1a      	ldrb	r2, [r3, #16]
    a23a:	4bcf      	ldr	r3, [pc, #828]	; (a578 <AppProtocolBrake+0x6f8>)
    a23c:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'D';
    a23e:	4bce      	ldr	r3, [pc, #824]	; (a578 <AppProtocolBrake+0x6f8>)
    a240:	2244      	movs	r2, #68	; 0x44
    a242:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'R';
    a244:	4bcc      	ldr	r3, [pc, #816]	; (a578 <AppProtocolBrake+0x6f8>)
    a246:	2252      	movs	r2, #82	; 0x52
    a248:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0; //length 
    a24a:	4bcb      	ldr	r3, [pc, #812]	; (a578 <AppProtocolBrake+0x6f8>)
    a24c:	2200      	movs	r2, #0
    a24e:	715a      	strb	r2, [r3, #5]
						if ((NewRemoteDownload()==TRUE)&&(bluetoothAwake!=0))
    a250:	4bcb      	ldr	r3, [pc, #812]	; (a580 <AppProtocolBrake+0x700>)
    a252:	4798      	blx	r3
    a254:	1c03      	adds	r3, r0, #0
    a256:	2b01      	cmp	r3, #1
    a258:	d000      	beq.n	a25c <AppProtocolBrake+0x3dc>
    a25a:	e1e1      	b.n	a620 <AppProtocolBrake+0x7a0>
    a25c:	4bc9      	ldr	r3, [pc, #804]	; (a584 <AppProtocolBrake+0x704>)
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	2b00      	cmp	r3, #0
    a262:	d100      	bne.n	a266 <AppProtocolBrake+0x3e6>
    a264:	e1dc      	b.n	a620 <AppProtocolBrake+0x7a0>
						{
							//----------------
							// build the offset
							itemp = buffers[7];
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	3307      	adds	r3, #7
    a26a:	781a      	ldrb	r2, [r3, #0]
    a26c:	1c3b      	adds	r3, r7, #0
    a26e:	332e      	adds	r3, #46	; 0x2e
    a270:	801a      	strh	r2, [r3, #0]
							itemp2 = buffers[8];
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	3308      	adds	r3, #8
    a276:	781a      	ldrb	r2, [r3, #0]
    a278:	1c3b      	adds	r3, r7, #0
    a27a:	332c      	adds	r3, #44	; 0x2c
    a27c:	801a      	strh	r2, [r3, #0]
							itemp = itemp<<8; 
    a27e:	1c3b      	adds	r3, r7, #0
    a280:	332e      	adds	r3, #46	; 0x2e
    a282:	1c3a      	adds	r2, r7, #0
    a284:	322e      	adds	r2, #46	; 0x2e
    a286:	8812      	ldrh	r2, [r2, #0]
    a288:	0212      	lsls	r2, r2, #8
    a28a:	801a      	strh	r2, [r3, #0]
							itemp |= itemp2; 
    a28c:	1c3b      	adds	r3, r7, #0
    a28e:	332e      	adds	r3, #46	; 0x2e
    a290:	1c39      	adds	r1, r7, #0
    a292:	312e      	adds	r1, #46	; 0x2e
    a294:	1c3a      	adds	r2, r7, #0
    a296:	322c      	adds	r2, #44	; 0x2c
    a298:	8809      	ldrh	r1, [r1, #0]
    a29a:	8812      	ldrh	r2, [r2, #0]
    a29c:	430a      	orrs	r2, r1
    a29e:	801a      	strh	r2, [r3, #0]
							doffset = itemp;						
    a2a0:	1c3b      	adds	r3, r7, #0
    a2a2:	3326      	adds	r3, #38	; 0x26
    a2a4:	1c3a      	adds	r2, r7, #0
    a2a6:	322e      	adds	r2, #46	; 0x2e
    a2a8:	8812      	ldrh	r2, [r2, #0]
    a2aa:	801a      	strh	r2, [r3, #0]
							if (doffset == 0)
    a2ac:	1c3b      	adds	r3, r7, #0
    a2ae:	3326      	adds	r3, #38	; 0x26
    a2b0:	881b      	ldrh	r3, [r3, #0]
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d000      	beq.n	a2b8 <AppProtocolBrake+0x438>
    a2b6:	e0ef      	b.n	a498 <AppProtocolBrake+0x618>
							{
								protocolBuffer[5] = 28; 
    a2b8:	4baf      	ldr	r3, [pc, #700]	; (a578 <AppProtocolBrake+0x6f8>)
    a2ba:	221c      	movs	r2, #28
    a2bc:	715a      	strb	r2, [r3, #5]
								//----------offset 
								protocolBuffer[6] = 0x00;
    a2be:	4bae      	ldr	r3, [pc, #696]	; (a578 <AppProtocolBrake+0x6f8>)
    a2c0:	2200      	movs	r2, #0
    a2c2:	719a      	strb	r2, [r3, #6]
								protocolBuffer[7] = 0x00;
    a2c4:	4bac      	ldr	r3, [pc, #688]	; (a578 <AppProtocolBrake+0x6f8>)
    a2c6:	2200      	movs	r2, #0
    a2c8:	71da      	strb	r2, [r3, #7]
							//----------length 							
								//-------file length, 4 bytes
								ltemp1 = newRemoteInfo.appLength >>24;
    a2ca:	4baf      	ldr	r3, [pc, #700]	; (a588 <AppProtocolBrake+0x708>)
    a2cc:	685b      	ldr	r3, [r3, #4]
    a2ce:	0e1b      	lsrs	r3, r3, #24
    a2d0:	623b      	str	r3, [r7, #32]
								protocolBuffer[8] = ltemp1; 
    a2d2:	6a3b      	ldr	r3, [r7, #32]
    a2d4:	b2da      	uxtb	r2, r3
    a2d6:	4ba8      	ldr	r3, [pc, #672]	; (a578 <AppProtocolBrake+0x6f8>)
    a2d8:	721a      	strb	r2, [r3, #8]
								ltemp1 = newRemoteInfo.appLength >>16; 
    a2da:	4bab      	ldr	r3, [pc, #684]	; (a588 <AppProtocolBrake+0x708>)
    a2dc:	685b      	ldr	r3, [r3, #4]
    a2de:	0c1b      	lsrs	r3, r3, #16
    a2e0:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a2e2:	6a3a      	ldr	r2, [r7, #32]
    a2e4:	23ff      	movs	r3, #255	; 0xff
    a2e6:	4013      	ands	r3, r2
    a2e8:	623b      	str	r3, [r7, #32]
								protocolBuffer[9] = ltemp1; 
    a2ea:	6a3b      	ldr	r3, [r7, #32]
    a2ec:	b2da      	uxtb	r2, r3
    a2ee:	4ba2      	ldr	r3, [pc, #648]	; (a578 <AppProtocolBrake+0x6f8>)
    a2f0:	725a      	strb	r2, [r3, #9]
								ltemp1 = newRemoteInfo.appLength >>8; 
    a2f2:	4ba5      	ldr	r3, [pc, #660]	; (a588 <AppProtocolBrake+0x708>)
    a2f4:	685b      	ldr	r3, [r3, #4]
    a2f6:	0a1b      	lsrs	r3, r3, #8
    a2f8:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a2fa:	6a3a      	ldr	r2, [r7, #32]
    a2fc:	23ff      	movs	r3, #255	; 0xff
    a2fe:	4013      	ands	r3, r2
    a300:	623b      	str	r3, [r7, #32]
								protocolBuffer[10] = ltemp1; 
    a302:	6a3b      	ldr	r3, [r7, #32]
    a304:	b2da      	uxtb	r2, r3
    a306:	4b9c      	ldr	r3, [pc, #624]	; (a578 <AppProtocolBrake+0x6f8>)
    a308:	729a      	strb	r2, [r3, #10]
								ltemp1 = newRemoteInfo.appLength; 
    a30a:	4b9f      	ldr	r3, [pc, #636]	; (a588 <AppProtocolBrake+0x708>)
    a30c:	685b      	ldr	r3, [r3, #4]
    a30e:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a310:	6a3a      	ldr	r2, [r7, #32]
    a312:	23ff      	movs	r3, #255	; 0xff
    a314:	4013      	ands	r3, r2
    a316:	623b      	str	r3, [r7, #32]
								protocolBuffer[11] = ltemp1; 	
    a318:	6a3b      	ldr	r3, [r7, #32]
    a31a:	b2da      	uxtb	r2, r3
    a31c:	4b96      	ldr	r3, [pc, #600]	; (a578 <AppProtocolBrake+0x6f8>)
    a31e:	72da      	strb	r2, [r3, #11]
								//-------file checksum, 4 bytes
								ltemp1 = newRemoteInfo.checksum >>24;
    a320:	4b99      	ldr	r3, [pc, #612]	; (a588 <AppProtocolBrake+0x708>)
    a322:	681b      	ldr	r3, [r3, #0]
    a324:	0e1b      	lsrs	r3, r3, #24
    a326:	623b      	str	r3, [r7, #32]
								protocolBuffer[12] = ltemp1; 
    a328:	6a3b      	ldr	r3, [r7, #32]
    a32a:	b2da      	uxtb	r2, r3
    a32c:	4b92      	ldr	r3, [pc, #584]	; (a578 <AppProtocolBrake+0x6f8>)
    a32e:	731a      	strb	r2, [r3, #12]
								ltemp1 = newRemoteInfo.checksum >>16; 
    a330:	4b95      	ldr	r3, [pc, #596]	; (a588 <AppProtocolBrake+0x708>)
    a332:	681b      	ldr	r3, [r3, #0]
    a334:	0c1b      	lsrs	r3, r3, #16
    a336:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a338:	6a3a      	ldr	r2, [r7, #32]
    a33a:	23ff      	movs	r3, #255	; 0xff
    a33c:	4013      	ands	r3, r2
    a33e:	623b      	str	r3, [r7, #32]
								protocolBuffer[13] = ltemp1; 
    a340:	6a3b      	ldr	r3, [r7, #32]
    a342:	b2da      	uxtb	r2, r3
    a344:	4b8c      	ldr	r3, [pc, #560]	; (a578 <AppProtocolBrake+0x6f8>)
    a346:	735a      	strb	r2, [r3, #13]
								ltemp1 = newRemoteInfo.checksum >>8; 
    a348:	4b8f      	ldr	r3, [pc, #572]	; (a588 <AppProtocolBrake+0x708>)
    a34a:	681b      	ldr	r3, [r3, #0]
    a34c:	0a1b      	lsrs	r3, r3, #8
    a34e:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a350:	6a3a      	ldr	r2, [r7, #32]
    a352:	23ff      	movs	r3, #255	; 0xff
    a354:	4013      	ands	r3, r2
    a356:	623b      	str	r3, [r7, #32]
								protocolBuffer[14] = ltemp1; 
    a358:	6a3b      	ldr	r3, [r7, #32]
    a35a:	b2da      	uxtb	r2, r3
    a35c:	4b86      	ldr	r3, [pc, #536]	; (a578 <AppProtocolBrake+0x6f8>)
    a35e:	739a      	strb	r2, [r3, #14]
								ltemp1 = newRemoteInfo.checksum; 
    a360:	4b89      	ldr	r3, [pc, #548]	; (a588 <AppProtocolBrake+0x708>)
    a362:	681b      	ldr	r3, [r3, #0]
    a364:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a366:	6a3a      	ldr	r2, [r7, #32]
    a368:	23ff      	movs	r3, #255	; 0xff
    a36a:	4013      	ands	r3, r2
    a36c:	623b      	str	r3, [r7, #32]
								protocolBuffer[15] = ltemp1; 		
    a36e:	6a3b      	ldr	r3, [r7, #32]
    a370:	b2da      	uxtb	r2, r3
    a372:	4b81      	ldr	r3, [pc, #516]	; (a578 <AppProtocolBrake+0x6f8>)
    a374:	73da      	strb	r2, [r3, #15]
								//-------file checksum start, 4 bytes
								ltemp1 = newRemoteInfo.checksumStartOffset >>24;
    a376:	4b84      	ldr	r3, [pc, #528]	; (a588 <AppProtocolBrake+0x708>)
    a378:	689b      	ldr	r3, [r3, #8]
    a37a:	0e1b      	lsrs	r3, r3, #24
    a37c:	623b      	str	r3, [r7, #32]
								protocolBuffer[16] = ltemp1; 
    a37e:	6a3b      	ldr	r3, [r7, #32]
    a380:	b2da      	uxtb	r2, r3
    a382:	4b7d      	ldr	r3, [pc, #500]	; (a578 <AppProtocolBrake+0x6f8>)
    a384:	741a      	strb	r2, [r3, #16]
								ltemp1 = newRemoteInfo.checksumStartOffset >>16; 
    a386:	4b80      	ldr	r3, [pc, #512]	; (a588 <AppProtocolBrake+0x708>)
    a388:	689b      	ldr	r3, [r3, #8]
    a38a:	0c1b      	lsrs	r3, r3, #16
    a38c:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a38e:	6a3a      	ldr	r2, [r7, #32]
    a390:	23ff      	movs	r3, #255	; 0xff
    a392:	4013      	ands	r3, r2
    a394:	623b      	str	r3, [r7, #32]
								protocolBuffer[17] = ltemp1; 
    a396:	6a3b      	ldr	r3, [r7, #32]
    a398:	b2da      	uxtb	r2, r3
    a39a:	4b77      	ldr	r3, [pc, #476]	; (a578 <AppProtocolBrake+0x6f8>)
    a39c:	745a      	strb	r2, [r3, #17]
								ltemp1 = newRemoteInfo.checksumStartOffset >>8; 
    a39e:	4b7a      	ldr	r3, [pc, #488]	; (a588 <AppProtocolBrake+0x708>)
    a3a0:	689b      	ldr	r3, [r3, #8]
    a3a2:	0a1b      	lsrs	r3, r3, #8
    a3a4:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3a6:	6a3a      	ldr	r2, [r7, #32]
    a3a8:	23ff      	movs	r3, #255	; 0xff
    a3aa:	4013      	ands	r3, r2
    a3ac:	623b      	str	r3, [r7, #32]
								protocolBuffer[18] = ltemp1; 
    a3ae:	6a3b      	ldr	r3, [r7, #32]
    a3b0:	b2da      	uxtb	r2, r3
    a3b2:	4b71      	ldr	r3, [pc, #452]	; (a578 <AppProtocolBrake+0x6f8>)
    a3b4:	749a      	strb	r2, [r3, #18]
								ltemp1 = newRemoteInfo.checksumStartOffset; 
    a3b6:	4b74      	ldr	r3, [pc, #464]	; (a588 <AppProtocolBrake+0x708>)
    a3b8:	689b      	ldr	r3, [r3, #8]
    a3ba:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3bc:	6a3a      	ldr	r2, [r7, #32]
    a3be:	23ff      	movs	r3, #255	; 0xff
    a3c0:	4013      	ands	r3, r2
    a3c2:	623b      	str	r3, [r7, #32]
								protocolBuffer[19] = ltemp1; 			
    a3c4:	6a3b      	ldr	r3, [r7, #32]
    a3c6:	b2da      	uxtb	r2, r3
    a3c8:	4b6b      	ldr	r3, [pc, #428]	; (a578 <AppProtocolBrake+0x6f8>)
    a3ca:	74da      	strb	r2, [r3, #19]
								//-------file version, 4 bytes 
								ltemp1 = newRemoteInfo.version >>24;
    a3cc:	4b6e      	ldr	r3, [pc, #440]	; (a588 <AppProtocolBrake+0x708>)
    a3ce:	68db      	ldr	r3, [r3, #12]
    a3d0:	0e1b      	lsrs	r3, r3, #24
    a3d2:	623b      	str	r3, [r7, #32]
								protocolBuffer[20] = ltemp1; 
    a3d4:	6a3b      	ldr	r3, [r7, #32]
    a3d6:	b2da      	uxtb	r2, r3
    a3d8:	4b67      	ldr	r3, [pc, #412]	; (a578 <AppProtocolBrake+0x6f8>)
    a3da:	751a      	strb	r2, [r3, #20]
								ltemp1 = newRemoteInfo.version >>16; 
    a3dc:	4b6a      	ldr	r3, [pc, #424]	; (a588 <AppProtocolBrake+0x708>)
    a3de:	68db      	ldr	r3, [r3, #12]
    a3e0:	0c1b      	lsrs	r3, r3, #16
    a3e2:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3e4:	6a3a      	ldr	r2, [r7, #32]
    a3e6:	23ff      	movs	r3, #255	; 0xff
    a3e8:	4013      	ands	r3, r2
    a3ea:	623b      	str	r3, [r7, #32]
								protocolBuffer[21] = ltemp1; 
    a3ec:	6a3b      	ldr	r3, [r7, #32]
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	4b61      	ldr	r3, [pc, #388]	; (a578 <AppProtocolBrake+0x6f8>)
    a3f2:	755a      	strb	r2, [r3, #21]
								ltemp1 = newRemoteInfo.version >>8; 
    a3f4:	4b64      	ldr	r3, [pc, #400]	; (a588 <AppProtocolBrake+0x708>)
    a3f6:	68db      	ldr	r3, [r3, #12]
    a3f8:	0a1b      	lsrs	r3, r3, #8
    a3fa:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a3fc:	6a3a      	ldr	r2, [r7, #32]
    a3fe:	23ff      	movs	r3, #255	; 0xff
    a400:	4013      	ands	r3, r2
    a402:	623b      	str	r3, [r7, #32]
								protocolBuffer[22] = ltemp1; 
    a404:	6a3b      	ldr	r3, [r7, #32]
    a406:	b2da      	uxtb	r2, r3
    a408:	4b5b      	ldr	r3, [pc, #364]	; (a578 <AppProtocolBrake+0x6f8>)
    a40a:	759a      	strb	r2, [r3, #22]
								ltemp1 = newRemoteInfo.version; 
    a40c:	4b5e      	ldr	r3, [pc, #376]	; (a588 <AppProtocolBrake+0x708>)
    a40e:	68db      	ldr	r3, [r3, #12]
    a410:	623b      	str	r3, [r7, #32]
								ltemp1 &= 0x00ff; 
    a412:	6a3a      	ldr	r2, [r7, #32]
    a414:	23ff      	movs	r3, #255	; 0xff
    a416:	4013      	ands	r3, r2
    a418:	623b      	str	r3, [r7, #32]
								protocolBuffer[23] = ltemp1; 			
    a41a:	6a3b      	ldr	r3, [r7, #32]
    a41c:	b2da      	uxtb	r2, r3
    a41e:	4b56      	ldr	r3, [pc, #344]	; (a578 <AppProtocolBrake+0x6f8>)
    a420:	75da      	strb	r2, [r3, #23]
								//-------number of packets, 1 byte
								ltemp1 = newRemoteInfo.appLength;
    a422:	4b59      	ldr	r3, [pc, #356]	; (a588 <AppProtocolBrake+0x708>)
    a424:	685b      	ldr	r3, [r3, #4]
    a426:	623b      	str	r3, [r7, #32]
								ltemp1 = ltemp1/128; 
    a428:	6a3b      	ldr	r3, [r7, #32]
    a42a:	09db      	lsrs	r3, r3, #7
    a42c:	623b      	str	r3, [r7, #32]
								ltemp1++;
    a42e:	6a3b      	ldr	r3, [r7, #32]
    a430:	3301      	adds	r3, #1
    a432:	623b      	str	r3, [r7, #32]
								remoteDownloadPacketCount = ltemp1; 
    a434:	6a3b      	ldr	r3, [r7, #32]
    a436:	b29a      	uxth	r2, r3
    a438:	4b54      	ldr	r3, [pc, #336]	; (a58c <AppProtocolBrake+0x70c>)
    a43a:	801a      	strh	r2, [r3, #0]
								protocolBuffer[24] = ltemp1>>8;
    a43c:	6a3b      	ldr	r3, [r7, #32]
    a43e:	0a1b      	lsrs	r3, r3, #8
    a440:	b2da      	uxtb	r2, r3
    a442:	4b4d      	ldr	r3, [pc, #308]	; (a578 <AppProtocolBrake+0x6f8>)
    a444:	761a      	strb	r2, [r3, #24]
								ltemp1 &= 0xff; 
    a446:	6a3a      	ldr	r2, [r7, #32]
    a448:	23ff      	movs	r3, #255	; 0xff
    a44a:	4013      	ands	r3, r2
    a44c:	623b      	str	r3, [r7, #32]
								protocolBuffer[25] = ltemp1;
    a44e:	6a3b      	ldr	r3, [r7, #32]
    a450:	b2da      	uxtb	r2, r3
    a452:	4b49      	ldr	r3, [pc, #292]	; (a578 <AppProtocolBrake+0x6f8>)
    a454:	765a      	strb	r2, [r3, #25]
							
								checksum = AppProtocolChecksum(protocolBuffer,26);
    a456:	1c3c      	adds	r4, r7, #0
    a458:	341f      	adds	r4, #31
    a45a:	4b47      	ldr	r3, [pc, #284]	; (a578 <AppProtocolBrake+0x6f8>)
    a45c:	1c18      	adds	r0, r3, #0
    a45e:	211a      	movs	r1, #26
    a460:	4b4b      	ldr	r3, [pc, #300]	; (a590 <AppProtocolBrake+0x710>)
    a462:	4798      	blx	r3
    a464:	1c03      	adds	r3, r0, #0
    a466:	7023      	strb	r3, [r4, #0]
								protocolBuffer[26] = checksum;
    a468:	4b43      	ldr	r3, [pc, #268]	; (a578 <AppProtocolBrake+0x6f8>)
    a46a:	1c3a      	adds	r2, r7, #0
    a46c:	321f      	adds	r2, #31
    a46e:	7812      	ldrb	r2, [r2, #0]
    a470:	769a      	strb	r2, [r3, #26]
								protocolBuffer[27] = 0x04;
    a472:	4b41      	ldr	r3, [pc, #260]	; (a578 <AppProtocolBrake+0x6f8>)
    a474:	2204      	movs	r2, #4
    a476:	76da      	strb	r2, [r3, #27]
								if (whichRadio == WHICHRADIO_LORA)
    a478:	4b46      	ldr	r3, [pc, #280]	; (a594 <AppProtocolBrake+0x714>)
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	2b99      	cmp	r3, #153	; 0x99
    a47e:	d105      	bne.n	a48c <AppProtocolBrake+0x60c>
								{
									SX1272LoraTransmit(protocolBuffer,28);
    a480:	4b3d      	ldr	r3, [pc, #244]	; (a578 <AppProtocolBrake+0x6f8>)
    a482:	1c18      	adds	r0, r3, #0
    a484:	211c      	movs	r1, #28
    a486:	4b44      	ldr	r3, [pc, #272]	; (a598 <AppProtocolBrake+0x718>)
    a488:	4798      	blx	r3
    a48a:	e0c8      	b.n	a61e <AppProtocolBrake+0x79e>
								}
								else
								{
									SX1272FskTransmit(protocolBuffer,28);
    a48c:	4b3a      	ldr	r3, [pc, #232]	; (a578 <AppProtocolBrake+0x6f8>)
    a48e:	1c18      	adds	r0, r3, #0
    a490:	211c      	movs	r1, #28
    a492:	4b42      	ldr	r3, [pc, #264]	; (a59c <AppProtocolBrake+0x71c>)
    a494:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a496:	e109      	b.n	a6ac <AppProtocolBrake+0x82c>
									SX1272FskTransmit(protocolBuffer,28);
								}							 
							}
							else
							{
								if (doffset == 0xffff)
    a498:	1c3b      	adds	r3, r7, #0
    a49a:	3326      	adds	r3, #38	; 0x26
    a49c:	881a      	ldrh	r2, [r3, #0]
    a49e:	4b40      	ldr	r3, [pc, #256]	; (a5a0 <AppProtocolBrake+0x720>)
    a4a0:	429a      	cmp	r2, r3
    a4a2:	d138      	bne.n	a516 <AppProtocolBrake+0x696>
								{
									newRemoteDownloadNeeded = FALSE; 
    a4a4:	4b3f      	ldr	r3, [pc, #252]	; (a5a4 <AppProtocolBrake+0x724>)
    a4a6:	2200      	movs	r2, #0
    a4a8:	701a      	strb	r2, [r3, #0]
									protocolBuffer[5] = 14;
    a4aa:	4b33      	ldr	r3, [pc, #204]	; (a578 <AppProtocolBrake+0x6f8>)
    a4ac:	220e      	movs	r2, #14
    a4ae:	715a      	strb	r2, [r3, #5]
									//----------offset 
									protocolBuffer[6] = 0x00;
    a4b0:	4b31      	ldr	r3, [pc, #196]	; (a578 <AppProtocolBrake+0x6f8>)
    a4b2:	2200      	movs	r2, #0
    a4b4:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = 0x00;
    a4b6:	4b30      	ldr	r3, [pc, #192]	; (a578 <AppProtocolBrake+0x6f8>)
    a4b8:	2200      	movs	r2, #0
    a4ba:	71da      	strb	r2, [r3, #7]
									//----------length 
									protocolBuffer[8] = 0x00; 
    a4bc:	4b2e      	ldr	r3, [pc, #184]	; (a578 <AppProtocolBrake+0x6f8>)
    a4be:	2200      	movs	r2, #0
    a4c0:	721a      	strb	r2, [r3, #8]
									protocolBuffer[9] = 0x00;
    a4c2:	4b2d      	ldr	r3, [pc, #180]	; (a578 <AppProtocolBrake+0x6f8>)
    a4c4:	2200      	movs	r2, #0
    a4c6:	725a      	strb	r2, [r3, #9]
									protocolBuffer[10] = 0x00;
    a4c8:	4b2b      	ldr	r3, [pc, #172]	; (a578 <AppProtocolBrake+0x6f8>)
    a4ca:	2200      	movs	r2, #0
    a4cc:	729a      	strb	r2, [r3, #10]
									protocolBuffer[11] = 0x00;
    a4ce:	4b2a      	ldr	r3, [pc, #168]	; (a578 <AppProtocolBrake+0x6f8>)
    a4d0:	2200      	movs	r2, #0
    a4d2:	72da      	strb	r2, [r3, #11]
									checksum = AppProtocolChecksum(protocolBuffer,12);
    a4d4:	1c3c      	adds	r4, r7, #0
    a4d6:	341f      	adds	r4, #31
    a4d8:	4b27      	ldr	r3, [pc, #156]	; (a578 <AppProtocolBrake+0x6f8>)
    a4da:	1c18      	adds	r0, r3, #0
    a4dc:	210c      	movs	r1, #12
    a4de:	4b2c      	ldr	r3, [pc, #176]	; (a590 <AppProtocolBrake+0x710>)
    a4e0:	4798      	blx	r3
    a4e2:	1c03      	adds	r3, r0, #0
    a4e4:	7023      	strb	r3, [r4, #0]
									protocolBuffer[12] = checksum;
    a4e6:	4b24      	ldr	r3, [pc, #144]	; (a578 <AppProtocolBrake+0x6f8>)
    a4e8:	1c3a      	adds	r2, r7, #0
    a4ea:	321f      	adds	r2, #31
    a4ec:	7812      	ldrb	r2, [r2, #0]
    a4ee:	731a      	strb	r2, [r3, #12]
									protocolBuffer[13] = 0x04;
    a4f0:	4b21      	ldr	r3, [pc, #132]	; (a578 <AppProtocolBrake+0x6f8>)
    a4f2:	2204      	movs	r2, #4
    a4f4:	735a      	strb	r2, [r3, #13]
									if (whichRadio == WHICHRADIO_LORA)
    a4f6:	4b27      	ldr	r3, [pc, #156]	; (a594 <AppProtocolBrake+0x714>)
    a4f8:	781b      	ldrb	r3, [r3, #0]
    a4fa:	2b99      	cmp	r3, #153	; 0x99
    a4fc:	d105      	bne.n	a50a <AppProtocolBrake+0x68a>
									{
										SX1272LoraTransmit(protocolBuffer,14);
    a4fe:	4b1e      	ldr	r3, [pc, #120]	; (a578 <AppProtocolBrake+0x6f8>)
    a500:	1c18      	adds	r0, r3, #0
    a502:	210e      	movs	r1, #14
    a504:	4b24      	ldr	r3, [pc, #144]	; (a598 <AppProtocolBrake+0x718>)
    a506:	4798      	blx	r3
    a508:	e089      	b.n	a61e <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,14);
    a50a:	4b1b      	ldr	r3, [pc, #108]	; (a578 <AppProtocolBrake+0x6f8>)
    a50c:	1c18      	adds	r0, r3, #0
    a50e:	210e      	movs	r1, #14
    a510:	4b22      	ldr	r3, [pc, #136]	; (a59c <AppProtocolBrake+0x71c>)
    a512:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a514:	e0ca      	b.n	a6ac <AppProtocolBrake+0x82c>
								}
								else
								{
							
									//-----------------offset greater than 0x00 
									protocolBuffer[5] = 138; 
    a516:	4b18      	ldr	r3, [pc, #96]	; (a578 <AppProtocolBrake+0x6f8>)
    a518:	228a      	movs	r2, #138	; 0x8a
    a51a:	715a      	strb	r2, [r3, #5]
									//----------offset 
									itemp = doffset >>8;
    a51c:	1c3b      	adds	r3, r7, #0
    a51e:	332e      	adds	r3, #46	; 0x2e
    a520:	1c3a      	adds	r2, r7, #0
    a522:	3226      	adds	r2, #38	; 0x26
    a524:	8812      	ldrh	r2, [r2, #0]
    a526:	0a12      	lsrs	r2, r2, #8
    a528:	801a      	strh	r2, [r3, #0]
									itemp2 = doffset & 0xff; 
    a52a:	1c3b      	adds	r3, r7, #0
    a52c:	332c      	adds	r3, #44	; 0x2c
    a52e:	1c3a      	adds	r2, r7, #0
    a530:	3226      	adds	r2, #38	; 0x26
    a532:	8811      	ldrh	r1, [r2, #0]
    a534:	22ff      	movs	r2, #255	; 0xff
    a536:	400a      	ands	r2, r1
    a538:	801a      	strh	r2, [r3, #0]
									protocolBuffer[6] = itemp;
    a53a:	1c3b      	adds	r3, r7, #0
    a53c:	332e      	adds	r3, #46	; 0x2e
    a53e:	881b      	ldrh	r3, [r3, #0]
    a540:	b2da      	uxtb	r2, r3
    a542:	4b0d      	ldr	r3, [pc, #52]	; (a578 <AppProtocolBrake+0x6f8>)
    a544:	719a      	strb	r2, [r3, #6]
									protocolBuffer[7] = itemp2;
    a546:	1c3b      	adds	r3, r7, #0
    a548:	332c      	adds	r3, #44	; 0x2c
    a54a:	881b      	ldrh	r3, [r3, #0]
    a54c:	b2da      	uxtb	r2, r3
    a54e:	4b0a      	ldr	r3, [pc, #40]	; (a578 <AppProtocolBrake+0x6f8>)
    a550:	71da      	strb	r2, [r3, #7]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
    a552:	1c3b      	adds	r3, r7, #0
    a554:	3326      	adds	r3, #38	; 0x26
    a556:	881b      	ldrh	r3, [r3, #0]
    a558:	3b01      	subs	r3, #1
    a55a:	01db      	lsls	r3, r3, #7
    a55c:	623b      	str	r3, [r7, #32]
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
    a55e:	6a3b      	ldr	r3, [r7, #32]
    a560:	2284      	movs	r2, #132	; 0x84
    a562:	0292      	lsls	r2, r2, #10
    a564:	189b      	adds	r3, r3, r2
    a566:	61bb      	str	r3, [r7, #24]
									lptr = ltemp2; 				 
    a568:	69bb      	ldr	r3, [r7, #24]
    a56a:	633b      	str	r3, [r7, #48]	; 0x30
			 						for (x=0;x<128;x++)
    a56c:	1c3b      	adds	r3, r7, #0
    a56e:	3312      	adds	r3, #18
    a570:	2200      	movs	r2, #0
    a572:	801a      	strh	r2, [r3, #0]
    a574:	e02b      	b.n	a5ce <AppProtocolBrake+0x74e>
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	20002f20 	.word	0x20002f20
    a57c:	20002fb8 	.word	0x20002fb8
    a580:	00009e65 	.word	0x00009e65
    a584:	200004a4 	.word	0x200004a4
    a588:	2000308c 	.word	0x2000308c
    a58c:	20002ef8 	.word	0x20002ef8
    a590:	00009e01 	.word	0x00009e01
    a594:	200036d2 	.word	0x200036d2
    a598:	0001109d 	.word	0x0001109d
    a59c:	00010275 	.word	0x00010275
    a5a0:	0000ffff 	.word	0x0000ffff
    a5a4:	200004bb 	.word	0x200004bb
									{
										protocolBuffer[x+8] = *lptr++;	
    a5a8:	1c3b      	adds	r3, r7, #0
    a5aa:	3312      	adds	r3, #18
    a5ac:	881b      	ldrh	r3, [r3, #0]
    a5ae:	1c1a      	adds	r2, r3, #0
    a5b0:	3208      	adds	r2, #8
    a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a5b4:	1c59      	adds	r1, r3, #1
    a5b6:	6339      	str	r1, [r7, #48]	; 0x30
    a5b8:	7819      	ldrb	r1, [r3, #0]
    a5ba:	4ba5      	ldr	r3, [pc, #660]	; (a850 <AppProtocolBrake+0x9d0>)
    a5bc:	5499      	strb	r1, [r3, r2]
									//---------------------------
									// one less than what you are on 
									ltemp1 = (doffset-1) *128; 
									ltemp2 = APP_SCRATCH_BASE +ltemp1; 
									lptr = ltemp2; 				 
			 						for (x=0;x<128;x++)
    a5be:	1c3b      	adds	r3, r7, #0
    a5c0:	3312      	adds	r3, #18
    a5c2:	881b      	ldrh	r3, [r3, #0]
    a5c4:	3301      	adds	r3, #1
    a5c6:	b29a      	uxth	r2, r3
    a5c8:	1c3b      	adds	r3, r7, #0
    a5ca:	3312      	adds	r3, #18
    a5cc:	801a      	strh	r2, [r3, #0]
    a5ce:	1c3b      	adds	r3, r7, #0
    a5d0:	3312      	adds	r3, #18
    a5d2:	881b      	ldrh	r3, [r3, #0]
    a5d4:	2b7f      	cmp	r3, #127	; 0x7f
    a5d6:	d9e7      	bls.n	a5a8 <AppProtocolBrake+0x728>
									{
										protocolBuffer[x+8] = *lptr++;	
									}
									checksum = AppProtocolChecksum(protocolBuffer,136);
    a5d8:	1c3c      	adds	r4, r7, #0
    a5da:	341f      	adds	r4, #31
    a5dc:	4b9c      	ldr	r3, [pc, #624]	; (a850 <AppProtocolBrake+0x9d0>)
    a5de:	1c18      	adds	r0, r3, #0
    a5e0:	2188      	movs	r1, #136	; 0x88
    a5e2:	4b9c      	ldr	r3, [pc, #624]	; (a854 <AppProtocolBrake+0x9d4>)
    a5e4:	4798      	blx	r3
    a5e6:	1c03      	adds	r3, r0, #0
    a5e8:	7023      	strb	r3, [r4, #0]
									protocolBuffer[136] = checksum;
    a5ea:	4a99      	ldr	r2, [pc, #612]	; (a850 <AppProtocolBrake+0x9d0>)
    a5ec:	1c39      	adds	r1, r7, #0
    a5ee:	311f      	adds	r1, #31
    a5f0:	2388      	movs	r3, #136	; 0x88
    a5f2:	7809      	ldrb	r1, [r1, #0]
    a5f4:	54d1      	strb	r1, [r2, r3]
									protocolBuffer[137] = 0x04;
    a5f6:	4a96      	ldr	r2, [pc, #600]	; (a850 <AppProtocolBrake+0x9d0>)
    a5f8:	2389      	movs	r3, #137	; 0x89
    a5fa:	2104      	movs	r1, #4
    a5fc:	54d1      	strb	r1, [r2, r3]
									if (whichRadio == WHICHRADIO_LORA)
    a5fe:	4b96      	ldr	r3, [pc, #600]	; (a858 <AppProtocolBrake+0x9d8>)
    a600:	781b      	ldrb	r3, [r3, #0]
    a602:	2b99      	cmp	r3, #153	; 0x99
    a604:	d105      	bne.n	a612 <AppProtocolBrake+0x792>
									{
										SX1272LoraTransmit(protocolBuffer,138);
    a606:	4b92      	ldr	r3, [pc, #584]	; (a850 <AppProtocolBrake+0x9d0>)
    a608:	1c18      	adds	r0, r3, #0
    a60a:	218a      	movs	r1, #138	; 0x8a
    a60c:	4b93      	ldr	r3, [pc, #588]	; (a85c <AppProtocolBrake+0x9dc>)
    a60e:	4798      	blx	r3
    a610:	e005      	b.n	a61e <AppProtocolBrake+0x79e>
									}
									else
									{
										SX1272FskTransmit(protocolBuffer,138);
    a612:	4b8f      	ldr	r3, [pc, #572]	; (a850 <AppProtocolBrake+0x9d0>)
    a614:	1c18      	adds	r0, r3, #0
    a616:	218a      	movs	r1, #138	; 0x8a
    a618:	4b91      	ldr	r3, [pc, #580]	; (a860 <AppProtocolBrake+0x9e0>)
    a61a:	4798      	blx	r3
							itemp = buffers[7];
							itemp2 = buffers[8];
							itemp = itemp<<8; 
							itemp |= itemp2; 
							doffset = itemp;						
							if (doffset == 0)
    a61c:	e046      	b.n	a6ac <AppProtocolBrake+0x82c>
    a61e:	e045      	b.n	a6ac <AppProtocolBrake+0x82c>
								}
							}
						}
						else
						{				
							remoteDownloadPacketNumber=0; 
    a620:	4b90      	ldr	r3, [pc, #576]	; (a864 <AppProtocolBrake+0x9e4>)
    a622:	2200      	movs	r2, #0
    a624:	801a      	strh	r2, [r3, #0]
							remoteDownloadPacketCount=0; 
    a626:	4b90      	ldr	r3, [pc, #576]	; (a868 <AppProtocolBrake+0x9e8>)
    a628:	2200      	movs	r2, #0
    a62a:	801a      	strh	r2, [r3, #0]
							remoteDownloadNextPacketNumber=0;
    a62c:	4b8f      	ldr	r3, [pc, #572]	; (a86c <AppProtocolBrake+0x9ec>)
    a62e:	2200      	movs	r2, #0
    a630:	801a      	strh	r2, [r3, #0]
							remoteDownloadLastPacketNumber=0; 
    a632:	4b8f      	ldr	r3, [pc, #572]	; (a870 <AppProtocolBrake+0x9f0>)
    a634:	2200      	movs	r2, #0
    a636:	801a      	strh	r2, [r3, #0]
							remoteDownloadLength=0; 						
    a638:	4b8e      	ldr	r3, [pc, #568]	; (a874 <AppProtocolBrake+0x9f4>)
    a63a:	2200      	movs	r2, #0
    a63c:	601a      	str	r2, [r3, #0]
						 					 
							protocolBuffer[5] = 14;
    a63e:	4b84      	ldr	r3, [pc, #528]	; (a850 <AppProtocolBrake+0x9d0>)
    a640:	220e      	movs	r2, #14
    a642:	715a      	strb	r2, [r3, #5]
							//----------offset 
							protocolBuffer[6] = 0x00;
    a644:	4b82      	ldr	r3, [pc, #520]	; (a850 <AppProtocolBrake+0x9d0>)
    a646:	2200      	movs	r2, #0
    a648:	719a      	strb	r2, [r3, #6]
							protocolBuffer[7] = 0x00;
    a64a:	4b81      	ldr	r3, [pc, #516]	; (a850 <AppProtocolBrake+0x9d0>)
    a64c:	2200      	movs	r2, #0
    a64e:	71da      	strb	r2, [r3, #7]
							//----------length 
							protocolBuffer[8] = 0x00; 
    a650:	4b7f      	ldr	r3, [pc, #508]	; (a850 <AppProtocolBrake+0x9d0>)
    a652:	2200      	movs	r2, #0
    a654:	721a      	strb	r2, [r3, #8]
							protocolBuffer[9] = 0x00;
    a656:	4b7e      	ldr	r3, [pc, #504]	; (a850 <AppProtocolBrake+0x9d0>)
    a658:	2200      	movs	r2, #0
    a65a:	725a      	strb	r2, [r3, #9]
							protocolBuffer[10] = 0x00;
    a65c:	4b7c      	ldr	r3, [pc, #496]	; (a850 <AppProtocolBrake+0x9d0>)
    a65e:	2200      	movs	r2, #0
    a660:	729a      	strb	r2, [r3, #10]
							protocolBuffer[11] = 0x00;
    a662:	4b7b      	ldr	r3, [pc, #492]	; (a850 <AppProtocolBrake+0x9d0>)
    a664:	2200      	movs	r2, #0
    a666:	72da      	strb	r2, [r3, #11]
							checksum = AppProtocolChecksum(protocolBuffer,12);
    a668:	1c3c      	adds	r4, r7, #0
    a66a:	341f      	adds	r4, #31
    a66c:	4b78      	ldr	r3, [pc, #480]	; (a850 <AppProtocolBrake+0x9d0>)
    a66e:	1c18      	adds	r0, r3, #0
    a670:	210c      	movs	r1, #12
    a672:	4b78      	ldr	r3, [pc, #480]	; (a854 <AppProtocolBrake+0x9d4>)
    a674:	4798      	blx	r3
    a676:	1c03      	adds	r3, r0, #0
    a678:	7023      	strb	r3, [r4, #0]
							protocolBuffer[12] = checksum;
    a67a:	4b75      	ldr	r3, [pc, #468]	; (a850 <AppProtocolBrake+0x9d0>)
    a67c:	1c3a      	adds	r2, r7, #0
    a67e:	321f      	adds	r2, #31
    a680:	7812      	ldrb	r2, [r2, #0]
    a682:	731a      	strb	r2, [r3, #12]
							protocolBuffer[13] = 0x04;
    a684:	4b72      	ldr	r3, [pc, #456]	; (a850 <AppProtocolBrake+0x9d0>)
    a686:	2204      	movs	r2, #4
    a688:	735a      	strb	r2, [r3, #13]
							if (whichRadio == WHICHRADIO_LORA)
    a68a:	4b73      	ldr	r3, [pc, #460]	; (a858 <AppProtocolBrake+0x9d8>)
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	2b99      	cmp	r3, #153	; 0x99
    a690:	d105      	bne.n	a69e <AppProtocolBrake+0x81e>
							{
								SX1272LoraTransmit(protocolBuffer,14);
    a692:	4b6f      	ldr	r3, [pc, #444]	; (a850 <AppProtocolBrake+0x9d0>)
    a694:	1c18      	adds	r0, r3, #0
    a696:	210e      	movs	r1, #14
    a698:	4b70      	ldr	r3, [pc, #448]	; (a85c <AppProtocolBrake+0x9dc>)
    a69a:	4798      	blx	r3
    a69c:	e006      	b.n	a6ac <AppProtocolBrake+0x82c>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,14);
    a69e:	4b6c      	ldr	r3, [pc, #432]	; (a850 <AppProtocolBrake+0x9d0>)
    a6a0:	1c18      	adds	r0, r3, #0
    a6a2:	210e      	movs	r1, #14
    a6a4:	4b6e      	ldr	r3, [pc, #440]	; (a860 <AppProtocolBrake+0x9e0>)
    a6a6:	4798      	blx	r3
							}	
						}
						break;
    a6a8:	f000 fbb2 	bl	ae10 <AppProtocolBrake+0xf90>
    a6ac:	e3b0      	b.n	ae10 <AppProtocolBrake+0xf90>
					}
					case MSG_SW:
					{
						protocolBuffer[0] = '#';
    a6ae:	4b68      	ldr	r3, [pc, #416]	; (a850 <AppProtocolBrake+0x9d0>)
    a6b0:	2223      	movs	r2, #35	; 0x23
    a6b2:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a6b4:	4b70      	ldr	r3, [pc, #448]	; (a878 <AppProtocolBrake+0x9f8>)
    a6b6:	7bda      	ldrb	r2, [r3, #15]
    a6b8:	4b65      	ldr	r3, [pc, #404]	; (a850 <AppProtocolBrake+0x9d0>)
    a6ba:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a6bc:	4b6e      	ldr	r3, [pc, #440]	; (a878 <AppProtocolBrake+0x9f8>)
    a6be:	7c1a      	ldrb	r2, [r3, #16]
    a6c0:	4b63      	ldr	r3, [pc, #396]	; (a850 <AppProtocolBrake+0x9d0>)
    a6c2:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'S';
    a6c4:	4b62      	ldr	r3, [pc, #392]	; (a850 <AppProtocolBrake+0x9d0>)
    a6c6:	2253      	movs	r2, #83	; 0x53
    a6c8:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'W';					 
    a6ca:	4b61      	ldr	r3, [pc, #388]	; (a850 <AppProtocolBrake+0x9d0>)
    a6cc:	2257      	movs	r2, #87	; 0x57
    a6ce:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 0x09;
    a6d0:	4b5f      	ldr	r3, [pc, #380]	; (a850 <AppProtocolBrake+0x9d0>)
    a6d2:	2209      	movs	r2, #9
    a6d4:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = buffers[7];  //yes switching
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	79da      	ldrb	r2, [r3, #7]
    a6da:	4b5d      	ldr	r3, [pc, #372]	; (a850 <AppProtocolBrake+0x9d0>)
    a6dc:	719a      	strb	r2, [r3, #6]
						switchOnTransmit = buffers[7]; 
    a6de:	687b      	ldr	r3, [r7, #4]
    a6e0:	79da      	ldrb	r2, [r3, #7]
    a6e2:	4b66      	ldr	r3, [pc, #408]	; (a87c <AppProtocolBrake+0x9fc>)
    a6e4:	701a      	strb	r2, [r3, #0]
						checksum = AppProtocolChecksum(protocolBuffer,7);
    a6e6:	1c3c      	adds	r4, r7, #0
    a6e8:	341f      	adds	r4, #31
    a6ea:	4b59      	ldr	r3, [pc, #356]	; (a850 <AppProtocolBrake+0x9d0>)
    a6ec:	1c18      	adds	r0, r3, #0
    a6ee:	2107      	movs	r1, #7
    a6f0:	4b58      	ldr	r3, [pc, #352]	; (a854 <AppProtocolBrake+0x9d4>)
    a6f2:	4798      	blx	r3
    a6f4:	1c03      	adds	r3, r0, #0
    a6f6:	7023      	strb	r3, [r4, #0]
						protocolBuffer[7] = checksum;
    a6f8:	4b55      	ldr	r3, [pc, #340]	; (a850 <AppProtocolBrake+0x9d0>)
    a6fa:	1c3a      	adds	r2, r7, #0
    a6fc:	321f      	adds	r2, #31
    a6fe:	7812      	ldrb	r2, [r2, #0]
    a700:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = 0x04;
    a702:	4b53      	ldr	r3, [pc, #332]	; (a850 <AppProtocolBrake+0x9d0>)
    a704:	2204      	movs	r2, #4
    a706:	721a      	strb	r2, [r3, #8]
						if (whichRadio == WHICHRADIO_LORA)
    a708:	4b53      	ldr	r3, [pc, #332]	; (a858 <AppProtocolBrake+0x9d8>)
    a70a:	781b      	ldrb	r3, [r3, #0]
    a70c:	2b99      	cmp	r3, #153	; 0x99
    a70e:	d105      	bne.n	a71c <AppProtocolBrake+0x89c>
						{
							SX1272LoraTransmit(protocolBuffer,9);
    a710:	4b4f      	ldr	r3, [pc, #316]	; (a850 <AppProtocolBrake+0x9d0>)
    a712:	1c18      	adds	r0, r3, #0
    a714:	2109      	movs	r1, #9
    a716:	4b51      	ldr	r3, [pc, #324]	; (a85c <AppProtocolBrake+0x9dc>)
    a718:	4798      	blx	r3
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
						}
					
						break;
    a71a:	e379      	b.n	ae10 <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,9);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,9);
    a71c:	4b4c      	ldr	r3, [pc, #304]	; (a850 <AppProtocolBrake+0x9d0>)
    a71e:	1c18      	adds	r0, r3, #0
    a720:	2109      	movs	r1, #9
    a722:	4b4f      	ldr	r3, [pc, #316]	; (a860 <AppProtocolBrake+0x9e0>)
    a724:	4798      	blx	r3
						}
					
						break;
    a726:	e373      	b.n	ae10 <AppProtocolBrake+0xf90>
					}				
					case MSG_PR:
					{			
						protocolBuffer[0] = '#';
    a728:	4b49      	ldr	r3, [pc, #292]	; (a850 <AppProtocolBrake+0x9d0>)
    a72a:	2223      	movs	r2, #35	; 0x23
    a72c:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a72e:	4b52      	ldr	r3, [pc, #328]	; (a878 <AppProtocolBrake+0x9f8>)
    a730:	7bda      	ldrb	r2, [r3, #15]
    a732:	4b47      	ldr	r3, [pc, #284]	; (a850 <AppProtocolBrake+0x9d0>)
    a734:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a736:	4b50      	ldr	r3, [pc, #320]	; (a878 <AppProtocolBrake+0x9f8>)
    a738:	7c1a      	ldrb	r2, [r3, #16]
    a73a:	4b45      	ldr	r3, [pc, #276]	; (a850 <AppProtocolBrake+0x9d0>)
    a73c:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'P';
    a73e:	4b44      	ldr	r3, [pc, #272]	; (a850 <AppProtocolBrake+0x9d0>)
    a740:	2250      	movs	r2, #80	; 0x50
    a742:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';	
    a744:	4b42      	ldr	r3, [pc, #264]	; (a850 <AppProtocolBrake+0x9d0>)
    a746:	224d      	movs	r2, #77	; 0x4d
    a748:	711a      	strb	r2, [r3, #4]
						if (setup_pressed == 0)		
    a74a:	4b4d      	ldr	r3, [pc, #308]	; (a880 <AppProtocolBrake+0xa00>)
    a74c:	881b      	ldrh	r3, [r3, #0]
    a74e:	2b00      	cmp	r3, #0
    a750:	d102      	bne.n	a758 <AppProtocolBrake+0x8d8>
						{
							protocolBuffer[4] = 'L';		
    a752:	4b3f      	ldr	r3, [pc, #252]	; (a850 <AppProtocolBrake+0x9d0>)
    a754:	224c      	movs	r2, #76	; 0x4c
    a756:	711a      	strb	r2, [r3, #4]
						}				
						protocolBuffer[5] = 0x08; 	
    a758:	4b3d      	ldr	r3, [pc, #244]	; (a850 <AppProtocolBrake+0x9d0>)
    a75a:	2208      	movs	r2, #8
    a75c:	715a      	strb	r2, [r3, #5]
						checksum = AppProtocolChecksum(protocolBuffer,6);	
    a75e:	1c3c      	adds	r4, r7, #0
    a760:	341f      	adds	r4, #31
    a762:	4b3b      	ldr	r3, [pc, #236]	; (a850 <AppProtocolBrake+0x9d0>)
    a764:	1c18      	adds	r0, r3, #0
    a766:	2106      	movs	r1, #6
    a768:	4b3a      	ldr	r3, [pc, #232]	; (a854 <AppProtocolBrake+0x9d4>)
    a76a:	4798      	blx	r3
    a76c:	1c03      	adds	r3, r0, #0
    a76e:	7023      	strb	r3, [r4, #0]
						protocolBuffer[6] = checksum; 			
    a770:	4b37      	ldr	r3, [pc, #220]	; (a850 <AppProtocolBrake+0x9d0>)
    a772:	1c3a      	adds	r2, r7, #0
    a774:	321f      	adds	r2, #31
    a776:	7812      	ldrb	r2, [r2, #0]
    a778:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = 0x04; 	
    a77a:	4b35      	ldr	r3, [pc, #212]	; (a850 <AppProtocolBrake+0x9d0>)
    a77c:	2204      	movs	r2, #4
    a77e:	71da      	strb	r2, [r3, #7]
						if (setup_pressed != 0)
    a780:	4b3f      	ldr	r3, [pc, #252]	; (a880 <AppProtocolBrake+0xa00>)
    a782:	881b      	ldrh	r3, [r3, #0]
    a784:	2b00      	cmp	r3, #0
    a786:	d00f      	beq.n	a7a8 <AppProtocolBrake+0x928>
						{						
							if (whichRadio == WHICHRADIO_LORA)
    a788:	4b33      	ldr	r3, [pc, #204]	; (a858 <AppProtocolBrake+0x9d8>)
    a78a:	781b      	ldrb	r3, [r3, #0]
    a78c:	2b99      	cmp	r3, #153	; 0x99
    a78e:	d105      	bne.n	a79c <AppProtocolBrake+0x91c>
							{
								SX1272LoraTransmit(protocolBuffer,8);
    a790:	4b2f      	ldr	r3, [pc, #188]	; (a850 <AppProtocolBrake+0x9d0>)
    a792:	1c18      	adds	r0, r3, #0
    a794:	2108      	movs	r1, #8
    a796:	4b31      	ldr	r3, [pc, #196]	; (a85c <AppProtocolBrake+0x9dc>)
    a798:	4798      	blx	r3
    a79a:	e005      	b.n	a7a8 <AppProtocolBrake+0x928>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,8);
    a79c:	4b2c      	ldr	r3, [pc, #176]	; (a850 <AppProtocolBrake+0x9d0>)
    a79e:	1c18      	adds	r0, r3, #0
    a7a0:	2108      	movs	r1, #8
    a7a2:	4b2f      	ldr	r3, [pc, #188]	; (a860 <AppProtocolBrake+0x9e0>)
    a7a4:	4798      	blx	r3
							}
						}
						break;
    a7a6:	e333      	b.n	ae10 <AppProtocolBrake+0xf90>
    a7a8:	e332      	b.n	ae10 <AppProtocolBrake+0xf90>
					}
					case MSG_FV:
					{
 							//---------FV
						protocolBuffer[0] = '#';
    a7aa:	4b29      	ldr	r3, [pc, #164]	; (a850 <AppProtocolBrake+0x9d0>)
    a7ac:	2223      	movs	r2, #35	; 0x23
    a7ae:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a7b0:	4b31      	ldr	r3, [pc, #196]	; (a878 <AppProtocolBrake+0x9f8>)
    a7b2:	7bda      	ldrb	r2, [r3, #15]
    a7b4:	4b26      	ldr	r3, [pc, #152]	; (a850 <AppProtocolBrake+0x9d0>)
    a7b6:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a7b8:	4b2f      	ldr	r3, [pc, #188]	; (a878 <AppProtocolBrake+0x9f8>)
    a7ba:	7c1a      	ldrb	r2, [r3, #16]
    a7bc:	4b24      	ldr	r3, [pc, #144]	; (a850 <AppProtocolBrake+0x9d0>)
    a7be:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'F';
    a7c0:	4b23      	ldr	r3, [pc, #140]	; (a850 <AppProtocolBrake+0x9d0>)
    a7c2:	2246      	movs	r2, #70	; 0x46
    a7c4:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    a7c6:	4b22      	ldr	r3, [pc, #136]	; (a850 <AppProtocolBrake+0x9d0>)
    a7c8:	224d      	movs	r2, #77	; 0x4d
    a7ca:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 18;
    a7cc:	4b20      	ldr	r3, [pc, #128]	; (a850 <AppProtocolBrake+0x9d0>)
    a7ce:	2212      	movs	r2, #18
    a7d0:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = FWVER3;
    a7d2:	4b1f      	ldr	r3, [pc, #124]	; (a850 <AppProtocolBrake+0x9d0>)
    a7d4:	2230      	movs	r2, #48	; 0x30
    a7d6:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = FWVER2;
    a7d8:	4b1d      	ldr	r3, [pc, #116]	; (a850 <AppProtocolBrake+0x9d0>)
    a7da:	2231      	movs	r2, #49	; 0x31
    a7dc:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = FWVER1;
    a7de:	4b1c      	ldr	r3, [pc, #112]	; (a850 <AppProtocolBrake+0x9d0>)
    a7e0:	2236      	movs	r2, #54	; 0x36
    a7e2:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	FWVER0;			
    a7e4:	4b1a      	ldr	r3, [pc, #104]	; (a850 <AppProtocolBrake+0x9d0>)
    a7e6:	2234      	movs	r2, #52	; 0x34
    a7e8:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10]= MONTHMSB;
    a7ea:	4b19      	ldr	r3, [pc, #100]	; (a850 <AppProtocolBrake+0x9d0>)
    a7ec:	2231      	movs	r2, #49	; 0x31
    a7ee:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = MONTHLSB;
    a7f0:	4b17      	ldr	r3, [pc, #92]	; (a850 <AppProtocolBrake+0x9d0>)
    a7f2:	2230      	movs	r2, #48	; 0x30
    a7f4:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = DAYMSB;
    a7f6:	4b16      	ldr	r3, [pc, #88]	; (a850 <AppProtocolBrake+0x9d0>)
    a7f8:	2232      	movs	r2, #50	; 0x32
    a7fa:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = DAYLSB;						
    a7fc:	4b14      	ldr	r3, [pc, #80]	; (a850 <AppProtocolBrake+0x9d0>)
    a7fe:	2230      	movs	r2, #48	; 0x30
    a800:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = YEARMSB;
    a802:	4b13      	ldr	r3, [pc, #76]	; (a850 <AppProtocolBrake+0x9d0>)
    a804:	2232      	movs	r2, #50	; 0x32
    a806:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = YEARLSB;	
    a808:	4b11      	ldr	r3, [pc, #68]	; (a850 <AppProtocolBrake+0x9d0>)
    a80a:	2230      	movs	r2, #48	; 0x30
    a80c:	73da      	strb	r2, [r3, #15]
						checksum = AppProtocolChecksum(protocolBuffer,16);	
    a80e:	1c3c      	adds	r4, r7, #0
    a810:	341f      	adds	r4, #31
    a812:	4b0f      	ldr	r3, [pc, #60]	; (a850 <AppProtocolBrake+0x9d0>)
    a814:	1c18      	adds	r0, r3, #0
    a816:	2110      	movs	r1, #16
    a818:	4b0e      	ldr	r3, [pc, #56]	; (a854 <AppProtocolBrake+0x9d4>)
    a81a:	4798      	blx	r3
    a81c:	1c03      	adds	r3, r0, #0
    a81e:	7023      	strb	r3, [r4, #0]
						protocolBuffer[16] = checksum; 					
    a820:	4b0b      	ldr	r3, [pc, #44]	; (a850 <AppProtocolBrake+0x9d0>)
    a822:	1c3a      	adds	r2, r7, #0
    a824:	321f      	adds	r2, #31
    a826:	7812      	ldrb	r2, [r2, #0]
    a828:	741a      	strb	r2, [r3, #16]
						protocolBuffer[17] = 0x04; 	
    a82a:	4b09      	ldr	r3, [pc, #36]	; (a850 <AppProtocolBrake+0x9d0>)
    a82c:	2204      	movs	r2, #4
    a82e:	745a      	strb	r2, [r3, #17]
						if (whichRadio == WHICHRADIO_LORA)
    a830:	4b09      	ldr	r3, [pc, #36]	; (a858 <AppProtocolBrake+0x9d8>)
    a832:	781b      	ldrb	r3, [r3, #0]
    a834:	2b99      	cmp	r3, #153	; 0x99
    a836:	d105      	bne.n	a844 <AppProtocolBrake+0x9c4>
						{
							SX1272LoraTransmit(protocolBuffer,18);
    a838:	4b05      	ldr	r3, [pc, #20]	; (a850 <AppProtocolBrake+0x9d0>)
    a83a:	1c18      	adds	r0, r3, #0
    a83c:	2112      	movs	r1, #18
    a83e:	4b07      	ldr	r3, [pc, #28]	; (a85c <AppProtocolBrake+0x9dc>)
    a840:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
						}					
						break;
    a842:	e2e5      	b.n	ae10 <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,18);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,18);
    a844:	4b02      	ldr	r3, [pc, #8]	; (a850 <AppProtocolBrake+0x9d0>)
    a846:	1c18      	adds	r0, r3, #0
    a848:	2112      	movs	r1, #18
    a84a:	4b05      	ldr	r3, [pc, #20]	; (a860 <AppProtocolBrake+0x9e0>)
    a84c:	4798      	blx	r3
						}					
						break;
    a84e:	e2df      	b.n	ae10 <AppProtocolBrake+0xf90>
    a850:	20002f20 	.word	0x20002f20
    a854:	00009e01 	.word	0x00009e01
    a858:	200036d2 	.word	0x200036d2
    a85c:	0001109d 	.word	0x0001109d
    a860:	00010275 	.word	0x00010275
    a864:	20002f18 	.word	0x20002f18
    a868:	20002ef8 	.word	0x20002ef8
    a86c:	20002f1e 	.word	0x20002f1e
    a870:	20002f1a 	.word	0x20002f1a
    a874:	20002f14 	.word	0x20002f14
    a878:	20002fb8 	.word	0x20002fb8
    a87c:	200004d9 	.word	0x200004d9
    a880:	2000306e 	.word	0x2000306e
					}									
					case MSG_STATUS:
					{
 							//---------BS
						remoteVersionToReport[0] = buffers[10];
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	7a9a      	ldrb	r2, [r3, #10]
    a888:	4be9      	ldr	r3, [pc, #932]	; (ac30 <AppProtocolBrake+0xdb0>)
    a88a:	701a      	strb	r2, [r3, #0]
						remoteVersionToReport[1] = buffers[11];
    a88c:	687b      	ldr	r3, [r7, #4]
    a88e:	7ada      	ldrb	r2, [r3, #11]
    a890:	4be7      	ldr	r3, [pc, #924]	; (ac30 <AppProtocolBrake+0xdb0>)
    a892:	705a      	strb	r2, [r3, #1]
						remoteVersionToReport[2] = buffers[12];
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	7b1a      	ldrb	r2, [r3, #12]
    a898:	4be5      	ldr	r3, [pc, #916]	; (ac30 <AppProtocolBrake+0xdb0>)
    a89a:	709a      	strb	r2, [r3, #2]
						remoteVersionToReport[3] = buffers[13];
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	7b5a      	ldrb	r2, [r3, #13]
    a8a0:	4be3      	ldr	r3, [pc, #908]	; (ac30 <AppProtocolBrake+0xdb0>)
    a8a2:	70da      	strb	r2, [r3, #3]
					
						//--------------------------------------
						protocolBuffer[0] = '#';
    a8a4:	4be3      	ldr	r3, [pc, #908]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8a6:	2223      	movs	r2, #35	; 0x23
    a8a8:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    a8aa:	4be3      	ldr	r3, [pc, #908]	; (ac38 <AppProtocolBrake+0xdb8>)
    a8ac:	7bda      	ldrb	r2, [r3, #15]
    a8ae:	4be1      	ldr	r3, [pc, #900]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8b0:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    a8b2:	4be1      	ldr	r3, [pc, #900]	; (ac38 <AppProtocolBrake+0xdb8>)
    a8b4:	7c1a      	ldrb	r2, [r3, #16]
    a8b6:	4bdf      	ldr	r3, [pc, #892]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8b8:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'B';
    a8ba:	4bde      	ldr	r3, [pc, #888]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8bc:	2242      	movs	r2, #66	; 0x42
    a8be:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'M';
    a8c0:	4bdc      	ldr	r3, [pc, #880]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8c2:	224d      	movs	r2, #77	; 0x4d
    a8c4:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 22;
    a8c6:	4bdb      	ldr	r3, [pc, #876]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8c8:	2216      	movs	r2, #22
    a8ca:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = statusData.TireRadio;
    a8cc:	4bdb      	ldr	r3, [pc, #876]	; (ac3c <AppProtocolBrake+0xdbc>)
    a8ce:	781a      	ldrb	r2, [r3, #0]
    a8d0:	4bd8      	ldr	r3, [pc, #864]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8d2:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = statusData.ExtRadio;
    a8d4:	4bd9      	ldr	r3, [pc, #868]	; (ac3c <AppProtocolBrake+0xdbc>)
    a8d6:	785a      	ldrb	r2, [r3, #1]
    a8d8:	4bd6      	ldr	r3, [pc, #856]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8da:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = statusData.EEPROM;;
    a8dc:	4bd7      	ldr	r3, [pc, #860]	; (ac3c <AppProtocolBrake+0xdbc>)
    a8de:	789a      	ldrb	r2, [r3, #2]
    a8e0:	4bd4      	ldr	r3, [pc, #848]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8e2:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	statusData.Accelerometer;	
    a8e4:	4bd5      	ldr	r3, [pc, #852]	; (ac3c <AppProtocolBrake+0xdbc>)
    a8e6:	78da      	ldrb	r2, [r3, #3]
    a8e8:	4bd2      	ldr	r3, [pc, #840]	; (ac34 <AppProtocolBrake+0xdb4>)
    a8ea:	725a      	strb	r2, [r3, #9]
						//---------------V01_20 placing FSR in Voltage Input
						itemp  = 	ADCGetReading(ADC_INPUT_FSR);
    a8ec:	1c3c      	adds	r4, r7, #0
    a8ee:	342e      	adds	r4, #46	; 0x2e
    a8f0:	2002      	movs	r0, #2
    a8f2:	4bd3      	ldr	r3, [pc, #844]	; (ac40 <AppProtocolBrake+0xdc0>)
    a8f4:	4798      	blx	r3
    a8f6:	1c03      	adds	r3, r0, #0
    a8f8:	8023      	strh	r3, [r4, #0]
						itemp2 = itemp & 0x00ff;
    a8fa:	1c3b      	adds	r3, r7, #0
    a8fc:	332c      	adds	r3, #44	; 0x2c
    a8fe:	1c3a      	adds	r2, r7, #0
    a900:	322e      	adds	r2, #46	; 0x2e
    a902:	8811      	ldrh	r1, [r2, #0]
    a904:	22ff      	movs	r2, #255	; 0xff
    a906:	400a      	ands	r2, r1
    a908:	801a      	strh	r2, [r3, #0]
						brakeStatus.VoltageInput = itemp2; 
    a90a:	1c3b      	adds	r3, r7, #0
    a90c:	332c      	adds	r3, #44	; 0x2c
    a90e:	881b      	ldrh	r3, [r3, #0]
    a910:	b2da      	uxtb	r2, r3
    a912:	4bcc      	ldr	r3, [pc, #816]	; (ac44 <AppProtocolBrake+0xdc4>)
    a914:	701a      	strb	r2, [r3, #0]
						//---------------V01_20 placing FSR in Voltage Input
						itemp  = 	ADCGetReading(ADC_INPUT_FSR);
    a916:	1c3c      	adds	r4, r7, #0
    a918:	342e      	adds	r4, #46	; 0x2e
    a91a:	2002      	movs	r0, #2
    a91c:	4bc8      	ldr	r3, [pc, #800]	; (ac40 <AppProtocolBrake+0xdc0>)
    a91e:	4798      	blx	r3
    a920:	1c03      	adds	r3, r0, #0
    a922:	8023      	strh	r3, [r4, #0]
						itemp2 = itemp>>8;
    a924:	1c3b      	adds	r3, r7, #0
    a926:	332c      	adds	r3, #44	; 0x2c
    a928:	1c3a      	adds	r2, r7, #0
    a92a:	322e      	adds	r2, #46	; 0x2e
    a92c:	8812      	ldrh	r2, [r2, #0]
    a92e:	0a12      	lsrs	r2, r2, #8
    a930:	801a      	strh	r2, [r3, #0]
						brakeStatus.VoltageSupercap = itemp2;						
    a932:	1c3b      	adds	r3, r7, #0
    a934:	332c      	adds	r3, #44	; 0x2c
    a936:	881b      	ldrh	r3, [r3, #0]
    a938:	b2da      	uxtb	r2, r3
    a93a:	4bc2      	ldr	r3, [pc, #776]	; (ac44 <AppProtocolBrake+0xdc4>)
    a93c:	705a      	strb	r2, [r3, #1]
						protocolBuffer[10] = brakeStatus.VoltageInput;
    a93e:	4bc1      	ldr	r3, [pc, #772]	; (ac44 <AppProtocolBrake+0xdc4>)
    a940:	781a      	ldrb	r2, [r3, #0]
    a942:	4bbc      	ldr	r3, [pc, #752]	; (ac34 <AppProtocolBrake+0xdb4>)
    a944:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = brakeStatus.AccelerometerStatus;
    a946:	4bbf      	ldr	r3, [pc, #764]	; (ac44 <AppProtocolBrake+0xdc4>)
    a948:	78da      	ldrb	r2, [r3, #3]
    a94a:	4bba      	ldr	r3, [pc, #744]	; (ac34 <AppProtocolBrake+0xdb4>)
    a94c:	72da      	strb	r2, [r3, #11]
						protocolBuffer[12] = brakeStatus.ActuatorStatus;;
    a94e:	4bbd      	ldr	r3, [pc, #756]	; (ac44 <AppProtocolBrake+0xdc4>)
    a950:	789a      	ldrb	r2, [r3, #2]
    a952:	4bb8      	ldr	r3, [pc, #736]	; (ac34 <AppProtocolBrake+0xdb4>)
    a954:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = brakeStatus.BrakeState;	
    a956:	4bbb      	ldr	r3, [pc, #748]	; (ac44 <AppProtocolBrake+0xdc4>)
    a958:	791a      	ldrb	r2, [r3, #4]
    a95a:	4bb6      	ldr	r3, [pc, #728]	; (ac34 <AppProtocolBrake+0xdb4>)
    a95c:	735a      	strb	r2, [r3, #13]
						protocolBuffer[14] = brakeStatus.VoltageSupercap; 	
    a95e:	4bb9      	ldr	r3, [pc, #740]	; (ac44 <AppProtocolBrake+0xdc4>)
    a960:	785a      	ldrb	r2, [r3, #1]
    a962:	4bb4      	ldr	r3, [pc, #720]	; (ac34 <AppProtocolBrake+0xdb4>)
    a964:	739a      	strb	r2, [r3, #14]
						protocolBuffer[15] = brakeState; 		
    a966:	4bb8      	ldr	r3, [pc, #736]	; (ac48 <AppProtocolBrake+0xdc8>)
    a968:	781a      	ldrb	r2, [r3, #0]
    a96a:	4bb2      	ldr	r3, [pc, #712]	; (ac34 <AppProtocolBrake+0xdb4>)
    a96c:	73da      	strb	r2, [r3, #15]
						protocolBuffer[16] = 0x00; 	
    a96e:	4bb1      	ldr	r3, [pc, #708]	; (ac34 <AppProtocolBrake+0xdb4>)
    a970:	2200      	movs	r2, #0
    a972:	741a      	strb	r2, [r3, #16]
						if (switchToFSK ==TRUE)
    a974:	4bb5      	ldr	r3, [pc, #724]	; (ac4c <AppProtocolBrake+0xdcc>)
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	2b01      	cmp	r3, #1
    a97a:	d102      	bne.n	a982 <AppProtocolBrake+0xb02>
						{
							protocolBuffer[16] = 0x55; 
    a97c:	4bad      	ldr	r3, [pc, #692]	; (ac34 <AppProtocolBrake+0xdb4>)
    a97e:	2255      	movs	r2, #85	; 0x55
    a980:	741a      	strb	r2, [r3, #16]
						}
						ltemp = gPrime;
    a982:	1c3b      	adds	r3, r7, #0
    a984:	3316      	adds	r3, #22
    a986:	4ab2      	ldr	r2, [pc, #712]	; (ac50 <AppProtocolBrake+0xdd0>)
    a988:	8812      	ldrh	r2, [r2, #0]
    a98a:	801a      	strh	r2, [r3, #0]
						ltemp = ltemp>>8;
    a98c:	1c3b      	adds	r3, r7, #0
    a98e:	3316      	adds	r3, #22
    a990:	1c3a      	adds	r2, r7, #0
    a992:	3216      	adds	r2, #22
    a994:	8812      	ldrh	r2, [r2, #0]
    a996:	0a12      	lsrs	r2, r2, #8
    a998:	801a      	strh	r2, [r3, #0]
						protocolBuffer[17] = ltemp; 
    a99a:	1c3b      	adds	r3, r7, #0
    a99c:	3316      	adds	r3, #22
    a99e:	881b      	ldrh	r3, [r3, #0]
    a9a0:	b2da      	uxtb	r2, r3
    a9a2:	4ba4      	ldr	r3, [pc, #656]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9a4:	745a      	strb	r2, [r3, #17]
						ltemp = gPrime & 0x00ff;	
    a9a6:	4baa      	ldr	r3, [pc, #680]	; (ac50 <AppProtocolBrake+0xdd0>)
    a9a8:	8819      	ldrh	r1, [r3, #0]
    a9aa:	1c3b      	adds	r3, r7, #0
    a9ac:	3316      	adds	r3, #22
    a9ae:	22ff      	movs	r2, #255	; 0xff
    a9b0:	400a      	ands	r2, r1
    a9b2:	801a      	strh	r2, [r3, #0]
						protocolBuffer[18] = ltemp; 	
    a9b4:	1c3b      	adds	r3, r7, #0
    a9b6:	3316      	adds	r3, #22
    a9b8:	881b      	ldrh	r3, [r3, #0]
    a9ba:	b2da      	uxtb	r2, r3
    a9bc:	4b9d      	ldr	r3, [pc, #628]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9be:	749a      	strb	r2, [r3, #18]
						protocolBuffer[19] = 0x00; 	
    a9c0:	4b9c      	ldr	r3, [pc, #624]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9c2:	2200      	movs	r2, #0
    a9c4:	74da      	strb	r2, [r3, #19]
 					
						checksum = AppProtocolChecksum(protocolBuffer,20);	
    a9c6:	1c3c      	adds	r4, r7, #0
    a9c8:	341f      	adds	r4, #31
    a9ca:	4b9a      	ldr	r3, [pc, #616]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9cc:	1c18      	adds	r0, r3, #0
    a9ce:	2114      	movs	r1, #20
    a9d0:	4ba0      	ldr	r3, [pc, #640]	; (ac54 <AppProtocolBrake+0xdd4>)
    a9d2:	4798      	blx	r3
    a9d4:	1c03      	adds	r3, r0, #0
    a9d6:	7023      	strb	r3, [r4, #0]
						protocolBuffer[20] = checksum; 																			
    a9d8:	4b96      	ldr	r3, [pc, #600]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9da:	1c3a      	adds	r2, r7, #0
    a9dc:	321f      	adds	r2, #31
    a9de:	7812      	ldrb	r2, [r2, #0]
    a9e0:	751a      	strb	r2, [r3, #20]
						protocolBuffer[21] = 0x04; 	
    a9e2:	4b94      	ldr	r3, [pc, #592]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9e4:	2204      	movs	r2, #4
    a9e6:	755a      	strb	r2, [r3, #21]
						if (whichRadio == WHICHRADIO_LORA)
    a9e8:	4b9b      	ldr	r3, [pc, #620]	; (ac58 <AppProtocolBrake+0xdd8>)
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	2b99      	cmp	r3, #153	; 0x99
    a9ee:	d105      	bne.n	a9fc <AppProtocolBrake+0xb7c>
						{
							SX1272LoraTransmit(protocolBuffer,22);
    a9f0:	4b90      	ldr	r3, [pc, #576]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9f2:	1c18      	adds	r0, r3, #0
    a9f4:	2116      	movs	r1, #22
    a9f6:	4b99      	ldr	r3, [pc, #612]	; (ac5c <AppProtocolBrake+0xddc>)
    a9f8:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
						}		
						break;
    a9fa:	e209      	b.n	ae10 <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,22);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,22);
    a9fc:	4b8d      	ldr	r3, [pc, #564]	; (ac34 <AppProtocolBrake+0xdb4>)
    a9fe:	1c18      	adds	r0, r3, #0
    aa00:	2116      	movs	r1, #22
    aa02:	4b97      	ldr	r3, [pc, #604]	; (ac60 <AppProtocolBrake+0xde0>)
    aa04:	4798      	blx	r3
						}		
						break;
    aa06:	e203      	b.n	ae10 <AppProtocolBrake+0xf90>
					}						
					case 0x5245:
					{
						//---------RE
						protocolBuffer[0] = '#';
    aa08:	4b8a      	ldr	r3, [pc, #552]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa0a:	2223      	movs	r2, #35	; 0x23
    aa0c:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    aa0e:	4b8a      	ldr	r3, [pc, #552]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa10:	7bda      	ldrb	r2, [r3, #15]
    aa12:	4b88      	ldr	r3, [pc, #544]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa14:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    aa16:	4b88      	ldr	r3, [pc, #544]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa18:	7c1a      	ldrb	r2, [r3, #16]
    aa1a:	4b86      	ldr	r3, [pc, #536]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa1c:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    aa1e:	4b85      	ldr	r3, [pc, #532]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa20:	2252      	movs	r2, #82	; 0x52
    aa22:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'E';
    aa24:	4b83      	ldr	r3, [pc, #524]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa26:	2245      	movs	r2, #69	; 0x45
    aa28:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    aa2a:	4b82      	ldr	r3, [pc, #520]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa2c:	220e      	movs	r2, #14
    aa2e:	715a      	strb	r2, [r3, #5]
						protocolBuffer[6] = table0.Item.EepromManDevSerial[0];
    aa30:	4b81      	ldr	r3, [pc, #516]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa32:	7ada      	ldrb	r2, [r3, #11]
    aa34:	4b7f      	ldr	r3, [pc, #508]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa36:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = table0.Item.EepromManDevSerial[1];
    aa38:	4b7f      	ldr	r3, [pc, #508]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa3a:	7b1a      	ldrb	r2, [r3, #12]
    aa3c:	4b7d      	ldr	r3, [pc, #500]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa3e:	71da      	strb	r2, [r3, #7]
						protocolBuffer[8] = table0.Item.EepromManDevSerial[2];;
    aa40:	4b7d      	ldr	r3, [pc, #500]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa42:	7b5a      	ldrb	r2, [r3, #13]
    aa44:	4b7b      	ldr	r3, [pc, #492]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa46:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	table0.Item.EepromManDevSerial[3];;				
    aa48:	4b7b      	ldr	r3, [pc, #492]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa4a:	7b9a      	ldrb	r2, [r3, #14]
    aa4c:	4b79      	ldr	r3, [pc, #484]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa4e:	725a      	strb	r2, [r3, #9]
						protocolBuffer[10] = table0.Item.EepromManDevSerial[4];
    aa50:	4b79      	ldr	r3, [pc, #484]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa52:	7bda      	ldrb	r2, [r3, #15]
    aa54:	4b77      	ldr	r3, [pc, #476]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa56:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = table0.Item.EepromManDevSerial[5];		
    aa58:	4b77      	ldr	r3, [pc, #476]	; (ac38 <AppProtocolBrake+0xdb8>)
    aa5a:	7c1a      	ldrb	r2, [r3, #16]
    aa5c:	4b75      	ldr	r3, [pc, #468]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa5e:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    aa60:	1c3c      	adds	r4, r7, #0
    aa62:	341f      	adds	r4, #31
    aa64:	4b73      	ldr	r3, [pc, #460]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa66:	1c18      	adds	r0, r3, #0
    aa68:	210c      	movs	r1, #12
    aa6a:	4b7a      	ldr	r3, [pc, #488]	; (ac54 <AppProtocolBrake+0xdd4>)
    aa6c:	4798      	blx	r3
    aa6e:	1c03      	adds	r3, r0, #0
    aa70:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 				
    aa72:	4b70      	ldr	r3, [pc, #448]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa74:	1c3a      	adds	r2, r7, #0
    aa76:	321f      	adds	r2, #31
    aa78:	7812      	ldrb	r2, [r2, #0]
    aa7a:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 		
    aa7c:	4b6d      	ldr	r3, [pc, #436]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa7e:	2204      	movs	r2, #4
    aa80:	735a      	strb	r2, [r3, #13]
						if (whichRadio == WHICHRADIO_LORA)
    aa82:	4b75      	ldr	r3, [pc, #468]	; (ac58 <AppProtocolBrake+0xdd8>)
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	2b99      	cmp	r3, #153	; 0x99
    aa88:	d105      	bne.n	aa96 <AppProtocolBrake+0xc16>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    aa8a:	4b6a      	ldr	r3, [pc, #424]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa8c:	1c18      	adds	r0, r3, #0
    aa8e:	210e      	movs	r1, #14
    aa90:	4b72      	ldr	r3, [pc, #456]	; (ac5c <AppProtocolBrake+0xddc>)
    aa92:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}											
						break;
    aa94:	e1bc      	b.n	ae10 <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    aa96:	4b67      	ldr	r3, [pc, #412]	; (ac34 <AppProtocolBrake+0xdb4>)
    aa98:	1c18      	adds	r0, r3, #0
    aa9a:	210e      	movs	r1, #14
    aa9c:	4b70      	ldr	r3, [pc, #448]	; (ac60 <AppProtocolBrake+0xde0>)
    aa9e:	4798      	blx	r3
						}											
						break;
    aaa0:	e1b6      	b.n	ae10 <AppProtocolBrake+0xf90>
					}
					case 0x5241:
					{
						//---------RA
						AccelProvideReading(&x,&y,&z); 
    aaa2:	1c39      	adds	r1, r7, #0
    aaa4:	3112      	adds	r1, #18
    aaa6:	1c3a      	adds	r2, r7, #0
    aaa8:	3210      	adds	r2, #16
    aaaa:	1c3b      	adds	r3, r7, #0
    aaac:	330e      	adds	r3, #14
    aaae:	1c08      	adds	r0, r1, #0
    aab0:	1c11      	adds	r1, r2, #0
    aab2:	1c1a      	adds	r2, r3, #0
    aab4:	4b6b      	ldr	r3, [pc, #428]	; (ac64 <AppProtocolBrake+0xde4>)
    aab6:	4798      	blx	r3
						protocolBuffer[0] = '#';
    aab8:	4b5e      	ldr	r3, [pc, #376]	; (ac34 <AppProtocolBrake+0xdb4>)
    aaba:	2223      	movs	r2, #35	; 0x23
    aabc:	701a      	strb	r2, [r3, #0]
						protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    aabe:	4b5e      	ldr	r3, [pc, #376]	; (ac38 <AppProtocolBrake+0xdb8>)
    aac0:	7bda      	ldrb	r2, [r3, #15]
    aac2:	4b5c      	ldr	r3, [pc, #368]	; (ac34 <AppProtocolBrake+0xdb4>)
    aac4:	705a      	strb	r2, [r3, #1]
						protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    aac6:	4b5c      	ldr	r3, [pc, #368]	; (ac38 <AppProtocolBrake+0xdb8>)
    aac8:	7c1a      	ldrb	r2, [r3, #16]
    aaca:	4b5a      	ldr	r3, [pc, #360]	; (ac34 <AppProtocolBrake+0xdb4>)
    aacc:	709a      	strb	r2, [r3, #2]
						protocolBuffer[3] = 'R';
    aace:	4b59      	ldr	r3, [pc, #356]	; (ac34 <AppProtocolBrake+0xdb4>)
    aad0:	2252      	movs	r2, #82	; 0x52
    aad2:	70da      	strb	r2, [r3, #3]
						protocolBuffer[4] = 'A';
    aad4:	4b57      	ldr	r3, [pc, #348]	; (ac34 <AppProtocolBrake+0xdb4>)
    aad6:	2241      	movs	r2, #65	; 0x41
    aad8:	711a      	strb	r2, [r3, #4]
						protocolBuffer[5] = 14;
    aada:	4b56      	ldr	r3, [pc, #344]	; (ac34 <AppProtocolBrake+0xdb4>)
    aadc:	220e      	movs	r2, #14
    aade:	715a      	strb	r2, [r3, #5]
						itemp = x>>8;
    aae0:	1c3b      	adds	r3, r7, #0
    aae2:	3312      	adds	r3, #18
    aae4:	881a      	ldrh	r2, [r3, #0]
    aae6:	1c3b      	adds	r3, r7, #0
    aae8:	332e      	adds	r3, #46	; 0x2e
    aaea:	0a12      	lsrs	r2, r2, #8
    aaec:	801a      	strh	r2, [r3, #0]
						itemp2 = x & 0x00ff;
    aaee:	1c3b      	adds	r3, r7, #0
    aaf0:	3312      	adds	r3, #18
    aaf2:	8819      	ldrh	r1, [r3, #0]
    aaf4:	1c3b      	adds	r3, r7, #0
    aaf6:	332c      	adds	r3, #44	; 0x2c
    aaf8:	22ff      	movs	r2, #255	; 0xff
    aafa:	400a      	ands	r2, r1
    aafc:	801a      	strh	r2, [r3, #0]
						protocolBuffer[6] = itemp;
    aafe:	1c3b      	adds	r3, r7, #0
    ab00:	332e      	adds	r3, #46	; 0x2e
    ab02:	881b      	ldrh	r3, [r3, #0]
    ab04:	b2da      	uxtb	r2, r3
    ab06:	4b4b      	ldr	r3, [pc, #300]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab08:	719a      	strb	r2, [r3, #6]
						protocolBuffer[7] = itemp2;
    ab0a:	1c3b      	adds	r3, r7, #0
    ab0c:	332c      	adds	r3, #44	; 0x2c
    ab0e:	881b      	ldrh	r3, [r3, #0]
    ab10:	b2da      	uxtb	r2, r3
    ab12:	4b48      	ldr	r3, [pc, #288]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab14:	71da      	strb	r2, [r3, #7]
						itemp = y>>8;
    ab16:	1c3b      	adds	r3, r7, #0
    ab18:	3310      	adds	r3, #16
    ab1a:	881a      	ldrh	r2, [r3, #0]
    ab1c:	1c3b      	adds	r3, r7, #0
    ab1e:	332e      	adds	r3, #46	; 0x2e
    ab20:	0a12      	lsrs	r2, r2, #8
    ab22:	801a      	strh	r2, [r3, #0]
						itemp2 = y & 0x00ff;				
    ab24:	1c3b      	adds	r3, r7, #0
    ab26:	3310      	adds	r3, #16
    ab28:	8819      	ldrh	r1, [r3, #0]
    ab2a:	1c3b      	adds	r3, r7, #0
    ab2c:	332c      	adds	r3, #44	; 0x2c
    ab2e:	22ff      	movs	r2, #255	; 0xff
    ab30:	400a      	ands	r2, r1
    ab32:	801a      	strh	r2, [r3, #0]
						protocolBuffer[8] = itemp;
    ab34:	1c3b      	adds	r3, r7, #0
    ab36:	332e      	adds	r3, #46	; 0x2e
    ab38:	881b      	ldrh	r3, [r3, #0]
    ab3a:	b2da      	uxtb	r2, r3
    ab3c:	4b3d      	ldr	r3, [pc, #244]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab3e:	721a      	strb	r2, [r3, #8]
						protocolBuffer[9] =	itemp2;		
    ab40:	1c3b      	adds	r3, r7, #0
    ab42:	332c      	adds	r3, #44	; 0x2c
    ab44:	881b      	ldrh	r3, [r3, #0]
    ab46:	b2da      	uxtb	r2, r3
    ab48:	4b3a      	ldr	r3, [pc, #232]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab4a:	725a      	strb	r2, [r3, #9]
						itemp = z>>8;
    ab4c:	1c3b      	adds	r3, r7, #0
    ab4e:	330e      	adds	r3, #14
    ab50:	881a      	ldrh	r2, [r3, #0]
    ab52:	1c3b      	adds	r3, r7, #0
    ab54:	332e      	adds	r3, #46	; 0x2e
    ab56:	0a12      	lsrs	r2, r2, #8
    ab58:	801a      	strh	r2, [r3, #0]
						itemp2 = z & 0x00ff;		
    ab5a:	1c3b      	adds	r3, r7, #0
    ab5c:	330e      	adds	r3, #14
    ab5e:	8819      	ldrh	r1, [r3, #0]
    ab60:	1c3b      	adds	r3, r7, #0
    ab62:	332c      	adds	r3, #44	; 0x2c
    ab64:	22ff      	movs	r2, #255	; 0xff
    ab66:	400a      	ands	r2, r1
    ab68:	801a      	strh	r2, [r3, #0]
						protocolBuffer[10] = itemp;
    ab6a:	1c3b      	adds	r3, r7, #0
    ab6c:	332e      	adds	r3, #46	; 0x2e
    ab6e:	881b      	ldrh	r3, [r3, #0]
    ab70:	b2da      	uxtb	r2, r3
    ab72:	4b30      	ldr	r3, [pc, #192]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab74:	729a      	strb	r2, [r3, #10]
						protocolBuffer[11] = itemp2;	
    ab76:	1c3b      	adds	r3, r7, #0
    ab78:	332c      	adds	r3, #44	; 0x2c
    ab7a:	881b      	ldrh	r3, [r3, #0]
    ab7c:	b2da      	uxtb	r2, r3
    ab7e:	4b2d      	ldr	r3, [pc, #180]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab80:	72da      	strb	r2, [r3, #11]
						checksum = AppProtocolChecksum(protocolBuffer,12);	
    ab82:	1c3c      	adds	r4, r7, #0
    ab84:	341f      	adds	r4, #31
    ab86:	4b2b      	ldr	r3, [pc, #172]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab88:	1c18      	adds	r0, r3, #0
    ab8a:	210c      	movs	r1, #12
    ab8c:	4b31      	ldr	r3, [pc, #196]	; (ac54 <AppProtocolBrake+0xdd4>)
    ab8e:	4798      	blx	r3
    ab90:	1c03      	adds	r3, r0, #0
    ab92:	7023      	strb	r3, [r4, #0]
						protocolBuffer[12] = checksum; 			
    ab94:	4b27      	ldr	r3, [pc, #156]	; (ac34 <AppProtocolBrake+0xdb4>)
    ab96:	1c3a      	adds	r2, r7, #0
    ab98:	321f      	adds	r2, #31
    ab9a:	7812      	ldrb	r2, [r2, #0]
    ab9c:	731a      	strb	r2, [r3, #12]
						protocolBuffer[13] = 0x04; 	
    ab9e:	4b25      	ldr	r3, [pc, #148]	; (ac34 <AppProtocolBrake+0xdb4>)
    aba0:	2204      	movs	r2, #4
    aba2:	735a      	strb	r2, [r3, #13]
	 	
						if (whichRadio == WHICHRADIO_LORA)
    aba4:	4b2c      	ldr	r3, [pc, #176]	; (ac58 <AppProtocolBrake+0xdd8>)
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	2b99      	cmp	r3, #153	; 0x99
    abaa:	d105      	bne.n	abb8 <AppProtocolBrake+0xd38>
						{
							SX1272LoraTransmit(protocolBuffer,14);
    abac:	4b21      	ldr	r3, [pc, #132]	; (ac34 <AppProtocolBrake+0xdb4>)
    abae:	1c18      	adds	r0, r3, #0
    abb0:	210e      	movs	r1, #14
    abb2:	4b2a      	ldr	r3, [pc, #168]	; (ac5c <AppProtocolBrake+0xddc>)
    abb4:	4798      	blx	r3
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
						}								
						break;
    abb6:	e12b      	b.n	ae10 <AppProtocolBrake+0xf90>
						{
							SX1272LoraTransmit(protocolBuffer,14);
						}
						else
						{
							SX1272FskTransmit(protocolBuffer,14);
    abb8:	4b1e      	ldr	r3, [pc, #120]	; (ac34 <AppProtocolBrake+0xdb4>)
    abba:	1c18      	adds	r0, r3, #0
    abbc:	210e      	movs	r1, #14
    abbe:	4b28      	ldr	r3, [pc, #160]	; (ac60 <AppProtocolBrake+0xde0>)
    abc0:	4798      	blx	r3
						}								
						break;
    abc2:	e125      	b.n	ae10 <AppProtocolBrake+0xf90>
					}			
					case 0x5254:
					{
						//---------RT
						if (buffers[7]<4)
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	3307      	adds	r3, #7
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	2b03      	cmp	r3, #3
    abcc:	d900      	bls.n	abd0 <AppProtocolBrake+0xd50>
    abce:	e0e6      	b.n	ad9e <AppProtocolBrake+0xf1e>
						{
							protocolBuffer[0] = '#';
    abd0:	4b18      	ldr	r3, [pc, #96]	; (ac34 <AppProtocolBrake+0xdb4>)
    abd2:	2223      	movs	r2, #35	; 0x23
    abd4:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    abd6:	4b18      	ldr	r3, [pc, #96]	; (ac38 <AppProtocolBrake+0xdb8>)
    abd8:	7bda      	ldrb	r2, [r3, #15]
    abda:	4b16      	ldr	r3, [pc, #88]	; (ac34 <AppProtocolBrake+0xdb4>)
    abdc:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    abde:	4b16      	ldr	r3, [pc, #88]	; (ac38 <AppProtocolBrake+0xdb8>)
    abe0:	7c1a      	ldrb	r2, [r3, #16]
    abe2:	4b14      	ldr	r3, [pc, #80]	; (ac34 <AppProtocolBrake+0xdb4>)
    abe4:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    abe6:	4b13      	ldr	r3, [pc, #76]	; (ac34 <AppProtocolBrake+0xdb4>)
    abe8:	2252      	movs	r2, #82	; 0x52
    abea:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    abec:	4b11      	ldr	r3, [pc, #68]	; (ac34 <AppProtocolBrake+0xdb4>)
    abee:	2254      	movs	r2, #84	; 0x54
    abf0:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] =  33;
    abf2:	4b10      	ldr	r3, [pc, #64]	; (ac34 <AppProtocolBrake+0xdb4>)
    abf4:	2221      	movs	r2, #33	; 0x21
    abf6:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[7];	
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	79da      	ldrb	r2, [r3, #7]
    abfc:	4b0d      	ldr	r3, [pc, #52]	; (ac34 <AppProtocolBrake+0xdb4>)
    abfe:	719a      	strb	r2, [r3, #6]
					 
							offset = buffers[7]*3; 
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	3307      	adds	r3, #7
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	1c39      	adds	r1, r7, #0
    ac08:	3115      	adds	r1, #21
    ac0a:	1c1a      	adds	r2, r3, #0
    ac0c:	1892      	adds	r2, r2, r2
    ac0e:	18d3      	adds	r3, r2, r3
    ac10:	700b      	strb	r3, [r1, #0]
							protocolBuffer[7] = sensorDynamic[offset].Change;
    ac12:	1c3b      	adds	r3, r7, #0
    ac14:	3315      	adds	r3, #21
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	4a13      	ldr	r2, [pc, #76]	; (ac68 <AppProtocolBrake+0xde8>)
    ac1a:	011b      	lsls	r3, r3, #4
    ac1c:	18d3      	adds	r3, r2, r3
    ac1e:	791a      	ldrb	r2, [r3, #4]
    ac20:	4b04      	ldr	r3, [pc, #16]	; (ac34 <AppProtocolBrake+0xdb4>)
    ac22:	71da      	strb	r2, [r3, #7]
							for (i=0;i<7;i++)
    ac24:	1c3b      	adds	r3, r7, #0
    ac26:	3337      	adds	r3, #55	; 0x37
    ac28:	2200      	movs	r2, #0
    ac2a:	701a      	strb	r2, [r3, #0]
    ac2c:	e036      	b.n	ac9c <AppProtocolBrake+0xe1c>
    ac2e:	46c0      	nop			; (mov r8, r8)
    ac30:	20002efc 	.word	0x20002efc
    ac34:	20002f20 	.word	0x20002f20
    ac38:	20002fb8 	.word	0x20002fb8
    ac3c:	200036cc 	.word	0x200036cc
    ac40:	0000b409 	.word	0x0000b409
    ac44:	20003694 	.word	0x20003694
    ac48:	20002ebf 	.word	0x20002ebf
    ac4c:	200004ba 	.word	0x200004ba
    ac50:	20002ee6 	.word	0x20002ee6
    ac54:	00009e01 	.word	0x00009e01
    ac58:	200036d2 	.word	0x200036d2
    ac5c:	0001109d 	.word	0x0001109d
    ac60:	00010275 	.word	0x00010275
    ac64:	00005cfd 	.word	0x00005cfd
    ac68:	200033b4 	.word	0x200033b4
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
    ac6c:	1c3b      	adds	r3, r7, #0
    ac6e:	3337      	adds	r3, #55	; 0x37
    ac70:	781b      	ldrb	r3, [r3, #0]
    ac72:	3308      	adds	r3, #8
    ac74:	1c3a      	adds	r2, r7, #0
    ac76:	3215      	adds	r2, #21
    ac78:	7810      	ldrb	r0, [r2, #0]
    ac7a:	1c3a      	adds	r2, r7, #0
    ac7c:	3237      	adds	r2, #55	; 0x37
    ac7e:	7812      	ldrb	r2, [r2, #0]
    ac80:	4965      	ldr	r1, [pc, #404]	; (ae18 <AppProtocolBrake+0xf98>)
    ac82:	0100      	lsls	r0, r0, #4
    ac84:	1882      	adds	r2, r0, r2
    ac86:	188a      	adds	r2, r1, r2
    ac88:	7951      	ldrb	r1, [r2, #5]
    ac8a:	4a64      	ldr	r2, [pc, #400]	; (ae1c <AppProtocolBrake+0xf9c>)
    ac8c:	54d1      	strb	r1, [r2, r3]
							protocolBuffer[5] =  33;
							protocolBuffer[6] = buffers[7];	
					 
							offset = buffers[7]*3; 
							protocolBuffer[7] = sensorDynamic[offset].Change;
							for (i=0;i<7;i++)
    ac8e:	1c3b      	adds	r3, r7, #0
    ac90:	3337      	adds	r3, #55	; 0x37
    ac92:	781a      	ldrb	r2, [r3, #0]
    ac94:	1c3b      	adds	r3, r7, #0
    ac96:	3337      	adds	r3, #55	; 0x37
    ac98:	3201      	adds	r2, #1
    ac9a:	701a      	strb	r2, [r3, #0]
    ac9c:	1c3b      	adds	r3, r7, #0
    ac9e:	3337      	adds	r3, #55	; 0x37
    aca0:	781b      	ldrb	r3, [r3, #0]
    aca2:	2b06      	cmp	r3, #6
    aca4:	d9e2      	bls.n	ac6c <AppProtocolBrake+0xdec>
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
    aca6:	1c3b      	adds	r3, r7, #0
    aca8:	3315      	adds	r3, #21
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	3301      	adds	r3, #1
    acae:	4a5a      	ldr	r2, [pc, #360]	; (ae18 <AppProtocolBrake+0xf98>)
    acb0:	011b      	lsls	r3, r3, #4
    acb2:	18d3      	adds	r3, r2, r3
    acb4:	791a      	ldrb	r2, [r3, #4]
    acb6:	4b59      	ldr	r3, [pc, #356]	; (ae1c <AppProtocolBrake+0xf9c>)
    acb8:	73da      	strb	r2, [r3, #15]
							for (i=0;i<7;i++)
    acba:	1c3b      	adds	r3, r7, #0
    acbc:	3337      	adds	r3, #55	; 0x37
    acbe:	2200      	movs	r2, #0
    acc0:	701a      	strb	r2, [r3, #0]
    acc2:	e018      	b.n	acf6 <AppProtocolBrake+0xe76>
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
    acc4:	1c3b      	adds	r3, r7, #0
    acc6:	3337      	adds	r3, #55	; 0x37
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	3310      	adds	r3, #16
    accc:	1c3a      	adds	r2, r7, #0
    acce:	3215      	adds	r2, #21
    acd0:	7812      	ldrb	r2, [r2, #0]
    acd2:	1c50      	adds	r0, r2, #1
    acd4:	1c3a      	adds	r2, r7, #0
    acd6:	3237      	adds	r2, #55	; 0x37
    acd8:	7812      	ldrb	r2, [r2, #0]
    acda:	494f      	ldr	r1, [pc, #316]	; (ae18 <AppProtocolBrake+0xf98>)
    acdc:	0100      	lsls	r0, r0, #4
    acde:	1882      	adds	r2, r0, r2
    ace0:	188a      	adds	r2, r1, r2
    ace2:	7951      	ldrb	r1, [r2, #5]
    ace4:	4a4d      	ldr	r2, [pc, #308]	; (ae1c <AppProtocolBrake+0xf9c>)
    ace6:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[8+i] = sensorDynamic[offset].LastPacket[i];
							}	
							protocolBuffer[15] = sensorDynamic[offset+1].Change;
							for (i=0;i<7;i++)
    ace8:	1c3b      	adds	r3, r7, #0
    acea:	3337      	adds	r3, #55	; 0x37
    acec:	781a      	ldrb	r2, [r3, #0]
    acee:	1c3b      	adds	r3, r7, #0
    acf0:	3337      	adds	r3, #55	; 0x37
    acf2:	3201      	adds	r2, #1
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	1c3b      	adds	r3, r7, #0
    acf8:	3337      	adds	r3, #55	; 0x37
    acfa:	781b      	ldrb	r3, [r3, #0]
    acfc:	2b06      	cmp	r3, #6
    acfe:	d9e1      	bls.n	acc4 <AppProtocolBrake+0xe44>
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
    ad00:	1c3b      	adds	r3, r7, #0
    ad02:	3315      	adds	r3, #21
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	3302      	adds	r3, #2
    ad08:	4a43      	ldr	r2, [pc, #268]	; (ae18 <AppProtocolBrake+0xf98>)
    ad0a:	011b      	lsls	r3, r3, #4
    ad0c:	18d3      	adds	r3, r2, r3
    ad0e:	791a      	ldrb	r2, [r3, #4]
    ad10:	4b42      	ldr	r3, [pc, #264]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad12:	75da      	strb	r2, [r3, #23]
							for (i=0;i<7;i++)
    ad14:	1c3b      	adds	r3, r7, #0
    ad16:	3337      	adds	r3, #55	; 0x37
    ad18:	2200      	movs	r2, #0
    ad1a:	701a      	strb	r2, [r3, #0]
    ad1c:	e018      	b.n	ad50 <AppProtocolBrake+0xed0>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
    ad1e:	1c3b      	adds	r3, r7, #0
    ad20:	3337      	adds	r3, #55	; 0x37
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	3318      	adds	r3, #24
    ad26:	1c3a      	adds	r2, r7, #0
    ad28:	3215      	adds	r2, #21
    ad2a:	7812      	ldrb	r2, [r2, #0]
    ad2c:	1c90      	adds	r0, r2, #2
    ad2e:	1c3a      	adds	r2, r7, #0
    ad30:	3237      	adds	r2, #55	; 0x37
    ad32:	7812      	ldrb	r2, [r2, #0]
    ad34:	4938      	ldr	r1, [pc, #224]	; (ae18 <AppProtocolBrake+0xf98>)
    ad36:	0100      	lsls	r0, r0, #4
    ad38:	1882      	adds	r2, r0, r2
    ad3a:	188a      	adds	r2, r1, r2
    ad3c:	7951      	ldrb	r1, [r2, #5]
    ad3e:	4a37      	ldr	r2, [pc, #220]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad40:	54d1      	strb	r1, [r2, r3]
							for (i=0;i<7;i++)
							{
								protocolBuffer[16+i] = sensorDynamic[offset+1].LastPacket[i];
							}		
							protocolBuffer[23] = sensorDynamic[offset+2].Change;
							for (i=0;i<7;i++)
    ad42:	1c3b      	adds	r3, r7, #0
    ad44:	3337      	adds	r3, #55	; 0x37
    ad46:	781a      	ldrb	r2, [r3, #0]
    ad48:	1c3b      	adds	r3, r7, #0
    ad4a:	3337      	adds	r3, #55	; 0x37
    ad4c:	3201      	adds	r2, #1
    ad4e:	701a      	strb	r2, [r3, #0]
    ad50:	1c3b      	adds	r3, r7, #0
    ad52:	3337      	adds	r3, #55	; 0x37
    ad54:	781b      	ldrb	r3, [r3, #0]
    ad56:	2b06      	cmp	r3, #6
    ad58:	d9e1      	bls.n	ad1e <AppProtocolBrake+0xe9e>
							{
								protocolBuffer[24+i] = sensorDynamic[offset+2].LastPacket[i];
							}	
							checksum = AppProtocolChecksum(protocolBuffer,31);	
    ad5a:	1c3c      	adds	r4, r7, #0
    ad5c:	341f      	adds	r4, #31
    ad5e:	4b2f      	ldr	r3, [pc, #188]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad60:	1c18      	adds	r0, r3, #0
    ad62:	211f      	movs	r1, #31
    ad64:	4b2e      	ldr	r3, [pc, #184]	; (ae20 <AppProtocolBrake+0xfa0>)
    ad66:	4798      	blx	r3
    ad68:	1c03      	adds	r3, r0, #0
    ad6a:	7023      	strb	r3, [r4, #0]
							protocolBuffer[31] = checksum; 			
    ad6c:	4b2b      	ldr	r3, [pc, #172]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad6e:	1c3a      	adds	r2, r7, #0
    ad70:	321f      	adds	r2, #31
    ad72:	7812      	ldrb	r2, [r2, #0]
    ad74:	77da      	strb	r2, [r3, #31]
							protocolBuffer[32] = 0x04; 																	
    ad76:	4a29      	ldr	r2, [pc, #164]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad78:	2320      	movs	r3, #32
    ad7a:	2104      	movs	r1, #4
    ad7c:	54d1      	strb	r1, [r2, r3]
											
							if (whichRadio == WHICHRADIO_LORA)
    ad7e:	4b29      	ldr	r3, [pc, #164]	; (ae24 <AppProtocolBrake+0xfa4>)
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	2b99      	cmp	r3, #153	; 0x99
    ad84:	d105      	bne.n	ad92 <AppProtocolBrake+0xf12>
							{
								SX1272LoraTransmit(protocolBuffer,33);
    ad86:	4b25      	ldr	r3, [pc, #148]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad88:	1c18      	adds	r0, r3, #0
    ad8a:	2121      	movs	r1, #33	; 0x21
    ad8c:	4b26      	ldr	r3, [pc, #152]	; (ae28 <AppProtocolBrake+0xfa8>)
    ad8e:	4798      	blx	r3
    ad90:	e03d      	b.n	ae0e <AppProtocolBrake+0xf8e>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,33);
    ad92:	4b22      	ldr	r3, [pc, #136]	; (ae1c <AppProtocolBrake+0xf9c>)
    ad94:	1c18      	adds	r0, r3, #0
    ad96:	2121      	movs	r1, #33	; 0x21
    ad98:	4b24      	ldr	r3, [pc, #144]	; (ae2c <AppProtocolBrake+0xfac>)
    ad9a:	4798      	blx	r3
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
							}											
						}
						break;
    ad9c:	e038      	b.n	ae10 <AppProtocolBrake+0xf90>
								SX1272FskTransmit(protocolBuffer,33);
							}								
						}
						else
						{
							protocolBuffer[0] = '#';
    ad9e:	4b1f      	ldr	r3, [pc, #124]	; (ae1c <AppProtocolBrake+0xf9c>)
    ada0:	2223      	movs	r2, #35	; 0x23
    ada2:	701a      	strb	r2, [r3, #0]
							protocolBuffer[1] = table0.Item.EepromManDevSerial[4];
    ada4:	4b22      	ldr	r3, [pc, #136]	; (ae30 <AppProtocolBrake+0xfb0>)
    ada6:	7bda      	ldrb	r2, [r3, #15]
    ada8:	4b1c      	ldr	r3, [pc, #112]	; (ae1c <AppProtocolBrake+0xf9c>)
    adaa:	705a      	strb	r2, [r3, #1]
							protocolBuffer[2] = table0.Item.EepromManDevSerial[5];
    adac:	4b20      	ldr	r3, [pc, #128]	; (ae30 <AppProtocolBrake+0xfb0>)
    adae:	7c1a      	ldrb	r2, [r3, #16]
    adb0:	4b1a      	ldr	r3, [pc, #104]	; (ae1c <AppProtocolBrake+0xf9c>)
    adb2:	709a      	strb	r2, [r3, #2]
							protocolBuffer[3] = 'R';
    adb4:	4b19      	ldr	r3, [pc, #100]	; (ae1c <AppProtocolBrake+0xf9c>)
    adb6:	2252      	movs	r2, #82	; 0x52
    adb8:	70da      	strb	r2, [r3, #3]
							protocolBuffer[4] = 'T';
    adba:	4b18      	ldr	r3, [pc, #96]	; (ae1c <AppProtocolBrake+0xf9c>)
    adbc:	2254      	movs	r2, #84	; 0x54
    adbe:	711a      	strb	r2, [r3, #4]
							protocolBuffer[5] = 9;
    adc0:	4b16      	ldr	r3, [pc, #88]	; (ae1c <AppProtocolBrake+0xf9c>)
    adc2:	2209      	movs	r2, #9
    adc4:	715a      	strb	r2, [r3, #5]
							protocolBuffer[6] = buffers[6];
    adc6:	687b      	ldr	r3, [r7, #4]
    adc8:	799a      	ldrb	r2, [r3, #6]
    adca:	4b14      	ldr	r3, [pc, #80]	; (ae1c <AppProtocolBrake+0xf9c>)
    adcc:	719a      	strb	r2, [r3, #6]
							checksum = AppProtocolChecksum(protocolBuffer,7);	
    adce:	1c3c      	adds	r4, r7, #0
    add0:	341f      	adds	r4, #31
    add2:	4b12      	ldr	r3, [pc, #72]	; (ae1c <AppProtocolBrake+0xf9c>)
    add4:	1c18      	adds	r0, r3, #0
    add6:	2107      	movs	r1, #7
    add8:	4b11      	ldr	r3, [pc, #68]	; (ae20 <AppProtocolBrake+0xfa0>)
    adda:	4798      	blx	r3
    addc:	1c03      	adds	r3, r0, #0
    adde:	7023      	strb	r3, [r4, #0]
							protocolBuffer[7] = checksum; 			
    ade0:	4b0e      	ldr	r3, [pc, #56]	; (ae1c <AppProtocolBrake+0xf9c>)
    ade2:	1c3a      	adds	r2, r7, #0
    ade4:	321f      	adds	r2, #31
    ade6:	7812      	ldrb	r2, [r2, #0]
    ade8:	71da      	strb	r2, [r3, #7]
							protocolBuffer[8] = 0x04; 		
    adea:	4b0c      	ldr	r3, [pc, #48]	; (ae1c <AppProtocolBrake+0xf9c>)
    adec:	2204      	movs	r2, #4
    adee:	721a      	strb	r2, [r3, #8]
							if (whichRadio == WHICHRADIO_LORA)
    adf0:	4b0c      	ldr	r3, [pc, #48]	; (ae24 <AppProtocolBrake+0xfa4>)
    adf2:	781b      	ldrb	r3, [r3, #0]
    adf4:	2b99      	cmp	r3, #153	; 0x99
    adf6:	d105      	bne.n	ae04 <AppProtocolBrake+0xf84>
							{
								SX1272LoraTransmit(protocolBuffer,9);
    adf8:	4b08      	ldr	r3, [pc, #32]	; (ae1c <AppProtocolBrake+0xf9c>)
    adfa:	1c18      	adds	r0, r3, #0
    adfc:	2109      	movs	r1, #9
    adfe:	4b0a      	ldr	r3, [pc, #40]	; (ae28 <AppProtocolBrake+0xfa8>)
    ae00:	4798      	blx	r3
    ae02:	e004      	b.n	ae0e <AppProtocolBrake+0xf8e>
							}
							else
							{
								SX1272FskTransmit(protocolBuffer,9);
    ae04:	4b05      	ldr	r3, [pc, #20]	; (ae1c <AppProtocolBrake+0xf9c>)
    ae06:	1c18      	adds	r0, r3, #0
    ae08:	2109      	movs	r1, #9
    ae0a:	4b08      	ldr	r3, [pc, #32]	; (ae2c <AppProtocolBrake+0xfac>)
    ae0c:	4798      	blx	r3
							}											
						}
						break;
    ae0e:	46c0      	nop			; (mov r8, r8)
			
				}		
			}
		}
	}
}
    ae10:	46bd      	mov	sp, r7
    ae12:	b00f      	add	sp, #60	; 0x3c
    ae14:	bd90      	pop	{r4, r7, pc}
    ae16:	46c0      	nop			; (mov r8, r8)
    ae18:	200033b4 	.word	0x200033b4
    ae1c:	20002f20 	.word	0x20002f20
    ae20:	00009e01 	.word	0x00009e01
    ae24:	200036d2 	.word	0x200036d2
    ae28:	0001109d 	.word	0x0001109d
    ae2c:	00010275 	.word	0x00010275
    ae30:	20002fb8 	.word	0x20002fb8

0000ae34 <SendOneMessage>:
#endif	

void SendOneMessage()
{
    ae34:	b590      	push	{r4, r7, lr}
    ae36:	b083      	sub	sp, #12
    ae38:	af00      	add	r7, sp, #0
 
		//-------------------
		// address field set to ffff
		// since in pairing mode.
		//-------------------
		buffer[0] = '#';
    ae3a:	4b19      	ldr	r3, [pc, #100]	; (aea0 <SendOneMessage+0x6c>)
    ae3c:	2223      	movs	r2, #35	; 0x23
    ae3e:	701a      	strb	r2, [r3, #0]
		buffer[1] = 0xff;
    ae40:	4b17      	ldr	r3, [pc, #92]	; (aea0 <SendOneMessage+0x6c>)
    ae42:	22ff      	movs	r2, #255	; 0xff
    ae44:	705a      	strb	r2, [r3, #1]
		buffer[2] = 0xff;
    ae46:	4b16      	ldr	r3, [pc, #88]	; (aea0 <SendOneMessage+0x6c>)
    ae48:	22ff      	movs	r2, #255	; 0xff
    ae4a:	709a      	strb	r2, [r3, #2]
		buffer[3] = 'T';
    ae4c:	4b14      	ldr	r3, [pc, #80]	; (aea0 <SendOneMessage+0x6c>)
    ae4e:	2254      	movs	r2, #84	; 0x54
    ae50:	70da      	strb	r2, [r3, #3]
		buffer[4] = 'T';
    ae52:	4b13      	ldr	r3, [pc, #76]	; (aea0 <SendOneMessage+0x6c>)
    ae54:	2254      	movs	r2, #84	; 0x54
    ae56:	711a      	strb	r2, [r3, #4]
		buffer[5] = 8;
    ae58:	4b11      	ldr	r3, [pc, #68]	; (aea0 <SendOneMessage+0x6c>)
    ae5a:	2208      	movs	r2, #8
    ae5c:	715a      	strb	r2, [r3, #5]
		checksum = AppProtocolChecksum(buffer,6);
    ae5e:	1dfc      	adds	r4, r7, #7
    ae60:	4b0f      	ldr	r3, [pc, #60]	; (aea0 <SendOneMessage+0x6c>)
    ae62:	1c18      	adds	r0, r3, #0
    ae64:	2106      	movs	r1, #6
    ae66:	4b0f      	ldr	r3, [pc, #60]	; (aea4 <SendOneMessage+0x70>)
    ae68:	4798      	blx	r3
    ae6a:	1c03      	adds	r3, r0, #0
    ae6c:	7023      	strb	r3, [r4, #0]
		buffer[6] = checksum;
    ae6e:	4b0c      	ldr	r3, [pc, #48]	; (aea0 <SendOneMessage+0x6c>)
    ae70:	1dfa      	adds	r2, r7, #7
    ae72:	7812      	ldrb	r2, [r2, #0]
    ae74:	719a      	strb	r2, [r3, #6]
		buffer[7] = 0x04;
    ae76:	4b0a      	ldr	r3, [pc, #40]	; (aea0 <SendOneMessage+0x6c>)
    ae78:	2204      	movs	r2, #4
    ae7a:	71da      	strb	r2, [r3, #7]
		if (whichRadio == WHICHRADIO_LORA)
    ae7c:	4b0a      	ldr	r3, [pc, #40]	; (aea8 <SendOneMessage+0x74>)
    ae7e:	781b      	ldrb	r3, [r3, #0]
    ae80:	2b99      	cmp	r3, #153	; 0x99
    ae82:	d105      	bne.n	ae90 <SendOneMessage+0x5c>
		{
			SX1272LoraTransmit(buffer,8);
    ae84:	4b06      	ldr	r3, [pc, #24]	; (aea0 <SendOneMessage+0x6c>)
    ae86:	1c18      	adds	r0, r3, #0
    ae88:	2108      	movs	r1, #8
    ae8a:	4b08      	ldr	r3, [pc, #32]	; (aeac <SendOneMessage+0x78>)
    ae8c:	4798      	blx	r3
    ae8e:	e004      	b.n	ae9a <SendOneMessage+0x66>
		}
		else
		{
			SX1272FskTransmit(buffer,8);
    ae90:	4b03      	ldr	r3, [pc, #12]	; (aea0 <SendOneMessage+0x6c>)
    ae92:	1c18      	adds	r0, r3, #0
    ae94:	2108      	movs	r1, #8
    ae96:	4b06      	ldr	r3, [pc, #24]	; (aeb0 <SendOneMessage+0x7c>)
    ae98:	4798      	blx	r3
		}
 
}
    ae9a:	46bd      	mov	sp, r7
    ae9c:	b003      	add	sp, #12
    ae9e:	bd90      	pop	{r4, r7, pc}
    aea0:	20002f00 	.word	0x20002f00
    aea4:	00009e01 	.word	0x00009e01
    aea8:	200036d2 	.word	0x200036d2
    aeac:	0001109d 	.word	0x0001109d
    aeb0:	00010275 	.word	0x00010275

0000aeb4 <ConfigInit>:
//------------------------------------------------------------------------------
// This function handles allows all the RAM copies of EEPROM values to be loaded 
// in.
//==============================================================================
void ConfigInit(void)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b086      	sub	sp, #24
    aeb8:	af00      	add	r7, sp, #0
  uint8_t testBuffer[10],value,n,eepromManDevSerial[6],i; 
  
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    aeba:	1c3b      	adds	r3, r7, #0
    aebc:	330c      	adds	r3, #12
    aebe:	1c18      	adds	r0, r3, #0
    aec0:	2102      	movs	r1, #2
    aec2:	220a      	movs	r2, #10
    aec4:	4bdf      	ldr	r3, [pc, #892]	; (b244 <ConfigInit+0x390>)
    aec6:	4798      	blx	r3
    aec8:	1c03      	adds	r3, r0, #0
    aeca:	2b00      	cmp	r3, #0
    aecc:	d100      	bne.n	aed0 <ConfigInit+0x1c>
    aece:	e151      	b.n	b174 <ConfigInit+0x2c0>
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    aed0:	1c3b      	adds	r3, r7, #0
    aed2:	330c      	adds	r3, #12
    aed4:	781b      	ldrb	r3, [r3, #0]
    aed6:	2b43      	cmp	r3, #67	; 0x43
    aed8:	d123      	bne.n	af22 <ConfigInit+0x6e>
    aeda:	1c3b      	adds	r3, r7, #0
    aedc:	330c      	adds	r3, #12
    aede:	785b      	ldrb	r3, [r3, #1]
    aee0:	2b52      	cmp	r3, #82	; 0x52
    aee2:	d11e      	bne.n	af22 <ConfigInit+0x6e>
    aee4:	1c3b      	adds	r3, r7, #0
    aee6:	330c      	adds	r3, #12
    aee8:	789b      	ldrb	r3, [r3, #2]
    aeea:	2b45      	cmp	r3, #69	; 0x45
    aeec:	d119      	bne.n	af22 <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    aeee:	1c3b      	adds	r3, r7, #0
    aef0:	330c      	adds	r3, #12
    aef2:	78db      	ldrb	r3, [r3, #3]
 
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
    aef4:	2b45      	cmp	r3, #69	; 0x45
    aef6:	d114      	bne.n	af22 <ConfigInit+0x6e>
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    aef8:	1c3b      	adds	r3, r7, #0
    aefa:	330c      	adds	r3, #12
    aefc:	791b      	ldrb	r3, [r3, #4]
    aefe:	2b44      	cmp	r3, #68	; 0x44
    af00:	d10f      	bne.n	af22 <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    af02:	1c3b      	adds	r3, r7, #0
    af04:	330c      	adds	r3, #12
    af06:	799b      	ldrb	r3, [r3, #6]
  if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
    af08:	2b30      	cmp	r3, #48	; 0x30
    af0a:	d10a      	bne.n	af22 <ConfigInit+0x6e>
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    af0c:	1c3b      	adds	r3, r7, #0
    af0e:	330c      	adds	r3, #12
    af10:	7a1b      	ldrb	r3, [r3, #8]
    af12:	2b30      	cmp	r3, #48	; 0x30
    af14:	d105      	bne.n	af22 <ConfigInit+0x6e>
		(testBuffer[9] == CONFIGDB_VER2))
    af16:	1c3b      	adds	r3, r7, #0
    af18:	330c      	adds	r3, #12
    af1a:	7a5b      	ldrb	r3, [r3, #9]
  { 
	//------------------------
	// check the HEADER
	if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E')&&
	    (testBuffer[3] == 'E')&&(testBuffer[4] == 'D')&&
		(testBuffer[6] == CONFIGDB_VER0)&&(testBuffer[8] == CONFIGDB_VER1)&&
    af1c:	2b36      	cmp	r3, #54	; 0x36
    af1e:	d100      	bne.n	af22 <ConfigInit+0x6e>
    af20:	e103      	b.n	b12a <ConfigInit+0x276>
		 
	}
	else
	{
		//------------------------setup header and default values 
		testBuffer[0] = 'C';
    af22:	1c3b      	adds	r3, r7, #0
    af24:	330c      	adds	r3, #12
    af26:	2243      	movs	r2, #67	; 0x43
    af28:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 'R';
    af2a:	1c3b      	adds	r3, r7, #0
    af2c:	330c      	adds	r3, #12
    af2e:	2252      	movs	r2, #82	; 0x52
    af30:	705a      	strb	r2, [r3, #1]
		testBuffer[2] = 'E';
    af32:	1c3b      	adds	r3, r7, #0
    af34:	330c      	adds	r3, #12
    af36:	2245      	movs	r2, #69	; 0x45
    af38:	709a      	strb	r2, [r3, #2]
		testBuffer[3] = 'E';
    af3a:	1c3b      	adds	r3, r7, #0
    af3c:	330c      	adds	r3, #12
    af3e:	2245      	movs	r2, #69	; 0x45
    af40:	70da      	strb	r2, [r3, #3]
		testBuffer[4] = 'D';
    af42:	1c3b      	adds	r3, r7, #0
    af44:	330c      	adds	r3, #12
    af46:	2244      	movs	r2, #68	; 0x44
    af48:	711a      	strb	r2, [r3, #4]
		testBuffer[5] = 'V';
    af4a:	1c3b      	adds	r3, r7, #0
    af4c:	330c      	adds	r3, #12
    af4e:	2256      	movs	r2, #86	; 0x56
    af50:	715a      	strb	r2, [r3, #5]
		testBuffer[6] = CONFIGDB_VER0;
    af52:	1c3b      	adds	r3, r7, #0
    af54:	330c      	adds	r3, #12
    af56:	2230      	movs	r2, #48	; 0x30
    af58:	719a      	strb	r2, [r3, #6]
		testBuffer[7] = '.';
    af5a:	1c3b      	adds	r3, r7, #0
    af5c:	330c      	adds	r3, #12
    af5e:	222e      	movs	r2, #46	; 0x2e
    af60:	71da      	strb	r2, [r3, #7]
		testBuffer[8] = CONFIGDB_VER1;
    af62:	1c3b      	adds	r3, r7, #0
    af64:	330c      	adds	r3, #12
    af66:	2230      	movs	r2, #48	; 0x30
    af68:	721a      	strb	r2, [r3, #8]
		testBuffer[9] = CONFIGDB_VER2; 					
    af6a:	1c3b      	adds	r3, r7, #0
    af6c:	330c      	adds	r3, #12
    af6e:	2236      	movs	r2, #54	; 0x36
    af70:	725a      	strb	r2, [r3, #9]
		for (n=0;n<10;n++)
    af72:	1c3b      	adds	r3, r7, #0
    af74:	3317      	adds	r3, #23
    af76:	2200      	movs	r2, #0
    af78:	701a      	strb	r2, [r3, #0]
    af7a:	e016      	b.n	afaa <ConfigInit+0xf6>
		{
			if (I2CEEPROMBufferWrite(&testBuffer[n],TableHeader1_Setting+n,1)!= 0)
    af7c:	1c3b      	adds	r3, r7, #0
    af7e:	3317      	adds	r3, #23
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	1c3a      	adds	r2, r7, #0
    af84:	320c      	adds	r2, #12
    af86:	18d2      	adds	r2, r2, r3
    af88:	1c3b      	adds	r3, r7, #0
    af8a:	3317      	adds	r3, #23
    af8c:	781b      	ldrb	r3, [r3, #0]
    af8e:	3302      	adds	r3, #2
    af90:	b2db      	uxtb	r3, r3
    af92:	1c10      	adds	r0, r2, #0
    af94:	1c19      	adds	r1, r3, #0
    af96:	2201      	movs	r2, #1
    af98:	4bab      	ldr	r3, [pc, #684]	; (b248 <ConfigInit+0x394>)
    af9a:	4798      	blx	r3
		testBuffer[5] = 'V';
		testBuffer[6] = CONFIGDB_VER0;
		testBuffer[7] = '.';
		testBuffer[8] = CONFIGDB_VER1;
		testBuffer[9] = CONFIGDB_VER2; 					
		for (n=0;n<10;n++)
    af9c:	1c3b      	adds	r3, r7, #0
    af9e:	3317      	adds	r3, #23
    afa0:	781a      	ldrb	r2, [r3, #0]
    afa2:	1c3b      	adds	r3, r7, #0
    afa4:	3317      	adds	r3, #23
    afa6:	3201      	adds	r2, #1
    afa8:	701a      	strb	r2, [r3, #0]
    afaa:	1c3b      	adds	r3, r7, #0
    afac:	3317      	adds	r3, #23
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	2b09      	cmp	r3, #9
    afb2:	d9e3      	bls.n	af7c <ConfigInit+0xc8>
			}		
		}
		//----------------------------------------
		// place in defaults
		//---------------------------------------
		testBuffer[0] = 0x5A; 
    afb4:	1c3b      	adds	r3, r7, #0
    afb6:	330c      	adds	r3, #12
    afb8:	225a      	movs	r2, #90	; 0x5a
    afba:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Key_Setting,1);
    afbc:	1c3b      	adds	r3, r7, #0
    afbe:	330c      	adds	r3, #12
    afc0:	1c18      	adds	r0, r3, #0
    afc2:	2128      	movs	r1, #40	; 0x28
    afc4:	2201      	movs	r2, #1
    afc6:	4ba0      	ldr	r3, [pc, #640]	; (b248 <ConfigInit+0x394>)
    afc8:	4798      	blx	r3
		testBuffer[0] = 0x01; 
    afca:	1c3b      	adds	r3, r7, #0
    afcc:	330c      	adds	r3, #12
    afce:	2201      	movs	r2, #1
    afd0:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,Mode_Setting,1);
    afd2:	1c3b      	adds	r3, r7, #0
    afd4:	330c      	adds	r3, #12
    afd6:	1c18      	adds	r0, r3, #0
    afd8:	2129      	movs	r1, #41	; 0x29
    afda:	2201      	movs	r2, #1
    afdc:	4b9a      	ldr	r3, [pc, #616]	; (b248 <ConfigInit+0x394>)
    afde:	4798      	blx	r3
		testBuffer[0] = 0x05; 
    afe0:	1c3b      	adds	r3, r7, #0
    afe2:	330c      	adds	r3, #12
    afe4:	2205      	movs	r2, #5
    afe6:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,MaxForce_Setting,1);		
    afe8:	1c3b      	adds	r3, r7, #0
    afea:	330c      	adds	r3, #12
    afec:	1c18      	adds	r0, r3, #0
    afee:	212a      	movs	r1, #42	; 0x2a
    aff0:	2201      	movs	r2, #1
    aff2:	4b95      	ldr	r3, [pc, #596]	; (b248 <ConfigInit+0x394>)
    aff4:	4798      	blx	r3
		
		//------------run time counters
		testBuffer[0] = 0x00; 
    aff6:	1c3b      	adds	r3, r7, #0
    aff8:	330c      	adds	r3, #12
    affa:	2200      	movs	r2, #0
    affc:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_X_Setting,1);
    affe:	1c3b      	adds	r3, r7, #0
    b000:	330c      	adds	r3, #12
    b002:	1c18      	adds	r0, r3, #0
    b004:	212b      	movs	r1, #43	; 0x2b
    b006:	2201      	movs	r2, #1
    b008:	4b8f      	ldr	r3, [pc, #572]	; (b248 <ConfigInit+0x394>)
    b00a:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b00c:	1c3b      	adds	r3, r7, #0
    b00e:	330c      	adds	r3, #12
    b010:	2200      	movs	r2, #0
    b012:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_H_Setting,1);
    b014:	1c3b      	adds	r3, r7, #0
    b016:	330c      	adds	r3, #12
    b018:	1c18      	adds	r0, r3, #0
    b01a:	212c      	movs	r1, #44	; 0x2c
    b01c:	2201      	movs	r2, #1
    b01e:	4b8a      	ldr	r3, [pc, #552]	; (b248 <ConfigInit+0x394>)
    b020:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b022:	1c3b      	adds	r3, r7, #0
    b024:	330c      	adds	r3, #12
    b026:	2200      	movs	r2, #0
    b028:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_M_Setting,1);	
    b02a:	1c3b      	adds	r3, r7, #0
    b02c:	330c      	adds	r3, #12
    b02e:	1c18      	adds	r0, r3, #0
    b030:	212d      	movs	r1, #45	; 0x2d
    b032:	2201      	movs	r2, #1
    b034:	4b84      	ldr	r3, [pc, #528]	; (b248 <ConfigInit+0x394>)
    b036:	4798      	blx	r3
		testBuffer[0] = 0x00; 
    b038:	1c3b      	adds	r3, r7, #0
    b03a:	330c      	adds	r3, #12
    b03c:	2200      	movs	r2, #0
    b03e:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,RT_Ctr_L_Setting,1);	 		 
    b040:	1c3b      	adds	r3, r7, #0
    b042:	330c      	adds	r3, #12
    b044:	1c18      	adds	r0, r3, #0
    b046:	212e      	movs	r1, #46	; 0x2e
    b048:	2201      	movs	r2, #1
    b04a:	4b7f      	ldr	r3, [pc, #508]	; (b248 <ConfigInit+0x394>)
    b04c:	4798      	blx	r3
		
		testBuffer[0] = 0x00;
    b04e:	1c3b      	adds	r3, r7, #0
    b050:	330c      	adds	r3, #12
    b052:	2200      	movs	r2, #0
    b054:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressMSB,1);
    b056:	1c3b      	adds	r3, r7, #0
    b058:	330c      	adds	r3, #12
    b05a:	1c18      	adds	r0, r3, #0
    b05c:	2139      	movs	r1, #57	; 0x39
    b05e:	2201      	movs	r2, #1
    b060:	4b79      	ldr	r3, [pc, #484]	; (b248 <ConfigInit+0x394>)
    b062:	4798      	blx	r3
		testBuffer[0] = 0x00;
    b064:	1c3b      	adds	r3, r7, #0
    b066:	330c      	adds	r3, #12
    b068:	2200      	movs	r2, #0
    b06a:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,PairAddressLSB,1);		
    b06c:	1c3b      	adds	r3, r7, #0
    b06e:	330c      	adds	r3, #12
    b070:	1c18      	adds	r0, r3, #0
    b072:	213a      	movs	r1, #58	; 0x3a
    b074:	2201      	movs	r2, #1
    b076:	4b74      	ldr	r3, [pc, #464]	; (b248 <ConfigInit+0x394>)
    b078:	4798      	blx	r3
		
		testBuffer[0] = 0x07;
    b07a:	1c3b      	adds	r3, r7, #0
    b07c:	330c      	adds	r3, #12
    b07e:	2207      	movs	r2, #7
    b080:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ScreenColorSetting,1);
    b082:	1c3b      	adds	r3, r7, #0
    b084:	330c      	adds	r3, #12
    b086:	1c18      	adds	r0, r3, #0
    b088:	213b      	movs	r1, #59	; 0x3b
    b08a:	2201      	movs	r2, #1
    b08c:	4b6e      	ldr	r3, [pc, #440]	; (b248 <ConfigInit+0x394>)
    b08e:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b090:	1c3b      	adds	r3, r7, #0
    b092:	330c      	adds	r3, #12
    b094:	2200      	movs	r2, #0
    b096:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,BackLightOnSetting,1);		
    b098:	1c3b      	adds	r3, r7, #0
    b09a:	330c      	adds	r3, #12
    b09c:	1c18      	adds	r0, r3, #0
    b09e:	213c      	movs	r1, #60	; 0x3c
    b0a0:	2201      	movs	r2, #1
    b0a2:	4b69      	ldr	r3, [pc, #420]	; (b248 <ConfigInit+0x394>)
    b0a4:	4798      	blx	r3
		testBuffer[0] = TRUE;
    b0a6:	1c3b      	adds	r3, r7, #0
    b0a8:	330c      	adds	r3, #12
    b0aa:	2201      	movs	r2, #1
    b0ac:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TempFarenheitOnSetting,1);		
    b0ae:	1c3b      	adds	r3, r7, #0
    b0b0:	330c      	adds	r3, #12
    b0b2:	1c18      	adds	r0, r3, #0
    b0b4:	213d      	movs	r1, #61	; 0x3d
    b0b6:	2201      	movs	r2, #1
    b0b8:	4b63      	ldr	r3, [pc, #396]	; (b248 <ConfigInit+0x394>)
    b0ba:	4798      	blx	r3

		testBuffer[0] = 0x07;
    b0bc:	1c3b      	adds	r3, r7, #0
    b0be:	330c      	adds	r3, #12
    b0c0:	2207      	movs	r2, #7
    b0c2:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ForceMaxSetting,1);
    b0c4:	1c3b      	adds	r3, r7, #0
    b0c6:	330c      	adds	r3, #12
    b0c8:	1c18      	adds	r0, r3, #0
    b0ca:	213e      	movs	r1, #62	; 0x3e
    b0cc:	2201      	movs	r2, #1
    b0ce:	4b5e      	ldr	r3, [pc, #376]	; (b248 <ConfigInit+0x394>)
    b0d0:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b0d2:	1c3b      	adds	r3, r7, #0
    b0d4:	330c      	adds	r3, #12
    b0d6:	2200      	movs	r2, #0
    b0d8:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,HybridSetting,1);		
    b0da:	1c3b      	adds	r3, r7, #0
    b0dc:	330c      	adds	r3, #12
    b0de:	1c18      	adds	r0, r3, #0
    b0e0:	2141      	movs	r1, #65	; 0x41
    b0e2:	2201      	movs	r2, #1
    b0e4:	4b58      	ldr	r3, [pc, #352]	; (b248 <ConfigInit+0x394>)
    b0e6:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b0e8:	1c3b      	adds	r3, r7, #0
    b0ea:	330c      	adds	r3, #12
    b0ec:	2200      	movs	r2, #0
    b0ee:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,ActiveBrakeEnableSetting,1);
    b0f0:	1c3b      	adds	r3, r7, #0
    b0f2:	330c      	adds	r3, #12
    b0f4:	1c18      	adds	r0, r3, #0
    b0f6:	213f      	movs	r1, #63	; 0x3f
    b0f8:	2201      	movs	r2, #1
    b0fa:	4b53      	ldr	r3, [pc, #332]	; (b248 <ConfigInit+0x394>)
    b0fc:	4798      	blx	r3
		testBuffer[0] = FALSE;
    b0fe:	1c3b      	adds	r3, r7, #0
    b100:	330c      	adds	r3, #12
    b102:	2200      	movs	r2, #0
    b104:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,TPMSEnableSetting,1);		
    b106:	1c3b      	adds	r3, r7, #0
    b108:	330c      	adds	r3, #12
    b10a:	1c18      	adds	r0, r3, #0
    b10c:	2140      	movs	r1, #64	; 0x40
    b10e:	2201      	movs	r2, #1
    b110:	4b4d      	ldr	r3, [pc, #308]	; (b248 <ConfigInit+0x394>)
    b112:	4798      	blx	r3
		testBuffer[0] = 0x00;
    b114:	1c3b      	adds	r3, r7, #0
    b116:	330c      	adds	r3, #12
    b118:	2200      	movs	r2, #0
    b11a:	701a      	strb	r2, [r3, #0]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
    b11c:	1c3b      	adds	r3, r7, #0
    b11e:	330c      	adds	r3, #12
    b120:	1c18      	adds	r0, r3, #0
    b122:	2143      	movs	r1, #67	; 0x43
    b124:	2201      	movs	r2, #1
    b126:	4b48      	ldr	r3, [pc, #288]	; (b248 <ConfigInit+0x394>)
    b128:	4798      	blx	r3
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    b12a:	1c3b      	adds	r3, r7, #0
    b12c:	3317      	adds	r3, #23
    b12e:	2200      	movs	r2, #0
    b130:	701a      	strb	r2, [r3, #0]
    b132:	e01a      	b.n	b16a <ConfigInit+0x2b6>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
    b134:	1c3b      	adds	r3, r7, #0
    b136:	3317      	adds	r3, #23
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	3328      	adds	r3, #40	; 0x28
    b13c:	b2db      	uxtb	r3, r3
    b13e:	1c3a      	adds	r2, r7, #0
    b140:	320b      	adds	r2, #11
    b142:	1c10      	adds	r0, r2, #0
    b144:	1c19      	adds	r1, r3, #0
    b146:	2201      	movs	r2, #1
    b148:	4b3e      	ldr	r3, [pc, #248]	; (b244 <ConfigInit+0x390>)
    b14a:	4798      	blx	r3
		table0.Index[n] = value;   
    b14c:	1c3b      	adds	r3, r7, #0
    b14e:	3317      	adds	r3, #23
    b150:	781b      	ldrb	r3, [r3, #0]
    b152:	1c3a      	adds	r2, r7, #0
    b154:	320b      	adds	r2, #11
    b156:	7811      	ldrb	r1, [r2, #0]
    b158:	4a3c      	ldr	r2, [pc, #240]	; (b24c <ConfigInit+0x398>)
    b15a:	54d1      	strb	r1, [r2, r3]
		I2CEEPROMBufferWrite(testBuffer,SensitivitySetting,1);		
	}
	  //------------------------------
	  // read table 0 values.
	  //------------------------------ 
	  for (n=0;n<28;n++)
    b15c:	1c3b      	adds	r3, r7, #0
    b15e:	3317      	adds	r3, #23
    b160:	781a      	ldrb	r2, [r3, #0]
    b162:	1c3b      	adds	r3, r7, #0
    b164:	3317      	adds	r3, #23
    b166:	3201      	adds	r2, #1
    b168:	701a      	strb	r2, [r3, #0]
    b16a:	1c3b      	adds	r3, r7, #0
    b16c:	3317      	adds	r3, #23
    b16e:	781b      	ldrb	r3, [r3, #0]
    b170:	2b1b      	cmp	r3, #27
    b172:	d9df      	bls.n	b134 <ConfigInit+0x280>
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    b174:	1c3b      	adds	r3, r7, #0
    b176:	3317      	adds	r3, #23
    b178:	2200      	movs	r2, #0
    b17a:	701a      	strb	r2, [r3, #0]
    b17c:	e00c      	b.n	b198 <ConfigInit+0x2e4>
	{
		eepromManDevSerial[n] = 0; 
    b17e:	1c3b      	adds	r3, r7, #0
    b180:	3317      	adds	r3, #23
    b182:	781b      	ldrb	r3, [r3, #0]
    b184:	1d3a      	adds	r2, r7, #4
    b186:	2100      	movs	r1, #0
    b188:	54d1      	strb	r1, [r2, r3]
	  {
		I2CEEPROMBufferRead( &value, (uint8_t)Key_Setting+n, 1);
		table0.Index[n] = value;   
	  }  	
  }
	for (n=0;n<6;n++)
    b18a:	1c3b      	adds	r3, r7, #0
    b18c:	3317      	adds	r3, #23
    b18e:	781a      	ldrb	r2, [r3, #0]
    b190:	1c3b      	adds	r3, r7, #0
    b192:	3317      	adds	r3, #23
    b194:	3201      	adds	r2, #1
    b196:	701a      	strb	r2, [r3, #0]
    b198:	1c3b      	adds	r3, r7, #0
    b19a:	3317      	adds	r3, #23
    b19c:	781b      	ldrb	r3, [r3, #0]
    b19e:	2b05      	cmp	r3, #5
    b1a0:	d9ed      	bls.n	b17e <ConfigInit+0x2ca>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    b1a2:	1d3b      	adds	r3, r7, #4
    b1a4:	1c18      	adds	r0, r3, #0
    b1a6:	21fa      	movs	r1, #250	; 0xfa
    b1a8:	2206      	movs	r2, #6
    b1aa:	4b26      	ldr	r3, [pc, #152]	; (b244 <ConfigInit+0x390>)
    b1ac:	4798      	blx	r3
    b1ae:	1c03      	adds	r3, r0, #0
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d020      	beq.n	b1f6 <ConfigInit+0x342>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    b1b4:	2003      	movs	r0, #3
    b1b6:	2101      	movs	r1, #1
    b1b8:	2201      	movs	r2, #1
    b1ba:	4b25      	ldr	r3, [pc, #148]	; (b250 <ConfigInit+0x39c>)
    b1bc:	4798      	blx	r3
		for (n=0;n<6;n++)
    b1be:	1c3b      	adds	r3, r7, #0
    b1c0:	3317      	adds	r3, #23
    b1c2:	2200      	movs	r2, #0
    b1c4:	701a      	strb	r2, [r3, #0]
    b1c6:	e011      	b.n	b1ec <ConfigInit+0x338>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    b1c8:	1c3b      	adds	r3, r7, #0
    b1ca:	3317      	adds	r3, #23
    b1cc:	781b      	ldrb	r3, [r3, #0]
    b1ce:	1c3a      	adds	r2, r7, #0
    b1d0:	3217      	adds	r2, #23
    b1d2:	7812      	ldrb	r2, [r2, #0]
    b1d4:	1d39      	adds	r1, r7, #4
    b1d6:	5c8a      	ldrb	r2, [r1, r2]
    b1d8:	491c      	ldr	r1, [pc, #112]	; (b24c <ConfigInit+0x398>)
    b1da:	18cb      	adds	r3, r1, r3
    b1dc:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    b1de:	1c3b      	adds	r3, r7, #0
    b1e0:	3317      	adds	r3, #23
    b1e2:	781a      	ldrb	r2, [r3, #0]
    b1e4:	1c3b      	adds	r3, r7, #0
    b1e6:	3317      	adds	r3, #23
    b1e8:	3201      	adds	r2, #1
    b1ea:	701a      	strb	r2, [r3, #0]
    b1ec:	1c3b      	adds	r3, r7, #0
    b1ee:	3317      	adds	r3, #23
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	2b05      	cmp	r3, #5
    b1f4:	d9e8      	bls.n	b1c8 <ConfigInit+0x314>
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    b1f6:	1c3b      	adds	r3, r7, #0
    b1f8:	3316      	adds	r3, #22
    b1fa:	2200      	movs	r2, #0
    b1fc:	701a      	strb	r2, [r3, #0]
    b1fe:	e018      	b.n	b232 <ConfigInit+0x37e>
	{
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
    b200:	1c3b      	adds	r3, r7, #0
    b202:	3316      	adds	r3, #22
    b204:	781b      	ldrb	r3, [r3, #0]
    b206:	009a      	lsls	r2, r3, #2
    b208:	4b12      	ldr	r3, [pc, #72]	; (b254 <ConfigInit+0x3a0>)
    b20a:	18d2      	adds	r2, r2, r3
    b20c:	1c3b      	adds	r3, r7, #0
    b20e:	3316      	adds	r3, #22
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	3314      	adds	r3, #20
    b214:	b2db      	uxtb	r3, r3
    b216:	009b      	lsls	r3, r3, #2
    b218:	b2db      	uxtb	r3, r3
    b21a:	1c10      	adds	r0, r2, #0
    b21c:	1c19      	adds	r1, r3, #0
    b21e:	2204      	movs	r2, #4
    b220:	4b08      	ldr	r3, [pc, #32]	; (b244 <ConfigInit+0x390>)
    b222:	4798      	blx	r3
		}	
	}
//  table1.Item.Firmware0_Setting = SW_VER0;
//  table1.Item.Firmware1_Setting = SW_VER1;
//  table1.Item.Firmware2_Setting = SW_VER3;
	for (i=0;i<MAXSENSORS;i++)
    b224:	1c3b      	adds	r3, r7, #0
    b226:	3316      	adds	r3, #22
    b228:	781a      	ldrb	r2, [r3, #0]
    b22a:	1c3b      	adds	r3, r7, #0
    b22c:	3316      	adds	r3, #22
    b22e:	3201      	adds	r2, #1
    b230:	701a      	strb	r2, [r3, #0]
    b232:	1c3b      	adds	r3, r7, #0
    b234:	3316      	adds	r3, #22
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	2b0b      	cmp	r3, #11
    b23a:	d9e1      	bls.n	b200 <ConfigInit+0x34c>
		if (I2CEEPROMBufferRead((uint8_t *)&tableSensor.Item.WhichSensor[i],TableSensorStart + (i*4),4)!= 0)
		{ 
	  
		}
	}
}
    b23c:	46bd      	mov	sp, r7
    b23e:	b006      	add	sp, #24
    b240:	bd80      	pop	{r7, pc}
    b242:	46c0      	nop			; (mov r8, r8)
    b244:	0000c579 	.word	0x0000c579
    b248:	0000c6f9 	.word	0x0000c6f9
    b24c:	20002fb8 	.word	0x20002fb8
    b250:	0000f579 	.word	0x0000f579
    b254:	20002fd8 	.word	0x20002fd8

0000b258 <ConfigUpdate>:

void ConfigUpdate(uint8_t value,uint8_t settingAddress)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b082      	sub	sp, #8
    b25c:	af00      	add	r7, sp, #0
    b25e:	1c0a      	adds	r2, r1, #0
    b260:	1dfb      	adds	r3, r7, #7
    b262:	1c01      	adds	r1, r0, #0
    b264:	7019      	strb	r1, [r3, #0]
    b266:	1dbb      	adds	r3, r7, #6
    b268:	701a      	strb	r2, [r3, #0]
	I2CEEPROMBufferWrite(&value,settingAddress,1);	 
    b26a:	1dfa      	adds	r2, r7, #7
    b26c:	1dbb      	adds	r3, r7, #6
    b26e:	781b      	ldrb	r3, [r3, #0]
    b270:	1c10      	adds	r0, r2, #0
    b272:	1c19      	adds	r1, r3, #0
    b274:	2201      	movs	r2, #1
    b276:	4b02      	ldr	r3, [pc, #8]	; (b280 <ConfigUpdate+0x28>)
    b278:	4798      	blx	r3
}
    b27a:	46bd      	mov	sp, r7
    b27c:	b002      	add	sp, #8
    b27e:	bd80      	pop	{r7, pc}
    b280:	0000c6f9 	.word	0x0000c6f9

0000b284 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    b284:	b580      	push	{r7, lr}
    b286:	b082      	sub	sp, #8
    b288:	af00      	add	r7, sp, #0
    b28a:	1c02      	adds	r2, r0, #0
    b28c:	1dfb      	adds	r3, r7, #7
    b28e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b290:	4b06      	ldr	r3, [pc, #24]	; (b2ac <system_interrupt_enable+0x28>)
    b292:	1dfa      	adds	r2, r7, #7
    b294:	7812      	ldrb	r2, [r2, #0]
    b296:	1c11      	adds	r1, r2, #0
    b298:	221f      	movs	r2, #31
    b29a:	400a      	ands	r2, r1
    b29c:	2101      	movs	r1, #1
    b29e:	1c08      	adds	r0, r1, #0
    b2a0:	4090      	lsls	r0, r2
    b2a2:	1c02      	adds	r2, r0, #0
    b2a4:	601a      	str	r2, [r3, #0]
}
    b2a6:	46bd      	mov	sp, r7
    b2a8:	b002      	add	sp, #8
    b2aa:	bd80      	pop	{r7, pc}
    b2ac:	e000e100 	.word	0xe000e100

0000b2b0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    b2b0:	b580      	push	{r7, lr}
    b2b2:	b084      	sub	sp, #16
    b2b4:	af00      	add	r7, sp, #0
    b2b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	681b      	ldr	r3, [r3, #0]
    b2bc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b2be:	68fb      	ldr	r3, [r7, #12]
    b2c0:	7e5b      	ldrb	r3, [r3, #25]
    b2c2:	b2db      	uxtb	r3, r3
    b2c4:	b2db      	uxtb	r3, r3
    b2c6:	b25b      	sxtb	r3, r3
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	da01      	bge.n	b2d0 <adc_is_syncing+0x20>
		return true;
    b2cc:	2301      	movs	r3, #1
    b2ce:	e000      	b.n	b2d2 <adc_is_syncing+0x22>
	}

	return false;
    b2d0:	2300      	movs	r3, #0
}
    b2d2:	1c18      	adds	r0, r3, #0
    b2d4:	46bd      	mov	sp, r7
    b2d6:	b004      	add	sp, #16
    b2d8:	bd80      	pop	{r7, pc}
    b2da:	46c0      	nop			; (mov r8, r8)

0000b2dc <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    b2dc:	b580      	push	{r7, lr}
    b2de:	b084      	sub	sp, #16
    b2e0:	af00      	add	r7, sp, #0
    b2e2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	681b      	ldr	r3, [r3, #0]
    b2e8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    b2ea:	46c0      	nop			; (mov r8, r8)
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	1c18      	adds	r0, r3, #0
    b2f0:	4b0e      	ldr	r3, [pc, #56]	; (b32c <adc_enable+0x50>)
    b2f2:	4798      	blx	r3
    b2f4:	1c03      	adds	r3, r0, #0
    b2f6:	2b00      	cmp	r3, #0
    b2f8:	d1f8      	bne.n	b2ec <adc_enable+0x10>
		/* Wait for synchronization */
	}

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    b2fa:	2015      	movs	r0, #21
    b2fc:	4b0c      	ldr	r3, [pc, #48]	; (b330 <adc_enable+0x54>)
    b2fe:	4798      	blx	r3
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    b300:	68fb      	ldr	r3, [r7, #12]
    b302:	781b      	ldrb	r3, [r3, #0]
    b304:	b2db      	uxtb	r3, r3
    b306:	2202      	movs	r2, #2
    b308:	4313      	orrs	r3, r2
    b30a:	b2da      	uxtb	r2, r3
    b30c:	68fb      	ldr	r3, [r7, #12]
    b30e:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    b310:	46c0      	nop			; (mov r8, r8)
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	1c18      	adds	r0, r3, #0
    b316:	4b05      	ldr	r3, [pc, #20]	; (b32c <adc_enable+0x50>)
    b318:	4798      	blx	r3
    b31a:	1c03      	adds	r3, r0, #0
    b31c:	2b00      	cmp	r3, #0
    b31e:	d1f8      	bne.n	b312 <adc_enable+0x36>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    b320:	2300      	movs	r3, #0
}
    b322:	1c18      	adds	r0, r3, #0
    b324:	46bd      	mov	sp, r7
    b326:	b004      	add	sp, #16
    b328:	bd80      	pop	{r7, pc}
    b32a:	46c0      	nop			; (mov r8, r8)
    b32c:	0000b2b1 	.word	0x0000b2b1
    b330:	0000b285 	.word	0x0000b285

0000b334 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    b334:	b580      	push	{r7, lr}
    b336:	b084      	sub	sp, #16
    b338:	af00      	add	r7, sp, #0
    b33a:	6078      	str	r0, [r7, #4]
    b33c:	1c0a      	adds	r2, r1, #0
    b33e:	1cfb      	adds	r3, r7, #3
    b340:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b342:	687b      	ldr	r3, [r7, #4]
    b344:	681b      	ldr	r3, [r3, #0]
    b346:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    b348:	46c0      	nop			; (mov r8, r8)
    b34a:	687b      	ldr	r3, [r7, #4]
    b34c:	1c18      	adds	r0, r3, #0
    b34e:	4b0d      	ldr	r3, [pc, #52]	; (b384 <adc_set_positive_input+0x50>)
    b350:	4798      	blx	r3
    b352:	1c03      	adds	r3, r0, #0
    b354:	2b00      	cmp	r3, #0
    b356:	d1f8      	bne.n	b34a <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    b358:	68fb      	ldr	r3, [r7, #12]
    b35a:	691b      	ldr	r3, [r3, #16]
    b35c:	221f      	movs	r2, #31
    b35e:	1c19      	adds	r1, r3, #0
    b360:	4391      	bics	r1, r2
    b362:	1c0a      	adds	r2, r1, #0
    b364:	1cfb      	adds	r3, r7, #3
    b366:	781b      	ldrb	r3, [r3, #0]
    b368:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    b36a:	68fb      	ldr	r3, [r7, #12]
    b36c:	611a      	str	r2, [r3, #16]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    b36e:	46c0      	nop			; (mov r8, r8)
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	1c18      	adds	r0, r3, #0
    b374:	4b03      	ldr	r3, [pc, #12]	; (b384 <adc_set_positive_input+0x50>)
    b376:	4798      	blx	r3
    b378:	1c03      	adds	r3, r0, #0
    b37a:	2b00      	cmp	r3, #0
    b37c:	d1f8      	bne.n	b370 <adc_set_positive_input+0x3c>
		/* Wait for synchronization */
	}
}
    b37e:	46bd      	mov	sp, r7
    b380:	b004      	add	sp, #16
    b382:	bd80      	pop	{r7, pc}
    b384:	0000b2b1 	.word	0x0000b2b1

0000b388 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b084      	sub	sp, #16
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
    b390:	1c0a      	adds	r2, r1, #0
    b392:	1cfb      	adds	r3, r7, #3
    b394:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b396:	687b      	ldr	r3, [r7, #4]
    b398:	681b      	ldr	r3, [r3, #0]
    b39a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    b39c:	68fb      	ldr	r3, [r7, #12]
    b39e:	1cfa      	adds	r2, r7, #3
    b3a0:	7812      	ldrb	r2, [r2, #0]
    b3a2:	75da      	strb	r2, [r3, #23]
}
    b3a4:	46bd      	mov	sp, r7
    b3a6:	b004      	add	sp, #16
    b3a8:	bd80      	pop	{r7, pc}
    b3aa:	46c0      	nop			; (mov r8, r8)

0000b3ac <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b082      	sub	sp, #8
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	6078      	str	r0, [r7, #4]
    b3b4:	1c0a      	adds	r2, r1, #0
    b3b6:	1cfb      	adds	r3, r7, #3
    b3b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    b3ba:	687b      	ldr	r3, [r7, #4]
    b3bc:	7edb      	ldrb	r3, [r3, #27]
    b3be:	b2da      	uxtb	r2, r3
    b3c0:	1cfb      	adds	r3, r7, #3
    b3c2:	781b      	ldrb	r3, [r3, #0]
    b3c4:	2101      	movs	r1, #1
    b3c6:	1c08      	adds	r0, r1, #0
    b3c8:	4098      	lsls	r0, r3
    b3ca:	1c03      	adds	r3, r0, #0
    b3cc:	b2db      	uxtb	r3, r3
    b3ce:	4313      	orrs	r3, r2
    b3d0:	b2db      	uxtb	r3, r3
    b3d2:	b2da      	uxtb	r2, r3
    b3d4:	687b      	ldr	r3, [r7, #4]
    b3d6:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    b3d8:	1cfb      	adds	r3, r7, #3
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	2b01      	cmp	r3, #1
    b3de:	d104      	bne.n	b3ea <adc_enable_callback+0x3e>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	1c18      	adds	r0, r3, #0
    b3e4:	2104      	movs	r1, #4
    b3e6:	4b07      	ldr	r3, [pc, #28]	; (b404 <adc_enable_callback+0x58>)
    b3e8:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    b3ea:	1cfb      	adds	r3, r7, #3
    b3ec:	781b      	ldrb	r3, [r3, #0]
    b3ee:	2b02      	cmp	r3, #2
    b3f0:	d104      	bne.n	b3fc <adc_enable_callback+0x50>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	1c18      	adds	r0, r3, #0
    b3f6:	2102      	movs	r1, #2
    b3f8:	4b02      	ldr	r3, [pc, #8]	; (b404 <adc_enable_callback+0x58>)
    b3fa:	4798      	blx	r3
	}
}
    b3fc:	46bd      	mov	sp, r7
    b3fe:	b002      	add	sp, #8
    b400:	bd80      	pop	{r7, pc}
    b402:	46c0      	nop			; (mov r8, r8)
    b404:	0000b389 	.word	0x0000b389

0000b408 <ADCGetReading>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
 uint16_t ADCGetReading(uint8_t which)
 {
    b408:	b580      	push	{r7, lr}
    b40a:	b084      	sub	sp, #16
    b40c:	af00      	add	r7, sp, #0
    b40e:	1c02      	adds	r2, r0, #0
    b410:	1dfb      	adds	r3, r7, #7
    b412:	701a      	strb	r2, [r3, #0]
	 uint16_t valueRead; 
	 valueRead = 0; 
    b414:	1c3b      	adds	r3, r7, #0
    b416:	330e      	adds	r3, #14
    b418:	2200      	movs	r2, #0
    b41a:	801a      	strh	r2, [r3, #0]
	 switch(which)
    b41c:	1dfb      	adds	r3, r7, #7
    b41e:	781b      	ldrb	r3, [r3, #0]
    b420:	2b01      	cmp	r3, #1
    b422:	d00e      	beq.n	b442 <ADCGetReading+0x3a>
    b424:	dc02      	bgt.n	b42c <ADCGetReading+0x24>
    b426:	2b00      	cmp	r3, #0
    b428:	d005      	beq.n	b436 <ADCGetReading+0x2e>
    b42a:	e01c      	b.n	b466 <ADCGetReading+0x5e>
    b42c:	2b02      	cmp	r3, #2
    b42e:	d00e      	beq.n	b44e <ADCGetReading+0x46>
    b430:	2b03      	cmp	r3, #3
    b432:	d012      	beq.n	b45a <ADCGetReading+0x52>
    b434:	e017      	b.n	b466 <ADCGetReading+0x5e>
	 {
		 case ADC_INPUT_VOLTAGE:
		 {
			 valueRead = adcAverageReadings[0]; 
    b436:	1c3b      	adds	r3, r7, #0
    b438:	330e      	adds	r3, #14
    b43a:	4a0e      	ldr	r2, [pc, #56]	; (b474 <ADCGetReading+0x6c>)
    b43c:	8812      	ldrh	r2, [r2, #0]
    b43e:	801a      	strh	r2, [r3, #0]
			 break;
    b440:	e011      	b.n	b466 <ADCGetReading+0x5e>
		 }
		 case ADC_INPUT_CURRENT:
		 {
			 valueRead = adcAverageReadings[1]; 
    b442:	1c3b      	adds	r3, r7, #0
    b444:	330e      	adds	r3, #14
    b446:	4a0b      	ldr	r2, [pc, #44]	; (b474 <ADCGetReading+0x6c>)
    b448:	8852      	ldrh	r2, [r2, #2]
    b44a:	801a      	strh	r2, [r3, #0]
			 break;
    b44c:	e00b      	b.n	b466 <ADCGetReading+0x5e>
		 }
		 case ADC_INPUT_FSR:
		 {
			 valueRead = adcAverageReadings[2];
    b44e:	1c3b      	adds	r3, r7, #0
    b450:	330e      	adds	r3, #14
    b452:	4a08      	ldr	r2, [pc, #32]	; (b474 <ADCGetReading+0x6c>)
    b454:	8892      	ldrh	r2, [r2, #4]
    b456:	801a      	strh	r2, [r3, #0]
			 break;
    b458:	e005      	b.n	b466 <ADCGetReading+0x5e>
		 }		 
		 case ADC_INPUT_SUPERCAP:
		 {
			 valueRead = adcAverageReadings[3];
    b45a:	1c3b      	adds	r3, r7, #0
    b45c:	330e      	adds	r3, #14
    b45e:	4a05      	ldr	r2, [pc, #20]	; (b474 <ADCGetReading+0x6c>)
    b460:	88d2      	ldrh	r2, [r2, #6]
    b462:	801a      	strh	r2, [r3, #0]
			 break;
    b464:	46c0      	nop			; (mov r8, r8)
		 }		 
	 }
	 return valueRead; 
    b466:	1c3b      	adds	r3, r7, #0
    b468:	330e      	adds	r3, #14
    b46a:	881b      	ldrh	r3, [r3, #0]
 }
    b46c:	1c18      	adds	r0, r3, #0
    b46e:	46bd      	mov	sp, r7
    b470:	b004      	add	sp, #16
    b472:	bd80      	pop	{r7, pc}
    b474:	20003040 	.word	0x20003040

0000b478 <adc_complete_callback>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void adc_complete_callback(const struct adc_module *const module)
{
    b478:	b580      	push	{r7, lr}
    b47a:	b082      	sub	sp, #8
    b47c:	af00      	add	r7, sp, #0
    b47e:	6078      	str	r0, [r7, #4]
	uint16_t averageRead;	
	adc_read_done = true;
    b480:	4b31      	ldr	r3, [pc, #196]	; (b548 <adc_complete_callback+0xd0>)
    b482:	2201      	movs	r2, #1
    b484:	701a      	strb	r2, [r3, #0]

#if BRAKEBOARD	
	if (motorOn == TRUE)
    b486:	4b31      	ldr	r3, [pc, #196]	; (b54c <adc_complete_callback+0xd4>)
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	2b01      	cmp	r3, #1
    b48c:	d152      	bne.n	b534 <adc_complete_callback+0xbc>
	{
		//v01_20 was adc_result_buffer[1]
		adcAverageReadings[adcOffset] = adc_result_buffer[1];  
    b48e:	4b30      	ldr	r3, [pc, #192]	; (b550 <adc_complete_callback+0xd8>)
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	1c1a      	adds	r2, r3, #0
    b494:	4b2f      	ldr	r3, [pc, #188]	; (b554 <adc_complete_callback+0xdc>)
    b496:	8859      	ldrh	r1, [r3, #2]
    b498:	4b2f      	ldr	r3, [pc, #188]	; (b558 <adc_complete_callback+0xe0>)
    b49a:	0052      	lsls	r2, r2, #1
    b49c:	52d1      	strh	r1, [r2, r3]
		
		switch (adcOffset)
    b49e:	4b2c      	ldr	r3, [pc, #176]	; (b550 <adc_complete_callback+0xd8>)
    b4a0:	781b      	ldrb	r3, [r3, #0]
    b4a2:	2b01      	cmp	r3, #1
    b4a4:	d122      	bne.n	b4ec <adc_complete_callback+0x74>
		{
			case 1:
			{
				adcOffset=2;
    b4a6:	4b2a      	ldr	r3, [pc, #168]	; (b550 <adc_complete_callback+0xd8>)
    b4a8:	2202      	movs	r2, #2
    b4aa:	701a      	strb	r2, [r3, #0]
//brake v01_41	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN14);	
//brake v01_41 boc
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN15);	
    b4ac:	4b2b      	ldr	r3, [pc, #172]	; (b55c <adc_complete_callback+0xe4>)
    b4ae:	1c18      	adds	r0, r3, #0
    b4b0:	210f      	movs	r1, #15
    b4b2:	4b2b      	ldr	r3, [pc, #172]	; (b560 <adc_complete_callback+0xe8>)
    b4b4:	4798      	blx	r3
//brake v01_41 eoc								
				adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    b4b6:	4a29      	ldr	r2, [pc, #164]	; (b55c <adc_complete_callback+0xe4>)
    b4b8:	4b26      	ldr	r3, [pc, #152]	; (b554 <adc_complete_callback+0xdc>)
    b4ba:	1c10      	adds	r0, r2, #0
    b4bc:	1c19      	adds	r1, r3, #0
    b4be:	2204      	movs	r2, #4
    b4c0:	4b28      	ldr	r3, [pc, #160]	; (b564 <adc_complete_callback+0xec>)
    b4c2:	4798      	blx	r3
				if (motorRunTime > 0)
    b4c4:	4b28      	ldr	r3, [pc, #160]	; (b568 <adc_complete_callback+0xf0>)
    b4c6:	881b      	ldrh	r3, [r3, #0]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d003      	beq.n	b4d4 <adc_complete_callback+0x5c>
				{
					maxCurrentRead = 0;
    b4cc:	4b27      	ldr	r3, [pc, #156]	; (b56c <adc_complete_callback+0xf4>)
    b4ce:	2200      	movs	r2, #0
    b4d0:	801a      	strh	r2, [r3, #0]
    b4d2:	e00a      	b.n	b4ea <adc_complete_callback+0x72>
				}	
				else
				{
					if (maxCurrentRead < adcAverageReadings[1])
    b4d4:	4b20      	ldr	r3, [pc, #128]	; (b558 <adc_complete_callback+0xe0>)
    b4d6:	885a      	ldrh	r2, [r3, #2]
    b4d8:	4b24      	ldr	r3, [pc, #144]	; (b56c <adc_complete_callback+0xf4>)
    b4da:	881b      	ldrh	r3, [r3, #0]
    b4dc:	429a      	cmp	r2, r3
    b4de:	d904      	bls.n	b4ea <adc_complete_callback+0x72>
					{
						maxCurrentRead = adcAverageReadings[1]; 
    b4e0:	4b1d      	ldr	r3, [pc, #116]	; (b558 <adc_complete_callback+0xe0>)
    b4e2:	885a      	ldrh	r2, [r3, #2]
    b4e4:	4b21      	ldr	r3, [pc, #132]	; (b56c <adc_complete_callback+0xf4>)
    b4e6:	801a      	strh	r2, [r3, #0]
					}
				}
				break;
    b4e8:	e023      	b.n	b532 <adc_complete_callback+0xba>
    b4ea:	e022      	b.n	b532 <adc_complete_callback+0xba>
			}
			default:
			{
				adcOffset=1;
    b4ec:	4b18      	ldr	r3, [pc, #96]	; (b550 <adc_complete_callback+0xd8>)
    b4ee:	2201      	movs	r2, #1
    b4f0:	701a      	strb	r2, [r3, #0]
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);	
    b4f2:	4b1a      	ldr	r3, [pc, #104]	; (b55c <adc_complete_callback+0xe4>)
    b4f4:	1c18      	adds	r0, r3, #0
    b4f6:	2101      	movs	r1, #1
    b4f8:	4b19      	ldr	r3, [pc, #100]	; (b560 <adc_complete_callback+0xe8>)
    b4fa:	4798      	blx	r3
				adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);	
    b4fc:	4a17      	ldr	r2, [pc, #92]	; (b55c <adc_complete_callback+0xe4>)
    b4fe:	4b15      	ldr	r3, [pc, #84]	; (b554 <adc_complete_callback+0xdc>)
    b500:	1c10      	adds	r0, r2, #0
    b502:	1c19      	adds	r1, r3, #0
    b504:	2204      	movs	r2, #4
    b506:	4b17      	ldr	r3, [pc, #92]	; (b564 <adc_complete_callback+0xec>)
    b508:	4798      	blx	r3
//brake v01_41 boc				
				if (motorRunTime > 0)
    b50a:	4b17      	ldr	r3, [pc, #92]	; (b568 <adc_complete_callback+0xf0>)
    b50c:	881b      	ldrh	r3, [r3, #0]
    b50e:	2b00      	cmp	r3, #0
    b510:	d003      	beq.n	b51a <adc_complete_callback+0xa2>
				{
					maxFSRRead = 0;
    b512:	4b17      	ldr	r3, [pc, #92]	; (b570 <adc_complete_callback+0xf8>)
    b514:	2200      	movs	r2, #0
    b516:	801a      	strh	r2, [r3, #0]
    b518:	e00a      	b.n	b530 <adc_complete_callback+0xb8>
				}
				else
				{
					if (maxFSRRead < adcAverageReadings[2])
    b51a:	4b0f      	ldr	r3, [pc, #60]	; (b558 <adc_complete_callback+0xe0>)
    b51c:	889a      	ldrh	r2, [r3, #4]
    b51e:	4b14      	ldr	r3, [pc, #80]	; (b570 <adc_complete_callback+0xf8>)
    b520:	881b      	ldrh	r3, [r3, #0]
    b522:	429a      	cmp	r2, r3
    b524:	d904      	bls.n	b530 <adc_complete_callback+0xb8>
					{
						maxFSRRead = adcAverageReadings[2];
    b526:	4b0c      	ldr	r3, [pc, #48]	; (b558 <adc_complete_callback+0xe0>)
    b528:	889a      	ldrh	r2, [r3, #4]
    b52a:	4b11      	ldr	r3, [pc, #68]	; (b570 <adc_complete_callback+0xf8>)
    b52c:	801a      	strh	r2, [r3, #0]
					}
				}
//brake v01_41 eoc									
				break;
    b52e:	e7ff      	b.n	b530 <adc_complete_callback+0xb8>
    b530:	46c0      	nop			; (mov r8, r8)
    b532:	e005      	b.n	b540 <adc_complete_callback+0xc8>
			}	
		}
	}
	else
	{
		schedByte |= SCHEDBYTE_ADC;
    b534:	4b0f      	ldr	r3, [pc, #60]	; (b574 <adc_complete_callback+0xfc>)
    b536:	681b      	ldr	r3, [r3, #0]
    b538:	2220      	movs	r2, #32
    b53a:	431a      	orrs	r2, r3
    b53c:	4b0d      	ldr	r3, [pc, #52]	; (b574 <adc_complete_callback+0xfc>)
    b53e:	601a      	str	r2, [r3, #0]
	}
#else
	schedByte |= SCHEDBYTE_ADC;	
#endif
}
    b540:	46bd      	mov	sp, r7
    b542:	b002      	add	sp, #8
    b544:	bd80      	pop	{r7, pc}
    b546:	46c0      	nop			; (mov r8, r8)
    b548:	200004c2 	.word	0x200004c2
    b54c:	200004b0 	.word	0x200004b0
    b550:	2000303c 	.word	0x2000303c
    b554:	20003034 	.word	0x20003034
    b558:	20003040 	.word	0x20003040
    b55c:	20003048 	.word	0x20003048
    b560:	0000b335 	.word	0x0000b335
    b564:	00003cb1 	.word	0x00003cb1
    b568:	20002eb2 	.word	0x20002eb2
    b56c:	200004be 	.word	0x200004be
    b570:	200004c0 	.word	0x200004c0
    b574:	2000369c 	.word	0x2000369c

0000b578 <configure_adc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================  
void configure_adc(uint8_t which)
{
    b578:	b580      	push	{r7, lr}
    b57a:	b08e      	sub	sp, #56	; 0x38
    b57c:	af00      	add	r7, sp, #0
    b57e:	1c02      	adds	r2, r0, #0
    b580:	1dfb      	adds	r3, r7, #7
    b582:	701a      	strb	r2, [r3, #0]
	struct adc_config config_adc;
	
 	adc_get_config_defaults(&config_adc);
    b584:	1c3b      	adds	r3, r7, #0
    b586:	3308      	adds	r3, #8
    b588:	1c18      	adds	r0, r3, #0
    b58a:	4b2f      	ldr	r3, [pc, #188]	; (b648 <configure_adc+0xd0>)
    b58c:	4798      	blx	r3
 
	config_adc.gain_factor     = ADC_GAIN_FACTOR_1X;  //ADC_GAIN_FACTOR_DIV2;
    b58e:	1c3b      	adds	r3, r7, #0
    b590:	3308      	adds	r3, #8
    b592:	2200      	movs	r2, #0
    b594:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;  //8;
    b596:	1c3b      	adds	r3, r7, #0
    b598:	3308      	adds	r3, #8
    b59a:	2280      	movs	r2, #128	; 0x80
    b59c:	0052      	lsls	r2, r2, #1
    b59e:	805a      	strh	r2, [r3, #2]
	config_adc.reference       = ADC_REFERENCE_INT1V; //ADC_REFERENCE_INTVCC0;  //ADC_REFERENCE_INTVCC1;
    b5a0:	1c3b      	adds	r3, r7, #0
    b5a2:	3308      	adds	r3, #8
    b5a4:	2200      	movs	r2, #0
    b5a6:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;
#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;
    b5a8:	1c3b      	adds	r3, r7, #0
    b5aa:	3308      	adds	r3, #8
    b5ac:	2201      	movs	r2, #1
    b5ae:	731a      	strb	r2, [r3, #12]
#endif	
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
    b5b0:	1c3b      	adds	r3, r7, #0
    b5b2:	3308      	adds	r3, #8
    b5b4:	2200      	movs	r2, #0
    b5b6:	711a      	strb	r2, [r3, #4]
//    config_adc.correction.correction_enable = true;
//    config_adc.correction.offset_correction = 512;
//	config_adc.correction.gain_correction = 0x0800;
	config_adc.negative_input     =ADC_NEGATIVE_INPUT_GND;
    b5b8:	1c3b      	adds	r3, r7, #0
    b5ba:	3308      	adds	r3, #8
    b5bc:	22c0      	movs	r2, #192	; 0xc0
    b5be:	0152      	lsls	r2, r2, #5
    b5c0:	81da      	strh	r2, [r3, #14]
	config_adc.sample_length                 = 5;  //1;
    b5c2:	1c3b      	adds	r3, r7, #0
    b5c4:	3308      	adds	r3, #8
    b5c6:	2205      	movs	r2, #5
    b5c8:	75da      	strb	r2, [r3, #23]
	config_adc.resolution         = ADC_RESOLUTION_CUSTOM;
    b5ca:	1c3b      	adds	r3, r7, #0
    b5cc:	3308      	adds	r3, #8
    b5ce:	2234      	movs	r2, #52	; 0x34
    b5d0:	711a      	strb	r2, [r3, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_4;   //06-28-20 ADC_DIVIDE_RESULT_16;
    b5d2:	1c3b      	adds	r3, r7, #0
    b5d4:	3308      	adds	r3, #8
    b5d6:	2202      	movs	r2, #2
    b5d8:	745a      	strb	r2, [r3, #17]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_4; //06-28-20 ADC_ACCUMULATE_SAMPLES_16;
    b5da:	1c3b      	adds	r3, r7, #0
    b5dc:	3308      	adds	r3, #8
    b5de:	2202      	movs	r2, #2
    b5e0:	741a      	strb	r2, [r3, #16]

#if BRAKEBOARD	
	switch (which)
    b5e2:	1dfb      	adds	r3, r7, #7
    b5e4:	781b      	ldrb	r3, [r3, #0]
    b5e6:	2b04      	cmp	r3, #4
    b5e8:	d81d      	bhi.n	b626 <configure_adc+0xae>
    b5ea:	009a      	lsls	r2, r3, #2
    b5ec:	4b17      	ldr	r3, [pc, #92]	; (b64c <configure_adc+0xd4>)
    b5ee:	18d3      	adds	r3, r2, r3
    b5f0:	681b      	ldr	r3, [r3, #0]
    b5f2:	469f      	mov	pc, r3
	{
		case 0:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
    b5f4:	1c3b      	adds	r3, r7, #0
    b5f6:	3308      	adds	r3, #8
    b5f8:	2200      	movs	r2, #0
    b5fa:	731a      	strb	r2, [r3, #12]
			break;
    b5fc:	e013      	b.n	b626 <configure_adc+0xae>
		}	
		case 1:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
    b5fe:	1c3b      	adds	r3, r7, #0
    b600:	3308      	adds	r3, #8
    b602:	2201      	movs	r2, #1
    b604:	731a      	strb	r2, [r3, #12]
			break;
    b606:	e00e      	b.n	b626 <configure_adc+0xae>
		}
		case 2:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
    b608:	1c3b      	adds	r3, r7, #0
    b60a:	3308      	adds	r3, #8
    b60c:	220f      	movs	r2, #15
    b60e:	731a      	strb	r2, [r3, #12]
			break;
    b610:	e009      	b.n	b626 <configure_adc+0xae>
		}	
		case 3:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;	//01_38_#2		
    b612:	1c3b      	adds	r3, r7, #0
    b614:	3308      	adds	r3, #8
    b616:	220e      	movs	r2, #14
    b618:	731a      	strb	r2, [r3, #12]
			break;
    b61a:	e004      	b.n	b626 <configure_adc+0xae>
		}
		case 4:
		{
			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN12;	//01_38_#2		
    b61c:	1c3b      	adds	r3, r7, #0
    b61e:	3308      	adds	r3, #8
    b620:	220c      	movs	r2, #12
    b622:	731a      	strb	r2, [r3, #12]
			break;
    b624:	46c0      	nop			; (mov r8, r8)
		}				
	}
#endif 

	adc_init(&adc_instance, ADC, &config_adc);
    b626:	490a      	ldr	r1, [pc, #40]	; (b650 <configure_adc+0xd8>)
    b628:	4a0a      	ldr	r2, [pc, #40]	; (b654 <configure_adc+0xdc>)
    b62a:	1c3b      	adds	r3, r7, #0
    b62c:	3308      	adds	r3, #8
    b62e:	1c08      	adds	r0, r1, #0
    b630:	1c11      	adds	r1, r2, #0
    b632:	1c1a      	adds	r2, r3, #0
    b634:	4b08      	ldr	r3, [pc, #32]	; (b658 <configure_adc+0xe0>)
    b636:	4798      	blx	r3
	adc_enable(&adc_instance);
    b638:	4b05      	ldr	r3, [pc, #20]	; (b650 <configure_adc+0xd8>)
    b63a:	1c18      	adds	r0, r3, #0
    b63c:	4b07      	ldr	r3, [pc, #28]	; (b65c <configure_adc+0xe4>)
    b63e:	4798      	blx	r3
 
}
    b640:	46bd      	mov	sp, r7
    b642:	b00e      	add	sp, #56	; 0x38
    b644:	bd80      	pop	{r7, pc}
    b646:	46c0      	nop			; (mov r8, r8)
    b648:	00003309 	.word	0x00003309
    b64c:	000183d8 	.word	0x000183d8
    b650:	20003048 	.word	0x20003048
    b654:	42004000 	.word	0x42004000
    b658:	0000398d 	.word	0x0000398d
    b65c:	0000b2dd 	.word	0x0000b2dd

0000b660 <configure_adc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_adc_callbacks(void)
{
    b660:	b580      	push	{r7, lr}
    b662:	af00      	add	r7, sp, #0
 
	adc_register_callback(&adc_instance,
    b664:	4a06      	ldr	r2, [pc, #24]	; (b680 <configure_adc_callbacks+0x20>)
    b666:	4b07      	ldr	r3, [pc, #28]	; (b684 <configure_adc_callbacks+0x24>)
    b668:	1c10      	adds	r0, r2, #0
    b66a:	1c19      	adds	r1, r3, #0
    b66c:	2200      	movs	r2, #0
    b66e:	4b06      	ldr	r3, [pc, #24]	; (b688 <configure_adc_callbacks+0x28>)
    b670:	4798      	blx	r3
			adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
 
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
    b672:	4b03      	ldr	r3, [pc, #12]	; (b680 <configure_adc_callbacks+0x20>)
    b674:	1c18      	adds	r0, r3, #0
    b676:	2100      	movs	r1, #0
    b678:	4b04      	ldr	r3, [pc, #16]	; (b68c <configure_adc_callbacks+0x2c>)
    b67a:	4798      	blx	r3
 
}
    b67c:	46bd      	mov	sp, r7
    b67e:	bd80      	pop	{r7, pc}
    b680:	20003048 	.word	0x20003048
    b684:	0000b479 	.word	0x0000b479
    b688:	00003c71 	.word	0x00003c71
    b68c:	0000b3ad 	.word	0x0000b3ad

0000b690 <ADCTask>:
//------------------------------------------------------------------------------
// This function
//
//============================================================================== 
void ADCTask(void)
{
    b690:	b580      	push	{r7, lr}
    b692:	b082      	sub	sp, #8
    b694:	af00      	add	r7, sp, #0
	uint16_t averageRead; 
	//----------------------
	// load in the readings for the current channel 
	// start the next reading of the next channel
	//-----------------------
	if (adc_read_done != FALSE)
    b696:	4b6b      	ldr	r3, [pc, #428]	; (b844 <ADCTask+0x1b4>)
    b698:	781b      	ldrb	r3, [r3, #0]
    b69a:	b2db      	uxtb	r3, r3
    b69c:	2b00      	cmp	r3, #0
    b69e:	d100      	bne.n	b6a2 <ADCTask+0x12>
    b6a0:	e094      	b.n	b7cc <ADCTask+0x13c>
	{
		adc_read_done = 0; 
    b6a2:	4b68      	ldr	r3, [pc, #416]	; (b844 <ADCTask+0x1b4>)
    b6a4:	2200      	movs	r2, #0
    b6a6:	701a      	strb	r2, [r3, #0]
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    b6a8:	1dfb      	adds	r3, r7, #7
    b6aa:	2200      	movs	r2, #0
    b6ac:	701a      	strb	r2, [r3, #0]
    b6ae:	e018      	b.n	b6e2 <ADCTask+0x52>
		{
			if (adcOffset < MAX_ADC_CHANNELS)
    b6b0:	4b65      	ldr	r3, [pc, #404]	; (b848 <ADCTask+0x1b8>)
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	2b03      	cmp	r3, #3
    b6b6:	d80f      	bhi.n	b6d8 <ADCTask+0x48>
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
    b6b8:	4b63      	ldr	r3, [pc, #396]	; (b848 <ADCTask+0x1b8>)
    b6ba:	781b      	ldrb	r3, [r3, #0]
    b6bc:	1c18      	adds	r0, r3, #0
    b6be:	1dfb      	adds	r3, r7, #7
    b6c0:	781a      	ldrb	r2, [r3, #0]
    b6c2:	1dfb      	adds	r3, r7, #7
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	1c59      	adds	r1, r3, #1
    b6c8:	4b60      	ldr	r3, [pc, #384]	; (b84c <ADCTask+0x1bc>)
    b6ca:	0049      	lsls	r1, r1, #1
    b6cc:	5ac9      	ldrh	r1, [r1, r3]
    b6ce:	4b60      	ldr	r3, [pc, #384]	; (b850 <ADCTask+0x1c0>)
    b6d0:	0080      	lsls	r0, r0, #2
    b6d2:	1882      	adds	r2, r0, r2
    b6d4:	0052      	lsls	r2, r2, #1
    b6d6:	52d1      	strh	r1, [r2, r3]
	if (adc_read_done != FALSE)
	{
		adc_read_done = 0; 
		//-------------------
		// load in the readings 
		for (i=0;i<(ADC_SAMPLES-1);i++)
    b6d8:	1dfb      	adds	r3, r7, #7
    b6da:	781a      	ldrb	r2, [r3, #0]
    b6dc:	1dfb      	adds	r3, r7, #7
    b6de:	3201      	adds	r2, #1
    b6e0:	701a      	strb	r2, [r3, #0]
    b6e2:	1dfb      	adds	r3, r7, #7
    b6e4:	781b      	ldrb	r3, [r3, #0]
    b6e6:	2b02      	cmp	r3, #2
    b6e8:	d9e2      	bls.n	b6b0 <ADCTask+0x20>
			if (adcOffset < MAX_ADC_CHANNELS)
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
    b6ea:	1d3b      	adds	r3, r7, #4
    b6ec:	2200      	movs	r2, #0
    b6ee:	801a      	strh	r2, [r3, #0]
		for (i=1;i<(ADC_SAMPLES-1);i++)
    b6f0:	1dfb      	adds	r3, r7, #7
    b6f2:	2201      	movs	r2, #1
    b6f4:	701a      	strb	r2, [r3, #0]
    b6f6:	e00f      	b.n	b718 <ADCTask+0x88>
		{
			averageRead += adc_result_buffer[i+1];
    b6f8:	1dfb      	adds	r3, r7, #7
    b6fa:	781b      	ldrb	r3, [r3, #0]
    b6fc:	1c5a      	adds	r2, r3, #1
    b6fe:	4b53      	ldr	r3, [pc, #332]	; (b84c <ADCTask+0x1bc>)
    b700:	0052      	lsls	r2, r2, #1
    b702:	5ad1      	ldrh	r1, [r2, r3]
    b704:	1d3b      	adds	r3, r7, #4
    b706:	1d3a      	adds	r2, r7, #4
    b708:	8812      	ldrh	r2, [r2, #0]
    b70a:	188a      	adds	r2, r1, r2
    b70c:	801a      	strh	r2, [r3, #0]
			{
				adcReadings[adcOffset][i] = adc_result_buffer[i+1];
			}
		}
		averageRead = 0;
		for (i=1;i<(ADC_SAMPLES-1);i++)
    b70e:	1dfb      	adds	r3, r7, #7
    b710:	781a      	ldrb	r2, [r3, #0]
    b712:	1dfb      	adds	r3, r7, #7
    b714:	3201      	adds	r2, #1
    b716:	701a      	strb	r2, [r3, #0]
    b718:	1dfb      	adds	r3, r7, #7
    b71a:	781b      	ldrb	r3, [r3, #0]
    b71c:	2b02      	cmp	r3, #2
    b71e:	d9eb      	bls.n	b6f8 <ADCTask+0x68>
		{
			averageRead += adc_result_buffer[i+1];
		}
		averageRead = averageRead/(ADC_SAMPLES-1-1);
    b720:	1d3b      	adds	r3, r7, #4
    b722:	1d3a      	adds	r2, r7, #4
    b724:	8812      	ldrh	r2, [r2, #0]
    b726:	0852      	lsrs	r2, r2, #1
    b728:	801a      	strh	r2, [r3, #0]
		adcAverageReadings[adcOffset] = averageRead;	
    b72a:	4b47      	ldr	r3, [pc, #284]	; (b848 <ADCTask+0x1b8>)
    b72c:	781b      	ldrb	r3, [r3, #0]
    b72e:	1c1a      	adds	r2, r3, #0
    b730:	4b48      	ldr	r3, [pc, #288]	; (b854 <ADCTask+0x1c4>)
    b732:	0052      	lsls	r2, r2, #1
    b734:	1d39      	adds	r1, r7, #4
    b736:	8809      	ldrh	r1, [r1, #0]
    b738:	52d1      	strh	r1, [r2, r3]
//BETHUGH		adcAverageReadings[adcOffset] = adc_result_buffer[1];  //beth 			
		//----------------------
		// testing grab maximum current sense 
		//----------------------
		if (adcOffset == 1)
    b73a:	4b43      	ldr	r3, [pc, #268]	; (b848 <ADCTask+0x1b8>)
    b73c:	781b      	ldrb	r3, [r3, #0]
    b73e:	2b01      	cmp	r3, #1
    b740:	d109      	bne.n	b756 <ADCTask+0xc6>
		{
			//----------------------
			// Get an average. 
			if (averageRead>maxCurrentRead)
    b742:	4b45      	ldr	r3, [pc, #276]	; (b858 <ADCTask+0x1c8>)
    b744:	881b      	ldrh	r3, [r3, #0]
    b746:	1d3a      	adds	r2, r7, #4
    b748:	8812      	ldrh	r2, [r2, #0]
    b74a:	429a      	cmp	r2, r3
    b74c:	d903      	bls.n	b756 <ADCTask+0xc6>
			{
				maxCurrentRead = averageRead;
    b74e:	4b42      	ldr	r3, [pc, #264]	; (b858 <ADCTask+0x1c8>)
    b750:	1d3a      	adds	r2, r7, #4
    b752:	8812      	ldrh	r2, [r2, #0]
    b754:	801a      	strh	r2, [r3, #0]
			}
		}		
//v01_41 boc
		if (adcOffset == 2)
    b756:	4b3c      	ldr	r3, [pc, #240]	; (b848 <ADCTask+0x1b8>)
    b758:	781b      	ldrb	r3, [r3, #0]
    b75a:	2b02      	cmp	r3, #2
    b75c:	d109      	bne.n	b772 <ADCTask+0xe2>
		{
			//----------------------
			// Get an average.
			if (averageRead>maxFSRRead)
    b75e:	4b3f      	ldr	r3, [pc, #252]	; (b85c <ADCTask+0x1cc>)
    b760:	881b      	ldrh	r3, [r3, #0]
    b762:	1d3a      	adds	r2, r7, #4
    b764:	8812      	ldrh	r2, [r2, #0]
    b766:	429a      	cmp	r2, r3
    b768:	d903      	bls.n	b772 <ADCTask+0xe2>
			{
				maxFSRRead = averageRead;
    b76a:	4b3c      	ldr	r3, [pc, #240]	; (b85c <ADCTask+0x1cc>)
    b76c:	1d3a      	adds	r2, r7, #4
    b76e:	8812      	ldrh	r2, [r2, #0]
    b770:	801a      	strh	r2, [r3, #0]
			}
		}		
		adcOffset++;
    b772:	4b35      	ldr	r3, [pc, #212]	; (b848 <ADCTask+0x1b8>)
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	3301      	adds	r3, #1
    b778:	b2da      	uxtb	r2, r3
    b77a:	4b33      	ldr	r3, [pc, #204]	; (b848 <ADCTask+0x1b8>)
    b77c:	701a      	strb	r2, [r3, #0]
		if (adcOffset >= MAX_ADC_CHANNELS)
    b77e:	4b32      	ldr	r3, [pc, #200]	; (b848 <ADCTask+0x1b8>)
    b780:	781b      	ldrb	r3, [r3, #0]
    b782:	2b03      	cmp	r3, #3
    b784:	d912      	bls.n	b7ac <ADCTask+0x11c>
		{
			adcOffset = 0;
    b786:	4b30      	ldr	r3, [pc, #192]	; (b848 <ADCTask+0x1b8>)
    b788:	2200      	movs	r2, #0
    b78a:	701a      	strb	r2, [r3, #0]
			adcFirstPassDone = 1;  
    b78c:	4b34      	ldr	r3, [pc, #208]	; (b860 <ADCTask+0x1d0>)
    b78e:	2201      	movs	r2, #1
    b790:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD			
			brakeChange |= BRAKECHANGE_ADCDONE; 
    b792:	4b34      	ldr	r3, [pc, #208]	; (b864 <ADCTask+0x1d4>)
    b794:	781b      	ldrb	r3, [r3, #0]
    b796:	2201      	movs	r2, #1
    b798:	4313      	orrs	r3, r2
    b79a:	b2da      	uxtb	r2, r3
    b79c:	4b31      	ldr	r3, [pc, #196]	; (b864 <ADCTask+0x1d4>)
    b79e:	701a      	strb	r2, [r3, #0]
			schedByte|= SCHEDBYTE_BRAKETASK; 
    b7a0:	4b31      	ldr	r3, [pc, #196]	; (b868 <ADCTask+0x1d8>)
    b7a2:	681b      	ldr	r3, [r3, #0]
    b7a4:	2240      	movs	r2, #64	; 0x40
    b7a6:	431a      	orrs	r2, r3
    b7a8:	4b2f      	ldr	r3, [pc, #188]	; (b868 <ADCTask+0x1d8>)
    b7aa:	601a      	str	r2, [r3, #0]
			//-----------------------
			// set a timer to do the ADC stuff
			
		}
#if BRAKEBOARD		
		if (motorOn == TRUE)
    b7ac:	4b2f      	ldr	r3, [pc, #188]	; (b86c <ADCTask+0x1dc>)
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	2b01      	cmp	r3, #1
    b7b2:	d102      	bne.n	b7ba <ADCTask+0x12a>
		{
			adcOffset = 1; 
    b7b4:	4b24      	ldr	r3, [pc, #144]	; (b848 <ADCTask+0x1b8>)
    b7b6:	2201      	movs	r2, #1
    b7b8:	701a      	strb	r2, [r3, #0]
		}
		adcTimeout = 1; //04-11-16
    b7ba:	4b2d      	ldr	r3, [pc, #180]	; (b870 <ADCTask+0x1e0>)
    b7bc:	2201      	movs	r2, #1
    b7be:	701a      	strb	r2, [r3, #0]
#endif
 		adcTimer = ADCTIME; 
    b7c0:	4b2c      	ldr	r3, [pc, #176]	; (b874 <ADCTask+0x1e4>)
    b7c2:	2203      	movs	r2, #3
    b7c4:	801a      	strh	r2, [r3, #0]
		adcTimeout = 0; 
    b7c6:	4b2a      	ldr	r3, [pc, #168]	; (b870 <ADCTask+0x1e0>)
    b7c8:	2200      	movs	r2, #0
    b7ca:	701a      	strb	r2, [r3, #0]
	}
	if (adcTimeout != 0)
    b7cc:	4b28      	ldr	r3, [pc, #160]	; (b870 <ADCTask+0x1e0>)
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d033      	beq.n	b83c <ADCTask+0x1ac>
	{
		adcTimeout = 0;
    b7d4:	4b26      	ldr	r3, [pc, #152]	; (b870 <ADCTask+0x1e0>)
    b7d6:	2200      	movs	r2, #0
    b7d8:	701a      	strb	r2, [r3, #0]
		adcTimer = 0; 
    b7da:	4b26      	ldr	r3, [pc, #152]	; (b874 <ADCTask+0x1e4>)
    b7dc:	2200      	movs	r2, #0
    b7de:	801a      	strh	r2, [r3, #0]
		switch (adcOffset)
    b7e0:	4b19      	ldr	r3, [pc, #100]	; (b848 <ADCTask+0x1b8>)
    b7e2:	781b      	ldrb	r3, [r3, #0]
    b7e4:	2b04      	cmp	r3, #4
    b7e6:	d822      	bhi.n	b82e <ADCTask+0x19e>
    b7e8:	009a      	lsls	r2, r3, #2
    b7ea:	4b23      	ldr	r3, [pc, #140]	; (b878 <ADCTask+0x1e8>)
    b7ec:	18d3      	adds	r3, r2, r3
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	469f      	mov	pc, r3
		{
			case 0:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN0);
    b7f2:	4b22      	ldr	r3, [pc, #136]	; (b87c <ADCTask+0x1ec>)
    b7f4:	1c18      	adds	r0, r3, #0
    b7f6:	2100      	movs	r1, #0
    b7f8:	4b21      	ldr	r3, [pc, #132]	; (b880 <ADCTask+0x1f0>)
    b7fa:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN0;			
				break;
    b7fc:	e017      	b.n	b82e <ADCTask+0x19e>
			}	
			case 1:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN1);			
    b7fe:	4b1f      	ldr	r3, [pc, #124]	; (b87c <ADCTask+0x1ec>)
    b800:	1c18      	adds	r0, r3, #0
    b802:	2101      	movs	r1, #1
    b804:	4b1e      	ldr	r3, [pc, #120]	; (b880 <ADCTask+0x1f0>)
    b806:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN1;			
				break;
    b808:	e011      	b.n	b82e <ADCTask+0x19e>
			}
			case 2:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN15);
    b80a:	4b1c      	ldr	r3, [pc, #112]	; (b87c <ADCTask+0x1ec>)
    b80c:	1c18      	adds	r0, r3, #0
    b80e:	210f      	movs	r1, #15
    b810:	4b1b      	ldr	r3, [pc, #108]	; (b880 <ADCTask+0x1f0>)
    b812:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN2;			
				break;
    b814:	e00b      	b.n	b82e <ADCTask+0x19e>
			}	
			case 3:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN14);		//01_38_#2	
    b816:	4b19      	ldr	r3, [pc, #100]	; (b87c <ADCTask+0x1ec>)
    b818:	1c18      	adds	r0, r3, #0
    b81a:	210e      	movs	r1, #14
    b81c:	4b18      	ldr	r3, [pc, #96]	; (b880 <ADCTask+0x1f0>)
    b81e:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN14;			
				break;
    b820:	e005      	b.n	b82e <ADCTask+0x19e>
			}
			case 4:
			{
				adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_PIN12);		//01_38_#2	
    b822:	4b16      	ldr	r3, [pc, #88]	; (b87c <ADCTask+0x1ec>)
    b824:	1c18      	adds	r0, r3, #0
    b826:	210c      	movs	r1, #12
    b828:	4b15      	ldr	r3, [pc, #84]	; (b880 <ADCTask+0x1f0>)
    b82a:	4798      	blx	r3
	//			config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN15;			
				break;
    b82c:	46c0      	nop			; (mov r8, r8)
			}				
		}
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);		
    b82e:	4a13      	ldr	r2, [pc, #76]	; (b87c <ADCTask+0x1ec>)
    b830:	4b06      	ldr	r3, [pc, #24]	; (b84c <ADCTask+0x1bc>)
    b832:	1c10      	adds	r0, r2, #0
    b834:	1c19      	adds	r1, r3, #0
    b836:	2204      	movs	r2, #4
    b838:	4b12      	ldr	r3, [pc, #72]	; (b884 <ADCTask+0x1f4>)
    b83a:	4798      	blx	r3
	}
}
    b83c:	46bd      	mov	sp, r7
    b83e:	b002      	add	sp, #8
    b840:	bd80      	pop	{r7, pc}
    b842:	46c0      	nop			; (mov r8, r8)
    b844:	200004c2 	.word	0x200004c2
    b848:	2000303c 	.word	0x2000303c
    b84c:	20003034 	.word	0x20003034
    b850:	20003010 	.word	0x20003010
    b854:	20003040 	.word	0x20003040
    b858:	200004be 	.word	0x200004be
    b85c:	200004c0 	.word	0x200004c0
    b860:	200004bc 	.word	0x200004bc
    b864:	20002eee 	.word	0x20002eee
    b868:	2000369c 	.word	0x2000369c
    b86c:	200004b0 	.word	0x200004b0
    b870:	2000300c 	.word	0x2000300c
    b874:	20003030 	.word	0x20003030
    b878:	000183ec 	.word	0x000183ec
    b87c:	20003048 	.word	0x20003048
    b880:	0000b335 	.word	0x0000b335
    b884:	00003cb1 	.word	0x00003cb1

0000b888 <ADCInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCInit(void)
{
    b888:	b580      	push	{r7, lr}
    b88a:	b082      	sub	sp, #8
    b88c:	af00      	add	r7, sp, #0
	uint8_t i,j; 
	
	adcOffset = 0; 
    b88e:	4b1d      	ldr	r3, [pc, #116]	; (b904 <ADCInit+0x7c>)
    b890:	2200      	movs	r2, #0
    b892:	701a      	strb	r2, [r3, #0]
	adcFirstPassDone = 0; 
    b894:	4b1c      	ldr	r3, [pc, #112]	; (b908 <ADCInit+0x80>)
    b896:	2200      	movs	r2, #0
    b898:	701a      	strb	r2, [r3, #0]
	 
	configure_adc(adcOffset);	
    b89a:	4b1a      	ldr	r3, [pc, #104]	; (b904 <ADCInit+0x7c>)
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	1c18      	adds	r0, r3, #0
    b8a0:	4b1a      	ldr	r3, [pc, #104]	; (b90c <ADCInit+0x84>)
    b8a2:	4798      	blx	r3
	configure_adc_callbacks();	
    b8a4:	4b1a      	ldr	r3, [pc, #104]	; (b910 <ADCInit+0x88>)
    b8a6:	4798      	blx	r3
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b8a8:	1dfb      	adds	r3, r7, #7
    b8aa:	2200      	movs	r2, #0
    b8ac:	701a      	strb	r2, [r3, #0]
    b8ae:	e021      	b.n	b8f4 <ADCInit+0x6c>
	{
		for (j=0;j<ADC_SAMPLES;j++)
    b8b0:	1dbb      	adds	r3, r7, #6
    b8b2:	2200      	movs	r2, #0
    b8b4:	701a      	strb	r2, [r3, #0]
    b8b6:	e00e      	b.n	b8d6 <ADCInit+0x4e>
		{
			adcReadings[i][j]=0;
    b8b8:	1dfb      	adds	r3, r7, #7
    b8ba:	7819      	ldrb	r1, [r3, #0]
    b8bc:	1dbb      	adds	r3, r7, #6
    b8be:	781a      	ldrb	r2, [r3, #0]
    b8c0:	4b14      	ldr	r3, [pc, #80]	; (b914 <ADCInit+0x8c>)
    b8c2:	0089      	lsls	r1, r1, #2
    b8c4:	188a      	adds	r2, r1, r2
    b8c6:	0052      	lsls	r2, r2, #1
    b8c8:	2100      	movs	r1, #0
    b8ca:	52d1      	strh	r1, [r2, r3]
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
	{
		for (j=0;j<ADC_SAMPLES;j++)
    b8cc:	1dbb      	adds	r3, r7, #6
    b8ce:	781a      	ldrb	r2, [r3, #0]
    b8d0:	1dbb      	adds	r3, r7, #6
    b8d2:	3201      	adds	r2, #1
    b8d4:	701a      	strb	r2, [r3, #0]
    b8d6:	1dbb      	adds	r3, r7, #6
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	2b03      	cmp	r3, #3
    b8dc:	d9ec      	bls.n	b8b8 <ADCInit+0x30>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
    b8de:	1dfb      	adds	r3, r7, #7
    b8e0:	781a      	ldrb	r2, [r3, #0]
    b8e2:	4b0d      	ldr	r3, [pc, #52]	; (b918 <ADCInit+0x90>)
    b8e4:	0052      	lsls	r2, r2, #1
    b8e6:	2100      	movs	r1, #0
    b8e8:	52d1      	strh	r1, [r2, r3]
	adcFirstPassDone = 0; 
	 
	configure_adc(adcOffset);	
	configure_adc_callbacks();	
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b8ea:	1dfb      	adds	r3, r7, #7
    b8ec:	781a      	ldrb	r2, [r3, #0]
    b8ee:	1dfb      	adds	r3, r7, #7
    b8f0:	3201      	adds	r2, #1
    b8f2:	701a      	strb	r2, [r3, #0]
    b8f4:	1dfb      	adds	r3, r7, #7
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	2b03      	cmp	r3, #3
    b8fa:	d9d9      	bls.n	b8b0 <ADCInit+0x28>
		{
			adcReadings[i][j]=0;
		}
		adcAverageReadings[i]=0;
	}
}
    b8fc:	46bd      	mov	sp, r7
    b8fe:	b002      	add	sp, #8
    b900:	bd80      	pop	{r7, pc}
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	2000303c 	.word	0x2000303c
    b908:	200004bc 	.word	0x200004bc
    b90c:	0000b579 	.word	0x0000b579
    b910:	0000b661 	.word	0x0000b661
    b914:	20003010 	.word	0x20003010
    b918:	20003040 	.word	0x20003040

0000b91c <ADCStart>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void ADCStart(void)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	b082      	sub	sp, #8
    b920:	af00      	add	r7, sp, #0
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b922:	1dfb      	adds	r3, r7, #7
    b924:	2200      	movs	r2, #0
    b926:	701a      	strb	r2, [r3, #0]
    b928:	e020      	b.n	b96c <ADCStart+0x50>
	{
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    b92a:	4a14      	ldr	r2, [pc, #80]	; (b97c <ADCStart+0x60>)
    b92c:	4b14      	ldr	r3, [pc, #80]	; (b980 <ADCStart+0x64>)
    b92e:	1c10      	adds	r0, r2, #0
    b930:	1c19      	adds	r1, r3, #0
    b932:	2204      	movs	r2, #4
    b934:	4b13      	ldr	r3, [pc, #76]	; (b984 <ADCStart+0x68>)
    b936:	4798      	blx	r3
		while ((schedByte&SCHEDBYTE_ADC)==0);
    b938:	46c0      	nop			; (mov r8, r8)
    b93a:	4b13      	ldr	r3, [pc, #76]	; (b988 <ADCStart+0x6c>)
    b93c:	681a      	ldr	r2, [r3, #0]
    b93e:	2320      	movs	r3, #32
    b940:	4013      	ands	r3, r2
    b942:	d0fa      	beq.n	b93a <ADCStart+0x1e>
		schedByte &= ~SCHEDBYTE_ADC; 
    b944:	4b10      	ldr	r3, [pc, #64]	; (b988 <ADCStart+0x6c>)
    b946:	681b      	ldr	r3, [r3, #0]
    b948:	2220      	movs	r2, #32
    b94a:	1c19      	adds	r1, r3, #0
    b94c:	4391      	bics	r1, r2
    b94e:	1c0a      	adds	r2, r1, #0
    b950:	4b0d      	ldr	r3, [pc, #52]	; (b988 <ADCStart+0x6c>)
    b952:	601a      	str	r2, [r3, #0]
		ADCTask();
    b954:	4b0d      	ldr	r3, [pc, #52]	; (b98c <ADCStart+0x70>)
    b956:	4798      	blx	r3
		adcTimeout = 1; 
    b958:	4b0d      	ldr	r3, [pc, #52]	; (b990 <ADCStart+0x74>)
    b95a:	2201      	movs	r2, #1
    b95c:	701a      	strb	r2, [r3, #0]
		ADCTask();
    b95e:	4b0b      	ldr	r3, [pc, #44]	; (b98c <ADCStart+0x70>)
    b960:	4798      	blx	r3
//==============================================================================
void ADCStart(void)
{
	uint8_t i; 
	
	for (i=0;i<MAX_ADC_CHANNELS;i++)
    b962:	1dfb      	adds	r3, r7, #7
    b964:	781a      	ldrb	r2, [r3, #0]
    b966:	1dfb      	adds	r3, r7, #7
    b968:	3201      	adds	r2, #1
    b96a:	701a      	strb	r2, [r3, #0]
    b96c:	1dfb      	adds	r3, r7, #7
    b96e:	781b      	ldrb	r3, [r3, #0]
    b970:	2b03      	cmp	r3, #3
    b972:	d9da      	bls.n	b92a <ADCStart+0xe>
		schedByte &= ~SCHEDBYTE_ADC; 
		ADCTask();
		adcTimeout = 1; 
		ADCTask();
	}
}
    b974:	46bd      	mov	sp, r7
    b976:	b002      	add	sp, #8
    b978:	bd80      	pop	{r7, pc}
    b97a:	46c0      	nop			; (mov r8, r8)
    b97c:	20003048 	.word	0x20003048
    b980:	20003034 	.word	0x20003034
    b984:	00003cb1 	.word	0x00003cb1
    b988:	2000369c 	.word	0x2000369c
    b98c:	0000b691 	.word	0x0000b691
    b990:	2000300c 	.word	0x2000300c

0000b994 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    b994:	b580      	push	{r7, lr}
    b996:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    b998:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    b99c:	4b02      	ldr	r3, [pc, #8]	; (b9a8 <NVIC_SystemReset+0x14>)
    b99e:	4a03      	ldr	r2, [pc, #12]	; (b9ac <NVIC_SystemReset+0x18>)
    b9a0:	60da      	str	r2, [r3, #12]
    b9a2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    b9a6:	e7fe      	b.n	b9a6 <NVIC_SystemReset+0x12>
    b9a8:	e000ed00 	.word	0xe000ed00
    b9ac:	05fa0004 	.word	0x05fa0004

0000b9b0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b084      	sub	sp, #16
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	1c02      	adds	r2, r0, #0
    b9b8:	1dfb      	adds	r3, r7, #7
    b9ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b9bc:	1c3b      	adds	r3, r7, #0
    b9be:	330f      	adds	r3, #15
    b9c0:	1dfa      	adds	r2, r7, #7
    b9c2:	7812      	ldrb	r2, [r2, #0]
    b9c4:	09d2      	lsrs	r2, r2, #7
    b9c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b9c8:	1c3b      	adds	r3, r7, #0
    b9ca:	330e      	adds	r3, #14
    b9cc:	1dfa      	adds	r2, r7, #7
    b9ce:	7812      	ldrb	r2, [r2, #0]
    b9d0:	0952      	lsrs	r2, r2, #5
    b9d2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b9d4:	4b0d      	ldr	r3, [pc, #52]	; (ba0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b9d6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    b9d8:	1c3b      	adds	r3, r7, #0
    b9da:	330f      	adds	r3, #15
    b9dc:	781b      	ldrb	r3, [r3, #0]
    b9de:	2b00      	cmp	r3, #0
    b9e0:	d10e      	bne.n	ba00 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    b9e2:	1c3b      	adds	r3, r7, #0
    b9e4:	330f      	adds	r3, #15
    b9e6:	781b      	ldrb	r3, [r3, #0]
    b9e8:	009b      	lsls	r3, r3, #2
    b9ea:	2210      	movs	r2, #16
    b9ec:	19d2      	adds	r2, r2, r7
    b9ee:	18d3      	adds	r3, r2, r3
    b9f0:	3b08      	subs	r3, #8
    b9f2:	681a      	ldr	r2, [r3, #0]
    b9f4:	1c3b      	adds	r3, r7, #0
    b9f6:	330e      	adds	r3, #14
    b9f8:	781b      	ldrb	r3, [r3, #0]
    b9fa:	01db      	lsls	r3, r3, #7
    b9fc:	18d3      	adds	r3, r2, r3
    b9fe:	e000      	b.n	ba02 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    ba00:	2300      	movs	r3, #0
	}
}
    ba02:	1c18      	adds	r0, r3, #0
    ba04:	46bd      	mov	sp, r7
    ba06:	b004      	add	sp, #16
    ba08:	bd80      	pop	{r7, pc}
    ba0a:	46c0      	nop			; (mov r8, r8)
    ba0c:	41004400 	.word	0x41004400

0000ba10 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    ba10:	b580      	push	{r7, lr}
    ba12:	b082      	sub	sp, #8
    ba14:	af00      	add	r7, sp, #0
    ba16:	1c02      	adds	r2, r0, #0
    ba18:	1dfb      	adds	r3, r7, #7
    ba1a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ba1c:	1dfb      	adds	r3, r7, #7
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	1c18      	adds	r0, r3, #0
    ba22:	4b03      	ldr	r3, [pc, #12]	; (ba30 <port_get_group_from_gpio_pin+0x20>)
    ba24:	4798      	blx	r3
    ba26:	1c03      	adds	r3, r0, #0
}
    ba28:	1c18      	adds	r0, r3, #0
    ba2a:	46bd      	mov	sp, r7
    ba2c:	b002      	add	sp, #8
    ba2e:	bd80      	pop	{r7, pc}
    ba30:	0000b9b1 	.word	0x0000b9b1

0000ba34 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    ba34:	b580      	push	{r7, lr}
    ba36:	b084      	sub	sp, #16
    ba38:	af00      	add	r7, sp, #0
    ba3a:	1c02      	adds	r2, r0, #0
    ba3c:	1dfb      	adds	r3, r7, #7
    ba3e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ba40:	1dfb      	adds	r3, r7, #7
    ba42:	781b      	ldrb	r3, [r3, #0]
    ba44:	1c18      	adds	r0, r3, #0
    ba46:	4b0c      	ldr	r3, [pc, #48]	; (ba78 <port_pin_get_input_level+0x44>)
    ba48:	4798      	blx	r3
    ba4a:	1c03      	adds	r3, r0, #0
    ba4c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ba4e:	1dfb      	adds	r3, r7, #7
    ba50:	781a      	ldrb	r2, [r3, #0]
    ba52:	231f      	movs	r3, #31
    ba54:	4013      	ands	r3, r2
    ba56:	2201      	movs	r2, #1
    ba58:	1c11      	adds	r1, r2, #0
    ba5a:	4099      	lsls	r1, r3
    ba5c:	1c0b      	adds	r3, r1, #0
    ba5e:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    ba60:	68fb      	ldr	r3, [r7, #12]
    ba62:	6a1b      	ldr	r3, [r3, #32]
    ba64:	68ba      	ldr	r2, [r7, #8]
    ba66:	4013      	ands	r3, r2
    ba68:	1e5a      	subs	r2, r3, #1
    ba6a:	4193      	sbcs	r3, r2
    ba6c:	b2db      	uxtb	r3, r3
}
    ba6e:	1c18      	adds	r0, r3, #0
    ba70:	46bd      	mov	sp, r7
    ba72:	b004      	add	sp, #16
    ba74:	bd80      	pop	{r7, pc}
    ba76:	46c0      	nop			; (mov r8, r8)
    ba78:	0000ba11 	.word	0x0000ba11

0000ba7c <ButtonCheckPower>:
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// ---------------------------GLOBAL FUNCTIONS ----------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#if BRAKEBOARD
uint8_t ButtonCheckPower(void)
{
    ba7c:	b590      	push	{r4, r7, lr}
    ba7e:	b083      	sub	sp, #12
    ba80:	af00      	add	r7, sp, #0
	short int prevKey; 
	uint8_t i;
	
	for (i=0;i<12;i++)
    ba82:	1dfb      	adds	r3, r7, #7
    ba84:	2200      	movs	r2, #0
    ba86:	701a      	strb	r2, [r3, #0]
    ba88:	e021      	b.n	bace <ButtonCheckPower+0x52>
	{
		power_hist = (power_hist << 1) + port_pin_get_input_level(BUTTON_POWER);
    ba8a:	4b1c      	ldr	r3, [pc, #112]	; (bafc <ButtonCheckPower+0x80>)
    ba8c:	881b      	ldrh	r3, [r3, #0]
    ba8e:	18db      	adds	r3, r3, r3
    ba90:	b29c      	uxth	r4, r3
    ba92:	200e      	movs	r0, #14
    ba94:	4b1a      	ldr	r3, [pc, #104]	; (bb00 <ButtonCheckPower+0x84>)
    ba96:	4798      	blx	r3
    ba98:	1c03      	adds	r3, r0, #0
    ba9a:	18e3      	adds	r3, r4, r3
    ba9c:	b29a      	uxth	r2, r3
    ba9e:	4b17      	ldr	r3, [pc, #92]	; (bafc <ButtonCheckPower+0x80>)
    baa0:	801a      	strh	r2, [r3, #0]
	 
		prevKey = power_pressed;
    baa2:	1d3b      	adds	r3, r7, #4
    baa4:	4a17      	ldr	r2, [pc, #92]	; (bb04 <ButtonCheckPower+0x88>)
    baa6:	8812      	ldrh	r2, [r2, #0]
    baa8:	801a      	strh	r2, [r3, #0]
		if ((power_hist & 7) == 0)
    baaa:	4b14      	ldr	r3, [pc, #80]	; (bafc <ButtonCheckPower+0x80>)
    baac:	881b      	ldrh	r3, [r3, #0]
    baae:	1c1a      	adds	r2, r3, #0
    bab0:	2307      	movs	r3, #7
    bab2:	4013      	ands	r3, r2
    bab4:	d103      	bne.n	babe <ButtonCheckPower+0x42>
		power_pressed = 1;
    bab6:	4b13      	ldr	r3, [pc, #76]	; (bb04 <ButtonCheckPower+0x88>)
    bab8:	2201      	movs	r2, #1
    baba:	801a      	strh	r2, [r3, #0]
    babc:	e002      	b.n	bac4 <ButtonCheckPower+0x48>
		else
		power_pressed = 0;
    babe:	4b11      	ldr	r3, [pc, #68]	; (bb04 <ButtonCheckPower+0x88>)
    bac0:	2200      	movs	r2, #0
    bac2:	801a      	strh	r2, [r3, #0]
uint8_t ButtonCheckPower(void)
{
	short int prevKey; 
	uint8_t i;
	
	for (i=0;i<12;i++)
    bac4:	1dfb      	adds	r3, r7, #7
    bac6:	781a      	ldrb	r2, [r3, #0]
    bac8:	1dfb      	adds	r3, r7, #7
    baca:	3201      	adds	r2, #1
    bacc:	701a      	strb	r2, [r3, #0]
    bace:	1dfb      	adds	r3, r7, #7
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	2b0b      	cmp	r3, #11
    bad4:	d9d9      	bls.n	ba8a <ButtonCheckPower+0xe>
		if ((power_hist & 7) == 0)
		power_pressed = 1;
		else
		power_pressed = 0;
	}
		if (power_pressed != 0)
    bad6:	4b0b      	ldr	r3, [pc, #44]	; (bb04 <ButtonCheckPower+0x88>)
    bad8:	881b      	ldrh	r3, [r3, #0]
    bada:	2b00      	cmp	r3, #0
    badc:	d006      	beq.n	baec <ButtonCheckPower+0x70>
		{
			keyChanged |= KEY_POWER;
    bade:	4b0a      	ldr	r3, [pc, #40]	; (bb08 <ButtonCheckPower+0x8c>)
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	2202      	movs	r2, #2
    bae4:	4313      	orrs	r3, r2
    bae6:	b2da      	uxtb	r2, r3
    bae8:	4b07      	ldr	r3, [pc, #28]	; (bb08 <ButtonCheckPower+0x8c>)
    baea:	701a      	strb	r2, [r3, #0]
		}
		return power_pressed;
    baec:	4b05      	ldr	r3, [pc, #20]	; (bb04 <ButtonCheckPower+0x88>)
    baee:	881b      	ldrh	r3, [r3, #0]
    baf0:	b2db      	uxtb	r3, r3
}
    baf2:	1c18      	adds	r0, r3, #0
    baf4:	46bd      	mov	sp, r7
    baf6:	b003      	add	sp, #12
    baf8:	bd90      	pop	{r4, r7, pc}
    bafa:	46c0      	nop			; (mov r8, r8)
    bafc:	200004d2 	.word	0x200004d2
    bb00:	0000ba35 	.word	0x0000ba35
    bb04:	2000306c 	.word	0x2000306c
    bb08:	20003069 	.word	0x20003069

0000bb0c <FCCSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void FCCSample(void)
{
    bb0c:	b598      	push	{r3, r4, r7, lr}
    bb0e:	af00      	add	r7, sp, #0
	 
	//------------------------
	//check pins
	constantTX_hist = (constantTX_hist << 1) + port_pin_get_input_level(CONSTANTTX);
    bb10:	4b26      	ldr	r3, [pc, #152]	; (bbac <FCCSample+0xa0>)
    bb12:	881b      	ldrh	r3, [r3, #0]
    bb14:	18db      	adds	r3, r3, r3
    bb16:	b29c      	uxth	r4, r3
    bb18:	2000      	movs	r0, #0
    bb1a:	4b25      	ldr	r3, [pc, #148]	; (bbb0 <FCCSample+0xa4>)
    bb1c:	4798      	blx	r3
    bb1e:	1c03      	adds	r3, r0, #0
    bb20:	18e3      	adds	r3, r4, r3
    bb22:	b29a      	uxth	r2, r3
    bb24:	4b21      	ldr	r3, [pc, #132]	; (bbac <FCCSample+0xa0>)
    bb26:	801a      	strh	r2, [r3, #0]
	constantRX_hist = (constantRX_hist << 1) + port_pin_get_input_level(CONSTANTRX);
    bb28:	4b22      	ldr	r3, [pc, #136]	; (bbb4 <FCCSample+0xa8>)
    bb2a:	881b      	ldrh	r3, [r3, #0]
    bb2c:	18db      	adds	r3, r3, r3
    bb2e:	b29c      	uxth	r4, r3
    bb30:	2001      	movs	r0, #1
    bb32:	4b1f      	ldr	r3, [pc, #124]	; (bbb0 <FCCSample+0xa4>)
    bb34:	4798      	blx	r3
    bb36:	1c03      	adds	r3, r0, #0
    bb38:	18e3      	adds	r3, r4, r3
    bb3a:	b29a      	uxth	r2, r3
    bb3c:	4b1d      	ldr	r3, [pc, #116]	; (bbb4 <FCCSample+0xa8>)
    bb3e:	801a      	strh	r2, [r3, #0]
	constantCW_hist = (constantCW_hist << 1) + port_pin_get_input_level(CONSTANTCW);
    bb40:	4b1d      	ldr	r3, [pc, #116]	; (bbb8 <FCCSample+0xac>)
    bb42:	881b      	ldrh	r3, [r3, #0]
    bb44:	18db      	adds	r3, r3, r3
    bb46:	b29c      	uxth	r4, r3
    bb48:	2036      	movs	r0, #54	; 0x36
    bb4a:	4b19      	ldr	r3, [pc, #100]	; (bbb0 <FCCSample+0xa4>)
    bb4c:	4798      	blx	r3
    bb4e:	1c03      	adds	r3, r0, #0
    bb50:	18e3      	adds	r3, r4, r3
    bb52:	b29a      	uxth	r2, r3
    bb54:	4b18      	ldr	r3, [pc, #96]	; (bbb8 <FCCSample+0xac>)
    bb56:	801a      	strh	r2, [r3, #0]
	 	
	//update vars
 
	if ((constantTX_hist & 7) == 0)
    bb58:	4b14      	ldr	r3, [pc, #80]	; (bbac <FCCSample+0xa0>)
    bb5a:	881b      	ldrh	r3, [r3, #0]
    bb5c:	1c1a      	adds	r2, r3, #0
    bb5e:	2307      	movs	r3, #7
    bb60:	4013      	ands	r3, r2
    bb62:	d103      	bne.n	bb6c <FCCSample+0x60>
	constantTX_pressed = 1;
    bb64:	4b15      	ldr	r3, [pc, #84]	; (bbbc <FCCSample+0xb0>)
    bb66:	2201      	movs	r2, #1
    bb68:	801a      	strh	r2, [r3, #0]
    bb6a:	e002      	b.n	bb72 <FCCSample+0x66>
	else
	constantTX_pressed = 0;
    bb6c:	4b13      	ldr	r3, [pc, #76]	; (bbbc <FCCSample+0xb0>)
    bb6e:	2200      	movs	r2, #0
    bb70:	801a      	strh	r2, [r3, #0]

	 
	if ((constantRX_hist & 7) == 0)
    bb72:	4b10      	ldr	r3, [pc, #64]	; (bbb4 <FCCSample+0xa8>)
    bb74:	881b      	ldrh	r3, [r3, #0]
    bb76:	1c1a      	adds	r2, r3, #0
    bb78:	2307      	movs	r3, #7
    bb7a:	4013      	ands	r3, r2
    bb7c:	d103      	bne.n	bb86 <FCCSample+0x7a>
	constantRX_pressed = 1;
    bb7e:	4b10      	ldr	r3, [pc, #64]	; (bbc0 <FCCSample+0xb4>)
    bb80:	2201      	movs	r2, #1
    bb82:	801a      	strh	r2, [r3, #0]
    bb84:	e002      	b.n	bb8c <FCCSample+0x80>
	else
	constantRX_pressed = 0;
    bb86:	4b0e      	ldr	r3, [pc, #56]	; (bbc0 <FCCSample+0xb4>)
    bb88:	2200      	movs	r2, #0
    bb8a:	801a      	strh	r2, [r3, #0]
	
	 
	if ((constantCW_hist & 7) == 0)
    bb8c:	4b0a      	ldr	r3, [pc, #40]	; (bbb8 <FCCSample+0xac>)
    bb8e:	881b      	ldrh	r3, [r3, #0]
    bb90:	1c1a      	adds	r2, r3, #0
    bb92:	2307      	movs	r3, #7
    bb94:	4013      	ands	r3, r2
    bb96:	d103      	bne.n	bba0 <FCCSample+0x94>
	constantCW_pressed = 1;
    bb98:	4b0a      	ldr	r3, [pc, #40]	; (bbc4 <FCCSample+0xb8>)
    bb9a:	2201      	movs	r2, #1
    bb9c:	801a      	strh	r2, [r3, #0]
    bb9e:	e002      	b.n	bba6 <FCCSample+0x9a>
	else
	constantCW_pressed = 0;	
    bba0:	4b08      	ldr	r3, [pc, #32]	; (bbc4 <FCCSample+0xb8>)
    bba2:	2200      	movs	r2, #0
    bba4:	801a      	strh	r2, [r3, #0]
}
    bba6:	46bd      	mov	sp, r7
    bba8:	bd98      	pop	{r3, r4, r7, pc}
    bbaa:	46c0      	nop			; (mov r8, r8)
    bbac:	200004ca 	.word	0x200004ca
    bbb0:	0000ba35 	.word	0x0000ba35
    bbb4:	200004cc 	.word	0x200004cc
    bbb8:	200004ce 	.word	0x200004ce
    bbbc:	200004c4 	.word	0x200004c4
    bbc0:	200004c6 	.word	0x200004c6
    bbc4:	200004c8 	.word	0x200004c8

0000bbc8 <ButtonChanged>:
 

uint8_t ButtonChanged(void)
{
    bbc8:	b580      	push	{r7, lr}
    bbca:	b082      	sub	sp, #8
    bbcc:	af00      	add	r7, sp, #0
	uint8_t which; 
	which = keyChanged; 
    bbce:	1dfb      	adds	r3, r7, #7
    bbd0:	4a05      	ldr	r2, [pc, #20]	; (bbe8 <ButtonChanged+0x20>)
    bbd2:	7812      	ldrb	r2, [r2, #0]
    bbd4:	701a      	strb	r2, [r3, #0]
	keyChanged = 0;	
    bbd6:	4b04      	ldr	r3, [pc, #16]	; (bbe8 <ButtonChanged+0x20>)
    bbd8:	2200      	movs	r2, #0
    bbda:	701a      	strb	r2, [r3, #0]
	return which;
    bbdc:	1dfb      	adds	r3, r7, #7
    bbde:	781b      	ldrb	r3, [r3, #0]
	
}
    bbe0:	1c18      	adds	r0, r3, #0
    bbe2:	46bd      	mov	sp, r7
    bbe4:	b002      	add	sp, #8
    bbe6:	bd80      	pop	{r7, pc}
    bbe8:	20003069 	.word	0x20003069

0000bbec <ButtonSample>:
// FUNCTION:   ButtonSample
//------------------------------------------------------------------------------
// This function Delays then checks the buttons and updates button booleans
//==============================================================================
void ButtonSample(void)
{
    bbec:	b590      	push	{r4, r7, lr}
    bbee:	b083      	sub	sp, #12
    bbf0:	af00      	add	r7, sp, #0
  
#endif	
#if BRAKEBOARD
	//------------------------
	//check pins
	setup_hist = (setup_hist << 1) + port_pin_get_input_level(BUTTON_SETUP);
    bbf2:	4b74      	ldr	r3, [pc, #464]	; (bdc4 <ButtonSample+0x1d8>)
    bbf4:	881b      	ldrh	r3, [r3, #0]
    bbf6:	18db      	adds	r3, r3, r3
    bbf8:	b29c      	uxth	r4, r3
    bbfa:	200f      	movs	r0, #15
    bbfc:	4b72      	ldr	r3, [pc, #456]	; (bdc8 <ButtonSample+0x1dc>)
    bbfe:	4798      	blx	r3
    bc00:	1c03      	adds	r3, r0, #0
    bc02:	18e3      	adds	r3, r4, r3
    bc04:	b29a      	uxth	r2, r3
    bc06:	4b6f      	ldr	r3, [pc, #444]	; (bdc4 <ButtonSample+0x1d8>)
    bc08:	801a      	strh	r2, [r3, #0]
	power_hist = (power_hist << 1) + port_pin_get_input_level(BUTTON_POWER);
    bc0a:	4b70      	ldr	r3, [pc, #448]	; (bdcc <ButtonSample+0x1e0>)
    bc0c:	881b      	ldrh	r3, [r3, #0]
    bc0e:	18db      	adds	r3, r3, r3
    bc10:	b29c      	uxth	r4, r3
    bc12:	200e      	movs	r0, #14
    bc14:	4b6c      	ldr	r3, [pc, #432]	; (bdc8 <ButtonSample+0x1dc>)
    bc16:	4798      	blx	r3
    bc18:	1c03      	adds	r3, r0, #0
    bc1a:	18e3      	adds	r3, r4, r3
    bc1c:	b29a      	uxth	r2, r3
    bc1e:	4b6b      	ldr	r3, [pc, #428]	; (bdcc <ButtonSample+0x1e0>)
    bc20:	801a      	strh	r2, [r3, #0]
	breakawayRing_hist = (breakawayRing_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_RING);	
    bc22:	4b6b      	ldr	r3, [pc, #428]	; (bdd0 <ButtonSample+0x1e4>)
    bc24:	881b      	ldrh	r3, [r3, #0]
    bc26:	18db      	adds	r3, r3, r3
    bc28:	b29c      	uxth	r4, r3
    bc2a:	2016      	movs	r0, #22
    bc2c:	4b66      	ldr	r3, [pc, #408]	; (bdc8 <ButtonSample+0x1dc>)
    bc2e:	4798      	blx	r3
    bc30:	1c03      	adds	r3, r0, #0
    bc32:	18e3      	adds	r3, r4, r3
    bc34:	b29a      	uxth	r2, r3
    bc36:	4b66      	ldr	r3, [pc, #408]	; (bdd0 <ButtonSample+0x1e4>)
    bc38:	801a      	strh	r2, [r3, #0]
	breakawayTip_hist = (breakawayTip_hist << 1) + port_pin_get_input_level(INPUT_BREAKAWAY_TIP);		
    bc3a:	4b66      	ldr	r3, [pc, #408]	; (bdd4 <ButtonSample+0x1e8>)
    bc3c:	881b      	ldrh	r3, [r3, #0]
    bc3e:	18db      	adds	r3, r3, r3
    bc40:	b29c      	uxth	r4, r3
    bc42:	2017      	movs	r0, #23
    bc44:	4b60      	ldr	r3, [pc, #384]	; (bdc8 <ButtonSample+0x1dc>)
    bc46:	4798      	blx	r3
    bc48:	1c03      	adds	r3, r0, #0
    bc4a:	18e3      	adds	r3, r4, r3
    bc4c:	b29a      	uxth	r2, r3
    bc4e:	4b61      	ldr	r3, [pc, #388]	; (bdd4 <ButtonSample+0x1e8>)
    bc50:	801a      	strh	r2, [r3, #0]
	 
	//update vars
	prevKey = setup_pressed;
    bc52:	1dbb      	adds	r3, r7, #6
    bc54:	4a60      	ldr	r2, [pc, #384]	; (bdd8 <ButtonSample+0x1ec>)
    bc56:	8812      	ldrh	r2, [r2, #0]
    bc58:	801a      	strh	r2, [r3, #0]
	if ((setup_hist & 7) == 0)
    bc5a:	4b5a      	ldr	r3, [pc, #360]	; (bdc4 <ButtonSample+0x1d8>)
    bc5c:	881b      	ldrh	r3, [r3, #0]
    bc5e:	1c1a      	adds	r2, r3, #0
    bc60:	2307      	movs	r3, #7
    bc62:	4013      	ands	r3, r2
    bc64:	d103      	bne.n	bc6e <ButtonSample+0x82>
	setup_pressed = 1;
    bc66:	4b5c      	ldr	r3, [pc, #368]	; (bdd8 <ButtonSample+0x1ec>)
    bc68:	2201      	movs	r2, #1
    bc6a:	801a      	strh	r2, [r3, #0]
    bc6c:	e002      	b.n	bc74 <ButtonSample+0x88>
	else
	setup_pressed = 0;
    bc6e:	4b5a      	ldr	r3, [pc, #360]	; (bdd8 <ButtonSample+0x1ec>)
    bc70:	2200      	movs	r2, #0
    bc72:	801a      	strh	r2, [r3, #0]
	if (prevKey != setup_pressed)
    bc74:	4b58      	ldr	r3, [pc, #352]	; (bdd8 <ButtonSample+0x1ec>)
    bc76:	881b      	ldrh	r3, [r3, #0]
    bc78:	1dba      	adds	r2, r7, #6
    bc7a:	2100      	movs	r1, #0
    bc7c:	5e52      	ldrsh	r2, [r2, r1]
    bc7e:	b21b      	sxth	r3, r3
    bc80:	429a      	cmp	r2, r3
    bc82:	d006      	beq.n	bc92 <ButtonSample+0xa6>
	{
		keyChanged |= KEY_SETUP;
    bc84:	4b55      	ldr	r3, [pc, #340]	; (bddc <ButtonSample+0x1f0>)
    bc86:	781b      	ldrb	r3, [r3, #0]
    bc88:	2201      	movs	r2, #1
    bc8a:	4313      	orrs	r3, r2
    bc8c:	b2da      	uxtb	r2, r3
    bc8e:	4b53      	ldr	r3, [pc, #332]	; (bddc <ButtonSample+0x1f0>)
    bc90:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	
	}

	prevKey = power_pressed;
    bc92:	1dbb      	adds	r3, r7, #6
    bc94:	4a52      	ldr	r2, [pc, #328]	; (bde0 <ButtonSample+0x1f4>)
    bc96:	8812      	ldrh	r2, [r2, #0]
    bc98:	801a      	strh	r2, [r3, #0]
	if ((power_hist & 7) == 0)
    bc9a:	4b4c      	ldr	r3, [pc, #304]	; (bdcc <ButtonSample+0x1e0>)
    bc9c:	881b      	ldrh	r3, [r3, #0]
    bc9e:	1c1a      	adds	r2, r3, #0
    bca0:	2307      	movs	r3, #7
    bca2:	4013      	ands	r3, r2
    bca4:	d103      	bne.n	bcae <ButtonSample+0xc2>
	power_pressed = 1;
    bca6:	4b4e      	ldr	r3, [pc, #312]	; (bde0 <ButtonSample+0x1f4>)
    bca8:	2201      	movs	r2, #1
    bcaa:	801a      	strh	r2, [r3, #0]
    bcac:	e002      	b.n	bcb4 <ButtonSample+0xc8>
	else
	power_pressed = 0;
    bcae:	4b4c      	ldr	r3, [pc, #304]	; (bde0 <ButtonSample+0x1f4>)
    bcb0:	2200      	movs	r2, #0
    bcb2:	801a      	strh	r2, [r3, #0]
	if (prevKey != power_pressed)
    bcb4:	4b4a      	ldr	r3, [pc, #296]	; (bde0 <ButtonSample+0x1f4>)
    bcb6:	881b      	ldrh	r3, [r3, #0]
    bcb8:	1dba      	adds	r2, r7, #6
    bcba:	2100      	movs	r1, #0
    bcbc:	5e52      	ldrsh	r2, [r2, r1]
    bcbe:	b21b      	sxth	r3, r3
    bcc0:	429a      	cmp	r2, r3
    bcc2:	d006      	beq.n	bcd2 <ButtonSample+0xe6>
	{
		keyChanged |= KEY_POWER;
    bcc4:	4b45      	ldr	r3, [pc, #276]	; (bddc <ButtonSample+0x1f0>)
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	2202      	movs	r2, #2
    bcca:	4313      	orrs	r3, r2
    bccc:	b2da      	uxtb	r2, r3
    bcce:	4b43      	ldr	r3, [pc, #268]	; (bddc <ButtonSample+0x1f0>)
    bcd0:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}
	
	prevKey = breakawayRing_pressed;
    bcd2:	1dbb      	adds	r3, r7, #6
    bcd4:	4a43      	ldr	r2, [pc, #268]	; (bde4 <ButtonSample+0x1f8>)
    bcd6:	8812      	ldrh	r2, [r2, #0]
    bcd8:	801a      	strh	r2, [r3, #0]
	if ((breakawayRing_hist & 7) == 0)
    bcda:	4b3d      	ldr	r3, [pc, #244]	; (bdd0 <ButtonSample+0x1e4>)
    bcdc:	881b      	ldrh	r3, [r3, #0]
    bcde:	1c1a      	adds	r2, r3, #0
    bce0:	2307      	movs	r3, #7
    bce2:	4013      	ands	r3, r2
    bce4:	d103      	bne.n	bcee <ButtonSample+0x102>
	breakawayRing_pressed = 1;
    bce6:	4b3f      	ldr	r3, [pc, #252]	; (bde4 <ButtonSample+0x1f8>)
    bce8:	2201      	movs	r2, #1
    bcea:	801a      	strh	r2, [r3, #0]
    bcec:	e002      	b.n	bcf4 <ButtonSample+0x108>
	else
	breakawayRing_pressed = 0;	
    bcee:	4b3d      	ldr	r3, [pc, #244]	; (bde4 <ButtonSample+0x1f8>)
    bcf0:	2200      	movs	r2, #0
    bcf2:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayRing_pressed)
    bcf4:	4b3b      	ldr	r3, [pc, #236]	; (bde4 <ButtonSample+0x1f8>)
    bcf6:	881b      	ldrh	r3, [r3, #0]
    bcf8:	1dba      	adds	r2, r7, #6
    bcfa:	2100      	movs	r1, #0
    bcfc:	5e52      	ldrsh	r2, [r2, r1]
    bcfe:	b21b      	sxth	r3, r3
    bd00:	429a      	cmp	r2, r3
    bd02:	d006      	beq.n	bd12 <ButtonSample+0x126>
	{
		keyChanged |= KEY_BREAKAWAYRING;
    bd04:	4b35      	ldr	r3, [pc, #212]	; (bddc <ButtonSample+0x1f0>)
    bd06:	781b      	ldrb	r3, [r3, #0]
    bd08:	2204      	movs	r2, #4
    bd0a:	4313      	orrs	r3, r2
    bd0c:	b2da      	uxtb	r2, r3
    bd0e:	4b33      	ldr	r3, [pc, #204]	; (bddc <ButtonSample+0x1f0>)
    bd10:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
	
	prevKey = breakawayTip_pressed;
    bd12:	1dbb      	adds	r3, r7, #6
    bd14:	4a34      	ldr	r2, [pc, #208]	; (bde8 <ButtonSample+0x1fc>)
    bd16:	8812      	ldrh	r2, [r2, #0]
    bd18:	801a      	strh	r2, [r3, #0]
	if ((breakawayTip_hist & 7) == 0)
    bd1a:	4b2e      	ldr	r3, [pc, #184]	; (bdd4 <ButtonSample+0x1e8>)
    bd1c:	881b      	ldrh	r3, [r3, #0]
    bd1e:	1c1a      	adds	r2, r3, #0
    bd20:	2307      	movs	r3, #7
    bd22:	4013      	ands	r3, r2
    bd24:	d103      	bne.n	bd2e <ButtonSample+0x142>
	breakawayTip_pressed = 1;
    bd26:	4b30      	ldr	r3, [pc, #192]	; (bde8 <ButtonSample+0x1fc>)
    bd28:	2201      	movs	r2, #1
    bd2a:	801a      	strh	r2, [r3, #0]
    bd2c:	e002      	b.n	bd34 <ButtonSample+0x148>
	else
	breakawayTip_pressed = 0;	
    bd2e:	4b2e      	ldr	r3, [pc, #184]	; (bde8 <ButtonSample+0x1fc>)
    bd30:	2200      	movs	r2, #0
    bd32:	801a      	strh	r2, [r3, #0]
	if (prevKey != breakawayTip_pressed)
    bd34:	4b2c      	ldr	r3, [pc, #176]	; (bde8 <ButtonSample+0x1fc>)
    bd36:	881b      	ldrh	r3, [r3, #0]
    bd38:	1dba      	adds	r2, r7, #6
    bd3a:	2100      	movs	r1, #0
    bd3c:	5e52      	ldrsh	r2, [r2, r1]
    bd3e:	b21b      	sxth	r3, r3
    bd40:	429a      	cmp	r2, r3
    bd42:	d006      	beq.n	bd52 <ButtonSample+0x166>
	{
		keyChanged |= KEY_BREAKAWAYTIP;
    bd44:	4b25      	ldr	r3, [pc, #148]	; (bddc <ButtonSample+0x1f0>)
    bd46:	781b      	ldrb	r3, [r3, #0]
    bd48:	2208      	movs	r2, #8
    bd4a:	4313      	orrs	r3, r2
    bd4c:	b2da      	uxtb	r2, r3
    bd4e:	4b23      	ldr	r3, [pc, #140]	; (bddc <ButtonSample+0x1f0>)
    bd50:	701a      	strb	r2, [r3, #0]
//		schedByte |= SCHEDBYTE_APPSCREENKEYCHANGE;
	}	
		
	flimitState = port_pin_get_input_level(FLIMIT);	
    bd52:	2015      	movs	r0, #21
    bd54:	4b1c      	ldr	r3, [pc, #112]	; (bdc8 <ButtonSample+0x1dc>)
    bd56:	4798      	blx	r3
    bd58:	1c03      	adds	r3, r0, #0
    bd5a:	1c1a      	adds	r2, r3, #0
    bd5c:	4b23      	ldr	r3, [pc, #140]	; (bdec <ButtonSample+0x200>)
    bd5e:	701a      	strb	r2, [r3, #0]
	hlimitState = port_pin_get_input_level(HLIMIT);		
    bd60:	2014      	movs	r0, #20
    bd62:	4b19      	ldr	r3, [pc, #100]	; (bdc8 <ButtonSample+0x1dc>)
    bd64:	4798      	blx	r3
    bd66:	1c03      	adds	r3, r0, #0
    bd68:	1c1a      	adds	r2, r3, #0
    bd6a:	4b21      	ldr	r3, [pc, #132]	; (bdf0 <ButtonSample+0x204>)
    bd6c:	701a      	strb	r2, [r3, #0]
//V01_11							deconfigure_wdt();
//V01_11							NVIC_SystemReset();					
						}		
				}	
*/				
				if (((keyChanged & KEY_POWER)!= 0)&&(power_pressed != 0))
    bd6e:	4b1b      	ldr	r3, [pc, #108]	; (bddc <ButtonSample+0x1f0>)
    bd70:	781b      	ldrb	r3, [r3, #0]
    bd72:	1c1a      	adds	r2, r3, #0
    bd74:	2302      	movs	r3, #2
    bd76:	4013      	ands	r3, r2
    bd78:	d021      	beq.n	bdbe <ButtonSample+0x1d2>
    bd7a:	4b19      	ldr	r3, [pc, #100]	; (bde0 <ButtonSample+0x1f4>)
    bd7c:	881b      	ldrh	r3, [r3, #0]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d01d      	beq.n	bdbe <ButtonSample+0x1d2>
				{
					if (poweredUp == 0)
    bd82:	4b1c      	ldr	r3, [pc, #112]	; (bdf4 <ButtonSample+0x208>)
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	2b00      	cmp	r3, #0
    bd88:	d10f      	bne.n	bdaa <ButtonSample+0x1be>
					{
						poweredUp = 1;
    bd8a:	4b1a      	ldr	r3, [pc, #104]	; (bdf4 <ButtonSample+0x208>)
    bd8c:	2201      	movs	r2, #1
    bd8e:	701a      	strb	r2, [r3, #0]
						MotorOff(1);  //added in v01_20			
    bd90:	2001      	movs	r0, #1
    bd92:	4b19      	ldr	r3, [pc, #100]	; (bdf8 <ButtonSample+0x20c>)
    bd94:	4798      	blx	r3
						brakeStatus.BrakeState &= ~(BRAKESTATE_INPUTVOLTAGEBAD&BRAKESTATE_LOWSUPERCAP); 			
    bd96:	4b19      	ldr	r3, [pc, #100]	; (bdfc <ButtonSample+0x210>)
    bd98:	791a      	ldrb	r2, [r3, #4]
    bd9a:	4b18      	ldr	r3, [pc, #96]	; (bdfc <ButtonSample+0x210>)
    bd9c:	711a      	strb	r2, [r3, #4]
						brakeState = BRAKESTATE_RESET;
    bd9e:	4b18      	ldr	r3, [pc, #96]	; (be00 <ButtonSample+0x214>)
    bda0:	2200      	movs	r2, #0
    bda2:	701a      	strb	r2, [r3, #0]
						BrakeBoardStateMachineTask();	
    bda4:	4b17      	ldr	r3, [pc, #92]	; (be04 <ButtonSample+0x218>)
    bda6:	4798      	blx	r3
    bda8:	e009      	b.n	bdbe <ButtonSample+0x1d2>
					}
					else
					{
							poweredUp = 0;
    bdaa:	4b12      	ldr	r3, [pc, #72]	; (bdf4 <ButtonSample+0x208>)
    bdac:	2200      	movs	r2, #0
    bdae:	701a      	strb	r2, [r3, #0]
							MotorOff(1);  //added in v01_20
    bdb0:	2001      	movs	r0, #1
    bdb2:	4b11      	ldr	r3, [pc, #68]	; (bdf8 <ButtonSample+0x20c>)
    bdb4:	4798      	blx	r3
							//V01_20 added below
//							port_pin_set_output_level(SUPERCAPEN,false);							
							deconfigure_wdt();
    bdb6:	4b14      	ldr	r3, [pc, #80]	; (be08 <ButtonSample+0x21c>)
    bdb8:	4798      	blx	r3
							NVIC_SystemReset();								
    bdba:	4b14      	ldr	r3, [pc, #80]	; (be0c <ButtonSample+0x220>)
    bdbc:	4798      	blx	r3
					}
				}	
	
#endif		
}
    bdbe:	46bd      	mov	sp, r7
    bdc0:	b003      	add	sp, #12
    bdc2:	bd90      	pop	{r4, r7, pc}
    bdc4:	200004d0 	.word	0x200004d0
    bdc8:	0000ba35 	.word	0x0000ba35
    bdcc:	200004d2 	.word	0x200004d2
    bdd0:	200004d4 	.word	0x200004d4
    bdd4:	200004d6 	.word	0x200004d6
    bdd8:	2000306e 	.word	0x2000306e
    bddc:	20003069 	.word	0x20003069
    bde0:	2000306c 	.word	0x2000306c
    bde4:	2000306a 	.word	0x2000306a
    bde8:	20003070 	.word	0x20003070
    bdec:	20003072 	.word	0x20003072
    bdf0:	20003068 	.word	0x20003068
    bdf4:	200036b5 	.word	0x200036b5
    bdf8:	00009ac9 	.word	0x00009ac9
    bdfc:	20003694 	.word	0x20003694
    be00:	20002ebf 	.word	0x20002ebf
    be04:	00006ec9 	.word	0x00006ec9
    be08:	0000ec29 	.word	0x0000ec29
    be0c:	0000b995 	.word	0x0000b995

0000be10 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    be10:	b580      	push	{r7, lr}
    be12:	af00      	add	r7, sp, #0
    be14:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    be18:	4b02      	ldr	r3, [pc, #8]	; (be24 <NVIC_SystemReset+0x14>)
    be1a:	4a03      	ldr	r2, [pc, #12]	; (be28 <NVIC_SystemReset+0x18>)
    be1c:	60da      	str	r2, [r3, #12]
    be1e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    be22:	e7fe      	b.n	be22 <NVIC_SystemReset+0x12>
    be24:	e000ed00 	.word	0xe000ed00
    be28:	05fa0004 	.word	0x05fa0004

0000be2c <GetAppInfo>:
// FUNCTION: GetAppInfo
//------------------------------------------------------------------------------
// This function parses app info starting at the given addr (failure returns 0)
//==============================================================================
uint8_t GetAppInfo(uint32_t startAddress, AppInfo* info)
{
    be2c:	b580      	push	{r7, lr}
    be2e:	b084      	sub	sp, #16
    be30:	af00      	add	r7, sp, #0
    be32:	6078      	str	r0, [r7, #4]
    be34:	6039      	str	r1, [r7, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
    be36:	1c3b      	adds	r3, r7, #0
    be38:	330e      	adds	r3, #14
    be3a:	2200      	movs	r2, #0
    be3c:	701a      	strb	r2, [r3, #0]
	
	success = 0;
    be3e:	1c3b      	adds	r3, r7, #0
    be40:	330f      	adds	r3, #15
    be42:	2200      	movs	r2, #0
    be44:	701a      	strb	r2, [r3, #0]
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    be46:	687b      	ldr	r3, [r7, #4]
    be48:	60bb      	str	r3, [r7, #8]
    be4a:	e03c      	b.n	bec6 <GetAppInfo+0x9a>
	{
		if (*((uint32_t*)addr) == APP_INFO_START)
    be4c:	68bb      	ldr	r3, [r7, #8]
    be4e:	681a      	ldr	r2, [r3, #0]
    be50:	4b24      	ldr	r3, [pc, #144]	; (bee4 <GetAppInfo+0xb8>)
    be52:	429a      	cmp	r2, r3
    be54:	d120      	bne.n	be98 <GetAppInfo+0x6c>
		{
			info->checksum = *(uint32_t*)(addr + 4);
    be56:	68bb      	ldr	r3, [r7, #8]
    be58:	3304      	adds	r3, #4
    be5a:	681a      	ldr	r2, [r3, #0]
    be5c:	683b      	ldr	r3, [r7, #0]
    be5e:	601a      	str	r2, [r3, #0]
			info->appLength = *(uint32_t*)(addr + 8);
    be60:	68bb      	ldr	r3, [r7, #8]
    be62:	3308      	adds	r3, #8
    be64:	681a      	ldr	r2, [r3, #0]
    be66:	683b      	ldr	r3, [r7, #0]
    be68:	605a      	str	r2, [r3, #4]
			info->version = *(uint32_t*)(addr + 12);
    be6a:	68bb      	ldr	r3, [r7, #8]
    be6c:	330c      	adds	r3, #12
    be6e:	681a      	ldr	r2, [r3, #0]
    be70:	683b      	ldr	r3, [r7, #0]
    be72:	60da      	str	r2, [r3, #12]
			info->filetype1 = *(uint32_t*)(addr + 32);
    be74:	68bb      	ldr	r3, [r7, #8]
    be76:	3320      	adds	r3, #32
    be78:	681a      	ldr	r2, [r3, #0]
    be7a:	683b      	ldr	r3, [r7, #0]
    be7c:	611a      	str	r2, [r3, #16]
			info->filetype2 = *(uint32_t*)(addr + 36);
    be7e:	68bb      	ldr	r3, [r7, #8]
    be80:	3324      	adds	r3, #36	; 0x24
    be82:	681a      	ldr	r2, [r3, #0]
    be84:	683b      	ldr	r3, [r7, #0]
    be86:	615a      	str	r2, [r3, #20]
			appInfoStarted = 1;
    be88:	1c3b      	adds	r3, r7, #0
    be8a:	330e      	adds	r3, #14
    be8c:	2201      	movs	r2, #1
    be8e:	701a      	strb	r2, [r3, #0]
			addr += 16;
    be90:	68bb      	ldr	r3, [r7, #8]
    be92:	3310      	adds	r3, #16
    be94:	60bb      	str	r3, [r7, #8]
    be96:	e013      	b.n	bec0 <GetAppInfo+0x94>
		}
		else if (appInfoStarted)
    be98:	1c3b      	adds	r3, r7, #0
    be9a:	330e      	adds	r3, #14
    be9c:	781b      	ldrb	r3, [r3, #0]
    be9e:	2b00      	cmp	r3, #0
    bea0:	d00e      	beq.n	bec0 <GetAppInfo+0x94>
		{
			if (*((uint32_t*)addr) == APP_INFO_END)
    bea2:	68bb      	ldr	r3, [r7, #8]
    bea4:	681a      	ldr	r2, [r3, #0]
    bea6:	4b10      	ldr	r3, [pc, #64]	; (bee8 <GetAppInfo+0xbc>)
    bea8:	429a      	cmp	r2, r3
    beaa:	d109      	bne.n	bec0 <GetAppInfo+0x94>
			{
				//save address to start checksum at
				info->checksumStartOffset = addr + 4 - startAddress;
    beac:	68ba      	ldr	r2, [r7, #8]
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	1ad3      	subs	r3, r2, r3
    beb2:	1d1a      	adds	r2, r3, #4
    beb4:	683b      	ldr	r3, [r7, #0]
    beb6:	609a      	str	r2, [r3, #8]
				
				//success
				success = 1;
    beb8:	1c3b      	adds	r3, r7, #0
    beba:	330f      	adds	r3, #15
    bebc:	2201      	movs	r2, #1
    bebe:	701a      	strb	r2, [r3, #0]
	uint8_t success;
	uint8_t appInfoStarted = 0;
	
	success = 0;
	//search starting at the given address for the markers that designate the app info section
	for (uint32_t addr = startAddress; addr < startAddress + MAX_SEARCH_OFFSET; addr += 4)
    bec0:	68bb      	ldr	r3, [r7, #8]
    bec2:	3304      	adds	r3, #4
    bec4:	60bb      	str	r3, [r7, #8]
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	2180      	movs	r1, #128	; 0x80
    beca:	0089      	lsls	r1, r1, #2
    becc:	185a      	adds	r2, r3, r1
    bece:	68bb      	ldr	r3, [r7, #8]
    bed0:	429a      	cmp	r2, r3
    bed2:	d8bb      	bhi.n	be4c <GetAppInfo+0x20>
		}
		//else we haven't found the app info start marker yet
	}
	
	//we didn't find both a start and end marker
	return success;
    bed4:	1c3b      	adds	r3, r7, #0
    bed6:	330f      	adds	r3, #15
    bed8:	781b      	ldrb	r3, [r3, #0]
} 
    beda:	1c18      	adds	r0, r3, #0
    bedc:	46bd      	mov	sp, r7
    bede:	b004      	add	sp, #16
    bee0:	bd80      	pop	{r7, pc}
    bee2:	46c0      	nop			; (mov r8, r8)
    bee4:	89abcdef 	.word	0x89abcdef
    bee8:	fedcba98 	.word	0xfedcba98

0000beec <CheckScratch>:
#if BRAKEBOARD 

void CheckScratch(void)
{
    beec:	b580      	push	{r7, lr}
    beee:	af00      	add	r7, sp, #0
	
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    bef0:	2384      	movs	r3, #132	; 0x84
    bef2:	029a      	lsls	r2, r3, #10
    bef4:	4b08      	ldr	r3, [pc, #32]	; (bf18 <CheckScratch+0x2c>)
    bef6:	1c10      	adds	r0, r2, #0
    bef8:	1c19      	adds	r1, r3, #0
    befa:	4b08      	ldr	r3, [pc, #32]	; (bf1c <CheckScratch+0x30>)
    befc:	4798      	blx	r3
    befe:	1c03      	adds	r3, r0, #0
    bf00:	2b00      	cmp	r3, #0
    bf02:	d006      	beq.n	bf12 <CheckScratch+0x26>
    bf04:	4b04      	ldr	r3, [pc, #16]	; (bf18 <CheckScratch+0x2c>)
    bf06:	691b      	ldr	r3, [r3, #16]
    bf08:	2b35      	cmp	r3, #53	; 0x35
    bf0a:	d102      	bne.n	bf12 <CheckScratch+0x26>
		{
			newRemoteDownloadNeeded = TRUE; 
    bf0c:	4b04      	ldr	r3, [pc, #16]	; (bf20 <CheckScratch+0x34>)
    bf0e:	2201      	movs	r2, #1
    bf10:	701a      	strb	r2, [r3, #0]
		}			
}
    bf12:	46bd      	mov	sp, r7
    bf14:	bd80      	pop	{r7, pc}
    bf16:	46c0      	nop			; (mov r8, r8)
    bf18:	2000308c 	.word	0x2000308c
    bf1c:	0000be2d 	.word	0x0000be2d
    bf20:	200004bb 	.word	0x200004bb

0000bf24 <DownloadDoneTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void DownloadDoneTask(void)
{
    bf24:	b580      	push	{r7, lr}
    bf26:	af00      	add	r7, sp, #0
	//	uint32_t version;
	//}AppInfo;
	//
	// extern AppInfo brakeApp;
	// extern AppInfo remoteApp;	
	if ((GetAppInfo(APP_SCRATCH_BASE, &newBrakeInfo)!= 0)&&(newBrakeInfo.filetype1==0x34))
    bf28:	2384      	movs	r3, #132	; 0x84
    bf2a:	029a      	lsls	r2, r3, #10
    bf2c:	4b14      	ldr	r3, [pc, #80]	; (bf80 <DownloadDoneTask+0x5c>)
    bf2e:	1c10      	adds	r0, r2, #0
    bf30:	1c19      	adds	r1, r3, #0
    bf32:	4b14      	ldr	r3, [pc, #80]	; (bf84 <DownloadDoneTask+0x60>)
    bf34:	4798      	blx	r3
    bf36:	1c03      	adds	r3, r0, #0
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d006      	beq.n	bf4a <DownloadDoneTask+0x26>
    bf3c:	4b10      	ldr	r3, [pc, #64]	; (bf80 <DownloadDoneTask+0x5c>)
    bf3e:	691b      	ldr	r3, [r3, #16]
    bf40:	2b34      	cmp	r3, #52	; 0x34
    bf42:	d102      	bne.n	bf4a <DownloadDoneTask+0x26>
	{
		//---------------BRAKE DOWNLOAD .... 
		// Force a reset. 
		//----------------------------------
		/* Reset module and boot into application */
		NVIC_SystemReset();
    bf44:	4b10      	ldr	r3, [pc, #64]	; (bf88 <DownloadDoneTask+0x64>)
    bf46:	4798      	blx	r3
    bf48:	e018      	b.n	bf7c <DownloadDoneTask+0x58>
	}	
	else
	{
		if ((GetAppInfo(APP_SCRATCH_BASE, &newRemoteInfo)!= 0)&&(newRemoteInfo.filetype1==0x35))
    bf4a:	2384      	movs	r3, #132	; 0x84
    bf4c:	029a      	lsls	r2, r3, #10
    bf4e:	4b0f      	ldr	r3, [pc, #60]	; (bf8c <DownloadDoneTask+0x68>)
    bf50:	1c10      	adds	r0, r2, #0
    bf52:	1c19      	adds	r1, r3, #0
    bf54:	4b0b      	ldr	r3, [pc, #44]	; (bf84 <DownloadDoneTask+0x60>)
    bf56:	4798      	blx	r3
    bf58:	1c03      	adds	r3, r0, #0
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d00e      	beq.n	bf7c <DownloadDoneTask+0x58>
    bf5e:	4b0b      	ldr	r3, [pc, #44]	; (bf8c <DownloadDoneTask+0x68>)
    bf60:	691b      	ldr	r3, [r3, #16]
    bf62:	2b35      	cmp	r3, #53	; 0x35
    bf64:	d10a      	bne.n	bf7c <DownloadDoneTask+0x58>
		{
			//---------------REMOTE DOWNLOAD .... 
			// Download to remote
			//----------------------------------
			newRemoteDownloadNeeded = TRUE; 
    bf66:	4b0a      	ldr	r3, [pc, #40]	; (bf90 <DownloadDoneTask+0x6c>)
    bf68:	2201      	movs	r2, #1
    bf6a:	701a      	strb	r2, [r3, #0]
			//01_10
			whichRadio = WHICHRADIO_LORA;
    bf6c:	4b09      	ldr	r3, [pc, #36]	; (bf94 <DownloadDoneTask+0x70>)
    bf6e:	2299      	movs	r2, #153	; 0x99
    bf70:	701a      	strb	r2, [r3, #0]
			switchToFSK = FALSE;
    bf72:	4b09      	ldr	r3, [pc, #36]	; (bf98 <DownloadDoneTask+0x74>)
    bf74:	2200      	movs	r2, #0
    bf76:	701a      	strb	r2, [r3, #0]
			CommInit();			
    bf78:	4b08      	ldr	r3, [pc, #32]	; (bf9c <DownloadDoneTask+0x78>)
    bf7a:	4798      	blx	r3
		}			
	}
 
}
    bf7c:	46bd      	mov	sp, r7
    bf7e:	bd80      	pop	{r7, pc}
    bf80:	20003074 	.word	0x20003074
    bf84:	0000be2d 	.word	0x0000be2d
    bf88:	0000be11 	.word	0x0000be11
    bf8c:	2000308c 	.word	0x2000308c
    bf90:	200004bb 	.word	0x200004bb
    bf94:	200036d2 	.word	0x200036d2
    bf98:	200004ba 	.word	0x200004ba
    bf9c:	0000f441 	.word	0x0000f441

0000bfa0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    bfa0:	b580      	push	{r7, lr}
    bfa2:	b084      	sub	sp, #16
    bfa4:	af00      	add	r7, sp, #0
    bfa6:	1c02      	adds	r2, r0, #0
    bfa8:	1dfb      	adds	r3, r7, #7
    bfaa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bfac:	1c3b      	adds	r3, r7, #0
    bfae:	330f      	adds	r3, #15
    bfb0:	1dfa      	adds	r2, r7, #7
    bfb2:	7812      	ldrb	r2, [r2, #0]
    bfb4:	09d2      	lsrs	r2, r2, #7
    bfb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bfb8:	1c3b      	adds	r3, r7, #0
    bfba:	330e      	adds	r3, #14
    bfbc:	1dfa      	adds	r2, r7, #7
    bfbe:	7812      	ldrb	r2, [r2, #0]
    bfc0:	0952      	lsrs	r2, r2, #5
    bfc2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bfc4:	4b0d      	ldr	r3, [pc, #52]	; (bffc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bfc6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    bfc8:	1c3b      	adds	r3, r7, #0
    bfca:	330f      	adds	r3, #15
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d10e      	bne.n	bff0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    bfd2:	1c3b      	adds	r3, r7, #0
    bfd4:	330f      	adds	r3, #15
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	009b      	lsls	r3, r3, #2
    bfda:	2210      	movs	r2, #16
    bfdc:	19d2      	adds	r2, r2, r7
    bfde:	18d3      	adds	r3, r2, r3
    bfe0:	3b08      	subs	r3, #8
    bfe2:	681a      	ldr	r2, [r3, #0]
    bfe4:	1c3b      	adds	r3, r7, #0
    bfe6:	330e      	adds	r3, #14
    bfe8:	781b      	ldrb	r3, [r3, #0]
    bfea:	01db      	lsls	r3, r3, #7
    bfec:	18d3      	adds	r3, r2, r3
    bfee:	e000      	b.n	bff2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    bff0:	2300      	movs	r3, #0
	}
}
    bff2:	1c18      	adds	r0, r3, #0
    bff4:	46bd      	mov	sp, r7
    bff6:	b004      	add	sp, #16
    bff8:	bd80      	pop	{r7, pc}
    bffa:	46c0      	nop			; (mov r8, r8)
    bffc:	41004400 	.word	0x41004400

0000c000 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    c000:	b580      	push	{r7, lr}
    c002:	b082      	sub	sp, #8
    c004:	af00      	add	r7, sp, #0
    c006:	1c02      	adds	r2, r0, #0
    c008:	1dfb      	adds	r3, r7, #7
    c00a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c00c:	1dfb      	adds	r3, r7, #7
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	1c18      	adds	r0, r3, #0
    c012:	4b03      	ldr	r3, [pc, #12]	; (c020 <port_get_group_from_gpio_pin+0x20>)
    c014:	4798      	blx	r3
    c016:	1c03      	adds	r3, r0, #0
}
    c018:	1c18      	adds	r0, r3, #0
    c01a:	46bd      	mov	sp, r7
    c01c:	b002      	add	sp, #8
    c01e:	bd80      	pop	{r7, pc}
    c020:	0000bfa1 	.word	0x0000bfa1

0000c024 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    c024:	b580      	push	{r7, lr}
    c026:	b082      	sub	sp, #8
    c028:	af00      	add	r7, sp, #0
    c02a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	2200      	movs	r2, #0
    c030:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	2201      	movs	r2, #1
    c036:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c038:	687b      	ldr	r3, [r7, #4]
    c03a:	2200      	movs	r2, #0
    c03c:	709a      	strb	r2, [r3, #2]
}
    c03e:	46bd      	mov	sp, r7
    c040:	b002      	add	sp, #8
    c042:	bd80      	pop	{r7, pc}

0000c044 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    c044:	b580      	push	{r7, lr}
    c046:	b084      	sub	sp, #16
    c048:	af00      	add	r7, sp, #0
    c04a:	1c0a      	adds	r2, r1, #0
    c04c:	1dfb      	adds	r3, r7, #7
    c04e:	1c01      	adds	r1, r0, #0
    c050:	7019      	strb	r1, [r3, #0]
    c052:	1dbb      	adds	r3, r7, #6
    c054:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c056:	1dfb      	adds	r3, r7, #7
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	1c18      	adds	r0, r3, #0
    c05c:	4b0d      	ldr	r3, [pc, #52]	; (c094 <port_pin_set_output_level+0x50>)
    c05e:	4798      	blx	r3
    c060:	1c03      	adds	r3, r0, #0
    c062:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c064:	1dfb      	adds	r3, r7, #7
    c066:	781a      	ldrb	r2, [r3, #0]
    c068:	231f      	movs	r3, #31
    c06a:	4013      	ands	r3, r2
    c06c:	2201      	movs	r2, #1
    c06e:	1c11      	adds	r1, r2, #0
    c070:	4099      	lsls	r1, r3
    c072:	1c0b      	adds	r3, r1, #0
    c074:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    c076:	1dbb      	adds	r3, r7, #6
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d003      	beq.n	c086 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    c07e:	68fb      	ldr	r3, [r7, #12]
    c080:	68ba      	ldr	r2, [r7, #8]
    c082:	619a      	str	r2, [r3, #24]
    c084:	e002      	b.n	c08c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c086:	68fb      	ldr	r3, [r7, #12]
    c088:	68ba      	ldr	r2, [r7, #8]
    c08a:	615a      	str	r2, [r3, #20]
	}
}
    c08c:	46bd      	mov	sp, r7
    c08e:	b004      	add	sp, #16
    c090:	bd80      	pop	{r7, pc}
    c092:	46c0      	nop			; (mov r8, r8)
    c094:	0000c001 	.word	0x0000c001

0000c098 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    c098:	b580      	push	{r7, lr}
    c09a:	b084      	sub	sp, #16
    c09c:	af00      	add	r7, sp, #0
    c09e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	681b      	ldr	r3, [r3, #0]
    c0a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
    c0a6:	68fb      	ldr	r3, [r7, #12]
    c0a8:	8a1b      	ldrh	r3, [r3, #16]
    c0aa:	b29b      	uxth	r3, r3
    c0ac:	1c1a      	adds	r2, r3, #0
    c0ae:	2380      	movs	r3, #128	; 0x80
    c0b0:	021b      	lsls	r3, r3, #8
    c0b2:	4013      	ands	r3, r2
    c0b4:	1e5a      	subs	r2, r3, #1
    c0b6:	4193      	sbcs	r3, r2
    c0b8:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    c0ba:	1c18      	adds	r0, r3, #0
    c0bc:	46bd      	mov	sp, r7
    c0be:	b004      	add	sp, #16
    c0c0:	bd80      	pop	{r7, pc}
    c0c2:	46c0      	nop			; (mov r8, r8)

0000c0c4 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    c0c4:	b580      	push	{r7, lr}
    c0c6:	b082      	sub	sp, #8
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    c0cc:	46c0      	nop			; (mov r8, r8)
    c0ce:	687b      	ldr	r3, [r7, #4]
    c0d0:	1c18      	adds	r0, r3, #0
    c0d2:	4b04      	ldr	r3, [pc, #16]	; (c0e4 <_i2c_master_wait_for_sync+0x20>)
    c0d4:	4798      	blx	r3
    c0d6:	1c03      	adds	r3, r0, #0
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d1f8      	bne.n	c0ce <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    c0dc:	46bd      	mov	sp, r7
    c0de:	b002      	add	sp, #8
    c0e0:	bd80      	pop	{r7, pc}
    c0e2:	46c0      	nop			; (mov r8, r8)
    c0e4:	0000c099 	.word	0x0000c099

0000c0e8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    c0e8:	b580      	push	{r7, lr}
    c0ea:	b082      	sub	sp, #8
    c0ec:	af00      	add	r7, sp, #0
    c0ee:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = 300;   //I2C_MASTER_BAUD_RATE_100KHZ;
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	2296      	movs	r2, #150	; 0x96
    c0f4:	0052      	lsls	r2, r2, #1
    c0f6:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	2200      	movs	r2, #0
    c0fc:	711a      	strb	r2, [r3, #4]
	config->run_in_standby   = false;
    c0fe:	687b      	ldr	r3, [r7, #4]
    c100:	2200      	movs	r2, #0
    c102:	741a      	strb	r2, [r3, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	2280      	movs	r2, #128	; 0x80
    c108:	0392      	lsls	r2, r2, #14
    c10a:	609a      	str	r2, [r3, #8]
	config->buffer_timeout   = 65535;
    c10c:	687b      	ldr	r3, [r7, #4]
    c10e:	2201      	movs	r2, #1
    c110:	4252      	negs	r2, r2
    c112:	81da      	strh	r2, [r3, #14]
	config->unknown_bus_state_timeout = 65535;
    c114:	687b      	ldr	r3, [r7, #4]
    c116:	2201      	movs	r2, #1
    c118:	4252      	negs	r2, r2
    c11a:	819a      	strh	r2, [r3, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    c11c:	687b      	ldr	r3, [r7, #4]
    c11e:	2200      	movs	r2, #0
    c120:	615a      	str	r2, [r3, #20]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    c122:	687b      	ldr	r3, [r7, #4]
    c124:	2200      	movs	r2, #0
    c126:	619a      	str	r2, [r3, #24]
	config->scl_low_timeout  = false;
    c128:	687b      	ldr	r3, [r7, #4]
    c12a:	2200      	movs	r2, #0
    c12c:	771a      	strb	r2, [r3, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c12e:	687b      	ldr	r3, [r7, #4]
    c130:	2200      	movs	r2, #0
    c132:	621a      	str	r2, [r3, #32]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
	config->master_scl_low_extend_timeout  = false;
#endif
}
    c134:	46bd      	mov	sp, r7
    c136:	b002      	add	sp, #8
    c138:	bd80      	pop	{r7, pc}
    c13a:	46c0      	nop			; (mov r8, r8)

0000c13c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    c13c:	b580      	push	{r7, lr}
    c13e:	b084      	sub	sp, #16
    c140:	af00      	add	r7, sp, #0
    c142:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c144:	687b      	ldr	r3, [r7, #4]
    c146:	681b      	ldr	r3, [r3, #0]
    c148:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    c14a:	2300      	movs	r3, #0
    c14c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    c14e:	687b      	ldr	r3, [r7, #4]
    c150:	1c18      	adds	r0, r3, #0
    c152:	4b10      	ldr	r3, [pc, #64]	; (c194 <i2c_master_enable+0x58>)
    c154:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c156:	68bb      	ldr	r3, [r7, #8]
    c158:	681b      	ldr	r3, [r3, #0]
    c15a:	2202      	movs	r2, #2
    c15c:	431a      	orrs	r2, r3
    c15e:	68bb      	ldr	r3, [r7, #8]
    c160:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c162:	e00c      	b.n	c17e <i2c_master_enable+0x42>
		timeout_counter++;
    c164:	68fb      	ldr	r3, [r7, #12]
    c166:	3301      	adds	r3, #1
    c168:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c16a:	687b      	ldr	r3, [r7, #4]
    c16c:	88db      	ldrh	r3, [r3, #6]
    c16e:	1c1a      	adds	r2, r3, #0
    c170:	68fb      	ldr	r3, [r7, #12]
    c172:	429a      	cmp	r2, r3
    c174:	d803      	bhi.n	c17e <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c176:	68bb      	ldr	r3, [r7, #8]
    c178:	2210      	movs	r2, #16
    c17a:	821a      	strh	r2, [r3, #16]
			/* Workaround #1 */
			return;
    c17c:	e006      	b.n	c18c <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c17e:	68bb      	ldr	r3, [r7, #8]
    c180:	8a1b      	ldrh	r3, [r3, #16]
    c182:	b29b      	uxth	r3, r3
    c184:	1c1a      	adds	r2, r3, #0
    c186:	2310      	movs	r3, #16
    c188:	4013      	ands	r3, r2
    c18a:	d0eb      	beq.n	c164 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    c18c:	46bd      	mov	sp, r7
    c18e:	b004      	add	sp, #16
    c190:	bd80      	pop	{r7, pc}
    c192:	46c0      	nop			; (mov r8, r8)
    c194:	0000c0c5 	.word	0x0000c0c5

0000c198 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    c198:	b580      	push	{r7, lr}
    c19a:	b084      	sub	sp, #16
    c19c:	af00      	add	r7, sp, #0
    c19e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c1a0:	687b      	ldr	r3, [r7, #4]
    c1a2:	681b      	ldr	r3, [r3, #0]
    c1a4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    c1a6:	687b      	ldr	r3, [r7, #4]
    c1a8:	1c18      	adds	r0, r3, #0
    c1aa:	4b06      	ldr	r3, [pc, #24]	; (c1c4 <i2c_master_disable+0x2c>)
    c1ac:	4798      	blx	r3

	/* Disable module. */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    c1ae:	68fb      	ldr	r3, [r7, #12]
    c1b0:	681b      	ldr	r3, [r3, #0]
    c1b2:	2202      	movs	r2, #2
    c1b4:	1c19      	adds	r1, r3, #0
    c1b6:	4391      	bics	r1, r2
    c1b8:	1c0a      	adds	r2, r1, #0
    c1ba:	68fb      	ldr	r3, [r7, #12]
    c1bc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Disable module interrupts */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif
}
    c1be:	46bd      	mov	sp, r7
    c1c0:	b004      	add	sp, #16
    c1c2:	bd80      	pop	{r7, pc}
    c1c4:	0000c0c5 	.word	0x0000c0c5

0000c1c8 <RecoverI2C>:
	
//---------------------LOCAL FUNCTION PROTOTYPES--------------------------   
void configure_i2c_master(void);

void RecoverI2C(void)
{
    c1c8:	b580      	push	{r7, lr}
    c1ca:	b082      	sub	sp, #8
    c1cc:	af00      	add	r7, sp, #0
	uint8_t i; 
	struct port_config pin_conf;
 
	i2c_master_disable(&i2c_master_instance);
    c1ce:	4b33      	ldr	r3, [pc, #204]	; (c29c <RecoverI2C+0xd4>)
    c1d0:	1c18      	adds	r0, r3, #0
    c1d2:	4b33      	ldr	r3, [pc, #204]	; (c2a0 <RecoverI2C+0xd8>)
    c1d4:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    c1d6:	1d3b      	adds	r3, r7, #4
    c1d8:	1c18      	adds	r0, r3, #0
    c1da:	4b32      	ldr	r3, [pc, #200]	; (c2a4 <RecoverI2C+0xdc>)
    c1dc:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c1de:	1d3b      	adds	r3, r7, #4
    c1e0:	2201      	movs	r2, #1
    c1e2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    c1e4:	1d3b      	adds	r3, r7, #4
    c1e6:	200c      	movs	r0, #12
    c1e8:	1c19      	adds	r1, r3, #0
    c1ea:	4b2f      	ldr	r3, [pc, #188]	; (c2a8 <RecoverI2C+0xe0>)
    c1ec:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    c1ee:	200c      	movs	r0, #12
    c1f0:	2100      	movs	r1, #0
    c1f2:	4b2e      	ldr	r3, [pc, #184]	; (c2ac <RecoverI2C+0xe4>)
    c1f4:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c1f6:	1d3b      	adds	r3, r7, #4
    c1f8:	2201      	movs	r2, #1
    c1fa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    c1fc:	1d3b      	adds	r3, r7, #4
    c1fe:	200d      	movs	r0, #13
    c200:	1c19      	adds	r1, r3, #0
    c202:	4b29      	ldr	r3, [pc, #164]	; (c2a8 <RecoverI2C+0xe0>)
    c204:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    c206:	200d      	movs	r0, #13
    c208:	2100      	movs	r1, #0
    c20a:	4b28      	ldr	r3, [pc, #160]	; (c2ac <RecoverI2C+0xe4>)
    c20c:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c20e:	1d3b      	adds	r3, r7, #4
    c210:	2201      	movs	r2, #1
    c212:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    c214:	1d3b      	adds	r3, r7, #4
    c216:	200d      	movs	r0, #13
    c218:	1c19      	adds	r1, r3, #0
    c21a:	4b23      	ldr	r3, [pc, #140]	; (c2a8 <RecoverI2C+0xe0>)
    c21c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    c21e:	200d      	movs	r0, #13
    c220:	2101      	movs	r1, #1
    c222:	4b22      	ldr	r3, [pc, #136]	; (c2ac <RecoverI2C+0xe4>)
    c224:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c226:	1d3b      	adds	r3, r7, #4
    c228:	2201      	movs	r2, #1
    c22a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    c22c:	1d3b      	adds	r3, r7, #4
    c22e:	200c      	movs	r0, #12
    c230:	1c19      	adds	r1, r3, #0
    c232:	4b1d      	ldr	r3, [pc, #116]	; (c2a8 <RecoverI2C+0xe0>)
    c234:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    c236:	200c      	movs	r0, #12
    c238:	2101      	movs	r1, #1
    c23a:	4b1c      	ldr	r3, [pc, #112]	; (c2ac <RecoverI2C+0xe4>)
    c23c:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    c23e:	1dfb      	adds	r3, r7, #7
    c240:	2200      	movs	r2, #0
    c242:	701a      	strb	r2, [r3, #0]
    c244:	e020      	b.n	c288 <RecoverI2C+0xc0>
	{
		HardDelay();
    c246:	4b1a      	ldr	r3, [pc, #104]	; (c2b0 <RecoverI2C+0xe8>)
    c248:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c24a:	1d3b      	adds	r3, r7, #4
    c24c:	2201      	movs	r2, #1
    c24e:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    c250:	1d3b      	adds	r3, r7, #4
    c252:	200d      	movs	r0, #13
    c254:	1c19      	adds	r1, r3, #0
    c256:	4b14      	ldr	r3, [pc, #80]	; (c2a8 <RecoverI2C+0xe0>)
    c258:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    c25a:	200d      	movs	r0, #13
    c25c:	2100      	movs	r1, #0
    c25e:	4b13      	ldr	r3, [pc, #76]	; (c2ac <RecoverI2C+0xe4>)
    c260:	4798      	blx	r3
		HardDelay();
    c262:	4b13      	ldr	r3, [pc, #76]	; (c2b0 <RecoverI2C+0xe8>)
    c264:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c266:	1d3b      	adds	r3, r7, #4
    c268:	2201      	movs	r2, #1
    c26a:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    c26c:	1d3b      	adds	r3, r7, #4
    c26e:	200d      	movs	r0, #13
    c270:	1c19      	adds	r1, r3, #0
    c272:	4b0d      	ldr	r3, [pc, #52]	; (c2a8 <RecoverI2C+0xe0>)
    c274:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    c276:	200d      	movs	r0, #13
    c278:	2101      	movs	r1, #1
    c27a:	4b0c      	ldr	r3, [pc, #48]	; (c2ac <RecoverI2C+0xe4>)
    c27c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    c27e:	1dfb      	adds	r3, r7, #7
    c280:	781a      	ldrb	r2, [r3, #0]
    c282:	1dfb      	adds	r3, r7, #7
    c284:	3201      	adds	r2, #1
    c286:	701a      	strb	r2, [r3, #0]
    c288:	1dfb      	adds	r3, r7, #7
    c28a:	781b      	ldrb	r3, [r3, #0]
    c28c:	2b0f      	cmp	r3, #15
    c28e:	d9da      	bls.n	c246 <RecoverI2C+0x7e>
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
		port_pin_set_config(PIN_PA13, &pin_conf);
		port_pin_set_output_level(PIN_PA13, TRUE);		
	}
	
	configure_i2c_master();
    c290:	4b08      	ldr	r3, [pc, #32]	; (c2b4 <RecoverI2C+0xec>)
    c292:	4798      	blx	r3
}
    c294:	46bd      	mov	sp, r7
    c296:	b002      	add	sp, #8
    c298:	bd80      	pop	{r7, pc}
    c29a:	46c0      	nop			; (mov r8, r8)
    c29c:	200030a8 	.word	0x200030a8
    c2a0:	0000c199 	.word	0x0000c199
    c2a4:	0000c025 	.word	0x0000c025
    c2a8:	00011cfd 	.word	0x00011cfd
    c2ac:	0000c045 	.word	0x0000c045
    c2b0:	0000ec65 	.word	0x0000ec65
    c2b4:	0000c839 	.word	0x0000c839

0000c2b8 <I2CAccelBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b084      	sub	sp, #16
    c2bc:	af00      	add	r7, sp, #0
    c2be:	6078      	str	r0, [r7, #4]
    c2c0:	1cfb      	adds	r3, r7, #3
    c2c2:	7019      	strb	r1, [r3, #0]
    c2c4:	1cbb      	adds	r3, r7, #2
    c2c6:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    c2c8:	1c3b      	adds	r3, r7, #0
    c2ca:	330f      	adds	r3, #15
    c2cc:	2200      	movs	r2, #0
    c2ce:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    c2d0:	4b52      	ldr	r3, [pc, #328]	; (c41c <I2CAccelBufferRead+0x164>)
    c2d2:	2219      	movs	r2, #25
    c2d4:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c2d6:	4b51      	ldr	r3, [pc, #324]	; (c41c <I2CAccelBufferRead+0x164>)
    c2d8:	4a51      	ldr	r2, [pc, #324]	; (c420 <I2CAccelBufferRead+0x168>)
    c2da:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c2dc:	4b4f      	ldr	r3, [pc, #316]	; (c41c <I2CAccelBufferRead+0x164>)
    c2de:	2200      	movs	r2, #0
    c2e0:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c2e2:	4b4e      	ldr	r3, [pc, #312]	; (c41c <I2CAccelBufferRead+0x164>)
    c2e4:	2200      	movs	r2, #0
    c2e6:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    c2e8:	4b4c      	ldr	r3, [pc, #304]	; (c41c <I2CAccelBufferRead+0x164>)
    c2ea:	2200      	movs	r2, #0
    c2ec:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    c2ee:	4b4b      	ldr	r3, [pc, #300]	; (c41c <I2CAccelBufferRead+0x164>)
    c2f0:	2201      	movs	r2, #1
    c2f2:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c2f4:	4b4a      	ldr	r3, [pc, #296]	; (c420 <I2CAccelBufferRead+0x168>)
    c2f6:	1cfa      	adds	r2, r7, #3
    c2f8:	7812      	ldrb	r2, [r2, #0]
    c2fa:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    c2fc:	1c3b      	adds	r3, r7, #0
    c2fe:	330e      	adds	r3, #14
    c300:	2200      	movs	r2, #0
    c302:	701a      	strb	r2, [r3, #0]
	done = 0; 
    c304:	1c3b      	adds	r3, r7, #0
    c306:	330d      	adds	r3, #13
    c308:	2200      	movs	r2, #0
    c30a:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c30c:	e020      	b.n	c350 <I2CAccelBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    c30e:	4a45      	ldr	r2, [pc, #276]	; (c424 <I2CAccelBufferRead+0x16c>)
    c310:	4b42      	ldr	r3, [pc, #264]	; (c41c <I2CAccelBufferRead+0x164>)
    c312:	1c10      	adds	r0, r2, #0
    c314:	1c19      	adds	r1, r3, #0
    c316:	4b44      	ldr	r3, [pc, #272]	; (c428 <I2CAccelBufferRead+0x170>)
    c318:	4798      	blx	r3
    c31a:	1c03      	adds	r3, r0, #0
    c31c:	2b00      	cmp	r3, #0
    c31e:	d10a      	bne.n	c336 <I2CAccelBufferRead+0x7e>
		{
			done = 1; 
    c320:	1c3b      	adds	r3, r7, #0
    c322:	330d      	adds	r3, #13
    c324:	2201      	movs	r2, #1
    c326:	701a      	strb	r2, [r3, #0]
    c328:	1c3b      	adds	r3, r7, #0
    c32a:	330e      	adds	r3, #14
    c32c:	1c3a      	adds	r2, r7, #0
    c32e:	320e      	adds	r2, #14
    c330:	7812      	ldrb	r2, [r2, #0]
    c332:	701a      	strb	r2, [r3, #0]
    c334:	e00c      	b.n	c350 <I2CAccelBufferRead+0x98>
		}
		else
		{
			tries++;
    c336:	1c3b      	adds	r3, r7, #0
    c338:	330e      	adds	r3, #14
    c33a:	781a      	ldrb	r2, [r3, #0]
    c33c:	1c3b      	adds	r3, r7, #0
    c33e:	330e      	adds	r3, #14
    c340:	3201      	adds	r2, #1
    c342:	701a      	strb	r2, [r3, #0]
    c344:	1c3b      	adds	r3, r7, #0
    c346:	330d      	adds	r3, #13
    c348:	1c3a      	adds	r2, r7, #0
    c34a:	320d      	adds	r2, #13
    c34c:	7812      	ldrb	r2, [r2, #0]
    c34e:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    c350:	1c3b      	adds	r3, r7, #0
    c352:	330d      	adds	r3, #13
    c354:	781b      	ldrb	r3, [r3, #0]
    c356:	2b00      	cmp	r3, #0
    c358:	d104      	bne.n	c364 <I2CAccelBufferRead+0xac>
    c35a:	1c3b      	adds	r3, r7, #0
    c35c:	330e      	adds	r3, #14
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	2bc7      	cmp	r3, #199	; 0xc7
    c362:	d9d4      	bls.n	c30e <I2CAccelBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c364:	1c3b      	adds	r3, r7, #0
    c366:	330d      	adds	r3, #13
    c368:	781b      	ldrb	r3, [r3, #0]
    c36a:	2b01      	cmp	r3, #1
    c36c:	d144      	bne.n	c3f8 <I2CAccelBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    c36e:	1cbb      	adds	r3, r7, #2
    c370:	781b      	ldrb	r3, [r3, #0]
    c372:	b29a      	uxth	r2, r3
    c374:	4b29      	ldr	r3, [pc, #164]	; (c41c <I2CAccelBufferRead+0x164>)
    c376:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    c378:	4b28      	ldr	r3, [pc, #160]	; (c41c <I2CAccelBufferRead+0x164>)
    c37a:	687a      	ldr	r2, [r7, #4]
    c37c:	605a      	str	r2, [r3, #4]
		tries = 0;
    c37e:	1c3b      	adds	r3, r7, #0
    c380:	330e      	adds	r3, #14
    c382:	2200      	movs	r2, #0
    c384:	701a      	strb	r2, [r3, #0]
		done = 0;
    c386:	1c3b      	adds	r3, r7, #0
    c388:	330d      	adds	r3, #13
    c38a:	2200      	movs	r2, #0
    c38c:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    c38e:	e020      	b.n	c3d2 <I2CAccelBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c390:	4a24      	ldr	r2, [pc, #144]	; (c424 <I2CAccelBufferRead+0x16c>)
    c392:	4b22      	ldr	r3, [pc, #136]	; (c41c <I2CAccelBufferRead+0x164>)
    c394:	1c10      	adds	r0, r2, #0
    c396:	1c19      	adds	r1, r3, #0
    c398:	4b24      	ldr	r3, [pc, #144]	; (c42c <I2CAccelBufferRead+0x174>)
    c39a:	4798      	blx	r3
    c39c:	1c03      	adds	r3, r0, #0
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d10a      	bne.n	c3b8 <I2CAccelBufferRead+0x100>
			{
				done = 1;
    c3a2:	1c3b      	adds	r3, r7, #0
    c3a4:	330d      	adds	r3, #13
    c3a6:	2201      	movs	r2, #1
    c3a8:	701a      	strb	r2, [r3, #0]
    c3aa:	1c3b      	adds	r3, r7, #0
    c3ac:	330e      	adds	r3, #14
    c3ae:	1c3a      	adds	r2, r7, #0
    c3b0:	320e      	adds	r2, #14
    c3b2:	7812      	ldrb	r2, [r2, #0]
    c3b4:	701a      	strb	r2, [r3, #0]
    c3b6:	e00c      	b.n	c3d2 <I2CAccelBufferRead+0x11a>
			}
			else
			{
				tries++;
    c3b8:	1c3b      	adds	r3, r7, #0
    c3ba:	330e      	adds	r3, #14
    c3bc:	781a      	ldrb	r2, [r3, #0]
    c3be:	1c3b      	adds	r3, r7, #0
    c3c0:	330e      	adds	r3, #14
    c3c2:	3201      	adds	r2, #1
    c3c4:	701a      	strb	r2, [r3, #0]
    c3c6:	1c3b      	adds	r3, r7, #0
    c3c8:	330d      	adds	r3, #13
    c3ca:	1c3a      	adds	r2, r7, #0
    c3cc:	320d      	adds	r2, #13
    c3ce:	7812      	ldrb	r2, [r2, #0]
    c3d0:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    c3d2:	1c3b      	adds	r3, r7, #0
    c3d4:	330d      	adds	r3, #13
    c3d6:	781b      	ldrb	r3, [r3, #0]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d104      	bne.n	c3e6 <I2CAccelBufferRead+0x12e>
    c3dc:	1c3b      	adds	r3, r7, #0
    c3de:	330e      	adds	r3, #14
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	2bc7      	cmp	r3, #199	; 0xc7
    c3e4:	d9d4      	bls.n	c390 <I2CAccelBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    c3e6:	1c3b      	adds	r3, r7, #0
    c3e8:	330d      	adds	r3, #13
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	2b01      	cmp	r3, #1
    c3ee:	d103      	bne.n	c3f8 <I2CAccelBufferRead+0x140>
		{
			status = 1; 
    c3f0:	1c3b      	adds	r3, r7, #0
    c3f2:	330f      	adds	r3, #15
    c3f4:	2201      	movs	r2, #1
    c3f6:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    c3f8:	1c3b      	adds	r3, r7, #0
    c3fa:	330f      	adds	r3, #15
    c3fc:	781b      	ldrb	r3, [r3, #0]
    c3fe:	2b00      	cmp	r3, #0
    c400:	d104      	bne.n	c40c <I2CAccelBufferRead+0x154>
	{
		i2cError = 1; 
    c402:	4b0b      	ldr	r3, [pc, #44]	; (c430 <I2CAccelBufferRead+0x178>)
    c404:	2201      	movs	r2, #1
    c406:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c408:	4b0a      	ldr	r3, [pc, #40]	; (c434 <I2CAccelBufferRead+0x17c>)
    c40a:	4798      	blx	r3
	}
	return status; 	
    c40c:	1c3b      	adds	r3, r7, #0
    c40e:	330f      	adds	r3, #15
    c410:	781b      	ldrb	r3, [r3, #0]
}; 
    c412:	1c18      	adds	r0, r3, #0
    c414:	46bd      	mov	sp, r7
    c416:	b004      	add	sp, #16
    c418:	bd80      	pop	{r7, pc}
    c41a:	46c0      	nop			; (mov r8, r8)
    c41c:	200030d0 	.word	0x200030d0
    c420:	200030dc 	.word	0x200030dc
    c424:	200030a8 	.word	0x200030a8
    c428:	0001243d 	.word	0x0001243d
    c42c:	000122f1 	.word	0x000122f1
    c430:	200030a4 	.word	0x200030a4
    c434:	0000c1c9 	.word	0x0000c1c9

0000c438 <I2CAccelBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CAccelBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    c438:	b580      	push	{r7, lr}
    c43a:	b086      	sub	sp, #24
    c43c:	af00      	add	r7, sp, #0
    c43e:	6078      	str	r0, [r7, #4]
    c440:	1cfb      	adds	r3, r7, #3
    c442:	7019      	strb	r1, [r3, #0]
    c444:	1cbb      	adds	r3, r7, #2
    c446:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    c448:	1c3b      	adds	r3, r7, #0
    c44a:	3317      	adds	r3, #23
    c44c:	2200      	movs	r2, #0
    c44e:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = 0x19;
    c454:	4b42      	ldr	r3, [pc, #264]	; (c560 <I2CAccelBufferWrite+0x128>)
    c456:	2219      	movs	r2, #25
    c458:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c45a:	4b41      	ldr	r3, [pc, #260]	; (c560 <I2CAccelBufferWrite+0x128>)
    c45c:	4a41      	ldr	r2, [pc, #260]	; (c564 <I2CAccelBufferWrite+0x12c>)
    c45e:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c460:	4b3f      	ldr	r3, [pc, #252]	; (c560 <I2CAccelBufferWrite+0x128>)
    c462:	2200      	movs	r2, #0
    c464:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c466:	4b3e      	ldr	r3, [pc, #248]	; (c560 <I2CAccelBufferWrite+0x128>)
    c468:	2200      	movs	r2, #0
    c46a:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    c46c:	4b3c      	ldr	r3, [pc, #240]	; (c560 <I2CAccelBufferWrite+0x128>)
    c46e:	2200      	movs	r2, #0
    c470:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    c472:	1cbb      	adds	r3, r7, #2
    c474:	781b      	ldrb	r3, [r3, #0]
    c476:	b29b      	uxth	r3, r3
    c478:	3301      	adds	r3, #1
    c47a:	b29a      	uxth	r2, r3
    c47c:	4b38      	ldr	r3, [pc, #224]	; (c560 <I2CAccelBufferWrite+0x128>)
    c47e:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c480:	4b38      	ldr	r3, [pc, #224]	; (c564 <I2CAccelBufferWrite+0x12c>)
    c482:	1cfa      	adds	r2, r7, #3
    c484:	7812      	ldrb	r2, [r2, #0]
    c486:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    c488:	1c3b      	adds	r3, r7, #0
    c48a:	330f      	adds	r3, #15
    c48c:	2200      	movs	r2, #0
    c48e:	701a      	strb	r2, [r3, #0]
    c490:	e010      	b.n	c4b4 <I2CAccelBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    c492:	1c3b      	adds	r3, r7, #0
    c494:	330f      	adds	r3, #15
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	1c5a      	adds	r2, r3, #1
    c49a:	693b      	ldr	r3, [r7, #16]
    c49c:	1c59      	adds	r1, r3, #1
    c49e:	6139      	str	r1, [r7, #16]
    c4a0:	7819      	ldrb	r1, [r3, #0]
    c4a2:	4b30      	ldr	r3, [pc, #192]	; (c564 <I2CAccelBufferWrite+0x12c>)
    c4a4:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    c4a6:	1c3b      	adds	r3, r7, #0
    c4a8:	330f      	adds	r3, #15
    c4aa:	781a      	ldrb	r2, [r3, #0]
    c4ac:	1c3b      	adds	r3, r7, #0
    c4ae:	330f      	adds	r3, #15
    c4b0:	3201      	adds	r2, #1
    c4b2:	701a      	strb	r2, [r3, #0]
    c4b4:	1c3a      	adds	r2, r7, #0
    c4b6:	320f      	adds	r2, #15
    c4b8:	1cbb      	adds	r3, r7, #2
    c4ba:	7812      	ldrb	r2, [r2, #0]
    c4bc:	781b      	ldrb	r3, [r3, #0]
    c4be:	429a      	cmp	r2, r3
    c4c0:	d3e7      	bcc.n	c492 <I2CAccelBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    c4c2:	1c3b      	adds	r3, r7, #0
    c4c4:	3316      	adds	r3, #22
    c4c6:	2200      	movs	r2, #0
    c4c8:	701a      	strb	r2, [r3, #0]
	done = 0;
    c4ca:	1c3b      	adds	r3, r7, #0
    c4cc:	3315      	adds	r3, #21
    c4ce:	2200      	movs	r2, #0
    c4d0:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c4d2:	e020      	b.n	c516 <I2CAccelBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c4d4:	4a24      	ldr	r2, [pc, #144]	; (c568 <I2CAccelBufferWrite+0x130>)
    c4d6:	4b22      	ldr	r3, [pc, #136]	; (c560 <I2CAccelBufferWrite+0x128>)
    c4d8:	1c10      	adds	r0, r2, #0
    c4da:	1c19      	adds	r1, r3, #0
    c4dc:	4b23      	ldr	r3, [pc, #140]	; (c56c <I2CAccelBufferWrite+0x134>)
    c4de:	4798      	blx	r3
    c4e0:	1c03      	adds	r3, r0, #0
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d10a      	bne.n	c4fc <I2CAccelBufferWrite+0xc4>
		{
			done = 1;
    c4e6:	1c3b      	adds	r3, r7, #0
    c4e8:	3315      	adds	r3, #21
    c4ea:	2201      	movs	r2, #1
    c4ec:	701a      	strb	r2, [r3, #0]
    c4ee:	1c3b      	adds	r3, r7, #0
    c4f0:	3316      	adds	r3, #22
    c4f2:	1c3a      	adds	r2, r7, #0
    c4f4:	3216      	adds	r2, #22
    c4f6:	7812      	ldrb	r2, [r2, #0]
    c4f8:	701a      	strb	r2, [r3, #0]
    c4fa:	e00c      	b.n	c516 <I2CAccelBufferWrite+0xde>
		}
		else
		{
			tries++;
    c4fc:	1c3b      	adds	r3, r7, #0
    c4fe:	3316      	adds	r3, #22
    c500:	781a      	ldrb	r2, [r3, #0]
    c502:	1c3b      	adds	r3, r7, #0
    c504:	3316      	adds	r3, #22
    c506:	3201      	adds	r2, #1
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	1c3b      	adds	r3, r7, #0
    c50c:	3315      	adds	r3, #21
    c50e:	1c3a      	adds	r2, r7, #0
    c510:	3215      	adds	r2, #21
    c512:	7812      	ldrb	r2, [r2, #0]
    c514:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    c516:	1c3b      	adds	r3, r7, #0
    c518:	3315      	adds	r3, #21
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	2b00      	cmp	r3, #0
    c51e:	d104      	bne.n	c52a <I2CAccelBufferWrite+0xf2>
    c520:	1c3b      	adds	r3, r7, #0
    c522:	3316      	adds	r3, #22
    c524:	781b      	ldrb	r3, [r3, #0]
    c526:	2bc7      	cmp	r3, #199	; 0xc7
    c528:	d9d4      	bls.n	c4d4 <I2CAccelBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c52a:	1c3b      	adds	r3, r7, #0
    c52c:	3315      	adds	r3, #21
    c52e:	781b      	ldrb	r3, [r3, #0]
    c530:	2b01      	cmp	r3, #1
    c532:	d103      	bne.n	c53c <I2CAccelBufferWrite+0x104>
	{
		status = 1;
    c534:	1c3b      	adds	r3, r7, #0
    c536:	3317      	adds	r3, #23
    c538:	2201      	movs	r2, #1
    c53a:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    c53c:	1c3b      	adds	r3, r7, #0
    c53e:	3317      	adds	r3, #23
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	2b00      	cmp	r3, #0
    c544:	d104      	bne.n	c550 <I2CAccelBufferWrite+0x118>
	{
		i2cError = 1; 
    c546:	4b0a      	ldr	r3, [pc, #40]	; (c570 <I2CAccelBufferWrite+0x138>)
    c548:	2201      	movs	r2, #1
    c54a:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c54c:	4b09      	ldr	r3, [pc, #36]	; (c574 <I2CAccelBufferWrite+0x13c>)
    c54e:	4798      	blx	r3
	}	
	return status;
    c550:	1c3b      	adds	r3, r7, #0
    c552:	3317      	adds	r3, #23
    c554:	781b      	ldrb	r3, [r3, #0]
};
    c556:	1c18      	adds	r0, r3, #0
    c558:	46bd      	mov	sp, r7
    c55a:	b006      	add	sp, #24
    c55c:	bd80      	pop	{r7, pc}
    c55e:	46c0      	nop			; (mov r8, r8)
    c560:	200030d0 	.word	0x200030d0
    c564:	200030dc 	.word	0x200030dc
    c568:	200030a8 	.word	0x200030a8
    c56c:	0001243d 	.word	0x0001243d
    c570:	200030a4 	.word	0x200030a4
    c574:	0000c1c9 	.word	0x0000c1c9

0000c578 <I2CEEPROMBufferRead>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferRead(uint8_t *buffer, uint8_t setting, uint8_t count)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b084      	sub	sp, #16
    c57c:	af00      	add	r7, sp, #0
    c57e:	6078      	str	r0, [r7, #4]
    c580:	1cfb      	adds	r3, r7, #3
    c582:	7019      	strb	r1, [r3, #0]
    c584:	1cbb      	adds	r3, r7, #2
    c586:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done; 
	
	status = 0; 
    c588:	1c3b      	adds	r3, r7, #0
    c58a:	330f      	adds	r3, #15
    c58c:	2200      	movs	r2, #0
    c58e:	701a      	strb	r2, [r3, #0]
	 
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    c590:	4b52      	ldr	r3, [pc, #328]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c592:	2250      	movs	r2, #80	; 0x50
    c594:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c596:	4b51      	ldr	r3, [pc, #324]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c598:	4a51      	ldr	r2, [pc, #324]	; (c6e0 <I2CEEPROMBufferRead+0x168>)
    c59a:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c59c:	4b4f      	ldr	r3, [pc, #316]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c59e:	2200      	movs	r2, #0
    c5a0:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c5a2:	4b4e      	ldr	r3, [pc, #312]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c5a4:	2200      	movs	r2, #0
    c5a6:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;	
    c5a8:	4b4c      	ldr	r3, [pc, #304]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c5aa:	2200      	movs	r2, #0
    c5ac:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = 1;
    c5ae:	4b4b      	ldr	r3, [pc, #300]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c5b0:	2201      	movs	r2, #1
    c5b2:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c5b4:	4b4a      	ldr	r3, [pc, #296]	; (c6e0 <I2CEEPROMBufferRead+0x168>)
    c5b6:	1cfa      	adds	r2, r7, #3
    c5b8:	7812      	ldrb	r2, [r2, #0]
    c5ba:	701a      	strb	r2, [r3, #0]
	tries = 0; 
    c5bc:	1c3b      	adds	r3, r7, #0
    c5be:	330e      	adds	r3, #14
    c5c0:	2200      	movs	r2, #0
    c5c2:	701a      	strb	r2, [r3, #0]
	done = 0; 
    c5c4:	1c3b      	adds	r3, r7, #0
    c5c6:	330d      	adds	r3, #13
    c5c8:	2200      	movs	r2, #0
    c5ca:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c5cc:	e020      	b.n	c610 <I2CEEPROMBufferRead+0x98>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK) 
    c5ce:	4a45      	ldr	r2, [pc, #276]	; (c6e4 <I2CEEPROMBufferRead+0x16c>)
    c5d0:	4b42      	ldr	r3, [pc, #264]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c5d2:	1c10      	adds	r0, r2, #0
    c5d4:	1c19      	adds	r1, r3, #0
    c5d6:	4b44      	ldr	r3, [pc, #272]	; (c6e8 <I2CEEPROMBufferRead+0x170>)
    c5d8:	4798      	blx	r3
    c5da:	1c03      	adds	r3, r0, #0
    c5dc:	2b00      	cmp	r3, #0
    c5de:	d10a      	bne.n	c5f6 <I2CEEPROMBufferRead+0x7e>
		{
			done = 1; 
    c5e0:	1c3b      	adds	r3, r7, #0
    c5e2:	330d      	adds	r3, #13
    c5e4:	2201      	movs	r2, #1
    c5e6:	701a      	strb	r2, [r3, #0]
    c5e8:	1c3b      	adds	r3, r7, #0
    c5ea:	330e      	adds	r3, #14
    c5ec:	1c3a      	adds	r2, r7, #0
    c5ee:	320e      	adds	r2, #14
    c5f0:	7812      	ldrb	r2, [r2, #0]
    c5f2:	701a      	strb	r2, [r3, #0]
    c5f4:	e00c      	b.n	c610 <I2CEEPROMBufferRead+0x98>
		}
		else
		{
			tries++;
    c5f6:	1c3b      	adds	r3, r7, #0
    c5f8:	330e      	adds	r3, #14
    c5fa:	781a      	ldrb	r2, [r3, #0]
    c5fc:	1c3b      	adds	r3, r7, #0
    c5fe:	330e      	adds	r3, #14
    c600:	3201      	adds	r2, #1
    c602:	701a      	strb	r2, [r3, #0]
    c604:	1c3b      	adds	r3, r7, #0
    c606:	330d      	adds	r3, #13
    c608:	1c3a      	adds	r2, r7, #0
    c60a:	320d      	adds	r2, #13
    c60c:	7812      	ldrb	r2, [r2, #0]
    c60e:	701a      	strb	r2, [r3, #0]
	myI2Cpacket.data_length = 1;
	
	write_buffer[0] = setting;
	tries = 0; 
	done = 0; 
	while ((done ==0) &&(tries<200))
    c610:	1c3b      	adds	r3, r7, #0
    c612:	330d      	adds	r3, #13
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	2b00      	cmp	r3, #0
    c618:	d104      	bne.n	c624 <I2CEEPROMBufferRead+0xac>
    c61a:	1c3b      	adds	r3, r7, #0
    c61c:	330e      	adds	r3, #14
    c61e:	781b      	ldrb	r3, [r3, #0]
    c620:	2bc7      	cmp	r3, #199	; 0xc7
    c622:	d9d4      	bls.n	c5ce <I2CEEPROMBufferRead+0x56>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c624:	1c3b      	adds	r3, r7, #0
    c626:	330d      	adds	r3, #13
    c628:	781b      	ldrb	r3, [r3, #0]
    c62a:	2b01      	cmp	r3, #1
    c62c:	d144      	bne.n	c6b8 <I2CEEPROMBufferRead+0x140>
	{
		//-------------------------------
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
    c62e:	1cbb      	adds	r3, r7, #2
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	b29a      	uxth	r2, r3
    c634:	4b29      	ldr	r3, [pc, #164]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c636:	805a      	strh	r2, [r3, #2]
		myI2Cpacket.data = buffer;
    c638:	4b28      	ldr	r3, [pc, #160]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c63a:	687a      	ldr	r2, [r7, #4]
    c63c:	605a      	str	r2, [r3, #4]
		tries = 0;
    c63e:	1c3b      	adds	r3, r7, #0
    c640:	330e      	adds	r3, #14
    c642:	2200      	movs	r2, #0
    c644:	701a      	strb	r2, [r3, #0]
		done = 0;
    c646:	1c3b      	adds	r3, r7, #0
    c648:	330d      	adds	r3, #13
    c64a:	2200      	movs	r2, #0
    c64c:	701a      	strb	r2, [r3, #0]
		while ((done ==0) &&(tries<200))
    c64e:	e020      	b.n	c692 <I2CEEPROMBufferRead+0x11a>
		{
			if (i2c_master_read_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c650:	4a24      	ldr	r2, [pc, #144]	; (c6e4 <I2CEEPROMBufferRead+0x16c>)
    c652:	4b22      	ldr	r3, [pc, #136]	; (c6dc <I2CEEPROMBufferRead+0x164>)
    c654:	1c10      	adds	r0, r2, #0
    c656:	1c19      	adds	r1, r3, #0
    c658:	4b24      	ldr	r3, [pc, #144]	; (c6ec <I2CEEPROMBufferRead+0x174>)
    c65a:	4798      	blx	r3
    c65c:	1c03      	adds	r3, r0, #0
    c65e:	2b00      	cmp	r3, #0
    c660:	d10a      	bne.n	c678 <I2CEEPROMBufferRead+0x100>
			{
				done = 1;
    c662:	1c3b      	adds	r3, r7, #0
    c664:	330d      	adds	r3, #13
    c666:	2201      	movs	r2, #1
    c668:	701a      	strb	r2, [r3, #0]
    c66a:	1c3b      	adds	r3, r7, #0
    c66c:	330e      	adds	r3, #14
    c66e:	1c3a      	adds	r2, r7, #0
    c670:	320e      	adds	r2, #14
    c672:	7812      	ldrb	r2, [r2, #0]
    c674:	701a      	strb	r2, [r3, #0]
    c676:	e00c      	b.n	c692 <I2CEEPROMBufferRead+0x11a>
			}
			else
			{
				tries++;
    c678:	1c3b      	adds	r3, r7, #0
    c67a:	330e      	adds	r3, #14
    c67c:	781a      	ldrb	r2, [r3, #0]
    c67e:	1c3b      	adds	r3, r7, #0
    c680:	330e      	adds	r3, #14
    c682:	3201      	adds	r2, #1
    c684:	701a      	strb	r2, [r3, #0]
    c686:	1c3b      	adds	r3, r7, #0
    c688:	330d      	adds	r3, #13
    c68a:	1c3a      	adds	r2, r7, #0
    c68c:	320d      	adds	r2, #13
    c68e:	7812      	ldrb	r2, [r2, #0]
    c690:	701a      	strb	r2, [r3, #0]
		// Read from slave until success. 
		myI2Cpacket.data_length = count;
		myI2Cpacket.data = buffer;
		tries = 0;
		done = 0;
		while ((done ==0) &&(tries<200))
    c692:	1c3b      	adds	r3, r7, #0
    c694:	330d      	adds	r3, #13
    c696:	781b      	ldrb	r3, [r3, #0]
    c698:	2b00      	cmp	r3, #0
    c69a:	d104      	bne.n	c6a6 <I2CEEPROMBufferRead+0x12e>
    c69c:	1c3b      	adds	r3, r7, #0
    c69e:	330e      	adds	r3, #14
    c6a0:	781b      	ldrb	r3, [r3, #0]
    c6a2:	2bc7      	cmp	r3, #199	; 0xc7
    c6a4:	d9d4      	bls.n	c650 <I2CEEPROMBufferRead+0xd8>
			else
			{
				tries++;
			}
		}
		if (done == 1)
    c6a6:	1c3b      	adds	r3, r7, #0
    c6a8:	330d      	adds	r3, #13
    c6aa:	781b      	ldrb	r3, [r3, #0]
    c6ac:	2b01      	cmp	r3, #1
    c6ae:	d103      	bne.n	c6b8 <I2CEEPROMBufferRead+0x140>
		{
			status = 1; 
    c6b0:	1c3b      	adds	r3, r7, #0
    c6b2:	330f      	adds	r3, #15
    c6b4:	2201      	movs	r2, #1
    c6b6:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status == 0)
    c6b8:	1c3b      	adds	r3, r7, #0
    c6ba:	330f      	adds	r3, #15
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d104      	bne.n	c6cc <I2CEEPROMBufferRead+0x154>
	{
		i2cError = 1; 
    c6c2:	4b0b      	ldr	r3, [pc, #44]	; (c6f0 <I2CEEPROMBufferRead+0x178>)
    c6c4:	2201      	movs	r2, #1
    c6c6:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c6c8:	4b0a      	ldr	r3, [pc, #40]	; (c6f4 <I2CEEPROMBufferRead+0x17c>)
    c6ca:	4798      	blx	r3
	}
	return status; 	
    c6cc:	1c3b      	adds	r3, r7, #0
    c6ce:	330f      	adds	r3, #15
    c6d0:	781b      	ldrb	r3, [r3, #0]
}; 
    c6d2:	1c18      	adds	r0, r3, #0
    c6d4:	46bd      	mov	sp, r7
    c6d6:	b004      	add	sp, #16
    c6d8:	bd80      	pop	{r7, pc}
    c6da:	46c0      	nop			; (mov r8, r8)
    c6dc:	200030d0 	.word	0x200030d0
    c6e0:	200030dc 	.word	0x200030dc
    c6e4:	200030a8 	.word	0x200030a8
    c6e8:	0001243d 	.word	0x0001243d
    c6ec:	000122f1 	.word	0x000122f1
    c6f0:	200030a4 	.word	0x200030a4
    c6f4:	0000c1c9 	.word	0x0000c1c9

0000c6f8 <I2CEEPROMBufferWrite>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t I2CEEPROMBufferWrite(uint8_t *buffer,uint8_t setting, uint8_t count)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b086      	sub	sp, #24
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	6078      	str	r0, [r7, #4]
    c700:	1cfb      	adds	r3, r7, #3
    c702:	7019      	strb	r1, [r3, #0]
    c704:	1cbb      	adds	r3, r7, #2
    c706:	701a      	strb	r2, [r3, #0]
	uint8_t status,tries,done,*ptr,i;
	
	status = 0;
    c708:	1c3b      	adds	r3, r7, #0
    c70a:	3317      	adds	r3, #23
    c70c:	2200      	movs	r2, #0
    c70e:	701a      	strb	r2, [r3, #0]
	ptr = buffer; 
    c710:	687b      	ldr	r3, [r7, #4]
    c712:	613b      	str	r3, [r7, #16]
	//---------------------------------------
	// Set-up packet for transmitting
	//---------------------------------------
	myI2Cpacket.address = SLAVE_ADDRESS;
    c714:	4b42      	ldr	r3, [pc, #264]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c716:	2250      	movs	r2, #80	; 0x50
    c718:	801a      	strh	r2, [r3, #0]
	myI2Cpacket.data = write_buffer;
    c71a:	4b41      	ldr	r3, [pc, #260]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c71c:	4a41      	ldr	r2, [pc, #260]	; (c824 <I2CEEPROMBufferWrite+0x12c>)
    c71e:	605a      	str	r2, [r3, #4]
	myI2Cpacket.ten_bit_address = false;
    c720:	4b3f      	ldr	r3, [pc, #252]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c722:	2200      	movs	r2, #0
    c724:	721a      	strb	r2, [r3, #8]
	myI2Cpacket.high_speed = false;
    c726:	4b3e      	ldr	r3, [pc, #248]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c728:	2200      	movs	r2, #0
    c72a:	725a      	strb	r2, [r3, #9]
	myI2Cpacket.hs_master_code  = 0x00;
    c72c:	4b3c      	ldr	r3, [pc, #240]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c72e:	2200      	movs	r2, #0
    c730:	729a      	strb	r2, [r3, #10]
	myI2Cpacket.data_length = count+1;
    c732:	1cbb      	adds	r3, r7, #2
    c734:	781b      	ldrb	r3, [r3, #0]
    c736:	b29b      	uxth	r3, r3
    c738:	3301      	adds	r3, #1
    c73a:	b29a      	uxth	r2, r3
    c73c:	4b38      	ldr	r3, [pc, #224]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c73e:	805a      	strh	r2, [r3, #2]
	
	write_buffer[0] = setting;
    c740:	4b38      	ldr	r3, [pc, #224]	; (c824 <I2CEEPROMBufferWrite+0x12c>)
    c742:	1cfa      	adds	r2, r7, #3
    c744:	7812      	ldrb	r2, [r2, #0]
    c746:	701a      	strb	r2, [r3, #0]
	for (i=0;i<count;i++)
    c748:	1c3b      	adds	r3, r7, #0
    c74a:	330f      	adds	r3, #15
    c74c:	2200      	movs	r2, #0
    c74e:	701a      	strb	r2, [r3, #0]
    c750:	e010      	b.n	c774 <I2CEEPROMBufferWrite+0x7c>
	{
		write_buffer[1+i] = *ptr++;
    c752:	1c3b      	adds	r3, r7, #0
    c754:	330f      	adds	r3, #15
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	1c5a      	adds	r2, r3, #1
    c75a:	693b      	ldr	r3, [r7, #16]
    c75c:	1c59      	adds	r1, r3, #1
    c75e:	6139      	str	r1, [r7, #16]
    c760:	7819      	ldrb	r1, [r3, #0]
    c762:	4b30      	ldr	r3, [pc, #192]	; (c824 <I2CEEPROMBufferWrite+0x12c>)
    c764:	5499      	strb	r1, [r3, r2]
	myI2Cpacket.high_speed = false;
	myI2Cpacket.hs_master_code  = 0x00;
	myI2Cpacket.data_length = count+1;
	
	write_buffer[0] = setting;
	for (i=0;i<count;i++)
    c766:	1c3b      	adds	r3, r7, #0
    c768:	330f      	adds	r3, #15
    c76a:	781a      	ldrb	r2, [r3, #0]
    c76c:	1c3b      	adds	r3, r7, #0
    c76e:	330f      	adds	r3, #15
    c770:	3201      	adds	r2, #1
    c772:	701a      	strb	r2, [r3, #0]
    c774:	1c3a      	adds	r2, r7, #0
    c776:	320f      	adds	r2, #15
    c778:	1cbb      	adds	r3, r7, #2
    c77a:	7812      	ldrb	r2, [r2, #0]
    c77c:	781b      	ldrb	r3, [r3, #0]
    c77e:	429a      	cmp	r2, r3
    c780:	d3e7      	bcc.n	c752 <I2CEEPROMBufferWrite+0x5a>
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
    c782:	1c3b      	adds	r3, r7, #0
    c784:	3316      	adds	r3, #22
    c786:	2200      	movs	r2, #0
    c788:	701a      	strb	r2, [r3, #0]
	done = 0;
    c78a:	1c3b      	adds	r3, r7, #0
    c78c:	3315      	adds	r3, #21
    c78e:	2200      	movs	r2, #0
    c790:	701a      	strb	r2, [r3, #0]
	while ((done ==0) &&(tries<200))
    c792:	e020      	b.n	c7d6 <I2CEEPROMBufferWrite+0xde>
	{
		if (i2c_master_write_packet_wait(&i2c_master_instance, &myI2Cpacket)==STATUS_OK)
    c794:	4a24      	ldr	r2, [pc, #144]	; (c828 <I2CEEPROMBufferWrite+0x130>)
    c796:	4b22      	ldr	r3, [pc, #136]	; (c820 <I2CEEPROMBufferWrite+0x128>)
    c798:	1c10      	adds	r0, r2, #0
    c79a:	1c19      	adds	r1, r3, #0
    c79c:	4b23      	ldr	r3, [pc, #140]	; (c82c <I2CEEPROMBufferWrite+0x134>)
    c79e:	4798      	blx	r3
    c7a0:	1c03      	adds	r3, r0, #0
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d10a      	bne.n	c7bc <I2CEEPROMBufferWrite+0xc4>
		{
			done = 1;
    c7a6:	1c3b      	adds	r3, r7, #0
    c7a8:	3315      	adds	r3, #21
    c7aa:	2201      	movs	r2, #1
    c7ac:	701a      	strb	r2, [r3, #0]
    c7ae:	1c3b      	adds	r3, r7, #0
    c7b0:	3316      	adds	r3, #22
    c7b2:	1c3a      	adds	r2, r7, #0
    c7b4:	3216      	adds	r2, #22
    c7b6:	7812      	ldrb	r2, [r2, #0]
    c7b8:	701a      	strb	r2, [r3, #0]
    c7ba:	e00c      	b.n	c7d6 <I2CEEPROMBufferWrite+0xde>
		}
		else
		{
			tries++;
    c7bc:	1c3b      	adds	r3, r7, #0
    c7be:	3316      	adds	r3, #22
    c7c0:	781a      	ldrb	r2, [r3, #0]
    c7c2:	1c3b      	adds	r3, r7, #0
    c7c4:	3316      	adds	r3, #22
    c7c6:	3201      	adds	r2, #1
    c7c8:	701a      	strb	r2, [r3, #0]
    c7ca:	1c3b      	adds	r3, r7, #0
    c7cc:	3315      	adds	r3, #21
    c7ce:	1c3a      	adds	r2, r7, #0
    c7d0:	3215      	adds	r2, #21
    c7d2:	7812      	ldrb	r2, [r2, #0]
    c7d4:	701a      	strb	r2, [r3, #0]
	{
		write_buffer[1+i] = *ptr++;
	}
	tries = 0;
	done = 0;
	while ((done ==0) &&(tries<200))
    c7d6:	1c3b      	adds	r3, r7, #0
    c7d8:	3315      	adds	r3, #21
    c7da:	781b      	ldrb	r3, [r3, #0]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d104      	bne.n	c7ea <I2CEEPROMBufferWrite+0xf2>
    c7e0:	1c3b      	adds	r3, r7, #0
    c7e2:	3316      	adds	r3, #22
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	2bc7      	cmp	r3, #199	; 0xc7
    c7e8:	d9d4      	bls.n	c794 <I2CEEPROMBufferWrite+0x9c>
		else
		{
			tries++;
		}
	}
	if (done == 1)
    c7ea:	1c3b      	adds	r3, r7, #0
    c7ec:	3315      	adds	r3, #21
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	2b01      	cmp	r3, #1
    c7f2:	d103      	bne.n	c7fc <I2CEEPROMBufferWrite+0x104>
	{
		status = 1;
    c7f4:	1c3b      	adds	r3, r7, #0
    c7f6:	3317      	adds	r3, #23
    c7f8:	2201      	movs	r2, #1
    c7fa:	701a      	strb	r2, [r3, #0]
	}
	if (status == 0)
    c7fc:	1c3b      	adds	r3, r7, #0
    c7fe:	3317      	adds	r3, #23
    c800:	781b      	ldrb	r3, [r3, #0]
    c802:	2b00      	cmp	r3, #0
    c804:	d104      	bne.n	c810 <I2CEEPROMBufferWrite+0x118>
	{
		i2cError = 1; 
    c806:	4b0a      	ldr	r3, [pc, #40]	; (c830 <I2CEEPROMBufferWrite+0x138>)
    c808:	2201      	movs	r2, #1
    c80a:	701a      	strb	r2, [r3, #0]
		RecoverI2C();
    c80c:	4b09      	ldr	r3, [pc, #36]	; (c834 <I2CEEPROMBufferWrite+0x13c>)
    c80e:	4798      	blx	r3
	}	
	return status;
    c810:	1c3b      	adds	r3, r7, #0
    c812:	3317      	adds	r3, #23
    c814:	781b      	ldrb	r3, [r3, #0]
};
    c816:	1c18      	adds	r0, r3, #0
    c818:	46bd      	mov	sp, r7
    c81a:	b006      	add	sp, #24
    c81c:	bd80      	pop	{r7, pc}
    c81e:	46c0      	nop			; (mov r8, r8)
    c820:	200030d0 	.word	0x200030d0
    c824:	200030dc 	.word	0x200030dc
    c828:	200030a8 	.word	0x200030a8
    c82c:	0001243d 	.word	0x0001243d
    c830:	200030a4 	.word	0x200030a4
    c834:	0000c1c9 	.word	0x0000c1c9

0000c838 <configure_i2c_master>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_i2c_master(void)
{
    c838:	b580      	push	{r7, lr}
    c83a:	b08a      	sub	sp, #40	; 0x28
    c83c:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	
	//---------------------------------------
	// Initialize config structure and software module.
	//---------------------------------------	
	i2c_master_get_config_defaults(&config_i2c_master);
    c83e:	1d3b      	adds	r3, r7, #4
    c840:	1c18      	adds	r0, r3, #0
    c842:	4b0d      	ldr	r3, [pc, #52]	; (c878 <configure_i2c_master+0x40>)
    c844:	4798      	blx	r3
	
	//--------------------------------------- 
	// Change buffer timeout to something longer. 
	//---------------------------------------
	config_i2c_master.buffer_timeout = 100;  //was 10000
    c846:	1d3b      	adds	r3, r7, #4
    c848:	2264      	movs	r2, #100	; 0x64
    c84a:	81da      	strh	r2, [r3, #14]
	
	//---------------------------------------
	//  
	//---------------------------------------
	config_i2c_master.pinmux_pad0 = EXT2_I2C_SERCOM_PINMUX_PAD0;
    c84c:	1d3b      	adds	r3, r7, #4
    c84e:	4a0b      	ldr	r2, [pc, #44]	; (c87c <configure_i2c_master+0x44>)
    c850:	615a      	str	r2, [r3, #20]
	config_i2c_master.pinmux_pad1 = EXT2_I2C_SERCOM_PINMUX_PAD1;
    c852:	1d3b      	adds	r3, r7, #4
    c854:	4a0a      	ldr	r2, [pc, #40]	; (c880 <configure_i2c_master+0x48>)
    c856:	619a      	str	r2, [r3, #24]
	//---------------------------------------
	// Initialize and enable device with config
	//---------------------------------------	
	i2c_master_init(&i2c_master_instance, SERCOM4, &config_i2c_master);
    c858:	490a      	ldr	r1, [pc, #40]	; (c884 <configure_i2c_master+0x4c>)
    c85a:	4a0b      	ldr	r2, [pc, #44]	; (c888 <configure_i2c_master+0x50>)
    c85c:	1d3b      	adds	r3, r7, #4
    c85e:	1c08      	adds	r0, r1, #0
    c860:	1c11      	adds	r1, r2, #0
    c862:	1c1a      	adds	r2, r3, #0
    c864:	4b09      	ldr	r3, [pc, #36]	; (c88c <configure_i2c_master+0x54>)
    c866:	4798      	blx	r3
	//---------------------------------------
	//
	//---------------------------------------
	i2c_master_enable(&i2c_master_instance);
    c868:	4b06      	ldr	r3, [pc, #24]	; (c884 <configure_i2c_master+0x4c>)
    c86a:	1c18      	adds	r0, r3, #0
    c86c:	4b08      	ldr	r3, [pc, #32]	; (c890 <configure_i2c_master+0x58>)
    c86e:	4798      	blx	r3
	 
}
    c870:	46bd      	mov	sp, r7
    c872:	b00a      	add	sp, #40	; 0x28
    c874:	bd80      	pop	{r7, pc}
    c876:	46c0      	nop			; (mov r8, r8)
    c878:	0000c0e9 	.word	0x0000c0e9
    c87c:	000c0003 	.word	0x000c0003
    c880:	000d0003 	.word	0x000d0003
    c884:	200030a8 	.word	0x200030a8
    c888:	42001800 	.word	0x42001800
    c88c:	0001200d 	.word	0x0001200d
    c890:	0000c13d 	.word	0x0000c13d

0000c894 <I2Cmain>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void I2Cmain(void)
{
    c894:	b580      	push	{r7, lr}
    c896:	b084      	sub	sp, #16
    c898:	af00      	add	r7, sp, #0
	uint8_t testBuffer[10],n; 
	//---------------------------------------
	// Configure device and enable.
	//---------------------------------------
	configure_i2c_master();
    c89a:	4b66      	ldr	r3, [pc, #408]	; (ca34 <I2Cmain+0x1a0>)
    c89c:	4798      	blx	r3
	//--------------------------------------
	// read in the EEPROM header and see if CREED 
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,0);	
    c89e:	2003      	movs	r0, #3
    c8a0:	2102      	movs	r1, #2
    c8a2:	2200      	movs	r2, #0
    c8a4:	4b64      	ldr	r3, [pc, #400]	; (ca38 <I2Cmain+0x1a4>)
    c8a6:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    c8a8:	2003      	movs	r0, #3
    c8aa:	2101      	movs	r1, #1
    c8ac:	2200      	movs	r2, #0
    c8ae:	4b62      	ldr	r3, [pc, #392]	; (ca38 <I2Cmain+0x1a4>)
    c8b0:	4798      	blx	r3
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
    c8b2:	2003      	movs	r0, #3
    c8b4:	2104      	movs	r1, #4
    c8b6:	2200      	movs	r2, #0
    c8b8:	4b5f      	ldr	r3, [pc, #380]	; (ca38 <I2Cmain+0x1a4>)
    c8ba:	4798      	blx	r3
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    c8bc:	1c3b      	adds	r3, r7, #0
    c8be:	330f      	adds	r3, #15
    c8c0:	2200      	movs	r2, #0
    c8c2:	701a      	strb	r2, [r3, #0]
    c8c4:	e00c      	b.n	c8e0 <I2Cmain+0x4c>
	{
		eepromManDevSerial[n] = 0; 
    c8c6:	1c3b      	adds	r3, r7, #0
    c8c8:	330f      	adds	r3, #15
    c8ca:	781b      	ldrb	r3, [r3, #0]
    c8cc:	4a5b      	ldr	r2, [pc, #364]	; (ca3c <I2Cmain+0x1a8>)
    c8ce:	2100      	movs	r1, #0
    c8d0:	54d1      	strb	r1, [r2, r3]
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
	AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,0);		
	//------------------------------
	// READ in the manufacturer code and device code 
	// and serial number 32 bits. 
	for (n=0;n<6;n++)
    c8d2:	1c3b      	adds	r3, r7, #0
    c8d4:	330f      	adds	r3, #15
    c8d6:	781a      	ldrb	r2, [r3, #0]
    c8d8:	1c3b      	adds	r3, r7, #0
    c8da:	330f      	adds	r3, #15
    c8dc:	3201      	adds	r2, #1
    c8de:	701a      	strb	r2, [r3, #0]
    c8e0:	1c3b      	adds	r3, r7, #0
    c8e2:	330f      	adds	r3, #15
    c8e4:	781b      	ldrb	r3, [r3, #0]
    c8e6:	2b05      	cmp	r3, #5
    c8e8:	d9ed      	bls.n	c8c6 <I2Cmain+0x32>
	{
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
    c8ea:	4b54      	ldr	r3, [pc, #336]	; (ca3c <I2Cmain+0x1a8>)
    c8ec:	1c18      	adds	r0, r3, #0
    c8ee:	21fa      	movs	r1, #250	; 0xfa
    c8f0:	2206      	movs	r2, #6
    c8f2:	4b53      	ldr	r3, [pc, #332]	; (ca40 <I2Cmain+0x1ac>)
    c8f4:	4798      	blx	r3
    c8f6:	1c03      	adds	r3, r0, #0
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d020      	beq.n	c93e <I2Cmain+0xaa>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
    c8fc:	2003      	movs	r0, #3
    c8fe:	2101      	movs	r1, #1
    c900:	2201      	movs	r2, #1
    c902:	4b4d      	ldr	r3, [pc, #308]	; (ca38 <I2Cmain+0x1a4>)
    c904:	4798      	blx	r3
		for (n=0;n<6;n++)
    c906:	1c3b      	adds	r3, r7, #0
    c908:	330f      	adds	r3, #15
    c90a:	2200      	movs	r2, #0
    c90c:	701a      	strb	r2, [r3, #0]
    c90e:	e011      	b.n	c934 <I2Cmain+0xa0>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
    c910:	1c3b      	adds	r3, r7, #0
    c912:	330f      	adds	r3, #15
    c914:	781b      	ldrb	r3, [r3, #0]
    c916:	1c3a      	adds	r2, r7, #0
    c918:	320f      	adds	r2, #15
    c91a:	7812      	ldrb	r2, [r2, #0]
    c91c:	4947      	ldr	r1, [pc, #284]	; (ca3c <I2Cmain+0x1a8>)
    c91e:	5c8a      	ldrb	r2, [r1, r2]
    c920:	4948      	ldr	r1, [pc, #288]	; (ca44 <I2Cmain+0x1b0>)
    c922:	18cb      	adds	r3, r1, r3
    c924:	72da      	strb	r2, [r3, #11]
		eepromManDevSerial[n] = 0; 
	}
	if (I2CEEPROMBufferRead(eepromManDevSerial,0xFA,6)!= 0)
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);	
		for (n=0;n<6;n++)
    c926:	1c3b      	adds	r3, r7, #0
    c928:	330f      	adds	r3, #15
    c92a:	781a      	ldrb	r2, [r3, #0]
    c92c:	1c3b      	adds	r3, r7, #0
    c92e:	330f      	adds	r3, #15
    c930:	3201      	adds	r2, #1
    c932:	701a      	strb	r2, [r3, #0]
    c934:	1c3b      	adds	r3, r7, #0
    c936:	330f      	adds	r3, #15
    c938:	781b      	ldrb	r3, [r3, #0]
    c93a:	2b05      	cmp	r3, #5
    c93c:	d9e8      	bls.n	c910 <I2Cmain+0x7c>
		{
			table0.Item.EepromManDevSerial[n] =eepromManDevSerial[n] ;
		}	
	}
	if (I2CEEPROMBufferRead(testBuffer,TableHeader1_Setting,10)!= 0)
    c93e:	1d3b      	adds	r3, r7, #4
    c940:	1c18      	adds	r0, r3, #0
    c942:	2102      	movs	r1, #2
    c944:	220a      	movs	r2, #10
    c946:	4b3e      	ldr	r3, [pc, #248]	; (ca40 <I2Cmain+0x1ac>)
    c948:	4798      	blx	r3
    c94a:	1c03      	adds	r3, r0, #0
    c94c:	2b00      	cmp	r3, #0
    c94e:	d03f      	beq.n	c9d0 <I2Cmain+0x13c>
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    c950:	2003      	movs	r0, #3
    c952:	2101      	movs	r1, #1
    c954:	2201      	movs	r2, #1
    c956:	4b38      	ldr	r3, [pc, #224]	; (ca38 <I2Cmain+0x1a4>)
    c958:	4798      	blx	r3
		//------------------------
		// check the HEADER
		if ((testBuffer[0] == 'C')&&(testBuffer[1] == 'R')&&(testBuffer[2]=='E'))
    c95a:	1d3b      	adds	r3, r7, #4
    c95c:	781b      	ldrb	r3, [r3, #0]
    c95e:	2b43      	cmp	r3, #67	; 0x43
    c960:	d112      	bne.n	c988 <I2Cmain+0xf4>
    c962:	1d3b      	adds	r3, r7, #4
    c964:	785b      	ldrb	r3, [r3, #1]
    c966:	2b52      	cmp	r3, #82	; 0x52
    c968:	d10e      	bne.n	c988 <I2Cmain+0xf4>
    c96a:	1d3b      	adds	r3, r7, #4
    c96c:	789b      	ldrb	r3, [r3, #2]
    c96e:	2b45      	cmp	r3, #69	; 0x45
    c970:	d10a      	bne.n	c988 <I2Cmain+0xf4>
		{
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);	
    c972:	2003      	movs	r0, #3
    c974:	2102      	movs	r1, #2
    c976:	2201      	movs	r2, #1
    c978:	4b2f      	ldr	r3, [pc, #188]	; (ca38 <I2Cmain+0x1a4>)
    c97a:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_GOODHEADER,1);	
    c97c:	2003      	movs	r0, #3
    c97e:	2104      	movs	r1, #4
    c980:	2201      	movs	r2, #1
    c982:	4b2d      	ldr	r3, [pc, #180]	; (ca38 <I2Cmain+0x1a4>)
    c984:	4798      	blx	r3
    c986:	e051      	b.n	ca2c <I2Cmain+0x198>
		}	
		else
		{
			//-----------------------
			// do a simple test. 
			testBuffer[0] = 0x46;
    c988:	1d3b      	adds	r3, r7, #4
    c98a:	2246      	movs	r2, #70	; 0x46
    c98c:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0x72; 
    c98e:	1d3b      	adds	r3, r7, #4
    c990:	2272      	movs	r2, #114	; 0x72
    c992:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    c994:	1d3b      	adds	r3, r7, #4
    c996:	1c18      	adds	r0, r3, #0
    c998:	2100      	movs	r1, #0
    c99a:	2202      	movs	r2, #2
    c99c:	4b2a      	ldr	r3, [pc, #168]	; (ca48 <I2Cmain+0x1b4>)
    c99e:	4798      	blx	r3
    c9a0:	1c03      	adds	r3, r0, #0
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d042      	beq.n	ca2c <I2Cmain+0x198>
			{
				testBuffer[0] = 0;
    c9a6:	1d3b      	adds	r3, r7, #4
    c9a8:	2200      	movs	r2, #0
    c9aa:	701a      	strb	r2, [r3, #0]
				testBuffer[1] = 0; 
    c9ac:	1d3b      	adds	r3, r7, #4
    c9ae:	2200      	movs	r2, #0
    c9b0:	705a      	strb	r2, [r3, #1]
				if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    c9b2:	1d3b      	adds	r3, r7, #4
    c9b4:	1c18      	adds	r0, r3, #0
    c9b6:	2100      	movs	r1, #0
    c9b8:	2202      	movs	r2, #2
    c9ba:	4b21      	ldr	r3, [pc, #132]	; (ca40 <I2Cmain+0x1ac>)
    c9bc:	4798      	blx	r3
    c9be:	1c03      	adds	r3, r0, #0
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d033      	beq.n	ca2c <I2Cmain+0x198>
				{
					//-----------------------------
					// it worked!!
					AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);					
    c9c4:	2003      	movs	r0, #3
    c9c6:	2102      	movs	r1, #2
    c9c8:	2201      	movs	r2, #1
    c9ca:	4b1b      	ldr	r3, [pc, #108]	; (ca38 <I2Cmain+0x1a4>)
    c9cc:	4798      	blx	r3
    c9ce:	e02d      	b.n	ca2c <I2Cmain+0x198>
			}			
		}
	}
	else
	{
		AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,1);
    c9d0:	2003      	movs	r0, #3
    c9d2:	2101      	movs	r1, #1
    c9d4:	2201      	movs	r2, #1
    c9d6:	4b18      	ldr	r3, [pc, #96]	; (ca38 <I2Cmain+0x1a4>)
    c9d8:	4798      	blx	r3
		//-----------------------
		// do a simple test. 
		testBuffer[0] = 0x46;
    c9da:	1d3b      	adds	r3, r7, #4
    c9dc:	2246      	movs	r2, #70	; 0x46
    c9de:	701a      	strb	r2, [r3, #0]
		testBuffer[1] = 0x72; 
    c9e0:	1d3b      	adds	r3, r7, #4
    c9e2:	2272      	movs	r2, #114	; 0x72
    c9e4:	705a      	strb	r2, [r3, #1]
		if (I2CEEPROMBufferWrite(testBuffer,0, 2)!= 0) 
    c9e6:	1d3b      	adds	r3, r7, #4
    c9e8:	1c18      	adds	r0, r3, #0
    c9ea:	2100      	movs	r1, #0
    c9ec:	2202      	movs	r2, #2
    c9ee:	4b16      	ldr	r3, [pc, #88]	; (ca48 <I2Cmain+0x1b4>)
    c9f0:	4798      	blx	r3
    c9f2:	1c03      	adds	r3, r0, #0
    c9f4:	2b00      	cmp	r3, #0
    c9f6:	d014      	beq.n	ca22 <I2Cmain+0x18e>
		{
			testBuffer[0] = 0;
    c9f8:	1d3b      	adds	r3, r7, #4
    c9fa:	2200      	movs	r2, #0
    c9fc:	701a      	strb	r2, [r3, #0]
			testBuffer[1] = 0; 
    c9fe:	1d3b      	adds	r3, r7, #4
    ca00:	2200      	movs	r2, #0
    ca02:	705a      	strb	r2, [r3, #1]
			if (I2CEEPROMBufferRead(testBuffer,0, 2)!= 0)
    ca04:	1d3b      	adds	r3, r7, #4
    ca06:	1c18      	adds	r0, r3, #0
    ca08:	2100      	movs	r1, #0
    ca0a:	2202      	movs	r2, #2
    ca0c:	4b0c      	ldr	r3, [pc, #48]	; (ca40 <I2Cmain+0x1ac>)
    ca0e:	4798      	blx	r3
    ca10:	1c03      	adds	r3, r0, #0
    ca12:	2b00      	cmp	r3, #0
    ca14:	d00a      	beq.n	ca2c <I2Cmain+0x198>
			{
				//-----------------------------
				// it worked!!
				AppStatusUpdate(INTERFACE_EEPROM,STATUS_RW,1);
    ca16:	2003      	movs	r0, #3
    ca18:	2102      	movs	r1, #2
    ca1a:	2201      	movs	r2, #1
    ca1c:	4b06      	ldr	r3, [pc, #24]	; (ca38 <I2Cmain+0x1a4>)
    ca1e:	4798      	blx	r3
    ca20:	e004      	b.n	ca2c <I2Cmain+0x198>
			}
		}
		else
		{
			//----------real failure	
			AppStatusUpdate(INTERFACE_EEPROM,STATUS_PARTTALKING,0);
    ca22:	2003      	movs	r0, #3
    ca24:	2101      	movs	r1, #1
    ca26:	2200      	movs	r2, #0
    ca28:	4b03      	ldr	r3, [pc, #12]	; (ca38 <I2Cmain+0x1a4>)
    ca2a:	4798      	blx	r3
		}
	}
}
    ca2c:	46bd      	mov	sp, r7
    ca2e:	b004      	add	sp, #16
    ca30:	bd80      	pop	{r7, pc}
    ca32:	46c0      	nop			; (mov r8, r8)
    ca34:	0000c839 	.word	0x0000c839
    ca38:	0000f579 	.word	0x0000f579
    ca3c:	200030c8 	.word	0x200030c8
    ca40:	0000c579 	.word	0x0000c579
    ca44:	20002fb8 	.word	0x20002fb8
    ca48:	0000c6f9 	.word	0x0000c6f9

0000ca4c <ProgramMemory>:
 */
extern unsigned char programming; 
void deconfigure_wdt(void);
void configure_wdt(void);
void ProgramMemory(uint32_t address, uint8_t *buffer, uint16_t len)
{
    ca4c:	b580      	push	{r7, lr}
    ca4e:	b086      	sub	sp, #24
    ca50:	af00      	add	r7, sp, #0
    ca52:	60f8      	str	r0, [r7, #12]
    ca54:	60b9      	str	r1, [r7, #8]
    ca56:	1dbb      	adds	r3, r7, #6
    ca58:	801a      	strh	r2, [r3, #0]
	 programming = 1; 
    ca5a:	4b2b      	ldr	r3, [pc, #172]	; (cb08 <ProgramMemory+0xbc>)
    ca5c:	2201      	movs	r2, #1
    ca5e:	701a      	strb	r2, [r3, #0]
	 deconfigure_wdt();
    ca60:	4b2a      	ldr	r3, [pc, #168]	; (cb0c <ProgramMemory+0xc0>)
    ca62:	4798      	blx	r3
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
    ca64:	1dbb      	adds	r3, r7, #6
    ca66:	881b      	ldrh	r3, [r3, #0]
    ca68:	2b40      	cmp	r3, #64	; 0x40
    ca6a:	d933      	bls.n	cad4 <ProgramMemory+0x88>
		uint32_t offset = 0;
    ca6c:	2300      	movs	r3, #0
    ca6e:	617b      	str	r3, [r7, #20]

		while (len > NVMCTRL_PAGE_SIZE) {
    ca70:	e01b      	b.n	caaa <ProgramMemory+0x5e>
			/* Check if it is first page of a row */
			if ((address & 0xFF) == 0) {
    ca72:	68fa      	ldr	r2, [r7, #12]
    ca74:	23ff      	movs	r3, #255	; 0xff
    ca76:	4013      	ands	r3, r2
    ca78:	d103      	bne.n	ca82 <ProgramMemory+0x36>
				/* Erase row */
				nvm_erase_row(address);
    ca7a:	68fb      	ldr	r3, [r7, #12]
    ca7c:	1c18      	adds	r0, r3, #0
    ca7e:	4b24      	ldr	r3, [pc, #144]	; (cb10 <ProgramMemory+0xc4>)
    ca80:	4798      	blx	r3
			}
			/* Write one page data to flash */
			nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    ca82:	68ba      	ldr	r2, [r7, #8]
    ca84:	697b      	ldr	r3, [r7, #20]
    ca86:	18d3      	adds	r3, r2, r3
    ca88:	68fa      	ldr	r2, [r7, #12]
    ca8a:	1c10      	adds	r0, r2, #0
    ca8c:	1c19      	adds	r1, r3, #0
    ca8e:	2240      	movs	r2, #64	; 0x40
    ca90:	4b20      	ldr	r3, [pc, #128]	; (cb14 <ProgramMemory+0xc8>)
    ca92:	4798      	blx	r3
			/* Increment the address to be programmed */
			address += NVMCTRL_PAGE_SIZE;
    ca94:	68fb      	ldr	r3, [r7, #12]
    ca96:	3340      	adds	r3, #64	; 0x40
    ca98:	60fb      	str	r3, [r7, #12]
			/* Increment the offset of the buffer containing data */
			offset += NVMCTRL_PAGE_SIZE;
    ca9a:	697b      	ldr	r3, [r7, #20]
    ca9c:	3340      	adds	r3, #64	; 0x40
    ca9e:	617b      	str	r3, [r7, #20]
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
    caa0:	1dbb      	adds	r3, r7, #6
    caa2:	1dba      	adds	r2, r7, #6
    caa4:	8812      	ldrh	r2, [r2, #0]
    caa6:	3a40      	subs	r2, #64	; 0x40
    caa8:	801a      	strh	r2, [r3, #0]
	 deconfigure_wdt();
	/* Check if length is greater than Flash page size */
	if (len > NVMCTRL_PAGE_SIZE) {
		uint32_t offset = 0;

		while (len > NVMCTRL_PAGE_SIZE) {
    caaa:	1dbb      	adds	r3, r7, #6
    caac:	881b      	ldrh	r3, [r3, #0]
    caae:	2b40      	cmp	r3, #64	; 0x40
    cab0:	d8df      	bhi.n	ca72 <ProgramMemory+0x26>
			/* Decrement the length */
			len -= NVMCTRL_PAGE_SIZE;
		}

		/* Check if there is data remaining to be programmed */
		if (len > 0) {
    cab2:	1dbb      	adds	r3, r7, #6
    cab4:	881b      	ldrh	r3, [r3, #0]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d00b      	beq.n	cad2 <ProgramMemory+0x86>
			/* Write the data to flash */
			nvm_write_buffer(address, buffer + offset, len);
    caba:	68ba      	ldr	r2, [r7, #8]
    cabc:	697b      	ldr	r3, [r7, #20]
    cabe:	18d2      	adds	r2, r2, r3
    cac0:	68f9      	ldr	r1, [r7, #12]
    cac2:	1dbb      	adds	r3, r7, #6
    cac4:	881b      	ldrh	r3, [r3, #0]
    cac6:	1c08      	adds	r0, r1, #0
    cac8:	1c11      	adds	r1, r2, #0
    caca:	1c1a      	adds	r2, r3, #0
    cacc:	4b11      	ldr	r3, [pc, #68]	; (cb14 <ProgramMemory+0xc8>)
    cace:	4798      	blx	r3
    cad0:	e011      	b.n	caf6 <ProgramMemory+0xaa>
    cad2:	e010      	b.n	caf6 <ProgramMemory+0xaa>
		}
	} else {
		/* Check if it is first page of a row) */
		if ((address & 0xFF) == 0) {
    cad4:	68fa      	ldr	r2, [r7, #12]
    cad6:	23ff      	movs	r3, #255	; 0xff
    cad8:	4013      	ands	r3, r2
    cada:	d103      	bne.n	cae4 <ProgramMemory+0x98>
			/* Erase row */
			nvm_erase_row(address);
    cadc:	68fb      	ldr	r3, [r7, #12]
    cade:	1c18      	adds	r0, r3, #0
    cae0:	4b0b      	ldr	r3, [pc, #44]	; (cb10 <ProgramMemory+0xc4>)
    cae2:	4798      	blx	r3
		}
		/* Write the data to flash */
		nvm_write_buffer(address, buffer, len);
    cae4:	68f9      	ldr	r1, [r7, #12]
    cae6:	68ba      	ldr	r2, [r7, #8]
    cae8:	1dbb      	adds	r3, r7, #6
    caea:	881b      	ldrh	r3, [r3, #0]
    caec:	1c08      	adds	r0, r1, #0
    caee:	1c11      	adds	r1, r2, #0
    caf0:	1c1a      	adds	r2, r3, #0
    caf2:	4b08      	ldr	r3, [pc, #32]	; (cb14 <ProgramMemory+0xc8>)
    caf4:	4798      	blx	r3
	}
	programming = 0; 
    caf6:	4b04      	ldr	r3, [pc, #16]	; (cb08 <ProgramMemory+0xbc>)
    caf8:	2200      	movs	r2, #0
    cafa:	701a      	strb	r2, [r3, #0]
	configure_wdt(); 
    cafc:	4b06      	ldr	r3, [pc, #24]	; (cb18 <ProgramMemory+0xcc>)
    cafe:	4798      	blx	r3
}
    cb00:	46bd      	mov	sp, r7
    cb02:	b006      	add	sp, #24
    cb04:	bd80      	pop	{r7, pc}
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	200004da 	.word	0x200004da
    cb0c:	0000ec29 	.word	0x0000ec29
    cb10:	000046e1 	.word	0x000046e1
    cb14:	000045a5 	.word	0x000045a5
    cb18:	0000ebf1 	.word	0x0000ebf1

0000cb1c <PressureUpdateTask>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 	
void PressureUpdateTask(void)
{
    cb1c:	b580      	push	{r7, lr}
    cb1e:	b084      	sub	sp, #16
    cb20:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    cb22:	1c3b      	adds	r3, r7, #0
    cb24:	330f      	adds	r3, #15
    cb26:	2200      	movs	r2, #0
    cb28:	701a      	strb	r2, [r3, #0]
    cb2a:	e0b7      	b.n	cc9c <PressureUpdateTask+0x180>
	{
		if ((sensorDynamic[i].Change != 0)&&(sensorDynamic[i].ID[0]!= 0))
    cb2c:	1c3b      	adds	r3, r7, #0
    cb2e:	330f      	adds	r3, #15
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	4a5f      	ldr	r2, [pc, #380]	; (ccb0 <PressureUpdateTask+0x194>)
    cb34:	011b      	lsls	r3, r3, #4
    cb36:	18d3      	adds	r3, r2, r3
    cb38:	791b      	ldrb	r3, [r3, #4]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d100      	bne.n	cb40 <PressureUpdateTask+0x24>
    cb3e:	e0a6      	b.n	cc8e <PressureUpdateTask+0x172>
    cb40:	1c3b      	adds	r3, r7, #0
    cb42:	330f      	adds	r3, #15
    cb44:	781a      	ldrb	r2, [r3, #0]
    cb46:	4b5a      	ldr	r3, [pc, #360]	; (ccb0 <PressureUpdateTask+0x194>)
    cb48:	0112      	lsls	r2, r2, #4
    cb4a:	5cd3      	ldrb	r3, [r2, r3]
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d100      	bne.n	cb52 <PressureUpdateTask+0x36>
    cb50:	e09d      	b.n	cc8e <PressureUpdateTask+0x172>
		{
			//------------------------
			// following for testing status values on the sensors
			// usually this should be disabled. 
			if (nextTestStatus >= MAX_TEST_STATUS)
    cb52:	4b58      	ldr	r3, [pc, #352]	; (ccb4 <PressureUpdateTask+0x198>)
    cb54:	781b      	ldrb	r3, [r3, #0]
    cb56:	2b07      	cmp	r3, #7
    cb58:	d902      	bls.n	cb60 <PressureUpdateTask+0x44>
			{
				nextTestStatus= 0; 
    cb5a:	4b56      	ldr	r3, [pc, #344]	; (ccb4 <PressureUpdateTask+0x198>)
    cb5c:	2200      	movs	r2, #0
    cb5e:	701a      	strb	r2, [r3, #0]
			}			
			testStatus[nextTestStatus++] = sensorDynamic[i].LastPacket[5]; 
    cb60:	4b54      	ldr	r3, [pc, #336]	; (ccb4 <PressureUpdateTask+0x198>)
    cb62:	781b      	ldrb	r3, [r3, #0]
    cb64:	1c5a      	adds	r2, r3, #1
    cb66:	b2d1      	uxtb	r1, r2
    cb68:	4a52      	ldr	r2, [pc, #328]	; (ccb4 <PressureUpdateTask+0x198>)
    cb6a:	7011      	strb	r1, [r2, #0]
    cb6c:	1c3a      	adds	r2, r7, #0
    cb6e:	320f      	adds	r2, #15
    cb70:	7812      	ldrb	r2, [r2, #0]
    cb72:	494f      	ldr	r1, [pc, #316]	; (ccb0 <PressureUpdateTask+0x194>)
    cb74:	0112      	lsls	r2, r2, #4
    cb76:	188a      	adds	r2, r1, r2
    cb78:	3205      	adds	r2, #5
    cb7a:	7951      	ldrb	r1, [r2, #5]
    cb7c:	4a4e      	ldr	r2, [pc, #312]	; (ccb8 <PressureUpdateTask+0x19c>)
    cb7e:	54d1      	strb	r1, [r2, r3]
			//-------------------------------- 				
			sensorDynamic[i].Change = 0;
    cb80:	1c3b      	adds	r3, r7, #0
    cb82:	330f      	adds	r3, #15
    cb84:	781b      	ldrb	r3, [r3, #0]
    cb86:	4a4a      	ldr	r2, [pc, #296]	; (ccb0 <PressureUpdateTask+0x194>)
    cb88:	011b      	lsls	r3, r3, #4
    cb8a:	18d3      	adds	r3, r2, r3
    cb8c:	2200      	movs	r2, #0
    cb8e:	711a      	strb	r2, [r3, #4]
			//--------------------------
			// handle the temperature 
			// * subtract 40 and you get the Celcius
			sensorDynamic[i].Temperature = sensorDynamic[i].LastPacket[4];
    cb90:	1c3b      	adds	r3, r7, #0
    cb92:	330f      	adds	r3, #15
    cb94:	781b      	ldrb	r3, [r3, #0]
    cb96:	1c3a      	adds	r2, r7, #0
    cb98:	320f      	adds	r2, #15
    cb9a:	7812      	ldrb	r2, [r2, #0]
    cb9c:	4944      	ldr	r1, [pc, #272]	; (ccb0 <PressureUpdateTask+0x194>)
    cb9e:	0112      	lsls	r2, r2, #4
    cba0:	188a      	adds	r2, r1, r2
    cba2:	3204      	adds	r2, #4
    cba4:	7952      	ldrb	r2, [r2, #5]
    cba6:	4942      	ldr	r1, [pc, #264]	; (ccb0 <PressureUpdateTask+0x194>)
    cba8:	011b      	lsls	r3, r3, #4
    cbaa:	18cb      	adds	r3, r1, r3
    cbac:	3308      	adds	r3, #8
    cbae:	719a      	strb	r2, [r3, #6]
			sensorDynamic[i].Temperature -= 40; 
    cbb0:	1c3b      	adds	r3, r7, #0
    cbb2:	330f      	adds	r3, #15
    cbb4:	781b      	ldrb	r3, [r3, #0]
    cbb6:	1c3a      	adds	r2, r7, #0
    cbb8:	320f      	adds	r2, #15
    cbba:	7812      	ldrb	r2, [r2, #0]
    cbbc:	493c      	ldr	r1, [pc, #240]	; (ccb0 <PressureUpdateTask+0x194>)
    cbbe:	0112      	lsls	r2, r2, #4
    cbc0:	188a      	adds	r2, r1, r2
    cbc2:	3208      	adds	r2, #8
    cbc4:	7992      	ldrb	r2, [r2, #6]
    cbc6:	3a28      	subs	r2, #40	; 0x28
    cbc8:	b2d2      	uxtb	r2, r2
    cbca:	4939      	ldr	r1, [pc, #228]	; (ccb0 <PressureUpdateTask+0x194>)
    cbcc:	011b      	lsls	r3, r3, #4
    cbce:	18cb      	adds	r3, r1, r3
    cbd0:	3308      	adds	r3, #8
    cbd2:	719a      	strb	r2, [r3, #6]
			//---------------------------
			// handle the Pressure 
			// 
			sensorDynamic[i].Pressure = 0;
    cbd4:	1c3b      	adds	r3, r7, #0
    cbd6:	330f      	adds	r3, #15
    cbd8:	781b      	ldrb	r3, [r3, #0]
    cbda:	4a35      	ldr	r2, [pc, #212]	; (ccb0 <PressureUpdateTask+0x194>)
    cbdc:	011b      	lsls	r3, r3, #4
    cbde:	18d3      	adds	r3, r2, r3
    cbe0:	3308      	adds	r3, #8
    cbe2:	2200      	movs	r2, #0
    cbe4:	809a      	strh	r2, [r3, #4]
			itemp = sensorDynamic[i].LastPacket[5]<<4;
    cbe6:	1c3b      	adds	r3, r7, #0
    cbe8:	330f      	adds	r3, #15
    cbea:	781b      	ldrb	r3, [r3, #0]
    cbec:	4a30      	ldr	r2, [pc, #192]	; (ccb0 <PressureUpdateTask+0x194>)
    cbee:	011b      	lsls	r3, r3, #4
    cbf0:	18d3      	adds	r3, r2, r3
    cbf2:	3305      	adds	r3, #5
    cbf4:	795b      	ldrb	r3, [r3, #5]
    cbf6:	1c1a      	adds	r2, r3, #0
    cbf8:	1c3b      	adds	r3, r7, #0
    cbfa:	330c      	adds	r3, #12
    cbfc:	0112      	lsls	r2, r2, #4
    cbfe:	801a      	strh	r2, [r3, #0]
			itemp &= 0x0700;
    cc00:	1c3b      	adds	r3, r7, #0
    cc02:	330c      	adds	r3, #12
    cc04:	1c3a      	adds	r2, r7, #0
    cc06:	320c      	adds	r2, #12
    cc08:	8811      	ldrh	r1, [r2, #0]
    cc0a:	22e0      	movs	r2, #224	; 0xe0
    cc0c:	00d2      	lsls	r2, r2, #3
    cc0e:	400a      	ands	r2, r1
    cc10:	801a      	strh	r2, [r3, #0]
			itemp2 = sensorDynamic[i].LastPacket[3];
    cc12:	1c3b      	adds	r3, r7, #0
    cc14:	330f      	adds	r3, #15
    cc16:	781b      	ldrb	r3, [r3, #0]
    cc18:	4a25      	ldr	r2, [pc, #148]	; (ccb0 <PressureUpdateTask+0x194>)
    cc1a:	011b      	lsls	r3, r3, #4
    cc1c:	18d3      	adds	r3, r2, r3
    cc1e:	3303      	adds	r3, #3
    cc20:	795a      	ldrb	r2, [r3, #5]
    cc22:	1c3b      	adds	r3, r7, #0
    cc24:	330a      	adds	r3, #10
    cc26:	801a      	strh	r2, [r3, #0]
			itemp |= itemp2; 
    cc28:	1c3b      	adds	r3, r7, #0
    cc2a:	330c      	adds	r3, #12
    cc2c:	1c39      	adds	r1, r7, #0
    cc2e:	310c      	adds	r1, #12
    cc30:	1c3a      	adds	r2, r7, #0
    cc32:	320a      	adds	r2, #10
    cc34:	8809      	ldrh	r1, [r1, #0]
    cc36:	8812      	ldrh	r2, [r2, #0]
    cc38:	430a      	orrs	r2, r1
    cc3a:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp;
    cc3c:	1c3b      	adds	r3, r7, #0
    cc3e:	330f      	adds	r3, #15
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	4a1b      	ldr	r2, [pc, #108]	; (ccb0 <PressureUpdateTask+0x194>)
    cc44:	011b      	lsls	r3, r3, #4
    cc46:	18d3      	adds	r3, r2, r3
    cc48:	3308      	adds	r3, #8
    cc4a:	1c3a      	adds	r2, r7, #0
    cc4c:	320c      	adds	r2, #12
    cc4e:	8812      	ldrh	r2, [r2, #0]
    cc50:	809a      	strh	r2, [r3, #4]
			ltemp = itemp; 
    cc52:	1c3b      	adds	r3, r7, #0
    cc54:	330c      	adds	r3, #12
    cc56:	881b      	ldrh	r3, [r3, #0]
    cc58:	607b      	str	r3, [r7, #4]
			ltemp = ltemp * 145038;
    cc5a:	687b      	ldr	r3, [r7, #4]
    cc5c:	4a17      	ldr	r2, [pc, #92]	; (ccbc <PressureUpdateTask+0x1a0>)
    cc5e:	4353      	muls	r3, r2
    cc60:	607b      	str	r3, [r7, #4]
			ltemp = ltemp/1000000;
    cc62:	687a      	ldr	r2, [r7, #4]
    cc64:	4b16      	ldr	r3, [pc, #88]	; (ccc0 <PressureUpdateTask+0x1a4>)
    cc66:	1c10      	adds	r0, r2, #0
    cc68:	4916      	ldr	r1, [pc, #88]	; (ccc4 <PressureUpdateTask+0x1a8>)
    cc6a:	4798      	blx	r3
    cc6c:	1c03      	adds	r3, r0, #0
    cc6e:	607b      	str	r3, [r7, #4]
			itemp = ltemp;
    cc70:	1c3b      	adds	r3, r7, #0
    cc72:	330c      	adds	r3, #12
    cc74:	687a      	ldr	r2, [r7, #4]
    cc76:	801a      	strh	r2, [r3, #0]
			sensorDynamic[i].Pressure = itemp; 	
    cc78:	1c3b      	adds	r3, r7, #0
    cc7a:	330f      	adds	r3, #15
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	4a0c      	ldr	r2, [pc, #48]	; (ccb0 <PressureUpdateTask+0x194>)
    cc80:	011b      	lsls	r3, r3, #4
    cc82:	18d3      	adds	r3, r2, r3
    cc84:	3308      	adds	r3, #8
    cc86:	1c3a      	adds	r2, r7, #0
    cc88:	320c      	adds	r2, #12
    cc8a:	8812      	ldrh	r2, [r2, #0]
    cc8c:	809a      	strh	r2, [r3, #4]
{
	uint8_t i;
	uint16_t itemp,itemp2; 
	uint32_t ltemp; 
		
	for (i=0;i<MAXSENSORS;i++)
    cc8e:	1c3b      	adds	r3, r7, #0
    cc90:	330f      	adds	r3, #15
    cc92:	781a      	ldrb	r2, [r3, #0]
    cc94:	1c3b      	adds	r3, r7, #0
    cc96:	330f      	adds	r3, #15
    cc98:	3201      	adds	r2, #1
    cc9a:	701a      	strb	r2, [r3, #0]
    cc9c:	1c3b      	adds	r3, r7, #0
    cc9e:	330f      	adds	r3, #15
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	2b0b      	cmp	r3, #11
    cca4:	d800      	bhi.n	cca8 <PressureUpdateTask+0x18c>
    cca6:	e741      	b.n	cb2c <PressureUpdateTask+0x10>
#if BRAKEBOARD 
//			AppRadioCarRadioReadingIn(i,TRUE);
#endif				
		}
	}		
}
    cca8:	46bd      	mov	sp, r7
    ccaa:	b004      	add	sp, #16
    ccac:	bd80      	pop	{r7, pc}
    ccae:	46c0      	nop			; (mov r8, r8)
    ccb0:	200033b4 	.word	0x200033b4
    ccb4:	200004d8 	.word	0x200004d8
    ccb8:	20003490 	.word	0x20003490
    ccbc:	0002368e 	.word	0x0002368e
    ccc0:	00015719 	.word	0x00015719
    ccc4:	000f4240 	.word	0x000f4240

0000ccc8 <RF433Task>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433Task(void)
{	
    ccc8:	b580      	push	{r7, lr}
    ccca:	af00      	add	r7, sp, #0
		RF433ReadEvents();
    cccc:	4b28      	ldr	r3, [pc, #160]	; (cd70 <RF433Task+0xa8>)
    ccce:	4798      	blx	r3
		
		systemChange = 0;
    ccd0:	4b28      	ldr	r3, [pc, #160]	; (cd74 <RF433Task+0xac>)
    ccd2:	2200      	movs	r2, #0
    ccd4:	701a      	strb	r2, [r3, #0]
		eventsChange = 0;
    ccd6:	4b28      	ldr	r3, [pc, #160]	; (cd78 <RF433Task+0xb0>)
    ccd8:	2200      	movs	r2, #0
    ccda:	701a      	strb	r2, [r3, #0]
		powerChange = 0;
    ccdc:	4b27      	ldr	r3, [pc, #156]	; (cd7c <RF433Task+0xb4>)
    ccde:	2200      	movs	r2, #0
    cce0:	701a      	strb	r2, [r3, #0]
		if (tpsEvents[0] != 0)
    cce2:	4b27      	ldr	r3, [pc, #156]	; (cd80 <RF433Task+0xb8>)
    cce4:	781b      	ldrb	r3, [r3, #0]
    cce6:	2b00      	cmp	r3, #0
    cce8:	d002      	beq.n	ccf0 <RF433Task+0x28>
		{
			systemChange = 1;
    ccea:	4b22      	ldr	r3, [pc, #136]	; (cd74 <RF433Task+0xac>)
    ccec:	2201      	movs	r2, #1
    ccee:	701a      	strb	r2, [r3, #0]
				}				
				rssiBuffer[rssiOffset++] = tempBuffer[4];
*/				
			}
		}
		if (tpsEvents[1] != 0)
    ccf0:	4b23      	ldr	r3, [pc, #140]	; (cd80 <RF433Task+0xb8>)
    ccf2:	785b      	ldrb	r3, [r3, #1]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d031      	beq.n	cd5c <RF433Task+0x94>
		{
			eventsChange = 1;
    ccf8:	4b1f      	ldr	r3, [pc, #124]	; (cd78 <RF433Task+0xb0>)
    ccfa:	2201      	movs	r2, #1
    ccfc:	701a      	strb	r2, [r3, #0]
			if ((tpsEvents[1] & 0x10)!= 0)
    ccfe:	4b20      	ldr	r3, [pc, #128]	; (cd80 <RF433Task+0xb8>)
    cd00:	785b      	ldrb	r3, [r3, #1]
    cd02:	1c1a      	adds	r2, r3, #0
    cd04:	2310      	movs	r3, #16
    cd06:	4013      	ands	r3, r2
    cd08:	d028      	beq.n	cd5c <RF433Task+0x94>
			{
				RF433ReadRXLevel();
    cd0a:	4b1e      	ldr	r3, [pc, #120]	; (cd84 <RF433Task+0xbc>)
    cd0c:	4798      	blx	r3
				while (tpsRXLevel >0)
    cd0e:	e021      	b.n	cd54 <RF433Task+0x8c>
				{
					if (tpsRXLevel >10)
    cd10:	4b1d      	ldr	r3, [pc, #116]	; (cd88 <RF433Task+0xc0>)
    cd12:	781b      	ldrb	r3, [r3, #0]
    cd14:	2b0a      	cmp	r3, #10
    cd16:	d90e      	bls.n	cd36 <RF433Task+0x6e>
					{
						RF433ReadRXBuffer(tempBuffer,10);
    cd18:	4b1c      	ldr	r3, [pc, #112]	; (cd8c <RF433Task+0xc4>)
    cd1a:	1c18      	adds	r0, r3, #0
    cd1c:	210a      	movs	r1, #10
    cd1e:	4b1c      	ldr	r3, [pc, #112]	; (cd90 <RF433Task+0xc8>)
    cd20:	4798      	blx	r3
						RF433ProcessPacket(10);
    cd22:	200a      	movs	r0, #10
    cd24:	4b1b      	ldr	r3, [pc, #108]	; (cd94 <RF433Task+0xcc>)
    cd26:	4798      	blx	r3
						tpsRXLevel -= 10;
    cd28:	4b17      	ldr	r3, [pc, #92]	; (cd88 <RF433Task+0xc0>)
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	3b0a      	subs	r3, #10
    cd2e:	b2da      	uxtb	r2, r3
    cd30:	4b15      	ldr	r3, [pc, #84]	; (cd88 <RF433Task+0xc0>)
    cd32:	701a      	strb	r2, [r3, #0]
    cd34:	e00e      	b.n	cd54 <RF433Task+0x8c>
					}
					else
					{
						RF433ReadRXBuffer(tempBuffer,tpsRXLevel);
    cd36:	4b14      	ldr	r3, [pc, #80]	; (cd88 <RF433Task+0xc0>)
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	4a14      	ldr	r2, [pc, #80]	; (cd8c <RF433Task+0xc4>)
    cd3c:	1c10      	adds	r0, r2, #0
    cd3e:	1c19      	adds	r1, r3, #0
    cd40:	4b13      	ldr	r3, [pc, #76]	; (cd90 <RF433Task+0xc8>)
    cd42:	4798      	blx	r3
						RF433ProcessPacket(tpsRXLevel);
    cd44:	4b10      	ldr	r3, [pc, #64]	; (cd88 <RF433Task+0xc0>)
    cd46:	781b      	ldrb	r3, [r3, #0]
    cd48:	1c18      	adds	r0, r3, #0
    cd4a:	4b12      	ldr	r3, [pc, #72]	; (cd94 <RF433Task+0xcc>)
    cd4c:	4798      	blx	r3
						tpsRXLevel = 0;
    cd4e:	4b0e      	ldr	r3, [pc, #56]	; (cd88 <RF433Task+0xc0>)
    cd50:	2200      	movs	r2, #0
    cd52:	701a      	strb	r2, [r3, #0]
		{
			eventsChange = 1;
			if ((tpsEvents[1] & 0x10)!= 0)
			{
				RF433ReadRXLevel();
				while (tpsRXLevel >0)
    cd54:	4b0c      	ldr	r3, [pc, #48]	; (cd88 <RF433Task+0xc0>)
    cd56:	781b      	ldrb	r3, [r3, #0]
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d1d9      	bne.n	cd10 <RF433Task+0x48>
						tpsRXLevel = 0;
					}
				}
			}
		}
		if (tpsEvents[2] != 0)
    cd5c:	4b08      	ldr	r3, [pc, #32]	; (cd80 <RF433Task+0xb8>)
    cd5e:	789b      	ldrb	r3, [r3, #2]
    cd60:	2b00      	cmp	r3, #0
    cd62:	d002      	beq.n	cd6a <RF433Task+0xa2>
		{
			powerChange = 1;
    cd64:	4b05      	ldr	r3, [pc, #20]	; (cd7c <RF433Task+0xb4>)
    cd66:	2201      	movs	r2, #1
    cd68:	701a      	strb	r2, [r3, #0]
		}	
}
    cd6a:	46bd      	mov	sp, r7
    cd6c:	bd80      	pop	{r7, pc}
    cd6e:	46c0      	nop			; (mov r8, r8)
    cd70:	0000d351 	.word	0x0000d351
    cd74:	20003474 	.word	0x20003474
    cd78:	20003124 	.word	0x20003124
    cd7c:	200030f0 	.word	0x200030f0
    cd80:	200030f4 	.word	0x200030f4
    cd84:	0000d319 	.word	0x0000d319
    cd88:	20003394 	.word	0x20003394
    cd8c:	20003110 	.word	0x20003110
    cd90:	0000d269 	.word	0x0000d269
    cd94:	0000cd99 	.word	0x0000cd99

0000cd98 <RF433ProcessPacket>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void RF433ProcessPacket(uint8_t length)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b084      	sub	sp, #16
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	1c02      	adds	r2, r0, #0
    cda0:	1dfb      	adds	r3, r7, #7
    cda2:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,j;
	//----------------------------
	// add the bytes to the end of the 
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
    cda4:	4bc1      	ldr	r3, [pc, #772]	; (d0ac <RF433ProcessPacket+0x314>)
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	1c1a      	adds	r2, r3, #0
    cdaa:	1dfb      	adds	r3, r7, #7
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	18d3      	adds	r3, r2, r3
    cdb0:	2b13      	cmp	r3, #19
    cdb2:	dd02      	ble.n	cdba <RF433ProcessPacket+0x22>
	{
		rf433BuildOffset = 0;
    cdb4:	4bbd      	ldr	r3, [pc, #756]	; (d0ac <RF433ProcessPacket+0x314>)
    cdb6:	2200      	movs	r2, #0
    cdb8:	701a      	strb	r2, [r3, #0]
	}
	for (i=0;i<length;i++)
    cdba:	1c3b      	adds	r3, r7, #0
    cdbc:	330e      	adds	r3, #14
    cdbe:	2200      	movs	r2, #0
    cdc0:	701a      	strb	r2, [r3, #0]
    cdc2:	e013      	b.n	cdec <RF433ProcessPacket+0x54>
	{
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
    cdc4:	4bb9      	ldr	r3, [pc, #740]	; (d0ac <RF433ProcessPacket+0x314>)
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	1c5a      	adds	r2, r3, #1
    cdca:	b2d1      	uxtb	r1, r2
    cdcc:	4ab7      	ldr	r2, [pc, #732]	; (d0ac <RF433ProcessPacket+0x314>)
    cdce:	7011      	strb	r1, [r2, #0]
    cdd0:	1c3a      	adds	r2, r7, #0
    cdd2:	320e      	adds	r2, #14
    cdd4:	7812      	ldrb	r2, [r2, #0]
    cdd6:	49b6      	ldr	r1, [pc, #728]	; (d0b0 <RF433ProcessPacket+0x318>)
    cdd8:	5c89      	ldrb	r1, [r1, r2]
    cdda:	4ab6      	ldr	r2, [pc, #728]	; (d0b4 <RF433ProcessPacket+0x31c>)
    cddc:	54d1      	strb	r1, [r2, r3]
	// current build Buffer. 	
	if ((rf433BuildOffset+length)>=MAXRF433BUILDBUFFER)
	{
		rf433BuildOffset = 0;
	}
	for (i=0;i<length;i++)
    cdde:	1c3b      	adds	r3, r7, #0
    cde0:	330e      	adds	r3, #14
    cde2:	781a      	ldrb	r2, [r3, #0]
    cde4:	1c3b      	adds	r3, r7, #0
    cde6:	330e      	adds	r3, #14
    cde8:	3201      	adds	r2, #1
    cdea:	701a      	strb	r2, [r3, #0]
    cdec:	1c3a      	adds	r2, r7, #0
    cdee:	320e      	adds	r2, #14
    cdf0:	1dfb      	adds	r3, r7, #7
    cdf2:	7812      	ldrb	r2, [r2, #0]
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	429a      	cmp	r2, r3
    cdf8:	d3e4      	bcc.n	cdc4 <RF433ProcessPacket+0x2c>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    cdfa:	e14e      	b.n	d09a <RF433ProcessPacket+0x302>
	{
		tpsCRC = CRC8 (&rf433BuildBuffer[0],6);
    cdfc:	4bad      	ldr	r3, [pc, #692]	; (d0b4 <RF433ProcessPacket+0x31c>)
    cdfe:	1c18      	adds	r0, r3, #0
    ce00:	2106      	movs	r1, #6
    ce02:	4bad      	ldr	r3, [pc, #692]	; (d0b8 <RF433ProcessPacket+0x320>)
    ce04:	4798      	blx	r3
    ce06:	1c03      	adds	r3, r0, #0
    ce08:	1c1a      	adds	r2, r3, #0
    ce0a:	4bac      	ldr	r3, [pc, #688]	; (d0bc <RF433ProcessPacket+0x324>)
    ce0c:	701a      	strb	r2, [r3, #0]
		if (tpsCRC == rf433BuildBuffer[6])
    ce0e:	4ba9      	ldr	r3, [pc, #676]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ce10:	799a      	ldrb	r2, [r3, #6]
    ce12:	4baa      	ldr	r3, [pc, #680]	; (d0bc <RF433ProcessPacket+0x324>)
    ce14:	781b      	ldrb	r3, [r3, #0]
    ce16:	429a      	cmp	r2, r3
    ce18:	d000      	beq.n	ce1c <RF433ProcessPacket+0x84>
    ce1a:	e11a      	b.n	d052 <RF433ProcessPacket+0x2ba>
		{
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_RXPACKET,1);
    ce1c:	2001      	movs	r0, #1
    ce1e:	2102      	movs	r1, #2
    ce20:	2201      	movs	r2, #1
    ce22:	4ba7      	ldr	r3, [pc, #668]	; (d0c0 <RF433ProcessPacket+0x328>)
    ce24:	4798      	blx	r3
			AppStatusUpdate(INTERFACE_TIRERADIO,STATUS_COMMGOOD,1);
    ce26:	2001      	movs	r0, #1
    ce28:	2104      	movs	r1, #4
    ce2a:	2201      	movs	r2, #1
    ce2c:	4ba4      	ldr	r3, [pc, #656]	; (d0c0 <RF433ProcessPacket+0x328>)
    ce2e:	4798      	blx	r3
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
    ce30:	1c3b      	adds	r3, r7, #0
    ce32:	330e      	adds	r3, #14
    ce34:	2200      	movs	r2, #0
    ce36:	701a      	strb	r2, [r3, #0]
			done = 0; 
    ce38:	1c3b      	adds	r3, r7, #0
    ce3a:	330f      	adds	r3, #15
    ce3c:	2200      	movs	r2, #0
    ce3e:	701a      	strb	r2, [r3, #0]
			while ((i<MAXSENSORS)&&(done==0))
    ce40:	e077      	b.n	cf32 <RF433ProcessPacket+0x19a>
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    ce42:	1c3b      	adds	r3, r7, #0
    ce44:	330e      	adds	r3, #14
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	4a9e      	ldr	r2, [pc, #632]	; (d0c4 <RF433ProcessPacket+0x32c>)
    ce4a:	011b      	lsls	r3, r3, #4
    ce4c:	18d3      	adds	r3, r2, r3
    ce4e:	3301      	adds	r3, #1
    ce50:	781a      	ldrb	r2, [r3, #0]
    ce52:	4b98      	ldr	r3, [pc, #608]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ce54:	785b      	ldrb	r3, [r3, #1]
    ce56:	429a      	cmp	r2, r3
    ce58:	d164      	bne.n	cf24 <RF433ProcessPacket+0x18c>
    ce5a:	1c3b      	adds	r3, r7, #0
    ce5c:	330e      	adds	r3, #14
    ce5e:	781a      	ldrb	r2, [r3, #0]
    ce60:	4b98      	ldr	r3, [pc, #608]	; (d0c4 <RF433ProcessPacket+0x32c>)
    ce62:	0112      	lsls	r2, r2, #4
    ce64:	5cd2      	ldrb	r2, [r2, r3]
    ce66:	4b93      	ldr	r3, [pc, #588]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	429a      	cmp	r2, r3
    ce6c:	d15a      	bne.n	cf24 <RF433ProcessPacket+0x18c>
					(sensorDynamic[i].ID[2] == rf433BuildBuffer[2]))
    ce6e:	1c3b      	adds	r3, r7, #0
    ce70:	330e      	adds	r3, #14
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	4a93      	ldr	r2, [pc, #588]	; (d0c4 <RF433ProcessPacket+0x32c>)
    ce76:	011b      	lsls	r3, r3, #4
    ce78:	18d3      	adds	r3, r2, r3
    ce7a:	3302      	adds	r3, #2
    ce7c:	781a      	ldrb	r2, [r3, #0]
    ce7e:	4b8d      	ldr	r3, [pc, #564]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ce80:	789b      	ldrb	r3, [r3, #2]
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
			{
				if ((sensorDynamic[i].ID[1] == rf433BuildBuffer[1])&&(sensorDynamic[i].ID[0] == rf433BuildBuffer[0])&&
    ce82:	429a      	cmp	r2, r3
    ce84:	d14e      	bne.n	cf24 <RF433ProcessPacket+0x18c>
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    ce86:	1c3b      	adds	r3, r7, #0
    ce88:	330d      	adds	r3, #13
    ce8a:	2200      	movs	r2, #0
    ce8c:	701a      	strb	r2, [r3, #0]
    ce8e:	e031      	b.n	cef4 <RF433ProcessPacket+0x15c>
					{
						if (sensorDynamic[i].LastPacket[j] != rf433BuildBuffer[j])
    ce90:	1c3b      	adds	r3, r7, #0
    ce92:	330e      	adds	r3, #14
    ce94:	7819      	ldrb	r1, [r3, #0]
    ce96:	1c3b      	adds	r3, r7, #0
    ce98:	330d      	adds	r3, #13
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	4a89      	ldr	r2, [pc, #548]	; (d0c4 <RF433ProcessPacket+0x32c>)
    ce9e:	0109      	lsls	r1, r1, #4
    cea0:	18cb      	adds	r3, r1, r3
    cea2:	18d3      	adds	r3, r2, r3
    cea4:	795a      	ldrb	r2, [r3, #5]
    cea6:	1c3b      	adds	r3, r7, #0
    cea8:	330d      	adds	r3, #13
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	4981      	ldr	r1, [pc, #516]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ceae:	5ccb      	ldrb	r3, [r1, r3]
    ceb0:	429a      	cmp	r2, r3
    ceb2:	d008      	beq.n	cec6 <RF433ProcessPacket+0x12e>
						{
							sensorDynamic[i].NewValue =1; 
    ceb4:	1c3b      	adds	r3, r7, #0
    ceb6:	330e      	adds	r3, #14
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	4a82      	ldr	r2, [pc, #520]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cebc:	011b      	lsls	r3, r3, #4
    cebe:	18d3      	adds	r3, r2, r3
    cec0:	3308      	adds	r3, #8
    cec2:	2201      	movs	r2, #1
    cec4:	71da      	strb	r2, [r3, #7]
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    cec6:	1c3b      	adds	r3, r7, #0
    cec8:	330e      	adds	r3, #14
    ceca:	7818      	ldrb	r0, [r3, #0]
    cecc:	1c3b      	adds	r3, r7, #0
    cece:	330d      	adds	r3, #13
    ced0:	781b      	ldrb	r3, [r3, #0]
    ced2:	1c3a      	adds	r2, r7, #0
    ced4:	320d      	adds	r2, #13
    ced6:	7812      	ldrb	r2, [r2, #0]
    ced8:	4976      	ldr	r1, [pc, #472]	; (d0b4 <RF433ProcessPacket+0x31c>)
    ceda:	5c8a      	ldrb	r2, [r1, r2]
    cedc:	4979      	ldr	r1, [pc, #484]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cede:	0100      	lsls	r0, r0, #4
    cee0:	18c3      	adds	r3, r0, r3
    cee2:	18cb      	adds	r3, r1, r3
    cee4:	715a      	strb	r2, [r3, #5]
				{
					//-----------------------
					// load the packet in
					// mark if a value has changed 
					//-----------------------
					for (j=0;j<7;j++)
    cee6:	1c3b      	adds	r3, r7, #0
    cee8:	330d      	adds	r3, #13
    ceea:	781a      	ldrb	r2, [r3, #0]
    ceec:	1c3b      	adds	r3, r7, #0
    ceee:	330d      	adds	r3, #13
    cef0:	3201      	adds	r2, #1
    cef2:	701a      	strb	r2, [r3, #0]
    cef4:	1c3b      	adds	r3, r7, #0
    cef6:	330d      	adds	r3, #13
    cef8:	781b      	ldrb	r3, [r3, #0]
    cefa:	2b06      	cmp	r3, #6
    cefc:	d9c8      	bls.n	ce90 <RF433ProcessPacket+0xf8>
						{
							sensorDynamic[i].NewValue =1; 
						}
						sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
					}
					sensorDynamic[i].Change = 1; 
    cefe:	1c3b      	adds	r3, r7, #0
    cf00:	330e      	adds	r3, #14
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	4a6f      	ldr	r2, [pc, #444]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cf06:	011b      	lsls	r3, r3, #4
    cf08:	18d3      	adds	r3, r2, r3
    cf0a:	2201      	movs	r2, #1
    cf0c:	711a      	strb	r2, [r3, #4]
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    cf0e:	4b6e      	ldr	r3, [pc, #440]	; (d0c8 <RF433ProcessPacket+0x330>)
    cf10:	681b      	ldr	r3, [r3, #0]
    cf12:	2280      	movs	r2, #128	; 0x80
    cf14:	0052      	lsls	r2, r2, #1
    cf16:	431a      	orrs	r2, r3
    cf18:	4b6b      	ldr	r3, [pc, #428]	; (d0c8 <RF433ProcessPacket+0x330>)
    cf1a:	601a      	str	r2, [r3, #0]
					done = 1; 
    cf1c:	1c3b      	adds	r3, r7, #0
    cf1e:	330f      	adds	r3, #15
    cf20:	2201      	movs	r2, #1
    cf22:	701a      	strb	r2, [r3, #0]
				}
				i++;
    cf24:	1c3b      	adds	r3, r7, #0
    cf26:	330e      	adds	r3, #14
    cf28:	781a      	ldrb	r2, [r3, #0]
    cf2a:	1c3b      	adds	r3, r7, #0
    cf2c:	330e      	adds	r3, #14
    cf2e:	3201      	adds	r2, #1
    cf30:	701a      	strb	r2, [r3, #0]
			//-------------------------
			// look at the ID of the packet to see if in the sensor list.
			//-------------------------
			i = 0;
			done = 0; 
			while ((i<MAXSENSORS)&&(done==0))
    cf32:	1c3b      	adds	r3, r7, #0
    cf34:	330e      	adds	r3, #14
    cf36:	781b      	ldrb	r3, [r3, #0]
    cf38:	2b0b      	cmp	r3, #11
    cf3a:	d805      	bhi.n	cf48 <RF433ProcessPacket+0x1b0>
    cf3c:	1c3b      	adds	r3, r7, #0
    cf3e:	330f      	adds	r3, #15
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	2b00      	cmp	r3, #0
    cf44:	d100      	bne.n	cf48 <RF433ProcessPacket+0x1b0>
    cf46:	e77c      	b.n	ce42 <RF433ProcessPacket+0xaa>
					schedByte |= SCHEDBYTE_UPDATEPRESSURE;
					done = 1; 
				}
				i++;
			}
			if (done == 0)
    cf48:	1c3b      	adds	r3, r7, #0
    cf4a:	330f      	adds	r3, #15
    cf4c:	781b      	ldrb	r3, [r3, #0]
    cf4e:	2b00      	cmp	r3, #0
    cf50:	d000      	beq.n	cf54 <RF433ProcessPacket+0x1bc>
    cf52:	e077      	b.n	d044 <RF433ProcessPacket+0x2ac>
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
    cf54:	1c3b      	adds	r3, r7, #0
    cf56:	330e      	adds	r3, #14
    cf58:	2200      	movs	r2, #0
    cf5a:	701a      	strb	r2, [r3, #0]
				while ((i<MAXSENSORS)&&(done==0))
    cf5c:	e068      	b.n	d030 <RF433ProcessPacket+0x298>
				{
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
    cf5e:	1c3b      	adds	r3, r7, #0
    cf60:	330e      	adds	r3, #14
    cf62:	781a      	ldrb	r2, [r3, #0]
    cf64:	4b57      	ldr	r3, [pc, #348]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cf66:	0112      	lsls	r2, r2, #4
    cf68:	5cd3      	ldrb	r3, [r2, r3]
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d159      	bne.n	d022 <RF433ProcessPacket+0x28a>
    cf6e:	1c3b      	adds	r3, r7, #0
    cf70:	330e      	adds	r3, #14
    cf72:	781b      	ldrb	r3, [r3, #0]
    cf74:	4a53      	ldr	r2, [pc, #332]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cf76:	011b      	lsls	r3, r3, #4
    cf78:	18d3      	adds	r3, r2, r3
    cf7a:	3301      	adds	r3, #1
    cf7c:	781b      	ldrb	r3, [r3, #0]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d14f      	bne.n	d022 <RF433ProcessPacket+0x28a>
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    cf82:	1c3b      	adds	r3, r7, #0
    cf84:	330d      	adds	r3, #13
    cf86:	2200      	movs	r2, #0
    cf88:	701a      	strb	r2, [r3, #0]
    cf8a:	e016      	b.n	cfba <RF433ProcessPacket+0x222>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
    cf8c:	1c3b      	adds	r3, r7, #0
    cf8e:	330e      	adds	r3, #14
    cf90:	7818      	ldrb	r0, [r3, #0]
    cf92:	1c3b      	adds	r3, r7, #0
    cf94:	330d      	adds	r3, #13
    cf96:	781b      	ldrb	r3, [r3, #0]
    cf98:	1c3a      	adds	r2, r7, #0
    cf9a:	320d      	adds	r2, #13
    cf9c:	7812      	ldrb	r2, [r2, #0]
    cf9e:	4945      	ldr	r1, [pc, #276]	; (d0b4 <RF433ProcessPacket+0x31c>)
    cfa0:	5c8a      	ldrb	r2, [r1, r2]
    cfa2:	4948      	ldr	r1, [pc, #288]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cfa4:	0100      	lsls	r0, r0, #4
    cfa6:	18c3      	adds	r3, r0, r3
    cfa8:	18cb      	adds	r3, r1, r3
    cfaa:	715a      	strb	r2, [r3, #5]
					if ((sensorDynamic[i].ID[0] == 0)&&(sensorDynamic[i].ID[1]==0))
					{
						//-----------------------
						// load the packet in
						//-----------------------
						for (j=0;j<7;j++)
    cfac:	1c3b      	adds	r3, r7, #0
    cfae:	330d      	adds	r3, #13
    cfb0:	781a      	ldrb	r2, [r3, #0]
    cfb2:	1c3b      	adds	r3, r7, #0
    cfb4:	330d      	adds	r3, #13
    cfb6:	3201      	adds	r2, #1
    cfb8:	701a      	strb	r2, [r3, #0]
    cfba:	1c3b      	adds	r3, r7, #0
    cfbc:	330d      	adds	r3, #13
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	2b06      	cmp	r3, #6
    cfc2:	d9e3      	bls.n	cf8c <RF433ProcessPacket+0x1f4>
						{
							sensorDynamic[i].LastPacket[j] = rf433BuildBuffer[j];
						}
						sensorDynamic[i].Change = 1;
    cfc4:	1c3b      	adds	r3, r7, #0
    cfc6:	330e      	adds	r3, #14
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	4a3e      	ldr	r2, [pc, #248]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cfcc:	011b      	lsls	r3, r3, #4
    cfce:	18d3      	adds	r3, r2, r3
    cfd0:	2201      	movs	r2, #1
    cfd2:	711a      	strb	r2, [r3, #4]
						sensorDynamic[i].ID[0] = rf433BuildBuffer[0]; 
    cfd4:	1c3b      	adds	r3, r7, #0
    cfd6:	330e      	adds	r3, #14
    cfd8:	781a      	ldrb	r2, [r3, #0]
    cfda:	4b36      	ldr	r3, [pc, #216]	; (d0b4 <RF433ProcessPacket+0x31c>)
    cfdc:	7819      	ldrb	r1, [r3, #0]
    cfde:	4b39      	ldr	r3, [pc, #228]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cfe0:	0112      	lsls	r2, r2, #4
    cfe2:	54d1      	strb	r1, [r2, r3]
						sensorDynamic[i].ID[1] = rf433BuildBuffer[1]; 
    cfe4:	1c3b      	adds	r3, r7, #0
    cfe6:	330e      	adds	r3, #14
    cfe8:	781b      	ldrb	r3, [r3, #0]
    cfea:	4a32      	ldr	r2, [pc, #200]	; (d0b4 <RF433ProcessPacket+0x31c>)
    cfec:	7852      	ldrb	r2, [r2, #1]
    cfee:	4935      	ldr	r1, [pc, #212]	; (d0c4 <RF433ProcessPacket+0x32c>)
    cff0:	011b      	lsls	r3, r3, #4
    cff2:	18cb      	adds	r3, r1, r3
    cff4:	3301      	adds	r3, #1
    cff6:	701a      	strb	r2, [r3, #0]
						sensorDynamic[i].ID[2] = rf433BuildBuffer[2]; 												
    cff8:	1c3b      	adds	r3, r7, #0
    cffa:	330e      	adds	r3, #14
    cffc:	781b      	ldrb	r3, [r3, #0]
    cffe:	4a2d      	ldr	r2, [pc, #180]	; (d0b4 <RF433ProcessPacket+0x31c>)
    d000:	7892      	ldrb	r2, [r2, #2]
    d002:	4930      	ldr	r1, [pc, #192]	; (d0c4 <RF433ProcessPacket+0x32c>)
    d004:	011b      	lsls	r3, r3, #4
    d006:	18cb      	adds	r3, r1, r3
    d008:	3302      	adds	r3, #2
    d00a:	701a      	strb	r2, [r3, #0]
						schedByte |= SCHEDBYTE_UPDATEPRESSURE;
    d00c:	4b2e      	ldr	r3, [pc, #184]	; (d0c8 <RF433ProcessPacket+0x330>)
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	2280      	movs	r2, #128	; 0x80
    d012:	0052      	lsls	r2, r2, #1
    d014:	431a      	orrs	r2, r3
    d016:	4b2c      	ldr	r3, [pc, #176]	; (d0c8 <RF433ProcessPacket+0x330>)
    d018:	601a      	str	r2, [r3, #0]
						done = 1; 
    d01a:	1c3b      	adds	r3, r7, #0
    d01c:	330f      	adds	r3, #15
    d01e:	2201      	movs	r2, #1
    d020:	701a      	strb	r2, [r3, #0]
					}
					i++;
    d022:	1c3b      	adds	r3, r7, #0
    d024:	330e      	adds	r3, #14
    d026:	781a      	ldrb	r2, [r3, #0]
    d028:	1c3b      	adds	r3, r7, #0
    d02a:	330e      	adds	r3, #14
    d02c:	3201      	adds	r2, #1
    d02e:	701a      	strb	r2, [r3, #0]
			if (done == 0)
			{
				//------add the sensor to the list until configuration is in place.
				//------------------------------------------------------
				i = 0;
				while ((i<MAXSENSORS)&&(done==0))
    d030:	1c3b      	adds	r3, r7, #0
    d032:	330e      	adds	r3, #14
    d034:	781b      	ldrb	r3, [r3, #0]
    d036:	2b0b      	cmp	r3, #11
    d038:	d804      	bhi.n	d044 <RF433ProcessPacket+0x2ac>
    d03a:	1c3b      	adds	r3, r7, #0
    d03c:	330f      	adds	r3, #15
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	2b00      	cmp	r3, #0
    d042:	d08c      	beq.n	cf5e <RF433ProcessPacket+0x1c6>
					}
					i++;
				}				 
				
			}
			rf433BuildOffset = rf433BuildOffset-7;
    d044:	4b19      	ldr	r3, [pc, #100]	; (d0ac <RF433ProcessPacket+0x314>)
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	3b07      	subs	r3, #7
    d04a:	b2da      	uxtb	r2, r3
    d04c:	4b17      	ldr	r3, [pc, #92]	; (d0ac <RF433ProcessPacket+0x314>)
    d04e:	701a      	strb	r2, [r3, #0]
    d050:	e023      	b.n	d09a <RF433ProcessPacket+0x302>
		}	
		else
		{
			rf433BuildOffset--;
    d052:	4b16      	ldr	r3, [pc, #88]	; (d0ac <RF433ProcessPacket+0x314>)
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	3b01      	subs	r3, #1
    d058:	b2da      	uxtb	r2, r3
    d05a:	4b14      	ldr	r3, [pc, #80]	; (d0ac <RF433ProcessPacket+0x314>)
    d05c:	701a      	strb	r2, [r3, #0]
			for (i=0;i<rf433BuildOffset;i++)
    d05e:	1c3b      	adds	r3, r7, #0
    d060:	330e      	adds	r3, #14
    d062:	2200      	movs	r2, #0
    d064:	701a      	strb	r2, [r3, #0]
    d066:	e011      	b.n	d08c <RF433ProcessPacket+0x2f4>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
    d068:	1c3b      	adds	r3, r7, #0
    d06a:	330e      	adds	r3, #14
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	1c3a      	adds	r2, r7, #0
    d070:	320e      	adds	r2, #14
    d072:	7812      	ldrb	r2, [r2, #0]
    d074:	3201      	adds	r2, #1
    d076:	490f      	ldr	r1, [pc, #60]	; (d0b4 <RF433ProcessPacket+0x31c>)
    d078:	5c89      	ldrb	r1, [r1, r2]
    d07a:	4a0e      	ldr	r2, [pc, #56]	; (d0b4 <RF433ProcessPacket+0x31c>)
    d07c:	54d1      	strb	r1, [r2, r3]
			rf433BuildOffset = rf433BuildOffset-7;
		}	
		else
		{
			rf433BuildOffset--;
			for (i=0;i<rf433BuildOffset;i++)
    d07e:	1c3b      	adds	r3, r7, #0
    d080:	330e      	adds	r3, #14
    d082:	781a      	ldrb	r2, [r3, #0]
    d084:	1c3b      	adds	r3, r7, #0
    d086:	330e      	adds	r3, #14
    d088:	3201      	adds	r2, #1
    d08a:	701a      	strb	r2, [r3, #0]
    d08c:	4b07      	ldr	r3, [pc, #28]	; (d0ac <RF433ProcessPacket+0x314>)
    d08e:	781b      	ldrb	r3, [r3, #0]
    d090:	1c3a      	adds	r2, r7, #0
    d092:	320e      	adds	r2, #14
    d094:	7812      	ldrb	r2, [r2, #0]
    d096:	429a      	cmp	r2, r3
    d098:	d3e6      	bcc.n	d068 <RF433ProcessPacket+0x2d0>
		rf433BuildBuffer[rf433BuildOffset++] = tpsRXBuffer[i];;
	}
	//-----------------------
	// look for a valid packet.
	// that is 7 bytes - where 6 have same CRC
	while (rf433BuildOffset >= 7)
    d09a:	4b04      	ldr	r3, [pc, #16]	; (d0ac <RF433ProcessPacket+0x314>)
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	2b06      	cmp	r3, #6
    d0a0:	d900      	bls.n	d0a4 <RF433ProcessPacket+0x30c>
    d0a2:	e6ab      	b.n	cdfc <RF433ProcessPacket+0x64>
			{
				rf433BuildBuffer[i]= rf433BuildBuffer[i+1];
			}	
		}		
	}
}
    d0a4:	46bd      	mov	sp, r7
    d0a6:	b004      	add	sp, #16
    d0a8:	bd80      	pop	{r7, pc}
    d0aa:	46c0      	nop			; (mov r8, r8)
    d0ac:	2000339b 	.word	0x2000339b
    d0b0:	20003498 	.word	0x20003498
    d0b4:	20003478 	.word	0x20003478
    d0b8:	0000d1b1 	.word	0x0000d1b1
    d0bc:	20003395 	.word	0x20003395
    d0c0:	0000f579 	.word	0x0000f579
    d0c4:	200033b4 	.word	0x200033b4
    d0c8:	2000369c 	.word	0x2000369c

0000d0cc <SPITInOut>:
 // FUNCTION:
 //------------------------------------------------------------------------------
 // This function
 //==============================================================================
 int SPITInOut(uint8_t *buffer,uint8_t size)
 {
    d0cc:	b590      	push	{r4, r7, lr}
    d0ce:	b087      	sub	sp, #28
    d0d0:	af00      	add	r7, sp, #0
    d0d2:	6078      	str	r0, [r7, #4]
    d0d4:	1c0a      	adds	r2, r1, #0
    d0d6:	1cfb      	adds	r3, r7, #3
    d0d8:	701a      	strb	r2, [r3, #0]
	 uint8_t i,*ptr; 
	 ptr = buffer; 
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    d0de:	2300      	movs	r3, #0
    d0e0:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
    d0e2:	1cfb      	adds	r3, r7, #3
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	2b0d      	cmp	r3, #13
    d0e8:	d851      	bhi.n	d18e <SPITInOut+0xc2>
	 {
		 success = 1; 
    d0ea:	2301      	movs	r3, #1
    d0ec:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spit_master_instance, &slavet, true);
    d0ee:	4a2a      	ldr	r2, [pc, #168]	; (d198 <SPITInOut+0xcc>)
    d0f0:	4b2a      	ldr	r3, [pc, #168]	; (d19c <SPITInOut+0xd0>)
    d0f2:	1c10      	adds	r0, r2, #0
    d0f4:	1c19      	adds	r1, r3, #0
    d0f6:	2201      	movs	r2, #1
    d0f8:	4b29      	ldr	r3, [pc, #164]	; (d1a0 <SPITInOut+0xd4>)
    d0fa:	4798      	blx	r3
		 for (i=0;i<size;i++)
    d0fc:	1c3b      	adds	r3, r7, #0
    d0fe:	3317      	adds	r3, #23
    d100:	2200      	movs	r2, #0
    d102:	701a      	strb	r2, [r3, #0]
    d104:	e00f      	b.n	d126 <SPITInOut+0x5a>
		 {
			txBuffT[i] = *ptr++;
    d106:	1c3b      	adds	r3, r7, #0
    d108:	3317      	adds	r3, #23
    d10a:	781a      	ldrb	r2, [r3, #0]
    d10c:	693b      	ldr	r3, [r7, #16]
    d10e:	1c59      	adds	r1, r3, #1
    d110:	6139      	str	r1, [r7, #16]
    d112:	7819      	ldrb	r1, [r3, #0]
    d114:	4b23      	ldr	r3, [pc, #140]	; (d1a4 <SPITInOut+0xd8>)
    d116:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIT_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spit_master_instance, &slavet, true);
		 for (i=0;i<size;i++)
    d118:	1c3b      	adds	r3, r7, #0
    d11a:	3317      	adds	r3, #23
    d11c:	781a      	ldrb	r2, [r3, #0]
    d11e:	1c3b      	adds	r3, r7, #0
    d120:	3317      	adds	r3, #23
    d122:	3201      	adds	r2, #1
    d124:	701a      	strb	r2, [r3, #0]
    d126:	1c3a      	adds	r2, r7, #0
    d128:	3217      	adds	r2, #23
    d12a:	1cfb      	adds	r3, r7, #3
    d12c:	7812      	ldrb	r2, [r2, #0]
    d12e:	781b      	ldrb	r3, [r3, #0]
    d130:	429a      	cmp	r2, r3
    d132:	d3e8      	bcc.n	d106 <SPITInOut+0x3a>
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
    d134:	1cfb      	adds	r3, r7, #3
    d136:	781b      	ldrb	r3, [r3, #0]
    d138:	b29b      	uxth	r3, r3
    d13a:	4817      	ldr	r0, [pc, #92]	; (d198 <SPITInOut+0xcc>)
    d13c:	4919      	ldr	r1, [pc, #100]	; (d1a4 <SPITInOut+0xd8>)
    d13e:	4a1a      	ldr	r2, [pc, #104]	; (d1a8 <SPITInOut+0xdc>)
    d140:	4c1a      	ldr	r4, [pc, #104]	; (d1ac <SPITInOut+0xe0>)
    d142:	47a0      	blx	r4
		 ptr = buffer; 
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	613b      	str	r3, [r7, #16]
		 for (i=0;i<size;i++)
    d148:	1c3b      	adds	r3, r7, #0
    d14a:	3317      	adds	r3, #23
    d14c:	2200      	movs	r2, #0
    d14e:	701a      	strb	r2, [r3, #0]
    d150:	e00f      	b.n	d172 <SPITInOut+0xa6>
		 {
			 *ptr++ = rxBuffT[i]; 
    d152:	693b      	ldr	r3, [r7, #16]
    d154:	1c5a      	adds	r2, r3, #1
    d156:	613a      	str	r2, [r7, #16]
    d158:	1c3a      	adds	r2, r7, #0
    d15a:	3217      	adds	r2, #23
    d15c:	7812      	ldrb	r2, [r2, #0]
    d15e:	4912      	ldr	r1, [pc, #72]	; (d1a8 <SPITInOut+0xdc>)
    d160:	5c8a      	ldrb	r2, [r1, r2]
    d162:	701a      	strb	r2, [r3, #0]
		 {
			txBuffT[i] = *ptr++;
		 }
		 spi_transceive_buffer_wait(&spit_master_instance,&txBuffT[0], &rxBuffT[0],size);
		 ptr = buffer; 
		 for (i=0;i<size;i++)
    d164:	1c3b      	adds	r3, r7, #0
    d166:	3317      	adds	r3, #23
    d168:	781a      	ldrb	r2, [r3, #0]
    d16a:	1c3b      	adds	r3, r7, #0
    d16c:	3317      	adds	r3, #23
    d16e:	3201      	adds	r2, #1
    d170:	701a      	strb	r2, [r3, #0]
    d172:	1c3a      	adds	r2, r7, #0
    d174:	3217      	adds	r2, #23
    d176:	1cfb      	adds	r3, r7, #3
    d178:	7812      	ldrb	r2, [r2, #0]
    d17a:	781b      	ldrb	r3, [r3, #0]
    d17c:	429a      	cmp	r2, r3
    d17e:	d3e8      	bcc.n	d152 <SPITInOut+0x86>
		 {
			 *ptr++ = rxBuffT[i]; 
		 }
		 
		 spi_select_slave(&spit_master_instance, &slavet, false);
    d180:	4a05      	ldr	r2, [pc, #20]	; (d198 <SPITInOut+0xcc>)
    d182:	4b06      	ldr	r3, [pc, #24]	; (d19c <SPITInOut+0xd0>)
    d184:	1c10      	adds	r0, r2, #0
    d186:	1c19      	adds	r1, r3, #0
    d188:	2200      	movs	r2, #0
    d18a:	4b05      	ldr	r3, [pc, #20]	; (d1a0 <SPITInOut+0xd4>)
    d18c:	4798      	blx	r3
	 } 
	 return success; 
    d18e:	68fb      	ldr	r3, [r7, #12]
 }
    d190:	1c18      	adds	r0, r3, #0
    d192:	46bd      	mov	sp, r7
    d194:	b007      	add	sp, #28
    d196:	bd90      	pop	{r4, r7, pc}
    d198:	200033ac 	.word	0x200033ac
    d19c:	20003398 	.word	0x20003398
    d1a0:	00013251 	.word	0x00013251
    d1a4:	20003100 	.word	0x20003100
    d1a8:	2000339c 	.word	0x2000339c
    d1ac:	0001332d 	.word	0x0001332d

0000d1b0 <CRC8>:
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
    d1b0:	b580      	push	{r7, lr}
    d1b2:	b084      	sub	sp, #16
    d1b4:	af00      	add	r7, sp, #0
    d1b6:	6078      	str	r0, [r7, #4]
    d1b8:	1c0a      	adds	r2, r1, #0
    d1ba:	1cfb      	adds	r3, r7, #3
    d1bc:	701a      	strb	r2, [r3, #0]
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
    d1be:	1c3b      	adds	r3, r7, #0
    d1c0:	330a      	adds	r3, #10
    d1c2:	2200      	movs	r2, #0
    d1c4:	801a      	strh	r2, [r3, #0]
	 while (len--) {
    d1c6:	e03f      	b.n	d248 <CRC8+0x98>
		 extract = *data++;
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	1c5a      	adds	r2, r3, #1
    d1cc:	607a      	str	r2, [r7, #4]
    d1ce:	781a      	ldrb	r2, [r3, #0]
    d1d0:	1c3b      	adds	r3, r7, #0
    d1d2:	330c      	adds	r3, #12
    d1d4:	801a      	strh	r2, [r3, #0]
		 for (tempI = 8; tempI; tempI--) {
    d1d6:	1c3b      	adds	r3, r7, #0
    d1d8:	330e      	adds	r3, #14
    d1da:	2208      	movs	r2, #8
    d1dc:	801a      	strh	r2, [r3, #0]
    d1de:	e02e      	b.n	d23e <CRC8+0x8e>
			 sum = (crc ^ extract) & 0x80; //01;
    d1e0:	1c3a      	adds	r2, r7, #0
    d1e2:	320a      	adds	r2, #10
    d1e4:	1c3b      	adds	r3, r7, #0
    d1e6:	330c      	adds	r3, #12
    d1e8:	8812      	ldrh	r2, [r2, #0]
    d1ea:	881b      	ldrh	r3, [r3, #0]
    d1ec:	4053      	eors	r3, r2
    d1ee:	b299      	uxth	r1, r3
    d1f0:	1c3b      	adds	r3, r7, #0
    d1f2:	3308      	adds	r3, #8
    d1f4:	2280      	movs	r2, #128	; 0x80
    d1f6:	400a      	ands	r2, r1
    d1f8:	801a      	strh	r2, [r3, #0]
			 crc <<=1;  //>>= 1;
    d1fa:	1c3a      	adds	r2, r7, #0
    d1fc:	320a      	adds	r2, #10
    d1fe:	1c3b      	adds	r3, r7, #0
    d200:	330a      	adds	r3, #10
    d202:	881b      	ldrh	r3, [r3, #0]
    d204:	18db      	adds	r3, r3, r3
    d206:	8013      	strh	r3, [r2, #0]
			 if (sum) {
    d208:	1c3b      	adds	r3, r7, #0
    d20a:	3308      	adds	r3, #8
    d20c:	881b      	ldrh	r3, [r3, #0]
    d20e:	2b00      	cmp	r3, #0
    d210:	d007      	beq.n	d222 <CRC8+0x72>
				 crc ^= 0x31;  //8C;
    d212:	1c3b      	adds	r3, r7, #0
    d214:	330a      	adds	r3, #10
    d216:	1c3a      	adds	r2, r7, #0
    d218:	320a      	adds	r2, #10
    d21a:	8812      	ldrh	r2, [r2, #0]
    d21c:	2131      	movs	r1, #49	; 0x31
    d21e:	404a      	eors	r2, r1
    d220:	801a      	strh	r2, [r3, #0]
			 }
			 extract <<=1; //>>= 1;
    d222:	1c3a      	adds	r2, r7, #0
    d224:	320c      	adds	r2, #12
    d226:	1c3b      	adds	r3, r7, #0
    d228:	330c      	adds	r3, #12
    d22a:	881b      	ldrh	r3, [r3, #0]
    d22c:	18db      	adds	r3, r3, r3
    d22e:	8013      	strh	r3, [r2, #0]
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
		 extract = *data++;
		 for (tempI = 8; tempI; tempI--) {
    d230:	1c3b      	adds	r3, r7, #0
    d232:	330e      	adds	r3, #14
    d234:	881a      	ldrh	r2, [r3, #0]
    d236:	1c3b      	adds	r3, r7, #0
    d238:	330e      	adds	r3, #14
    d23a:	3a01      	subs	r2, #1
    d23c:	801a      	strh	r2, [r3, #0]
    d23e:	1c3b      	adds	r3, r7, #0
    d240:	330e      	adds	r3, #14
    d242:	881b      	ldrh	r3, [r3, #0]
    d244:	2b00      	cmp	r3, #0
    d246:	d1cb      	bne.n	d1e0 <CRC8+0x30>
// This function
//============================================================================== 
 uint8_t CRC8(uint8_t *data, uint8_t len) {
	 uint16_t tempI,extract,sum;
	 uint16_t crc = 0x00;
	 while (len--) {
    d248:	1cfb      	adds	r3, r7, #3
    d24a:	781b      	ldrb	r3, [r3, #0]
    d24c:	1cfa      	adds	r2, r7, #3
    d24e:	1e59      	subs	r1, r3, #1
    d250:	7011      	strb	r1, [r2, #0]
    d252:	2b00      	cmp	r3, #0
    d254:	d1b8      	bne.n	d1c8 <CRC8+0x18>
				 crc ^= 0x31;  //8C;
			 }
			 extract <<=1; //>>= 1;
		 }
	 }
	 return crc;
    d256:	1c3b      	adds	r3, r7, #0
    d258:	330a      	adds	r3, #10
    d25a:	881b      	ldrh	r3, [r3, #0]
    d25c:	b2db      	uxtb	r3, r3
 }
    d25e:	1c18      	adds	r0, r3, #0
    d260:	46bd      	mov	sp, r7
    d262:	b004      	add	sp, #16
    d264:	bd80      	pop	{r7, pc}
    d266:	46c0      	nop			; (mov r8, r8)

0000d268 <RF433ReadRXBuffer>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
    d268:	b580      	push	{r7, lr}
    d26a:	b084      	sub	sp, #16
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
    d270:	1c0a      	adds	r2, r1, #0
    d272:	1cfb      	adds	r3, r7, #3
    d274:	701a      	strb	r2, [r3, #0]
	uint8_t i; 
	
	for (i=0;i<length;i++)
    d276:	1c3b      	adds	r3, r7, #0
    d278:	330f      	adds	r3, #15
    d27a:	2200      	movs	r2, #0
    d27c:	701a      	strb	r2, [r3, #0]
    d27e:	e00d      	b.n	d29c <RF433ReadRXBuffer+0x34>
	{
		buffer[i] = 0x00;
    d280:	1c3b      	adds	r3, r7, #0
    d282:	330f      	adds	r3, #15
    d284:	781b      	ldrb	r3, [r3, #0]
    d286:	687a      	ldr	r2, [r7, #4]
    d288:	18d3      	adds	r3, r2, r3
    d28a:	2200      	movs	r2, #0
    d28c:	701a      	strb	r2, [r3, #0]
//==============================================================================
void RF433ReadRXBuffer(uint8_t *buffer,uint8_t length)
{
	uint8_t i; 
	
	for (i=0;i<length;i++)
    d28e:	1c3b      	adds	r3, r7, #0
    d290:	330f      	adds	r3, #15
    d292:	781a      	ldrb	r2, [r3, #0]
    d294:	1c3b      	adds	r3, r7, #0
    d296:	330f      	adds	r3, #15
    d298:	3201      	adds	r2, #1
    d29a:	701a      	strb	r2, [r3, #0]
    d29c:	1c3a      	adds	r2, r7, #0
    d29e:	320f      	adds	r2, #15
    d2a0:	1cfb      	adds	r3, r7, #3
    d2a2:	7812      	ldrb	r2, [r2, #0]
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	429a      	cmp	r2, r3
    d2a8:	d3ea      	bcc.n	d280 <RF433ReadRXBuffer+0x18>
	{
		buffer[i] = 0x00;
	}
	buffer[0] = 0x06;
    d2aa:	687b      	ldr	r3, [r7, #4]
    d2ac:	2206      	movs	r2, #6
    d2ae:	701a      	strb	r2, [r3, #0]
	buffer[1] = length;
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	3301      	adds	r3, #1
    d2b4:	1cfa      	adds	r2, r7, #3
    d2b6:	7812      	ldrb	r2, [r2, #0]
    d2b8:	701a      	strb	r2, [r3, #0]
	SPITInOut(buffer,length+3);
    d2ba:	1cfb      	adds	r3, r7, #3
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	3303      	adds	r3, #3
    d2c0:	b2db      	uxtb	r3, r3
    d2c2:	687a      	ldr	r2, [r7, #4]
    d2c4:	1c10      	adds	r0, r2, #0
    d2c6:	1c19      	adds	r1, r3, #0
    d2c8:	4b11      	ldr	r3, [pc, #68]	; (d310 <RF433ReadRXBuffer+0xa8>)
    d2ca:	4798      	blx	r3
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    d2cc:	1c3b      	adds	r3, r7, #0
    d2ce:	330f      	adds	r3, #15
    d2d0:	2200      	movs	r2, #0
    d2d2:	701a      	strb	r2, [r3, #0]
    d2d4:	e012      	b.n	d2fc <RF433ReadRXBuffer+0x94>
	{
		tpsRXBuffer[i] = buffer[i+3];
    d2d6:	1c3b      	adds	r3, r7, #0
    d2d8:	330f      	adds	r3, #15
    d2da:	781b      	ldrb	r3, [r3, #0]
    d2dc:	1c3a      	adds	r2, r7, #0
    d2de:	320f      	adds	r2, #15
    d2e0:	7812      	ldrb	r2, [r2, #0]
    d2e2:	3203      	adds	r2, #3
    d2e4:	6879      	ldr	r1, [r7, #4]
    d2e6:	188a      	adds	r2, r1, r2
    d2e8:	7811      	ldrb	r1, [r2, #0]
    d2ea:	4a0a      	ldr	r2, [pc, #40]	; (d314 <RF433ReadRXBuffer+0xac>)
    d2ec:	54d1      	strb	r1, [r2, r3]
	buffer[1] = length;
	SPITInOut(buffer,length+3);
	//--------------------------
	// data is in the 4th byte on
	//--------------------------
	for (i=0;i<length;i++)
    d2ee:	1c3b      	adds	r3, r7, #0
    d2f0:	330f      	adds	r3, #15
    d2f2:	781a      	ldrb	r2, [r3, #0]
    d2f4:	1c3b      	adds	r3, r7, #0
    d2f6:	330f      	adds	r3, #15
    d2f8:	3201      	adds	r2, #1
    d2fa:	701a      	strb	r2, [r3, #0]
    d2fc:	1c3a      	adds	r2, r7, #0
    d2fe:	320f      	adds	r2, #15
    d300:	1cfb      	adds	r3, r7, #3
    d302:	7812      	ldrb	r2, [r2, #0]
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	429a      	cmp	r2, r3
    d308:	d3e5      	bcc.n	d2d6 <RF433ReadRXBuffer+0x6e>
	{
		tpsRXBuffer[i] = buffer[i+3];
	}  
}  
    d30a:	46bd      	mov	sp, r7
    d30c:	b004      	add	sp, #16
    d30e:	bd80      	pop	{r7, pc}
    d310:	0000d0cd 	.word	0x0000d0cd
    d314:	20003498 	.word	0x20003498

0000d318 <RF433ReadRXLevel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadRXLevel(void)
{
    d318:	b580      	push	{r7, lr}
    d31a:	b082      	sub	sp, #8
    d31c:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[3];
	
	commandBuffer[0] = 0x01;
    d31e:	1d3b      	adds	r3, r7, #4
    d320:	2201      	movs	r2, #1
    d322:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;
    d324:	1d3b      	adds	r3, r7, #4
    d326:	2200      	movs	r2, #0
    d328:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00;
    d32a:	1d3b      	adds	r3, r7, #4
    d32c:	2200      	movs	r2, #0
    d32e:	709a      	strb	r2, [r3, #2]
	SPITInOut(commandBuffer,3);
    d330:	1d3b      	adds	r3, r7, #4
    d332:	1c18      	adds	r0, r3, #0
    d334:	2103      	movs	r1, #3
    d336:	4b04      	ldr	r3, [pc, #16]	; (d348 <RF433ReadRXLevel+0x30>)
    d338:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte
	//--------------------------
 	tpsRXLevel = commandBuffer[2];
    d33a:	1d3b      	adds	r3, r7, #4
    d33c:	789a      	ldrb	r2, [r3, #2]
    d33e:	4b03      	ldr	r3, [pc, #12]	; (d34c <RF433ReadRXLevel+0x34>)
    d340:	701a      	strb	r2, [r3, #0]
} 
    d342:	46bd      	mov	sp, r7
    d344:	b002      	add	sp, #8
    d346:	bd80      	pop	{r7, pc}
    d348:	0000d0cd 	.word	0x0000d0cd
    d34c:	20003394 	.word	0x20003394

0000d350 <RF433ReadEvents>:
// FUNCTION:   
//------------------------------------------------------------------------------
// This function
//==============================================================================
void RF433ReadEvents(void)
{
    d350:	b580      	push	{r7, lr}
    d352:	b082      	sub	sp, #8
    d354:	af00      	add	r7, sp, #0
	uint8_t commandBuffer[5];
	uint8_t i; 
	
	commandBuffer[0] = 0x04;
    d356:	1c3b      	adds	r3, r7, #0
    d358:	2204      	movs	r2, #4
    d35a:	701a      	strb	r2, [r3, #0]
	commandBuffer[1] = 0x00;  	
    d35c:	1c3b      	adds	r3, r7, #0
    d35e:	2200      	movs	r2, #0
    d360:	705a      	strb	r2, [r3, #1]
	commandBuffer[2] = 0x00; 
    d362:	1c3b      	adds	r3, r7, #0
    d364:	2200      	movs	r2, #0
    d366:	709a      	strb	r2, [r3, #2]
	commandBuffer[3] = 0x00;
    d368:	1c3b      	adds	r3, r7, #0
    d36a:	2200      	movs	r2, #0
    d36c:	70da      	strb	r2, [r3, #3]
	commandBuffer[4] = 0x00; 
    d36e:	1c3b      	adds	r3, r7, #0
    d370:	2200      	movs	r2, #0
    d372:	711a      	strb	r2, [r3, #4]
	SPITInOut(commandBuffer,4);
    d374:	1c3b      	adds	r3, r7, #0
    d376:	1c18      	adds	r0, r3, #0
    d378:	2104      	movs	r1, #4
    d37a:	4b0d      	ldr	r3, [pc, #52]	; (d3b0 <RF433ReadEvents+0x60>)
    d37c:	4798      	blx	r3
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    d37e:	1dfb      	adds	r3, r7, #7
    d380:	2200      	movs	r2, #0
    d382:	701a      	strb	r2, [r3, #0]
    d384:	e00c      	b.n	d3a0 <RF433ReadEvents+0x50>
	{
		tpsEvents[i] = commandBuffer[i];
    d386:	1dfb      	adds	r3, r7, #7
    d388:	781b      	ldrb	r3, [r3, #0]
    d38a:	1dfa      	adds	r2, r7, #7
    d38c:	7812      	ldrb	r2, [r2, #0]
    d38e:	1c39      	adds	r1, r7, #0
    d390:	5c89      	ldrb	r1, [r1, r2]
    d392:	4a08      	ldr	r2, [pc, #32]	; (d3b4 <RF433ReadEvents+0x64>)
    d394:	54d1      	strb	r1, [r2, r3]
	commandBuffer[4] = 0x00; 
	SPITInOut(commandBuffer,4);
	//--------------------------
	// data is in the 5th byte 
	//--------------------------
	for (i=0;i<4;i++)
    d396:	1dfb      	adds	r3, r7, #7
    d398:	781a      	ldrb	r2, [r3, #0]
    d39a:	1dfb      	adds	r3, r7, #7
    d39c:	3201      	adds	r2, #1
    d39e:	701a      	strb	r2, [r3, #0]
    d3a0:	1dfb      	adds	r3, r7, #7
    d3a2:	781b      	ldrb	r3, [r3, #0]
    d3a4:	2b03      	cmp	r3, #3
    d3a6:	d9ee      	bls.n	d386 <RF433ReadEvents+0x36>
	{
		tpsEvents[i] = commandBuffer[i];
	}
}
    d3a8:	46bd      	mov	sp, r7
    d3aa:	b002      	add	sp, #8
    d3ac:	bd80      	pop	{r7, pc}
    d3ae:	46c0      	nop			; (mov r8, r8)
    d3b0:	0000d0cd 	.word	0x0000d0cd
    d3b4:	200030f4 	.word	0x200030f4

0000d3b8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    d3b8:	b580      	push	{r7, lr}
    d3ba:	b082      	sub	sp, #8
    d3bc:	af00      	add	r7, sp, #0
    d3be:	1c02      	adds	r2, r0, #0
    d3c0:	1dfb      	adds	r3, r7, #7
    d3c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d3c4:	4b06      	ldr	r3, [pc, #24]	; (d3e0 <system_interrupt_enable+0x28>)
    d3c6:	1dfa      	adds	r2, r7, #7
    d3c8:	7812      	ldrb	r2, [r2, #0]
    d3ca:	1c11      	adds	r1, r2, #0
    d3cc:	221f      	movs	r2, #31
    d3ce:	400a      	ands	r2, r1
    d3d0:	2101      	movs	r1, #1
    d3d2:	1c08      	adds	r0, r1, #0
    d3d4:	4090      	lsls	r0, r2
    d3d6:	1c02      	adds	r2, r0, #0
    d3d8:	601a      	str	r2, [r3, #0]
}
    d3da:	46bd      	mov	sp, r7
    d3dc:	b002      	add	sp, #8
    d3de:	bd80      	pop	{r7, pc}
    d3e0:	e000e100 	.word	0xe000e100

0000d3e4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    d3e4:	b580      	push	{r7, lr}
    d3e6:	b082      	sub	sp, #8
    d3e8:	af00      	add	r7, sp, #0
    d3ea:	1c02      	adds	r2, r0, #0
    d3ec:	1dfb      	adds	r3, r7, #7
    d3ee:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d3f0:	4a07      	ldr	r2, [pc, #28]	; (d410 <system_interrupt_disable+0x2c>)
    d3f2:	1dfb      	adds	r3, r7, #7
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	1c19      	adds	r1, r3, #0
    d3f8:	231f      	movs	r3, #31
    d3fa:	400b      	ands	r3, r1
    d3fc:	2101      	movs	r1, #1
    d3fe:	1c08      	adds	r0, r1, #0
    d400:	4098      	lsls	r0, r3
    d402:	1c03      	adds	r3, r0, #0
    d404:	1c19      	adds	r1, r3, #0
    d406:	2380      	movs	r3, #128	; 0x80
    d408:	50d1      	str	r1, [r2, r3]
}
    d40a:	46bd      	mov	sp, r7
    d40c:	b002      	add	sp, #8
    d40e:	bd80      	pop	{r7, pc}
    d410:	e000e100 	.word	0xe000e100

0000d414 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    d414:	b580      	push	{r7, lr}
    d416:	b084      	sub	sp, #16
    d418:	af00      	add	r7, sp, #0
    d41a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    d41c:	687b      	ldr	r3, [r7, #4]
    d41e:	681b      	ldr	r3, [r3, #0]
    d420:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    d422:	68fb      	ldr	r3, [r7, #12]
    d424:	8a1b      	ldrh	r3, [r3, #16]
    d426:	b29b      	uxth	r3, r3
    d428:	1c1a      	adds	r2, r3, #0
    d42a:	2380      	movs	r3, #128	; 0x80
    d42c:	021b      	lsls	r3, r3, #8
    d42e:	4013      	ands	r3, r2
    d430:	1e5a      	subs	r2, r3, #1
    d432:	4193      	sbcs	r3, r2
    d434:	b2db      	uxtb	r3, r3
#endif
}
    d436:	1c18      	adds	r0, r3, #0
    d438:	46bd      	mov	sp, r7
    d43a:	b004      	add	sp, #16
    d43c:	bd80      	pop	{r7, pc}
    d43e:	46c0      	nop			; (mov r8, r8)

0000d440 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    d440:	b580      	push	{r7, lr}
    d442:	b082      	sub	sp, #8
    d444:	af00      	add	r7, sp, #0
    d446:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    d448:	46c0      	nop			; (mov r8, r8)
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	1c18      	adds	r0, r3, #0
    d44e:	4b04      	ldr	r3, [pc, #16]	; (d460 <_usart_wait_for_sync+0x20>)
    d450:	4798      	blx	r3
    d452:	1c03      	adds	r3, r0, #0
    d454:	2b00      	cmp	r3, #0
    d456:	d1f8      	bne.n	d44a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    d458:	46bd      	mov	sp, r7
    d45a:	b002      	add	sp, #8
    d45c:	bd80      	pop	{r7, pc}
    d45e:	46c0      	nop			; (mov r8, r8)
    d460:	0000d415 	.word	0x0000d415

0000d464 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    d464:	b580      	push	{r7, lr}
    d466:	b082      	sub	sp, #8
    d468:	af00      	add	r7, sp, #0
    d46a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d46c:	687b      	ldr	r3, [r7, #4]
    d46e:	2280      	movs	r2, #128	; 0x80
    d470:	05d2      	lsls	r2, r2, #23
    d472:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	2200      	movs	r2, #0
    d478:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    d47a:	687b      	ldr	r3, [r7, #4]
    d47c:	22ff      	movs	r2, #255	; 0xff
    d47e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	2200      	movs	r2, #0
    d484:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	2200      	movs	r2, #0
    d48a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    d48c:	687b      	ldr	r3, [r7, #4]
    d48e:	2296      	movs	r2, #150	; 0x96
    d490:	0192      	lsls	r2, r2, #6
    d492:	611a      	str	r2, [r3, #16]
	config->receiver_enable  = true;
    d494:	687b      	ldr	r3, [r7, #4]
    d496:	2201      	movs	r2, #1
    d498:	751a      	strb	r2, [r3, #20]
	config->transmitter_enable = true;
    d49a:	687b      	ldr	r3, [r7, #4]
    d49c:	2201      	movs	r2, #1
    d49e:	755a      	strb	r2, [r3, #21]
	config->clock_polarity_inverted = false;
    d4a0:	687b      	ldr	r3, [r7, #4]
    d4a2:	2200      	movs	r2, #0
    d4a4:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
    d4a6:	687b      	ldr	r3, [r7, #4]
    d4a8:	2200      	movs	r2, #0
    d4aa:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	2200      	movs	r2, #0
    d4b0:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	2288      	movs	r2, #136	; 0x88
    d4b6:	0352      	lsls	r2, r2, #13
    d4b8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    d4ba:	687b      	ldr	r3, [r7, #4]
    d4bc:	2200      	movs	r2, #0
    d4be:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	2200      	movs	r2, #0
    d4c4:	775a      	strb	r2, [r3, #29]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d4c6:	687b      	ldr	r3, [r7, #4]
    d4c8:	2200      	movs	r2, #0
    d4ca:	621a      	str	r2, [r3, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d4cc:	687b      	ldr	r3, [r7, #4]
    d4ce:	2200      	movs	r2, #0
    d4d0:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad2      = PINMUX_DEFAULT;
    d4d2:	687b      	ldr	r3, [r7, #4]
    d4d4:	2200      	movs	r2, #0
    d4d6:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad3      = PINMUX_DEFAULT;
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	2200      	movs	r2, #0
    d4dc:	62da      	str	r2, [r3, #44]	; 0x2c
	config->receive_pulse_length                        = 19;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
#endif
}
    d4de:	46bd      	mov	sp, r7
    d4e0:	b002      	add	sp, #8
    d4e2:	bd80      	pop	{r7, pc}

0000d4e4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    d4e4:	b580      	push	{r7, lr}
    d4e6:	b084      	sub	sp, #16
    d4e8:	af00      	add	r7, sp, #0
    d4ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	681b      	ldr	r3, [r3, #0]
    d4f6:	1c18      	adds	r0, r3, #0
    d4f8:	4b09      	ldr	r3, [pc, #36]	; (d520 <usart_enable+0x3c>)
    d4fa:	4798      	blx	r3
    d4fc:	1c03      	adds	r3, r0, #0
    d4fe:	1c18      	adds	r0, r3, #0
    d500:	4b08      	ldr	r3, [pc, #32]	; (d524 <usart_enable+0x40>)
    d502:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	1c18      	adds	r0, r3, #0
    d508:	4b07      	ldr	r3, [pc, #28]	; (d528 <usart_enable+0x44>)
    d50a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d50c:	68fb      	ldr	r3, [r7, #12]
    d50e:	681b      	ldr	r3, [r3, #0]
    d510:	2202      	movs	r2, #2
    d512:	431a      	orrs	r2, r3
    d514:	68fb      	ldr	r3, [r7, #12]
    d516:	601a      	str	r2, [r3, #0]
}
    d518:	46bd      	mov	sp, r7
    d51a:	b004      	add	sp, #16
    d51c:	bd80      	pop	{r7, pc}
    d51e:	46c0      	nop			; (mov r8, r8)
    d520:	000129a5 	.word	0x000129a5
    d524:	0000d3b9 	.word	0x0000d3b9
    d528:	0000d441 	.word	0x0000d441

0000d52c <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    d52c:	b580      	push	{r7, lr}
    d52e:	b084      	sub	sp, #16
    d530:	af00      	add	r7, sp, #0
    d532:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	681b      	ldr	r3, [r3, #0]
    d538:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    d53a:	687b      	ldr	r3, [r7, #4]
    d53c:	681b      	ldr	r3, [r3, #0]
    d53e:	1c18      	adds	r0, r3, #0
    d540:	4b0a      	ldr	r3, [pc, #40]	; (d56c <usart_disable+0x40>)
    d542:	4798      	blx	r3
    d544:	1c03      	adds	r3, r0, #0
    d546:	1c18      	adds	r0, r3, #0
    d548:	4b09      	ldr	r3, [pc, #36]	; (d570 <usart_disable+0x44>)
    d54a:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d54c:	687b      	ldr	r3, [r7, #4]
    d54e:	1c18      	adds	r0, r3, #0
    d550:	4b08      	ldr	r3, [pc, #32]	; (d574 <usart_disable+0x48>)
    d552:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    d554:	68fb      	ldr	r3, [r7, #12]
    d556:	681b      	ldr	r3, [r3, #0]
    d558:	2202      	movs	r2, #2
    d55a:	1c19      	adds	r1, r3, #0
    d55c:	4391      	bics	r1, r2
    d55e:	1c0a      	adds	r2, r1, #0
    d560:	68fb      	ldr	r3, [r7, #12]
    d562:	601a      	str	r2, [r3, #0]
}
    d564:	46bd      	mov	sp, r7
    d566:	b004      	add	sp, #16
    d568:	bd80      	pop	{r7, pc}
    d56a:	46c0      	nop			; (mov r8, r8)
    d56c:	000129a5 	.word	0x000129a5
    d570:	0000d3e5 	.word	0x0000d3e5
    d574:	0000d441 	.word	0x0000d441

0000d578 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    d578:	b580      	push	{r7, lr}
    d57a:	b082      	sub	sp, #8
    d57c:	af00      	add	r7, sp, #0
    d57e:	6078      	str	r0, [r7, #4]
    d580:	1c0a      	adds	r2, r1, #0
    d582:	1cfb      	adds	r3, r7, #3
    d584:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    d586:	687a      	ldr	r2, [r7, #4]
    d588:	2321      	movs	r3, #33	; 0x21
    d58a:	5cd3      	ldrb	r3, [r2, r3]
    d58c:	b2da      	uxtb	r2, r3
    d58e:	1cfb      	adds	r3, r7, #3
    d590:	781b      	ldrb	r3, [r3, #0]
    d592:	2101      	movs	r1, #1
    d594:	1c08      	adds	r0, r1, #0
    d596:	4098      	lsls	r0, r3
    d598:	1c03      	adds	r3, r0, #0
    d59a:	b2db      	uxtb	r3, r3
    d59c:	4313      	orrs	r3, r2
    d59e:	b2db      	uxtb	r3, r3
    d5a0:	b2d9      	uxtb	r1, r3
    d5a2:	687a      	ldr	r2, [r7, #4]
    d5a4:	2321      	movs	r3, #33	; 0x21
    d5a6:	54d1      	strb	r1, [r2, r3]

}
    d5a8:	46bd      	mov	sp, r7
    d5aa:	b002      	add	sp, #8
    d5ac:	bd80      	pop	{r7, pc}
    d5ae:	46c0      	nop			; (mov r8, r8)

0000d5b0 <usart_read_callback>:
// FUNCTION:  
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void usart_read_callback(const struct usart_module *const usart_module)
{
    d5b0:	b580      	push	{r7, lr}
    d5b2:	b086      	sub	sp, #24
    d5b4:	af00      	add	r7, sp, #0
    d5b6:	6078      	str	r0, [r7, #4]
	uint16_t itemp,itemp2;
	uint32_t ltemp,ltemp2; 
	 
//	usart_write_buffer_job(&usart_instance,
//			(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	receiveIntercharTimeout = TRUE; 
    d5b8:	4bd9      	ldr	r3, [pc, #868]	; (d920 <usart_read_callback+0x370>)
    d5ba:	2201      	movs	r2, #1
    d5bc:	701a      	strb	r2, [r3, #0]
	receiveLength = usart_instance.rxBufferCount;
    d5be:	4bd9      	ldr	r3, [pc, #868]	; (d924 <usart_read_callback+0x374>)
    d5c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    d5c2:	b29a      	uxth	r2, r3
    d5c4:	4bd8      	ldr	r3, [pc, #864]	; (d928 <usart_read_callback+0x378>)
    d5c6:	801a      	strh	r2, [r3, #0]
	itemp = general_buffer[3];
    d5c8:	4bd8      	ldr	r3, [pc, #864]	; (d92c <usart_read_callback+0x37c>)
    d5ca:	78da      	ldrb	r2, [r3, #3]
    d5cc:	1c3b      	adds	r3, r7, #0
    d5ce:	3316      	adds	r3, #22
    d5d0:	801a      	strh	r2, [r3, #0]
	itemp = itemp<<8;
    d5d2:	1c3b      	adds	r3, r7, #0
    d5d4:	3316      	adds	r3, #22
    d5d6:	1c3a      	adds	r2, r7, #0
    d5d8:	3216      	adds	r2, #22
    d5da:	8812      	ldrh	r2, [r2, #0]
    d5dc:	0212      	lsls	r2, r2, #8
    d5de:	801a      	strh	r2, [r3, #0]
	itemp2 = general_buffer[4];
    d5e0:	4bd2      	ldr	r3, [pc, #840]	; (d92c <usart_read_callback+0x37c>)
    d5e2:	791a      	ldrb	r2, [r3, #4]
    d5e4:	1c3b      	adds	r3, r7, #0
    d5e6:	3314      	adds	r3, #20
    d5e8:	801a      	strh	r2, [r3, #0]
	itemp |= itemp2; 
    d5ea:	1c3b      	adds	r3, r7, #0
    d5ec:	3316      	adds	r3, #22
    d5ee:	1c39      	adds	r1, r7, #0
    d5f0:	3116      	adds	r1, #22
    d5f2:	1c3a      	adds	r2, r7, #0
    d5f4:	3214      	adds	r2, #20
    d5f6:	8809      	ldrh	r1, [r1, #0]
    d5f8:	8812      	ldrh	r2, [r2, #0]
    d5fa:	430a      	orrs	r2, r1
    d5fc:	801a      	strh	r2, [r3, #0]
	
	txBluetoothBuffer[0]='#';
    d5fe:	4bcc      	ldr	r3, [pc, #816]	; (d930 <usart_read_callback+0x380>)
    d600:	2223      	movs	r2, #35	; 0x23
    d602:	701a      	strb	r2, [r3, #0]
	if (receiveLength >5)
    d604:	4bc8      	ldr	r3, [pc, #800]	; (d928 <usart_read_callback+0x378>)
    d606:	881b      	ldrh	r3, [r3, #0]
    d608:	2b05      	cmp	r3, #5
    d60a:	d801      	bhi.n	d610 <usart_read_callback+0x60>
    d60c:	f000 fd18 	bl	e040 <usart_read_callback+0xa90>
	{
		switch(itemp)
    d610:	1c3b      	adds	r3, r7, #0
    d612:	3316      	adds	r3, #22
    d614:	881b      	ldrh	r3, [r3, #0]
    d616:	4ac7      	ldr	r2, [pc, #796]	; (d934 <usart_read_callback+0x384>)
    d618:	4293      	cmp	r3, r2
    d61a:	d100      	bne.n	d61e <usart_read_callback+0x6e>
    d61c:	e2c6      	b.n	dbac <usart_read_callback+0x5fc>
    d61e:	4ac5      	ldr	r2, [pc, #788]	; (d934 <usart_read_callback+0x384>)
    d620:	4293      	cmp	r3, r2
    d622:	dc07      	bgt.n	d634 <usart_read_callback+0x84>
    d624:	4ac4      	ldr	r2, [pc, #784]	; (d938 <usart_read_callback+0x388>)
    d626:	4293      	cmp	r3, r2
    d628:	d03c      	beq.n	d6a4 <usart_read_callback+0xf4>
    d62a:	4ac4      	ldr	r2, [pc, #784]	; (d93c <usart_read_callback+0x38c>)
    d62c:	4293      	cmp	r3, r2
    d62e:	d05f      	beq.n	d6f0 <usart_read_callback+0x140>
    d630:	f000 fd06 	bl	e040 <usart_read_callback+0xa90>
    d634:	4ac2      	ldr	r2, [pc, #776]	; (d940 <usart_read_callback+0x390>)
    d636:	4293      	cmp	r3, r2
    d638:	d101      	bne.n	d63e <usart_read_callback+0x8e>
    d63a:	f000 fbe9 	bl	de10 <usart_read_callback+0x860>
    d63e:	4ac1      	ldr	r2, [pc, #772]	; (d944 <usart_read_callback+0x394>)
    d640:	4293      	cmp	r3, r2
    d642:	d005      	beq.n	d650 <usart_read_callback+0xa0>
    d644:	4ac0      	ldr	r2, [pc, #768]	; (d948 <usart_read_callback+0x398>)
    d646:	4293      	cmp	r3, r2
    d648:	d100      	bne.n	d64c <usart_read_callback+0x9c>
    d64a:	e197      	b.n	d97c <usart_read_callback+0x3cc>
    d64c:	f000 fcf8 	bl	e040 <usart_read_callback+0xa90>
		{
			case COMMAND_RV:
			{
				txBluetoothBuffer[1] = 0;
    d650:	4bb7      	ldr	r3, [pc, #732]	; (d930 <usart_read_callback+0x380>)
    d652:	2200      	movs	r2, #0
    d654:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d656:	4bb6      	ldr	r3, [pc, #728]	; (d930 <usart_read_callback+0x380>)
    d658:	2209      	movs	r2, #9
    d65a:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'r';
    d65c:	4bb4      	ldr	r3, [pc, #720]	; (d930 <usart_read_callback+0x380>)
    d65e:	2272      	movs	r2, #114	; 0x72
    d660:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    d662:	4bb3      	ldr	r3, [pc, #716]	; (d930 <usart_read_callback+0x380>)
    d664:	2276      	movs	r2, #118	; 0x76
    d666:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = remoteVersionToReport[0];
    d668:	4bb8      	ldr	r3, [pc, #736]	; (d94c <usart_read_callback+0x39c>)
    d66a:	781a      	ldrb	r2, [r3, #0]
    d66c:	4bb0      	ldr	r3, [pc, #704]	; (d930 <usart_read_callback+0x380>)
    d66e:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = remoteVersionToReport[1];
    d670:	4bb6      	ldr	r3, [pc, #728]	; (d94c <usart_read_callback+0x39c>)
    d672:	785a      	ldrb	r2, [r3, #1]
    d674:	4bae      	ldr	r3, [pc, #696]	; (d930 <usart_read_callback+0x380>)
    d676:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';		
    d678:	4bad      	ldr	r3, [pc, #692]	; (d930 <usart_read_callback+0x380>)
    d67a:	222e      	movs	r2, #46	; 0x2e
    d67c:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = remoteVersionToReport[2];
    d67e:	4bb3      	ldr	r3, [pc, #716]	; (d94c <usart_read_callback+0x39c>)
    d680:	789a      	ldrb	r2, [r3, #2]
    d682:	4bab      	ldr	r3, [pc, #684]	; (d930 <usart_read_callback+0x380>)
    d684:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = remoteVersionToReport[3];
    d686:	4bb1      	ldr	r3, [pc, #708]	; (d94c <usart_read_callback+0x39c>)
    d688:	78da      	ldrb	r2, [r3, #3]
    d68a:	4ba9      	ldr	r3, [pc, #676]	; (d930 <usart_read_callback+0x380>)
    d68c:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d68e:	4ba8      	ldr	r3, [pc, #672]	; (d930 <usart_read_callback+0x380>)
    d690:	220d      	movs	r2, #13
    d692:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);												
    d694:	4ba6      	ldr	r3, [pc, #664]	; (d930 <usart_read_callback+0x380>)
    d696:	1c18      	adds	r0, r3, #0
    d698:	210b      	movs	r1, #11
    d69a:	2201      	movs	r2, #1
    d69c:	4bac      	ldr	r3, [pc, #688]	; (d950 <usart_read_callback+0x3a0>)
    d69e:	4798      	blx	r3
				break;
    d6a0:	f000 fcce 	bl	e040 <usart_read_callback+0xa90>
			}
			case COMMAND_BV:
			{
				txBluetoothBuffer[1] = 0;
    d6a4:	4ba2      	ldr	r3, [pc, #648]	; (d930 <usart_read_callback+0x380>)
    d6a6:	2200      	movs	r2, #0
    d6a8:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d6aa:	4ba1      	ldr	r3, [pc, #644]	; (d930 <usart_read_callback+0x380>)
    d6ac:	2209      	movs	r2, #9
    d6ae:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'b';
    d6b0:	4b9f      	ldr	r3, [pc, #636]	; (d930 <usart_read_callback+0x380>)
    d6b2:	2262      	movs	r2, #98	; 0x62
    d6b4:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'v';
    d6b6:	4b9e      	ldr	r3, [pc, #632]	; (d930 <usart_read_callback+0x380>)
    d6b8:	2276      	movs	r2, #118	; 0x76
    d6ba:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    d6bc:	4b9c      	ldr	r3, [pc, #624]	; (d930 <usart_read_callback+0x380>)
    d6be:	2230      	movs	r2, #48	; 0x30
    d6c0:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    d6c2:	4b9b      	ldr	r3, [pc, #620]	; (d930 <usart_read_callback+0x380>)
    d6c4:	2231      	movs	r2, #49	; 0x31
    d6c6:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = '.';
    d6c8:	4b99      	ldr	r3, [pc, #612]	; (d930 <usart_read_callback+0x380>)
    d6ca:	222e      	movs	r2, #46	; 0x2e
    d6cc:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = FWVER1;
    d6ce:	4b98      	ldr	r3, [pc, #608]	; (d930 <usart_read_callback+0x380>)
    d6d0:	2236      	movs	r2, #54	; 0x36
    d6d2:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = FWVER0;
    d6d4:	4b96      	ldr	r3, [pc, #600]	; (d930 <usart_read_callback+0x380>)
    d6d6:	2234      	movs	r2, #52	; 0x34
    d6d8:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d6da:	4b95      	ldr	r3, [pc, #596]	; (d930 <usart_read_callback+0x380>)
    d6dc:	220d      	movs	r2, #13
    d6de:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    d6e0:	4b93      	ldr	r3, [pc, #588]	; (d930 <usart_read_callback+0x380>)
    d6e2:	1c18      	adds	r0, r3, #0
    d6e4:	210b      	movs	r1, #11
    d6e6:	2201      	movs	r2, #1
    d6e8:	4b99      	ldr	r3, [pc, #612]	; (d950 <usart_read_callback+0x3a0>)
    d6ea:	4798      	blx	r3
				break;
    d6ec:	f000 fca8 	bl	e040 <usart_read_callback+0xa90>
			}	
			case COMMAND_DB:
			{
				downloadPacketNumber = general_buffer[5];
    d6f0:	4b8e      	ldr	r3, [pc, #568]	; (d92c <usart_read_callback+0x37c>)
    d6f2:	795a      	ldrb	r2, [r3, #5]
    d6f4:	4b97      	ldr	r3, [pc, #604]	; (d954 <usart_read_callback+0x3a4>)
    d6f6:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    d6f8:	4b96      	ldr	r3, [pc, #600]	; (d954 <usart_read_callback+0x3a4>)
    d6fa:	781b      	ldrb	r3, [r3, #0]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d000      	beq.n	d702 <usart_read_callback+0x152>
    d700:	e08e      	b.n	d820 <usart_read_callback+0x270>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    d702:	4b8a      	ldr	r3, [pc, #552]	; (d92c <usart_read_callback+0x37c>)
    d704:	799b      	ldrb	r3, [r3, #6]
    d706:	061b      	lsls	r3, r3, #24
    d708:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    d70a:	4b88      	ldr	r3, [pc, #544]	; (d92c <usart_read_callback+0x37c>)
    d70c:	79db      	ldrb	r3, [r3, #7]
    d70e:	041b      	lsls	r3, r3, #16
    d710:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    d712:	693a      	ldr	r2, [r7, #16]
    d714:	68fb      	ldr	r3, [r7, #12]
    d716:	4313      	orrs	r3, r2
    d718:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    d71a:	4b84      	ldr	r3, [pc, #528]	; (d92c <usart_read_callback+0x37c>)
    d71c:	7a1b      	ldrb	r3, [r3, #8]
    d71e:	021b      	lsls	r3, r3, #8
    d720:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d722:	693a      	ldr	r2, [r7, #16]
    d724:	68fb      	ldr	r3, [r7, #12]
    d726:	4313      	orrs	r3, r2
    d728:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    d72a:	4b80      	ldr	r3, [pc, #512]	; (d92c <usart_read_callback+0x37c>)
    d72c:	7a5b      	ldrb	r3, [r3, #9]
    d72e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    d730:	693a      	ldr	r2, [r7, #16]
    d732:	68fb      	ldr	r3, [r7, #12]
    d734:	4313      	orrs	r3, r2
    d736:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp; 
    d738:	4b87      	ldr	r3, [pc, #540]	; (d958 <usart_read_callback+0x3a8>)
    d73a:	693a      	ldr	r2, [r7, #16]
    d73c:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    d73e:	4b7b      	ldr	r3, [pc, #492]	; (d92c <usart_read_callback+0x37c>)
    d740:	7a9b      	ldrb	r3, [r3, #10]
    d742:	061b      	lsls	r3, r3, #24
    d744:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    d746:	4b79      	ldr	r3, [pc, #484]	; (d92c <usart_read_callback+0x37c>)
    d748:	7adb      	ldrb	r3, [r3, #11]
    d74a:	041b      	lsls	r3, r3, #16
    d74c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d74e:	693a      	ldr	r2, [r7, #16]
    d750:	68fb      	ldr	r3, [r7, #12]
    d752:	4313      	orrs	r3, r2
    d754:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    d756:	4b75      	ldr	r3, [pc, #468]	; (d92c <usart_read_callback+0x37c>)
    d758:	7b1b      	ldrb	r3, [r3, #12]
    d75a:	021b      	lsls	r3, r3, #8
    d75c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d75e:	693a      	ldr	r2, [r7, #16]
    d760:	68fb      	ldr	r3, [r7, #12]
    d762:	4313      	orrs	r3, r2
    d764:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    d766:	4b71      	ldr	r3, [pc, #452]	; (d92c <usart_read_callback+0x37c>)
    d768:	7b5b      	ldrb	r3, [r3, #13]
    d76a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d76c:	693a      	ldr	r2, [r7, #16]
    d76e:	68fb      	ldr	r3, [r7, #12]
    d770:	4313      	orrs	r3, r2
    d772:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;					
    d774:	4b78      	ldr	r3, [pc, #480]	; (d958 <usart_read_callback+0x3a8>)
    d776:	693a      	ldr	r2, [r7, #16]
    d778:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    d77a:	4b6c      	ldr	r3, [pc, #432]	; (d92c <usart_read_callback+0x37c>)
    d77c:	7b9b      	ldrb	r3, [r3, #14]
    d77e:	061b      	lsls	r3, r3, #24
    d780:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    d782:	4b6a      	ldr	r3, [pc, #424]	; (d92c <usart_read_callback+0x37c>)
    d784:	7bdb      	ldrb	r3, [r3, #15]
    d786:	041b      	lsls	r3, r3, #16
    d788:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d78a:	693a      	ldr	r2, [r7, #16]
    d78c:	68fb      	ldr	r3, [r7, #12]
    d78e:	4313      	orrs	r3, r2
    d790:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    d792:	4b66      	ldr	r3, [pc, #408]	; (d92c <usart_read_callback+0x37c>)
    d794:	7c1b      	ldrb	r3, [r3, #16]
    d796:	021b      	lsls	r3, r3, #8
    d798:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d79a:	693a      	ldr	r2, [r7, #16]
    d79c:	68fb      	ldr	r3, [r7, #12]
    d79e:	4313      	orrs	r3, r2
    d7a0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    d7a2:	4b62      	ldr	r3, [pc, #392]	; (d92c <usart_read_callback+0x37c>)
    d7a4:	7c5b      	ldrb	r3, [r3, #17]
    d7a6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d7a8:	693a      	ldr	r2, [r7, #16]
    d7aa:	68fb      	ldr	r3, [r7, #12]
    d7ac:	4313      	orrs	r3, r2
    d7ae:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;	
    d7b0:	4b69      	ldr	r3, [pc, #420]	; (d958 <usart_read_callback+0x3a8>)
    d7b2:	693a      	ldr	r2, [r7, #16]
    d7b4:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    d7b6:	4b5d      	ldr	r3, [pc, #372]	; (d92c <usart_read_callback+0x37c>)
    d7b8:	7c9b      	ldrb	r3, [r3, #18]
    d7ba:	061b      	lsls	r3, r3, #24
    d7bc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    d7be:	4b5b      	ldr	r3, [pc, #364]	; (d92c <usart_read_callback+0x37c>)
    d7c0:	7cdb      	ldrb	r3, [r3, #19]
    d7c2:	041b      	lsls	r3, r3, #16
    d7c4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d7c6:	693a      	ldr	r2, [r7, #16]
    d7c8:	68fb      	ldr	r3, [r7, #12]
    d7ca:	4313      	orrs	r3, r2
    d7cc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    d7ce:	4b57      	ldr	r3, [pc, #348]	; (d92c <usart_read_callback+0x37c>)
    d7d0:	7d1b      	ldrb	r3, [r3, #20]
    d7d2:	021b      	lsls	r3, r3, #8
    d7d4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d7d6:	693a      	ldr	r2, [r7, #16]
    d7d8:	68fb      	ldr	r3, [r7, #12]
    d7da:	4313      	orrs	r3, r2
    d7dc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    d7de:	4b53      	ldr	r3, [pc, #332]	; (d92c <usart_read_callback+0x37c>)
    d7e0:	7d5b      	ldrb	r3, [r3, #21]
    d7e2:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d7e4:	693a      	ldr	r2, [r7, #16]
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	4313      	orrs	r3, r2
    d7ea:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;		
    d7ec:	4b5a      	ldr	r3, [pc, #360]	; (d958 <usart_read_callback+0x3a8>)
    d7ee:	693a      	ldr	r2, [r7, #16]
    d7f0:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    d7f2:	4b4e      	ldr	r3, [pc, #312]	; (d92c <usart_read_callback+0x37c>)
    d7f4:	7d9a      	ldrb	r2, [r3, #22]
    d7f6:	4b59      	ldr	r3, [pc, #356]	; (d95c <usart_read_callback+0x3ac>)
    d7f8:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    d7fa:	4b59      	ldr	r3, [pc, #356]	; (d960 <usart_read_callback+0x3b0>)
    d7fc:	2200      	movs	r2, #0
    d7fe:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    d800:	4b58      	ldr	r3, [pc, #352]	; (d964 <usart_read_callback+0x3b4>)
    d802:	2201      	movs	r2, #1
    d804:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    d806:	4b58      	ldr	r3, [pc, #352]	; (d968 <usart_read_callback+0x3b8>)
    d808:	2200      	movs	r2, #0
    d80a:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    d80c:	4b57      	ldr	r3, [pc, #348]	; (d96c <usart_read_callback+0x3bc>)
    d80e:	2200      	movs	r2, #0
    d810:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    d812:	4b56      	ldr	r3, [pc, #344]	; (d96c <usart_read_callback+0x3bc>)
    d814:	2200      	movs	r2, #0
    d816:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0; 					
    d818:	4b54      	ldr	r3, [pc, #336]	; (d96c <usart_read_callback+0x3bc>)
    d81a:	2200      	movs	r2, #0
    d81c:	609a      	str	r2, [r3, #8]
    d81e:	e058      	b.n	d8d2 <usart_read_callback+0x322>
				}
				else
				{
					itemp = general_buffer[1];
    d820:	4b42      	ldr	r3, [pc, #264]	; (d92c <usart_read_callback+0x37c>)
    d822:	785a      	ldrb	r2, [r3, #1]
    d824:	1c3b      	adds	r3, r7, #0
    d826:	3316      	adds	r3, #22
    d828:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    d82a:	1c3b      	adds	r3, r7, #0
    d82c:	3316      	adds	r3, #22
    d82e:	1c3a      	adds	r2, r7, #0
    d830:	3216      	adds	r2, #22
    d832:	8812      	ldrh	r2, [r2, #0]
    d834:	0212      	lsls	r2, r2, #8
    d836:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    d838:	4b3c      	ldr	r3, [pc, #240]	; (d92c <usart_read_callback+0x37c>)
    d83a:	789a      	ldrb	r2, [r3, #2]
    d83c:	1c3b      	adds	r3, r7, #0
    d83e:	3314      	adds	r3, #20
    d840:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    d842:	1c3b      	adds	r3, r7, #0
    d844:	3316      	adds	r3, #22
    d846:	1c39      	adds	r1, r7, #0
    d848:	3116      	adds	r1, #22
    d84a:	1c3a      	adds	r2, r7, #0
    d84c:	3214      	adds	r2, #20
    d84e:	8809      	ldrh	r1, [r1, #0]
    d850:	8812      	ldrh	r2, [r2, #0]
    d852:	430a      	orrs	r2, r1
    d854:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    d856:	1c3b      	adds	r3, r7, #0
    d858:	3316      	adds	r3, #22
    d85a:	1c3a      	adds	r2, r7, #0
    d85c:	3216      	adds	r2, #22
    d85e:	8812      	ldrh	r2, [r2, #0]
    d860:	3a07      	subs	r2, #7
    d862:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    d864:	4b3b      	ldr	r3, [pc, #236]	; (d954 <usart_read_callback+0x3a4>)
    d866:	781a      	ldrb	r2, [r3, #0]
    d868:	4b3e      	ldr	r3, [pc, #248]	; (d964 <usart_read_callback+0x3b4>)
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	429a      	cmp	r2, r3
    d86e:	d130      	bne.n	d8d2 <usart_read_callback+0x322>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    d870:	4b38      	ldr	r3, [pc, #224]	; (d954 <usart_read_callback+0x3a4>)
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	1c1a      	adds	r2, r3, #0
    d876:	4b39      	ldr	r3, [pc, #228]	; (d95c <usart_read_callback+0x3ac>)
    d878:	781b      	ldrb	r3, [r3, #0]
    d87a:	3301      	adds	r3, #1
    d87c:	429a      	cmp	r2, r3
    d87e:	da0d      	bge.n	d89c <usart_read_callback+0x2ec>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    d880:	4b39      	ldr	r3, [pc, #228]	; (d968 <usart_read_callback+0x3b8>)
    d882:	681b      	ldr	r3, [r3, #0]
    d884:	2284      	movs	r2, #132	; 0x84
    d886:	0292      	lsls	r2, r2, #10
    d888:	1899      	adds	r1, r3, r2
    d88a:	4a39      	ldr	r2, [pc, #228]	; (d970 <usart_read_callback+0x3c0>)
    d88c:	1c3b      	adds	r3, r7, #0
    d88e:	3316      	adds	r3, #22
    d890:	881b      	ldrh	r3, [r3, #0]
    d892:	1c08      	adds	r0, r1, #0
    d894:	1c11      	adds	r1, r2, #0
    d896:	1c1a      	adds	r2, r3, #0
    d898:	4b36      	ldr	r3, [pc, #216]	; (d974 <usart_read_callback+0x3c4>)
    d89a:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    d89c:	4b2d      	ldr	r3, [pc, #180]	; (d954 <usart_read_callback+0x3a4>)
    d89e:	781a      	ldrb	r2, [r3, #0]
    d8a0:	4b2e      	ldr	r3, [pc, #184]	; (d95c <usart_read_callback+0x3ac>)
    d8a2:	781b      	ldrb	r3, [r3, #0]
    d8a4:	429a      	cmp	r2, r3
    d8a6:	d106      	bne.n	d8b6 <usart_read_callback+0x306>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    d8a8:	4b33      	ldr	r3, [pc, #204]	; (d978 <usart_read_callback+0x3c8>)
    d8aa:	681b      	ldr	r3, [r3, #0]
    d8ac:	2280      	movs	r2, #128	; 0x80
    d8ae:	01d2      	lsls	r2, r2, #7
    d8b0:	431a      	orrs	r2, r3
    d8b2:	4b31      	ldr	r3, [pc, #196]	; (d978 <usart_read_callback+0x3c8>)
    d8b4:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    d8b6:	1c3b      	adds	r3, r7, #0
    d8b8:	3316      	adds	r3, #22
    d8ba:	881a      	ldrh	r2, [r3, #0]
    d8bc:	4b2a      	ldr	r3, [pc, #168]	; (d968 <usart_read_callback+0x3b8>)
    d8be:	681b      	ldr	r3, [r3, #0]
    d8c0:	18d2      	adds	r2, r2, r3
    d8c2:	4b29      	ldr	r3, [pc, #164]	; (d968 <usart_read_callback+0x3b8>)
    d8c4:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    d8c6:	4b27      	ldr	r3, [pc, #156]	; (d964 <usart_read_callback+0x3b4>)
    d8c8:	781b      	ldrb	r3, [r3, #0]
    d8ca:	3301      	adds	r3, #1
    d8cc:	b2da      	uxtb	r2, r3
    d8ce:	4b25      	ldr	r3, [pc, #148]	; (d964 <usart_read_callback+0x3b4>)
    d8d0:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    d8d2:	4b17      	ldr	r3, [pc, #92]	; (d930 <usart_read_callback+0x380>)
    d8d4:	2200      	movs	r2, #0
    d8d6:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    d8d8:	4b15      	ldr	r3, [pc, #84]	; (d930 <usart_read_callback+0x380>)
    d8da:	2209      	movs	r2, #9
    d8dc:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    d8de:	4b14      	ldr	r3, [pc, #80]	; (d930 <usart_read_callback+0x380>)
    d8e0:	2264      	movs	r2, #100	; 0x64
    d8e2:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'b';
    d8e4:	4b12      	ldr	r3, [pc, #72]	; (d930 <usart_read_callback+0x380>)
    d8e6:	2262      	movs	r2, #98	; 0x62
    d8e8:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    d8ea:	4b11      	ldr	r3, [pc, #68]	; (d930 <usart_read_callback+0x380>)
    d8ec:	2230      	movs	r2, #48	; 0x30
    d8ee:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    d8f0:	4b0f      	ldr	r3, [pc, #60]	; (d930 <usart_read_callback+0x380>)
    d8f2:	2231      	movs	r2, #49	; 0x31
    d8f4:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    d8f6:	4b17      	ldr	r3, [pc, #92]	; (d954 <usart_read_callback+0x3a4>)
    d8f8:	781a      	ldrb	r2, [r3, #0]
    d8fa:	4b0d      	ldr	r3, [pc, #52]	; (d930 <usart_read_callback+0x380>)
    d8fc:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    d8fe:	4b17      	ldr	r3, [pc, #92]	; (d95c <usart_read_callback+0x3ac>)
    d900:	781a      	ldrb	r2, [r3, #0]
    d902:	4b0b      	ldr	r3, [pc, #44]	; (d930 <usart_read_callback+0x380>)
    d904:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    d906:	4b0a      	ldr	r3, [pc, #40]	; (d930 <usart_read_callback+0x380>)
    d908:	2200      	movs	r2, #0
    d90a:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    d90c:	4b08      	ldr	r3, [pc, #32]	; (d930 <usart_read_callback+0x380>)
    d90e:	220d      	movs	r2, #13
    d910:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    d912:	4b07      	ldr	r3, [pc, #28]	; (d930 <usart_read_callback+0x380>)
    d914:	1c18      	adds	r0, r3, #0
    d916:	210b      	movs	r1, #11
    d918:	2201      	movs	r2, #1
    d91a:	4b0d      	ldr	r3, [pc, #52]	; (d950 <usart_read_callback+0x3a0>)
    d91c:	4798      	blx	r3
				break;
    d91e:	e38f      	b.n	e040 <usart_read_callback+0xa90>
    d920:	2000066b 	.word	0x2000066b
    d924:	200034bc 	.word	0x200034bc
    d928:	200034b8 	.word	0x200034b8
    d92c:	20000a8c 	.word	0x20000a8c
    d930:	2000350c 	.word	0x2000350c
    d934:	00004443 	.word	0x00004443
    d938:	00004256 	.word	0x00004256
    d93c:	00004442 	.word	0x00004442
    d940:	00004453 	.word	0x00004453
    d944:	00005256 	.word	0x00005256
    d948:	00004452 	.word	0x00004452
    d94c:	20002efc 	.word	0x20002efc
    d950:	0000e205 	.word	0x0000e205
    d954:	20003539 	.word	0x20003539
    d958:	2000353c 	.word	0x2000353c
    d95c:	20003509 	.word	0x20003509
    d960:	2000350a 	.word	0x2000350a
    d964:	20003538 	.word	0x20003538
    d968:	20003534 	.word	0x20003534
    d96c:	200034ec 	.word	0x200034ec
    d970:	20000a92 	.word	0x20000a92
    d974:	0000ca4d 	.word	0x0000ca4d
    d978:	2000369c 	.word	0x2000369c
			}			
			case COMMAND_DR:
			{
				downloadPacketNumber = general_buffer[5];
    d97c:	4bd7      	ldr	r3, [pc, #860]	; (dcdc <usart_read_callback+0x72c>)
    d97e:	795a      	ldrb	r2, [r3, #5]
    d980:	4bd7      	ldr	r3, [pc, #860]	; (dce0 <usart_read_callback+0x730>)
    d982:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer; 
				//----------------------------
				if (downloadPacketNumber == 0)
    d984:	4bd6      	ldr	r3, [pc, #856]	; (dce0 <usart_read_callback+0x730>)
    d986:	781b      	ldrb	r3, [r3, #0]
    d988:	2b00      	cmp	r3, #0
    d98a:	d000      	beq.n	d98e <usart_read_callback+0x3de>
    d98c:	e08e      	b.n	daac <usart_read_callback+0x4fc>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    d98e:	4bd3      	ldr	r3, [pc, #844]	; (dcdc <usart_read_callback+0x72c>)
    d990:	799b      	ldrb	r3, [r3, #6]
    d992:	061b      	lsls	r3, r3, #24
    d994:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16; 
    d996:	4bd1      	ldr	r3, [pc, #836]	; (dcdc <usart_read_callback+0x72c>)
    d998:	79db      	ldrb	r3, [r3, #7]
    d99a:	041b      	lsls	r3, r3, #16
    d99c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2; 
    d99e:	693a      	ldr	r2, [r7, #16]
    d9a0:	68fb      	ldr	r3, [r7, #12]
    d9a2:	4313      	orrs	r3, r2
    d9a4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    d9a6:	4bcd      	ldr	r3, [pc, #820]	; (dcdc <usart_read_callback+0x72c>)
    d9a8:	7a1b      	ldrb	r3, [r3, #8]
    d9aa:	021b      	lsls	r3, r3, #8
    d9ac:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d9ae:	693a      	ldr	r2, [r7, #16]
    d9b0:	68fb      	ldr	r3, [r7, #12]
    d9b2:	4313      	orrs	r3, r2
    d9b4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    d9b6:	4bc9      	ldr	r3, [pc, #804]	; (dcdc <usart_read_callback+0x72c>)
    d9b8:	7a5b      	ldrb	r3, [r3, #9]
    d9ba:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;										
    d9bc:	693a      	ldr	r2, [r7, #16]
    d9be:	68fb      	ldr	r3, [r7, #12]
    d9c0:	4313      	orrs	r3, r2
    d9c2:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp; 
    d9c4:	4bc7      	ldr	r3, [pc, #796]	; (dce4 <usart_read_callback+0x734>)
    d9c6:	693a      	ldr	r2, [r7, #16]
    d9c8:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    d9ca:	4bc4      	ldr	r3, [pc, #784]	; (dcdc <usart_read_callback+0x72c>)
    d9cc:	7a9b      	ldrb	r3, [r3, #10]
    d9ce:	061b      	lsls	r3, r3, #24
    d9d0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    d9d2:	4bc2      	ldr	r3, [pc, #776]	; (dcdc <usart_read_callback+0x72c>)
    d9d4:	7adb      	ldrb	r3, [r3, #11]
    d9d6:	041b      	lsls	r3, r3, #16
    d9d8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d9da:	693a      	ldr	r2, [r7, #16]
    d9dc:	68fb      	ldr	r3, [r7, #12]
    d9de:	4313      	orrs	r3, r2
    d9e0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    d9e2:	4bbe      	ldr	r3, [pc, #760]	; (dcdc <usart_read_callback+0x72c>)
    d9e4:	7b1b      	ldrb	r3, [r3, #12]
    d9e6:	021b      	lsls	r3, r3, #8
    d9e8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d9ea:	693a      	ldr	r2, [r7, #16]
    d9ec:	68fb      	ldr	r3, [r7, #12]
    d9ee:	4313      	orrs	r3, r2
    d9f0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    d9f2:	4bba      	ldr	r3, [pc, #744]	; (dcdc <usart_read_callback+0x72c>)
    d9f4:	7b5b      	ldrb	r3, [r3, #13]
    d9f6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    d9f8:	693a      	ldr	r2, [r7, #16]
    d9fa:	68fb      	ldr	r3, [r7, #12]
    d9fc:	4313      	orrs	r3, r2
    d9fe:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;					
    da00:	4bb8      	ldr	r3, [pc, #736]	; (dce4 <usart_read_callback+0x734>)
    da02:	693a      	ldr	r2, [r7, #16]
    da04:	601a      	str	r2, [r3, #0]
					//----------build checksum start 
					ltemp = general_buffer[14]<<24;
    da06:	4bb5      	ldr	r3, [pc, #724]	; (dcdc <usart_read_callback+0x72c>)
    da08:	7b9b      	ldrb	r3, [r3, #14]
    da0a:	061b      	lsls	r3, r3, #24
    da0c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    da0e:	4bb3      	ldr	r3, [pc, #716]	; (dcdc <usart_read_callback+0x72c>)
    da10:	7bdb      	ldrb	r3, [r3, #15]
    da12:	041b      	lsls	r3, r3, #16
    da14:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da16:	693a      	ldr	r2, [r7, #16]
    da18:	68fb      	ldr	r3, [r7, #12]
    da1a:	4313      	orrs	r3, r2
    da1c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    da1e:	4baf      	ldr	r3, [pc, #700]	; (dcdc <usart_read_callback+0x72c>)
    da20:	7c1b      	ldrb	r3, [r3, #16]
    da22:	021b      	lsls	r3, r3, #8
    da24:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da26:	693a      	ldr	r2, [r7, #16]
    da28:	68fb      	ldr	r3, [r7, #12]
    da2a:	4313      	orrs	r3, r2
    da2c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    da2e:	4bab      	ldr	r3, [pc, #684]	; (dcdc <usart_read_callback+0x72c>)
    da30:	7c5b      	ldrb	r3, [r3, #17]
    da32:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da34:	693a      	ldr	r2, [r7, #16]
    da36:	68fb      	ldr	r3, [r7, #12]
    da38:	4313      	orrs	r3, r2
    da3a:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;	
    da3c:	4ba9      	ldr	r3, [pc, #676]	; (dce4 <usart_read_callback+0x734>)
    da3e:	693a      	ldr	r2, [r7, #16]
    da40:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    da42:	4ba6      	ldr	r3, [pc, #664]	; (dcdc <usart_read_callback+0x72c>)
    da44:	7c9b      	ldrb	r3, [r3, #18]
    da46:	061b      	lsls	r3, r3, #24
    da48:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    da4a:	4ba4      	ldr	r3, [pc, #656]	; (dcdc <usart_read_callback+0x72c>)
    da4c:	7cdb      	ldrb	r3, [r3, #19]
    da4e:	041b      	lsls	r3, r3, #16
    da50:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da52:	693a      	ldr	r2, [r7, #16]
    da54:	68fb      	ldr	r3, [r7, #12]
    da56:	4313      	orrs	r3, r2
    da58:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    da5a:	4ba0      	ldr	r3, [pc, #640]	; (dcdc <usart_read_callback+0x72c>)
    da5c:	7d1b      	ldrb	r3, [r3, #20]
    da5e:	021b      	lsls	r3, r3, #8
    da60:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da62:	693a      	ldr	r2, [r7, #16]
    da64:	68fb      	ldr	r3, [r7, #12]
    da66:	4313      	orrs	r3, r2
    da68:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    da6a:	4b9c      	ldr	r3, [pc, #624]	; (dcdc <usart_read_callback+0x72c>)
    da6c:	7d5b      	ldrb	r3, [r3, #21]
    da6e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    da70:	693a      	ldr	r2, [r7, #16]
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	4313      	orrs	r3, r2
    da76:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;		
    da78:	4b9a      	ldr	r3, [pc, #616]	; (dce4 <usart_read_callback+0x734>)
    da7a:	693a      	ldr	r2, [r7, #16]
    da7c:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];			
    da7e:	4b97      	ldr	r3, [pc, #604]	; (dcdc <usart_read_callback+0x72c>)
    da80:	7d9a      	ldrb	r2, [r3, #22]
    da82:	4b99      	ldr	r3, [pc, #612]	; (dce8 <usart_read_callback+0x738>)
    da84:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    da86:	4b99      	ldr	r3, [pc, #612]	; (dcec <usart_read_callback+0x73c>)
    da88:	2200      	movs	r2, #0
    da8a:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    da8c:	4b98      	ldr	r3, [pc, #608]	; (dcf0 <usart_read_callback+0x740>)
    da8e:	2201      	movs	r2, #1
    da90:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;		
    da92:	4b98      	ldr	r3, [pc, #608]	; (dcf4 <usart_read_callback+0x744>)
    da94:	2200      	movs	r2, #0
    da96:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    da98:	4b97      	ldr	r3, [pc, #604]	; (dcf8 <usart_read_callback+0x748>)
    da9a:	2200      	movs	r2, #0
    da9c:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    da9e:	4b96      	ldr	r3, [pc, #600]	; (dcf8 <usart_read_callback+0x748>)
    daa0:	2200      	movs	r2, #0
    daa2:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0; 					
    daa4:	4b94      	ldr	r3, [pc, #592]	; (dcf8 <usart_read_callback+0x748>)
    daa6:	2200      	movs	r2, #0
    daa8:	609a      	str	r2, [r3, #8]
    daaa:	e058      	b.n	db5e <usart_read_callback+0x5ae>
				}
				else
				{
					itemp = general_buffer[1];
    daac:	4b8b      	ldr	r3, [pc, #556]	; (dcdc <usart_read_callback+0x72c>)
    daae:	785a      	ldrb	r2, [r3, #1]
    dab0:	1c3b      	adds	r3, r7, #0
    dab2:	3316      	adds	r3, #22
    dab4:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    dab6:	1c3b      	adds	r3, r7, #0
    dab8:	3316      	adds	r3, #22
    daba:	1c3a      	adds	r2, r7, #0
    dabc:	3216      	adds	r2, #22
    dabe:	8812      	ldrh	r2, [r2, #0]
    dac0:	0212      	lsls	r2, r2, #8
    dac2:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    dac4:	4b85      	ldr	r3, [pc, #532]	; (dcdc <usart_read_callback+0x72c>)
    dac6:	789a      	ldrb	r2, [r3, #2]
    dac8:	1c3b      	adds	r3, r7, #0
    daca:	3314      	adds	r3, #20
    dacc:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    dace:	1c3b      	adds	r3, r7, #0
    dad0:	3316      	adds	r3, #22
    dad2:	1c39      	adds	r1, r7, #0
    dad4:	3116      	adds	r1, #22
    dad6:	1c3a      	adds	r2, r7, #0
    dad8:	3214      	adds	r2, #20
    dada:	8809      	ldrh	r1, [r1, #0]
    dadc:	8812      	ldrh	r2, [r2, #0]
    dade:	430a      	orrs	r2, r1
    dae0:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    dae2:	1c3b      	adds	r3, r7, #0
    dae4:	3316      	adds	r3, #22
    dae6:	1c3a      	adds	r2, r7, #0
    dae8:	3216      	adds	r2, #22
    daea:	8812      	ldrh	r2, [r2, #0]
    daec:	3a07      	subs	r2, #7
    daee:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    daf0:	4b7b      	ldr	r3, [pc, #492]	; (dce0 <usart_read_callback+0x730>)
    daf2:	781a      	ldrb	r2, [r3, #0]
    daf4:	4b7e      	ldr	r3, [pc, #504]	; (dcf0 <usart_read_callback+0x740>)
    daf6:	781b      	ldrb	r3, [r3, #0]
    daf8:	429a      	cmp	r2, r3
    dafa:	d130      	bne.n	db5e <usart_read_callback+0x5ae>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    dafc:	4b78      	ldr	r3, [pc, #480]	; (dce0 <usart_read_callback+0x730>)
    dafe:	781b      	ldrb	r3, [r3, #0]
    db00:	1c1a      	adds	r2, r3, #0
    db02:	4b79      	ldr	r3, [pc, #484]	; (dce8 <usart_read_callback+0x738>)
    db04:	781b      	ldrb	r3, [r3, #0]
    db06:	3301      	adds	r3, #1
    db08:	429a      	cmp	r2, r3
    db0a:	da0d      	bge.n	db28 <usart_read_callback+0x578>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    db0c:	4b79      	ldr	r3, [pc, #484]	; (dcf4 <usart_read_callback+0x744>)
    db0e:	681b      	ldr	r3, [r3, #0]
    db10:	2284      	movs	r2, #132	; 0x84
    db12:	0292      	lsls	r2, r2, #10
    db14:	1899      	adds	r1, r3, r2
    db16:	4a79      	ldr	r2, [pc, #484]	; (dcfc <usart_read_callback+0x74c>)
    db18:	1c3b      	adds	r3, r7, #0
    db1a:	3316      	adds	r3, #22
    db1c:	881b      	ldrh	r3, [r3, #0]
    db1e:	1c08      	adds	r0, r1, #0
    db20:	1c11      	adds	r1, r2, #0
    db22:	1c1a      	adds	r2, r3, #0
    db24:	4b76      	ldr	r3, [pc, #472]	; (dd00 <usart_read_callback+0x750>)
    db26:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    db28:	4b6d      	ldr	r3, [pc, #436]	; (dce0 <usart_read_callback+0x730>)
    db2a:	781a      	ldrb	r2, [r3, #0]
    db2c:	4b6e      	ldr	r3, [pc, #440]	; (dce8 <usart_read_callback+0x738>)
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	429a      	cmp	r2, r3
    db32:	d106      	bne.n	db42 <usart_read_callback+0x592>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE; 
    db34:	4b73      	ldr	r3, [pc, #460]	; (dd04 <usart_read_callback+0x754>)
    db36:	681b      	ldr	r3, [r3, #0]
    db38:	2280      	movs	r2, #128	; 0x80
    db3a:	01d2      	lsls	r2, r2, #7
    db3c:	431a      	orrs	r2, r3
    db3e:	4b71      	ldr	r3, [pc, #452]	; (dd04 <usart_read_callback+0x754>)
    db40:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp; 
    db42:	1c3b      	adds	r3, r7, #0
    db44:	3316      	adds	r3, #22
    db46:	881a      	ldrh	r2, [r3, #0]
    db48:	4b6a      	ldr	r3, [pc, #424]	; (dcf4 <usart_read_callback+0x744>)
    db4a:	681b      	ldr	r3, [r3, #0]
    db4c:	18d2      	adds	r2, r2, r3
    db4e:	4b69      	ldr	r3, [pc, #420]	; (dcf4 <usart_read_callback+0x744>)
    db50:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    db52:	4b67      	ldr	r3, [pc, #412]	; (dcf0 <usart_read_callback+0x740>)
    db54:	781b      	ldrb	r3, [r3, #0]
    db56:	3301      	adds	r3, #1
    db58:	b2da      	uxtb	r2, r3
    db5a:	4b65      	ldr	r3, [pc, #404]	; (dcf0 <usart_read_callback+0x740>)
    db5c:	701a      	strb	r2, [r3, #0]
						
					}	
				}
				txBluetoothBuffer[1] = 0;
    db5e:	4b6a      	ldr	r3, [pc, #424]	; (dd08 <usart_read_callback+0x758>)
    db60:	2200      	movs	r2, #0
    db62:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    db64:	4b68      	ldr	r3, [pc, #416]	; (dd08 <usart_read_callback+0x758>)
    db66:	2209      	movs	r2, #9
    db68:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    db6a:	4b67      	ldr	r3, [pc, #412]	; (dd08 <usart_read_callback+0x758>)
    db6c:	2264      	movs	r2, #100	; 0x64
    db6e:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'r';
    db70:	4b65      	ldr	r3, [pc, #404]	; (dd08 <usart_read_callback+0x758>)
    db72:	2272      	movs	r2, #114	; 0x72
    db74:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    db76:	4b64      	ldr	r3, [pc, #400]	; (dd08 <usart_read_callback+0x758>)
    db78:	2230      	movs	r2, #48	; 0x30
    db7a:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    db7c:	4b62      	ldr	r3, [pc, #392]	; (dd08 <usart_read_callback+0x758>)
    db7e:	2231      	movs	r2, #49	; 0x31
    db80:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    db82:	4b57      	ldr	r3, [pc, #348]	; (dce0 <usart_read_callback+0x730>)
    db84:	781a      	ldrb	r2, [r3, #0]
    db86:	4b60      	ldr	r3, [pc, #384]	; (dd08 <usart_read_callback+0x758>)
    db88:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount; 
    db8a:	4b57      	ldr	r3, [pc, #348]	; (dce8 <usart_read_callback+0x738>)
    db8c:	781a      	ldrb	r2, [r3, #0]
    db8e:	4b5e      	ldr	r3, [pc, #376]	; (dd08 <usart_read_callback+0x758>)
    db90:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    db92:	4b5d      	ldr	r3, [pc, #372]	; (dd08 <usart_read_callback+0x758>)
    db94:	2200      	movs	r2, #0
    db96:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    db98:	4b5b      	ldr	r3, [pc, #364]	; (dd08 <usart_read_callback+0x758>)
    db9a:	220d      	movs	r2, #13
    db9c:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    db9e:	4b5a      	ldr	r3, [pc, #360]	; (dd08 <usart_read_callback+0x758>)
    dba0:	1c18      	adds	r0, r3, #0
    dba2:	210b      	movs	r1, #11
    dba4:	2201      	movs	r2, #1
    dba6:	4b59      	ldr	r3, [pc, #356]	; (dd0c <usart_read_callback+0x75c>)
    dba8:	4798      	blx	r3
				break;
    dbaa:	e249      	b.n	e040 <usart_read_callback+0xa90>
			}		
//----------------------- second generation 
			case COMMAND_DC:
			{
				downloadPacketNumber = general_buffer[5];
    dbac:	4b4b      	ldr	r3, [pc, #300]	; (dcdc <usart_read_callback+0x72c>)
    dbae:	795a      	ldrb	r2, [r3, #5]
    dbb0:	4b4b      	ldr	r3, [pc, #300]	; (dce0 <usart_read_callback+0x730>)
    dbb2:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    dbb4:	4b4a      	ldr	r3, [pc, #296]	; (dce0 <usart_read_callback+0x730>)
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d000      	beq.n	dbbe <usart_read_callback+0x60e>
    dbbc:	e0a8      	b.n	dd10 <usart_read_callback+0x760>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    dbbe:	4b47      	ldr	r3, [pc, #284]	; (dcdc <usart_read_callback+0x72c>)
    dbc0:	799b      	ldrb	r3, [r3, #6]
    dbc2:	061b      	lsls	r3, r3, #24
    dbc4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    dbc6:	4b45      	ldr	r3, [pc, #276]	; (dcdc <usart_read_callback+0x72c>)
    dbc8:	79db      	ldrb	r3, [r3, #7]
    dbca:	041b      	lsls	r3, r3, #16
    dbcc:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dbce:	693a      	ldr	r2, [r7, #16]
    dbd0:	68fb      	ldr	r3, [r7, #12]
    dbd2:	4313      	orrs	r3, r2
    dbd4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    dbd6:	4b41      	ldr	r3, [pc, #260]	; (dcdc <usart_read_callback+0x72c>)
    dbd8:	7a1b      	ldrb	r3, [r3, #8]
    dbda:	021b      	lsls	r3, r3, #8
    dbdc:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dbde:	693a      	ldr	r2, [r7, #16]
    dbe0:	68fb      	ldr	r3, [r7, #12]
    dbe2:	4313      	orrs	r3, r2
    dbe4:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    dbe6:	4b3d      	ldr	r3, [pc, #244]	; (dcdc <usart_read_callback+0x72c>)
    dbe8:	7a5b      	ldrb	r3, [r3, #9]
    dbea:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dbec:	693a      	ldr	r2, [r7, #16]
    dbee:	68fb      	ldr	r3, [r7, #12]
    dbf0:	4313      	orrs	r3, r2
    dbf2:	613b      	str	r3, [r7, #16]
					brakeApp.appLength = ltemp;
    dbf4:	4b40      	ldr	r3, [pc, #256]	; (dcf8 <usart_read_callback+0x748>)
    dbf6:	693a      	ldr	r2, [r7, #16]
    dbf8:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    dbfa:	4b38      	ldr	r3, [pc, #224]	; (dcdc <usart_read_callback+0x72c>)
    dbfc:	7a9b      	ldrb	r3, [r3, #10]
    dbfe:	061b      	lsls	r3, r3, #24
    dc00:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    dc02:	4b36      	ldr	r3, [pc, #216]	; (dcdc <usart_read_callback+0x72c>)
    dc04:	7adb      	ldrb	r3, [r3, #11]
    dc06:	041b      	lsls	r3, r3, #16
    dc08:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc0a:	693a      	ldr	r2, [r7, #16]
    dc0c:	68fb      	ldr	r3, [r7, #12]
    dc0e:	4313      	orrs	r3, r2
    dc10:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    dc12:	4b32      	ldr	r3, [pc, #200]	; (dcdc <usart_read_callback+0x72c>)
    dc14:	7b1b      	ldrb	r3, [r3, #12]
    dc16:	021b      	lsls	r3, r3, #8
    dc18:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc1a:	693a      	ldr	r2, [r7, #16]
    dc1c:	68fb      	ldr	r3, [r7, #12]
    dc1e:	4313      	orrs	r3, r2
    dc20:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    dc22:	4b2e      	ldr	r3, [pc, #184]	; (dcdc <usart_read_callback+0x72c>)
    dc24:	7b5b      	ldrb	r3, [r3, #13]
    dc26:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc28:	693a      	ldr	r2, [r7, #16]
    dc2a:	68fb      	ldr	r3, [r7, #12]
    dc2c:	4313      	orrs	r3, r2
    dc2e:	613b      	str	r3, [r7, #16]
					brakeApp.checksum = ltemp;
    dc30:	4b31      	ldr	r3, [pc, #196]	; (dcf8 <usart_read_callback+0x748>)
    dc32:	693a      	ldr	r2, [r7, #16]
    dc34:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    dc36:	4b29      	ldr	r3, [pc, #164]	; (dcdc <usart_read_callback+0x72c>)
    dc38:	7b9b      	ldrb	r3, [r3, #14]
    dc3a:	061b      	lsls	r3, r3, #24
    dc3c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    dc3e:	4b27      	ldr	r3, [pc, #156]	; (dcdc <usart_read_callback+0x72c>)
    dc40:	7bdb      	ldrb	r3, [r3, #15]
    dc42:	041b      	lsls	r3, r3, #16
    dc44:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc46:	693a      	ldr	r2, [r7, #16]
    dc48:	68fb      	ldr	r3, [r7, #12]
    dc4a:	4313      	orrs	r3, r2
    dc4c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    dc4e:	4b23      	ldr	r3, [pc, #140]	; (dcdc <usart_read_callback+0x72c>)
    dc50:	7c1b      	ldrb	r3, [r3, #16]
    dc52:	021b      	lsls	r3, r3, #8
    dc54:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc56:	693a      	ldr	r2, [r7, #16]
    dc58:	68fb      	ldr	r3, [r7, #12]
    dc5a:	4313      	orrs	r3, r2
    dc5c:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    dc5e:	4b1f      	ldr	r3, [pc, #124]	; (dcdc <usart_read_callback+0x72c>)
    dc60:	7c5b      	ldrb	r3, [r3, #17]
    dc62:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc64:	693a      	ldr	r2, [r7, #16]
    dc66:	68fb      	ldr	r3, [r7, #12]
    dc68:	4313      	orrs	r3, r2
    dc6a:	613b      	str	r3, [r7, #16]
					brakeApp.checksumStartOffset = ltemp;
    dc6c:	4b22      	ldr	r3, [pc, #136]	; (dcf8 <usart_read_callback+0x748>)
    dc6e:	693a      	ldr	r2, [r7, #16]
    dc70:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    dc72:	4b1a      	ldr	r3, [pc, #104]	; (dcdc <usart_read_callback+0x72c>)
    dc74:	7c9b      	ldrb	r3, [r3, #18]
    dc76:	061b      	lsls	r3, r3, #24
    dc78:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    dc7a:	4b18      	ldr	r3, [pc, #96]	; (dcdc <usart_read_callback+0x72c>)
    dc7c:	7cdb      	ldrb	r3, [r3, #19]
    dc7e:	041b      	lsls	r3, r3, #16
    dc80:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc82:	693a      	ldr	r2, [r7, #16]
    dc84:	68fb      	ldr	r3, [r7, #12]
    dc86:	4313      	orrs	r3, r2
    dc88:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    dc8a:	4b14      	ldr	r3, [pc, #80]	; (dcdc <usart_read_callback+0x72c>)
    dc8c:	7d1b      	ldrb	r3, [r3, #20]
    dc8e:	021b      	lsls	r3, r3, #8
    dc90:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dc92:	693a      	ldr	r2, [r7, #16]
    dc94:	68fb      	ldr	r3, [r7, #12]
    dc96:	4313      	orrs	r3, r2
    dc98:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    dc9a:	4b10      	ldr	r3, [pc, #64]	; (dcdc <usart_read_callback+0x72c>)
    dc9c:	7d5b      	ldrb	r3, [r3, #21]
    dc9e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dca0:	693a      	ldr	r2, [r7, #16]
    dca2:	68fb      	ldr	r3, [r7, #12]
    dca4:	4313      	orrs	r3, r2
    dca6:	613b      	str	r3, [r7, #16]
					brakeApp.version = ltemp;
    dca8:	4b13      	ldr	r3, [pc, #76]	; (dcf8 <usart_read_callback+0x748>)
    dcaa:	693a      	ldr	r2, [r7, #16]
    dcac:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    dcae:	4b0b      	ldr	r3, [pc, #44]	; (dcdc <usart_read_callback+0x72c>)
    dcb0:	7d9a      	ldrb	r2, [r3, #22]
    dcb2:	4b0d      	ldr	r3, [pc, #52]	; (dce8 <usart_read_callback+0x738>)
    dcb4:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    dcb6:	4b0d      	ldr	r3, [pc, #52]	; (dcec <usart_read_callback+0x73c>)
    dcb8:	2200      	movs	r2, #0
    dcba:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    dcbc:	4b0c      	ldr	r3, [pc, #48]	; (dcf0 <usart_read_callback+0x740>)
    dcbe:	2201      	movs	r2, #1
    dcc0:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    dcc2:	4b0c      	ldr	r3, [pc, #48]	; (dcf4 <usart_read_callback+0x744>)
    dcc4:	2200      	movs	r2, #0
    dcc6:	601a      	str	r2, [r3, #0]
					remoteApp.appLength = 0;
    dcc8:	4b06      	ldr	r3, [pc, #24]	; (dce4 <usart_read_callback+0x734>)
    dcca:	2200      	movs	r2, #0
    dccc:	605a      	str	r2, [r3, #4]
					remoteApp.checksum = 0;
    dcce:	4b05      	ldr	r3, [pc, #20]	; (dce4 <usart_read_callback+0x734>)
    dcd0:	2200      	movs	r2, #0
    dcd2:	601a      	str	r2, [r3, #0]
					remoteApp.checksumStartOffset = 0;
    dcd4:	4b03      	ldr	r3, [pc, #12]	; (dce4 <usart_read_callback+0x734>)
    dcd6:	2200      	movs	r2, #0
    dcd8:	609a      	str	r2, [r3, #8]
    dcda:	e072      	b.n	ddc2 <usart_read_callback+0x812>
    dcdc:	20000a8c 	.word	0x20000a8c
    dce0:	20003539 	.word	0x20003539
    dce4:	200034ec 	.word	0x200034ec
    dce8:	20003509 	.word	0x20003509
    dcec:	2000350a 	.word	0x2000350a
    dcf0:	20003538 	.word	0x20003538
    dcf4:	20003534 	.word	0x20003534
    dcf8:	2000353c 	.word	0x2000353c
    dcfc:	20000a92 	.word	0x20000a92
    dd00:	0000ca4d 	.word	0x0000ca4d
    dd04:	2000369c 	.word	0x2000369c
    dd08:	2000350c 	.word	0x2000350c
    dd0c:	0000e205 	.word	0x0000e205
				}
				else
				{
					itemp = general_buffer[1];
    dd10:	4bce      	ldr	r3, [pc, #824]	; (e04c <usart_read_callback+0xa9c>)
    dd12:	785a      	ldrb	r2, [r3, #1]
    dd14:	1c3b      	adds	r3, r7, #0
    dd16:	3316      	adds	r3, #22
    dd18:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    dd1a:	1c3b      	adds	r3, r7, #0
    dd1c:	3316      	adds	r3, #22
    dd1e:	1c3a      	adds	r2, r7, #0
    dd20:	3216      	adds	r2, #22
    dd22:	8812      	ldrh	r2, [r2, #0]
    dd24:	0212      	lsls	r2, r2, #8
    dd26:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    dd28:	4bc8      	ldr	r3, [pc, #800]	; (e04c <usart_read_callback+0xa9c>)
    dd2a:	789a      	ldrb	r2, [r3, #2]
    dd2c:	1c3b      	adds	r3, r7, #0
    dd2e:	3314      	adds	r3, #20
    dd30:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    dd32:	1c3b      	adds	r3, r7, #0
    dd34:	3316      	adds	r3, #22
    dd36:	1c39      	adds	r1, r7, #0
    dd38:	3116      	adds	r1, #22
    dd3a:	1c3a      	adds	r2, r7, #0
    dd3c:	3214      	adds	r2, #20
    dd3e:	8809      	ldrh	r1, [r1, #0]
    dd40:	8812      	ldrh	r2, [r2, #0]
    dd42:	430a      	orrs	r2, r1
    dd44:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    dd46:	1c3b      	adds	r3, r7, #0
    dd48:	3316      	adds	r3, #22
    dd4a:	1c3a      	adds	r2, r7, #0
    dd4c:	3216      	adds	r2, #22
    dd4e:	8812      	ldrh	r2, [r2, #0]
    dd50:	3a07      	subs	r2, #7
    dd52:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    dd54:	4bbe      	ldr	r3, [pc, #760]	; (e050 <usart_read_callback+0xaa0>)
    dd56:	781a      	ldrb	r2, [r3, #0]
    dd58:	4bbe      	ldr	r3, [pc, #760]	; (e054 <usart_read_callback+0xaa4>)
    dd5a:	781b      	ldrb	r3, [r3, #0]
    dd5c:	429a      	cmp	r2, r3
    dd5e:	d130      	bne.n	ddc2 <usart_read_callback+0x812>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    dd60:	4bbb      	ldr	r3, [pc, #748]	; (e050 <usart_read_callback+0xaa0>)
    dd62:	781b      	ldrb	r3, [r3, #0]
    dd64:	1c1a      	adds	r2, r3, #0
    dd66:	4bbc      	ldr	r3, [pc, #752]	; (e058 <usart_read_callback+0xaa8>)
    dd68:	781b      	ldrb	r3, [r3, #0]
    dd6a:	3301      	adds	r3, #1
    dd6c:	429a      	cmp	r2, r3
    dd6e:	da0d      	bge.n	dd8c <usart_read_callback+0x7dc>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    dd70:	4bba      	ldr	r3, [pc, #744]	; (e05c <usart_read_callback+0xaac>)
    dd72:	681b      	ldr	r3, [r3, #0]
    dd74:	2284      	movs	r2, #132	; 0x84
    dd76:	0292      	lsls	r2, r2, #10
    dd78:	1899      	adds	r1, r3, r2
    dd7a:	4ab9      	ldr	r2, [pc, #740]	; (e060 <usart_read_callback+0xab0>)
    dd7c:	1c3b      	adds	r3, r7, #0
    dd7e:	3316      	adds	r3, #22
    dd80:	881b      	ldrh	r3, [r3, #0]
    dd82:	1c08      	adds	r0, r1, #0
    dd84:	1c11      	adds	r1, r2, #0
    dd86:	1c1a      	adds	r2, r3, #0
    dd88:	4bb6      	ldr	r3, [pc, #728]	; (e064 <usart_read_callback+0xab4>)
    dd8a:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    dd8c:	4bb0      	ldr	r3, [pc, #704]	; (e050 <usart_read_callback+0xaa0>)
    dd8e:	781a      	ldrb	r2, [r3, #0]
    dd90:	4bb1      	ldr	r3, [pc, #708]	; (e058 <usart_read_callback+0xaa8>)
    dd92:	781b      	ldrb	r3, [r3, #0]
    dd94:	429a      	cmp	r2, r3
    dd96:	d106      	bne.n	dda6 <usart_read_callback+0x7f6>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    dd98:	4bb3      	ldr	r3, [pc, #716]	; (e068 <usart_read_callback+0xab8>)
    dd9a:	681b      	ldr	r3, [r3, #0]
    dd9c:	2280      	movs	r2, #128	; 0x80
    dd9e:	01d2      	lsls	r2, r2, #7
    dda0:	431a      	orrs	r2, r3
    dda2:	4bb1      	ldr	r3, [pc, #708]	; (e068 <usart_read_callback+0xab8>)
    dda4:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    dda6:	1c3b      	adds	r3, r7, #0
    dda8:	3316      	adds	r3, #22
    ddaa:	881a      	ldrh	r2, [r3, #0]
    ddac:	4bab      	ldr	r3, [pc, #684]	; (e05c <usart_read_callback+0xaac>)
    ddae:	681b      	ldr	r3, [r3, #0]
    ddb0:	18d2      	adds	r2, r2, r3
    ddb2:	4baa      	ldr	r3, [pc, #680]	; (e05c <usart_read_callback+0xaac>)
    ddb4:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    ddb6:	4ba7      	ldr	r3, [pc, #668]	; (e054 <usart_read_callback+0xaa4>)
    ddb8:	781b      	ldrb	r3, [r3, #0]
    ddba:	3301      	adds	r3, #1
    ddbc:	b2da      	uxtb	r2, r3
    ddbe:	4ba5      	ldr	r3, [pc, #660]	; (e054 <usart_read_callback+0xaa4>)
    ddc0:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    ddc2:	4baa      	ldr	r3, [pc, #680]	; (e06c <usart_read_callback+0xabc>)
    ddc4:	2200      	movs	r2, #0
    ddc6:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    ddc8:	4ba8      	ldr	r3, [pc, #672]	; (e06c <usart_read_callback+0xabc>)
    ddca:	2209      	movs	r2, #9
    ddcc:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    ddce:	4ba7      	ldr	r3, [pc, #668]	; (e06c <usart_read_callback+0xabc>)
    ddd0:	2264      	movs	r2, #100	; 0x64
    ddd2:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 'c';
    ddd4:	4ba5      	ldr	r3, [pc, #660]	; (e06c <usart_read_callback+0xabc>)
    ddd6:	2263      	movs	r2, #99	; 0x63
    ddd8:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    ddda:	4ba4      	ldr	r3, [pc, #656]	; (e06c <usart_read_callback+0xabc>)
    dddc:	2230      	movs	r2, #48	; 0x30
    ddde:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    dde0:	4ba2      	ldr	r3, [pc, #648]	; (e06c <usart_read_callback+0xabc>)
    dde2:	2231      	movs	r2, #49	; 0x31
    dde4:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    dde6:	4b9a      	ldr	r3, [pc, #616]	; (e050 <usart_read_callback+0xaa0>)
    dde8:	781a      	ldrb	r2, [r3, #0]
    ddea:	4ba0      	ldr	r3, [pc, #640]	; (e06c <usart_read_callback+0xabc>)
    ddec:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    ddee:	4b9a      	ldr	r3, [pc, #616]	; (e058 <usart_read_callback+0xaa8>)
    ddf0:	781a      	ldrb	r2, [r3, #0]
    ddf2:	4b9e      	ldr	r3, [pc, #632]	; (e06c <usart_read_callback+0xabc>)
    ddf4:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    ddf6:	4b9d      	ldr	r3, [pc, #628]	; (e06c <usart_read_callback+0xabc>)
    ddf8:	2200      	movs	r2, #0
    ddfa:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    ddfc:	4b9b      	ldr	r3, [pc, #620]	; (e06c <usart_read_callback+0xabc>)
    ddfe:	220d      	movs	r2, #13
    de00:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    de02:	4b9a      	ldr	r3, [pc, #616]	; (e06c <usart_read_callback+0xabc>)
    de04:	1c18      	adds	r0, r3, #0
    de06:	210b      	movs	r1, #11
    de08:	2201      	movs	r2, #1
    de0a:	4b99      	ldr	r3, [pc, #612]	; (e070 <usart_read_callback+0xac0>)
    de0c:	4798      	blx	r3
				break;
    de0e:	e117      	b.n	e040 <usart_read_callback+0xa90>
			}
			case COMMAND_DS:
			{
				downloadPacketNumber = general_buffer[5];
    de10:	4b8e      	ldr	r3, [pc, #568]	; (e04c <usart_read_callback+0xa9c>)
    de12:	795a      	ldrb	r2, [r3, #5]
    de14:	4b8e      	ldr	r3, [pc, #568]	; (e050 <usart_read_callback+0xaa0>)
    de16:	701a      	strb	r2, [r3, #0]
				//---------------------------
				// load in download info if this is the first buffer;
				//----------------------------
				if (downloadPacketNumber == 0)
    de18:	4b8d      	ldr	r3, [pc, #564]	; (e050 <usart_read_callback+0xaa0>)
    de1a:	781b      	ldrb	r3, [r3, #0]
    de1c:	2b00      	cmp	r3, #0
    de1e:	d000      	beq.n	de22 <usart_read_callback+0x872>
    de20:	e08e      	b.n	df40 <usart_read_callback+0x990>
				{
					//----------build app length;
					ltemp = general_buffer[6]<<24;
    de22:	4b8a      	ldr	r3, [pc, #552]	; (e04c <usart_read_callback+0xa9c>)
    de24:	799b      	ldrb	r3, [r3, #6]
    de26:	061b      	lsls	r3, r3, #24
    de28:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[7]<<16;
    de2a:	4b88      	ldr	r3, [pc, #544]	; (e04c <usart_read_callback+0xa9c>)
    de2c:	79db      	ldrb	r3, [r3, #7]
    de2e:	041b      	lsls	r3, r3, #16
    de30:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de32:	693a      	ldr	r2, [r7, #16]
    de34:	68fb      	ldr	r3, [r7, #12]
    de36:	4313      	orrs	r3, r2
    de38:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[8]<<8;
    de3a:	4b84      	ldr	r3, [pc, #528]	; (e04c <usart_read_callback+0xa9c>)
    de3c:	7a1b      	ldrb	r3, [r3, #8]
    de3e:	021b      	lsls	r3, r3, #8
    de40:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de42:	693a      	ldr	r2, [r7, #16]
    de44:	68fb      	ldr	r3, [r7, #12]
    de46:	4313      	orrs	r3, r2
    de48:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[9];
    de4a:	4b80      	ldr	r3, [pc, #512]	; (e04c <usart_read_callback+0xa9c>)
    de4c:	7a5b      	ldrb	r3, [r3, #9]
    de4e:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de50:	693a      	ldr	r2, [r7, #16]
    de52:	68fb      	ldr	r3, [r7, #12]
    de54:	4313      	orrs	r3, r2
    de56:	613b      	str	r3, [r7, #16]
					remoteApp.appLength = ltemp;
    de58:	4b86      	ldr	r3, [pc, #536]	; (e074 <usart_read_callback+0xac4>)
    de5a:	693a      	ldr	r2, [r7, #16]
    de5c:	605a      	str	r2, [r3, #4]
					//----------build checksum length;
					ltemp = general_buffer[10]<<24;
    de5e:	4b7b      	ldr	r3, [pc, #492]	; (e04c <usart_read_callback+0xa9c>)
    de60:	7a9b      	ldrb	r3, [r3, #10]
    de62:	061b      	lsls	r3, r3, #24
    de64:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[11]<<16;
    de66:	4b79      	ldr	r3, [pc, #484]	; (e04c <usart_read_callback+0xa9c>)
    de68:	7adb      	ldrb	r3, [r3, #11]
    de6a:	041b      	lsls	r3, r3, #16
    de6c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de6e:	693a      	ldr	r2, [r7, #16]
    de70:	68fb      	ldr	r3, [r7, #12]
    de72:	4313      	orrs	r3, r2
    de74:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[12]<<8;
    de76:	4b75      	ldr	r3, [pc, #468]	; (e04c <usart_read_callback+0xa9c>)
    de78:	7b1b      	ldrb	r3, [r3, #12]
    de7a:	021b      	lsls	r3, r3, #8
    de7c:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de7e:	693a      	ldr	r2, [r7, #16]
    de80:	68fb      	ldr	r3, [r7, #12]
    de82:	4313      	orrs	r3, r2
    de84:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[13];
    de86:	4b71      	ldr	r3, [pc, #452]	; (e04c <usart_read_callback+0xa9c>)
    de88:	7b5b      	ldrb	r3, [r3, #13]
    de8a:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    de8c:	693a      	ldr	r2, [r7, #16]
    de8e:	68fb      	ldr	r3, [r7, #12]
    de90:	4313      	orrs	r3, r2
    de92:	613b      	str	r3, [r7, #16]
					remoteApp.checksum = ltemp;
    de94:	4b77      	ldr	r3, [pc, #476]	; (e074 <usart_read_callback+0xac4>)
    de96:	693a      	ldr	r2, [r7, #16]
    de98:	601a      	str	r2, [r3, #0]
					//----------build checksum start
					ltemp = general_buffer[14]<<24;
    de9a:	4b6c      	ldr	r3, [pc, #432]	; (e04c <usart_read_callback+0xa9c>)
    de9c:	7b9b      	ldrb	r3, [r3, #14]
    de9e:	061b      	lsls	r3, r3, #24
    dea0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[15]<<16;
    dea2:	4b6a      	ldr	r3, [pc, #424]	; (e04c <usart_read_callback+0xa9c>)
    dea4:	7bdb      	ldrb	r3, [r3, #15]
    dea6:	041b      	lsls	r3, r3, #16
    dea8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    deaa:	693a      	ldr	r2, [r7, #16]
    deac:	68fb      	ldr	r3, [r7, #12]
    deae:	4313      	orrs	r3, r2
    deb0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[16]<<8;
    deb2:	4b66      	ldr	r3, [pc, #408]	; (e04c <usart_read_callback+0xa9c>)
    deb4:	7c1b      	ldrb	r3, [r3, #16]
    deb6:	021b      	lsls	r3, r3, #8
    deb8:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    deba:	693a      	ldr	r2, [r7, #16]
    debc:	68fb      	ldr	r3, [r7, #12]
    debe:	4313      	orrs	r3, r2
    dec0:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[17];
    dec2:	4b62      	ldr	r3, [pc, #392]	; (e04c <usart_read_callback+0xa9c>)
    dec4:	7c5b      	ldrb	r3, [r3, #17]
    dec6:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dec8:	693a      	ldr	r2, [r7, #16]
    deca:	68fb      	ldr	r3, [r7, #12]
    decc:	4313      	orrs	r3, r2
    dece:	613b      	str	r3, [r7, #16]
					remoteApp.checksumStartOffset = ltemp;
    ded0:	4b68      	ldr	r3, [pc, #416]	; (e074 <usart_read_callback+0xac4>)
    ded2:	693a      	ldr	r2, [r7, #16]
    ded4:	609a      	str	r2, [r3, #8]
					//----------build version
					ltemp = general_buffer[18]<<24;
    ded6:	4b5d      	ldr	r3, [pc, #372]	; (e04c <usart_read_callback+0xa9c>)
    ded8:	7c9b      	ldrb	r3, [r3, #18]
    deda:	061b      	lsls	r3, r3, #24
    dedc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[19]<<16;
    dede:	4b5b      	ldr	r3, [pc, #364]	; (e04c <usart_read_callback+0xa9c>)
    dee0:	7cdb      	ldrb	r3, [r3, #19]
    dee2:	041b      	lsls	r3, r3, #16
    dee4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    dee6:	693a      	ldr	r2, [r7, #16]
    dee8:	68fb      	ldr	r3, [r7, #12]
    deea:	4313      	orrs	r3, r2
    deec:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[20]<<8;
    deee:	4b57      	ldr	r3, [pc, #348]	; (e04c <usart_read_callback+0xa9c>)
    def0:	7d1b      	ldrb	r3, [r3, #20]
    def2:	021b      	lsls	r3, r3, #8
    def4:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    def6:	693a      	ldr	r2, [r7, #16]
    def8:	68fb      	ldr	r3, [r7, #12]
    defa:	4313      	orrs	r3, r2
    defc:	613b      	str	r3, [r7, #16]
					ltemp2 = general_buffer[21];
    defe:	4b53      	ldr	r3, [pc, #332]	; (e04c <usart_read_callback+0xa9c>)
    df00:	7d5b      	ldrb	r3, [r3, #21]
    df02:	60fb      	str	r3, [r7, #12]
					ltemp |=ltemp2;
    df04:	693a      	ldr	r2, [r7, #16]
    df06:	68fb      	ldr	r3, [r7, #12]
    df08:	4313      	orrs	r3, r2
    df0a:	613b      	str	r3, [r7, #16]
					remoteApp.version = ltemp;
    df0c:	4b59      	ldr	r3, [pc, #356]	; (e074 <usart_read_callback+0xac4>)
    df0e:	693a      	ldr	r2, [r7, #16]
    df10:	60da      	str	r2, [r3, #12]
					//----------get packet count
					downloadPacketCount = general_buffer[22];
    df12:	4b4e      	ldr	r3, [pc, #312]	; (e04c <usart_read_callback+0xa9c>)
    df14:	7d9a      	ldrb	r2, [r3, #22]
    df16:	4b50      	ldr	r3, [pc, #320]	; (e058 <usart_read_callback+0xaa8>)
    df18:	701a      	strb	r2, [r3, #0]
					downloadLastPacketNumber = 0;
    df1a:	4b57      	ldr	r3, [pc, #348]	; (e078 <usart_read_callback+0xac8>)
    df1c:	2200      	movs	r2, #0
    df1e:	701a      	strb	r2, [r3, #0]
					downloadNextPacketNumber = 1;
    df20:	4b4c      	ldr	r3, [pc, #304]	; (e054 <usart_read_callback+0xaa4>)
    df22:	2201      	movs	r2, #1
    df24:	701a      	strb	r2, [r3, #0]
					downloadLength = 0;
    df26:	4b4d      	ldr	r3, [pc, #308]	; (e05c <usart_read_callback+0xaac>)
    df28:	2200      	movs	r2, #0
    df2a:	601a      	str	r2, [r3, #0]
					brakeApp.appLength = 0;
    df2c:	4b53      	ldr	r3, [pc, #332]	; (e07c <usart_read_callback+0xacc>)
    df2e:	2200      	movs	r2, #0
    df30:	605a      	str	r2, [r3, #4]
					brakeApp.checksum = 0;
    df32:	4b52      	ldr	r3, [pc, #328]	; (e07c <usart_read_callback+0xacc>)
    df34:	2200      	movs	r2, #0
    df36:	601a      	str	r2, [r3, #0]
					brakeApp.checksumStartOffset = 0;
    df38:	4b50      	ldr	r3, [pc, #320]	; (e07c <usart_read_callback+0xacc>)
    df3a:	2200      	movs	r2, #0
    df3c:	609a      	str	r2, [r3, #8]
    df3e:	e058      	b.n	dff2 <usart_read_callback+0xa42>
				}
				else
				{
					itemp = general_buffer[1];
    df40:	4b42      	ldr	r3, [pc, #264]	; (e04c <usart_read_callback+0xa9c>)
    df42:	785a      	ldrb	r2, [r3, #1]
    df44:	1c3b      	adds	r3, r7, #0
    df46:	3316      	adds	r3, #22
    df48:	801a      	strh	r2, [r3, #0]
					itemp = itemp<<8;
    df4a:	1c3b      	adds	r3, r7, #0
    df4c:	3316      	adds	r3, #22
    df4e:	1c3a      	adds	r2, r7, #0
    df50:	3216      	adds	r2, #22
    df52:	8812      	ldrh	r2, [r2, #0]
    df54:	0212      	lsls	r2, r2, #8
    df56:	801a      	strh	r2, [r3, #0]
					itemp2 = general_buffer[2];
    df58:	4b3c      	ldr	r3, [pc, #240]	; (e04c <usart_read_callback+0xa9c>)
    df5a:	789a      	ldrb	r2, [r3, #2]
    df5c:	1c3b      	adds	r3, r7, #0
    df5e:	3314      	adds	r3, #20
    df60:	801a      	strh	r2, [r3, #0]
					itemp |= itemp2;
    df62:	1c3b      	adds	r3, r7, #0
    df64:	3316      	adds	r3, #22
    df66:	1c39      	adds	r1, r7, #0
    df68:	3116      	adds	r1, #22
    df6a:	1c3a      	adds	r2, r7, #0
    df6c:	3214      	adds	r2, #20
    df6e:	8809      	ldrh	r1, [r1, #0]
    df70:	8812      	ldrh	r2, [r2, #0]
    df72:	430a      	orrs	r2, r1
    df74:	801a      	strh	r2, [r3, #0]
					itemp = itemp - 7;
    df76:	1c3b      	adds	r3, r7, #0
    df78:	3316      	adds	r3, #22
    df7a:	1c3a      	adds	r2, r7, #0
    df7c:	3216      	adds	r2, #22
    df7e:	8812      	ldrh	r2, [r2, #0]
    df80:	3a07      	subs	r2, #7
    df82:	801a      	strh	r2, [r3, #0]
					if (downloadPacketNumber == downloadNextPacketNumber)
    df84:	4b32      	ldr	r3, [pc, #200]	; (e050 <usart_read_callback+0xaa0>)
    df86:	781a      	ldrb	r2, [r3, #0]
    df88:	4b32      	ldr	r3, [pc, #200]	; (e054 <usart_read_callback+0xaa4>)
    df8a:	781b      	ldrb	r3, [r3, #0]
    df8c:	429a      	cmp	r2, r3
    df8e:	d130      	bne.n	dff2 <usart_read_callback+0xa42>
					{
						if (downloadPacketNumber < (downloadPacketCount+1))
    df90:	4b2f      	ldr	r3, [pc, #188]	; (e050 <usart_read_callback+0xaa0>)
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	1c1a      	adds	r2, r3, #0
    df96:	4b30      	ldr	r3, [pc, #192]	; (e058 <usart_read_callback+0xaa8>)
    df98:	781b      	ldrb	r3, [r3, #0]
    df9a:	3301      	adds	r3, #1
    df9c:	429a      	cmp	r2, r3
    df9e:	da0d      	bge.n	dfbc <usart_read_callback+0xa0c>
						{
							ProgramMemory(APP_SCRATCH_BASE + downloadLength,&general_buffer[6],itemp);
    dfa0:	4b2e      	ldr	r3, [pc, #184]	; (e05c <usart_read_callback+0xaac>)
    dfa2:	681b      	ldr	r3, [r3, #0]
    dfa4:	2284      	movs	r2, #132	; 0x84
    dfa6:	0292      	lsls	r2, r2, #10
    dfa8:	1899      	adds	r1, r3, r2
    dfaa:	4a2d      	ldr	r2, [pc, #180]	; (e060 <usart_read_callback+0xab0>)
    dfac:	1c3b      	adds	r3, r7, #0
    dfae:	3316      	adds	r3, #22
    dfb0:	881b      	ldrh	r3, [r3, #0]
    dfb2:	1c08      	adds	r0, r1, #0
    dfb4:	1c11      	adds	r1, r2, #0
    dfb6:	1c1a      	adds	r2, r3, #0
    dfb8:	4b2a      	ldr	r3, [pc, #168]	; (e064 <usart_read_callback+0xab4>)
    dfba:	4798      	blx	r3
						}
						if (downloadPacketNumber == downloadPacketCount)
    dfbc:	4b24      	ldr	r3, [pc, #144]	; (e050 <usart_read_callback+0xaa0>)
    dfbe:	781a      	ldrb	r2, [r3, #0]
    dfc0:	4b25      	ldr	r3, [pc, #148]	; (e058 <usart_read_callback+0xaa8>)
    dfc2:	781b      	ldrb	r3, [r3, #0]
    dfc4:	429a      	cmp	r2, r3
    dfc6:	d106      	bne.n	dfd6 <usart_read_callback+0xa26>
						{
							schedByte |= SCHEDBYTE_DOWNLOAD_DONE;
    dfc8:	4b27      	ldr	r3, [pc, #156]	; (e068 <usart_read_callback+0xab8>)
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	2280      	movs	r2, #128	; 0x80
    dfce:	01d2      	lsls	r2, r2, #7
    dfd0:	431a      	orrs	r2, r3
    dfd2:	4b25      	ldr	r3, [pc, #148]	; (e068 <usart_read_callback+0xab8>)
    dfd4:	601a      	str	r2, [r3, #0]
						}
						downloadLength+=itemp;
    dfd6:	1c3b      	adds	r3, r7, #0
    dfd8:	3316      	adds	r3, #22
    dfda:	881a      	ldrh	r2, [r3, #0]
    dfdc:	4b1f      	ldr	r3, [pc, #124]	; (e05c <usart_read_callback+0xaac>)
    dfde:	681b      	ldr	r3, [r3, #0]
    dfe0:	18d2      	adds	r2, r2, r3
    dfe2:	4b1e      	ldr	r3, [pc, #120]	; (e05c <usart_read_callback+0xaac>)
    dfe4:	601a      	str	r2, [r3, #0]
						downloadNextPacketNumber++;
    dfe6:	4b1b      	ldr	r3, [pc, #108]	; (e054 <usart_read_callback+0xaa4>)
    dfe8:	781b      	ldrb	r3, [r3, #0]
    dfea:	3301      	adds	r3, #1
    dfec:	b2da      	uxtb	r2, r3
    dfee:	4b19      	ldr	r3, [pc, #100]	; (e054 <usart_read_callback+0xaa4>)
    dff0:	701a      	strb	r2, [r3, #0]
						
					}
				}
				txBluetoothBuffer[1] = 0;
    dff2:	4b1e      	ldr	r3, [pc, #120]	; (e06c <usart_read_callback+0xabc>)
    dff4:	2200      	movs	r2, #0
    dff6:	705a      	strb	r2, [r3, #1]
				txBluetoothBuffer[2] = 9;
    dff8:	4b1c      	ldr	r3, [pc, #112]	; (e06c <usart_read_callback+0xabc>)
    dffa:	2209      	movs	r2, #9
    dffc:	709a      	strb	r2, [r3, #2]
				txBluetoothBuffer[3] = 'd';
    dffe:	4b1b      	ldr	r3, [pc, #108]	; (e06c <usart_read_callback+0xabc>)
    e000:	2264      	movs	r2, #100	; 0x64
    e002:	70da      	strb	r2, [r3, #3]
				txBluetoothBuffer[4] = 's';
    e004:	4b19      	ldr	r3, [pc, #100]	; (e06c <usart_read_callback+0xabc>)
    e006:	2273      	movs	r2, #115	; 0x73
    e008:	711a      	strb	r2, [r3, #4]
				txBluetoothBuffer[5] = FWVER3;
    e00a:	4b18      	ldr	r3, [pc, #96]	; (e06c <usart_read_callback+0xabc>)
    e00c:	2230      	movs	r2, #48	; 0x30
    e00e:	715a      	strb	r2, [r3, #5]
				txBluetoothBuffer[6] = FWVER2;
    e010:	4b16      	ldr	r3, [pc, #88]	; (e06c <usart_read_callback+0xabc>)
    e012:	2231      	movs	r2, #49	; 0x31
    e014:	719a      	strb	r2, [r3, #6]
				txBluetoothBuffer[7] = downloadPacketNumber;
    e016:	4b0e      	ldr	r3, [pc, #56]	; (e050 <usart_read_callback+0xaa0>)
    e018:	781a      	ldrb	r2, [r3, #0]
    e01a:	4b14      	ldr	r3, [pc, #80]	; (e06c <usart_read_callback+0xabc>)
    e01c:	71da      	strb	r2, [r3, #7]
				txBluetoothBuffer[8] = downloadPacketCount;
    e01e:	4b0e      	ldr	r3, [pc, #56]	; (e058 <usart_read_callback+0xaa8>)
    e020:	781a      	ldrb	r2, [r3, #0]
    e022:	4b12      	ldr	r3, [pc, #72]	; (e06c <usart_read_callback+0xabc>)
    e024:	721a      	strb	r2, [r3, #8]
				txBluetoothBuffer[9] = 0x00;
    e026:	4b11      	ldr	r3, [pc, #68]	; (e06c <usart_read_callback+0xabc>)
    e028:	2200      	movs	r2, #0
    e02a:	725a      	strb	r2, [r3, #9]
				txBluetoothBuffer[10] = 0x0d;
    e02c:	4b0f      	ldr	r3, [pc, #60]	; (e06c <usart_read_callback+0xabc>)
    e02e:	220d      	movs	r2, #13
    e030:	729a      	strb	r2, [r3, #10]
				BTTransmit(txBluetoothBuffer,11,TRUE);
    e032:	4b0e      	ldr	r3, [pc, #56]	; (e06c <usart_read_callback+0xabc>)
    e034:	1c18      	adds	r0, r3, #0
    e036:	210b      	movs	r1, #11
    e038:	2201      	movs	r2, #1
    e03a:	4b0d      	ldr	r3, [pc, #52]	; (e070 <usart_read_callback+0xac0>)
    e03c:	4798      	blx	r3
				break;
    e03e:	46c0      	nop			; (mov r8, r8)
			}
			
									
		}		
	}
	BTReceive();        
    e040:	4b0f      	ldr	r3, [pc, #60]	; (e080 <usart_read_callback+0xad0>)
    e042:	4798      	blx	r3
}
    e044:	46bd      	mov	sp, r7
    e046:	b006      	add	sp, #24
    e048:	bd80      	pop	{r7, pc}
    e04a:	46c0      	nop			; (mov r8, r8)
    e04c:	20000a8c 	.word	0x20000a8c
    e050:	20003539 	.word	0x20003539
    e054:	20003538 	.word	0x20003538
    e058:	20003509 	.word	0x20003509
    e05c:	20003534 	.word	0x20003534
    e060:	20000a92 	.word	0x20000a92
    e064:	0000ca4d 	.word	0x0000ca4d
    e068:	2000369c 	.word	0x2000369c
    e06c:	2000350c 	.word	0x2000350c
    e070:	0000e205 	.word	0x0000e205
    e074:	200034ec 	.word	0x200034ec
    e078:	2000350a 	.word	0x2000350a
    e07c:	2000353c 	.word	0x2000353c
    e080:	0000e1d9 	.word	0x0000e1d9

0000e084 <usart_write_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void usart_write_callback(const struct usart_module *const usart_module)
{
    e084:	b580      	push	{r7, lr}
    e086:	b082      	sub	sp, #8
    e088:	af00      	add	r7, sp, #0
    e08a:	6078      	str	r0, [r7, #4]
	
    general_buffer[0] = 0x01; 
    e08c:	4b0b      	ldr	r3, [pc, #44]	; (e0bc <usart_write_callback+0x38>)
    e08e:	2201      	movs	r2, #1
    e090:	701a      	strb	r2, [r3, #0]
    general_buffer[1] = 0x29; 
    e092:	4b0a      	ldr	r3, [pc, #40]	; (e0bc <usart_write_callback+0x38>)
    e094:	2229      	movs	r2, #41	; 0x29
    e096:	705a      	strb	r2, [r3, #1]
    general_buffer[2] = 0xFC; 
    e098:	4b08      	ldr	r3, [pc, #32]	; (e0bc <usart_write_callback+0x38>)
    e09a:	22fc      	movs	r2, #252	; 0xfc
    e09c:	709a      	strb	r2, [r3, #2]
    general_buffer[3] = 0x03; 
    e09e:	4b07      	ldr	r3, [pc, #28]	; (e0bc <usart_write_callback+0x38>)
    e0a0:	2203      	movs	r2, #3
    e0a2:	70da      	strb	r2, [r3, #3]
    general_buffer[4] = 0x00;
    e0a4:	4b05      	ldr	r3, [pc, #20]	; (e0bc <usart_write_callback+0x38>)
    e0a6:	2200      	movs	r2, #0
    e0a8:	711a      	strb	r2, [r3, #4]
    general_buffer[5] = 0x00; 
    e0aa:	4b04      	ldr	r3, [pc, #16]	; (e0bc <usart_write_callback+0x38>)
    e0ac:	2200      	movs	r2, #0
    e0ae:	715a      	strb	r2, [r3, #5]
    general_buffer[6] = 0x06; 
    e0b0:	4b02      	ldr	r3, [pc, #8]	; (e0bc <usart_write_callback+0x38>)
    e0b2:	2206      	movs	r2, #6
    e0b4:	719a      	strb	r2, [r3, #6]
    general_buffer[5] = 0x36;
    general_buffer[6] = 0x37;
*/		
//	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,3);
//	usart_write_buffer_job(&usart_instance, general_buffer,7); 
}
    e0b6:	46bd      	mov	sp, r7
    e0b8:	b002      	add	sp, #8
    e0ba:	bd80      	pop	{r7, pc}
    e0bc:	20000a8c 	.word	0x20000a8c

0000e0c0 <configure_usart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//============================================================================== 
void configure_usart(void)
{
    e0c0:	b580      	push	{r7, lr}
    e0c2:	b08c      	sub	sp, #48	; 0x30
    e0c4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
 
	usart_get_config_defaults(&config_usart);
    e0c6:	1c3b      	adds	r3, r7, #0
    e0c8:	1c18      	adds	r0, r3, #0
    e0ca:	4b17      	ldr	r3, [pc, #92]	; (e128 <configure_usart+0x68>)
    e0cc:	4798      	blx	r3
 
	config_usart.baudrate    = 115200;
    e0ce:	1c3b      	adds	r3, r7, #0
    e0d0:	22e1      	movs	r2, #225	; 0xe1
    e0d2:	0252      	lsls	r2, r2, #9
    e0d4:	611a      	str	r2, [r3, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    e0d6:	1c3b      	adds	r3, r7, #0
    e0d8:	22c4      	movs	r2, #196	; 0xc4
    e0da:	0392      	lsls	r2, r2, #14
    e0dc:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    e0de:	1c3b      	adds	r3, r7, #0
    e0e0:	2201      	movs	r2, #1
    e0e2:	4252      	negs	r2, r2
    e0e4:	621a      	str	r2, [r3, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    e0e6:	1c3b      	adds	r3, r7, #0
    e0e8:	2201      	movs	r2, #1
    e0ea:	4252      	negs	r2, r2
    e0ec:	625a      	str	r2, [r3, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    e0ee:	1c3b      	adds	r3, r7, #0
    e0f0:	4a0e      	ldr	r2, [pc, #56]	; (e12c <configure_usart+0x6c>)
    e0f2:	629a      	str	r2, [r3, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    e0f4:	1c3b      	adds	r3, r7, #0
    e0f6:	4a0e      	ldr	r2, [pc, #56]	; (e130 <configure_usart+0x70>)
    e0f8:	62da      	str	r2, [r3, #44]	; 0x2c
	config_usart.generator_source = GCLK_GENERATOR_3; 
    e0fa:	1c3b      	adds	r3, r7, #0
    e0fc:	2203      	movs	r2, #3
    e0fe:	775a      	strb	r2, [r3, #29]
 
	while (usart_init(&usart_instance,
    e100:	46c0      	nop			; (mov r8, r8)
    e102:	490c      	ldr	r1, [pc, #48]	; (e134 <configure_usart+0x74>)
    e104:	4a0c      	ldr	r2, [pc, #48]	; (e138 <configure_usart+0x78>)
    e106:	1c3b      	adds	r3, r7, #0
    e108:	1c08      	adds	r0, r1, #0
    e10a:	1c11      	adds	r1, r2, #0
    e10c:	1c1a      	adds	r2, r3, #0
    e10e:	4b0b      	ldr	r3, [pc, #44]	; (e13c <configure_usart+0x7c>)
    e110:	4798      	blx	r3
    e112:	1c03      	adds	r3, r0, #0
    e114:	2b00      	cmp	r3, #0
    e116:	d1f4      	bne.n	e102 <configure_usart+0x42>
			EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
 
	usart_enable(&usart_instance);
    e118:	4b06      	ldr	r3, [pc, #24]	; (e134 <configure_usart+0x74>)
    e11a:	1c18      	adds	r0, r3, #0
    e11c:	4b08      	ldr	r3, [pc, #32]	; (e140 <configure_usart+0x80>)
    e11e:	4798      	blx	r3
 
}
    e120:	46bd      	mov	sp, r7
    e122:	b00c      	add	sp, #48	; 0x30
    e124:	bd80      	pop	{r7, pc}
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	0000d465 	.word	0x0000d465
    e12c:	000a0003 	.word	0x000a0003
    e130:	000b0003 	.word	0x000b0003
    e134:	200034bc 	.word	0x200034bc
    e138:	42001000 	.word	0x42001000
    e13c:	00004a51 	.word	0x00004a51
    e140:	0000d4e5 	.word	0x0000d4e5

0000e144 <USARTDisable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTDisable(void)
{
    e144:	b580      	push	{r7, lr}
    e146:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);	
    e148:	4b02      	ldr	r3, [pc, #8]	; (e154 <USARTDisable+0x10>)
    e14a:	1c18      	adds	r0, r3, #0
    e14c:	4b02      	ldr	r3, [pc, #8]	; (e158 <USARTDisable+0x14>)
    e14e:	4798      	blx	r3
}
    e150:	46bd      	mov	sp, r7
    e152:	bd80      	pop	{r7, pc}
    e154:	200034bc 	.word	0x200034bc
    e158:	0000d52d 	.word	0x0000d52d

0000e15c <USARTEnable>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void USARTEnable(void)
{
    e15c:	b580      	push	{r7, lr}
    e15e:	af00      	add	r7, sp, #0
	usart_enable(&usart_instance);
    e160:	4b02      	ldr	r3, [pc, #8]	; (e16c <USARTEnable+0x10>)
    e162:	1c18      	adds	r0, r3, #0
    e164:	4b02      	ldr	r3, [pc, #8]	; (e170 <USARTEnable+0x14>)
    e166:	4798      	blx	r3
}
    e168:	46bd      	mov	sp, r7
    e16a:	bd80      	pop	{r7, pc}
    e16c:	200034bc 	.word	0x200034bc
    e170:	0000d4e5 	.word	0x0000d4e5

0000e174 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    e174:	b580      	push	{r7, lr}
    e176:	af00      	add	r7, sp, #0
//! [setup_register_callbacks]
	usart_register_callback(&usart_instance,
    e178:	4a0c      	ldr	r2, [pc, #48]	; (e1ac <configure_usart_callbacks+0x38>)
    e17a:	4b0d      	ldr	r3, [pc, #52]	; (e1b0 <configure_usart_callbacks+0x3c>)
    e17c:	1c10      	adds	r0, r2, #0
    e17e:	1c19      	adds	r1, r3, #0
    e180:	2200      	movs	r2, #0
    e182:	4b0c      	ldr	r3, [pc, #48]	; (e1b4 <configure_usart_callbacks+0x40>)
    e184:	4798      	blx	r3
			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    e186:	4a09      	ldr	r2, [pc, #36]	; (e1ac <configure_usart_callbacks+0x38>)
    e188:	4b0b      	ldr	r3, [pc, #44]	; (e1b8 <configure_usart_callbacks+0x44>)
    e18a:	1c10      	adds	r0, r2, #0
    e18c:	1c19      	adds	r1, r3, #0
    e18e:	2201      	movs	r2, #1
    e190:	4b08      	ldr	r3, [pc, #32]	; (e1b4 <configure_usart_callbacks+0x40>)
    e192:	4798      	blx	r3
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
//! [setup_register_callbacks]

//! [setup_enable_callbacks]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    e194:	4b05      	ldr	r3, [pc, #20]	; (e1ac <configure_usart_callbacks+0x38>)
    e196:	1c18      	adds	r0, r3, #0
    e198:	2100      	movs	r1, #0
    e19a:	4b08      	ldr	r3, [pc, #32]	; (e1bc <configure_usart_callbacks+0x48>)
    e19c:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    e19e:	4b03      	ldr	r3, [pc, #12]	; (e1ac <configure_usart_callbacks+0x38>)
    e1a0:	1c18      	adds	r0, r3, #0
    e1a2:	2101      	movs	r1, #1
    e1a4:	4b05      	ldr	r3, [pc, #20]	; (e1bc <configure_usart_callbacks+0x48>)
    e1a6:	4798      	blx	r3
//! [setup_enable_callbacks]
}
    e1a8:	46bd      	mov	sp, r7
    e1aa:	bd80      	pop	{r7, pc}
    e1ac:	200034bc 	.word	0x200034bc
    e1b0:	0000e085 	.word	0x0000e085
    e1b4:	00004d8d 	.word	0x00004d8d
    e1b8:	0000d5b1 	.word	0x0000d5b1
    e1bc:	0000d579 	.word	0x0000d579

0000e1c0 <UsartMain>:
//! [setup]

void UsartMain(void)
{
    e1c0:	b580      	push	{r7, lr}
    e1c2:	af00      	add	r7, sp, #0
	configure_usart();
    e1c4:	4b02      	ldr	r3, [pc, #8]	; (e1d0 <UsartMain+0x10>)
    e1c6:	4798      	blx	r3
	configure_usart_callbacks();
    e1c8:	4b02      	ldr	r3, [pc, #8]	; (e1d4 <UsartMain+0x14>)
    e1ca:	4798      	blx	r3
}
    e1cc:	46bd      	mov	sp, r7
    e1ce:	bd80      	pop	{r7, pc}
    e1d0:	0000e0c1 	.word	0x0000e0c1
    e1d4:	0000e175 	.word	0x0000e175

0000e1d8 <BTReceive>:

void BTReceive(void)
{
    e1d8:	b580      	push	{r7, lr}
    e1da:	af00      	add	r7, sp, #0
	usart_read_buffer_job(&usart_instance,(uint8_t *)general_buffer,5);
    e1dc:	4a05      	ldr	r2, [pc, #20]	; (e1f4 <BTReceive+0x1c>)
    e1de:	4b06      	ldr	r3, [pc, #24]	; (e1f8 <BTReceive+0x20>)
    e1e0:	1c10      	adds	r0, r2, #0
    e1e2:	1c19      	adds	r1, r3, #0
    e1e4:	2205      	movs	r2, #5
    e1e6:	4b05      	ldr	r3, [pc, #20]	; (e1fc <BTReceive+0x24>)
    e1e8:	4798      	blx	r3
	receiveIntercharTimeout = FALSE;        
    e1ea:	4b05      	ldr	r3, [pc, #20]	; (e200 <BTReceive+0x28>)
    e1ec:	2200      	movs	r2, #0
    e1ee:	701a      	strb	r2, [r3, #0]
}
    e1f0:	46bd      	mov	sp, r7
    e1f2:	bd80      	pop	{r7, pc}
    e1f4:	200034bc 	.word	0x200034bc
    e1f8:	20000a8c 	.word	0x20000a8c
    e1fc:	00004e2d 	.word	0x00004e2d
    e200:	2000066b 	.word	0x2000066b

0000e204 <BTTransmit>:

void BTTransmit(uint8_t *buffer,uint8_t length,uint8_t state)
{
    e204:	b580      	push	{r7, lr}
    e206:	b082      	sub	sp, #8
    e208:	af00      	add	r7, sp, #0
    e20a:	6078      	str	r0, [r7, #4]
    e20c:	1cfb      	adds	r3, r7, #3
    e20e:	7019      	strb	r1, [r3, #0]
    e210:	1cbb      	adds	r3, r7, #2
    e212:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_instance, buffer, length); 
    e214:	1cfb      	adds	r3, r7, #3
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	b29b      	uxth	r3, r3
    e21a:	4905      	ldr	r1, [pc, #20]	; (e230 <BTTransmit+0x2c>)
    e21c:	687a      	ldr	r2, [r7, #4]
    e21e:	1c08      	adds	r0, r1, #0
    e220:	1c11      	adds	r1, r2, #0
    e222:	1c1a      	adds	r2, r3, #0
    e224:	4b03      	ldr	r3, [pc, #12]	; (e234 <BTTransmit+0x30>)
    e226:	4798      	blx	r3
	
}
    e228:	46bd      	mov	sp, r7
    e22a:	b002      	add	sp, #8
    e22c:	bd80      	pop	{r7, pc}
    e22e:	46c0      	nop			; (mov r8, r8)
    e230:	200034bc 	.word	0x200034bc
    e234:	00004dd1 	.word	0x00004dd1

0000e238 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e238:	b580      	push	{r7, lr}
    e23a:	b084      	sub	sp, #16
    e23c:	af00      	add	r7, sp, #0
    e23e:	1c02      	adds	r2, r0, #0
    e240:	1dfb      	adds	r3, r7, #7
    e242:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e244:	1c3b      	adds	r3, r7, #0
    e246:	330f      	adds	r3, #15
    e248:	1dfa      	adds	r2, r7, #7
    e24a:	7812      	ldrb	r2, [r2, #0]
    e24c:	09d2      	lsrs	r2, r2, #7
    e24e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e250:	1c3b      	adds	r3, r7, #0
    e252:	330e      	adds	r3, #14
    e254:	1dfa      	adds	r2, r7, #7
    e256:	7812      	ldrb	r2, [r2, #0]
    e258:	0952      	lsrs	r2, r2, #5
    e25a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e25c:	4b0d      	ldr	r3, [pc, #52]	; (e294 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e25e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    e260:	1c3b      	adds	r3, r7, #0
    e262:	330f      	adds	r3, #15
    e264:	781b      	ldrb	r3, [r3, #0]
    e266:	2b00      	cmp	r3, #0
    e268:	d10e      	bne.n	e288 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    e26a:	1c3b      	adds	r3, r7, #0
    e26c:	330f      	adds	r3, #15
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	009b      	lsls	r3, r3, #2
    e272:	2210      	movs	r2, #16
    e274:	19d2      	adds	r2, r2, r7
    e276:	18d3      	adds	r3, r2, r3
    e278:	3b08      	subs	r3, #8
    e27a:	681a      	ldr	r2, [r3, #0]
    e27c:	1c3b      	adds	r3, r7, #0
    e27e:	330e      	adds	r3, #14
    e280:	781b      	ldrb	r3, [r3, #0]
    e282:	01db      	lsls	r3, r3, #7
    e284:	18d3      	adds	r3, r2, r3
    e286:	e000      	b.n	e28a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    e288:	2300      	movs	r3, #0
	}
}
    e28a:	1c18      	adds	r0, r3, #0
    e28c:	46bd      	mov	sp, r7
    e28e:	b004      	add	sp, #16
    e290:	bd80      	pop	{r7, pc}
    e292:	46c0      	nop			; (mov r8, r8)
    e294:	41004400 	.word	0x41004400

0000e298 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e298:	b580      	push	{r7, lr}
    e29a:	b082      	sub	sp, #8
    e29c:	af00      	add	r7, sp, #0
    e29e:	1c02      	adds	r2, r0, #0
    e2a0:	1dfb      	adds	r3, r7, #7
    e2a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e2a4:	1dfb      	adds	r3, r7, #7
    e2a6:	781b      	ldrb	r3, [r3, #0]
    e2a8:	1c18      	adds	r0, r3, #0
    e2aa:	4b03      	ldr	r3, [pc, #12]	; (e2b8 <port_get_group_from_gpio_pin+0x20>)
    e2ac:	4798      	blx	r3
    e2ae:	1c03      	adds	r3, r0, #0
}
    e2b0:	1c18      	adds	r0, r3, #0
    e2b2:	46bd      	mov	sp, r7
    e2b4:	b002      	add	sp, #8
    e2b6:	bd80      	pop	{r7, pc}
    e2b8:	0000e239 	.word	0x0000e239

0000e2bc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    e2bc:	b580      	push	{r7, lr}
    e2be:	b082      	sub	sp, #8
    e2c0:	af00      	add	r7, sp, #0
    e2c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    e2c4:	687b      	ldr	r3, [r7, #4]
    e2c6:	2200      	movs	r2, #0
    e2c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e2ca:	687b      	ldr	r3, [r7, #4]
    e2cc:	2201      	movs	r2, #1
    e2ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	2200      	movs	r2, #0
    e2d4:	709a      	strb	r2, [r3, #2]
}
    e2d6:	46bd      	mov	sp, r7
    e2d8:	b002      	add	sp, #8
    e2da:	bd80      	pop	{r7, pc}

0000e2dc <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    e2dc:	b580      	push	{r7, lr}
    e2de:	b084      	sub	sp, #16
    e2e0:	af00      	add	r7, sp, #0
    e2e2:	1c0a      	adds	r2, r1, #0
    e2e4:	1dfb      	adds	r3, r7, #7
    e2e6:	1c01      	adds	r1, r0, #0
    e2e8:	7019      	strb	r1, [r3, #0]
    e2ea:	1dbb      	adds	r3, r7, #6
    e2ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e2ee:	1dfb      	adds	r3, r7, #7
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	1c18      	adds	r0, r3, #0
    e2f4:	4b0d      	ldr	r3, [pc, #52]	; (e32c <port_pin_set_output_level+0x50>)
    e2f6:	4798      	blx	r3
    e2f8:	1c03      	adds	r3, r0, #0
    e2fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e2fc:	1dfb      	adds	r3, r7, #7
    e2fe:	781a      	ldrb	r2, [r3, #0]
    e300:	231f      	movs	r3, #31
    e302:	4013      	ands	r3, r2
    e304:	2201      	movs	r2, #1
    e306:	1c11      	adds	r1, r2, #0
    e308:	4099      	lsls	r1, r3
    e30a:	1c0b      	adds	r3, r1, #0
    e30c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    e30e:	1dbb      	adds	r3, r7, #6
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	2b00      	cmp	r3, #0
    e314:	d003      	beq.n	e31e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    e316:	68fb      	ldr	r3, [r7, #12]
    e318:	68ba      	ldr	r2, [r7, #8]
    e31a:	619a      	str	r2, [r3, #24]
    e31c:	e002      	b.n	e324 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    e31e:	68fb      	ldr	r3, [r7, #12]
    e320:	68ba      	ldr	r2, [r7, #8]
    e322:	615a      	str	r2, [r3, #20]
	}
}
    e324:	46bd      	mov	sp, r7
    e326:	b004      	add	sp, #16
    e328:	bd80      	pop	{r7, pc}
    e32a:	46c0      	nop			; (mov r8, r8)
    e32c:	0000e299 	.word	0x0000e299

0000e330 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    e330:	b580      	push	{r7, lr}
    e332:	b084      	sub	sp, #16
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e338:	687b      	ldr	r3, [r7, #4]
    e33a:	681b      	ldr	r3, [r3, #0]
    e33c:	60fb      	str	r3, [r7, #12]
#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	8a1b      	ldrh	r3, [r3, #16]
    e342:	b29b      	uxth	r3, r3
    e344:	1c1a      	adds	r2, r3, #0
    e346:	2380      	movs	r3, #128	; 0x80
    e348:	021b      	lsls	r3, r3, #8
    e34a:	4013      	ands	r3, r2
    e34c:	1e5a      	subs	r2, r3, #1
    e34e:	4193      	sbcs	r3, r2
    e350:	b2db      	uxtb	r3, r3
#  endif
}
    e352:	1c18      	adds	r0, r3, #0
    e354:	46bd      	mov	sp, r7
    e356:	b004      	add	sp, #16
    e358:	bd80      	pop	{r7, pc}
    e35a:	46c0      	nop			; (mov r8, r8)

0000e35c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    e35c:	b580      	push	{r7, lr}
    e35e:	b082      	sub	sp, #8
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	2201      	movs	r2, #1
    e368:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    e36a:	687b      	ldr	r3, [r7, #4]
    e36c:	2200      	movs	r2, #0
    e36e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;  //BBBBBBBBBBBBBBBB0;
    e370:	687b      	ldr	r3, [r7, #4]
    e372:	2200      	movs	r2, #0
    e374:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    e376:	687b      	ldr	r3, [r7, #4]
    e378:	22c0      	movs	r2, #192	; 0xc0
    e37a:	0392      	lsls	r2, r2, #14
    e37c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    e37e:	687b      	ldr	r3, [r7, #4]
    e380:	2200      	movs	r2, #0
    e382:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	2200      	movs	r2, #0
    e388:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    e38a:	687b      	ldr	r3, [r7, #4]
    e38c:	2201      	movs	r2, #1
    e38e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_1;  //0;
    e390:	687a      	ldr	r2, [r7, #4]
    e392:	2320      	movs	r3, #32
    e394:	2101      	movs	r1, #1
    e396:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	3314      	adds	r3, #20
    e39c:	1c18      	adds	r0, r3, #0
    e39e:	2100      	movs	r1, #0
    e3a0:	220c      	movs	r2, #12
    e3a2:	4b0a      	ldr	r3, [pc, #40]	; (e3cc <spi_get_config_defaults+0x70>)
    e3a4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    e3a6:	687b      	ldr	r3, [r7, #4]
    e3a8:	4a09      	ldr	r2, [pc, #36]	; (e3d0 <spi_get_config_defaults+0x74>)
    e3aa:	615a      	str	r2, [r3, #20]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    e3ac:	687b      	ldr	r3, [r7, #4]
    e3ae:	2200      	movs	r2, #0
    e3b0:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    e3b2:	687b      	ldr	r3, [r7, #4]
    e3b4:	2200      	movs	r2, #0
    e3b6:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    e3b8:	687b      	ldr	r3, [r7, #4]
    e3ba:	2200      	movs	r2, #0
    e3bc:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    e3be:	687b      	ldr	r3, [r7, #4]
    e3c0:	2200      	movs	r2, #0
    e3c2:	631a      	str	r2, [r3, #48]	; 0x30

};
    e3c4:	46bd      	mov	sp, r7
    e3c6:	b002      	add	sp, #8
    e3c8:	bd80      	pop	{r7, pc}
    e3ca:	46c0      	nop			; (mov r8, r8)
    e3cc:	00017e61 	.word	0x00017e61
    e3d0:	000186a0 	.word	0x000186a0

0000e3d4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    e3d4:	b580      	push	{r7, lr}
    e3d6:	b082      	sub	sp, #8
    e3d8:	af00      	add	r7, sp, #0
    e3da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    e3dc:	687b      	ldr	r3, [r7, #4]
    e3de:	220a      	movs	r2, #10
    e3e0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    e3e2:	687b      	ldr	r3, [r7, #4]
    e3e4:	2200      	movs	r2, #0
    e3e6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    e3e8:	687b      	ldr	r3, [r7, #4]
    e3ea:	2200      	movs	r2, #0
    e3ec:	709a      	strb	r2, [r3, #2]
}
    e3ee:	46bd      	mov	sp, r7
    e3f0:	b002      	add	sp, #8
    e3f2:	bd80      	pop	{r7, pc}

0000e3f4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    e3f4:	b580      	push	{r7, lr}
    e3f6:	b084      	sub	sp, #16
    e3f8:	af00      	add	r7, sp, #0
    e3fa:	6078      	str	r0, [r7, #4]
    e3fc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    e3fe:	683b      	ldr	r3, [r7, #0]
    e400:	781a      	ldrb	r2, [r3, #0]
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    e406:	683b      	ldr	r3, [r7, #0]
    e408:	785a      	ldrb	r2, [r3, #1]
    e40a:	687b      	ldr	r3, [r7, #4]
    e40c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    e40e:	683b      	ldr	r3, [r7, #0]
    e410:	789a      	ldrb	r2, [r3, #2]
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    e416:	1c3b      	adds	r3, r7, #0
    e418:	330c      	adds	r3, #12
    e41a:	1c18      	adds	r0, r3, #0
    e41c:	4b0b      	ldr	r3, [pc, #44]	; (e44c <spi_attach_slave+0x58>)
    e41e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    e420:	1c3b      	adds	r3, r7, #0
    e422:	330c      	adds	r3, #12
    e424:	2201      	movs	r2, #1
    e426:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    e428:	687b      	ldr	r3, [r7, #4]
    e42a:	781a      	ldrb	r2, [r3, #0]
    e42c:	1c3b      	adds	r3, r7, #0
    e42e:	330c      	adds	r3, #12
    e430:	1c10      	adds	r0, r2, #0
    e432:	1c19      	adds	r1, r3, #0
    e434:	4b06      	ldr	r3, [pc, #24]	; (e450 <spi_attach_slave+0x5c>)
    e436:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    e438:	687b      	ldr	r3, [r7, #4]
    e43a:	781b      	ldrb	r3, [r3, #0]
    e43c:	1c18      	adds	r0, r3, #0
    e43e:	2101      	movs	r1, #1
    e440:	4b04      	ldr	r3, [pc, #16]	; (e454 <spi_attach_slave+0x60>)
    e442:	4798      	blx	r3
}
    e444:	46bd      	mov	sp, r7
    e446:	b004      	add	sp, #16
    e448:	bd80      	pop	{r7, pc}
    e44a:	46c0      	nop			; (mov r8, r8)
    e44c:	0000e2bd 	.word	0x0000e2bd
    e450:	00011cfd 	.word	0x00011cfd
    e454:	0000e2dd 	.word	0x0000e2dd

0000e458 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    e458:	b580      	push	{r7, lr}
    e45a:	b084      	sub	sp, #16
    e45c:	af00      	add	r7, sp, #0
    e45e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    e460:	687b      	ldr	r3, [r7, #4]
    e462:	681b      	ldr	r3, [r3, #0]
    e464:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    e466:	46c0      	nop			; (mov r8, r8)
    e468:	687b      	ldr	r3, [r7, #4]
    e46a:	1c18      	adds	r0, r3, #0
    e46c:	4b06      	ldr	r3, [pc, #24]	; (e488 <spi_enable+0x30>)
    e46e:	4798      	blx	r3
    e470:	1c03      	adds	r3, r0, #0
    e472:	2b00      	cmp	r3, #0
    e474:	d1f8      	bne.n	e468 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    e476:	68fb      	ldr	r3, [r7, #12]
    e478:	681b      	ldr	r3, [r3, #0]
    e47a:	2202      	movs	r2, #2
    e47c:	431a      	orrs	r2, r3
    e47e:	68fb      	ldr	r3, [r7, #12]
    e480:	601a      	str	r2, [r3, #0]
}
    e482:	46bd      	mov	sp, r7
    e484:	b004      	add	sp, #16
    e486:	bd80      	pop	{r7, pc}
    e488:	0000e331 	.word	0x0000e331

0000e48c <SPIXConfigure>:
 
//----------------------------------------------------------------------------
//		SPIXConfigure
//---------------------------------------------------------------------------- 
void SPIXConfigure(void)
{
    e48c:	b580      	push	{r7, lr}
    e48e:	b08e      	sub	sp, #56	; 0x38
    e490:	af00      	add	r7, sp, #0
 
	//-----------------------------------
	// Configure and initialize software device 
	// instance of peripheral slave 
	//-----------------------------------
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    e492:	1c3b      	adds	r3, r7, #0
    e494:	1c18      	adds	r0, r3, #0
    e496:	4b17      	ldr	r3, [pc, #92]	; (e4f4 <SPIXConfigure+0x68>)
    e498:	4798      	blx	r3
	slave_dev_config.ss_pin = XSLAVE_SELECT_PIN;
    e49a:	1c3b      	adds	r3, r7, #0
    e49c:	2206      	movs	r2, #6
    e49e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slavex, &slave_dev_config);
    e4a0:	4a15      	ldr	r2, [pc, #84]	; (e4f8 <SPIXConfigure+0x6c>)
    e4a2:	1c3b      	adds	r3, r7, #0
    e4a4:	1c10      	adds	r0, r2, #0
    e4a6:	1c19      	adds	r1, r3, #0
    e4a8:	4b14      	ldr	r3, [pc, #80]	; (e4fc <SPIXConfigure+0x70>)
    e4aa:	4798      	blx	r3
	//------------------------------------
	// Configure, initialize and enable SERCOM SPI module 
	//------------------------------------
	spi_get_config_defaults(&config_spi_master);
    e4ac:	1d3b      	adds	r3, r7, #4
    e4ae:	1c18      	adds	r0, r3, #0
    e4b0:	4b13      	ldr	r3, [pc, #76]	; (e500 <SPIXConfigure+0x74>)
    e4b2:	4798      	blx	r3
	config_spi_master.mux_setting = EXT2_SPI_SERCOM_MUX_SETTING;
    e4b4:	1d3b      	adds	r3, r7, #4
    e4b6:	22c0      	movs	r2, #192	; 0xc0
    e4b8:	0392      	lsls	r2, r2, #14
    e4ba:	60da      	str	r2, [r3, #12]

	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EXT2_SPI_SERCOM_PINMUX_PAD0;
    e4bc:	1d3b      	adds	r3, r7, #4
    e4be:	4a11      	ldr	r2, [pc, #68]	; (e504 <SPIXConfigure+0x78>)
    e4c0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 = EXT2_SPI_SERCOM_PINMUX_PAD1;
    e4c2:	1d3b      	adds	r3, r7, #4
    e4c4:	4a10      	ldr	r2, [pc, #64]	; (e508 <SPIXConfigure+0x7c>)
    e4c6:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    e4c8:	1d3b      	adds	r3, r7, #4
    e4ca:	2201      	movs	r2, #1
    e4cc:	4252      	negs	r2, r2
    e4ce:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EXT2_SPI_SERCOM_PINMUX_PAD3;
    e4d0:	1d3b      	adds	r3, r7, #4
    e4d2:	4a0e      	ldr	r2, [pc, #56]	; (e50c <SPIXConfigure+0x80>)
    e4d4:	631a      	str	r2, [r3, #48]	; 0x30
	spi_init(&spix_master_instance, EXT2_SPI_MODULE, &config_spi_master);
    e4d6:	490e      	ldr	r1, [pc, #56]	; (e510 <SPIXConfigure+0x84>)
    e4d8:	4a0e      	ldr	r2, [pc, #56]	; (e514 <SPIXConfigure+0x88>)
    e4da:	1d3b      	adds	r3, r7, #4
    e4dc:	1c08      	adds	r0, r1, #0
    e4de:	1c11      	adds	r1, r2, #0
    e4e0:	1c1a      	adds	r2, r3, #0
    e4e2:	4b0d      	ldr	r3, [pc, #52]	; (e518 <SPIXConfigure+0x8c>)
    e4e4:	4798      	blx	r3
	spi_enable(&spix_master_instance);
    e4e6:	4b0a      	ldr	r3, [pc, #40]	; (e510 <SPIXConfigure+0x84>)
    e4e8:	1c18      	adds	r0, r3, #0
    e4ea:	4b0c      	ldr	r3, [pc, #48]	; (e51c <SPIXConfigure+0x90>)
    e4ec:	4798      	blx	r3
 
}
    e4ee:	46bd      	mov	sp, r7
    e4f0:	b00e      	add	sp, #56	; 0x38
    e4f2:	bd80      	pop	{r7, pc}
    e4f4:	0000e3d5 	.word	0x0000e3d5
    e4f8:	200035ec 	.word	0x200035ec
    e4fc:	0000e3f5 	.word	0x0000e3f5
    e500:	0000e35d 	.word	0x0000e35d
    e504:	00040003 	.word	0x00040003
    e508:	00050003 	.word	0x00050003
    e50c:	00070003 	.word	0x00070003
    e510:	20003688 	.word	0x20003688
    e514:	42000800 	.word	0x42000800
    e518:	0001315d 	.word	0x0001315d
    e51c:	0000e459 	.word	0x0000e459

0000e520 <SPIXMain>:
 //		SPIXMain
 //----------------------------------------------------------------------------
uint8_t rxBuffX[MAX_SPIX_BUFFER_SIZE];
uint8_t txBuffX[MAX_SPIX_BUFFER_SIZE];
int SPIXMain(void)
{
    e520:	b598      	push	{r3, r4, r7, lr}
    e522:	af00      	add	r7, sp, #0
//	system_init();
 
//	SPIXConfigure();
// while (true)
// {
	spi_select_slave(&spix_master_instance, &slavex, true);
    e524:	4a21      	ldr	r2, [pc, #132]	; (e5ac <SPIXMain+0x8c>)
    e526:	4b22      	ldr	r3, [pc, #136]	; (e5b0 <SPIXMain+0x90>)
    e528:	1c10      	adds	r0, r2, #0
    e52a:	1c19      	adds	r1, r3, #0
    e52c:	2201      	movs	r2, #1
    e52e:	4b21      	ldr	r3, [pc, #132]	; (e5b4 <SPIXMain+0x94>)
    e530:	4798      	blx	r3
 
	txBuffX[0] = 0x42;
    e532:	4b21      	ldr	r3, [pc, #132]	; (e5b8 <SPIXMain+0x98>)
    e534:	2242      	movs	r2, #66	; 0x42
    e536:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    e538:	4b1f      	ldr	r3, [pc, #124]	; (e5b8 <SPIXMain+0x98>)
    e53a:	2200      	movs	r2, #0
    e53c:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    e53e:	4b1e      	ldr	r3, [pc, #120]	; (e5b8 <SPIXMain+0x98>)
    e540:	2200      	movs	r2, #0
    e542:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],2);
    e544:	4919      	ldr	r1, [pc, #100]	; (e5ac <SPIXMain+0x8c>)
    e546:	4a1c      	ldr	r2, [pc, #112]	; (e5b8 <SPIXMain+0x98>)
    e548:	4b1c      	ldr	r3, [pc, #112]	; (e5bc <SPIXMain+0x9c>)
    e54a:	1c08      	adds	r0, r1, #0
    e54c:	1c11      	adds	r1, r2, #0
    e54e:	1c1a      	adds	r2, r3, #0
    e550:	2302      	movs	r3, #2
    e552:	4c1b      	ldr	r4, [pc, #108]	; (e5c0 <SPIXMain+0xa0>)
    e554:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    e556:	4a15      	ldr	r2, [pc, #84]	; (e5ac <SPIXMain+0x8c>)
    e558:	4b15      	ldr	r3, [pc, #84]	; (e5b0 <SPIXMain+0x90>)
    e55a:	1c10      	adds	r0, r2, #0
    e55c:	1c19      	adds	r1, r3, #0
    e55e:	2200      	movs	r2, #0
    e560:	4b14      	ldr	r3, [pc, #80]	; (e5b4 <SPIXMain+0x94>)
    e562:	4798      	blx	r3
// }
//	while (true) {
//		/* Infinite loop */
//	}

	spi_select_slave(&spix_master_instance, &slavex, true);
    e564:	4a11      	ldr	r2, [pc, #68]	; (e5ac <SPIXMain+0x8c>)
    e566:	4b12      	ldr	r3, [pc, #72]	; (e5b0 <SPIXMain+0x90>)
    e568:	1c10      	adds	r0, r2, #0
    e56a:	1c19      	adds	r1, r3, #0
    e56c:	2201      	movs	r2, #1
    e56e:	4b11      	ldr	r3, [pc, #68]	; (e5b4 <SPIXMain+0x94>)
    e570:	4798      	blx	r3
 
	txBuffX[0] = 0x01;
    e572:	4b11      	ldr	r3, [pc, #68]	; (e5b8 <SPIXMain+0x98>)
    e574:	2201      	movs	r2, #1
    e576:	701a      	strb	r2, [r3, #0]
	txBuffX[1] = 0x00;
    e578:	4b0f      	ldr	r3, [pc, #60]	; (e5b8 <SPIXMain+0x98>)
    e57a:	2200      	movs	r2, #0
    e57c:	705a      	strb	r2, [r3, #1]
	txBuffX[2] = 0x00;
    e57e:	4b0e      	ldr	r3, [pc, #56]	; (e5b8 <SPIXMain+0x98>)
    e580:	2200      	movs	r2, #0
    e582:	709a      	strb	r2, [r3, #2]
	spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],4);
    e584:	4909      	ldr	r1, [pc, #36]	; (e5ac <SPIXMain+0x8c>)
    e586:	4a0c      	ldr	r2, [pc, #48]	; (e5b8 <SPIXMain+0x98>)
    e588:	4b0c      	ldr	r3, [pc, #48]	; (e5bc <SPIXMain+0x9c>)
    e58a:	1c08      	adds	r0, r1, #0
    e58c:	1c11      	adds	r1, r2, #0
    e58e:	1c1a      	adds	r2, r3, #0
    e590:	2304      	movs	r3, #4
    e592:	4c0b      	ldr	r4, [pc, #44]	; (e5c0 <SPIXMain+0xa0>)
    e594:	47a0      	blx	r4
 
	spi_select_slave(&spix_master_instance, &slavex, false);
    e596:	4a05      	ldr	r2, [pc, #20]	; (e5ac <SPIXMain+0x8c>)
    e598:	4b05      	ldr	r3, [pc, #20]	; (e5b0 <SPIXMain+0x90>)
    e59a:	1c10      	adds	r0, r2, #0
    e59c:	1c19      	adds	r1, r3, #0
    e59e:	2200      	movs	r2, #0
    e5a0:	4b04      	ldr	r3, [pc, #16]	; (e5b4 <SPIXMain+0x94>)
    e5a2:	4798      	blx	r3
	return 1; 
    e5a4:	2301      	movs	r3, #1
 
}
    e5a6:	1c18      	adds	r0, r3, #0
    e5a8:	46bd      	mov	sp, r7
    e5aa:	bd98      	pop	{r3, r4, r7, pc}
    e5ac:	20003688 	.word	0x20003688
    e5b0:	200035ec 	.word	0x200035ec
    e5b4:	00013251 	.word	0x00013251
    e5b8:	200035f0 	.word	0x200035f0
    e5bc:	20003554 	.word	0x20003554
    e5c0:	0001332d 	.word	0x0001332d

0000e5c4 <SPIXInOut>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    e5c4:	b590      	push	{r4, r7, lr}
    e5c6:	b087      	sub	sp, #28
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	6039      	str	r1, [r7, #0]
    e5cc:	1dfb      	adds	r3, r7, #7
    e5ce:	1c01      	adds	r1, r0, #0
    e5d0:	7019      	strb	r1, [r3, #0]
    e5d2:	1d3b      	adds	r3, r7, #4
    e5d4:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    e5d6:	683b      	ldr	r3, [r7, #0]
    e5d8:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    e5da:	2300      	movs	r3, #0
    e5dc:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    e5de:	1d3b      	adds	r3, r7, #4
    e5e0:	881b      	ldrh	r3, [r3, #0]
    e5e2:	2b94      	cmp	r3, #148	; 0x94
    e5e4:	d858      	bhi.n	e698 <SPIXInOut+0xd4>
	 {
		 success = 1; 
    e5e6:	2301      	movs	r3, #1
    e5e8:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    e5ea:	4a2e      	ldr	r2, [pc, #184]	; (e6a4 <SPIXInOut+0xe0>)
    e5ec:	4b2e      	ldr	r3, [pc, #184]	; (e6a8 <SPIXInOut+0xe4>)
    e5ee:	1c10      	adds	r0, r2, #0
    e5f0:	1c19      	adds	r1, r3, #0
    e5f2:	2201      	movs	r2, #1
    e5f4:	4b2d      	ldr	r3, [pc, #180]	; (e6ac <SPIXInOut+0xe8>)
    e5f6:	4798      	blx	r3
		 for (i=0;i<size;i++)
    e5f8:	1c3b      	adds	r3, r7, #0
    e5fa:	3316      	adds	r3, #22
    e5fc:	2200      	movs	r2, #0
    e5fe:	801a      	strh	r2, [r3, #0]
    e600:	e010      	b.n	e624 <SPIXInOut+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    e602:	1c3b      	adds	r3, r7, #0
    e604:	3316      	adds	r3, #22
    e606:	881b      	ldrh	r3, [r3, #0]
    e608:	1c5a      	adds	r2, r3, #1
    e60a:	693b      	ldr	r3, [r7, #16]
    e60c:	1c59      	adds	r1, r3, #1
    e60e:	6139      	str	r1, [r7, #16]
    e610:	7819      	ldrb	r1, [r3, #0]
    e612:	4b27      	ldr	r3, [pc, #156]	; (e6b0 <SPIXInOut+0xec>)
    e614:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    e616:	1c3b      	adds	r3, r7, #0
    e618:	3316      	adds	r3, #22
    e61a:	881a      	ldrh	r2, [r3, #0]
    e61c:	1c3b      	adds	r3, r7, #0
    e61e:	3316      	adds	r3, #22
    e620:	3201      	adds	r2, #1
    e622:	801a      	strh	r2, [r3, #0]
    e624:	1c3a      	adds	r2, r7, #0
    e626:	3216      	adds	r2, #22
    e628:	1d3b      	adds	r3, r7, #4
    e62a:	8812      	ldrh	r2, [r2, #0]
    e62c:	881b      	ldrh	r3, [r3, #0]
    e62e:	429a      	cmp	r2, r3
    e630:	d3e7      	bcc.n	e602 <SPIXInOut+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 
		 txBuffX[0] = addr; 
    e632:	4b1f      	ldr	r3, [pc, #124]	; (e6b0 <SPIXInOut+0xec>)
    e634:	1dfa      	adds	r2, r7, #7
    e636:	7812      	ldrb	r2, [r2, #0]
    e638:	701a      	strb	r2, [r3, #0]
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    e63a:	1d3b      	adds	r3, r7, #4
    e63c:	881b      	ldrh	r3, [r3, #0]
    e63e:	3301      	adds	r3, #1
    e640:	b29b      	uxth	r3, r3
    e642:	4818      	ldr	r0, [pc, #96]	; (e6a4 <SPIXInOut+0xe0>)
    e644:	491a      	ldr	r1, [pc, #104]	; (e6b0 <SPIXInOut+0xec>)
    e646:	4a1b      	ldr	r2, [pc, #108]	; (e6b4 <SPIXInOut+0xf0>)
    e648:	4c1b      	ldr	r4, [pc, #108]	; (e6b8 <SPIXInOut+0xf4>)
    e64a:	47a0      	blx	r4
		 ptr = buffer; 
    e64c:	683b      	ldr	r3, [r7, #0]
    e64e:	613b      	str	r3, [r7, #16]
		 for (i=0;i<(size+1);i++)
    e650:	1c3b      	adds	r3, r7, #0
    e652:	3316      	adds	r3, #22
    e654:	2200      	movs	r2, #0
    e656:	801a      	strh	r2, [r3, #0]
    e658:	e00f      	b.n	e67a <SPIXInOut+0xb6>
		 {
			 *ptr++ = rxBuffX[i]; 
    e65a:	693b      	ldr	r3, [r7, #16]
    e65c:	1c5a      	adds	r2, r3, #1
    e65e:	613a      	str	r2, [r7, #16]
    e660:	1c3a      	adds	r2, r7, #0
    e662:	3216      	adds	r2, #22
    e664:	8812      	ldrh	r2, [r2, #0]
    e666:	4913      	ldr	r1, [pc, #76]	; (e6b4 <SPIXInOut+0xf0>)
    e668:	5c8a      	ldrb	r2, [r1, r2]
    e66a:	701a      	strb	r2, [r3, #0]
		 }
		 
		 txBuffX[0] = addr; 
 		 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
		 ptr = buffer; 
		 for (i=0;i<(size+1);i++)
    e66c:	1c3b      	adds	r3, r7, #0
    e66e:	3316      	adds	r3, #22
    e670:	881a      	ldrh	r2, [r3, #0]
    e672:	1c3b      	adds	r3, r7, #0
    e674:	3316      	adds	r3, #22
    e676:	3201      	adds	r2, #1
    e678:	801a      	strh	r2, [r3, #0]
    e67a:	1c3b      	adds	r3, r7, #0
    e67c:	3316      	adds	r3, #22
    e67e:	881a      	ldrh	r2, [r3, #0]
    e680:	1d3b      	adds	r3, r7, #4
    e682:	881b      	ldrh	r3, [r3, #0]
    e684:	3301      	adds	r3, #1
    e686:	429a      	cmp	r2, r3
    e688:	dbe7      	blt.n	e65a <SPIXInOut+0x96>
		 {
			 *ptr++ = rxBuffX[i]; 
		 } 
		 spi_select_slave(&spix_master_instance, &slavex, false);
    e68a:	4a06      	ldr	r2, [pc, #24]	; (e6a4 <SPIXInOut+0xe0>)
    e68c:	4b06      	ldr	r3, [pc, #24]	; (e6a8 <SPIXInOut+0xe4>)
    e68e:	1c10      	adds	r0, r2, #0
    e690:	1c19      	adds	r1, r3, #0
    e692:	2200      	movs	r2, #0
    e694:	4b05      	ldr	r3, [pc, #20]	; (e6ac <SPIXInOut+0xe8>)
    e696:	4798      	blx	r3
	 } 
	 return success; 
    e698:	68fb      	ldr	r3, [r7, #12]
 }
    e69a:	1c18      	adds	r0, r3, #0
    e69c:	46bd      	mov	sp, r7
    e69e:	b007      	add	sp, #28
    e6a0:	bd90      	pop	{r4, r7, pc}
    e6a2:	46c0      	nop			; (mov r8, r8)
    e6a4:	20003688 	.word	0x20003688
    e6a8:	200035ec 	.word	0x200035ec
    e6ac:	00013251 	.word	0x00013251
    e6b0:	200035f0 	.word	0x200035f0
    e6b4:	20003554 	.word	0x20003554
    e6b8:	0001332d 	.word	0x0001332d

0000e6bc <SPIXInOut2>:

 //----------------------------------------------------------------------------
 //		SPIXInOUt
 //----------------------------------------------------------------------------
 int SPIXInOut2(uint8_t addr,uint8_t *buffer,uint16_t size)
 {
    e6bc:	b590      	push	{r4, r7, lr}
    e6be:	b087      	sub	sp, #28
    e6c0:	af00      	add	r7, sp, #0
    e6c2:	6039      	str	r1, [r7, #0]
    e6c4:	1dfb      	adds	r3, r7, #7
    e6c6:	1c01      	adds	r1, r0, #0
    e6c8:	7019      	strb	r1, [r3, #0]
    e6ca:	1d3b      	adds	r3, r7, #4
    e6cc:	801a      	strh	r2, [r3, #0]
	 uint16_t i;
	 uint8_t *ptr; 
	 ptr = buffer; 
    e6ce:	683b      	ldr	r3, [r7, #0]
    e6d0:	613b      	str	r3, [r7, #16]
	 int success;
	 
	 success = 0; 
    e6d2:	2300      	movs	r3, #0
    e6d4:	60fb      	str	r3, [r7, #12]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
    e6d6:	1d3b      	adds	r3, r7, #4
    e6d8:	881b      	ldrh	r3, [r3, #0]
    e6da:	2b94      	cmp	r3, #148	; 0x94
    e6dc:	d869      	bhi.n	e7b2 <SPIXInOut2+0xf6>
	 {
		 success = 1; 
    e6de:	2301      	movs	r3, #1
    e6e0:	60fb      	str	r3, [r7, #12]
		 spi_select_slave(&spix_master_instance, &slavex, true);
    e6e2:	4a36      	ldr	r2, [pc, #216]	; (e7bc <SPIXInOut2+0x100>)
    e6e4:	4b36      	ldr	r3, [pc, #216]	; (e7c0 <SPIXInOut2+0x104>)
    e6e6:	1c10      	adds	r0, r2, #0
    e6e8:	1c19      	adds	r1, r3, #0
    e6ea:	2201      	movs	r2, #1
    e6ec:	4b35      	ldr	r3, [pc, #212]	; (e7c4 <SPIXInOut2+0x108>)
    e6ee:	4798      	blx	r3
		 for (i=0;i<size;i++)
    e6f0:	1c3b      	adds	r3, r7, #0
    e6f2:	3316      	adds	r3, #22
    e6f4:	2200      	movs	r2, #0
    e6f6:	801a      	strh	r2, [r3, #0]
    e6f8:	e010      	b.n	e71c <SPIXInOut2+0x60>
		 {
			txBuffX[i+1] = *ptr++;
    e6fa:	1c3b      	adds	r3, r7, #0
    e6fc:	3316      	adds	r3, #22
    e6fe:	881b      	ldrh	r3, [r3, #0]
    e700:	1c5a      	adds	r2, r3, #1
    e702:	693b      	ldr	r3, [r7, #16]
    e704:	1c59      	adds	r1, r3, #1
    e706:	6139      	str	r1, [r7, #16]
    e708:	7819      	ldrb	r1, [r3, #0]
    e70a:	4b2f      	ldr	r3, [pc, #188]	; (e7c8 <SPIXInOut2+0x10c>)
    e70c:	5499      	strb	r1, [r3, r2]
	 
	 if (size < (MAX_SPIX_BUFFER_SIZE-1))
	 {
		 success = 1; 
		 spi_select_slave(&spix_master_instance, &slavex, true);
		 for (i=0;i<size;i++)
    e70e:	1c3b      	adds	r3, r7, #0
    e710:	3316      	adds	r3, #22
    e712:	881a      	ldrh	r2, [r3, #0]
    e714:	1c3b      	adds	r3, r7, #0
    e716:	3316      	adds	r3, #22
    e718:	3201      	adds	r2, #1
    e71a:	801a      	strh	r2, [r3, #0]
    e71c:	1c3a      	adds	r2, r7, #0
    e71e:	3216      	adds	r2, #22
    e720:	1d3b      	adds	r3, r7, #4
    e722:	8812      	ldrh	r2, [r2, #0]
    e724:	881b      	ldrh	r3, [r3, #0]
    e726:	429a      	cmp	r2, r3
    e728:	d3e7      	bcc.n	e6fa <SPIXInOut2+0x3e>
		 {
			txBuffX[i+1] = *ptr++;
		 }
		 ptr = buffer; 
    e72a:	683b      	ldr	r3, [r7, #0]
    e72c:	613b      	str	r3, [r7, #16]
		 txBuffX[0] = addr; 
    e72e:	4b26      	ldr	r3, [pc, #152]	; (e7c8 <SPIXInOut2+0x10c>)
    e730:	1dfa      	adds	r2, r7, #7
    e732:	7812      	ldrb	r2, [r2, #0]
    e734:	701a      	strb	r2, [r3, #0]
		 if ((addr & 0x80)!= 0)
    e736:	1dfb      	adds	r3, r7, #7
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	b25b      	sxtb	r3, r3
    e73c:	2b00      	cmp	r3, #0
    e73e:	da09      	bge.n	e754 <SPIXInOut2+0x98>
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0], &rxBuffX[0],size+1);
    e740:	1d3b      	adds	r3, r7, #4
    e742:	881b      	ldrh	r3, [r3, #0]
    e744:	3301      	adds	r3, #1
    e746:	b29b      	uxth	r3, r3
    e748:	481c      	ldr	r0, [pc, #112]	; (e7bc <SPIXInOut2+0x100>)
    e74a:	491f      	ldr	r1, [pc, #124]	; (e7c8 <SPIXInOut2+0x10c>)
    e74c:	4a1f      	ldr	r2, [pc, #124]	; (e7cc <SPIXInOut2+0x110>)
    e74e:	4c20      	ldr	r4, [pc, #128]	; (e7d0 <SPIXInOut2+0x114>)
    e750:	47a0      	blx	r4
    e752:	e027      	b.n	e7a4 <SPIXInOut2+0xe8>
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
    e754:	1d3b      	adds	r3, r7, #4
    e756:	881b      	ldrh	r3, [r3, #0]
    e758:	3301      	adds	r3, #1
    e75a:	b29b      	uxth	r3, r3
    e75c:	4817      	ldr	r0, [pc, #92]	; (e7bc <SPIXInOut2+0x100>)
    e75e:	491a      	ldr	r1, [pc, #104]	; (e7c8 <SPIXInOut2+0x10c>)
    e760:	4a1a      	ldr	r2, [pc, #104]	; (e7cc <SPIXInOut2+0x110>)
    e762:	4c1b      	ldr	r4, [pc, #108]	; (e7d0 <SPIXInOut2+0x114>)
    e764:	47a0      	blx	r4
			 ptr = buffer; 
    e766:	683b      	ldr	r3, [r7, #0]
    e768:	613b      	str	r3, [r7, #16]
			 for (i=0;i<size;i++)
    e76a:	1c3b      	adds	r3, r7, #0
    e76c:	3316      	adds	r3, #22
    e76e:	2200      	movs	r2, #0
    e770:	801a      	strh	r2, [r3, #0]
    e772:	e010      	b.n	e796 <SPIXInOut2+0xda>
			 {
				*ptr++ = rxBuffX[i+1];
    e774:	693b      	ldr	r3, [r7, #16]
    e776:	1c5a      	adds	r2, r3, #1
    e778:	613a      	str	r2, [r7, #16]
    e77a:	1c3a      	adds	r2, r7, #0
    e77c:	3216      	adds	r2, #22
    e77e:	8812      	ldrh	r2, [r2, #0]
    e780:	3201      	adds	r2, #1
    e782:	4912      	ldr	r1, [pc, #72]	; (e7cc <SPIXInOut2+0x110>)
    e784:	5c8a      	ldrb	r2, [r1, r2]
    e786:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 spi_transceive_buffer_wait(&spix_master_instance,&txBuffX[0],&rxBuffX[0],size+1);
			 ptr = buffer; 
			 for (i=0;i<size;i++)
    e788:	1c3b      	adds	r3, r7, #0
    e78a:	3316      	adds	r3, #22
    e78c:	881a      	ldrh	r2, [r3, #0]
    e78e:	1c3b      	adds	r3, r7, #0
    e790:	3316      	adds	r3, #22
    e792:	3201      	adds	r2, #1
    e794:	801a      	strh	r2, [r3, #0]
    e796:	1c3a      	adds	r2, r7, #0
    e798:	3216      	adds	r2, #22
    e79a:	1d3b      	adds	r3, r7, #4
    e79c:	8812      	ldrh	r2, [r2, #0]
    e79e:	881b      	ldrh	r3, [r3, #0]
    e7a0:	429a      	cmp	r2, r3
    e7a2:	d3e7      	bcc.n	e774 <SPIXInOut2+0xb8>
			 {
				*ptr++ = rxBuffX[i+1];
			 }
		 }
		 spi_select_slave(&spix_master_instance, &slavex, false);
    e7a4:	4a05      	ldr	r2, [pc, #20]	; (e7bc <SPIXInOut2+0x100>)
    e7a6:	4b06      	ldr	r3, [pc, #24]	; (e7c0 <SPIXInOut2+0x104>)
    e7a8:	1c10      	adds	r0, r2, #0
    e7aa:	1c19      	adds	r1, r3, #0
    e7ac:	2200      	movs	r2, #0
    e7ae:	4b05      	ldr	r3, [pc, #20]	; (e7c4 <SPIXInOut2+0x108>)
    e7b0:	4798      	blx	r3
	 } 
	 return success; 
    e7b2:	68fb      	ldr	r3, [r7, #12]
 }
    e7b4:	1c18      	adds	r0, r3, #0
    e7b6:	46bd      	mov	sp, r7
    e7b8:	b007      	add	sp, #28
    e7ba:	bd90      	pop	{r4, r7, pc}
    e7bc:	20003688 	.word	0x20003688
    e7c0:	200035ec 	.word	0x200035ec
    e7c4:	00013251 	.word	0x00013251
    e7c8:	200035f0 	.word	0x200035f0
    e7cc:	20003554 	.word	0x20003554
    e7d0:	0001332d 	.word	0x0001332d

0000e7d4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e7d4:	b580      	push	{r7, lr}
    e7d6:	b084      	sub	sp, #16
    e7d8:	af00      	add	r7, sp, #0
    e7da:	1c02      	adds	r2, r0, #0
    e7dc:	1dfb      	adds	r3, r7, #7
    e7de:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e7e0:	1c3b      	adds	r3, r7, #0
    e7e2:	330f      	adds	r3, #15
    e7e4:	1dfa      	adds	r2, r7, #7
    e7e6:	7812      	ldrb	r2, [r2, #0]
    e7e8:	09d2      	lsrs	r2, r2, #7
    e7ea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e7ec:	1c3b      	adds	r3, r7, #0
    e7ee:	330e      	adds	r3, #14
    e7f0:	1dfa      	adds	r2, r7, #7
    e7f2:	7812      	ldrb	r2, [r2, #0]
    e7f4:	0952      	lsrs	r2, r2, #5
    e7f6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e7f8:	4b0d      	ldr	r3, [pc, #52]	; (e830 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e7fa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    e7fc:	1c3b      	adds	r3, r7, #0
    e7fe:	330f      	adds	r3, #15
    e800:	781b      	ldrb	r3, [r3, #0]
    e802:	2b00      	cmp	r3, #0
    e804:	d10e      	bne.n	e824 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    e806:	1c3b      	adds	r3, r7, #0
    e808:	330f      	adds	r3, #15
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	009b      	lsls	r3, r3, #2
    e80e:	2210      	movs	r2, #16
    e810:	19d2      	adds	r2, r2, r7
    e812:	18d3      	adds	r3, r2, r3
    e814:	3b08      	subs	r3, #8
    e816:	681a      	ldr	r2, [r3, #0]
    e818:	1c3b      	adds	r3, r7, #0
    e81a:	330e      	adds	r3, #14
    e81c:	781b      	ldrb	r3, [r3, #0]
    e81e:	01db      	lsls	r3, r3, #7
    e820:	18d3      	adds	r3, r2, r3
    e822:	e000      	b.n	e826 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    e824:	2300      	movs	r3, #0
	}
}
    e826:	1c18      	adds	r0, r3, #0
    e828:	46bd      	mov	sp, r7
    e82a:	b004      	add	sp, #16
    e82c:	bd80      	pop	{r7, pc}
    e82e:	46c0      	nop			; (mov r8, r8)
    e830:	41004400 	.word	0x41004400

0000e834 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    e834:	b580      	push	{r7, lr}
    e836:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    e838:	4b03      	ldr	r3, [pc, #12]	; (e848 <system_interrupt_enable_global+0x14>)
    e83a:	2201      	movs	r2, #1
    e83c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    e83e:	f3bf 8f5f 	dmb	sy
    e842:	b662      	cpsie	i
}
    e844:	46bd      	mov	sp, r7
    e846:	bd80      	pop	{r7, pc}
    e848:	20000044 	.word	0x20000044

0000e84c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    e84c:	b580      	push	{r7, lr}
    e84e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    e850:	b672      	cpsid	i
    e852:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e856:	4b02      	ldr	r3, [pc, #8]	; (e860 <system_interrupt_disable_global+0x14>)
    e858:	2200      	movs	r2, #0
    e85a:	701a      	strb	r2, [r3, #0]
}
    e85c:	46bd      	mov	sp, r7
    e85e:	bd80      	pop	{r7, pc}
    e860:	20000044 	.word	0x20000044

0000e864 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
    e86a:	1c02      	adds	r2, r0, #0
    e86c:	1dfb      	adds	r3, r7, #7
    e86e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e870:	4b06      	ldr	r3, [pc, #24]	; (e88c <system_interrupt_enable+0x28>)
    e872:	1dfa      	adds	r2, r7, #7
    e874:	7812      	ldrb	r2, [r2, #0]
    e876:	1c11      	adds	r1, r2, #0
    e878:	221f      	movs	r2, #31
    e87a:	400a      	ands	r2, r1
    e87c:	2101      	movs	r1, #1
    e87e:	1c08      	adds	r0, r1, #0
    e880:	4090      	lsls	r0, r2
    e882:	1c02      	adds	r2, r0, #0
    e884:	601a      	str	r2, [r3, #0]
}
    e886:	46bd      	mov	sp, r7
    e888:	b002      	add	sp, #8
    e88a:	bd80      	pop	{r7, pc}
    e88c:	e000e100 	.word	0xe000e100

0000e890 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e890:	b580      	push	{r7, lr}
    e892:	b082      	sub	sp, #8
    e894:	af00      	add	r7, sp, #0
    e896:	1c02      	adds	r2, r0, #0
    e898:	1dfb      	adds	r3, r7, #7
    e89a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e89c:	1dfb      	adds	r3, r7, #7
    e89e:	781b      	ldrb	r3, [r3, #0]
    e8a0:	1c18      	adds	r0, r3, #0
    e8a2:	4b03      	ldr	r3, [pc, #12]	; (e8b0 <port_get_group_from_gpio_pin+0x20>)
    e8a4:	4798      	blx	r3
    e8a6:	1c03      	adds	r3, r0, #0
}
    e8a8:	1c18      	adds	r0, r3, #0
    e8aa:	46bd      	mov	sp, r7
    e8ac:	b002      	add	sp, #8
    e8ae:	bd80      	pop	{r7, pc}
    e8b0:	0000e7d5 	.word	0x0000e7d5

0000e8b4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    e8b4:	b580      	push	{r7, lr}
    e8b6:	b082      	sub	sp, #8
    e8b8:	af00      	add	r7, sp, #0
    e8ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    e8bc:	687b      	ldr	r3, [r7, #4]
    e8be:	2200      	movs	r2, #0
    e8c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    e8c2:	687b      	ldr	r3, [r7, #4]
    e8c4:	2201      	movs	r2, #1
    e8c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    e8c8:	687b      	ldr	r3, [r7, #4]
    e8ca:	2200      	movs	r2, #0
    e8cc:	709a      	strb	r2, [r3, #2]
}
    e8ce:	46bd      	mov	sp, r7
    e8d0:	b002      	add	sp, #8
    e8d2:	bd80      	pop	{r7, pc}

0000e8d4 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    e8d4:	b580      	push	{r7, lr}
    e8d6:	b084      	sub	sp, #16
    e8d8:	af00      	add	r7, sp, #0
    e8da:	1c0a      	adds	r2, r1, #0
    e8dc:	1dfb      	adds	r3, r7, #7
    e8de:	1c01      	adds	r1, r0, #0
    e8e0:	7019      	strb	r1, [r3, #0]
    e8e2:	1dbb      	adds	r3, r7, #6
    e8e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e8e6:	1dfb      	adds	r3, r7, #7
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	1c18      	adds	r0, r3, #0
    e8ec:	4b0d      	ldr	r3, [pc, #52]	; (e924 <port_pin_set_output_level+0x50>)
    e8ee:	4798      	blx	r3
    e8f0:	1c03      	adds	r3, r0, #0
    e8f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e8f4:	1dfb      	adds	r3, r7, #7
    e8f6:	781a      	ldrb	r2, [r3, #0]
    e8f8:	231f      	movs	r3, #31
    e8fa:	4013      	ands	r3, r2
    e8fc:	2201      	movs	r2, #1
    e8fe:	1c11      	adds	r1, r2, #0
    e900:	4099      	lsls	r1, r3
    e902:	1c0b      	adds	r3, r1, #0
    e904:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    e906:	1dbb      	adds	r3, r7, #6
    e908:	781b      	ldrb	r3, [r3, #0]
    e90a:	2b00      	cmp	r3, #0
    e90c:	d003      	beq.n	e916 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    e90e:	68fb      	ldr	r3, [r7, #12]
    e910:	68ba      	ldr	r2, [r7, #8]
    e912:	619a      	str	r2, [r3, #24]
    e914:	e002      	b.n	e91c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    e916:	68fb      	ldr	r3, [r7, #12]
    e918:	68ba      	ldr	r2, [r7, #8]
    e91a:	615a      	str	r2, [r3, #20]
	}
}
    e91c:	46bd      	mov	sp, r7
    e91e:	b004      	add	sp, #16
    e920:	bd80      	pop	{r7, pc}
    e922:	46c0      	nop			; (mov r8, r8)
    e924:	0000e891 	.word	0x0000e891

0000e928 <tc_is_syncing>:
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    e928:	b580      	push	{r7, lr}
    e92a:	b084      	sub	sp, #16
    e92c:	af00      	add	r7, sp, #0
    e92e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e930:	687b      	ldr	r3, [r7, #4]
    e932:	681b      	ldr	r3, [r3, #0]
    e934:	60fb      	str	r3, [r7, #12]

	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    e936:	68fb      	ldr	r3, [r7, #12]
    e938:	7bdb      	ldrb	r3, [r3, #15]
    e93a:	b2db      	uxtb	r3, r3
    e93c:	1c1a      	adds	r2, r3, #0
    e93e:	2380      	movs	r3, #128	; 0x80
    e940:	4013      	ands	r3, r2
    e942:	1e5a      	subs	r2, r3, #1
    e944:	4193      	sbcs	r3, r2
    e946:	b2db      	uxtb	r3, r3
}
    e948:	1c18      	adds	r0, r3, #0
    e94a:	46bd      	mov	sp, r7
    e94c:	b004      	add	sp, #16
    e94e:	bd80      	pop	{r7, pc}

0000e950 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    e950:	b580      	push	{r7, lr}
    e952:	b082      	sub	sp, #8
    e954:	af00      	add	r7, sp, #0
    e956:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    e958:	687b      	ldr	r3, [r7, #4]
    e95a:	2200      	movs	r2, #0
    e95c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    e95e:	687b      	ldr	r3, [r7, #4]
    e960:	2200      	movs	r2, #0
    e962:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    e964:	687b      	ldr	r3, [r7, #4]
    e966:	2200      	movs	r2, #0
    e968:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    e96a:	687b      	ldr	r3, [r7, #4]
    e96c:	2200      	movs	r2, #0
    e96e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	2200      	movs	r2, #0
    e974:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	2200      	movs	r2, #0
    e97a:	705a      	strb	r2, [r3, #1]

	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    e97c:	687b      	ldr	r3, [r7, #4]
    e97e:	2200      	movs	r2, #0
    e980:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    e982:	687b      	ldr	r3, [r7, #4]
    e984:	2200      	movs	r2, #0
    e986:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    e988:	687b      	ldr	r3, [r7, #4]
    e98a:	2200      	movs	r2, #0
    e98c:	731a      	strb	r2, [r3, #12]

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    e98e:	687b      	ldr	r3, [r7, #4]
    e990:	2200      	movs	r2, #0
    e992:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    e994:	687b      	ldr	r3, [r7, #4]
    e996:	2200      	movs	r2, #0
    e998:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    e99a:	687b      	ldr	r3, [r7, #4]
    e99c:	2200      	movs	r2, #0
    e99e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	2200      	movs	r2, #0
    e9a4:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    e9a6:	687b      	ldr	r3, [r7, #4]
    e9a8:	2200      	movs	r2, #0
    e9aa:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    e9ac:	687b      	ldr	r3, [r7, #4]
    e9ae:	2200      	movs	r2, #0
    e9b0:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    e9b2:	687b      	ldr	r3, [r7, #4]
    e9b4:	2200      	movs	r2, #0
    e9b6:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    e9b8:	687b      	ldr	r3, [r7, #4]
    e9ba:	2200      	movs	r2, #0
    e9bc:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    e9be:	687b      	ldr	r3, [r7, #4]
    e9c0:	2200      	movs	r2, #0
    e9c2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    e9c4:	687b      	ldr	r3, [r7, #4]
    e9c6:	2200      	movs	r2, #0
    e9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    e9ca:	687b      	ldr	r3, [r7, #4]
    e9cc:	2200      	movs	r2, #0
    e9ce:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    e9d0:	46bd      	mov	sp, r7
    e9d2:	b002      	add	sp, #8
    e9d4:	bd80      	pop	{r7, pc}
    e9d6:	46c0      	nop			; (mov r8, r8)

0000e9d8 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    e9d8:	b580      	push	{r7, lr}
    e9da:	b084      	sub	sp, #16
    e9dc:	af00      	add	r7, sp, #0
    e9de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e9e0:	687b      	ldr	r3, [r7, #4]
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    e9e6:	46c0      	nop			; (mov r8, r8)
    e9e8:	687b      	ldr	r3, [r7, #4]
    e9ea:	1c18      	adds	r0, r3, #0
    e9ec:	4b07      	ldr	r3, [pc, #28]	; (ea0c <tc_enable+0x34>)
    e9ee:	4798      	blx	r3
    e9f0:	1c03      	adds	r3, r0, #0
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d1f8      	bne.n	e9e8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    e9f6:	68fb      	ldr	r3, [r7, #12]
    e9f8:	881b      	ldrh	r3, [r3, #0]
    e9fa:	b29b      	uxth	r3, r3
    e9fc:	2202      	movs	r2, #2
    e9fe:	4313      	orrs	r3, r2
    ea00:	b29a      	uxth	r2, r3
    ea02:	68fb      	ldr	r3, [r7, #12]
    ea04:	801a      	strh	r2, [r3, #0]
}
    ea06:	46bd      	mov	sp, r7
    ea08:	b004      	add	sp, #16
    ea0a:	bd80      	pop	{r7, pc}
    ea0c:	0000e929 	.word	0x0000e929

0000ea10 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b082      	sub	sp, #8
    ea14:	af00      	add	r7, sp, #0
    ea16:	6078      	str	r0, [r7, #4]
	static uint8_t tc_interrupt_vectors[TC_INST_NUM] =
		{
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ea18:	4a04      	ldr	r2, [pc, #16]	; (ea2c <_tc_interrupt_get_interrupt_vector+0x1c>)
    ea1a:	687b      	ldr	r3, [r7, #4]
    ea1c:	18d3      	adds	r3, r2, r3
    ea1e:	781b      	ldrb	r3, [r3, #0]
    ea20:	b2db      	uxtb	r3, r3
    ea22:	b25b      	sxtb	r3, r3
}
    ea24:	1c18      	adds	r0, r3, #0
    ea26:	46bd      	mov	sp, r7
    ea28:	b002      	add	sp, #8
    ea2a:	bd80      	pop	{r7, pc}
    ea2c:	20000004 	.word	0x20000004

0000ea30 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    ea30:	b580      	push	{r7, lr}
    ea32:	b082      	sub	sp, #8
    ea34:	af00      	add	r7, sp, #0
    ea36:	6078      	str	r0, [r7, #4]
    ea38:	1c0a      	adds	r2, r1, #0
    ea3a:	1cfb      	adds	r3, r7, #3
    ea3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    ea3e:	687b      	ldr	r3, [r7, #4]
    ea40:	681b      	ldr	r3, [r3, #0]
    ea42:	1c18      	adds	r0, r3, #0
    ea44:	4b22      	ldr	r3, [pc, #136]	; (ead0 <tc_enable_callback+0xa0>)
    ea46:	4798      	blx	r3
    ea48:	1c03      	adds	r3, r0, #0
    ea4a:	1c18      	adds	r0, r3, #0
    ea4c:	4b21      	ldr	r3, [pc, #132]	; (ead4 <tc_enable_callback+0xa4>)
    ea4e:	4798      	blx	r3
    ea50:	1c03      	adds	r3, r0, #0
    ea52:	1c18      	adds	r0, r3, #0
    ea54:	4b20      	ldr	r3, [pc, #128]	; (ead8 <tc_enable_callback+0xa8>)
    ea56:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    ea58:	1cfb      	adds	r3, r7, #3
    ea5a:	781b      	ldrb	r3, [r3, #0]
    ea5c:	2b02      	cmp	r3, #2
    ea5e:	d10b      	bne.n	ea78 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	7e5b      	ldrb	r3, [r3, #25]
    ea64:	2210      	movs	r2, #16
    ea66:	4313      	orrs	r3, r2
    ea68:	b2da      	uxtb	r2, r3
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    ea6e:	687b      	ldr	r3, [r7, #4]
    ea70:	681b      	ldr	r3, [r3, #0]
    ea72:	2210      	movs	r2, #16
    ea74:	735a      	strb	r2, [r3, #13]
    ea76:	e028      	b.n	eaca <tc_enable_callback+0x9a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    ea78:	1cfb      	adds	r3, r7, #3
    ea7a:	781b      	ldrb	r3, [r3, #0]
    ea7c:	2b03      	cmp	r3, #3
    ea7e:	d10b      	bne.n	ea98 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    ea80:	687b      	ldr	r3, [r7, #4]
    ea82:	7e5b      	ldrb	r3, [r3, #25]
    ea84:	2220      	movs	r2, #32
    ea86:	4313      	orrs	r3, r2
    ea88:	b2da      	uxtb	r2, r3
    ea8a:	687b      	ldr	r3, [r7, #4]
    ea8c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    ea8e:	687b      	ldr	r3, [r7, #4]
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	2220      	movs	r2, #32
    ea94:	735a      	strb	r2, [r3, #13]
    ea96:	e018      	b.n	eaca <tc_enable_callback+0x9a>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    ea98:	687b      	ldr	r3, [r7, #4]
    ea9a:	7e5b      	ldrb	r3, [r3, #25]
    ea9c:	b2da      	uxtb	r2, r3
    ea9e:	1cfb      	adds	r3, r7, #3
    eaa0:	781b      	ldrb	r3, [r3, #0]
    eaa2:	2101      	movs	r1, #1
    eaa4:	1c08      	adds	r0, r1, #0
    eaa6:	4098      	lsls	r0, r3
    eaa8:	1c03      	adds	r3, r0, #0
    eaaa:	b2db      	uxtb	r3, r3
    eaac:	4313      	orrs	r3, r2
    eaae:	b2db      	uxtb	r3, r3
    eab0:	b2da      	uxtb	r2, r3
    eab2:	687b      	ldr	r3, [r7, #4]
    eab4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	681b      	ldr	r3, [r3, #0]
    eaba:	1cfa      	adds	r2, r7, #3
    eabc:	7812      	ldrb	r2, [r2, #0]
    eabe:	2101      	movs	r1, #1
    eac0:	1c08      	adds	r0, r1, #0
    eac2:	4090      	lsls	r0, r2
    eac4:	1c02      	adds	r2, r0, #0
    eac6:	b2d2      	uxtb	r2, r2
    eac8:	735a      	strb	r2, [r3, #13]
	}
}
    eaca:	46bd      	mov	sp, r7
    eacc:	b002      	add	sp, #8
    eace:	bd80      	pop	{r7, pc}
    ead0:	00005281 	.word	0x00005281
    ead4:	0000ea11 	.word	0x0000ea11
    ead8:	0000e865 	.word	0x0000e865

0000eadc <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    eadc:	b580      	push	{r7, lr}
    eade:	b082      	sub	sp, #8
    eae0:	af00      	add	r7, sp, #0
    eae2:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	2200      	movs	r2, #0
    eae8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = false;
    eaea:	687b      	ldr	r3, [r7, #4]
    eaec:	2200      	movs	r2, #0
    eaee:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    eaf0:	4b09      	ldr	r3, [pc, #36]	; (eb18 <nvm_get_config_defaults+0x3c>)
    eaf2:	685b      	ldr	r3, [r3, #4]
    eaf4:	085b      	lsrs	r3, r3, #1
    eaf6:	1c1a      	adds	r2, r3, #0
    eaf8:	230f      	movs	r3, #15
    eafa:	4013      	ands	r3, r2
    eafc:	b2db      	uxtb	r3, r3
    eafe:	1c1a      	adds	r2, r3, #0
    eb00:	687b      	ldr	r3, [r7, #4]
    eb02:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    eb04:	687b      	ldr	r3, [r7, #4]
    eb06:	2200      	movs	r2, #0
    eb08:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    eb0a:	687b      	ldr	r3, [r7, #4]
    eb0c:	2200      	movs	r2, #0
    eb0e:	711a      	strb	r2, [r3, #4]
}
    eb10:	46bd      	mov	sp, r7
    eb12:	b002      	add	sp, #8
    eb14:	bd80      	pop	{r7, pc}
    eb16:	46c0      	nop			; (mov r8, r8)
    eb18:	41004000 	.word	0x41004000

0000eb1c <wdt_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void wdt_get_config_defaults(
		struct wdt_conf *const config)
{
    eb1c:	b580      	push	{r7, lr}
    eb1e:	b082      	sub	sp, #8
    eb20:	af00      	add	r7, sp, #0
    eb22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    eb24:	687b      	ldr	r3, [r7, #4]
    eb26:	2200      	movs	r2, #0
    eb28:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    eb2a:	687b      	ldr	r3, [r7, #4]
    eb2c:	2201      	movs	r2, #1
    eb2e:	705a      	strb	r2, [r3, #1]
#if !(SAML21)
	config->clock_source         = GCLK_GENERATOR_4;
    eb30:	687b      	ldr	r3, [r7, #4]
    eb32:	2204      	movs	r2, #4
    eb34:	709a      	strb	r2, [r3, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    eb36:	687b      	ldr	r3, [r7, #4]
    eb38:	220c      	movs	r2, #12
    eb3a:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    eb3c:	687b      	ldr	r3, [r7, #4]
    eb3e:	2200      	movs	r2, #0
    eb40:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    eb42:	687b      	ldr	r3, [r7, #4]
    eb44:	2200      	movs	r2, #0
    eb46:	715a      	strb	r2, [r3, #5]
}
    eb48:	46bd      	mov	sp, r7
    eb4a:	b002      	add	sp, #8
    eb4c:	bd80      	pop	{r7, pc}
    eb4e:	46c0      	nop			; (mov r8, r8)

0000eb50 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    eb50:	b580      	push	{r7, lr}
    eb52:	b082      	sub	sp, #8
    eb54:	af00      	add	r7, sp, #0
    eb56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    eb58:	687b      	ldr	r3, [r7, #4]
    eb5a:	2200      	movs	r2, #0
    eb5c:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	2200      	movs	r2, #0
    eb62:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    eb64:	687b      	ldr	r3, [r7, #4]
    eb66:	2208      	movs	r2, #8
    eb68:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    eb6a:	687b      	ldr	r3, [r7, #4]
    eb6c:	2227      	movs	r2, #39	; 0x27
    eb6e:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    eb70:	687b      	ldr	r3, [r7, #4]
    eb72:	2201      	movs	r2, #1
    eb74:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    eb76:	687b      	ldr	r3, [r7, #4]
    eb78:	2201      	movs	r2, #1
    eb7a:	71da      	strb	r2, [r3, #7]
}
    eb7c:	46bd      	mov	sp, r7
    eb7e:	b002      	add	sp, #8
    eb80:	bd80      	pop	{r7, pc}
    eb82:	46c0      	nop			; (mov r8, r8)

0000eb84 <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    eb84:	b580      	push	{r7, lr}
    eb86:	b082      	sub	sp, #8
    eb88:	af00      	add	r7, sp, #0
    eb8a:	1c02      	adds	r2, r0, #0
    eb8c:	1dfb      	adds	r3, r7, #7
    eb8e:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    eb90:	1dfb      	adds	r3, r7, #7
    eb92:	781b      	ldrb	r3, [r3, #0]
    eb94:	2b00      	cmp	r3, #0
    eb96:	d108      	bne.n	ebaa <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    eb98:	4b06      	ldr	r3, [pc, #24]	; (ebb4 <bod_enable+0x30>)
    eb9a:	4a06      	ldr	r2, [pc, #24]	; (ebb4 <bod_enable+0x30>)
    eb9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    eb9e:	2102      	movs	r1, #2
    eba0:	430a      	orrs	r2, r1
    eba2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    eba4:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    eba6:	2300      	movs	r3, #0
    eba8:	e000      	b.n	ebac <bod_enable+0x28>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    ebaa:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    ebac:	1c18      	adds	r0, r3, #0
    ebae:	46bd      	mov	sp, r7
    ebb0:	b002      	add	sp, #8
    ebb2:	bd80      	pop	{r7, pc}
    ebb4:	40000800 	.word	0x40000800

0000ebb8 <EmptyTask>:
void CommSupTask(void);
void EmptyTask(void);


void EmptyTask(void)
{
    ebb8:	b580      	push	{r7, lr}
    ebba:	af00      	add	r7, sp, #0
	
}
    ebbc:	46bd      	mov	sp, r7
    ebbe:	bd80      	pop	{r7, pc}

0000ebc0 <configure_bod33>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
static void configure_bod33(void)
{
    ebc0:	b580      	push	{r7, lr}
    ebc2:	b082      	sub	sp, #8
    ebc4:	af00      	add	r7, sp, #0
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    ebc6:	1c3b      	adds	r3, r7, #0
    ebc8:	1c18      	adds	r0, r3, #0
    ebca:	4b06      	ldr	r3, [pc, #24]	; (ebe4 <configure_bod33+0x24>)
    ebcc:	4798      	blx	r3
	bod_set_config(BOD_BOD33, &config_bod33);
    ebce:	1c3b      	adds	r3, r7, #0
    ebd0:	2000      	movs	r0, #0
    ebd2:	1c19      	adds	r1, r3, #0
    ebd4:	4b04      	ldr	r3, [pc, #16]	; (ebe8 <configure_bod33+0x28>)
    ebd6:	4798      	blx	r3
	bod_enable(BOD_BOD33);
    ebd8:	2000      	movs	r0, #0
    ebda:	4b04      	ldr	r3, [pc, #16]	; (ebec <configure_bod33+0x2c>)
    ebdc:	4798      	blx	r3
}
    ebde:	46bd      	mov	sp, r7
    ebe0:	b002      	add	sp, #8
    ebe2:	bd80      	pop	{r7, pc}
    ebe4:	0000eb51 	.word	0x0000eb51
    ebe8:	00003d19 	.word	0x00003d19
    ebec:	0000eb85 	.word	0x0000eb85

0000ebf0 <configure_wdt>:
//	else {
//		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
//	}
//==============================================================================
void configure_wdt(void)
{
    ebf0:	b580      	push	{r7, lr}
    ebf2:	b082      	sub	sp, #8
    ebf4:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    ebf6:	1c3b      	adds	r3, r7, #0
    ebf8:	1c18      	adds	r0, r3, #0
    ebfa:	4b09      	ldr	r3, [pc, #36]	; (ec20 <configure_wdt+0x30>)
    ebfc:	4798      	blx	r3
	 
	config_wdt.always_on      = false;
    ebfe:	1c3b      	adds	r3, r7, #0
    ec00:	2200      	movs	r2, #0
    ec02:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    ec04:	1c3b      	adds	r3, r7, #0
    ec06:	2204      	movs	r2, #4
    ec08:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    ec0a:	1c3b      	adds	r3, r7, #0
    ec0c:	220c      	movs	r2, #12
    ec0e:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    ec10:	1c3b      	adds	r3, r7, #0
    ec12:	1c18      	adds	r0, r3, #0
    ec14:	4b03      	ldr	r3, [pc, #12]	; (ec24 <configure_wdt+0x34>)
    ec16:	4798      	blx	r3
 
}
    ec18:	46bd      	mov	sp, r7
    ec1a:	b002      	add	sp, #8
    ec1c:	bd80      	pop	{r7, pc}
    ec1e:	46c0      	nop			; (mov r8, r8)
    ec20:	0000eb1d 	.word	0x0000eb1d
    ec24:	000059d1 	.word	0x000059d1

0000ec28 <deconfigure_wdt>:
 

void deconfigure_wdt(void)
{
    ec28:	b580      	push	{r7, lr}
    ec2a:	b082      	sub	sp, #8
    ec2c:	af00      	add	r7, sp, #0
	// for the Watchdog settings and fill
	// with the default module settings. 
	//----------------------------------- 
	struct wdt_conf config_wdt;
	 
	wdt_get_config_defaults(&config_wdt);
    ec2e:	1c3b      	adds	r3, r7, #0
    ec30:	1c18      	adds	r0, r3, #0
    ec32:	4b0a      	ldr	r3, [pc, #40]	; (ec5c <deconfigure_wdt+0x34>)
    ec34:	4798      	blx	r3
	config_wdt.enable               = false;
    ec36:	1c3b      	adds	r3, r7, #0
    ec38:	2200      	movs	r2, #0
    ec3a:	705a      	strb	r2, [r3, #1]
	config_wdt.always_on      = false;
    ec3c:	1c3b      	adds	r3, r7, #0
    ec3e:	2200      	movs	r2, #0
    ec40:	701a      	strb	r2, [r3, #0]
#if !(SAML21)
	config_wdt.clock_source   = GCLK_GENERATOR_4;
    ec42:	1c3b      	adds	r3, r7, #0
    ec44:	2204      	movs	r2, #4
    ec46:	709a      	strb	r2, [r3, #2]
#endif
	config_wdt.timeout_period = WDT_PERIOD_16384CLK;  //WDT_PERIOD_2048CLK;
    ec48:	1c3b      	adds	r3, r7, #0
    ec4a:	220c      	movs	r2, #12
    ec4c:	70da      	strb	r2, [r3, #3]
 
	wdt_set_config(&config_wdt);
    ec4e:	1c3b      	adds	r3, r7, #0
    ec50:	1c18      	adds	r0, r3, #0
    ec52:	4b03      	ldr	r3, [pc, #12]	; (ec60 <deconfigure_wdt+0x38>)
    ec54:	4798      	blx	r3
 
}
    ec56:	46bd      	mov	sp, r7
    ec58:	b002      	add	sp, #8
    ec5a:	bd80      	pop	{r7, pc}
    ec5c:	0000eb1d 	.word	0x0000eb1d
    ec60:	000059d1 	.word	0x000059d1

0000ec64 <HardDelay>:
uint8_t motorTest; 	
uint8_t message;

uint8_t testI2C;
void HardDelay(void)
{
    ec64:	b580      	push	{r7, lr}
    ec66:	b082      	sub	sp, #8
    ec68:	af00      	add	r7, sp, #0
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    ec6a:	2300      	movs	r3, #0
    ec6c:	607b      	str	r3, [r7, #4]
    ec6e:	e008      	b.n	ec82 <HardDelay+0x1e>
	{
		testI2C++;
    ec70:	4b07      	ldr	r3, [pc, #28]	; (ec90 <HardDelay+0x2c>)
    ec72:	781b      	ldrb	r3, [r3, #0]
    ec74:	3301      	adds	r3, #1
    ec76:	b2da      	uxtb	r2, r3
    ec78:	4b05      	ldr	r3, [pc, #20]	; (ec90 <HardDelay+0x2c>)
    ec7a:	701a      	strb	r2, [r3, #0]

uint8_t testI2C;
void HardDelay(void)
{
	uint32_t j; 
	for (j=0;j<0x0080;j++)
    ec7c:	687b      	ldr	r3, [r7, #4]
    ec7e:	3301      	adds	r3, #1
    ec80:	607b      	str	r3, [r7, #4]
    ec82:	687b      	ldr	r3, [r7, #4]
    ec84:	2b7f      	cmp	r3, #127	; 0x7f
    ec86:	d9f3      	bls.n	ec70 <HardDelay+0xc>
	{
		testI2C++;
	}
	
}
    ec88:	46bd      	mov	sp, r7
    ec8a:	b002      	add	sp, #8
    ec8c:	bd80      	pop	{r7, pc}
    ec8e:	46c0      	nop			; (mov r8, r8)
    ec90:	200036c9 	.word	0x200036c9

0000ec94 <main>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
int main(void)
{
    ec94:	b590      	push	{r4, r7, lr}
    ec96:	b085      	sub	sp, #20
    ec98:	af00      	add	r7, sp, #0
	uint8_t button,i; 
	struct nvm_config config;
	enum status_code error_code; 		
	struct port_config pin_conf;
	
	system_interrupt_disable_global();
    ec9a:	4be3      	ldr	r3, [pc, #908]	; (f028 <main+0x394>)
    ec9c:	4798      	blx	r3
 
	port_get_config_defaults(&pin_conf);
    ec9e:	1d3b      	adds	r3, r7, #4
    eca0:	1c18      	adds	r0, r3, #0
    eca2:	4be2      	ldr	r3, [pc, #904]	; (f02c <main+0x398>)
    eca4:	4798      	blx	r3
	//-------------------------------
	// Initialize the SAM system 
    //-------------------------------
#if BRAKEBOARD //CLK_FIX
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    eca6:	1d3b      	adds	r3, r7, #4
    eca8:	2200      	movs	r2, #0
    ecaa:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    ecac:	1d3b      	adds	r3, r7, #4
    ecae:	2201      	movs	r2, #1
    ecb0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_SETUP, &pin_conf);
    ecb2:	1d3b      	adds	r3, r7, #4
    ecb4:	200f      	movs	r0, #15
    ecb6:	1c19      	adds	r1, r3, #0
    ecb8:	4bdd      	ldr	r3, [pc, #884]	; (f030 <main+0x39c>)
    ecba:	4798      	blx	r3
	port_pin_set_config(BUTTON_POWER, &pin_conf);
    ecbc:	1d3b      	adds	r3, r7, #4
    ecbe:	200e      	movs	r0, #14
    ecc0:	1c19      	adds	r1, r3, #0
    ecc2:	4bdb      	ldr	r3, [pc, #876]	; (f030 <main+0x39c>)
    ecc4:	4798      	blx	r3
#endif	

    system_init();	
    ecc6:	4bdb      	ldr	r3, [pc, #876]	; (f034 <main+0x3a0>)
    ecc8:	4798      	blx	r3

	configure_bod33();	
    ecca:	4bdb      	ldr	r3, [pc, #876]	; (f038 <main+0x3a4>)
    eccc:	4798      	blx	r3
	//-------------------------------
	// initialize the status data before 
	// initializing any of the interfaces. 
	//------------------------------
	AppStatusInitialization(); 
    ecce:	4bdb      	ldr	r3, [pc, #876]	; (f03c <main+0x3a8>)
    ecd0:	4798      	blx	r3
#if BRAKEBOARD
//	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;  //CLK_FIX
//	port_pin_set_config(PIN_PB22, &pin_conf);   //CLK_FIX
//	port_pin_set_output_level(PIN_PB22, FALSE); //CLK_FIX
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ecd2:	1d3b      	adds	r3, r7, #4
    ecd4:	2201      	movs	r2, #1
    ecd6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    ecd8:	1d3b      	adds	r3, r7, #4
    ecda:	200c      	movs	r0, #12
    ecdc:	1c19      	adds	r1, r3, #0
    ecde:	4bd4      	ldr	r3, [pc, #848]	; (f030 <main+0x39c>)
    ece0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, FALSE);
    ece2:	200c      	movs	r0, #12
    ece4:	2100      	movs	r1, #0
    ece6:	4bd6      	ldr	r3, [pc, #856]	; (f040 <main+0x3ac>)
    ece8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ecea:	1d3b      	adds	r3, r7, #4
    ecec:	2201      	movs	r2, #1
    ecee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    ecf0:	1d3b      	adds	r3, r7, #4
    ecf2:	200d      	movs	r0, #13
    ecf4:	1c19      	adds	r1, r3, #0
    ecf6:	4bce      	ldr	r3, [pc, #824]	; (f030 <main+0x39c>)
    ecf8:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, FALSE);
    ecfa:	200d      	movs	r0, #13
    ecfc:	2100      	movs	r1, #0
    ecfe:	4bd0      	ldr	r3, [pc, #832]	; (f040 <main+0x3ac>)
    ed00:	4798      	blx	r3
		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed02:	1d3b      	adds	r3, r7, #4
    ed04:	2201      	movs	r2, #1
    ed06:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA13, &pin_conf);
    ed08:	1d3b      	adds	r3, r7, #4
    ed0a:	200d      	movs	r0, #13
    ed0c:	1c19      	adds	r1, r3, #0
    ed0e:	4bc8      	ldr	r3, [pc, #800]	; (f030 <main+0x39c>)
    ed10:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
    ed12:	200d      	movs	r0, #13
    ed14:	2101      	movs	r1, #1
    ed16:	4bca      	ldr	r3, [pc, #808]	; (f040 <main+0x3ac>)
    ed18:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed1a:	1d3b      	adds	r3, r7, #4
    ed1c:	2201      	movs	r2, #1
    ed1e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA12, &pin_conf);
    ed20:	1d3b      	adds	r3, r7, #4
    ed22:	200c      	movs	r0, #12
    ed24:	1c19      	adds	r1, r3, #0
    ed26:	4bc2      	ldr	r3, [pc, #776]	; (f030 <main+0x39c>)
    ed28:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA12, TRUE);		
    ed2a:	200c      	movs	r0, #12
    ed2c:	2101      	movs	r1, #1
    ed2e:	4bc4      	ldr	r3, [pc, #784]	; (f040 <main+0x3ac>)
    ed30:	4798      	blx	r3
	
	for (i=0;i<16;i++)
    ed32:	1c3b      	adds	r3, r7, #0
    ed34:	330f      	adds	r3, #15
    ed36:	2200      	movs	r2, #0
    ed38:	701a      	strb	r2, [r3, #0]
    ed3a:	e022      	b.n	ed82 <main+0xee>
	{
		HardDelay();
    ed3c:	4bc1      	ldr	r3, [pc, #772]	; (f044 <main+0x3b0>)
    ed3e:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed40:	1d3b      	adds	r3, r7, #4
    ed42:	2201      	movs	r2, #1
    ed44:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    ed46:	1d3b      	adds	r3, r7, #4
    ed48:	200d      	movs	r0, #13
    ed4a:	1c19      	adds	r1, r3, #0
    ed4c:	4bb8      	ldr	r3, [pc, #736]	; (f030 <main+0x39c>)
    ed4e:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, FALSE);		
    ed50:	200d      	movs	r0, #13
    ed52:	2100      	movs	r1, #0
    ed54:	4bba      	ldr	r3, [pc, #744]	; (f040 <main+0x3ac>)
    ed56:	4798      	blx	r3
		HardDelay();
    ed58:	4bba      	ldr	r3, [pc, #744]	; (f044 <main+0x3b0>)
    ed5a:	4798      	blx	r3
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed5c:	1d3b      	adds	r3, r7, #4
    ed5e:	2201      	movs	r2, #1
    ed60:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA13, &pin_conf);
    ed62:	1d3b      	adds	r3, r7, #4
    ed64:	200d      	movs	r0, #13
    ed66:	1c19      	adds	r1, r3, #0
    ed68:	4bb1      	ldr	r3, [pc, #708]	; (f030 <main+0x39c>)
    ed6a:	4798      	blx	r3
		port_pin_set_output_level(PIN_PA13, TRUE);		
    ed6c:	200d      	movs	r0, #13
    ed6e:	2101      	movs	r1, #1
    ed70:	4bb3      	ldr	r3, [pc, #716]	; (f040 <main+0x3ac>)
    ed72:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA13, TRUE);		
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA12, &pin_conf);
	port_pin_set_output_level(PIN_PA12, TRUE);		
	
	for (i=0;i<16;i++)
    ed74:	1c3b      	adds	r3, r7, #0
    ed76:	330f      	adds	r3, #15
    ed78:	781a      	ldrb	r2, [r3, #0]
    ed7a:	1c3b      	adds	r3, r7, #0
    ed7c:	330f      	adds	r3, #15
    ed7e:	3201      	adds	r2, #1
    ed80:	701a      	strb	r2, [r3, #0]
    ed82:	1c3b      	adds	r3, r7, #0
    ed84:	330f      	adds	r3, #15
    ed86:	781b      	ldrb	r3, [r3, #0]
    ed88:	2b0f      	cmp	r3, #15
    ed8a:	d9d7      	bls.n	ed3c <main+0xa8>
	}


	//-------LEDS off
	//  
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ed8c:	1d3b      	adds	r3, r7, #4
    ed8e:	2201      	movs	r2, #1
    ed90:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BIGREEN_PIN, &pin_conf);
    ed92:	1d3b      	adds	r3, r7, #4
    ed94:	202e      	movs	r0, #46	; 0x2e
    ed96:	1c19      	adds	r1, r3, #0
    ed98:	4ba5      	ldr	r3, [pc, #660]	; (f030 <main+0x39c>)
    ed9a:	4798      	blx	r3
	port_pin_set_output_level(LED_BIGREEN_PIN, true);
    ed9c:	202e      	movs	r0, #46	; 0x2e
    ed9e:	2101      	movs	r1, #1
    eda0:	4ba7      	ldr	r3, [pc, #668]	; (f040 <main+0x3ac>)
    eda2:	4798      	blx	r3
	port_pin_set_config(LED_BIRED_PIN, &pin_conf);
    eda4:	1d3b      	adds	r3, r7, #4
    eda6:	202f      	movs	r0, #47	; 0x2f
    eda8:	1c19      	adds	r1, r3, #0
    edaa:	4ba1      	ldr	r3, [pc, #644]	; (f030 <main+0x39c>)
    edac:	4798      	blx	r3
	port_pin_set_output_level(LED_BIRED_PIN, true);	
    edae:	202f      	movs	r0, #47	; 0x2f
    edb0:	2101      	movs	r1, #1
    edb2:	4ba3      	ldr	r3, [pc, #652]	; (f040 <main+0x3ac>)
    edb4:	4798      	blx	r3
	ledBiGreen = 1;
    edb6:	4ba4      	ldr	r3, [pc, #656]	; (f048 <main+0x3b4>)
    edb8:	2201      	movs	r2, #1
    edba:	701a      	strb	r2, [r3, #0]
	ledBiRed = 1; 
    edbc:	4ba3      	ldr	r3, [pc, #652]	; (f04c <main+0x3b8>)
    edbe:	2201      	movs	r2, #1
    edc0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_BLUE_PIN, &pin_conf);
    edc2:	1d3b      	adds	r3, r7, #4
    edc4:	202c      	movs	r0, #44	; 0x2c
    edc6:	1c19      	adds	r1, r3, #0
    edc8:	4b99      	ldr	r3, [pc, #612]	; (f030 <main+0x39c>)
    edca:	4798      	blx	r3
	port_pin_set_output_level(LED_BLUE_PIN, true);
    edcc:	202c      	movs	r0, #44	; 0x2c
    edce:	2101      	movs	r1, #1
    edd0:	4b9b      	ldr	r3, [pc, #620]	; (f040 <main+0x3ac>)
    edd2:	4798      	blx	r3
	port_pin_set_config(LED_RED_PIN, &pin_conf);
    edd4:	1d3b      	adds	r3, r7, #4
    edd6:	202d      	movs	r0, #45	; 0x2d
    edd8:	1c19      	adds	r1, r3, #0
    edda:	4b95      	ldr	r3, [pc, #596]	; (f030 <main+0x39c>)
    eddc:	4798      	blx	r3
	port_pin_set_output_level(LED_RED_PIN, true);	
    edde:	202d      	movs	r0, #45	; 0x2d
    ede0:	2101      	movs	r1, #1
    ede2:	4b97      	ldr	r3, [pc, #604]	; (f040 <main+0x3ac>)
    ede4:	4798      	blx	r3
	 
	ledRed = 2; 
    ede6:	4b9a      	ldr	r3, [pc, #616]	; (f050 <main+0x3bc>)
    ede8:	2202      	movs	r2, #2
    edea:	701a      	strb	r2, [r3, #0]
	// PA16 PWMIN
	// PA18 EDa
	// PA19 INa
	// PB24 EDb
	// PB25 INb 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    edec:	1d3b      	adds	r3, r7, #4
    edee:	2201      	movs	r2, #1
    edf0:	701a      	strb	r2, [r3, #0]
	//---------- EDb
	port_pin_set_config(ENb, &pin_conf);
    edf2:	1d3b      	adds	r3, r7, #4
    edf4:	2018      	movs	r0, #24
    edf6:	1c19      	adds	r1, r3, #0
    edf8:	4b8d      	ldr	r3, [pc, #564]	; (f030 <main+0x39c>)
    edfa:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    edfc:	2018      	movs	r0, #24
    edfe:	2100      	movs	r1, #0
    ee00:	4b8f      	ldr	r3, [pc, #572]	; (f040 <main+0x3ac>)
    ee02:	4798      	blx	r3
	//--------- INb
	port_pin_set_config(INb, &pin_conf);
    ee04:	1d3b      	adds	r3, r7, #4
    ee06:	2019      	movs	r0, #25
    ee08:	1c19      	adds	r1, r3, #0
    ee0a:	4b89      	ldr	r3, [pc, #548]	; (f030 <main+0x39c>)
    ee0c:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    ee0e:	2019      	movs	r0, #25
    ee10:	2100      	movs	r1, #0
    ee12:	4b8b      	ldr	r3, [pc, #556]	; (f040 <main+0x3ac>)
    ee14:	4798      	blx	r3
	//----------EDa
	port_pin_set_config(ENa, &pin_conf);
    ee16:	1d3b      	adds	r3, r7, #4
    ee18:	2012      	movs	r0, #18
    ee1a:	1c19      	adds	r1, r3, #0
    ee1c:	4b84      	ldr	r3, [pc, #528]	; (f030 <main+0x39c>)
    ee1e:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    ee20:	2012      	movs	r0, #18
    ee22:	2100      	movs	r1, #0
    ee24:	4b86      	ldr	r3, [pc, #536]	; (f040 <main+0x3ac>)
    ee26:	4798      	blx	r3
	//---------INa
	port_pin_set_config(INa, &pin_conf);
    ee28:	1d3b      	adds	r3, r7, #4
    ee2a:	2013      	movs	r0, #19
    ee2c:	1c19      	adds	r1, r3, #0
    ee2e:	4b80      	ldr	r3, [pc, #512]	; (f030 <main+0x39c>)
    ee30:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    ee32:	2013      	movs	r0, #19
    ee34:	2100      	movs	r1, #0
    ee36:	4b82      	ldr	r3, [pc, #520]	; (f040 <main+0x3ac>)
    ee38:	4798      	blx	r3
	//-------- PWmin
	port_pin_set_config(PIN_PA16, &pin_conf);
    ee3a:	1d3b      	adds	r3, r7, #4
    ee3c:	2010      	movs	r0, #16
    ee3e:	1c19      	adds	r1, r3, #0
    ee40:	4b7b      	ldr	r3, [pc, #492]	; (f030 <main+0x39c>)
    ee42:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA16, true); //false);	
    ee44:	2010      	movs	r0, #16
    ee46:	2101      	movs	r1, #1
    ee48:	4b7d      	ldr	r3, [pc, #500]	; (f040 <main+0x3ac>)
    ee4a:	4798      	blx	r3
	//-----------------------------
	// MOTOR PIN INITIALIZATION - INPUTS
	// PA3 CS - CURRENT SENSE
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ee4c:	1d3b      	adds	r3, r7, #4
    ee4e:	2200      	movs	r2, #0
    ee50:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    ee52:	1d3b      	adds	r3, r7, #4
    ee54:	2200      	movs	r2, #0
    ee56:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA03, &pin_conf);
    ee58:	1d3b      	adds	r3, r7, #4
    ee5a:	2003      	movs	r0, #3
    ee5c:	1c19      	adds	r1, r3, #0
    ee5e:	4b74      	ldr	r3, [pc, #464]	; (f030 <main+0x39c>)
    ee60:	4798      	blx	r3
 
	
	//-------MOTOR OFF 
	// ENa,ENb, INa, INb all 0 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ee62:	1d3b      	adds	r3, r7, #4
    ee64:	2201      	movs	r2, #1
    ee66:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(ENa, &pin_conf);	
    ee68:	1d3b      	adds	r3, r7, #4
    ee6a:	2012      	movs	r0, #18
    ee6c:	1c19      	adds	r1, r3, #0
    ee6e:	4b70      	ldr	r3, [pc, #448]	; (f030 <main+0x39c>)
    ee70:	4798      	blx	r3
	port_pin_set_output_level(ENa, false);
    ee72:	2012      	movs	r0, #18
    ee74:	2100      	movs	r1, #0
    ee76:	4b72      	ldr	r3, [pc, #456]	; (f040 <main+0x3ac>)
    ee78:	4798      	blx	r3
	port_pin_set_config(ENb, &pin_conf);	
    ee7a:	1d3b      	adds	r3, r7, #4
    ee7c:	2018      	movs	r0, #24
    ee7e:	1c19      	adds	r1, r3, #0
    ee80:	4b6b      	ldr	r3, [pc, #428]	; (f030 <main+0x39c>)
    ee82:	4798      	blx	r3
	port_pin_set_output_level(ENb, false);
    ee84:	2018      	movs	r0, #24
    ee86:	2100      	movs	r1, #0
    ee88:	4b6d      	ldr	r3, [pc, #436]	; (f040 <main+0x3ac>)
    ee8a:	4798      	blx	r3
	port_pin_set_config(INa, &pin_conf);		
    ee8c:	1d3b      	adds	r3, r7, #4
    ee8e:	2013      	movs	r0, #19
    ee90:	1c19      	adds	r1, r3, #0
    ee92:	4b67      	ldr	r3, [pc, #412]	; (f030 <main+0x39c>)
    ee94:	4798      	blx	r3
	port_pin_set_output_level(INa, false);
    ee96:	2013      	movs	r0, #19
    ee98:	2100      	movs	r1, #0
    ee9a:	4b69      	ldr	r3, [pc, #420]	; (f040 <main+0x3ac>)
    ee9c:	4798      	blx	r3
	port_pin_set_config(INb, &pin_conf);		
    ee9e:	1d3b      	adds	r3, r7, #4
    eea0:	2019      	movs	r0, #25
    eea2:	1c19      	adds	r1, r3, #0
    eea4:	4b62      	ldr	r3, [pc, #392]	; (f030 <main+0x39c>)
    eea6:	4798      	blx	r3
	port_pin_set_output_level(INb, false);	
    eea8:	2019      	movs	r0, #25
    eeaa:	2100      	movs	r1, #0
    eeac:	4b64      	ldr	r3, [pc, #400]	; (f040 <main+0x3ac>)
    eeae:	4798      	blx	r3
 
	//-----------motor inputs
	// FLIMIT - 
	// HLIMIT
	// ENCODER 
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    eeb0:	1d3b      	adds	r3, r7, #4
    eeb2:	2201      	movs	r2, #1
    eeb4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(IRLEDEN, &pin_conf);	
    eeb6:	1d3b      	adds	r3, r7, #4
    eeb8:	201b      	movs	r0, #27
    eeba:	1c19      	adds	r1, r3, #0
    eebc:	4b5c      	ldr	r3, [pc, #368]	; (f030 <main+0x39c>)
    eebe:	4798      	blx	r3
	port_pin_set_output_level(IRLEDEN, true);	
    eec0:	201b      	movs	r0, #27
    eec2:	2101      	movs	r1, #1
    eec4:	4b5e      	ldr	r3, [pc, #376]	; (f040 <main+0x3ac>)
    eec6:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    eec8:	1d3b      	adds	r3, r7, #4
    eeca:	2200      	movs	r2, #0
    eecc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    eece:	1d3b      	adds	r3, r7, #4
    eed0:	2200      	movs	r2, #0
    eed2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(FLIMIT, &pin_conf);
    eed4:	1d3b      	adds	r3, r7, #4
    eed6:	2015      	movs	r0, #21
    eed8:	1c19      	adds	r1, r3, #0
    eeda:	4b55      	ldr	r3, [pc, #340]	; (f030 <main+0x39c>)
    eedc:	4798      	blx	r3
	port_pin_set_config(HLIMIT, &pin_conf);
    eede:	1d3b      	adds	r3, r7, #4
    eee0:	2014      	movs	r0, #20
    eee2:	1c19      	adds	r1, r3, #0
    eee4:	4b52      	ldr	r3, [pc, #328]	; (f030 <main+0x39c>)
    eee6:	4798      	blx	r3
	port_pin_set_config(ENCODER, &pin_conf);		 
    eee8:	1d3b      	adds	r3, r7, #4
    eeea:	202b      	movs	r0, #43	; 0x2b
    eeec:	1c19      	adds	r1, r3, #0
    eeee:	4b50      	ldr	r3, [pc, #320]	; (f030 <main+0x39c>)
    eef0:	4798      	blx	r3
 

 
	MotorInit(); 
    eef2:	4b58      	ldr	r3, [pc, #352]	; (f054 <main+0x3c0>)
    eef4:	4798      	blx	r3
 
	//-------SUPER CAP enable
	// 1 is on
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    eef6:	1d3b      	adds	r3, r7, #4
    eef8:	2201      	movs	r2, #1
    eefa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SUPERCAPEN, &pin_conf);	
    eefc:	1d3b      	adds	r3, r7, #4
    eefe:	2025      	movs	r0, #37	; 0x25
    ef00:	1c19      	adds	r1, r3, #0
    ef02:	4b4b      	ldr	r3, [pc, #300]	; (f030 <main+0x39c>)
    ef04:	4798      	blx	r3
	port_pin_set_output_level(SUPERCAPEN, false);  
    ef06:	2025      	movs	r0, #37	; 0x25
    ef08:	2100      	movs	r1, #0
    ef0a:	4b4d      	ldr	r3, [pc, #308]	; (f040 <main+0x3ac>)
    ef0c:	4798      	blx	r3
	chargingSupercap  = 0; 
    ef0e:	4b52      	ldr	r3, [pc, #328]	; (f058 <main+0x3c4>)
    ef10:	2200      	movs	r2, #0
    ef12:	701a      	strb	r2, [r3, #0]
	supercapState = true; 
    ef14:	4b51      	ldr	r3, [pc, #324]	; (f05c <main+0x3c8>)
    ef16:	2201      	movs	r2, #1
    ef18:	701a      	strb	r2, [r3, #0]
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ef1a:	1d3b      	adds	r3, r7, #4
    ef1c:	2200      	movs	r2, #0
    ef1e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    ef20:	1d3b      	adds	r3, r7, #4
    ef22:	2200      	movs	r2, #0
    ef24:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    ef26:	1d3b      	adds	r3, r7, #4
    ef28:	2002      	movs	r0, #2
    ef2a:	1c19      	adds	r1, r3, #0
    ef2c:	4b40      	ldr	r3, [pc, #256]	; (f030 <main+0x39c>)
    ef2e:	4798      	blx	r3
	port_pin_set_config(PIN_PA28, &pin_conf);
    ef30:	1d3b      	adds	r3, r7, #4
    ef32:	201c      	movs	r0, #28
    ef34:	1c19      	adds	r1, r3, #0
    ef36:	4b3e      	ldr	r3, [pc, #248]	; (f030 <main+0x39c>)
    ef38:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_TIP, &pin_conf);
    ef3a:	1d3b      	adds	r3, r7, #4
    ef3c:	2017      	movs	r0, #23
    ef3e:	1c19      	adds	r1, r3, #0
    ef40:	4b3b      	ldr	r3, [pc, #236]	; (f030 <main+0x39c>)
    ef42:	4798      	blx	r3
	port_pin_set_config(INPUT_BREAKAWAY_RING, &pin_conf);	
    ef44:	1d3b      	adds	r3, r7, #4
    ef46:	2016      	movs	r0, #22
    ef48:	1c19      	adds	r1, r3, #0
    ef4a:	4b39      	ldr	r3, [pc, #228]	; (f030 <main+0x39c>)
    ef4c:	4798      	blx	r3
	
	//--------------------------
	// BUTTON INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ef4e:	1d3b      	adds	r3, r7, #4
    ef50:	2200      	movs	r2, #0
    ef52:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    ef54:	1d3b      	adds	r3, r7, #4
    ef56:	2201      	movs	r2, #1
    ef58:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_SETUP, &pin_conf);
    ef5a:	1d3b      	adds	r3, r7, #4
    ef5c:	200f      	movs	r0, #15
    ef5e:	1c19      	adds	r1, r3, #0
    ef60:	4b33      	ldr	r3, [pc, #204]	; (f030 <main+0x39c>)
    ef62:	4798      	blx	r3
	port_pin_set_config(BUTTON_POWER, &pin_conf);
    ef64:	1d3b      	adds	r3, r7, #4
    ef66:	200e      	movs	r0, #14
    ef68:	1c19      	adds	r1, r3, #0
    ef6a:	4b31      	ldr	r3, [pc, #196]	; (f030 <main+0x39c>)
    ef6c:	4798      	blx	r3
	//-------------------------
	// ADC
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ef6e:	1d3b      	adds	r3, r7, #4
    ef70:	2200      	movs	r2, #0
    ef72:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    ef74:	1d3b      	adds	r3, r7, #4
    ef76:	2200      	movs	r2, #0
    ef78:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA02, &pin_conf);
    ef7a:	1d3b      	adds	r3, r7, #4
    ef7c:	2002      	movs	r0, #2
    ef7e:	1c19      	adds	r1, r3, #0
    ef80:	4b2b      	ldr	r3, [pc, #172]	; (f030 <main+0x39c>)
    ef82:	4798      	blx	r3
	port_pin_set_config(PIN_PA03, &pin_conf);
    ef84:	1d3b      	adds	r3, r7, #4
    ef86:	2003      	movs	r0, #3
    ef88:	1c19      	adds	r1, r3, #0
    ef8a:	4b29      	ldr	r3, [pc, #164]	; (f030 <main+0x39c>)
    ef8c:	4798      	blx	r3
	port_pin_set_config(PIN_PB04, &pin_conf);
    ef8e:	1d3b      	adds	r3, r7, #4
    ef90:	2024      	movs	r0, #36	; 0x24
    ef92:	1c19      	adds	r1, r3, #0
    ef94:	4b26      	ldr	r3, [pc, #152]	; (f030 <main+0x39c>)
    ef96:	4798      	blx	r3
	port_pin_set_config(PIN_PB06, &pin_conf); 
    ef98:	1d3b      	adds	r3, r7, #4
    ef9a:	2026      	movs	r0, #38	; 0x26
    ef9c:	1c19      	adds	r1, r3, #0
    ef9e:	4b24      	ldr	r3, [pc, #144]	; (f030 <main+0x39c>)
    efa0:	4798      	blx	r3
	port_pin_set_config(PIN_PB07, &pin_conf); 	
    efa2:	1d3b      	adds	r3, r7, #4
    efa4:	2027      	movs	r0, #39	; 0x27
    efa6:	1c19      	adds	r1, r3, #0
    efa8:	4b21      	ldr	r3, [pc, #132]	; (f030 <main+0x39c>)
    efaa:	4798      	blx	r3
	
	//--------------------------
	// BLUETOOTH INPUTS
	//--------------------------
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    efac:	1d3b      	adds	r3, r7, #4
    efae:	2200      	movs	r2, #0
    efb0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    efb2:	1d3b      	adds	r3, r7, #4
    efb4:	2201      	movs	r2, #1
    efb6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BLUETOOTH_PROG, &pin_conf);
    efb8:	1d3b      	adds	r3, r7, #4
    efba:	2008      	movs	r0, #8
    efbc:	1c19      	adds	r1, r3, #0
    efbe:	4b1c      	ldr	r3, [pc, #112]	; (f030 <main+0x39c>)
    efc0:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    efc2:	1d3b      	adds	r3, r7, #4
    efc4:	2200      	movs	r2, #0
    efc6:	705a      	strb	r2, [r3, #1]
//	port_pin_set_config(BLUETOOTH_RX, &pin_conf);	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    efc8:	1d3b      	adds	r3, r7, #4
    efca:	2201      	movs	r2, #1
    efcc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BLUETOOTH_RESET, &pin_conf);
    efce:	1d3b      	adds	r3, r7, #4
    efd0:	2009      	movs	r0, #9
    efd2:	1c19      	adds	r1, r3, #0
    efd4:	4b16      	ldr	r3, [pc, #88]	; (f030 <main+0x39c>)
    efd6:	4798      	blx	r3
	port_pin_set_output_level(BLUETOOTH_RESET, true);
    efd8:	2009      	movs	r0, #9
    efda:	2101      	movs	r1, #1
    efdc:	4b18      	ldr	r3, [pc, #96]	; (f040 <main+0x3ac>)
    efde:	4798      	blx	r3
	port_pin_set_config(PIN_PB23, &pin_conf); 	
#endif	

	//----------------------------
	// FCC PINS 
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    efe0:	1d3b      	adds	r3, r7, #4
    efe2:	2200      	movs	r2, #0
    efe4:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    efe6:	1d3b      	adds	r3, r7, #4
    efe8:	2201      	movs	r2, #1
    efea:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CONSTANTTX, &pin_conf);
    efec:	1d3b      	adds	r3, r7, #4
    efee:	2000      	movs	r0, #0
    eff0:	1c19      	adds	r1, r3, #0
    eff2:	4b0f      	ldr	r3, [pc, #60]	; (f030 <main+0x39c>)
    eff4:	4798      	blx	r3
	port_pin_set_config(CONSTANTRX, &pin_conf);	 
    eff6:	1d3b      	adds	r3, r7, #4
    eff8:	2001      	movs	r0, #1
    effa:	1c19      	adds	r1, r3, #0
    effc:	4b0c      	ldr	r3, [pc, #48]	; (f030 <main+0x39c>)
    effe:	4798      	blx	r3
	port_pin_set_config(CONSTANTCW, &pin_conf);
    f000:	1d3b      	adds	r3, r7, #4
    f002:	2036      	movs	r0, #54	; 0x36
    f004:	1c19      	adds	r1, r3, #0
    f006:	4b0a      	ldr	r3, [pc, #40]	; (f030 <main+0x39c>)
    f008:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
    f00a:	4b15      	ldr	r3, [pc, #84]	; (f060 <main+0x3cc>)
    f00c:	2200      	movs	r2, #0
    f00e:	701a      	strb	r2, [r3, #0]
	setCW = 0;
    f010:	4b14      	ldr	r3, [pc, #80]	; (f064 <main+0x3d0>)
    f012:	2200      	movs	r2, #0
    f014:	701a      	strb	r2, [r3, #0]
	setRXContinuous = 0;	
    f016:	4b14      	ldr	r3, [pc, #80]	; (f068 <main+0x3d4>)
    f018:	2200      	movs	r2, #0
    f01a:	701a      	strb	r2, [r3, #0]
	for (i=0;i<10;i++)
    f01c:	1c3b      	adds	r3, r7, #0
    f01e:	330f      	adds	r3, #15
    f020:	2200      	movs	r2, #0
    f022:	701a      	strb	r2, [r3, #0]
    f024:	e02b      	b.n	f07e <main+0x3ea>
    f026:	46c0      	nop			; (mov r8, r8)
    f028:	0000e84d 	.word	0x0000e84d
    f02c:	0000e8b5 	.word	0x0000e8b5
    f030:	00011cfd 	.word	0x00011cfd
    f034:	00014301 	.word	0x00014301
    f038:	0000ebc1 	.word	0x0000ebc1
    f03c:	0000f515 	.word	0x0000f515
    f040:	0000e8d5 	.word	0x0000e8d5
    f044:	0000ec65 	.word	0x0000ec65
    f048:	200036a0 	.word	0x200036a0
    f04c:	200036fe 	.word	0x200036fe
    f050:	200036c8 	.word	0x200036c8
    f054:	00009a41 	.word	0x00009a41
    f058:	200004ab 	.word	0x200004ab
    f05c:	200036f4 	.word	0x200036f4
    f060:	20003693 	.word	0x20003693
    f064:	20003690 	.word	0x20003690
    f068:	20003691 	.word	0x20003691
	{
		FCCSample();
    f06c:	4b97      	ldr	r3, [pc, #604]	; (f2cc <main+0x638>)
    f06e:	4798      	blx	r3
	//---------------------
	// SET FCC stuff up
	setTXContinuous = 0;
	setCW = 0;
	setRXContinuous = 0;	
	for (i=0;i<10;i++)
    f070:	1c3b      	adds	r3, r7, #0
    f072:	330f      	adds	r3, #15
    f074:	781a      	ldrb	r2, [r3, #0]
    f076:	1c3b      	adds	r3, r7, #0
    f078:	330f      	adds	r3, #15
    f07a:	3201      	adds	r2, #1
    f07c:	701a      	strb	r2, [r3, #0]
    f07e:	1c3b      	adds	r3, r7, #0
    f080:	330f      	adds	r3, #15
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	2b09      	cmp	r3, #9
    f086:	d9f1      	bls.n	f06c <main+0x3d8>
	{
		FCCSample();
	}
	if ((constantTX_pressed!=0)&&(constantRX_pressed==0)&&(constantCW_pressed==0))
    f088:	4b91      	ldr	r3, [pc, #580]	; (f2d0 <main+0x63c>)
    f08a:	881b      	ldrh	r3, [r3, #0]
    f08c:	2b00      	cmp	r3, #0
    f08e:	d00a      	beq.n	f0a6 <main+0x412>
    f090:	4b90      	ldr	r3, [pc, #576]	; (f2d4 <main+0x640>)
    f092:	881b      	ldrh	r3, [r3, #0]
    f094:	2b00      	cmp	r3, #0
    f096:	d106      	bne.n	f0a6 <main+0x412>
    f098:	4b8f      	ldr	r3, [pc, #572]	; (f2d8 <main+0x644>)
    f09a:	881b      	ldrh	r3, [r3, #0]
    f09c:	2b00      	cmp	r3, #0
    f09e:	d102      	bne.n	f0a6 <main+0x412>
	{
		setTXContinuous = 1; 
    f0a0:	4b8e      	ldr	r3, [pc, #568]	; (f2dc <main+0x648>)
    f0a2:	2201      	movs	r2, #1
    f0a4:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed!=0)&&(constantCW_pressed==0))
    f0a6:	4b8a      	ldr	r3, [pc, #552]	; (f2d0 <main+0x63c>)
    f0a8:	881b      	ldrh	r3, [r3, #0]
    f0aa:	2b00      	cmp	r3, #0
    f0ac:	d10a      	bne.n	f0c4 <main+0x430>
    f0ae:	4b89      	ldr	r3, [pc, #548]	; (f2d4 <main+0x640>)
    f0b0:	881b      	ldrh	r3, [r3, #0]
    f0b2:	2b00      	cmp	r3, #0
    f0b4:	d006      	beq.n	f0c4 <main+0x430>
    f0b6:	4b88      	ldr	r3, [pc, #544]	; (f2d8 <main+0x644>)
    f0b8:	881b      	ldrh	r3, [r3, #0]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d102      	bne.n	f0c4 <main+0x430>
	{
		setRXContinuous = 1; 
    f0be:	4b88      	ldr	r3, [pc, #544]	; (f2e0 <main+0x64c>)
    f0c0:	2201      	movs	r2, #1
    f0c2:	701a      	strb	r2, [r3, #0]
	}
	if ((constantTX_pressed==0)&&(constantRX_pressed==0)&&(constantCW_pressed!=0))
    f0c4:	4b82      	ldr	r3, [pc, #520]	; (f2d0 <main+0x63c>)
    f0c6:	881b      	ldrh	r3, [r3, #0]
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	d10a      	bne.n	f0e2 <main+0x44e>
    f0cc:	4b81      	ldr	r3, [pc, #516]	; (f2d4 <main+0x640>)
    f0ce:	881b      	ldrh	r3, [r3, #0]
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d106      	bne.n	f0e2 <main+0x44e>
    f0d4:	4b80      	ldr	r3, [pc, #512]	; (f2d8 <main+0x644>)
    f0d6:	881b      	ldrh	r3, [r3, #0]
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d002      	beq.n	f0e2 <main+0x44e>
	{
		setCW = 1; 
    f0dc:	4b81      	ldr	r3, [pc, #516]	; (f2e4 <main+0x650>)
    f0de:	2201      	movs	r2, #1
    f0e0:	701a      	strb	r2, [r3, #0]
	}		
	//--------------------------------
	// speaker PB16 and PB17
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f0e2:	1d3b      	adds	r3, r7, #4
    f0e4:	2201      	movs	r2, #1
    f0e6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB16, &pin_conf);
    f0e8:	1d3b      	adds	r3, r7, #4
    f0ea:	2030      	movs	r0, #48	; 0x30
    f0ec:	1c19      	adds	r1, r3, #0
    f0ee:	4b7e      	ldr	r3, [pc, #504]	; (f2e8 <main+0x654>)
    f0f0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB16, false);
    f0f2:	2030      	movs	r0, #48	; 0x30
    f0f4:	2100      	movs	r1, #0
    f0f6:	4b7d      	ldr	r3, [pc, #500]	; (f2ec <main+0x658>)
    f0f8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f0fa:	1d3b      	adds	r3, r7, #4
    f0fc:	2201      	movs	r2, #1
    f0fe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB17, &pin_conf);
    f100:	1d3b      	adds	r3, r7, #4
    f102:	2031      	movs	r0, #49	; 0x31
    f104:	1c19      	adds	r1, r3, #0
    f106:	4b78      	ldr	r3, [pc, #480]	; (f2e8 <main+0x654>)
    f108:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB17, false);
    f10a:	2031      	movs	r0, #49	; 0x31
    f10c:	2100      	movs	r1, #0
    f10e:	4b77      	ldr	r3, [pc, #476]	; (f2ec <main+0x658>)
    f110:	4798      	blx	r3
				
	//---------------------
	// i2c setup for EEPROM - COMMON
	//---------------------
	I2Cmain();
    f112:	4b77      	ldr	r3, [pc, #476]	; (f2f0 <main+0x65c>)
    f114:	4798      	blx	r3
	ConfigInit(); 
    f116:	4b77      	ldr	r3, [pc, #476]	; (f2f4 <main+0x660>)
    f118:	4798      	blx	r3
//ConfigSensorTableClear();	
	//-----------Accelerometer 
	// Brakeboard - is i2c
	// remoteboard is spi
#if BRAKEBOARD	
	AccelInit(); 
    f11a:	4b77      	ldr	r3, [pc, #476]	; (f2f8 <main+0x664>)
    f11c:	4798      	blx	r3
#if BRAKEBOARD
 
#endif
	//----------Timer Initialization
	//		
	configure_tc();
    f11e:	4b77      	ldr	r3, [pc, #476]	; (f2fc <main+0x668>)
    f120:	4798      	blx	r3
	configure_tc_callbacks();
    f122:	4b77      	ldr	r3, [pc, #476]	; (f300 <main+0x66c>)
    f124:	4798      	blx	r3

	//-----ADC--------------
	ADCInit();
    f126:	4b77      	ldr	r3, [pc, #476]	; (f304 <main+0x670>)
    f128:	4798      	blx	r3
	
	//---------------LORA/FSK radio 
	whichRadio = WHICHRADIO_LORA; 
    f12a:	4b77      	ldr	r3, [pc, #476]	; (f308 <main+0x674>)
    f12c:	2299      	movs	r2, #153	; 0x99
    f12e:	701a      	strb	r2, [r3, #0]
	CommInit();
    f130:	4b76      	ldr	r3, [pc, #472]	; (f30c <main+0x678>)
    f132:	4798      	blx	r3
#if REMOTEBOARD
	BacklightSet(table0.Item.BackLightOn);	
	BacklightSetHomeColor(table0.Item.ScreenColor);
#endif

	system_interrupt_enable_global();
    f134:	4b76      	ldr	r3, [pc, #472]	; (f310 <main+0x67c>)
    f136:	4798      	blx	r3
	Enable_global_interrupt();
    f138:	4b76      	ldr	r3, [pc, #472]	; (f314 <main+0x680>)
    f13a:	2201      	movs	r2, #1
    f13c:	701a      	strb	r2, [r3, #0]
    f13e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    f142:	b662      	cpsie	i
	
	ADCStart(); 
    f144:	4b74      	ldr	r3, [pc, #464]	; (f318 <main+0x684>)
    f146:	4798      	blx	r3

#if BRAKEBOARD
	BrakeInit();
    f148:	4b74      	ldr	r3, [pc, #464]	; (f31c <main+0x688>)
    f14a:	4798      	blx	r3
	UsartMain();
    f14c:	4b74      	ldr	r3, [pc, #464]	; (f320 <main+0x68c>)
    f14e:	4798      	blx	r3
	USARTDisable();
    f150:	4b74      	ldr	r3, [pc, #464]	; (f324 <main+0x690>)
    f152:	4798      	blx	r3
	BluetoothSleep();
    f154:	4b74      	ldr	r3, [pc, #464]	; (f328 <main+0x694>)
    f156:	4798      	blx	r3
//	BluetoothMicrochipConfig();
//	BluetoothWakeUp();	
	 
	nvm_get_config_defaults(&config);
    f158:	1c3b      	adds	r3, r7, #0
    f15a:	3308      	adds	r3, #8
    f15c:	1c18      	adds	r0, r3, #0
    f15e:	4b73      	ldr	r3, [pc, #460]	; (f32c <main+0x698>)
    f160:	4798      	blx	r3
	nvm_set_config(&config);
    f162:	1c3b      	adds	r3, r7, #0
    f164:	3308      	adds	r3, #8
    f166:	1c18      	adds	r0, r3, #0
    f168:	4b71      	ldr	r3, [pc, #452]	; (f330 <main+0x69c>)
    f16a:	4798      	blx	r3
		 general_buffer, NVMCTRL_PAGE_SIZE);
	 } while (error_code == STATUS_BUSY);
#endif	
#endif		

	button = ButtonChanged(); 
    f16c:	1c3c      	adds	r4, r7, #0
    f16e:	340e      	adds	r4, #14
    f170:	4b70      	ldr	r3, [pc, #448]	; (f334 <main+0x6a0>)
    f172:	4798      	blx	r3
    f174:	1c03      	adds	r3, r0, #0
    f176:	7023      	strb	r3, [r4, #0]
	configure_wdt();
    f178:	4b6f      	ldr	r3, [pc, #444]	; (f338 <main+0x6a4>)
    f17a:	4798      	blx	r3
    while (1) 
    {
//		wdt_reset_count();

		schedDone = 0;
    f17c:	4b6f      	ldr	r3, [pc, #444]	; (f33c <main+0x6a8>)
    f17e:	2200      	movs	r2, #0
    f180:	701a      	strb	r2, [r3, #0]
		schedCount = 0;
    f182:	4b6f      	ldr	r3, [pc, #444]	; (f340 <main+0x6ac>)
    f184:	2200      	movs	r2, #0
    f186:	701a      	strb	r2, [r3, #0]
		while ((schedCount <16) && (schedDone ==0))
    f188:	e096      	b.n	f2b8 <main+0x624>
		{
			mainLineTask = 0; 
    f18a:	4b6e      	ldr	r3, [pc, #440]	; (f344 <main+0x6b0>)
    f18c:	2200      	movs	r2, #0
    f18e:	701a      	strb	r2, [r3, #0]
			if ((schedByte & (1<<schedCount))!= 0)
    f190:	4b6b      	ldr	r3, [pc, #428]	; (f340 <main+0x6ac>)
    f192:	781b      	ldrb	r3, [r3, #0]
    f194:	2201      	movs	r2, #1
    f196:	1c11      	adds	r1, r2, #0
    f198:	4099      	lsls	r1, r3
    f19a:	1c0b      	adds	r3, r1, #0
    f19c:	1c1a      	adds	r2, r3, #0
    f19e:	4b6a      	ldr	r3, [pc, #424]	; (f348 <main+0x6b4>)
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	4013      	ands	r3, r2
    f1a4:	d100      	bne.n	f1a8 <main+0x514>
    f1a6:	e081      	b.n	f2ac <main+0x618>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    f1a8:	b672      	cpsid	i
    f1aa:	f3bf 8f5f 	dmb	sy
			{
				//-------------------
				// disable interrupt
				//-------------------
				Disable_global_interrupt();			
    f1ae:	4b59      	ldr	r3, [pc, #356]	; (f314 <main+0x680>)
    f1b0:	2200      	movs	r2, #0
    f1b2:	701a      	strb	r2, [r3, #0]
				schedByte &= (~(1<<schedCount));			
    f1b4:	4b62      	ldr	r3, [pc, #392]	; (f340 <main+0x6ac>)
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	2201      	movs	r2, #1
    f1ba:	1c11      	adds	r1, r2, #0
    f1bc:	4099      	lsls	r1, r3
    f1be:	1c0b      	adds	r3, r1, #0
    f1c0:	43db      	mvns	r3, r3
    f1c2:	1c1a      	adds	r2, r3, #0
    f1c4:	4b60      	ldr	r3, [pc, #384]	; (f348 <main+0x6b4>)
    f1c6:	681b      	ldr	r3, [r3, #0]
    f1c8:	401a      	ands	r2, r3
    f1ca:	4b5f      	ldr	r3, [pc, #380]	; (f348 <main+0x6b4>)
    f1cc:	601a      	str	r2, [r3, #0]
				Enable_global_interrupt();
    f1ce:	4b51      	ldr	r3, [pc, #324]	; (f314 <main+0x680>)
    f1d0:	2201      	movs	r2, #1
    f1d2:	701a      	strb	r2, [r3, #0]
    f1d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    f1d8:	b662      	cpsie	i
						 SpeakerOn();
					}				
*/				
#endif			
#if BRAKEBOARD				
				if (poweredUp != 0)
    f1da:	4b5c      	ldr	r3, [pc, #368]	; (f34c <main+0x6b8>)
    f1dc:	781b      	ldrb	r3, [r3, #0]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d007      	beq.n	f1f2 <main+0x55e>
				{
					SwTaskList[schedCount]();
    f1e2:	4b57      	ldr	r3, [pc, #348]	; (f340 <main+0x6ac>)
    f1e4:	781b      	ldrb	r3, [r3, #0]
    f1e6:	1c1a      	adds	r2, r3, #0
    f1e8:	4b59      	ldr	r3, [pc, #356]	; (f350 <main+0x6bc>)
    f1ea:	0092      	lsls	r2, r2, #2
    f1ec:	58d3      	ldr	r3, [r2, r3]
    f1ee:	4798      	blx	r3
    f1f0:	e05c      	b.n	f2ac <main+0x618>
				}
				else
				{
					if ((schedCount ==14))
    f1f2:	4b53      	ldr	r3, [pc, #332]	; (f340 <main+0x6ac>)
    f1f4:	781b      	ldrb	r3, [r3, #0]
    f1f6:	2b0e      	cmp	r3, #14
    f1f8:	d101      	bne.n	f1fe <main+0x56a>
					{
						DownloadDoneTask();
    f1fa:	4b56      	ldr	r3, [pc, #344]	; (f354 <main+0x6c0>)
    f1fc:	4798      	blx	r3
					}
					if ((schedCount == 13)||(schedCount==10))
    f1fe:	4b50      	ldr	r3, [pc, #320]	; (f340 <main+0x6ac>)
    f200:	781b      	ldrb	r3, [r3, #0]
    f202:	2b0d      	cmp	r3, #13
    f204:	d003      	beq.n	f20e <main+0x57a>
    f206:	4b4e      	ldr	r3, [pc, #312]	; (f340 <main+0x6ac>)
    f208:	781b      	ldrb	r3, [r3, #0]
    f20a:	2b0a      	cmp	r3, #10
    f20c:	d10a      	bne.n	f224 <main+0x590>
					{
					//v 01_10
						if (newRemoteDownloadNeeded == TRUE)
    f20e:	4b52      	ldr	r3, [pc, #328]	; (f358 <main+0x6c4>)
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	2b01      	cmp	r3, #1
    f214:	d106      	bne.n	f224 <main+0x590>
						{
							SwTaskList[schedCount]();	
    f216:	4b4a      	ldr	r3, [pc, #296]	; (f340 <main+0x6ac>)
    f218:	781b      	ldrb	r3, [r3, #0]
    f21a:	1c1a      	adds	r2, r3, #0
    f21c:	4b4c      	ldr	r3, [pc, #304]	; (f350 <main+0x6bc>)
    f21e:	0092      	lsls	r2, r2, #2
    f220:	58d3      	ldr	r3, [r2, r3]
    f222:	4798      	blx	r3
						}
					}
					if (schedCount ==6)
    f224:	4b46      	ldr	r3, [pc, #280]	; (f340 <main+0x6ac>)
    f226:	781b      	ldrb	r3, [r3, #0]
    f228:	2b06      	cmp	r3, #6
    f22a:	d101      	bne.n	f230 <main+0x59c>
					{
						BrakeBoardStateMachineTask();
    f22c:	4b4b      	ldr	r3, [pc, #300]	; (f35c <main+0x6c8>)
    f22e:	4798      	blx	r3
					}		
					if (schedCount ==5)
    f230:	4b43      	ldr	r3, [pc, #268]	; (f340 <main+0x6ac>)
    f232:	781b      	ldrb	r3, [r3, #0]
    f234:	2b05      	cmp	r3, #5
    f236:	d101      	bne.n	f23c <main+0x5a8>
					{
						ADCTask();
    f238:	4b49      	ldr	r3, [pc, #292]	; (f360 <main+0x6cc>)
    f23a:	4798      	blx	r3
					}								
					if (schedCount ==3)
    f23c:	4b40      	ldr	r3, [pc, #256]	; (f340 <main+0x6ac>)
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	2b03      	cmp	r3, #3
    f242:	d101      	bne.n	f248 <main+0x5b4>
					{
						ButtonSample();
    f244:	4b47      	ldr	r3, [pc, #284]	; (f364 <main+0x6d0>)
    f246:	4798      	blx	r3
					//------------------------
					// if not powered up and 
					// setup is pressed, will RESET the 
					// bluetooth to wake it up.
					//------------------------
					button = ButtonChanged();
    f248:	1c3c      	adds	r4, r7, #0
    f24a:	340e      	adds	r4, #14
    f24c:	4b39      	ldr	r3, [pc, #228]	; (f334 <main+0x6a0>)
    f24e:	4798      	blx	r3
    f250:	1c03      	adds	r3, r0, #0
    f252:	7023      	strb	r3, [r4, #0]
					if (((button & KEY_SETUP)!= 0)&&(setup_pressed != 0))
    f254:	1c3b      	adds	r3, r7, #0
    f256:	330e      	adds	r3, #14
    f258:	781a      	ldrb	r2, [r3, #0]
    f25a:	2301      	movs	r3, #1
    f25c:	4013      	ands	r3, r2
    f25e:	d006      	beq.n	f26e <main+0x5da>
    f260:	4b41      	ldr	r3, [pc, #260]	; (f368 <main+0x6d4>)
    f262:	881b      	ldrh	r3, [r3, #0]
    f264:	2b00      	cmp	r3, #0
    f266:	d002      	beq.n	f26e <main+0x5da>
					{
						bluetoothHoldTimer100msec = 30; 
    f268:	4b40      	ldr	r3, [pc, #256]	; (f36c <main+0x6d8>)
    f26a:	221e      	movs	r2, #30
    f26c:	701a      	strb	r2, [r3, #0]
					}
					if (setup_pressed != 0)
    f26e:	4b3e      	ldr	r3, [pc, #248]	; (f368 <main+0x6d4>)
    f270:	881b      	ldrh	r3, [r3, #0]
    f272:	2b00      	cmp	r3, #0
    f274:	d013      	beq.n	f29e <main+0x60a>
					{
						if (bluetoothHoldTimer100msec == 1)
    f276:	4b3d      	ldr	r3, [pc, #244]	; (f36c <main+0x6d8>)
    f278:	781b      	ldrb	r3, [r3, #0]
    f27a:	2b01      	cmp	r3, #1
    f27c:	d10f      	bne.n	f29e <main+0x60a>
						{
							bluetoothHoldTimer100msec = 0;
    f27e:	4b3b      	ldr	r3, [pc, #236]	; (f36c <main+0x6d8>)
    f280:	2200      	movs	r2, #0
    f282:	701a      	strb	r2, [r3, #0]
							if(bluetoothAwake != 0)
    f284:	4b3a      	ldr	r3, [pc, #232]	; (f370 <main+0x6dc>)
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	2b00      	cmp	r3, #0
    f28a:	d004      	beq.n	f296 <main+0x602>
							{
								USARTDisable();
    f28c:	4b25      	ldr	r3, [pc, #148]	; (f324 <main+0x690>)
    f28e:	4798      	blx	r3
								BluetoothSleep();
    f290:	4b25      	ldr	r3, [pc, #148]	; (f328 <main+0x694>)
    f292:	4798      	blx	r3
    f294:	e003      	b.n	f29e <main+0x60a>
							}
							else
							{
								USARTEnable();
    f296:	4b37      	ldr	r3, [pc, #220]	; (f374 <main+0x6e0>)
    f298:	4798      	blx	r3
								BluetoothWakeUp();
    f29a:	4b37      	ldr	r3, [pc, #220]	; (f378 <main+0x6e4>)
    f29c:	4798      	blx	r3
							}
						}
					}
					if (setup_pressed ==0)
    f29e:	4b32      	ldr	r3, [pc, #200]	; (f368 <main+0x6d4>)
    f2a0:	881b      	ldrh	r3, [r3, #0]
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d102      	bne.n	f2ac <main+0x618>
					{
						bluetoothHoldTimer100msec = 0;
    f2a6:	4b31      	ldr	r3, [pc, #196]	; (f36c <main+0x6d8>)
    f2a8:	2200      	movs	r2, #0
    f2aa:	701a      	strb	r2, [r3, #0]
				}
				prevSW4 = newSW4;
*/				
#endif	
			}
			schedCount++;
    f2ac:	4b24      	ldr	r3, [pc, #144]	; (f340 <main+0x6ac>)
    f2ae:	781b      	ldrb	r3, [r3, #0]
    f2b0:	3301      	adds	r3, #1
    f2b2:	b2da      	uxtb	r2, r3
    f2b4:	4b22      	ldr	r3, [pc, #136]	; (f340 <main+0x6ac>)
    f2b6:	701a      	strb	r2, [r3, #0]
    {
//		wdt_reset_count();

		schedDone = 0;
		schedCount = 0;
		while ((schedCount <16) && (schedDone ==0))
    f2b8:	4b21      	ldr	r3, [pc, #132]	; (f340 <main+0x6ac>)
    f2ba:	781b      	ldrb	r3, [r3, #0]
    f2bc:	2b0f      	cmp	r3, #15
    f2be:	d804      	bhi.n	f2ca <main+0x636>
    f2c0:	4b1e      	ldr	r3, [pc, #120]	; (f33c <main+0x6a8>)
    f2c2:	781b      	ldrb	r3, [r3, #0]
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d100      	bne.n	f2ca <main+0x636>
    f2c8:	e75f      	b.n	f18a <main+0x4f6>

		
#endif 
 
		
    }
    f2ca:	e757      	b.n	f17c <main+0x4e8>
    f2cc:	0000bb0d 	.word	0x0000bb0d
    f2d0:	200004c4 	.word	0x200004c4
    f2d4:	200004c6 	.word	0x200004c6
    f2d8:	200004c8 	.word	0x200004c8
    f2dc:	20003693 	.word	0x20003693
    f2e0:	20003691 	.word	0x20003691
    f2e4:	20003690 	.word	0x20003690
    f2e8:	00011cfd 	.word	0x00011cfd
    f2ec:	0000e8d5 	.word	0x0000e8d5
    f2f0:	0000c895 	.word	0x0000c895
    f2f4:	0000aeb5 	.word	0x0000aeb5
    f2f8:	00005de9 	.word	0x00005de9
    f2fc:	0000fc85 	.word	0x0000fc85
    f300:	0000fce1 	.word	0x0000fce1
    f304:	0000b889 	.word	0x0000b889
    f308:	200036d2 	.word	0x200036d2
    f30c:	0000f441 	.word	0x0000f441
    f310:	0000e835 	.word	0x0000e835
    f314:	20000044 	.word	0x20000044
    f318:	0000b91d 	.word	0x0000b91d
    f31c:	000068fd 	.word	0x000068fd
    f320:	0000e1c1 	.word	0x0000e1c1
    f324:	0000e145 	.word	0x0000e145
    f328:	00006375 	.word	0x00006375
    f32c:	0000eadd 	.word	0x0000eadd
    f330:	000043cd 	.word	0x000043cd
    f334:	0000bbc9 	.word	0x0000bbc9
    f338:	0000ebf1 	.word	0x0000ebf1
    f33c:	200036d1 	.word	0x200036d1
    f340:	20003699 	.word	0x20003699
    f344:	200004db 	.word	0x200004db
    f348:	2000369c 	.word	0x2000369c
    f34c:	200036b5 	.word	0x200036b5
    f350:	00018400 	.word	0x00018400
    f354:	0000bf25 	.word	0x0000bf25
    f358:	200004bb 	.word	0x200004bb
    f35c:	00006ec9 	.word	0x00006ec9
    f360:	0000b691 	.word	0x0000b691
    f364:	0000bbed 	.word	0x0000bbed
    f368:	2000306e 	.word	0x2000306e
    f36c:	200004e2 	.word	0x200004e2
    f370:	200004a4 	.word	0x200004a4
    f374:	0000e15d 	.word	0x0000e15d
    f378:	000062dd 	.word	0x000062dd

0000f37c <CommSupTask>:
//------------------------------------------------------------------------------
// This function
//whichRadio = WHICHRADIO_LORA;  hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh will need to add back if comm loss
//==============================================================================
void CommSupTask(void)
{
    f37c:	b580      	push	{r7, lr}
    f37e:	af00      	add	r7, sp, #0
 	
	if ((setCW == 0)&&(setTXContinuous==0)&&(setRXContinuous==0))
    f380:	4b23      	ldr	r3, [pc, #140]	; (f410 <CommSupTask+0x94>)
    f382:	781b      	ldrb	r3, [r3, #0]
    f384:	2b00      	cmp	r3, #0
    f386:	d141      	bne.n	f40c <CommSupTask+0x90>
    f388:	4b22      	ldr	r3, [pc, #136]	; (f414 <CommSupTask+0x98>)
    f38a:	781b      	ldrb	r3, [r3, #0]
    f38c:	2b00      	cmp	r3, #0
    f38e:	d13d      	bne.n	f40c <CommSupTask+0x90>
    f390:	4b21      	ldr	r3, [pc, #132]	; (f418 <CommSupTask+0x9c>)
    f392:	781b      	ldrb	r3, [r3, #0]
    f394:	2b00      	cmp	r3, #0
    f396:	d139      	bne.n	f40c <CommSupTask+0x90>
	{
		commErrorCount++;
    f398:	4b20      	ldr	r3, [pc, #128]	; (f41c <CommSupTask+0xa0>)
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	3301      	adds	r3, #1
    f39e:	b2da      	uxtb	r2, r3
    f3a0:	4b1e      	ldr	r3, [pc, #120]	; (f41c <CommSupTask+0xa0>)
    f3a2:	701a      	strb	r2, [r3, #0]
		if (commErrorCount > 20)
    f3a4:	4b1d      	ldr	r3, [pc, #116]	; (f41c <CommSupTask+0xa0>)
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	2b14      	cmp	r3, #20
    f3aa:	d92b      	bls.n	f404 <CommSupTask+0x88>
		{
			commErrorCount = 0; 
    f3ac:	4b1b      	ldr	r3, [pc, #108]	; (f41c <CommSupTask+0xa0>)
    f3ae:	2200      	movs	r2, #0
    f3b0:	701a      	strb	r2, [r3, #0]
			brakeStatus.BrakeState |= BRAKESTATE_COMMERROR; 
    f3b2:	4b1b      	ldr	r3, [pc, #108]	; (f420 <CommSupTask+0xa4>)
    f3b4:	791b      	ldrb	r3, [r3, #4]
    f3b6:	2201      	movs	r2, #1
    f3b8:	4313      	orrs	r3, r2
    f3ba:	b2da      	uxtb	r2, r3
    f3bc:	4b18      	ldr	r3, [pc, #96]	; (f420 <CommSupTask+0xa4>)
    f3be:	711a      	strb	r2, [r3, #4]
	#if REMOTEBOARD		
			eventMessageReceived = 1; 
			AppScreenUpdateHome();	
	#endif	
			CommInit();	
    f3c0:	4b18      	ldr	r3, [pc, #96]	; (f424 <CommSupTask+0xa8>)
    f3c2:	4798      	blx	r3
			SX1272Init(whichRadio);
    f3c4:	4b18      	ldr	r3, [pc, #96]	; (f428 <CommSupTask+0xac>)
    f3c6:	781b      	ldrb	r3, [r3, #0]
    f3c8:	1c18      	adds	r0, r3, #0
    f3ca:	4b18      	ldr	r3, [pc, #96]	; (f42c <CommSupTask+0xb0>)
    f3cc:	4798      	blx	r3
	#if BRAKEBOARD	
		
			if (whichRadio == WHICHRADIO_LORA)
    f3ce:	4b16      	ldr	r3, [pc, #88]	; (f428 <CommSupTask+0xac>)
    f3d0:	781b      	ldrb	r3, [r3, #0]
    f3d2:	2b99      	cmp	r3, #153	; 0x99
    f3d4:	d102      	bne.n	f3dc <CommSupTask+0x60>
			{					 
				AppLoraReceiveStart();
    f3d6:	4b16      	ldr	r3, [pc, #88]	; (f430 <CommSupTask+0xb4>)
    f3d8:	4798      	blx	r3
    f3da:	e001      	b.n	f3e0 <CommSupTask+0x64>
			}
			else
			{
				AppFskReceiveStart();
    f3dc:	4b15      	ldr	r3, [pc, #84]	; (f434 <CommSupTask+0xb8>)
    f3de:	4798      	blx	r3
			}
			commSupTimer = COMM_SUP_TIME; 
    f3e0:	4b15      	ldr	r3, [pc, #84]	; (f438 <CommSupTask+0xbc>)
    f3e2:	22fa      	movs	r2, #250	; 0xfa
    f3e4:	0052      	lsls	r2, r2, #1
    f3e6:	801a      	strh	r2, [r3, #0]
	#endif
			commFailureCount++;
    f3e8:	4b14      	ldr	r3, [pc, #80]	; (f43c <CommSupTask+0xc0>)
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	3301      	adds	r3, #1
    f3ee:	b2da      	uxtb	r2, r3
    f3f0:	4b12      	ldr	r3, [pc, #72]	; (f43c <CommSupTask+0xc0>)
    f3f2:	701a      	strb	r2, [r3, #0]
			if (commFailureCount>30)
    f3f4:	4b11      	ldr	r3, [pc, #68]	; (f43c <CommSupTask+0xc0>)
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	2b1e      	cmp	r3, #30
    f3fa:	d907      	bls.n	f40c <CommSupTask+0x90>
			{
				commFailureCount =  0;
    f3fc:	4b0f      	ldr	r3, [pc, #60]	; (f43c <CommSupTask+0xc0>)
    f3fe:	2200      	movs	r2, #0
    f400:	701a      	strb	r2, [r3, #0]
    f402:	e003      	b.n	f40c <CommSupTask+0x90>
			}	
		}	
		else
		{
	#if BRAKEBOARD	
			commSupTimer = COMM_SUP_TIME; 
    f404:	4b0c      	ldr	r3, [pc, #48]	; (f438 <CommSupTask+0xbc>)
    f406:	22fa      	movs	r2, #250	; 0xfa
    f408:	0052      	lsls	r2, r2, #1
    f40a:	801a      	strh	r2, [r3, #0]
	#endif		
		}
	}
}
    f40c:	46bd      	mov	sp, r7
    f40e:	bd80      	pop	{r7, pc}
    f410:	20003690 	.word	0x20003690
    f414:	20003693 	.word	0x20003693
    f418:	20003691 	.word	0x20003691
    f41c:	200036b1 	.word	0x200036b1
    f420:	20003694 	.word	0x20003694
    f424:	0000f441 	.word	0x0000f441
    f428:	200036d2 	.word	0x200036d2
    f42c:	00011a7d 	.word	0x00011a7d
    f430:	00010f81 	.word	0x00010f81
    f434:	000101a9 	.word	0x000101a9
    f438:	200036ba 	.word	0x200036ba
    f43c:	200036b8 	.word	0x200036b8

0000f440 <CommInit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void CommInit(void)
{
    f440:	b580      	push	{r7, lr}
    f442:	b082      	sub	sp, #8
    f444:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	if ((setCW != 0))
    f446:	4b25      	ldr	r3, [pc, #148]	; (f4dc <CommInit+0x9c>)
    f448:	781b      	ldrb	r3, [r3, #0]
    f44a:	2b00      	cmp	r3, #0
    f44c:	d002      	beq.n	f454 <CommInit+0x14>
	{
		whichRadio = WHICHRADIO_FSK;
    f44e:	4b24      	ldr	r3, [pc, #144]	; (f4e0 <CommInit+0xa0>)
    f450:	2288      	movs	r2, #136	; 0x88
    f452:	701a      	strb	r2, [r3, #0]
	}
		
//	whichRadio = WHICHRADIO_FSK;  //TESTTINTGGGGGT
	port_get_config_defaults(&pin_conf);
    f454:	1d3b      	adds	r3, r7, #4
    f456:	1c18      	adds	r0, r3, #0
    f458:	4b22      	ldr	r3, [pc, #136]	; (f4e4 <CommInit+0xa4>)
    f45a:	4798      	blx	r3
	// X-MOSI = output = PA4
	// X-MISO = input = PA7
	// X-SCK = output = PA5
	// X-DIO0 = input ? = PB9
	//--------------------------------
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f45c:	1d3b      	adds	r3, r7, #4
    f45e:	2201      	movs	r2, #1
    f460:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
    f462:	1d3b      	adds	r3, r7, #4
    f464:	2028      	movs	r0, #40	; 0x28
    f466:	1c19      	adds	r1, r3, #0
    f468:	4b1f      	ldr	r3, [pc, #124]	; (f4e8 <CommInit+0xa8>)
    f46a:	4798      	blx	r3
	port_pin_set_output_level(LORA_XRESET, 0);
    f46c:	2028      	movs	r0, #40	; 0x28
    f46e:	2100      	movs	r1, #0
    f470:	4b1e      	ldr	r3, [pc, #120]	; (f4ec <CommInit+0xac>)
    f472:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f474:	1d3b      	adds	r3, r7, #4
    f476:	2200      	movs	r2, #0
    f478:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XDIO0, &pin_conf);
    f47a:	1d3b      	adds	r3, r7, #4
    f47c:	2029      	movs	r0, #41	; 0x29
    f47e:	1c19      	adds	r1, r3, #0
    f480:	4b19      	ldr	r3, [pc, #100]	; (f4e8 <CommInit+0xa8>)
    f482:	4798      	blx	r3
	port_pin_set_config(LORA_XDIO1, &pin_conf);
    f484:	1d3b      	adds	r3, r7, #4
    f486:	2011      	movs	r0, #17
    f488:	1c19      	adds	r1, r3, #0
    f48a:	4b17      	ldr	r3, [pc, #92]	; (f4e8 <CommInit+0xa8>)
    f48c:	4798      	blx	r3
	SPIXConfigure();
    f48e:	4b18      	ldr	r3, [pc, #96]	; (f4f0 <CommInit+0xb0>)
    f490:	4798      	blx	r3
	SPIXMain();
    f492:	4b18      	ldr	r3, [pc, #96]	; (f4f4 <CommInit+0xb4>)
    f494:	4798      	blx	r3

	SX1272Init(whichRadio); 
    f496:	4b12      	ldr	r3, [pc, #72]	; (f4e0 <CommInit+0xa0>)
    f498:	781b      	ldrb	r3, [r3, #0]
    f49a:	1c18      	adds	r0, r3, #0
    f49c:	4b16      	ldr	r3, [pc, #88]	; (f4f8 <CommInit+0xb8>)
    f49e:	4798      	blx	r3
	if ((setCW == 0))	
    f4a0:	4b0e      	ldr	r3, [pc, #56]	; (f4dc <CommInit+0x9c>)
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	d108      	bne.n	f4ba <CommInit+0x7a>
	{
		if (whichRadio == WHICHRADIO_LORA)
    f4a8:	4b0d      	ldr	r3, [pc, #52]	; (f4e0 <CommInit+0xa0>)
    f4aa:	781b      	ldrb	r3, [r3, #0]
    f4ac:	2b99      	cmp	r3, #153	; 0x99
    f4ae:	d102      	bne.n	f4b6 <CommInit+0x76>
		{
			AppLoraReceiveStart();
    f4b0:	4b12      	ldr	r3, [pc, #72]	; (f4fc <CommInit+0xbc>)
    f4b2:	4798      	blx	r3
    f4b4:	e001      	b.n	f4ba <CommInit+0x7a>
		}
		else
		{
			AppFskReceiveStart();
    f4b6:	4b12      	ldr	r3, [pc, #72]	; (f500 <CommInit+0xc0>)
    f4b8:	4798      	blx	r3
		}
	}
	if (setTXContinuous!=0)
    f4ba:	4b12      	ldr	r3, [pc, #72]	; (f504 <CommInit+0xc4>)
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	2b00      	cmp	r3, #0
    f4c0:	d001      	beq.n	f4c6 <CommInit+0x86>
	{	
		SendOneMessage();
    f4c2:	4b11      	ldr	r3, [pc, #68]	; (f508 <CommInit+0xc8>)
    f4c4:	4798      	blx	r3
#if REMOTEBOARD
	commSupTimer = 0; 
	commErrorCount = 2; 	
#endif
#if BRAKEBOARD
	commSupTimer = COMM_SUP_TIME; 
    f4c6:	4b11      	ldr	r3, [pc, #68]	; (f50c <CommInit+0xcc>)
    f4c8:	22fa      	movs	r2, #250	; 0xfa
    f4ca:	0052      	lsls	r2, r2, #1
    f4cc:	801a      	strh	r2, [r3, #0]
	commErrorCount = 0; 	
    f4ce:	4b10      	ldr	r3, [pc, #64]	; (f510 <CommInit+0xd0>)
    f4d0:	2200      	movs	r2, #0
    f4d2:	701a      	strb	r2, [r3, #0]
#endif	

}
    f4d4:	46bd      	mov	sp, r7
    f4d6:	b002      	add	sp, #8
    f4d8:	bd80      	pop	{r7, pc}
    f4da:	46c0      	nop			; (mov r8, r8)
    f4dc:	20003690 	.word	0x20003690
    f4e0:	200036d2 	.word	0x200036d2
    f4e4:	0000e8b5 	.word	0x0000e8b5
    f4e8:	00011cfd 	.word	0x00011cfd
    f4ec:	0000e8d5 	.word	0x0000e8d5
    f4f0:	0000e48d 	.word	0x0000e48d
    f4f4:	0000e521 	.word	0x0000e521
    f4f8:	00011a7d 	.word	0x00011a7d
    f4fc:	00010f81 	.word	0x00010f81
    f500:	000101a9 	.word	0x000101a9
    f504:	20003693 	.word	0x20003693
    f508:	0000ae35 	.word	0x0000ae35
    f50c:	200036ba 	.word	0x200036ba
    f510:	200036b1 	.word	0x200036b1

0000f514 <AppStatusInitialization>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusInitialization(void)
{
    f514:	b580      	push	{r7, lr}
    f516:	af00      	add	r7, sp, #0
	//-----------------------
	// Tire radio status 
	// bit 0 = init of the tire radio has been done
	// bit 1 = successful comm with the RF433 chip 
	// bit 2 = received a packet via the RF433 chip 
	statusData.TireRadio = 0; 
    f518:	4b14      	ldr	r3, [pc, #80]	; (f56c <AppStatusInitialization+0x58>)
    f51a:	2200      	movs	r2, #0
    f51c:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusData.Accelerometer = 0;
    f51e:	4b13      	ldr	r3, [pc, #76]	; (f56c <AppStatusInitialization+0x58>)
    f520:	2200      	movs	r2, #0
    f522:	70da      	strb	r2, [r3, #3]
	statusData.EEPROM = 0;
    f524:	4b11      	ldr	r3, [pc, #68]	; (f56c <AppStatusInitialization+0x58>)
    f526:	2200      	movs	r2, #0
    f528:	709a      	strb	r2, [r3, #2]
	statusData.ExtRadio = 0;
    f52a:	4b10      	ldr	r3, [pc, #64]	; (f56c <AppStatusInitialization+0x58>)
    f52c:	2200      	movs	r2, #0
    f52e:	705a      	strb	r2, [r3, #1]

	statusBrake.TireRadio = 0;
    f530:	4b0f      	ldr	r3, [pc, #60]	; (f570 <AppStatusInitialization+0x5c>)
    f532:	2200      	movs	r2, #0
    f534:	701a      	strb	r2, [r3, #0]
	//----------------------
	statusBrake.Accelerometer = 0;
    f536:	4b0e      	ldr	r3, [pc, #56]	; (f570 <AppStatusInitialization+0x5c>)
    f538:	2200      	movs	r2, #0
    f53a:	70da      	strb	r2, [r3, #3]
	statusBrake.EEPROM = 0;
    f53c:	4b0c      	ldr	r3, [pc, #48]	; (f570 <AppStatusInitialization+0x5c>)
    f53e:	2200      	movs	r2, #0
    f540:	709a      	strb	r2, [r3, #2]
	statusBrake.ExtRadio = 0;	
    f542:	4b0b      	ldr	r3, [pc, #44]	; (f570 <AppStatusInitialization+0x5c>)
    f544:	2200      	movs	r2, #0
    f546:	705a      	strb	r2, [r3, #1]
	//----------------brake status 
	brakeStatus.VoltageInput = 0;
    f548:	4b0a      	ldr	r3, [pc, #40]	; (f574 <AppStatusInitialization+0x60>)
    f54a:	2200      	movs	r2, #0
    f54c:	701a      	strb	r2, [r3, #0]
	brakeStatus.AccelerometerStatus = 0;
    f54e:	4b09      	ldr	r3, [pc, #36]	; (f574 <AppStatusInitialization+0x60>)
    f550:	2200      	movs	r2, #0
    f552:	70da      	strb	r2, [r3, #3]
	brakeStatus.ActuatorStatus = 0; 
    f554:	4b07      	ldr	r3, [pc, #28]	; (f574 <AppStatusInitialization+0x60>)
    f556:	2200      	movs	r2, #0
    f558:	709a      	strb	r2, [r3, #2]
	brakeStatus.BrakeState = 0;
    f55a:	4b06      	ldr	r3, [pc, #24]	; (f574 <AppStatusInitialization+0x60>)
    f55c:	2200      	movs	r2, #0
    f55e:	711a      	strb	r2, [r3, #4]
	brakeStatus.VoltageSupercap = 0; 
    f560:	4b04      	ldr	r3, [pc, #16]	; (f574 <AppStatusInitialization+0x60>)
    f562:	2200      	movs	r2, #0
    f564:	705a      	strb	r2, [r3, #1]
}
    f566:	46bd      	mov	sp, r7
    f568:	bd80      	pop	{r7, pc}
    f56a:	46c0      	nop			; (mov r8, r8)
    f56c:	200036cc 	.word	0x200036cc
    f570:	200036ac 	.word	0x200036ac
    f574:	20003694 	.word	0x20003694

0000f578 <AppStatusUpdate>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void AppStatusUpdate(uint8_t whichInterface,uint8_t statusUpdate,uint8_t good)
{
    f578:	b580      	push	{r7, lr}
    f57a:	b082      	sub	sp, #8
    f57c:	af00      	add	r7, sp, #0
    f57e:	1dfb      	adds	r3, r7, #7
    f580:	7018      	strb	r0, [r3, #0]
    f582:	1dbb      	adds	r3, r7, #6
    f584:	7019      	strb	r1, [r3, #0]
    f586:	1d7b      	adds	r3, r7, #5
    f588:	701a      	strb	r2, [r3, #0]
	switch (whichInterface)
    f58a:	1dfb      	adds	r3, r7, #7
    f58c:	781b      	ldrb	r3, [r3, #0]
    f58e:	2b03      	cmp	r3, #3
    f590:	d01d      	beq.n	f5ce <AppStatusUpdate+0x56>
    f592:	2b04      	cmp	r3, #4
    f594:	d035      	beq.n	f602 <AppStatusUpdate+0x8a>
    f596:	2b01      	cmp	r3, #1
    f598:	d14d      	bne.n	f636 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f59a:	1d7b      	adds	r3, r7, #5
    f59c:	781b      	ldrb	r3, [r3, #0]
    f59e:	2b00      	cmp	r3, #0
    f5a0:	d008      	beq.n	f5b4 <AppStatusUpdate+0x3c>
			{
				statusData.TireRadio |= statusUpdate; 
    f5a2:	4b26      	ldr	r3, [pc, #152]	; (f63c <AppStatusUpdate+0xc4>)
    f5a4:	781a      	ldrb	r2, [r3, #0]
    f5a6:	1dbb      	adds	r3, r7, #6
    f5a8:	781b      	ldrb	r3, [r3, #0]
    f5aa:	4313      	orrs	r3, r2
    f5ac:	b2da      	uxtb	r2, r3
    f5ae:	4b23      	ldr	r3, [pc, #140]	; (f63c <AppStatusUpdate+0xc4>)
    f5b0:	701a      	strb	r2, [r3, #0]
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
			}
			break;
    f5b2:	e040      	b.n	f636 <AppStatusUpdate+0xbe>
			{
				statusData.TireRadio |= statusUpdate; 
			}		
			else
			{
				statusData.TireRadio &= ~statusUpdate; 
    f5b4:	4b21      	ldr	r3, [pc, #132]	; (f63c <AppStatusUpdate+0xc4>)
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	b2db      	uxtb	r3, r3
    f5ba:	1dba      	adds	r2, r7, #6
    f5bc:	7812      	ldrb	r2, [r2, #0]
    f5be:	43d2      	mvns	r2, r2
    f5c0:	b2d2      	uxtb	r2, r2
    f5c2:	4013      	ands	r3, r2
    f5c4:	b2db      	uxtb	r3, r3
    f5c6:	b2da      	uxtb	r2, r3
    f5c8:	4b1c      	ldr	r3, [pc, #112]	; (f63c <AppStatusUpdate+0xc4>)
    f5ca:	701a      	strb	r2, [r3, #0]
			}
			break;
    f5cc:	e033      	b.n	f636 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f5ce:	1d7b      	adds	r3, r7, #5
    f5d0:	781b      	ldrb	r3, [r3, #0]
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d008      	beq.n	f5e8 <AppStatusUpdate+0x70>
			{
				statusData.EEPROM |= statusUpdate; 
    f5d6:	4b19      	ldr	r3, [pc, #100]	; (f63c <AppStatusUpdate+0xc4>)
    f5d8:	789a      	ldrb	r2, [r3, #2]
    f5da:	1dbb      	adds	r3, r7, #6
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	4313      	orrs	r3, r2
    f5e0:	b2da      	uxtb	r2, r3
    f5e2:	4b16      	ldr	r3, [pc, #88]	; (f63c <AppStatusUpdate+0xc4>)
    f5e4:	709a      	strb	r2, [r3, #2]
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
			}
			break;
    f5e6:	e026      	b.n	f636 <AppStatusUpdate+0xbe>
			{
				statusData.EEPROM |= statusUpdate; 
			}		
			else
			{
				statusData.EEPROM &= ~statusUpdate; 
    f5e8:	4b14      	ldr	r3, [pc, #80]	; (f63c <AppStatusUpdate+0xc4>)
    f5ea:	789b      	ldrb	r3, [r3, #2]
    f5ec:	b2db      	uxtb	r3, r3
    f5ee:	1dba      	adds	r2, r7, #6
    f5f0:	7812      	ldrb	r2, [r2, #0]
    f5f2:	43d2      	mvns	r2, r2
    f5f4:	b2d2      	uxtb	r2, r2
    f5f6:	4013      	ands	r3, r2
    f5f8:	b2db      	uxtb	r3, r3
    f5fa:	b2da      	uxtb	r2, r3
    f5fc:	4b0f      	ldr	r3, [pc, #60]	; (f63c <AppStatusUpdate+0xc4>)
    f5fe:	709a      	strb	r2, [r3, #2]
			}
			break;
    f600:	e019      	b.n	f636 <AppStatusUpdate+0xbe>
			//-----------------------
			// Tire radio status
			// bit 0 = init of the tire radio has been done
			// bit 1 = successful comm with the RF433 chip
			// bit 2 = received a packet via the RF433 chip
			if (good != 0)
    f602:	1d7b      	adds	r3, r7, #5
    f604:	781b      	ldrb	r3, [r3, #0]
    f606:	2b00      	cmp	r3, #0
    f608:	d008      	beq.n	f61c <AppStatusUpdate+0xa4>
			{
				statusData.Accelerometer |= statusUpdate; 
    f60a:	4b0c      	ldr	r3, [pc, #48]	; (f63c <AppStatusUpdate+0xc4>)
    f60c:	78da      	ldrb	r2, [r3, #3]
    f60e:	1dbb      	adds	r3, r7, #6
    f610:	781b      	ldrb	r3, [r3, #0]
    f612:	4313      	orrs	r3, r2
    f614:	b2da      	uxtb	r2, r3
    f616:	4b09      	ldr	r3, [pc, #36]	; (f63c <AppStatusUpdate+0xc4>)
    f618:	70da      	strb	r2, [r3, #3]
    f61a:	e00b      	b.n	f634 <AppStatusUpdate+0xbc>
			}		
			else
			{
				statusData.Accelerometer &= ~statusUpdate; 
    f61c:	4b07      	ldr	r3, [pc, #28]	; (f63c <AppStatusUpdate+0xc4>)
    f61e:	78db      	ldrb	r3, [r3, #3]
    f620:	b2db      	uxtb	r3, r3
    f622:	1dba      	adds	r2, r7, #6
    f624:	7812      	ldrb	r2, [r2, #0]
    f626:	43d2      	mvns	r2, r2
    f628:	b2d2      	uxtb	r2, r2
    f62a:	4013      	ands	r3, r2
    f62c:	b2db      	uxtb	r3, r3
    f62e:	b2da      	uxtb	r2, r3
    f630:	4b02      	ldr	r3, [pc, #8]	; (f63c <AppStatusUpdate+0xc4>)
    f632:	70da      	strb	r2, [r3, #3]
			}
			break;
    f634:	46c0      	nop			; (mov r8, r8)
		}					
	}
}
    f636:	46bd      	mov	sp, r7
    f638:	b002      	add	sp, #8
    f63a:	bd80      	pop	{r7, pc}
    f63c:	200036cc 	.word	0x200036cc

0000f640 <tc_callback_to_toggle_led>:
//
//============================================================================== 
uint8_t minute=0;
uint8_t toggle; 
void tc_callback_to_toggle_led(struct tc_module *const module_inst)
{
    f640:	b580      	push	{r7, lr}
    f642:	b082      	sub	sp, #8
    f644:	af00      	add	r7, sp, #0
    f646:	6078      	str	r0, [r7, #4]
	wdt_reset_count();
    f648:	4bc9      	ldr	r3, [pc, #804]	; (f970 <tc_callback_to_toggle_led+0x330>)
    f64a:	4798      	blx	r3
	{
		timerAccelerometer = 0;
		schedByte |= SCHEDBYTE_ACCELEROMETER;
	}	
#else
	schedByte |= SCHEDBYTE_ACCELEROMETER;
    f64c:	4bc9      	ldr	r3, [pc, #804]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f64e:	681b      	ldr	r3, [r3, #0]
    f650:	2201      	movs	r2, #1
    f652:	431a      	orrs	r2, r3
    f654:	4bc7      	ldr	r3, [pc, #796]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f656:	601a      	str	r2, [r3, #0]
#endif
#if BRAKEBOARD 
	if (fastVoltageBadTime < VOLTAGE_BAD_TIME)
    f658:	4bc7      	ldr	r3, [pc, #796]	; (f978 <tc_callback_to_toggle_led+0x338>)
    f65a:	881b      	ldrh	r3, [r3, #0]
    f65c:	2b04      	cmp	r3, #4
    f65e:	d805      	bhi.n	f66c <tc_callback_to_toggle_led+0x2c>
	{
		fastVoltageBadTime++;
    f660:	4bc5      	ldr	r3, [pc, #788]	; (f978 <tc_callback_to_toggle_led+0x338>)
    f662:	881b      	ldrh	r3, [r3, #0]
    f664:	3301      	adds	r3, #1
    f666:	b29a      	uxth	r2, r3
    f668:	4bc3      	ldr	r3, [pc, #780]	; (f978 <tc_callback_to_toggle_led+0x338>)
    f66a:	801a      	strh	r2, [r3, #0]
	}
	if (brakeHoldOffTime >0)
    f66c:	4bc3      	ldr	r3, [pc, #780]	; (f97c <tc_callback_to_toggle_led+0x33c>)
    f66e:	881b      	ldrh	r3, [r3, #0]
    f670:	2b00      	cmp	r3, #0
    f672:	d005      	beq.n	f680 <tc_callback_to_toggle_led+0x40>
	{
		brakeHoldOffTime--;
    f674:	4bc1      	ldr	r3, [pc, #772]	; (f97c <tc_callback_to_toggle_led+0x33c>)
    f676:	881b      	ldrh	r3, [r3, #0]
    f678:	3b01      	subs	r3, #1
    f67a:	b29a      	uxth	r2, r3
    f67c:	4bbf      	ldr	r3, [pc, #764]	; (f97c <tc_callback_to_toggle_led+0x33c>)
    f67e:	801a      	strh	r2, [r3, #0]
	}
	if (blockingTime >0)
    f680:	4bbf      	ldr	r3, [pc, #764]	; (f980 <tc_callback_to_toggle_led+0x340>)
    f682:	881b      	ldrh	r3, [r3, #0]
    f684:	2b00      	cmp	r3, #0
    f686:	d005      	beq.n	f694 <tc_callback_to_toggle_led+0x54>
	{
		blockingTime--;
    f688:	4bbd      	ldr	r3, [pc, #756]	; (f980 <tc_callback_to_toggle_led+0x340>)
    f68a:	881b      	ldrh	r3, [r3, #0]
    f68c:	3b01      	subs	r3, #1
    f68e:	b29a      	uxth	r2, r3
    f690:	4bbb      	ldr	r3, [pc, #748]	; (f980 <tc_callback_to_toggle_led+0x340>)
    f692:	801a      	strh	r2, [r3, #0]
	}
	if (loadTime >0)
    f694:	4bbb      	ldr	r3, [pc, #748]	; (f984 <tc_callback_to_toggle_led+0x344>)
    f696:	881b      	ldrh	r3, [r3, #0]
    f698:	2b00      	cmp	r3, #0
    f69a:	d005      	beq.n	f6a8 <tc_callback_to_toggle_led+0x68>
	{
		loadTime--;
    f69c:	4bb9      	ldr	r3, [pc, #740]	; (f984 <tc_callback_to_toggle_led+0x344>)
    f69e:	881b      	ldrh	r3, [r3, #0]
    f6a0:	3b01      	subs	r3, #1
    f6a2:	b29a      	uxth	r2, r3
    f6a4:	4bb7      	ldr	r3, [pc, #732]	; (f984 <tc_callback_to_toggle_led+0x344>)
    f6a6:	801a      	strh	r2, [r3, #0]
	}	
	//------------- 
	// CLK_FIX
	if (timerToggle != 0)
    f6a8:	4bb7      	ldr	r3, [pc, #732]	; (f988 <tc_callback_to_toggle_led+0x348>)
    f6aa:	781b      	ldrb	r3, [r3, #0]
    f6ac:	2b00      	cmp	r3, #0
    f6ae:	d003      	beq.n	f6b8 <tc_callback_to_toggle_led+0x78>
	{
		timerToggle = 0;
    f6b0:	4bb5      	ldr	r3, [pc, #724]	; (f988 <tc_callback_to_toggle_led+0x348>)
    f6b2:	2200      	movs	r2, #0
    f6b4:	701a      	strb	r2, [r3, #0]
    f6b6:	e002      	b.n	f6be <tc_callback_to_toggle_led+0x7e>
//		port_pin_set_output_level(PIN_PB22, FALSE); //CLK_FIX
	}
	else
	{
		timerToggle = 1;
    f6b8:	4bb3      	ldr	r3, [pc, #716]	; (f988 <tc_callback_to_toggle_led+0x348>)
    f6ba:	2201      	movs	r2, #1
    f6bc:	701a      	strb	r2, [r3, #0]
	}
#endif
//-------------------
// 25 msec tasks
//-------------------	
	twentyfiveMSec++;
    f6be:	4bb3      	ldr	r3, [pc, #716]	; (f98c <tc_callback_to_toggle_led+0x34c>)
    f6c0:	781b      	ldrb	r3, [r3, #0]
    f6c2:	3301      	adds	r3, #1
    f6c4:	b2da      	uxtb	r2, r3
    f6c6:	4bb1      	ldr	r3, [pc, #708]	; (f98c <tc_callback_to_toggle_led+0x34c>)
    f6c8:	701a      	strb	r2, [r3, #0]
	if (twentyfiveMSec >= 25)
    f6ca:	4bb0      	ldr	r3, [pc, #704]	; (f98c <tc_callback_to_toggle_led+0x34c>)
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	2b18      	cmp	r3, #24
    f6d0:	d919      	bls.n	f706 <tc_callback_to_toggle_led+0xc6>
	{
#if BRAKEBOARD		
		schedByte|= SCHEDBYTE_BRAKETASK; 
    f6d2:	4ba8      	ldr	r3, [pc, #672]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f6d4:	681b      	ldr	r3, [r3, #0]
    f6d6:	2240      	movs	r2, #64	; 0x40
    f6d8:	431a      	orrs	r2, r3
    f6da:	4ba6      	ldr	r3, [pc, #664]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f6dc:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_TABLESAMPLE; 
    f6de:	4bac      	ldr	r3, [pc, #688]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f6e0:	781b      	ldrb	r3, [r3, #0]
    f6e2:	2204      	movs	r2, #4
    f6e4:	4313      	orrs	r3, r2
    f6e6:	b2da      	uxtb	r2, r3
    f6e8:	4ba9      	ldr	r3, [pc, #676]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f6ea:	701a      	strb	r2, [r3, #0]
		
		if (breakawayHoldTimer > 0)
    f6ec:	4ba9      	ldr	r3, [pc, #676]	; (f994 <tc_callback_to_toggle_led+0x354>)
    f6ee:	881b      	ldrh	r3, [r3, #0]
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d005      	beq.n	f700 <tc_callback_to_toggle_led+0xc0>
		{
			breakawayHoldTimer++;
    f6f4:	4ba7      	ldr	r3, [pc, #668]	; (f994 <tc_callback_to_toggle_led+0x354>)
    f6f6:	881b      	ldrh	r3, [r3, #0]
    f6f8:	3301      	adds	r3, #1
    f6fa:	b29a      	uxth	r2, r3
    f6fc:	4ba5      	ldr	r3, [pc, #660]	; (f994 <tc_callback_to_toggle_led+0x354>)
    f6fe:	801a      	strh	r2, [r3, #0]
		}
#endif		

		twentyfiveMSec = 0;
    f700:	4ba2      	ldr	r3, [pc, #648]	; (f98c <tc_callback_to_toggle_led+0x34c>)
    f702:	2200      	movs	r2, #0
    f704:	701a      	strb	r2, [r3, #0]
	}
#if BRAKEBOARD			 
	if (motorOn == TRUE)
    f706:	4ba4      	ldr	r3, [pc, #656]	; (f998 <tc_callback_to_toggle_led+0x358>)
    f708:	781b      	ldrb	r3, [r3, #0]
    f70a:	2b01      	cmp	r3, #1
    f70c:	d105      	bne.n	f71a <tc_callback_to_toggle_led+0xda>
	{
		schedByte |= SCHEDBYTE_BRAKETASK;
    f70e:	4b99      	ldr	r3, [pc, #612]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f710:	681b      	ldr	r3, [r3, #0]
    f712:	2240      	movs	r2, #64	; 0x40
    f714:	431a      	orrs	r2, r3
    f716:	4b97      	ldr	r3, [pc, #604]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f718:	601a      	str	r2, [r3, #0]
	}
#endif		
#if BRAKEBOARD	
	ditherTimer++;
    f71a:	4ba0      	ldr	r3, [pc, #640]	; (f99c <tc_callback_to_toggle_led+0x35c>)
    f71c:	881b      	ldrh	r3, [r3, #0]
    f71e:	3301      	adds	r3, #1
    f720:	b29a      	uxth	r2, r3
    f722:	4b9e      	ldr	r3, [pc, #632]	; (f99c <tc_callback_to_toggle_led+0x35c>)
    f724:	801a      	strh	r2, [r3, #0]
	if (ditherTimer >= DITHER_TIME)
    f726:	4b9d      	ldr	r3, [pc, #628]	; (f99c <tc_callback_to_toggle_led+0x35c>)
    f728:	881a      	ldrh	r2, [r3, #0]
    f72a:	4b9d      	ldr	r3, [pc, #628]	; (f9a0 <tc_callback_to_toggle_led+0x360>)
    f72c:	429a      	cmp	r2, r3
    f72e:	d90f      	bls.n	f750 <tc_callback_to_toggle_led+0x110>
	{	
		ditherTimer = 0;		
    f730:	4b9a      	ldr	r3, [pc, #616]	; (f99c <tc_callback_to_toggle_led+0x35c>)
    f732:	2200      	movs	r2, #0
    f734:	801a      	strh	r2, [r3, #0]
		schedByte|= SCHEDBYTE_BRAKETASK; 
    f736:	4b8f      	ldr	r3, [pc, #572]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f738:	681b      	ldr	r3, [r3, #0]
    f73a:	2240      	movs	r2, #64	; 0x40
    f73c:	431a      	orrs	r2, r3
    f73e:	4b8d      	ldr	r3, [pc, #564]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f740:	601a      	str	r2, [r3, #0]
		brakeChange |= BRAKECHANGE_DITHER; 
    f742:	4b93      	ldr	r3, [pc, #588]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	2210      	movs	r2, #16
    f748:	4313      	orrs	r3, r2
    f74a:	b2da      	uxtb	r2, r3
    f74c:	4b90      	ldr	r3, [pc, #576]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f74e:	701a      	strb	r2, [r3, #0]
	}
#endif 
	
	hundredMSec++;
    f750:	4b94      	ldr	r3, [pc, #592]	; (f9a4 <tc_callback_to_toggle_led+0x364>)
    f752:	781b      	ldrb	r3, [r3, #0]
    f754:	3301      	adds	r3, #1
    f756:	b2da      	uxtb	r2, r3
    f758:	4b92      	ldr	r3, [pc, #584]	; (f9a4 <tc_callback_to_toggle_led+0x364>)
    f75a:	701a      	strb	r2, [r3, #0]
	if (hundredMSec >= 100)
    f75c:	4b91      	ldr	r3, [pc, #580]	; (f9a4 <tc_callback_to_toggle_led+0x364>)
    f75e:	781b      	ldrb	r3, [r3, #0]
    f760:	2b63      	cmp	r3, #99	; 0x63
    f762:	d94f      	bls.n	f804 <tc_callback_to_toggle_led+0x1c4>
	{
#if BRAKEBOARD
		if (brakeSupTime >0)
    f764:	4b90      	ldr	r3, [pc, #576]	; (f9a8 <tc_callback_to_toggle_led+0x368>)
    f766:	881b      	ldrh	r3, [r3, #0]
    f768:	2b00      	cmp	r3, #0
    f76a:	d010      	beq.n	f78e <tc_callback_to_toggle_led+0x14e>
		{
			brakeSupTime--;
    f76c:	4b8e      	ldr	r3, [pc, #568]	; (f9a8 <tc_callback_to_toggle_led+0x368>)
    f76e:	881b      	ldrh	r3, [r3, #0]
    f770:	3b01      	subs	r3, #1
    f772:	b29a      	uxth	r2, r3
    f774:	4b8c      	ldr	r3, [pc, #560]	; (f9a8 <tc_callback_to_toggle_led+0x368>)
    f776:	801a      	strh	r2, [r3, #0]
			if (brakeSupTime ==0)
    f778:	4b8b      	ldr	r3, [pc, #556]	; (f9a8 <tc_callback_to_toggle_led+0x368>)
    f77a:	881b      	ldrh	r3, [r3, #0]
    f77c:	2b00      	cmp	r3, #0
    f77e:	d106      	bne.n	f78e <tc_callback_to_toggle_led+0x14e>
			{
				brakeChange |= BRAKECHANGE_SUPTIME;
    f780:	4b83      	ldr	r3, [pc, #524]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f782:	781b      	ldrb	r3, [r3, #0]
    f784:	2202      	movs	r2, #2
    f786:	4313      	orrs	r3, r2
    f788:	b2da      	uxtb	r2, r3
    f78a:	4b81      	ldr	r3, [pc, #516]	; (f990 <tc_callback_to_toggle_led+0x350>)
    f78c:	701a      	strb	r2, [r3, #0]
			}
		}

#endif		
#if BRAKEBOARD 
		if ((brakeState != BRAKESTATE_RESET)&&(programming ==0))
    f78e:	4b87      	ldr	r3, [pc, #540]	; (f9ac <tc_callback_to_toggle_led+0x36c>)
    f790:	781b      	ldrb	r3, [r3, #0]
    f792:	2b00      	cmp	r3, #0
    f794:	d009      	beq.n	f7aa <tc_callback_to_toggle_led+0x16a>
    f796:	4b86      	ldr	r3, [pc, #536]	; (f9b0 <tc_callback_to_toggle_led+0x370>)
    f798:	781b      	ldrb	r3, [r3, #0]
    f79a:	2b00      	cmp	r3, #0
    f79c:	d105      	bne.n	f7aa <tc_callback_to_toggle_led+0x16a>
		{	
			mainLineTask++;
    f79e:	4b85      	ldr	r3, [pc, #532]	; (f9b4 <tc_callback_to_toggle_led+0x374>)
    f7a0:	781b      	ldrb	r3, [r3, #0]
    f7a2:	3301      	adds	r3, #1
    f7a4:	b2da      	uxtb	r2, r3
    f7a6:	4b83      	ldr	r3, [pc, #524]	; (f9b4 <tc_callback_to_toggle_led+0x374>)
    f7a8:	701a      	strb	r2, [r3, #0]
		if ((programming ==0))
		{
			mainLineTask++;
		}
#endif 		
		if (mainLineTask>10)
    f7aa:	4b82      	ldr	r3, [pc, #520]	; (f9b4 <tc_callback_to_toggle_led+0x374>)
    f7ac:	781b      	ldrb	r3, [r3, #0]
    f7ae:	2b0a      	cmp	r3, #10
    f7b0:	d900      	bls.n	f7b4 <tc_callback_to_toggle_led+0x174>
		{
			while (1)
			{
				
			}
    f7b2:	e7fe      	b.n	f7b2 <tc_callback_to_toggle_led+0x172>
			downloadTimer = 0;
			downloadTime = TRUE; 
		}
		
#endif
		hundredMSec = 0;
    f7b4:	4b7b      	ldr	r3, [pc, #492]	; (f9a4 <tc_callback_to_toggle_led+0x364>)
    f7b6:	2200      	movs	r2, #0
    f7b8:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD	
		if (bluetoothHoldTimer100msec > 1)
    f7ba:	4b7f      	ldr	r3, [pc, #508]	; (f9b8 <tc_callback_to_toggle_led+0x378>)
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	2b01      	cmp	r3, #1
    f7c0:	d905      	bls.n	f7ce <tc_callback_to_toggle_led+0x18e>
		{
			bluetoothHoldTimer100msec--;
    f7c2:	4b7d      	ldr	r3, [pc, #500]	; (f9b8 <tc_callback_to_toggle_led+0x378>)
    f7c4:	781b      	ldrb	r3, [r3, #0]
    f7c6:	3b01      	subs	r3, #1
    f7c8:	b2da      	uxtb	r2, r3
    f7ca:	4b7b      	ldr	r3, [pc, #492]	; (f9b8 <tc_callback_to_toggle_led+0x378>)
    f7cc:	701a      	strb	r2, [r3, #0]
		}			
		if (voltageBadTime < VOLTAGE_BAD_TIME)
    f7ce:	4b7b      	ldr	r3, [pc, #492]	; (f9bc <tc_callback_to_toggle_led+0x37c>)
    f7d0:	881b      	ldrh	r3, [r3, #0]
    f7d2:	2b04      	cmp	r3, #4
    f7d4:	d805      	bhi.n	f7e2 <tc_callback_to_toggle_led+0x1a2>
		{
			voltageBadTime++;
    f7d6:	4b79      	ldr	r3, [pc, #484]	; (f9bc <tc_callback_to_toggle_led+0x37c>)
    f7d8:	881b      	ldrh	r3, [r3, #0]
    f7da:	3301      	adds	r3, #1
    f7dc:	b29a      	uxth	r2, r3
    f7de:	4b77      	ldr	r3, [pc, #476]	; (f9bc <tc_callback_to_toggle_led+0x37c>)
    f7e0:	801a      	strh	r2, [r3, #0]
		}
		if (needNewBaselineTimer >0)
    f7e2:	4b77      	ldr	r3, [pc, #476]	; (f9c0 <tc_callback_to_toggle_led+0x380>)
    f7e4:	881b      	ldrh	r3, [r3, #0]
    f7e6:	2b00      	cmp	r3, #0
    f7e8:	d009      	beq.n	f7fe <tc_callback_to_toggle_led+0x1be>
		{
			needNewBaselineTimer--;
    f7ea:	4b75      	ldr	r3, [pc, #468]	; (f9c0 <tc_callback_to_toggle_led+0x380>)
    f7ec:	881b      	ldrh	r3, [r3, #0]
    f7ee:	3b01      	subs	r3, #1
    f7f0:	b29a      	uxth	r2, r3
    f7f2:	4b73      	ldr	r3, [pc, #460]	; (f9c0 <tc_callback_to_toggle_led+0x380>)
    f7f4:	801a      	strh	r2, [r3, #0]
			needNewBaseline = 1; 
    f7f6:	4b73      	ldr	r3, [pc, #460]	; (f9c4 <tc_callback_to_toggle_led+0x384>)
    f7f8:	2201      	movs	r2, #1
    f7fa:	701a      	strb	r2, [r3, #0]
    f7fc:	e002      	b.n	f804 <tc_callback_to_toggle_led+0x1c4>
		}
		else
		{
			needNewBaseline = 0;
    f7fe:	4b71      	ldr	r3, [pc, #452]	; (f9c4 <tc_callback_to_toggle_led+0x384>)
    f800:	2200      	movs	r2, #0
    f802:	701a      	strb	r2, [r3, #0]
		}
#endif		
	}
	timerSecond++;
    f804:	4b70      	ldr	r3, [pc, #448]	; (f9c8 <tc_callback_to_toggle_led+0x388>)
    f806:	881b      	ldrh	r3, [r3, #0]
    f808:	3301      	adds	r3, #1
    f80a:	b29a      	uxth	r2, r3
    f80c:	4b6e      	ldr	r3, [pc, #440]	; (f9c8 <tc_callback_to_toggle_led+0x388>)
    f80e:	801a      	strh	r2, [r3, #0]
	if (timerSecond >= 1000)
    f810:	4b6d      	ldr	r3, [pc, #436]	; (f9c8 <tc_callback_to_toggle_led+0x388>)
    f812:	881a      	ldrh	r2, [r3, #0]
    f814:	4b62      	ldr	r3, [pc, #392]	; (f9a0 <tc_callback_to_toggle_led+0x360>)
    f816:	429a      	cmp	r2, r3
    f818:	d922      	bls.n	f860 <tc_callback_to_toggle_led+0x220>
	{
		timerSecond = 0;
    f81a:	4b6b      	ldr	r3, [pc, #428]	; (f9c8 <tc_callback_to_toggle_led+0x388>)
    f81c:	2200      	movs	r2, #0
    f81e:	801a      	strh	r2, [r3, #0]
		minute++;
    f820:	4b6a      	ldr	r3, [pc, #424]	; (f9cc <tc_callback_to_toggle_led+0x38c>)
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	3301      	adds	r3, #1
    f826:	b2da      	uxtb	r2, r3
    f828:	4b68      	ldr	r3, [pc, #416]	; (f9cc <tc_callback_to_toggle_led+0x38c>)
    f82a:	701a      	strb	r2, [r3, #0]
		if (minute >= 60)
    f82c:	4b67      	ldr	r3, [pc, #412]	; (f9cc <tc_callback_to_toggle_led+0x38c>)
    f82e:	781b      	ldrb	r3, [r3, #0]
    f830:	2b3b      	cmp	r3, #59	; 0x3b
    f832:	d902      	bls.n	f83a <tc_callback_to_toggle_led+0x1fa>
		{
			minute = 0;
    f834:	4b65      	ldr	r3, [pc, #404]	; (f9cc <tc_callback_to_toggle_led+0x38c>)
    f836:	2200      	movs	r2, #0
    f838:	701a      	strb	r2, [r3, #0]
		}
//		port_pin_toggle_output_level(BL_KEY_PIN);

		//-----------------one second timer 
		timerRF433++;
    f83a:	4b65      	ldr	r3, [pc, #404]	; (f9d0 <tc_callback_to_toggle_led+0x390>)
    f83c:	881b      	ldrh	r3, [r3, #0]
    f83e:	3301      	adds	r3, #1
    f840:	b29a      	uxth	r2, r3
    f842:	4b63      	ldr	r3, [pc, #396]	; (f9d0 <tc_callback_to_toggle_led+0x390>)
    f844:	801a      	strh	r2, [r3, #0]
		if (timerRF433>= 30)
    f846:	4b62      	ldr	r3, [pc, #392]	; (f9d0 <tc_callback_to_toggle_led+0x390>)
    f848:	881b      	ldrh	r3, [r3, #0]
    f84a:	2b1d      	cmp	r3, #29
    f84c:	d908      	bls.n	f860 <tc_callback_to_toggle_led+0x220>
		{
			timerRF433 = 0;
    f84e:	4b60      	ldr	r3, [pc, #384]	; (f9d0 <tc_callback_to_toggle_led+0x390>)
    f850:	2200      	movs	r2, #0
    f852:	801a      	strh	r2, [r3, #0]
			schedByte |= SCHEDBYTE_RF433;
    f854:	4b47      	ldr	r3, [pc, #284]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f856:	681b      	ldr	r3, [r3, #0]
    f858:	2210      	movs	r2, #16
    f85a:	431a      	orrs	r2, r3
    f85c:	4b45      	ldr	r3, [pc, #276]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f85e:	601a      	str	r2, [r3, #0]
		}

	}
	TickCounter++;
    f860:	4b5c      	ldr	r3, [pc, #368]	; (f9d4 <tc_callback_to_toggle_led+0x394>)
    f862:	681b      	ldr	r3, [r3, #0]
    f864:	1c5a      	adds	r2, r3, #1
    f866:	4b5b      	ldr	r3, [pc, #364]	; (f9d4 <tc_callback_to_toggle_led+0x394>)
    f868:	601a      	str	r2, [r3, #0]
	if (TickCounter > 20)
    f86a:	4b5a      	ldr	r3, [pc, #360]	; (f9d4 <tc_callback_to_toggle_led+0x394>)
    f86c:	681b      	ldr	r3, [r3, #0]
    f86e:	2b14      	cmp	r3, #20
    f870:	d908      	bls.n	f884 <tc_callback_to_toggle_led+0x244>
	{
		TickCounter = 0;
    f872:	4b58      	ldr	r3, [pc, #352]	; (f9d4 <tc_callback_to_toggle_led+0x394>)
    f874:	2200      	movs	r2, #0
    f876:	601a      	str	r2, [r3, #0]
		schedByte |= SCHEDBYTE_BUTTON;
    f878:	4b3e      	ldr	r3, [pc, #248]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f87a:	681b      	ldr	r3, [r3, #0]
    f87c:	2208      	movs	r2, #8
    f87e:	431a      	orrs	r2, r3
    f880:	4b3c      	ldr	r3, [pc, #240]	; (f974 <tc_callback_to_toggle_led+0x334>)
    f882:	601a      	str	r2, [r3, #0]
	}
	if (wdog >0)
    f884:	4b54      	ldr	r3, [pc, #336]	; (f9d8 <tc_callback_to_toggle_led+0x398>)
    f886:	881b      	ldrh	r3, [r3, #0]
    f888:	2b00      	cmp	r3, #0
    f88a:	d005      	beq.n	f898 <tc_callback_to_toggle_led+0x258>
	{
		wdog--;
    f88c:	4b52      	ldr	r3, [pc, #328]	; (f9d8 <tc_callback_to_toggle_led+0x398>)
    f88e:	881b      	ldrh	r3, [r3, #0]
    f890:	3b01      	subs	r3, #1
    f892:	b29a      	uxth	r2, r3
    f894:	4b50      	ldr	r3, [pc, #320]	; (f9d8 <tc_callback_to_toggle_led+0x398>)
    f896:	801a      	strh	r2, [r3, #0]
		schedByte |= SCHEDBYTE_COMMTOBRAKE;
	}	
#endif	

#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENFLICKER)
    f898:	4b50      	ldr	r3, [pc, #320]	; (f9dc <tc_callback_to_toggle_led+0x39c>)
    f89a:	781b      	ldrb	r3, [r3, #0]
    f89c:	2b01      	cmp	r3, #1
    f89e:	d123      	bne.n	f8e8 <tc_callback_to_toggle_led+0x2a8>
	{
		flickTimer++;
    f8a0:	4b4f      	ldr	r3, [pc, #316]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8a2:	881b      	ldrh	r3, [r3, #0]
    f8a4:	3301      	adds	r3, #1
    f8a6:	b29a      	uxth	r2, r3
    f8a8:	4b4d      	ldr	r3, [pc, #308]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8aa:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    f8ac:	4b4c      	ldr	r3, [pc, #304]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8ae:	881a      	ldrh	r2, [r3, #0]
    f8b0:	4b3b      	ldr	r3, [pc, #236]	; (f9a0 <tc_callback_to_toggle_led+0x360>)
    f8b2:	429a      	cmp	r2, r3
    f8b4:	d90b      	bls.n	f8ce <tc_callback_to_toggle_led+0x28e>
		{
			flickTimer = 0;
    f8b6:	4b4a      	ldr	r3, [pc, #296]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8b8:	2200      	movs	r2, #0
    f8ba:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    f8bc:	202e      	movs	r0, #46	; 0x2e
    f8be:	2100      	movs	r1, #0
    f8c0:	4b48      	ldr	r3, [pc, #288]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f8c2:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);			
    f8c4:	202f      	movs	r0, #47	; 0x2f
    f8c6:	2101      	movs	r1, #1
    f8c8:	4b46      	ldr	r3, [pc, #280]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f8ca:	4798      	blx	r3
    f8cc:	e00c      	b.n	f8e8 <tc_callback_to_toggle_led+0x2a8>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    f8ce:	4b44      	ldr	r3, [pc, #272]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8d0:	881a      	ldrh	r2, [r3, #0]
    f8d2:	4b45      	ldr	r3, [pc, #276]	; (f9e8 <tc_callback_to_toggle_led+0x3a8>)
    f8d4:	429a      	cmp	r2, r3
    f8d6:	d907      	bls.n	f8e8 <tc_callback_to_toggle_led+0x2a8>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    f8d8:	202e      	movs	r0, #46	; 0x2e
    f8da:	2101      	movs	r1, #1
    f8dc:	4b41      	ldr	r3, [pc, #260]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f8de:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    f8e0:	202f      	movs	r0, #47	; 0x2f
    f8e2:	2101      	movs	r1, #1
    f8e4:	4b3f      	ldr	r3, [pc, #252]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f8e6:	4798      	blx	r3
			}
		}
	}	
	if (brakeBiLED == BRAKEBILED_YELLOWFLICKER)
    f8e8:	4b3c      	ldr	r3, [pc, #240]	; (f9dc <tc_callback_to_toggle_led+0x39c>)
    f8ea:	781b      	ldrb	r3, [r3, #0]
    f8ec:	2b07      	cmp	r3, #7
    f8ee:	d123      	bne.n	f938 <tc_callback_to_toggle_led+0x2f8>
	{
		flickTimer++;
    f8f0:	4b3b      	ldr	r3, [pc, #236]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8f2:	881b      	ldrh	r3, [r3, #0]
    f8f4:	3301      	adds	r3, #1
    f8f6:	b29a      	uxth	r2, r3
    f8f8:	4b39      	ldr	r3, [pc, #228]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8fa:	801a      	strh	r2, [r3, #0]
		if (flickTimer >= FLICKERTIME)
    f8fc:	4b38      	ldr	r3, [pc, #224]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f8fe:	881a      	ldrh	r2, [r3, #0]
    f900:	4b27      	ldr	r3, [pc, #156]	; (f9a0 <tc_callback_to_toggle_led+0x360>)
    f902:	429a      	cmp	r2, r3
    f904:	d90b      	bls.n	f91e <tc_callback_to_toggle_led+0x2de>
		{
			flickTimer = 0;
    f906:	4b36      	ldr	r3, [pc, #216]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f908:	2200      	movs	r2, #0
    f90a:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    f90c:	202e      	movs	r0, #46	; 0x2e
    f90e:	2100      	movs	r1, #0
    f910:	4b34      	ldr	r3, [pc, #208]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f912:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, false);			
    f914:	202f      	movs	r0, #47	; 0x2f
    f916:	2100      	movs	r1, #0
    f918:	4b32      	ldr	r3, [pc, #200]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f91a:	4798      	blx	r3
    f91c:	e00c      	b.n	f938 <tc_callback_to_toggle_led+0x2f8>
		}
		else
		{
			if (flickTimer >= FLICKOFF)
    f91e:	4b30      	ldr	r3, [pc, #192]	; (f9e0 <tc_callback_to_toggle_led+0x3a0>)
    f920:	881a      	ldrh	r2, [r3, #0]
    f922:	4b31      	ldr	r3, [pc, #196]	; (f9e8 <tc_callback_to_toggle_led+0x3a8>)
    f924:	429a      	cmp	r2, r3
    f926:	d907      	bls.n	f938 <tc_callback_to_toggle_led+0x2f8>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    f928:	202e      	movs	r0, #46	; 0x2e
    f92a:	2101      	movs	r1, #1
    f92c:	4b2d      	ldr	r3, [pc, #180]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f92e:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);			
    f930:	202f      	movs	r0, #47	; 0x2f
    f932:	2101      	movs	r1, #1
    f934:	4b2b      	ldr	r3, [pc, #172]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f936:	4798      	blx	r3
			}
		}
	}		
#endif	
#if BRAKEBOARD
	if (brakeBiLED == BRAKEBILED_GREENSTROBE)
    f938:	4b28      	ldr	r3, [pc, #160]	; (f9dc <tc_callback_to_toggle_led+0x39c>)
    f93a:	781b      	ldrb	r3, [r3, #0]
    f93c:	2b05      	cmp	r3, #5
    f93e:	d165      	bne.n	fa0c <tc_callback_to_toggle_led+0x3cc>
	{
		strobeTimer++;
    f940:	4b2a      	ldr	r3, [pc, #168]	; (f9ec <tc_callback_to_toggle_led+0x3ac>)
    f942:	881b      	ldrh	r3, [r3, #0]
    f944:	3301      	adds	r3, #1
    f946:	b29a      	uxth	r2, r3
    f948:	4b28      	ldr	r3, [pc, #160]	; (f9ec <tc_callback_to_toggle_led+0x3ac>)
    f94a:	801a      	strh	r2, [r3, #0]
		if (strobeTimer >= STROBETIME)
    f94c:	4b27      	ldr	r3, [pc, #156]	; (f9ec <tc_callback_to_toggle_led+0x3ac>)
    f94e:	881a      	ldrh	r2, [r3, #0]
    f950:	4b27      	ldr	r3, [pc, #156]	; (f9f0 <tc_callback_to_toggle_led+0x3b0>)
    f952:	429a      	cmp	r2, r3
    f954:	d94e      	bls.n	f9f4 <tc_callback_to_toggle_led+0x3b4>
		{
			strobeTimer = 0;
    f956:	4b25      	ldr	r3, [pc, #148]	; (f9ec <tc_callback_to_toggle_led+0x3ac>)
    f958:	2200      	movs	r2, #0
    f95a:	801a      	strh	r2, [r3, #0]
			port_pin_set_output_level(LED_BIGREEN_PIN, false);
    f95c:	202e      	movs	r0, #46	; 0x2e
    f95e:	2100      	movs	r1, #0
    f960:	4b20      	ldr	r3, [pc, #128]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f962:	4798      	blx	r3
			port_pin_set_output_level(LED_BIRED_PIN, true);
    f964:	202f      	movs	r0, #47	; 0x2f
    f966:	2101      	movs	r1, #1
    f968:	4b1e      	ldr	r3, [pc, #120]	; (f9e4 <tc_callback_to_toggle_led+0x3a4>)
    f96a:	4798      	blx	r3
    f96c:	e04e      	b.n	fa0c <tc_callback_to_toggle_led+0x3cc>
    f96e:	46c0      	nop			; (mov r8, r8)
    f970:	00005b51 	.word	0x00005b51
    f974:	2000369c 	.word	0x2000369c
    f978:	20002ed6 	.word	0x20002ed6
    f97c:	200036c0 	.word	0x200036c0
    f980:	200036fc 	.word	0x200036fc
    f984:	200004b4 	.word	0x200004b4
    f988:	200036f9 	.word	0x200036f9
    f98c:	200036b7 	.word	0x200036b7
    f990:	20002eee 	.word	0x20002eee
    f994:	20002ef2 	.word	0x20002ef2
    f998:	200004b0 	.word	0x200004b0
    f99c:	20002ed4 	.word	0x20002ed4
    f9a0:	000003e7 	.word	0x000003e7
    f9a4:	200036f8 	.word	0x200036f8
    f9a8:	200036c4 	.word	0x200036c4
    f9ac:	20002ebf 	.word	0x20002ebf
    f9b0:	200004da 	.word	0x200004da
    f9b4:	200004db 	.word	0x200004db
    f9b8:	200004e2 	.word	0x200004e2
    f9bc:	20002ed8 	.word	0x20002ed8
    f9c0:	20000644 	.word	0x20000644
    f9c4:	20000000 	.word	0x20000000
    f9c8:	200036f6 	.word	0x200036f6
    f9cc:	200004e3 	.word	0x200004e3
    f9d0:	200004e0 	.word	0x200004e0
    f9d4:	200004dc 	.word	0x200004dc
    f9d8:	200036be 	.word	0x200036be
    f9dc:	20002ee8 	.word	0x20002ee8
    f9e0:	200036b2 	.word	0x200036b2
    f9e4:	0000e8d5 	.word	0x0000e8d5
    f9e8:	00000383 	.word	0x00000383
    f9ec:	200036c6 	.word	0x200036c6
    f9f0:	000007cf 	.word	0x000007cf
		}
		else
		{
			if (strobeTimer >= STROBEOFF)
    f9f4:	4b94      	ldr	r3, [pc, #592]	; (fc48 <tc_callback_to_toggle_led+0x608>)
    f9f6:	881b      	ldrh	r3, [r3, #0]
    f9f8:	2b63      	cmp	r3, #99	; 0x63
    f9fa:	d907      	bls.n	fa0c <tc_callback_to_toggle_led+0x3cc>
			{
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    f9fc:	202e      	movs	r0, #46	; 0x2e
    f9fe:	2101      	movs	r1, #1
    fa00:	4b92      	ldr	r3, [pc, #584]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa02:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    fa04:	202f      	movs	r0, #47	; 0x2f
    fa06:	2101      	movs	r1, #1
    fa08:	4b90      	ldr	r3, [pc, #576]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa0a:	4798      	blx	r3
			}
		}
	}
#endif
	blinkTimer++;
    fa0c:	4b90      	ldr	r3, [pc, #576]	; (fc50 <tc_callback_to_toggle_led+0x610>)
    fa0e:	881b      	ldrh	r3, [r3, #0]
    fa10:	3301      	adds	r3, #1
    fa12:	b29a      	uxth	r2, r3
    fa14:	4b8e      	ldr	r3, [pc, #568]	; (fc50 <tc_callback_to_toggle_led+0x610>)
    fa16:	801a      	strh	r2, [r3, #0]
	if (blinkTimer >= BLINKTIME)
    fa18:	4b8d      	ldr	r3, [pc, #564]	; (fc50 <tc_callback_to_toggle_led+0x610>)
    fa1a:	881b      	ldrh	r3, [r3, #0]
    fa1c:	2bf9      	cmp	r3, #249	; 0xf9
    fa1e:	d800      	bhi.n	fa22 <tc_callback_to_toggle_led+0x3e2>
    fa20:	e0d8      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
	{
		blinkTimer = 0;
    fa22:	4b8b      	ldr	r3, [pc, #556]	; (fc50 <tc_callback_to_toggle_led+0x610>)
    fa24:	2200      	movs	r2, #0
    fa26:	801a      	strh	r2, [r3, #0]
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
    fa28:	4b8a      	ldr	r3, [pc, #552]	; (fc54 <tc_callback_to_toggle_led+0x614>)
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	2b03      	cmp	r3, #3
    fa2e:	d003      	beq.n	fa38 <tc_callback_to_toggle_led+0x3f8>
    fa30:	4b88      	ldr	r3, [pc, #544]	; (fc54 <tc_callback_to_toggle_led+0x614>)
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	2b00      	cmp	r3, #0
    fa36:	d12c      	bne.n	fa92 <tc_callback_to_toggle_led+0x452>
		{
			if (ledBlue == 0)
    fa38:	4b87      	ldr	r3, [pc, #540]	; (fc58 <tc_callback_to_toggle_led+0x618>)
    fa3a:	781b      	ldrb	r3, [r3, #0]
    fa3c:	2b00      	cmp	r3, #0
    fa3e:	d118      	bne.n	fa72 <tc_callback_to_toggle_led+0x432>
			{
				ledBlue = 1; 
    fa40:	4b85      	ldr	r3, [pc, #532]	; (fc58 <tc_callback_to_toggle_led+0x618>)
    fa42:	2201      	movs	r2, #1
    fa44:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, true);
    fa46:	202c      	movs	r0, #44	; 0x2c
    fa48:	2101      	movs	r1, #1
    fa4a:	4b80      	ldr	r3, [pc, #512]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa4c:	4798      	blx	r3
				if (brakeBlueLED == BRAKEBLUELED_ALTGREEN)
    fa4e:	4b81      	ldr	r3, [pc, #516]	; (fc54 <tc_callback_to_toggle_led+0x614>)
    fa50:	781b      	ldrb	r3, [r3, #0]
    fa52:	2b03      	cmp	r3, #3
    fa54:	d104      	bne.n	fa60 <tc_callback_to_toggle_led+0x420>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fa56:	202e      	movs	r0, #46	; 0x2e
    fa58:	2100      	movs	r1, #0
    fa5a:	4b7c      	ldr	r3, [pc, #496]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa5c:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fa5e:	e0b9      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
				}
				else
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fa60:	202e      	movs	r0, #46	; 0x2e
    fa62:	2100      	movs	r1, #0
    fa64:	4b79      	ldr	r3, [pc, #484]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa66:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, false);
    fa68:	202f      	movs	r0, #47	; 0x2f
    fa6a:	2100      	movs	r1, #0
    fa6c:	4b77      	ldr	r3, [pc, #476]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa6e:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fa70:	e0b0      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
					port_pin_set_output_level(LED_BIRED_PIN, false);
				}
			}	
			else
			{
				ledBlue = 0;
    fa72:	4b79      	ldr	r3, [pc, #484]	; (fc58 <tc_callback_to_toggle_led+0x618>)
    fa74:	2200      	movs	r2, #0
    fa76:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_BLUE_PIN, false);
    fa78:	202c      	movs	r0, #44	; 0x2c
    fa7a:	2100      	movs	r1, #0
    fa7c:	4b73      	ldr	r3, [pc, #460]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa7e:	4798      	blx	r3
				port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fa80:	202e      	movs	r0, #46	; 0x2e
    fa82:	2101      	movs	r1, #1
    fa84:	4b71      	ldr	r3, [pc, #452]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa86:	4798      	blx	r3
				port_pin_set_output_level(LED_BIRED_PIN, true);
    fa88:	202f      	movs	r0, #47	; 0x2f
    fa8a:	2101      	movs	r1, #1
    fa8c:	4b6f      	ldr	r3, [pc, #444]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fa8e:	4798      	blx	r3
	{
		blinkTimer = 0;
#if BRAKEBOARD
		if ((brakeBlueLED == BRAKEBLUELED_ALTGREEN)||(brakeBlueLED == BRAKEBLUELED_ALTYELLOW))
		{
			if (ledBlue == 0)
    fa90:	e0a0      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
				port_pin_set_output_level(LED_BIRED_PIN, true);
			}
		}
		else
		{
			switch (brakeBiLED)
    fa92:	4b72      	ldr	r3, [pc, #456]	; (fc5c <tc_callback_to_toggle_led+0x61c>)
    fa94:	781b      	ldrb	r3, [r3, #0]
    fa96:	2b08      	cmp	r3, #8
    fa98:	d900      	bls.n	fa9c <tc_callback_to_toggle_led+0x45c>
    fa9a:	e07a      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
    fa9c:	009a      	lsls	r2, r3, #2
    fa9e:	4b70      	ldr	r3, [pc, #448]	; (fc60 <tc_callback_to_toggle_led+0x620>)
    faa0:	18d3      	adds	r3, r2, r3
    faa2:	681b      	ldr	r3, [r3, #0]
    faa4:	469f      	mov	pc, r3
			{
				case BRAKEBILED_REDFLASH:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    faa6:	202e      	movs	r0, #46	; 0x2e
    faa8:	2101      	movs	r1, #1
    faaa:	4b68      	ldr	r3, [pc, #416]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    faac:	4798      	blx	r3
					if (ledBiRed != 0)
    faae:	4b6d      	ldr	r3, [pc, #436]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fab0:	781b      	ldrb	r3, [r3, #0]
    fab2:	2b00      	cmp	r3, #0
    fab4:	d007      	beq.n	fac6 <tc_callback_to_toggle_led+0x486>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    fab6:	202f      	movs	r0, #47	; 0x2f
    fab8:	2100      	movs	r1, #0
    faba:	4b64      	ldr	r3, [pc, #400]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fabc:	4798      	blx	r3
						ledBiRed = 0;
    fabe:	4b69      	ldr	r3, [pc, #420]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fac0:	2200      	movs	r2, #0
    fac2:	701a      	strb	r2, [r3, #0]
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
						ledBiRed = 1;
					}	
					break;
    fac4:	e065      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
						port_pin_set_output_level(LED_BIRED_PIN, false);
						ledBiRed = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    fac6:	202f      	movs	r0, #47	; 0x2f
    fac8:	2101      	movs	r1, #1
    faca:	4b60      	ldr	r3, [pc, #384]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    facc:	4798      	blx	r3
						ledBiRed = 1;
    face:	4b65      	ldr	r3, [pc, #404]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fad0:	2201      	movs	r2, #1
    fad2:	701a      	strb	r2, [r3, #0]
					}	
					break;
    fad4:	e05d      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
				}
				case BRAKEBILED_YELLOWSOLID:
				{
		 			port_pin_set_output_level(LED_BIRED_PIN, false);
    fad6:	202f      	movs	r0, #47	; 0x2f
    fad8:	2100      	movs	r1, #0
    fada:	4b5c      	ldr	r3, [pc, #368]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fadc:	4798      	blx	r3
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fade:	202e      	movs	r0, #46	; 0x2e
    fae0:	2100      	movs	r1, #0
    fae2:	4b5a      	ldr	r3, [pc, #360]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fae4:	4798      	blx	r3
					ledBiRed = 0;
    fae6:	4b5f      	ldr	r3, [pc, #380]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fae8:	2200      	movs	r2, #0
    faea:	701a      	strb	r2, [r3, #0]
					ledBiGreen = 0;
    faec:	4b5e      	ldr	r3, [pc, #376]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    faee:	2200      	movs	r2, #0
    faf0:	701a      	strb	r2, [r3, #0]
					break;
    faf2:	e04e      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
				}	
				case BRAKEBILED_YELLOWFLASH:
				{
					if (ledBiRed != 0)
    faf4:	4b5b      	ldr	r3, [pc, #364]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    faf6:	781b      	ldrb	r3, [r3, #0]
    faf8:	2b00      	cmp	r3, #0
    fafa:	d00e      	beq.n	fb1a <tc_callback_to_toggle_led+0x4da>
					{
						port_pin_set_output_level(LED_BIRED_PIN, false);
    fafc:	202f      	movs	r0, #47	; 0x2f
    fafe:	2100      	movs	r1, #0
    fb00:	4b52      	ldr	r3, [pc, #328]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb02:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fb04:	202e      	movs	r0, #46	; 0x2e
    fb06:	2100      	movs	r1, #0
    fb08:	4b50      	ldr	r3, [pc, #320]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb0a:	4798      	blx	r3
						ledBiRed = 0;
    fb0c:	4b55      	ldr	r3, [pc, #340]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fb0e:	2200      	movs	r2, #0
    fb10:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 0;
    fb12:	4b55      	ldr	r3, [pc, #340]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    fb14:	2200      	movs	r2, #0
    fb16:	701a      	strb	r2, [r3, #0]
						port_pin_set_output_level(LED_BIRED_PIN, true);
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
						ledBiRed = 1;
						ledBiGreen = 1;
					}
					break;
    fb18:	e03b      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
						ledBiRed = 0;
						ledBiGreen = 0;
					}
					else
					{
						port_pin_set_output_level(LED_BIRED_PIN, true);
    fb1a:	202f      	movs	r0, #47	; 0x2f
    fb1c:	2101      	movs	r1, #1
    fb1e:	4b4b      	ldr	r3, [pc, #300]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb20:	4798      	blx	r3
						port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fb22:	202e      	movs	r0, #46	; 0x2e
    fb24:	2101      	movs	r1, #1
    fb26:	4b49      	ldr	r3, [pc, #292]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb28:	4798      	blx	r3
						ledBiRed = 1;
    fb2a:	4b4e      	ldr	r3, [pc, #312]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fb2c:	2201      	movs	r2, #1
    fb2e:	701a      	strb	r2, [r3, #0]
						ledBiGreen = 1;
    fb30:	4b4d      	ldr	r3, [pc, #308]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    fb32:	2201      	movs	r2, #1
    fb34:	701a      	strb	r2, [r3, #0]
					}
					break;
    fb36:	e02c      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
				}													
				case BRAKEBILED_OFF:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fb38:	202e      	movs	r0, #46	; 0x2e
    fb3a:	2101      	movs	r1, #1
    fb3c:	4b43      	ldr	r3, [pc, #268]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb3e:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    fb40:	202f      	movs	r0, #47	; 0x2f
    fb42:	2101      	movs	r1, #1
    fb44:	4b41      	ldr	r3, [pc, #260]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb46:	4798      	blx	r3
					ledBiGreen = 1;
    fb48:	4b47      	ldr	r3, [pc, #284]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    fb4a:	2201      	movs	r2, #1
    fb4c:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    fb4e:	4b45      	ldr	r3, [pc, #276]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fb50:	2201      	movs	r2, #1
    fb52:	701a      	strb	r2, [r3, #0]
					break;
    fb54:	e01d      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
				}		
				case BRAKEBILED_GREENSOLID:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, false);
    fb56:	202e      	movs	r0, #46	; 0x2e
    fb58:	2100      	movs	r1, #0
    fb5a:	4b3c      	ldr	r3, [pc, #240]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb5c:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, true);
    fb5e:	202f      	movs	r0, #47	; 0x2f
    fb60:	2101      	movs	r1, #1
    fb62:	4b3a      	ldr	r3, [pc, #232]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb64:	4798      	blx	r3
					ledBiGreen = 0;
    fb66:	4b40      	ldr	r3, [pc, #256]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    fb68:	2200      	movs	r2, #0
    fb6a:	701a      	strb	r2, [r3, #0]
					ledBiRed = 1;
    fb6c:	4b3d      	ldr	r3, [pc, #244]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fb6e:	2201      	movs	r2, #1
    fb70:	701a      	strb	r2, [r3, #0]
					break;
    fb72:	e00e      	b.n	fb92 <tc_callback_to_toggle_led+0x552>
				}		
				//------ boc V01_23 added red solid
				case BRAKEBILED_REDSOLID:
				{
					port_pin_set_output_level(LED_BIGREEN_PIN, true);
    fb74:	202e      	movs	r0, #46	; 0x2e
    fb76:	2101      	movs	r1, #1
    fb78:	4b34      	ldr	r3, [pc, #208]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb7a:	4798      	blx	r3
					port_pin_set_output_level(LED_BIRED_PIN, false);
    fb7c:	202f      	movs	r0, #47	; 0x2f
    fb7e:	2100      	movs	r1, #0
    fb80:	4b32      	ldr	r3, [pc, #200]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fb82:	4798      	blx	r3
					ledBiGreen = 1;
    fb84:	4b38      	ldr	r3, [pc, #224]	; (fc68 <tc_callback_to_toggle_led+0x628>)
    fb86:	2201      	movs	r2, #1
    fb88:	701a      	strb	r2, [r3, #0]
					ledBiRed = 0;
    fb8a:	4b36      	ldr	r3, [pc, #216]	; (fc64 <tc_callback_to_toggle_led+0x624>)
    fb8c:	2200      	movs	r2, #0
    fb8e:	701a      	strb	r2, [r3, #0]
					break;
    fb90:	46c0      	nop			; (mov r8, r8)
				}						
			}
			switch (brakeBlueLED)
    fb92:	4b30      	ldr	r3, [pc, #192]	; (fc54 <tc_callback_to_toggle_led+0x614>)
    fb94:	781b      	ldrb	r3, [r3, #0]
    fb96:	2b01      	cmp	r3, #1
    fb98:	d006      	beq.n	fba8 <tc_callback_to_toggle_led+0x568>
    fb9a:	2b02      	cmp	r3, #2
    fb9c:	d109      	bne.n	fbb2 <tc_callback_to_toggle_led+0x572>
			{
				case BRAKEBLUELED_OFF:
				{
					port_pin_set_output_level(LED_BLUE_PIN, true);
    fb9e:	202c      	movs	r0, #44	; 0x2c
    fba0:	2101      	movs	r1, #1
    fba2:	4b2a      	ldr	r3, [pc, #168]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fba4:	4798      	blx	r3
					break;
    fba6:	e004      	b.n	fbb2 <tc_callback_to_toggle_led+0x572>
				}
				case BRAKEBLUELED_SOLID:
				{
					port_pin_set_output_level(LED_BLUE_PIN, false);
    fba8:	202c      	movs	r0, #44	; 0x2c
    fbaa:	2100      	movs	r1, #0
    fbac:	4b27      	ldr	r3, [pc, #156]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fbae:	4798      	blx	r3
					break;
    fbb0:	46c0      	nop			; (mov r8, r8)
				}
			}	
			switch (brakeRedLED)
    fbb2:	4b2e      	ldr	r3, [pc, #184]	; (fc6c <tc_callback_to_toggle_led+0x62c>)
    fbb4:	781b      	ldrb	r3, [r3, #0]
    fbb6:	2b01      	cmp	r3, #1
    fbb8:	d002      	beq.n	fbc0 <tc_callback_to_toggle_led+0x580>
    fbba:	2b02      	cmp	r3, #2
    fbbc:	d005      	beq.n	fbca <tc_callback_to_toggle_led+0x58a>
    fbbe:	e009      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
			{
				case BRAKEREDLED_OFF:
				{
					port_pin_set_output_level(LED_RED_PIN, true);
    fbc0:	202d      	movs	r0, #45	; 0x2d
    fbc2:	2101      	movs	r1, #1
    fbc4:	4b21      	ldr	r3, [pc, #132]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fbc6:	4798      	blx	r3
					break;
    fbc8:	e004      	b.n	fbd4 <tc_callback_to_toggle_led+0x594>
				}
				case BRAKEREDLED_SOLID:
				{
					port_pin_set_output_level(LED_RED_PIN, false);
    fbca:	202d      	movs	r0, #45	; 0x2d
    fbcc:	2100      	movs	r1, #0
    fbce:	4b1f      	ldr	r3, [pc, #124]	; (fc4c <tc_callback_to_toggle_led+0x60c>)
    fbd0:	4798      	blx	r3
					break;
    fbd2:	46c0      	nop			; (mov r8, r8)
				}
			}			
		}
#endif	
	}
	if (adcTimer >0)
    fbd4:	4b26      	ldr	r3, [pc, #152]	; (fc70 <tc_callback_to_toggle_led+0x630>)
    fbd6:	881b      	ldrh	r3, [r3, #0]
    fbd8:	2b00      	cmp	r3, #0
    fbda:	d012      	beq.n	fc02 <tc_callback_to_toggle_led+0x5c2>
	{
		adcTimer--;
    fbdc:	4b24      	ldr	r3, [pc, #144]	; (fc70 <tc_callback_to_toggle_led+0x630>)
    fbde:	881b      	ldrh	r3, [r3, #0]
    fbe0:	3b01      	subs	r3, #1
    fbe2:	b29a      	uxth	r2, r3
    fbe4:	4b22      	ldr	r3, [pc, #136]	; (fc70 <tc_callback_to_toggle_led+0x630>)
    fbe6:	801a      	strh	r2, [r3, #0]
		if (adcTimer == 0)
    fbe8:	4b21      	ldr	r3, [pc, #132]	; (fc70 <tc_callback_to_toggle_led+0x630>)
    fbea:	881b      	ldrh	r3, [r3, #0]
    fbec:	2b00      	cmp	r3, #0
    fbee:	d108      	bne.n	fc02 <tc_callback_to_toggle_led+0x5c2>
		{
			adcTimeout = 1; 
    fbf0:	4b20      	ldr	r3, [pc, #128]	; (fc74 <tc_callback_to_toggle_led+0x634>)
    fbf2:	2201      	movs	r2, #1
    fbf4:	701a      	strb	r2, [r3, #0]
			schedByte |= SCHEDBYTE_ADC; 
    fbf6:	4b20      	ldr	r3, [pc, #128]	; (fc78 <tc_callback_to_toggle_led+0x638>)
    fbf8:	681b      	ldr	r3, [r3, #0]
    fbfa:	2220      	movs	r2, #32
    fbfc:	431a      	orrs	r2, r3
    fbfe:	4b1e      	ldr	r3, [pc, #120]	; (fc78 <tc_callback_to_toggle_led+0x638>)
    fc00:	601a      	str	r2, [r3, #0]
		}
	}
		if (commSupTimer>0)
    fc02:	4b1e      	ldr	r3, [pc, #120]	; (fc7c <tc_callback_to_toggle_led+0x63c>)
    fc04:	881b      	ldrh	r3, [r3, #0]
    fc06:	2b00      	cmp	r3, #0
    fc08:	d010      	beq.n	fc2c <tc_callback_to_toggle_led+0x5ec>
		{
			commSupTimer--;
    fc0a:	4b1c      	ldr	r3, [pc, #112]	; (fc7c <tc_callback_to_toggle_led+0x63c>)
    fc0c:	881b      	ldrh	r3, [r3, #0]
    fc0e:	3b01      	subs	r3, #1
    fc10:	b29a      	uxth	r2, r3
    fc12:	4b1a      	ldr	r3, [pc, #104]	; (fc7c <tc_callback_to_toggle_led+0x63c>)
    fc14:	801a      	strh	r2, [r3, #0]
			if (commSupTimer == 0)
    fc16:	4b19      	ldr	r3, [pc, #100]	; (fc7c <tc_callback_to_toggle_led+0x63c>)
    fc18:	881b      	ldrh	r3, [r3, #0]
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	d106      	bne.n	fc2c <tc_callback_to_toggle_led+0x5ec>
			{
				schedByte |= SCHEDBYTE_COMMSUP; 	
    fc1e:	4b16      	ldr	r3, [pc, #88]	; (fc78 <tc_callback_to_toggle_led+0x638>)
    fc20:	681b      	ldr	r3, [r3, #0]
    fc22:	2280      	movs	r2, #128	; 0x80
    fc24:	0192      	lsls	r2, r2, #6
    fc26:	431a      	orrs	r2, r3
    fc28:	4b13      	ldr	r3, [pc, #76]	; (fc78 <tc_callback_to_toggle_led+0x638>)
    fc2a:	601a      	str	r2, [r3, #0]
			}
		}	
#if BRAKEBOARD		
	if (motorRunTime >0)
    fc2c:	4b14      	ldr	r3, [pc, #80]	; (fc80 <tc_callback_to_toggle_led+0x640>)
    fc2e:	881b      	ldrh	r3, [r3, #0]
    fc30:	2b00      	cmp	r3, #0
    fc32:	d005      	beq.n	fc40 <tc_callback_to_toggle_led+0x600>
	{
		motorRunTime--;
    fc34:	4b12      	ldr	r3, [pc, #72]	; (fc80 <tc_callback_to_toggle_led+0x640>)
    fc36:	881b      	ldrh	r3, [r3, #0]
    fc38:	3b01      	subs	r3, #1
    fc3a:	b29a      	uxth	r2, r3
    fc3c:	4b10      	ldr	r3, [pc, #64]	; (fc80 <tc_callback_to_toggle_led+0x640>)
    fc3e:	801a      	strh	r2, [r3, #0]
	}		
#endif		
}
    fc40:	46bd      	mov	sp, r7
    fc42:	b002      	add	sp, #8
    fc44:	bd80      	pop	{r7, pc}
    fc46:	46c0      	nop			; (mov r8, r8)
    fc48:	200036c6 	.word	0x200036c6
    fc4c:	0000e8d5 	.word	0x0000e8d5
    fc50:	200036bc 	.word	0x200036bc
    fc54:	20002eb6 	.word	0x20002eb6
    fc58:	20003692 	.word	0x20003692
    fc5c:	20002ee8 	.word	0x20002ee8
    fc60:	00018440 	.word	0x00018440
    fc64:	200036fe 	.word	0x200036fe
    fc68:	200036a0 	.word	0x200036a0
    fc6c:	20002eb0 	.word	0x20002eb0
    fc70:	20003030 	.word	0x20003030
    fc74:	2000300c 	.word	0x2000300c
    fc78:	2000369c 	.word	0x2000369c
    fc7c:	200036ba 	.word	0x200036ba
    fc80:	20002eb2 	.word	0x20002eb2

0000fc84 <configure_tc>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc(void)
{
    fc84:	b580      	push	{r7, lr}
    fc86:	b08e      	sub	sp, #56	; 0x38
    fc88:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
 
	tc_get_config_defaults(&config_tc);
    fc8a:	1d3b      	adds	r3, r7, #4
    fc8c:	1c18      	adds	r0, r3, #0
    fc8e:	4b0f      	ldr	r3, [pc, #60]	; (fccc <configure_tc+0x48>)
    fc90:	4798      	blx	r3
 
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    fc92:	1d3b      	adds	r3, r7, #4
    fc94:	2204      	movs	r2, #4
    fc96:	709a      	strb	r2, [r3, #2]
	config_tc.clock_source = GCLK_GENERATOR_1;
    fc98:	1d3b      	adds	r3, r7, #4
    fc9a:	2201      	movs	r2, #1
    fc9c:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    fc9e:	1d3b      	adds	r3, r7, #4
    fca0:	22e0      	movs	r2, #224	; 0xe0
    fca2:	00d2      	lsls	r2, r2, #3
    fca4:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = 8;  //9;
    fca6:	1d3a      	adds	r2, r7, #4
    fca8:	2329      	movs	r3, #41	; 0x29
    fcaa:	2108      	movs	r1, #8
    fcac:	54d1      	strb	r1, [r2, r3]
//	config_tc.counter_16_bit.value = 200;
//	config_tc.counter_8_bit.compare_capture_channel[0] = 50;
//	config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	 
	tc_init(&tc_instance, TC3, &config_tc);
    fcae:	4908      	ldr	r1, [pc, #32]	; (fcd0 <configure_tc+0x4c>)
    fcb0:	4a08      	ldr	r2, [pc, #32]	; (fcd4 <configure_tc+0x50>)
    fcb2:	1d3b      	adds	r3, r7, #4
    fcb4:	1c08      	adds	r0, r1, #0
    fcb6:	1c11      	adds	r1, r2, #0
    fcb8:	1c1a      	adds	r2, r3, #0
    fcba:	4b07      	ldr	r3, [pc, #28]	; (fcd8 <configure_tc+0x54>)
    fcbc:	4798      	blx	r3
	tc_enable(&tc_instance);
    fcbe:	4b04      	ldr	r3, [pc, #16]	; (fcd0 <configure_tc+0x4c>)
    fcc0:	1c18      	adds	r0, r3, #0
    fcc2:	4b06      	ldr	r3, [pc, #24]	; (fcdc <configure_tc+0x58>)
    fcc4:	4798      	blx	r3
}
    fcc6:	46bd      	mov	sp, r7
    fcc8:	b00e      	add	sp, #56	; 0x38
    fcca:	bd80      	pop	{r7, pc}
    fccc:	0000e951 	.word	0x0000e951
    fcd0:	200036d8 	.word	0x200036d8
    fcd4:	42002c00 	.word	0x42002c00
    fcd8:	000052d1 	.word	0x000052d1
    fcdc:	0000e9d9 	.word	0x0000e9d9

0000fce0 <configure_tc_callbacks>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void configure_tc_callbacks(void)
{
    fce0:	b580      	push	{r7, lr}
    fce2:	af00      	add	r7, sp, #0
	tc_register_callback(&tc_instance, tc_callback_to_toggle_led,
    fce4:	4a06      	ldr	r2, [pc, #24]	; (fd00 <configure_tc_callbacks+0x20>)
    fce6:	4b07      	ldr	r3, [pc, #28]	; (fd04 <configure_tc_callbacks+0x24>)
    fce8:	1c10      	adds	r0, r2, #0
    fcea:	1c19      	adds	r1, r3, #0
    fcec:	2200      	movs	r2, #0
    fcee:	4b06      	ldr	r3, [pc, #24]	; (fd08 <configure_tc_callbacks+0x28>)
    fcf0:	4798      	blx	r3
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    fcf2:	4b03      	ldr	r3, [pc, #12]	; (fd00 <configure_tc_callbacks+0x20>)
    fcf4:	1c18      	adds	r0, r3, #0
    fcf6:	2100      	movs	r1, #0
    fcf8:	4b04      	ldr	r3, [pc, #16]	; (fd0c <configure_tc_callbacks+0x2c>)
    fcfa:	4798      	blx	r3
}
    fcfc:	46bd      	mov	sp, r7
    fcfe:	bd80      	pop	{r7, pc}
    fd00:	200036d8 	.word	0x200036d8
    fd04:	0000f641 	.word	0x0000f641
    fd08:	00005755 	.word	0x00005755
    fd0c:	0000ea31 	.word	0x0000ea31

0000fd10 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    fd10:	b580      	push	{r7, lr}
    fd12:	b082      	sub	sp, #8
    fd14:	af00      	add	r7, sp, #0
    fd16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fd18:	687b      	ldr	r3, [r7, #4]
    fd1a:	2200      	movs	r2, #0
    fd1c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	2200      	movs	r2, #0
    fd22:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fd24:	687b      	ldr	r3, [r7, #4]
    fd26:	2201      	movs	r2, #1
    fd28:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    fd2a:	687b      	ldr	r3, [r7, #4]
    fd2c:	2201      	movs	r2, #1
    fd2e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    fd30:	687b      	ldr	r3, [r7, #4]
    fd32:	2200      	movs	r2, #0
    fd34:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	2202      	movs	r2, #2
    fd3a:	72da      	strb	r2, [r3, #11]
}
    fd3c:	46bd      	mov	sp, r7
    fd3e:	b002      	add	sp, #8
    fd40:	bd80      	pop	{r7, pc}
    fd42:	46c0      	nop			; (mov r8, r8)

0000fd44 <SX1272FskInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272FskInit( void )
{
    fd44:	b580      	push	{r7, lr}
    fd46:	af00      	add	r7, sp, #0
    RFState = RF_STATE_IDLE;
    fd48:	4b77      	ldr	r3, [pc, #476]	; (ff28 <SX1272FskInit+0x1e4>)
    fd4a:	2200      	movs	r2, #0
    fd4c:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio 
	//------------------------
    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fd4e:	4b77      	ldr	r3, [pc, #476]	; (ff2c <SX1272FskInit+0x1e8>)
    fd50:	2001      	movs	r0, #1
    fd52:	1c19      	adds	r1, r3, #0
    fd54:	226f      	movs	r2, #111	; 0x6f
    fd56:	4b76      	ldr	r3, [pc, #472]	; (ff30 <SX1272FskInit+0x1ec>)
    fd58:	4798      	blx	r3
//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );	 
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
    fd5a:	4b74      	ldr	r3, [pc, #464]	; (ff2c <SX1272FskInit+0x1e8>)
    fd5c:	2001      	movs	r0, #1
    fd5e:	1c19      	adds	r1, r3, #0
    fd60:	226f      	movs	r2, #111	; 0x6f
    fd62:	4b73      	ldr	r3, [pc, #460]	; (ff30 <SX1272FskInit+0x1ec>)
    fd64:	4798      	blx	r3
	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
    fd66:	2000      	movs	r0, #0
    fd68:	4b72      	ldr	r3, [pc, #456]	; (ff34 <SX1272FskInit+0x1f0>)
    fd6a:	4798      	blx	r3
    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
    fd6c:	4b72      	ldr	r3, [pc, #456]	; (ff38 <SX1272FskInit+0x1f4>)
    fd6e:	681a      	ldr	r2, [r3, #0]
    fd70:	4b71      	ldr	r3, [pc, #452]	; (ff38 <SX1272FskInit+0x1f4>)
    fd72:	681b      	ldr	r3, [r3, #0]
    fd74:	7859      	ldrb	r1, [r3, #1]
    fd76:	237f      	movs	r3, #127	; 0x7f
    fd78:	400b      	ands	r3, r1
    fd7a:	b2db      	uxtb	r3, r3
    fd7c:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );    
    fd7e:	4b6e      	ldr	r3, [pc, #440]	; (ff38 <SX1272FskInit+0x1f4>)
    fd80:	681b      	ldr	r3, [r3, #0]
    fd82:	785b      	ldrb	r3, [r3, #1]
    fd84:	2001      	movs	r0, #1
    fd86:	1c19      	adds	r1, r3, #0
    fd88:	4b6c      	ldr	r3, [pc, #432]	; (ff3c <SX1272FskInit+0x1f8>)
    fd8a:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
    fd8c:	4b67      	ldr	r3, [pc, #412]	; (ff2c <SX1272FskInit+0x1e8>)
    fd8e:	2001      	movs	r0, #1
    fd90:	1c19      	adds	r1, r3, #0
    fd92:	226f      	movs	r2, #111	; 0x6f
    fd94:	4b66      	ldr	r3, [pc, #408]	; (ff30 <SX1272FskInit+0x1ec>)
    fd96:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register 
	// structure with the value of our setup
	//--------------------------------------
    SX1272->RegPaConfig = ( SX1272->RegPaConfig & ~RF_PACONFIG_PASELECT_PABOOST ) | RF_PACONFIG_PASELECT_PABOOST;
    fd98:	4b67      	ldr	r3, [pc, #412]	; (ff38 <SX1272FskInit+0x1f4>)
    fd9a:	681a      	ldr	r2, [r3, #0]
    fd9c:	4b66      	ldr	r3, [pc, #408]	; (ff38 <SX1272FskInit+0x1f4>)
    fd9e:	681b      	ldr	r3, [r3, #0]
    fda0:	7a5b      	ldrb	r3, [r3, #9]
    fda2:	2180      	movs	r1, #128	; 0x80
    fda4:	4249      	negs	r1, r1
    fda6:	430b      	orrs	r3, r1
    fda8:	b2db      	uxtb	r3, r3
    fdaa:	7253      	strb	r3, [r2, #9]
    SX1272->RegLna = RF_LNA_GAIN_G1 | RF_LNA_BOOST_ON;
    fdac:	4b62      	ldr	r3, [pc, #392]	; (ff38 <SX1272FskInit+0x1f4>)
    fdae:	681b      	ldr	r3, [r3, #0]
    fdb0:	2223      	movs	r2, #35	; 0x23
    fdb2:	731a      	strb	r2, [r3, #12]

    if( FskSettings.AfcOn == true )
    fdb4:	4b62      	ldr	r3, [pc, #392]	; (ff40 <SX1272FskInit+0x1fc>)
    fdb6:	7e5b      	ldrb	r3, [r3, #25]
    fdb8:	2b00      	cmp	r3, #0
    fdba:	d004      	beq.n	fdc6 <SX1272FskInit+0x82>
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_ON |
    fdbc:	4b5e      	ldr	r3, [pc, #376]	; (ff38 <SX1272FskInit+0x1f4>)
    fdbe:	681b      	ldr	r3, [r3, #0]
    fdc0:	221e      	movs	r2, #30
    fdc2:	735a      	strb	r2, [r3, #13]
    fdc4:	e003      	b.n	fdce <SX1272FskInit+0x8a>
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }
    else
    {
        SX1272->RegRxConfig = RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_OFF |
    fdc6:	4b5c      	ldr	r3, [pc, #368]	; (ff38 <SX1272FskInit+0x1f4>)
    fdc8:	681b      	ldr	r3, [r3, #0]
    fdca:	220e      	movs	r2, #14
    fdcc:	735a      	strb	r2, [r3, #13]
                              RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT;
    }

    SX1272->RegPreambleLsb = 8;
    fdce:	4b5a      	ldr	r3, [pc, #360]	; (ff38 <SX1272FskInit+0x1f4>)
    fdd0:	681a      	ldr	r2, [r3, #0]
    fdd2:	2326      	movs	r3, #38	; 0x26
    fdd4:	2108      	movs	r1, #8
    fdd6:	54d1      	strb	r1, [r2, r3]
    
    SX1272->RegPreambleDetect = RF_PREAMBLEDETECT_DETECTOR_ON | RF_PREAMBLEDETECT_DETECTORSIZE_2 |
    fdd8:	4b57      	ldr	r3, [pc, #348]	; (ff38 <SX1272FskInit+0x1f4>)
    fdda:	681b      	ldr	r3, [r3, #0]
    fddc:	22aa      	movs	r2, #170	; 0xaa
    fdde:	77da      	strb	r2, [r3, #31]
                                RF_PREAMBLEDETECT_DETECTORTOL_10;
    
    SX1272->RegRssiThresh = 0xFF;
    fde0:	4b55      	ldr	r3, [pc, #340]	; (ff38 <SX1272FskInit+0x1f4>)
    fde2:	681b      	ldr	r3, [r3, #0]
    fde4:	22ff      	movs	r2, #255	; 0xff
    fde6:	741a      	strb	r2, [r3, #16]

    SX1272->RegSyncConfig = RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON | RF_SYNCCONFIG_PREAMBLEPOLARITY_AA |
    fde8:	4b53      	ldr	r3, [pc, #332]	; (ff38 <SX1272FskInit+0x1f4>)
    fdea:	681a      	ldr	r2, [r3, #0]
    fdec:	2327      	movs	r3, #39	; 0x27
    fdee:	2193      	movs	r1, #147	; 0x93
    fdf0:	54d1      	strb	r1, [r2, r3]
                            RF_SYNCCONFIG_SYNC_ON | RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO |
                            RF_SYNCCONFIG_SYNCSIZE_4;

    SX1272->RegSyncValue1 = 0x69;
    fdf2:	4b51      	ldr	r3, [pc, #324]	; (ff38 <SX1272FskInit+0x1f4>)
    fdf4:	681a      	ldr	r2, [r3, #0]
    fdf6:	2328      	movs	r3, #40	; 0x28
    fdf8:	2169      	movs	r1, #105	; 0x69
    fdfa:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue2 = 0x81;
    fdfc:	4b4e      	ldr	r3, [pc, #312]	; (ff38 <SX1272FskInit+0x1f4>)
    fdfe:	681a      	ldr	r2, [r3, #0]
    fe00:	2329      	movs	r3, #41	; 0x29
    fe02:	2181      	movs	r1, #129	; 0x81
    fe04:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue3 = 0x7E;
    fe06:	4b4c      	ldr	r3, [pc, #304]	; (ff38 <SX1272FskInit+0x1f4>)
    fe08:	681a      	ldr	r2, [r3, #0]
    fe0a:	232a      	movs	r3, #42	; 0x2a
    fe0c:	217e      	movs	r1, #126	; 0x7e
    fe0e:	54d1      	strb	r1, [r2, r3]
    SX1272->RegSyncValue4 = 0x96;
    fe10:	4b49      	ldr	r3, [pc, #292]	; (ff38 <SX1272FskInit+0x1f4>)
    fe12:	681a      	ldr	r2, [r3, #0]
    fe14:	232b      	movs	r3, #43	; 0x2b
    fe16:	2196      	movs	r1, #150	; 0x96
    fe18:	54d1      	strb	r1, [r2, r3]

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    fe1a:	4b47      	ldr	r3, [pc, #284]	; (ff38 <SX1272FskInit+0x1f4>)
    fe1c:	681a      	ldr	r2, [r3, #0]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
    fe1e:	4b48      	ldr	r3, [pc, #288]	; (ff40 <SX1272FskInit+0x1fc>)
    fe20:	7e1b      	ldrb	r3, [r3, #24]
    fe22:	011b      	lsls	r3, r3, #4
    SX1272->RegSyncValue1 = 0x69;
    SX1272->RegSyncValue2 = 0x81;
    SX1272->RegSyncValue3 = 0x7E;
    SX1272->RegSyncValue4 = 0x96;

    SX1272->RegPacketConfig1 = RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RF_PACKETCONFIG1_DCFREE_OFF |
    fe24:	b2db      	uxtb	r3, r3
    fe26:	2180      	movs	r1, #128	; 0x80
    fe28:	4249      	negs	r1, r1
    fe2a:	430b      	orrs	r3, r1
    fe2c:	b2db      	uxtb	r3, r3
    fe2e:	b2d9      	uxtb	r1, r3
    fe30:	2330      	movs	r3, #48	; 0x30
    fe32:	54d1      	strb	r1, [r2, r3]
                               ( FskSettings.CrcOn << 4 ) | RF_PACKETCONFIG1_CRCAUTOCLEAR_ON |
                               RF_PACKETCONFIG1_ADDRSFILTERING_OFF | RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT;
    SX1272FskGetPacketCrcOn( ); 
    fe34:	4b43      	ldr	r3, [pc, #268]	; (ff44 <SX1272FskInit+0x200>)
    fe36:	4798      	blx	r3

    SX1272->RegPayloadLength = FskSettings.PayloadLength;
    fe38:	4b3f      	ldr	r3, [pc, #252]	; (ff38 <SX1272FskInit+0x1f4>)
    fe3a:	681a      	ldr	r2, [r3, #0]
    fe3c:	4b40      	ldr	r3, [pc, #256]	; (ff40 <SX1272FskInit+0x1fc>)
    fe3e:	7e99      	ldrb	r1, [r3, #26]
    fe40:	2332      	movs	r3, #50	; 0x32
    fe42:	54d1      	strb	r1, [r2, r3]
	//------------------------------------------------------
    // we can now update the registers with our configuration
    SX1272WriteBuffer( REG_OPMODE, SX1272Regs + 1, 0x70 - 1 );
    fe44:	4b39      	ldr	r3, [pc, #228]	; (ff2c <SX1272FskInit+0x1e8>)
    fe46:	2001      	movs	r0, #1
    fe48:	1c19      	adds	r1, r3, #0
    fe4a:	226f      	movs	r2, #111	; 0x6f
    fe4c:	4b3e      	ldr	r3, [pc, #248]	; (ff48 <SX1272FskInit+0x204>)
    fe4e:	4798      	blx	r3
	//-------------------------------------
    // then we need to set the RF settings 
    SX1272FskSetRFFrequency( FskSettings.RFFrequency );
    fe50:	4b3b      	ldr	r3, [pc, #236]	; (ff40 <SX1272FskInit+0x1fc>)
    fe52:	681b      	ldr	r3, [r3, #0]
    fe54:	1c18      	adds	r0, r3, #0
    fe56:	4b3d      	ldr	r3, [pc, #244]	; (ff4c <SX1272FskInit+0x208>)
    fe58:	4798      	blx	r3
    SX1272FskSetBitrate( FskSettings.Bitrate );
    fe5a:	4b39      	ldr	r3, [pc, #228]	; (ff40 <SX1272FskInit+0x1fc>)
    fe5c:	685b      	ldr	r3, [r3, #4]
    fe5e:	1c18      	adds	r0, r3, #0
    fe60:	4b3b      	ldr	r3, [pc, #236]	; (ff50 <SX1272FskInit+0x20c>)
    fe62:	4798      	blx	r3
    SX1272FskSetFdev( FskSettings.Fdev );
    fe64:	4b36      	ldr	r3, [pc, #216]	; (ff40 <SX1272FskInit+0x1fc>)
    fe66:	689b      	ldr	r3, [r3, #8]
    fe68:	1c18      	adds	r0, r3, #0
    fe6a:	4b3a      	ldr	r3, [pc, #232]	; (ff54 <SX1272FskInit+0x210>)
    fe6c:	4798      	blx	r3
    SX1272FskSetPa20dBm( true );
    fe6e:	2001      	movs	r0, #1
    fe70:	4b39      	ldr	r3, [pc, #228]	; (ff58 <SX1272FskInit+0x214>)
    fe72:	4798      	blx	r3
    SX1272FskSetRFPower( FskSettings.Power );
    fe74:	4b32      	ldr	r3, [pc, #200]	; (ff40 <SX1272FskInit+0x1fc>)
    fe76:	7b1b      	ldrb	r3, [r3, #12]
    fe78:	b25b      	sxtb	r3, r3
    fe7a:	1c18      	adds	r0, r3, #0
    fe7c:	4b37      	ldr	r3, [pc, #220]	; (ff5c <SX1272FskInit+0x218>)
    fe7e:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegRxBw, 0, FskSettings.RxBw );
    fe80:	4b2d      	ldr	r3, [pc, #180]	; (ff38 <SX1272FskInit+0x1f4>)
    fe82:	681b      	ldr	r3, [r3, #0]
    fe84:	1c1a      	adds	r2, r3, #0
    fe86:	3212      	adds	r2, #18
    fe88:	4b2d      	ldr	r3, [pc, #180]	; (ff40 <SX1272FskInit+0x1fc>)
    fe8a:	691b      	ldr	r3, [r3, #16]
    fe8c:	1c10      	adds	r0, r2, #0
    fe8e:	2100      	movs	r1, #0
    fe90:	1c1a      	adds	r2, r3, #0
    fe92:	4b33      	ldr	r3, [pc, #204]	; (ff60 <SX1272FskInit+0x21c>)
    fe94:	4798      	blx	r3
    SX1272FskSetDccBw( &SX1272->RegAfcBw, 0, FskSettings.RxBwAfc );
    fe96:	4b28      	ldr	r3, [pc, #160]	; (ff38 <SX1272FskInit+0x1f4>)
    fe98:	681b      	ldr	r3, [r3, #0]
    fe9a:	1c1a      	adds	r2, r3, #0
    fe9c:	3213      	adds	r2, #19
    fe9e:	4b28      	ldr	r3, [pc, #160]	; (ff40 <SX1272FskInit+0x1fc>)
    fea0:	695b      	ldr	r3, [r3, #20]
    fea2:	1c10      	adds	r0, r2, #0
    fea4:	2100      	movs	r1, #0
    fea6:	1c1a      	adds	r2, r3, #0
    fea8:	4b2d      	ldr	r3, [pc, #180]	; (ff60 <SX1272FskInit+0x21c>)
    feaa:	4798      	blx	r3
    SX1272FskSetRssiOffset( -6 );
    feac:	2306      	movs	r3, #6
    feae:	425b      	negs	r3, r3
    feb0:	1c18      	adds	r0, r3, #0
    feb2:	4b2c      	ldr	r3, [pc, #176]	; (ff64 <SX1272FskInit+0x220>)
    feb4:	4798      	blx	r3
	SX1272->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | 0x18; // 24 bytes of data
    feb6:	4b20      	ldr	r3, [pc, #128]	; (ff38 <SX1272FskInit+0x1f4>)
    feb8:	681a      	ldr	r2, [r3, #0]
    feba:	2335      	movs	r3, #53	; 0x35
    febc:	2198      	movs	r1, #152	; 0x98
    febe:	54d1      	strb	r1, [r2, r3]
	SX1272Write( REG_FIFOTHRESH, SX1272->RegFifoThresh );	
    fec0:	4b1d      	ldr	r3, [pc, #116]	; (ff38 <SX1272FskInit+0x1f4>)
    fec2:	681a      	ldr	r2, [r3, #0]
    fec4:	2335      	movs	r3, #53	; 0x35
    fec6:	5cd3      	ldrb	r3, [r2, r3]
    fec8:	2035      	movs	r0, #53	; 0x35
    feca:	1c19      	adds	r1, r3, #0
    fecc:	4b1b      	ldr	r3, [pc, #108]	; (ff3c <SX1272FskInit+0x1f8>)
    fece:	4798      	blx	r3

	if (setCW != 0)
    fed0:	4b25      	ldr	r3, [pc, #148]	; (ff68 <SX1272FskInit+0x224>)
    fed2:	781b      	ldrb	r3, [r3, #0]
    fed4:	2b00      	cmp	r3, #0
    fed6:	d002      	beq.n	fede <SX1272FskInit+0x19a>
	{
		SX1272FskSetPacketConfig2(1);  //if non-zero, continuous
    fed8:	2001      	movs	r0, #1
    feda:	4b24      	ldr	r3, [pc, #144]	; (ff6c <SX1272FskInit+0x228>)
    fedc:	4798      	blx	r3
	}

	SX1272FskSetOpMode( RF_OPMODE_STANDBY );
    fede:	2001      	movs	r0, #1
    fee0:	4b14      	ldr	r3, [pc, #80]	; (ff34 <SX1272FskInit+0x1f0>)
    fee2:	4798      	blx	r3
	SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );	
    fee4:	4b11      	ldr	r3, [pc, #68]	; (ff2c <SX1272FskInit+0x1e8>)
    fee6:	2001      	movs	r0, #1
    fee8:	1c19      	adds	r1, r3, #0
    feea:	226f      	movs	r2, #111	; 0x6f
    feec:	4b10      	ldr	r3, [pc, #64]	; (ff30 <SX1272FskInit+0x1ec>)
    feee:	4798      	blx	r3

 
	
	if (setCW != 0)
    fef0:	4b1d      	ldr	r3, [pc, #116]	; (ff68 <SX1272FskInit+0x224>)
    fef2:	781b      	ldrb	r3, [r3, #0]
    fef4:	2b00      	cmp	r3, #0
    fef6:	d014      	beq.n	ff22 <SX1272FskInit+0x1de>
	{
//		SX1272FskSetOpMode(RF_OPMODE_TRANSMITTER);
	//------------------
	// turn on transmitter
		SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
    fef8:	4b0f      	ldr	r3, [pc, #60]	; (ff38 <SX1272FskInit+0x1f4>)
    fefa:	681a      	ldr	r2, [r3, #0]
    fefc:	4b0e      	ldr	r3, [pc, #56]	; (ff38 <SX1272FskInit+0x1f4>)
    fefe:	681b      	ldr	r3, [r3, #0]
    ff00:	785b      	ldrb	r3, [r3, #1]
    ff02:	b2db      	uxtb	r3, r3
    ff04:	2107      	movs	r1, #7
    ff06:	438b      	bics	r3, r1
    ff08:	b2db      	uxtb	r3, r3
    ff0a:	2103      	movs	r1, #3
    ff0c:	430b      	orrs	r3, r1
    ff0e:	b2db      	uxtb	r3, r3
    ff10:	b2db      	uxtb	r3, r3
    ff12:	7053      	strb	r3, [r2, #1]
		SX1272Write( REG_OPMODE, SX1272->RegOpMode );    		
    ff14:	4b08      	ldr	r3, [pc, #32]	; (ff38 <SX1272FskInit+0x1f4>)
    ff16:	681b      	ldr	r3, [r3, #0]
    ff18:	785b      	ldrb	r3, [r3, #1]
    ff1a:	2001      	movs	r0, #1
    ff1c:	1c19      	adds	r1, r3, #0
    ff1e:	4b07      	ldr	r3, [pc, #28]	; (ff3c <SX1272FskInit+0x1f8>)
    ff20:	4798      	blx	r3
	} 
}
    ff22:	46bd      	mov	sp, r7
    ff24:	bd80      	pop	{r7, pc}
    ff26:	46c0      	nop			; (mov r8, r8)
    ff28:	200004e4 	.word	0x200004e4
    ff2c:	20003909 	.word	0x20003909
    ff30:	000119f5 	.word	0x000119f5
    ff34:	0000ff71 	.word	0x0000ff71
    ff38:	20003700 	.word	0x20003700
    ff3c:	0001194d 	.word	0x0001194d
    ff40:	2000000c 	.word	0x2000000c
    ff44:	000109d5 	.word	0x000109d5
    ff48:	000119bd 	.word	0x000119bd
    ff4c:	00010459 	.word	0x00010459
    ff50:	000104e9 	.word	0x000104e9
    ff54:	00010571 	.word	0x00010571
    ff58:	00010a19 	.word	0x00010a19
    ff5c:	000105f9 	.word	0x000105f9
    ff60:	000108c1 	.word	0x000108c1
    ff64:	00010a75 	.word	0x00010a75
    ff68:	20003690 	.word	0x20003690
    ff6c:	0001041d 	.word	0x0001041d

0000ff70 <SX1272FskSetOpMode>:

void SX1272FskSetOpMode( uint8_t opMode )
{
    ff70:	b580      	push	{r7, lr}
    ff72:	b082      	sub	sp, #8
    ff74:	af00      	add	r7, sp, #0
    ff76:	1c02      	adds	r2, r0, #0
    ff78:	1dfb      	adds	r3, r7, #7
    ff7a:	701a      	strb	r2, [r3, #0]
  
        SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | opMode;
    ff7c:	4b0c      	ldr	r3, [pc, #48]	; (ffb0 <SX1272FskSetOpMode+0x40>)
    ff7e:	681a      	ldr	r2, [r3, #0]
    ff80:	4b0b      	ldr	r3, [pc, #44]	; (ffb0 <SX1272FskSetOpMode+0x40>)
    ff82:	681b      	ldr	r3, [r3, #0]
    ff84:	785b      	ldrb	r3, [r3, #1]
    ff86:	b2db      	uxtb	r3, r3
    ff88:	2107      	movs	r1, #7
    ff8a:	438b      	bics	r3, r1
    ff8c:	b2d9      	uxtb	r1, r3
    ff8e:	1dfb      	adds	r3, r7, #7
    ff90:	781b      	ldrb	r3, [r3, #0]
    ff92:	430b      	orrs	r3, r1
    ff94:	b2db      	uxtb	r3, r3
    ff96:	b2db      	uxtb	r3, r3
    ff98:	7053      	strb	r3, [r2, #1]

        SX1272Write( REG_OPMODE, SX1272->RegOpMode );        
    ff9a:	4b05      	ldr	r3, [pc, #20]	; (ffb0 <SX1272FskSetOpMode+0x40>)
    ff9c:	681b      	ldr	r3, [r3, #0]
    ff9e:	785b      	ldrb	r3, [r3, #1]
    ffa0:	2001      	movs	r0, #1
    ffa2:	1c19      	adds	r1, r3, #0
    ffa4:	4b03      	ldr	r3, [pc, #12]	; (ffb4 <SX1272FskSetOpMode+0x44>)
    ffa6:	4798      	blx	r3
}
    ffa8:	46bd      	mov	sp, r7
    ffaa:	b002      	add	sp, #8
    ffac:	bd80      	pop	{r7, pc}
    ffae:	46c0      	nop			; (mov r8, r8)
    ffb0:	20003700 	.word	0x20003700
    ffb4:	0001194d 	.word	0x0001194d

0000ffb8 <configure_extintFSK_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_channel(void)
{
    ffb8:	b580      	push	{r7, lr}
    ffba:	b084      	sub	sp, #16
    ffbc:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    ffbe:	1d3b      	adds	r3, r7, #4
    ffc0:	1c18      	adds	r0, r3, #0
    ffc2:	4b0b      	ldr	r3, [pc, #44]	; (fff0 <configure_extintFSK_channel+0x38>)
    ffc4:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
    ffc6:	1d3b      	adds	r3, r7, #4
    ffc8:	2229      	movs	r2, #41	; 0x29
    ffca:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
    ffcc:	1d3b      	adds	r3, r7, #4
    ffce:	2200      	movs	r2, #0
    ffd0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    ffd2:	1d3b      	adds	r3, r7, #4
    ffd4:	2201      	movs	r2, #1
    ffd6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
    ffd8:	1d3b      	adds	r3, r7, #4
    ffda:	2201      	movs	r2, #1
    ffdc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
    ffde:	1d3b      	adds	r3, r7, #4
    ffe0:	2009      	movs	r0, #9
    ffe2:	1c19      	adds	r1, r3, #0
    ffe4:	4b03      	ldr	r3, [pc, #12]	; (fff4 <configure_extintFSK_channel+0x3c>)
    ffe6:	4798      	blx	r3
}
    ffe8:	46bd      	mov	sp, r7
    ffea:	b004      	add	sp, #16
    ffec:	bd80      	pop	{r7, pc}
    ffee:	46c0      	nop			; (mov r8, r8)
    fff0:	0000fd11 	.word	0x0000fd11
    fff4:	0000406d 	.word	0x0000406d

0000fff8 <configure_extintFSK_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintFSK_callbacks(void)
{
    fff8:	b580      	push	{r7, lr}
    fffa:	af00      	add	r7, sp, #0
	extint_register_callback(extintFSK_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
    fffc:	4b05      	ldr	r3, [pc, #20]	; (10014 <configure_extintFSK_callbacks+0x1c>)
    fffe:	1c18      	adds	r0, r3, #0
   10000:	2109      	movs	r1, #9
   10002:	2200      	movs	r2, #0
   10004:	4b04      	ldr	r3, [pc, #16]	; (10018 <configure_extintFSK_callbacks+0x20>)
   10006:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   10008:	2009      	movs	r0, #9
   1000a:	2100      	movs	r1, #0
   1000c:	4b03      	ldr	r3, [pc, #12]	; (1001c <configure_extintFSK_callbacks+0x24>)
   1000e:	4798      	blx	r3
}
   10010:	46bd      	mov	sp, r7
   10012:	bd80      	pop	{r7, pc}
   10014:	00010021 	.word	0x00010021
   10018:	00004239 	.word	0x00004239
   1001c:	00004295 	.word	0x00004295

00010020 <extintFSK_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintFSK_detection_callback(void)
{
   10020:	b580      	push	{r7, lr}
   10022:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFFSK;
   10024:	4b07      	ldr	r3, [pc, #28]	; (10044 <extintFSK_detection_callback+0x24>)
   10026:	681b      	ldr	r3, [r3, #0]
   10028:	2280      	movs	r2, #128	; 0x80
   1002a:	0092      	lsls	r2, r2, #2
   1002c:	431a      	orrs	r2, r3
   1002e:	4b05      	ldr	r3, [pc, #20]	; (10044 <extintFSK_detection_callback+0x24>)
   10030:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFLORA;
   10032:	4b04      	ldr	r3, [pc, #16]	; (10044 <extintFSK_detection_callback+0x24>)
   10034:	681b      	ldr	r3, [r3, #0]
   10036:	2280      	movs	r2, #128	; 0x80
   10038:	00d2      	lsls	r2, r2, #3
   1003a:	431a      	orrs	r2, r3
   1003c:	4b01      	ldr	r3, [pc, #4]	; (10044 <extintFSK_detection_callback+0x24>)
   1003e:	601a      	str	r2, [r3, #0]
}
   10040:	46bd      	mov	sp, r7
   10042:	bd80      	pop	{r7, pc}
   10044:	2000369c 	.word	0x2000369c

00010048 <AppFskTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskTask(void)
{
   10048:	b580      	push	{r7, lr}
   1004a:	af00      	add	r7, sp, #0
	if ((setCW == 0)&&(whichRadio == WHICHRADIO_FSK))
   1004c:	4b47      	ldr	r3, [pc, #284]	; (1016c <AppFskTask+0x124>)
   1004e:	781b      	ldrb	r3, [r3, #0]
   10050:	2b00      	cmp	r3, #0
   10052:	d000      	beq.n	10056 <AppFskTask+0xe>
   10054:	e087      	b.n	10166 <AppFskTask+0x11e>
   10056:	4b46      	ldr	r3, [pc, #280]	; (10170 <AppFskTask+0x128>)
   10058:	781b      	ldrb	r3, [r3, #0]
   1005a:	2b88      	cmp	r3, #136	; 0x88
   1005c:	d000      	beq.n	10060 <AppFskTask+0x18>
   1005e:	e082      	b.n	10166 <AppFskTask+0x11e>
	{	 
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   10060:	4b44      	ldr	r3, [pc, #272]	; (10174 <AppFskTask+0x12c>)
   10062:	681b      	ldr	r3, [r3, #0]
   10064:	333e      	adds	r3, #62	; 0x3e
   10066:	203e      	movs	r0, #62	; 0x3e
   10068:	1c19      	adds	r1, r3, #0
   1006a:	4b43      	ldr	r3, [pc, #268]	; (10178 <AppFskTask+0x130>)
   1006c:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
   1006e:	4b41      	ldr	r3, [pc, #260]	; (10174 <AppFskTask+0x12c>)
   10070:	681b      	ldr	r3, [r3, #0]
   10072:	333f      	adds	r3, #63	; 0x3f
   10074:	203f      	movs	r0, #63	; 0x3f
   10076:	1c19      	adds	r1, r3, #0
   10078:	4b3f      	ldr	r3, [pc, #252]	; (10178 <AppFskTask+0x130>)
   1007a:	4798      	blx	r3
	//----------------------------
	/// see if payload ready for a receive event 
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x04)!= 0) // PayloadReady/CrcOk
   1007c:	4b3d      	ldr	r3, [pc, #244]	; (10174 <AppFskTask+0x12c>)
   1007e:	681a      	ldr	r2, [r3, #0]
   10080:	233f      	movs	r3, #63	; 0x3f
   10082:	5cd3      	ldrb	r3, [r2, r3]
   10084:	1c1a      	adds	r2, r3, #0
   10086:	2304      	movs	r3, #4
   10088:	4013      	ands	r3, r2
   1008a:	d054      	beq.n	10136 <AppFskTask+0xee>
	{
		fskReceiveCount++;
   1008c:	4b3b      	ldr	r3, [pc, #236]	; (1017c <AppFskTask+0x134>)
   1008e:	881b      	ldrh	r3, [r3, #0]
   10090:	3301      	adds	r3, #1
   10092:	b29a      	uxth	r2, r3
   10094:	4b39      	ldr	r3, [pc, #228]	; (1017c <AppFskTask+0x134>)
   10096:	801a      	strh	r2, [r3, #0]
		SX1272ReadFifo(RFBuffer,1);
   10098:	4b39      	ldr	r3, [pc, #228]	; (10180 <AppFskTask+0x138>)
   1009a:	1c18      	adds	r0, r3, #0
   1009c:	2101      	movs	r1, #1
   1009e:	4b39      	ldr	r3, [pc, #228]	; (10184 <AppFskTask+0x13c>)
   100a0:	4798      	blx	r3
		RxPacketSize = RFBuffer[0];				
   100a2:	4b37      	ldr	r3, [pc, #220]	; (10180 <AppFskTask+0x138>)
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	1c1a      	adds	r2, r3, #0
   100a8:	4b37      	ldr	r3, [pc, #220]	; (10188 <AppFskTask+0x140>)
   100aa:	801a      	strh	r2, [r3, #0]
//				RxPacketSize = SX1272->RegPayloadLength;	 
		SX1272ReadFifo(RFBuffer+1, RxPacketSize+1 );
   100ac:	4b36      	ldr	r3, [pc, #216]	; (10188 <AppFskTask+0x140>)
   100ae:	881b      	ldrh	r3, [r3, #0]
   100b0:	3301      	adds	r3, #1
   100b2:	b29b      	uxth	r3, r3
   100b4:	4a35      	ldr	r2, [pc, #212]	; (1018c <AppFskTask+0x144>)
   100b6:	1c10      	adds	r0, r2, #0
   100b8:	1c19      	adds	r1, r3, #0
   100ba:	4b32      	ldr	r3, [pc, #200]	; (10184 <AppFskTask+0x13c>)
   100bc:	4798      	blx	r3
				done = 1; 
			}
			i++;					
		}
*/		
		if (testRFBufferOffset >= MAXPACKETS2)
   100be:	4b34      	ldr	r3, [pc, #208]	; (10190 <AppFskTask+0x148>)
   100c0:	781b      	ldrb	r3, [r3, #0]
   100c2:	2b03      	cmp	r3, #3
   100c4:	d902      	bls.n	100cc <AppFskTask+0x84>
		{
			testRFBufferOffset = 0; 
   100c6:	4b32      	ldr	r3, [pc, #200]	; (10190 <AppFskTask+0x148>)
   100c8:	2200      	movs	r2, #0
   100ca:	701a      	strb	r2, [r3, #0]
		}
		testRFBuffer[testRFBufferOffset].Length = RFBuffer[0];
   100cc:	4b30      	ldr	r3, [pc, #192]	; (10190 <AppFskTask+0x148>)
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	1c1a      	adds	r2, r3, #0
   100d2:	4b2b      	ldr	r3, [pc, #172]	; (10180 <AppFskTask+0x138>)
   100d4:	7818      	ldrb	r0, [r3, #0]
   100d6:	492f      	ldr	r1, [pc, #188]	; (10194 <AppFskTask+0x14c>)
   100d8:	1c13      	adds	r3, r2, #0
   100da:	005b      	lsls	r3, r3, #1
   100dc:	189b      	adds	r3, r3, r2
   100de:	1c02      	adds	r2, r0, #0
   100e0:	545a      	strb	r2, [r3, r1]
		testRFBuffer[testRFBufferOffset].Command[0] = RFBuffer[2]; 
   100e2:	4b2b      	ldr	r3, [pc, #172]	; (10190 <AppFskTask+0x148>)
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	1c1a      	adds	r2, r3, #0
   100e8:	4b25      	ldr	r3, [pc, #148]	; (10180 <AppFskTask+0x138>)
   100ea:	7899      	ldrb	r1, [r3, #2]
   100ec:	4829      	ldr	r0, [pc, #164]	; (10194 <AppFskTask+0x14c>)
   100ee:	1c13      	adds	r3, r2, #0
   100f0:	005b      	lsls	r3, r3, #1
   100f2:	189b      	adds	r3, r3, r2
   100f4:	18c3      	adds	r3, r0, r3
   100f6:	1c0a      	adds	r2, r1, #0
   100f8:	705a      	strb	r2, [r3, #1]
		testRFBuffer[testRFBufferOffset].Command[1] = RFBuffer[3]; 
   100fa:	4b25      	ldr	r3, [pc, #148]	; (10190 <AppFskTask+0x148>)
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	1c1a      	adds	r2, r3, #0
   10100:	4b1f      	ldr	r3, [pc, #124]	; (10180 <AppFskTask+0x138>)
   10102:	78d9      	ldrb	r1, [r3, #3]
   10104:	4823      	ldr	r0, [pc, #140]	; (10194 <AppFskTask+0x14c>)
   10106:	1c13      	adds	r3, r2, #0
   10108:	005b      	lsls	r3, r3, #1
   1010a:	189b      	adds	r3, r3, r2
   1010c:	18c3      	adds	r3, r0, r3
   1010e:	3301      	adds	r3, #1
   10110:	1c0a      	adds	r2, r1, #0
   10112:	705a      	strb	r2, [r3, #1]
#if REMOTEBOARD		
		AppScreenFSKReadingIn(RFBuffer,testRFBufferOffset);
#endif		
		testRFBufferOffset++;	
   10114:	4b1e      	ldr	r3, [pc, #120]	; (10190 <AppFskTask+0x148>)
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	3301      	adds	r3, #1
   1011a:	b2da      	uxtb	r2, r3
   1011c:	4b1c      	ldr	r3, [pc, #112]	; (10190 <AppFskTask+0x148>)
   1011e:	701a      	strb	r2, [r3, #0]
		if (testRFBufferOffset >= MAXPACKETS2)
   10120:	4b1b      	ldr	r3, [pc, #108]	; (10190 <AppFskTask+0x148>)
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	2b03      	cmp	r3, #3
   10126:	d902      	bls.n	1012e <AppFskTask+0xe6>
		{
			testRFBufferOffset = 0;
   10128:	4b19      	ldr	r3, [pc, #100]	; (10190 <AppFskTask+0x148>)
   1012a:	2200      	movs	r2, #0
   1012c:	701a      	strb	r2, [r3, #0]
		}	
#if BRAKEBOARD		
		AppProtocolBrake(RFBuffer);
   1012e:	4b14      	ldr	r3, [pc, #80]	; (10180 <AppFskTask+0x138>)
   10130:	1c18      	adds	r0, r3, #0
   10132:	4b19      	ldr	r3, [pc, #100]	; (10198 <AppFskTask+0x150>)
   10134:	4798      	blx	r3
#endif						
	}
	//----------------------------
	/// see if packetSent
	//----------------------------
 	if ((SX1272->RegIrqFlags2 & 0x08)!= 0)  
   10136:	4b0f      	ldr	r3, [pc, #60]	; (10174 <AppFskTask+0x12c>)
   10138:	681a      	ldr	r2, [r3, #0]
   1013a:	233f      	movs	r3, #63	; 0x3f
   1013c:	5cd3      	ldrb	r3, [r2, r3]
   1013e:	1c1a      	adds	r2, r3, #0
   10140:	2308      	movs	r3, #8
   10142:	4013      	ands	r3, r2
   10144:	d00f      	beq.n	10166 <AppFskTask+0x11e>
	{
         SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
   10146:	2005      	movs	r0, #5
   10148:	4b14      	ldr	r3, [pc, #80]	; (1019c <AppFskTask+0x154>)
   1014a:	4798      	blx	r3
#if REMOTEBOARD
		commSupTimer = COMM_SUP_TIME_REMOTE;
#endif		 
		if (switchOnTransmit != 0)
   1014c:	4b14      	ldr	r3, [pc, #80]	; (101a0 <AppFskTask+0x158>)
   1014e:	781b      	ldrb	r3, [r3, #0]
   10150:	2b00      	cmp	r3, #0
   10152:	d008      	beq.n	10166 <AppFskTask+0x11e>
		{
			whichRadio = switchOnTransmit; 
   10154:	4b12      	ldr	r3, [pc, #72]	; (101a0 <AppFskTask+0x158>)
   10156:	781a      	ldrb	r2, [r3, #0]
   10158:	4b05      	ldr	r3, [pc, #20]	; (10170 <AppFskTask+0x128>)
   1015a:	701a      	strb	r2, [r3, #0]
			CommInit();
   1015c:	4b11      	ldr	r3, [pc, #68]	; (101a4 <AppFskTask+0x15c>)
   1015e:	4798      	blx	r3
			switchOnTransmit = 0; 
   10160:	4b0f      	ldr	r3, [pc, #60]	; (101a0 <AppFskTask+0x158>)
   10162:	2200      	movs	r2, #0
   10164:	701a      	strb	r2, [r3, #0]
		}
	}
	}
}
   10166:	46bd      	mov	sp, r7
   10168:	bd80      	pop	{r7, pc}
   1016a:	46c0      	nop			; (mov r8, r8)
   1016c:	20003690 	.word	0x20003690
   10170:	200036d2 	.word	0x200036d2
   10174:	20003700 	.word	0x20003700
   10178:	00011981 	.word	0x00011981
   1017c:	200004ec 	.word	0x200004ec
   10180:	20003704 	.word	0x20003704
   10184:	00011a55 	.word	0x00011a55
   10188:	200004e6 	.word	0x200004e6
   1018c:	20003705 	.word	0x20003705
   10190:	200004f8 	.word	0x200004f8
   10194:	20003980 	.word	0x20003980
   10198:	00009e81 	.word	0x00009e81
   1019c:	0000ff71 	.word	0x0000ff71
   101a0:	200004d9 	.word	0x200004d9
   101a4:	0000f441 	.word	0x0000f441

000101a8 <AppFskReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppFskReceiveStart(void)
{
   101a8:	b580      	push	{r7, lr}
   101aa:	b082      	sub	sp, #8
   101ac:	af00      	add	r7, sp, #0
 
 
	//------------------------
	// set up receive.
	//------------------------
	SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   101ae:	4b29      	ldr	r3, [pc, #164]	; (10254 <AppFskReceiveStart+0xac>)
   101b0:	681b      	ldr	r3, [r3, #0]
   101b2:	333e      	adds	r3, #62	; 0x3e
   101b4:	203e      	movs	r0, #62	; 0x3e
   101b6:	1c19      	adds	r1, r3, #0
   101b8:	4b27      	ldr	r3, [pc, #156]	; (10258 <AppFskReceiveStart+0xb0>)
   101ba:	4798      	blx	r3
	SX1272Read( REG_IRQFLAGS2, &SX1272->RegIrqFlags2 );
   101bc:	4b25      	ldr	r3, [pc, #148]	; (10254 <AppFskReceiveStart+0xac>)
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	333f      	adds	r3, #63	; 0x3f
   101c2:	203f      	movs	r0, #63	; 0x3f
   101c4:	1c19      	adds	r1, r3, #0
   101c6:	4b24      	ldr	r3, [pc, #144]	; (10258 <AppFskReceiveStart+0xb0>)
   101c8:	4798      	blx	r3
        
    memset( RFBuffer, 0, ( size_t )RF_BUFFER_SIZE );
   101ca:	4a24      	ldr	r2, [pc, #144]	; (1025c <AppFskReceiveStart+0xb4>)
   101cc:	2380      	movs	r3, #128	; 0x80
   101ce:	005b      	lsls	r3, r3, #1
   101d0:	1c10      	adds	r0, r2, #0
   101d2:	2100      	movs	r1, #0
   101d4:	1c1a      	adds	r2, r3, #0
   101d6:	4b22      	ldr	r3, [pc, #136]	; (10260 <AppFskReceiveStart+0xb8>)
   101d8:	4798      	blx	r3
	
	//--------------------------------
	// set interrupt pin to processor
    //           PayloadReady
    SX1272->RegDioMapping1 = RF_DIOMAPPING1_DIO0_00 |RF_DIOMAPPING1_DIO1_11 ;
   101da:	4b1e      	ldr	r3, [pc, #120]	; (10254 <AppFskReceiveStart+0xac>)
   101dc:	681a      	ldr	r2, [r3, #0]
   101de:	2340      	movs	r3, #64	; 0x40
   101e0:	2130      	movs	r1, #48	; 0x30
   101e2:	54d1      	strb	r1, [r2, r3]
    SX1272->RegDioMapping2 = 0;
   101e4:	4b1b      	ldr	r3, [pc, #108]	; (10254 <AppFskReceiveStart+0xac>)
   101e6:	681a      	ldr	r2, [r3, #0]
   101e8:	2341      	movs	r3, #65	; 0x41
   101ea:	2100      	movs	r1, #0
   101ec:	54d1      	strb	r1, [r2, r3]
    SX1272WriteBuffer( REG_DIOMAPPING1, &SX1272->RegDioMapping1, 2);           	
   101ee:	4b19      	ldr	r3, [pc, #100]	; (10254 <AppFskReceiveStart+0xac>)
   101f0:	681b      	ldr	r3, [r3, #0]
   101f2:	3340      	adds	r3, #64	; 0x40
   101f4:	2040      	movs	r0, #64	; 0x40
   101f6:	1c19      	adds	r1, r3, #0
   101f8:	2202      	movs	r2, #2
   101fa:	4b1a      	ldr	r3, [pc, #104]	; (10264 <AppFskReceiveStart+0xbc>)
   101fc:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintFSK_channel();
   101fe:	4b1a      	ldr	r3, [pc, #104]	; (10268 <AppFskReceiveStart+0xc0>)
   10200:	4798      	blx	r3
	configure_extintFSK_callbacks();
   10202:	4b1a      	ldr	r3, [pc, #104]	; (1026c <AppFskReceiveStart+0xc4>)
   10204:	4798      	blx	r3

    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
   10206:	2001      	movs	r0, #1
   10208:	4b19      	ldr	r3, [pc, #100]	; (10270 <AppFskReceiveStart+0xc8>)
   1020a:	4798      	blx	r3
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
   1020c:	1dfb      	adds	r3, r7, #7
   1020e:	2200      	movs	r2, #0
   10210:	701a      	strb	r2, [r3, #0]
	while (done == 0)
   10212:	e015      	b.n	10240 <AppFskReceiveStart+0x98>
	{
		SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   10214:	4b0f      	ldr	r3, [pc, #60]	; (10254 <AppFskReceiveStart+0xac>)
   10216:	681b      	ldr	r3, [r3, #0]
   10218:	333e      	adds	r3, #62	; 0x3e
   1021a:	203e      	movs	r0, #62	; 0x3e
   1021c:	1c19      	adds	r1, r3, #0
   1021e:	4b0e      	ldr	r3, [pc, #56]	; (10258 <AppFskReceiveStart+0xb0>)
   10220:	4798      	blx	r3
		if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
   10222:	4b0c      	ldr	r3, [pc, #48]	; (10254 <AppFskReceiveStart+0xac>)
   10224:	681a      	ldr	r2, [r3, #0]
   10226:	233e      	movs	r3, #62	; 0x3e
   10228:	5cd3      	ldrb	r3, [r2, r3]
   1022a:	b2db      	uxtb	r3, r3
   1022c:	1dfa      	adds	r2, r7, #7
   1022e:	1df9      	adds	r1, r7, #7
   10230:	7809      	ldrb	r1, [r1, #0]
   10232:	7011      	strb	r1, [r2, #0]
   10234:	b25b      	sxtb	r3, r3
   10236:	2b00      	cmp	r3, #0
   10238:	da02      	bge.n	10240 <AppFskReceiveStart+0x98>
		{
			done = 1;	
   1023a:	1dfb      	adds	r3, r7, #7
   1023c:	2201      	movs	r2, #1
   1023e:	701a      	strb	r2, [r3, #0]
    SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	//----------------------
	// the mode was changed to Receiver 
	// - check when ModeReady is set .. bit 7 of IRQ1
	done = 0;
	while (done == 0)
   10240:	1dfb      	adds	r3, r7, #7
   10242:	781b      	ldrb	r3, [r3, #0]
   10244:	2b00      	cmp	r3, #0
   10246:	d0e5      	beq.n	10214 <AppFskReceiveStart+0x6c>
		{
			done = 1;	
		}				
	}
  
    SX1272FskSetOpMode( RF_OPMODE_RECEIVER );
   10248:	2005      	movs	r0, #5
   1024a:	4b09      	ldr	r3, [pc, #36]	; (10270 <AppFskReceiveStart+0xc8>)
   1024c:	4798      	blx	r3
}
   1024e:	46bd      	mov	sp, r7
   10250:	b002      	add	sp, #8
   10252:	bd80      	pop	{r7, pc}
   10254:	20003700 	.word	0x20003700
   10258:	00011981 	.word	0x00011981
   1025c:	20003704 	.word	0x20003704
   10260:	00017e61 	.word	0x00017e61
   10264:	000119bd 	.word	0x000119bd
   10268:	0000ffb9 	.word	0x0000ffb9
   1026c:	0000fff9 	.word	0x0000fff9
   10270:	0000ff71 	.word	0x0000ff71

00010274 <SX1272FskTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272FskTransmit(uint8_t *txBuffer,uint8_t length)
{
   10274:	b580      	push	{r7, lr}
   10276:	b086      	sub	sp, #24
   10278:	af00      	add	r7, sp, #0
   1027a:	6078      	str	r0, [r7, #4]
   1027c:	1c0a      	adds	r2, r1, #0
   1027e:	1cfb      	adds	r3, r7, #3
   10280:	701a      	strb	r2, [r3, #0]
	uint8_t done,i,*ptr; 
    uint8_t status; 
	status = 1; 
   10282:	1c3b      	adds	r3, r7, #0
   10284:	330f      	adds	r3, #15
   10286:	2201      	movs	r2, #1
   10288:	701a      	strb	r2, [r3, #0]
 		  
	fskTransmitCount++;	   
   1028a:	4b5a      	ldr	r3, [pc, #360]	; (103f4 <SX1272FskTransmit+0x180>)
   1028c:	881b      	ldrh	r3, [r3, #0]
   1028e:	3301      	adds	r3, #1
   10290:	b29a      	uxth	r2, r3
   10292:	4b58      	ldr	r3, [pc, #352]	; (103f4 <SX1272FskTransmit+0x180>)
   10294:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_OPMODE, &SX1272->RegOpMode );   		
   10296:	4b58      	ldr	r3, [pc, #352]	; (103f8 <SX1272FskTransmit+0x184>)
   10298:	681b      	ldr	r3, [r3, #0]
   1029a:	3301      	adds	r3, #1
   1029c:	2001      	movs	r0, #1
   1029e:	1c19      	adds	r1, r3, #0
   102a0:	4b56      	ldr	r3, [pc, #344]	; (103fc <SX1272FskTransmit+0x188>)
   102a2:	4798      	blx	r3
	if ((SX1272->RegOpMode & ~RF_OPMODE_MASK)!= 0x001)
   102a4:	4b54      	ldr	r3, [pc, #336]	; (103f8 <SX1272FskTransmit+0x184>)
   102a6:	681b      	ldr	r3, [r3, #0]
   102a8:	785b      	ldrb	r3, [r3, #1]
   102aa:	22f8      	movs	r2, #248	; 0xf8
   102ac:	4393      	bics	r3, r2
   102ae:	2b01      	cmp	r3, #1
   102b0:	d025      	beq.n	102fe <SX1272FskTransmit+0x8a>
	{	 
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
   102b2:	2001      	movs	r0, #1
   102b4:	4b52      	ldr	r3, [pc, #328]	; (10400 <SX1272FskTransmit+0x18c>)
   102b6:	4798      	blx	r3
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
   102b8:	1c3b      	adds	r3, r7, #0
   102ba:	3317      	adds	r3, #23
   102bc:	2200      	movs	r2, #0
   102be:	701a      	strb	r2, [r3, #0]
		while (done == 0)
   102c0:	e018      	b.n	102f4 <SX1272FskTransmit+0x80>
		{
			SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   102c2:	4b4d      	ldr	r3, [pc, #308]	; (103f8 <SX1272FskTransmit+0x184>)
   102c4:	681b      	ldr	r3, [r3, #0]
   102c6:	333e      	adds	r3, #62	; 0x3e
   102c8:	203e      	movs	r0, #62	; 0x3e
   102ca:	1c19      	adds	r1, r3, #0
   102cc:	4b4b      	ldr	r3, [pc, #300]	; (103fc <SX1272FskTransmit+0x188>)
   102ce:	4798      	blx	r3
			if ((SX1272->RegIrqFlags1 & 0x80)!= 0) 
   102d0:	4b49      	ldr	r3, [pc, #292]	; (103f8 <SX1272FskTransmit+0x184>)
   102d2:	681a      	ldr	r2, [r3, #0]
   102d4:	233e      	movs	r3, #62	; 0x3e
   102d6:	5cd3      	ldrb	r3, [r2, r3]
   102d8:	b2db      	uxtb	r3, r3
   102da:	1c3a      	adds	r2, r7, #0
   102dc:	3217      	adds	r2, #23
   102de:	1c39      	adds	r1, r7, #0
   102e0:	3117      	adds	r1, #23
   102e2:	7809      	ldrb	r1, [r1, #0]
   102e4:	7011      	strb	r1, [r2, #0]
   102e6:	b25b      	sxtb	r3, r3
   102e8:	2b00      	cmp	r3, #0
   102ea:	da03      	bge.n	102f4 <SX1272FskTransmit+0x80>
			{
				done = 1;	
   102ec:	1c3b      	adds	r3, r7, #0
   102ee:	3317      	adds	r3, #23
   102f0:	2201      	movs	r2, #1
   102f2:	701a      	strb	r2, [r3, #0]
		SX1272FskSetOpMode( RF_OPMODE_STANDBY );
		//----------------------
		// the mode was changed to Receiver 
		// - check when ModeReady is set .. bit 7 of IRQ1
		done = 0;
		while (done == 0)
   102f4:	1c3b      	adds	r3, r7, #0
   102f6:	3317      	adds	r3, #23
   102f8:	781b      	ldrb	r3, [r3, #0]
   102fa:	2b00      	cmp	r3, #0
   102fc:	d0e1      	beq.n	102c2 <SX1272FskTransmit+0x4e>
  		
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
   102fe:	687b      	ldr	r3, [r7, #4]
   10300:	613b      	str	r3, [r7, #16]
	RFBuffer[0] = length;
   10302:	4b40      	ldr	r3, [pc, #256]	; (10404 <SX1272FskTransmit+0x190>)
   10304:	1cfa      	adds	r2, r7, #3
   10306:	7812      	ldrb	r2, [r2, #0]
   10308:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
   1030a:	1c3b      	adds	r3, r7, #0
   1030c:	3316      	adds	r3, #22
   1030e:	2200      	movs	r2, #0
   10310:	701a      	strb	r2, [r3, #0]
   10312:	e010      	b.n	10336 <SX1272FskTransmit+0xc2>
	{
		RFBuffer[i+1] = *ptr++;
   10314:	1c3b      	adds	r3, r7, #0
   10316:	3316      	adds	r3, #22
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	1c5a      	adds	r2, r3, #1
   1031c:	693b      	ldr	r3, [r7, #16]
   1031e:	1c59      	adds	r1, r3, #1
   10320:	6139      	str	r1, [r7, #16]
   10322:	7819      	ldrb	r1, [r3, #0]
   10324:	4b37      	ldr	r3, [pc, #220]	; (10404 <SX1272FskTransmit+0x190>)
   10326:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBuffer[0] = length;
	for (i=0;i<length;i++)
   10328:	1c3b      	adds	r3, r7, #0
   1032a:	3316      	adds	r3, #22
   1032c:	781a      	ldrb	r2, [r3, #0]
   1032e:	1c3b      	adds	r3, r7, #0
   10330:	3316      	adds	r3, #22
   10332:	3201      	adds	r2, #1
   10334:	701a      	strb	r2, [r3, #0]
   10336:	1c3a      	adds	r2, r7, #0
   10338:	3216      	adds	r2, #22
   1033a:	1cfb      	adds	r3, r7, #3
   1033c:	7812      	ldrb	r2, [r2, #0]
   1033e:	781b      	ldrb	r3, [r3, #0]
   10340:	429a      	cmp	r2, r3
   10342:	d3e7      	bcc.n	10314 <SX1272FskTransmit+0xa0>
	{
		RFBuffer[i+1] = *ptr++;
	}
    TxPacketSize = length; 
   10344:	1cfb      	adds	r3, r7, #3
   10346:	781b      	ldrb	r3, [r3, #0]
   10348:	b29a      	uxth	r2, r3
   1034a:	4b2f      	ldr	r3, [pc, #188]	; (10408 <SX1272FskTransmit+0x194>)
   1034c:	801a      	strh	r2, [r3, #0]
//	SX1272WriteFifo( ( uint8_t* )&TxPacketSize, 1 );
	SX1272WriteFifo( RFBuffer, TxPacketSize+1);		
   1034e:	4b2e      	ldr	r3, [pc, #184]	; (10408 <SX1272FskTransmit+0x194>)
   10350:	881b      	ldrh	r3, [r3, #0]
   10352:	3301      	adds	r3, #1
   10354:	b29b      	uxth	r3, r3
   10356:	4a2b      	ldr	r2, [pc, #172]	; (10404 <SX1272FskTransmit+0x190>)
   10358:	1c10      	adds	r0, r2, #0
   1035a:	1c19      	adds	r1, r3, #0
   1035c:	4b2b      	ldr	r3, [pc, #172]	; (1040c <SX1272FskTransmit+0x198>)
   1035e:	4798      	blx	r3
	//------------------
	// turn on transmitter
	SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_MASK ) | RF_OPMODE_TRANSMITTER;
   10360:	4b25      	ldr	r3, [pc, #148]	; (103f8 <SX1272FskTransmit+0x184>)
   10362:	681a      	ldr	r2, [r3, #0]
   10364:	4b24      	ldr	r3, [pc, #144]	; (103f8 <SX1272FskTransmit+0x184>)
   10366:	681b      	ldr	r3, [r3, #0]
   10368:	785b      	ldrb	r3, [r3, #1]
   1036a:	b2db      	uxtb	r3, r3
   1036c:	2107      	movs	r1, #7
   1036e:	438b      	bics	r3, r1
   10370:	b2db      	uxtb	r3, r3
   10372:	2103      	movs	r1, #3
   10374:	430b      	orrs	r3, r1
   10376:	b2db      	uxtb	r3, r3
   10378:	b2db      	uxtb	r3, r3
   1037a:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_OPMODE, SX1272->RegOpMode );       		
   1037c:	4b1e      	ldr	r3, [pc, #120]	; (103f8 <SX1272FskTransmit+0x184>)
   1037e:	681b      	ldr	r3, [r3, #0]
   10380:	785b      	ldrb	r3, [r3, #1]
   10382:	2001      	movs	r0, #1
   10384:	1c19      	adds	r1, r3, #0
   10386:	4b22      	ldr	r3, [pc, #136]	; (10410 <SX1272FskTransmit+0x19c>)
   10388:	4798      	blx	r3
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
   1038a:	1c3b      	adds	r3, r7, #0
   1038c:	3317      	adds	r3, #23
   1038e:	2200      	movs	r2, #0
   10390:	701a      	strb	r2, [r3, #0]
	wdog = 0x00ff; 
   10392:	4b20      	ldr	r3, [pc, #128]	; (10414 <SX1272FskTransmit+0x1a0>)
   10394:	22ff      	movs	r2, #255	; 0xff
   10396:	801a      	strh	r2, [r3, #0]
    while ((done == 0)&&(wdog>0))
   10398:	e019      	b.n	103ce <SX1272FskTransmit+0x15a>
    {
	       SX1272Read( REG_IRQFLAGS1, &SX1272->RegIrqFlags1 );
   1039a:	4b17      	ldr	r3, [pc, #92]	; (103f8 <SX1272FskTransmit+0x184>)
   1039c:	681b      	ldr	r3, [r3, #0]
   1039e:	333e      	adds	r3, #62	; 0x3e
   103a0:	203e      	movs	r0, #62	; 0x3e
   103a2:	1c19      	adds	r1, r3, #0
   103a4:	4b15      	ldr	r3, [pc, #84]	; (103fc <SX1272FskTransmit+0x188>)
   103a6:	4798      	blx	r3
	       if ((SX1272->RegIrqFlags1 & 0x20)!= 0)
   103a8:	4b13      	ldr	r3, [pc, #76]	; (103f8 <SX1272FskTransmit+0x184>)
   103aa:	681a      	ldr	r2, [r3, #0]
   103ac:	233e      	movs	r3, #62	; 0x3e
   103ae:	5cd3      	ldrb	r3, [r2, r3]
   103b0:	1c1a      	adds	r2, r3, #0
   103b2:	2320      	movs	r3, #32
   103b4:	4013      	ands	r3, r2
   103b6:	1c3a      	adds	r2, r7, #0
   103b8:	3217      	adds	r2, #23
   103ba:	1c39      	adds	r1, r7, #0
   103bc:	3117      	adds	r1, #23
   103be:	7809      	ldrb	r1, [r1, #0]
   103c0:	7011      	strb	r1, [r2, #0]
   103c2:	2b00      	cmp	r3, #0
   103c4:	d003      	beq.n	103ce <SX1272FskTransmit+0x15a>
	        {
		        done = 1;
   103c6:	1c3b      	adds	r3, r7, #0
   103c8:	3317      	adds	r3, #23
   103ca:	2201      	movs	r2, #1
   103cc:	701a      	strb	r2, [r3, #0]
	//------------------------------
	// wait for tx ready.
	//-----------------------------
	done = 0;
	wdog = 0x00ff; 
    while ((done == 0)&&(wdog>0))
   103ce:	1c3b      	adds	r3, r7, #0
   103d0:	3317      	adds	r3, #23
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	2b00      	cmp	r3, #0
   103d6:	d103      	bne.n	103e0 <SX1272FskTransmit+0x16c>
   103d8:	4b0e      	ldr	r3, [pc, #56]	; (10414 <SX1272FskTransmit+0x1a0>)
   103da:	881b      	ldrh	r3, [r3, #0]
   103dc:	2b00      	cmp	r3, #0
   103de:	d1dc      	bne.n	1039a <SX1272FskTransmit+0x126>
	        {
		        done = 1;
	        }
    }

    RFState = RF_STATE_TX_RUNNING;
   103e0:	4b0d      	ldr	r3, [pc, #52]	; (10418 <SX1272FskTransmit+0x1a4>)
   103e2:	2209      	movs	r2, #9
   103e4:	701a      	strb	r2, [r3, #0]
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
   103e6:	1c3b      	adds	r3, r7, #0
   103e8:	330f      	adds	r3, #15
   103ea:	781b      	ldrb	r3, [r3, #0]
}
   103ec:	1c18      	adds	r0, r3, #0
   103ee:	46bd      	mov	sp, r7
   103f0:	b006      	add	sp, #24
   103f2:	bd80      	pop	{r7, pc}
   103f4:	200004ea 	.word	0x200004ea
   103f8:	20003700 	.word	0x20003700
   103fc:	00011981 	.word	0x00011981
   10400:	0000ff71 	.word	0x0000ff71
   10404:	20003704 	.word	0x20003704
   10408:	200004e8 	.word	0x200004e8
   1040c:	00011a2d 	.word	0x00011a2d
   10410:	0001194d 	.word	0x0001194d
   10414:	200036be 	.word	0x200036be
   10418:	200004e4 	.word	0x200004e4

0001041c <SX1272FskSetPacketConfig2>:

extern tFskSettings FskSettings;

//BETH - ADDED
void SX1272FskSetPacketConfig2(uint8_t continuous )
{
   1041c:	b580      	push	{r7, lr}
   1041e:	b084      	sub	sp, #16
   10420:	af00      	add	r7, sp, #0
   10422:	1c02      	adds	r2, r0, #0
   10424:	1dfb      	adds	r3, r7, #7
   10426:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = 0x40; 
   10428:	1c3b      	adds	r3, r7, #0
   1042a:	330f      	adds	r3, #15
   1042c:	2240      	movs	r2, #64	; 0x40
   1042e:	701a      	strb	r2, [r3, #0]
	if (continuous != 0)
   10430:	1dfb      	adds	r3, r7, #7
   10432:	781b      	ldrb	r3, [r3, #0]
   10434:	2b00      	cmp	r3, #0
   10436:	d003      	beq.n	10440 <SX1272FskSetPacketConfig2+0x24>
	{
		temp = 0; 
   10438:	1c3b      	adds	r3, r7, #0
   1043a:	330f      	adds	r3, #15
   1043c:	2200      	movs	r2, #0
   1043e:	701a      	strb	r2, [r3, #0]
	}
	
	SX1272Write(REG_PACKETCONFIG2, temp);
   10440:	1c3b      	adds	r3, r7, #0
   10442:	330f      	adds	r3, #15
   10444:	781b      	ldrb	r3, [r3, #0]
   10446:	2031      	movs	r0, #49	; 0x31
   10448:	1c19      	adds	r1, r3, #0
   1044a:	4b02      	ldr	r3, [pc, #8]	; (10454 <SX1272FskSetPacketConfig2+0x38>)
   1044c:	4798      	blx	r3
}
   1044e:	46bd      	mov	sp, r7
   10450:	b004      	add	sp, #16
   10452:	bd80      	pop	{r7, pc}
   10454:	0001194d 	.word	0x0001194d

00010458 <SX1272FskSetRFFrequency>:

void SX1272FskSetRFFrequency( uint32_t freq )
{
   10458:	b5b0      	push	{r4, r5, r7, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	af00      	add	r7, sp, #0
   1045e:	6078      	str	r0, [r7, #4]
    FskSettings.RFFrequency = freq;
   10460:	4b1b      	ldr	r3, [pc, #108]	; (104d0 <SX1272FskSetRFFrequency+0x78>)
   10462:	687a      	ldr	r2, [r7, #4]
   10464:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   10466:	4b1b      	ldr	r3, [pc, #108]	; (104d4 <SX1272FskSetRFFrequency+0x7c>)
   10468:	6878      	ldr	r0, [r7, #4]
   1046a:	4798      	blx	r3
   1046c:	1c03      	adds	r3, r0, #0
   1046e:	1c0c      	adds	r4, r1, #0
   10470:	4d19      	ldr	r5, [pc, #100]	; (104d8 <SX1272FskSetRFFrequency+0x80>)
   10472:	1c18      	adds	r0, r3, #0
   10474:	1c21      	adds	r1, r4, #0
   10476:	4b15      	ldr	r3, [pc, #84]	; (104cc <SX1272FskSetRFFrequency+0x74>)
   10478:	4a13      	ldr	r2, [pc, #76]	; (104c8 <SX1272FskSetRFFrequency+0x70>)
   1047a:	47a8      	blx	r5
   1047c:	1c03      	adds	r3, r0, #0
   1047e:	1c0c      	adds	r4, r1, #0
   10480:	4a16      	ldr	r2, [pc, #88]	; (104dc <SX1272FskSetRFFrequency+0x84>)
   10482:	1c18      	adds	r0, r3, #0
   10484:	1c21      	adds	r1, r4, #0
   10486:	4790      	blx	r2
   10488:	1c03      	adds	r3, r0, #0
   1048a:	607b      	str	r3, [r7, #4]
    SX1272->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
   1048c:	4b14      	ldr	r3, [pc, #80]	; (104e0 <SX1272FskSetRFFrequency+0x88>)
   1048e:	681b      	ldr	r3, [r3, #0]
   10490:	687a      	ldr	r2, [r7, #4]
   10492:	0c12      	lsrs	r2, r2, #16
   10494:	b2d2      	uxtb	r2, r2
   10496:	719a      	strb	r2, [r3, #6]
    SX1272->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
   10498:	4b11      	ldr	r3, [pc, #68]	; (104e0 <SX1272FskSetRFFrequency+0x88>)
   1049a:	681b      	ldr	r3, [r3, #0]
   1049c:	687a      	ldr	r2, [r7, #4]
   1049e:	0a12      	lsrs	r2, r2, #8
   104a0:	b2d2      	uxtb	r2, r2
   104a2:	71da      	strb	r2, [r3, #7]
    SX1272->RegFrfLsb = ( uint8_t )( freq & 0xFF );
   104a4:	4b0e      	ldr	r3, [pc, #56]	; (104e0 <SX1272FskSetRFFrequency+0x88>)
   104a6:	681b      	ldr	r3, [r3, #0]
   104a8:	687a      	ldr	r2, [r7, #4]
   104aa:	b2d2      	uxtb	r2, r2
   104ac:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_FRFMSB, &SX1272->RegFrfMsb, 3 );
   104ae:	4b0c      	ldr	r3, [pc, #48]	; (104e0 <SX1272FskSetRFFrequency+0x88>)
   104b0:	681b      	ldr	r3, [r3, #0]
   104b2:	3306      	adds	r3, #6
   104b4:	2006      	movs	r0, #6
   104b6:	1c19      	adds	r1, r3, #0
   104b8:	2203      	movs	r2, #3
   104ba:	4b0a      	ldr	r3, [pc, #40]	; (104e4 <SX1272FskSetRFFrequency+0x8c>)
   104bc:	4798      	blx	r3
}
   104be:	46bd      	mov	sp, r7
   104c0:	b002      	add	sp, #8
   104c2:	bdb0      	pop	{r4, r5, r7, pc}
   104c4:	46c0      	nop			; (mov r8, r8)
   104c6:	46c0      	nop			; (mov r8, r8)
   104c8:	00000000 	.word	0x00000000
   104cc:	404e8480 	.word	0x404e8480
   104d0:	2000000c 	.word	0x2000000c
   104d4:	000175a9 	.word	0x000175a9
   104d8:	00016069 	.word	0x00016069
   104dc:	00015979 	.word	0x00015979
   104e0:	20003700 	.word	0x20003700
   104e4:	000119bd 	.word	0x000119bd

000104e8 <SX1272FskSetBitrate>:
//bb    startTick = GET_TICK_COUNT( );
//bb    while( ( GET_TICK_COUNT( ) - startTick ) < TICK_RATE_MS( 8 ) );    
}

void SX1272FskSetBitrate( uint32_t bitrate )
{
   104e8:	b5b0      	push	{r4, r5, r7, lr}
   104ea:	b082      	sub	sp, #8
   104ec:	af00      	add	r7, sp, #0
   104ee:	6078      	str	r0, [r7, #4]
    FskSettings.Bitrate = bitrate;
   104f0:	4b19      	ldr	r3, [pc, #100]	; (10558 <SX1272FskSetBitrate+0x70>)
   104f2:	687a      	ldr	r2, [r7, #4]
   104f4:	605a      	str	r2, [r3, #4]
    
    bitrate = ( uint16_t )( ( double )XTAL_FREQ / ( double )bitrate );
   104f6:	4b19      	ldr	r3, [pc, #100]	; (1055c <SX1272FskSetBitrate+0x74>)
   104f8:	6878      	ldr	r0, [r7, #4]
   104fa:	4798      	blx	r3
   104fc:	1c03      	adds	r3, r0, #0
   104fe:	1c0c      	adds	r4, r1, #0
   10500:	4d17      	ldr	r5, [pc, #92]	; (10560 <SX1272FskSetBitrate+0x78>)
   10502:	4914      	ldr	r1, [pc, #80]	; (10554 <SX1272FskSetBitrate+0x6c>)
   10504:	4812      	ldr	r0, [pc, #72]	; (10550 <SX1272FskSetBitrate+0x68>)
   10506:	1c1a      	adds	r2, r3, #0
   10508:	1c23      	adds	r3, r4, #0
   1050a:	47a8      	blx	r5
   1050c:	1c03      	adds	r3, r0, #0
   1050e:	1c0c      	adds	r4, r1, #0
   10510:	4a14      	ldr	r2, [pc, #80]	; (10564 <SX1272FskSetBitrate+0x7c>)
   10512:	1c18      	adds	r0, r3, #0
   10514:	1c21      	adds	r1, r4, #0
   10516:	4790      	blx	r2
   10518:	1c03      	adds	r3, r0, #0
   1051a:	b29b      	uxth	r3, r3
   1051c:	607b      	str	r3, [r7, #4]
    SX1272->RegBitrateMsb    = ( uint8_t )( bitrate >> 8 );
   1051e:	4b12      	ldr	r3, [pc, #72]	; (10568 <SX1272FskSetBitrate+0x80>)
   10520:	681b      	ldr	r3, [r3, #0]
   10522:	687a      	ldr	r2, [r7, #4]
   10524:	0a12      	lsrs	r2, r2, #8
   10526:	b2d2      	uxtb	r2, r2
   10528:	709a      	strb	r2, [r3, #2]
    SX1272->RegBitrateLsb    = ( uint8_t )( bitrate & 0xFF );
   1052a:	4b0f      	ldr	r3, [pc, #60]	; (10568 <SX1272FskSetBitrate+0x80>)
   1052c:	681b      	ldr	r3, [r3, #0]
   1052e:	687a      	ldr	r2, [r7, #4]
   10530:	b2d2      	uxtb	r2, r2
   10532:	70da      	strb	r2, [r3, #3]
    SX1272WriteBuffer( REG_BITRATEMSB, &SX1272->RegBitrateMsb, 2 );    
   10534:	4b0c      	ldr	r3, [pc, #48]	; (10568 <SX1272FskSetBitrate+0x80>)
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	3302      	adds	r3, #2
   1053a:	2002      	movs	r0, #2
   1053c:	1c19      	adds	r1, r3, #0
   1053e:	2202      	movs	r2, #2
   10540:	4b0a      	ldr	r3, [pc, #40]	; (1056c <SX1272FskSetBitrate+0x84>)
   10542:	4798      	blx	r3
}
   10544:	46bd      	mov	sp, r7
   10546:	b002      	add	sp, #8
   10548:	bdb0      	pop	{r4, r5, r7, pc}
   1054a:	46c0      	nop			; (mov r8, r8)
   1054c:	46c0      	nop			; (mov r8, r8)
   1054e:	46c0      	nop			; (mov r8, r8)
   10550:	00000000 	.word	0x00000000
   10554:	417e8480 	.word	0x417e8480
   10558:	2000000c 	.word	0x2000000c
   1055c:	000175a9 	.word	0x000175a9
   10560:	00016069 	.word	0x00016069
   10564:	00015979 	.word	0x00015979
   10568:	20003700 	.word	0x20003700
   1056c:	000119bd 	.word	0x000119bd

00010570 <SX1272FskSetFdev>:

    return FskSettings.Bitrate;
}

void SX1272FskSetFdev( uint32_t fdev )
{
   10570:	b5b0      	push	{r4, r5, r7, lr}
   10572:	b082      	sub	sp, #8
   10574:	af00      	add	r7, sp, #0
   10576:	6078      	str	r0, [r7, #4]
    FskSettings.Fdev = fdev;
   10578:	4b19      	ldr	r3, [pc, #100]	; (105e0 <SX1272FskSetFdev+0x70>)
   1057a:	687a      	ldr	r2, [r7, #4]
   1057c:	609a      	str	r2, [r3, #8]

    fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
   1057e:	4b19      	ldr	r3, [pc, #100]	; (105e4 <SX1272FskSetFdev+0x74>)
   10580:	6878      	ldr	r0, [r7, #4]
   10582:	4798      	blx	r3
   10584:	1c03      	adds	r3, r0, #0
   10586:	1c0c      	adds	r4, r1, #0
   10588:	4d17      	ldr	r5, [pc, #92]	; (105e8 <SX1272FskSetFdev+0x78>)
   1058a:	1c18      	adds	r0, r3, #0
   1058c:	1c21      	adds	r1, r4, #0
   1058e:	4b13      	ldr	r3, [pc, #76]	; (105dc <SX1272FskSetFdev+0x6c>)
   10590:	4a11      	ldr	r2, [pc, #68]	; (105d8 <SX1272FskSetFdev+0x68>)
   10592:	47a8      	blx	r5
   10594:	1c03      	adds	r3, r0, #0
   10596:	1c0c      	adds	r4, r1, #0
   10598:	4a14      	ldr	r2, [pc, #80]	; (105ec <SX1272FskSetFdev+0x7c>)
   1059a:	1c18      	adds	r0, r3, #0
   1059c:	1c21      	adds	r1, r4, #0
   1059e:	4790      	blx	r2
   105a0:	1c03      	adds	r3, r0, #0
   105a2:	b29b      	uxth	r3, r3
   105a4:	607b      	str	r3, [r7, #4]
    SX1272->RegFdevMsb    = ( uint8_t )( fdev >> 8 );
   105a6:	4b12      	ldr	r3, [pc, #72]	; (105f0 <SX1272FskSetFdev+0x80>)
   105a8:	681b      	ldr	r3, [r3, #0]
   105aa:	687a      	ldr	r2, [r7, #4]
   105ac:	0a12      	lsrs	r2, r2, #8
   105ae:	b2d2      	uxtb	r2, r2
   105b0:	711a      	strb	r2, [r3, #4]
    SX1272->RegFdevLsb    = ( uint8_t )( fdev & 0xFF );
   105b2:	4b0f      	ldr	r3, [pc, #60]	; (105f0 <SX1272FskSetFdev+0x80>)
   105b4:	681b      	ldr	r3, [r3, #0]
   105b6:	687a      	ldr	r2, [r7, #4]
   105b8:	b2d2      	uxtb	r2, r2
   105ba:	715a      	strb	r2, [r3, #5]
    SX1272WriteBuffer( REG_FDEVMSB, &SX1272->RegFdevMsb, 2 );    
   105bc:	4b0c      	ldr	r3, [pc, #48]	; (105f0 <SX1272FskSetFdev+0x80>)
   105be:	681b      	ldr	r3, [r3, #0]
   105c0:	3304      	adds	r3, #4
   105c2:	2004      	movs	r0, #4
   105c4:	1c19      	adds	r1, r3, #0
   105c6:	2202      	movs	r2, #2
   105c8:	4b0a      	ldr	r3, [pc, #40]	; (105f4 <SX1272FskSetFdev+0x84>)
   105ca:	4798      	blx	r3
}
   105cc:	46bd      	mov	sp, r7
   105ce:	b002      	add	sp, #8
   105d0:	bdb0      	pop	{r4, r5, r7, pc}
   105d2:	46c0      	nop			; (mov r8, r8)
   105d4:	46c0      	nop			; (mov r8, r8)
   105d6:	46c0      	nop			; (mov r8, r8)
   105d8:	00000000 	.word	0x00000000
   105dc:	404e8480 	.word	0x404e8480
   105e0:	2000000c 	.word	0x2000000c
   105e4:	000175a9 	.word	0x000175a9
   105e8:	00016069 	.word	0x00016069
   105ec:	00015979 	.word	0x00015979
   105f0:	20003700 	.word	0x20003700
   105f4:	000119bd 	.word	0x000119bd

000105f8 <SX1272FskSetRFPower>:

    return FskSettings.Fdev;
}

void SX1272FskSetRFPower( int8_t power )
{
   105f8:	b580      	push	{r7, lr}
   105fa:	b082      	sub	sp, #8
   105fc:	af00      	add	r7, sp, #0
   105fe:	1c02      	adds	r2, r0, #0
   10600:	1dfb      	adds	r3, r7, #7
   10602:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PACONFIG, &SX1272->RegPaConfig );
   10604:	4b4f      	ldr	r3, [pc, #316]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10606:	681b      	ldr	r3, [r3, #0]
   10608:	3309      	adds	r3, #9
   1060a:	2009      	movs	r0, #9
   1060c:	1c19      	adds	r1, r3, #0
   1060e:	4b4e      	ldr	r3, [pc, #312]	; (10748 <SX1272FskSetRFPower+0x150>)
   10610:	4798      	blx	r3
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
   10612:	4b4c      	ldr	r3, [pc, #304]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10614:	681b      	ldr	r3, [r3, #0]
   10616:	335a      	adds	r3, #90	; 0x5a
   10618:	205a      	movs	r0, #90	; 0x5a
   1061a:	1c19      	adds	r1, r3, #0
   1061c:	4b4a      	ldr	r3, [pc, #296]	; (10748 <SX1272FskSetRFPower+0x150>)
   1061e:	4798      	blx	r3
    
    if( ( SX1272->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
   10620:	4b48      	ldr	r3, [pc, #288]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10622:	681b      	ldr	r3, [r3, #0]
   10624:	7a5b      	ldrb	r3, [r3, #9]
   10626:	b2db      	uxtb	r3, r3
   10628:	b25b      	sxtb	r3, r3
   1062a:	2b00      	cmp	r3, #0
   1062c:	da56      	bge.n	106dc <SX1272FskSetRFPower+0xe4>
    {
        if( ( SX1272->RegPaDac & 0x07 ) == 0x07 )
   1062e:	4b45      	ldr	r3, [pc, #276]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10630:	681a      	ldr	r2, [r3, #0]
   10632:	235a      	movs	r3, #90	; 0x5a
   10634:	5cd3      	ldrb	r3, [r2, r3]
   10636:	1c1a      	adds	r2, r3, #0
   10638:	2307      	movs	r3, #7
   1063a:	4013      	ands	r3, r2
   1063c:	2b07      	cmp	r3, #7
   1063e:	d126      	bne.n	1068e <SX1272FskSetRFPower+0x96>
        {
            if( power < 5 )
   10640:	1dfb      	adds	r3, r7, #7
   10642:	781b      	ldrb	r3, [r3, #0]
   10644:	b25b      	sxtb	r3, r3
   10646:	2b04      	cmp	r3, #4
   10648:	dc02      	bgt.n	10650 <SX1272FskSetRFPower+0x58>
            {
                power = 5;
   1064a:	1dfb      	adds	r3, r7, #7
   1064c:	2205      	movs	r2, #5
   1064e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
   10650:	1dfb      	adds	r3, r7, #7
   10652:	781b      	ldrb	r3, [r3, #0]
   10654:	b25b      	sxtb	r3, r3
   10656:	2b14      	cmp	r3, #20
   10658:	dd02      	ble.n	10660 <SX1272FskSetRFPower+0x68>
            {
                power = 20;
   1065a:	1dfb      	adds	r3, r7, #7
   1065c:	2214      	movs	r2, #20
   1065e:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
   10660:	4b38      	ldr	r3, [pc, #224]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10662:	681a      	ldr	r2, [r3, #0]
   10664:	4b37      	ldr	r3, [pc, #220]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10666:	681b      	ldr	r3, [r3, #0]
   10668:	7a5b      	ldrb	r3, [r3, #9]
   1066a:	b2db      	uxtb	r3, r3
   1066c:	210f      	movs	r1, #15
   1066e:	438b      	bics	r3, r1
   10670:	b2d9      	uxtb	r1, r3
   10672:	1dfb      	adds	r3, r7, #7
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	3b05      	subs	r3, #5
   10678:	b2db      	uxtb	r3, r3
   1067a:	b2db      	uxtb	r3, r3
   1067c:	1c18      	adds	r0, r3, #0
   1067e:	230f      	movs	r3, #15
   10680:	4003      	ands	r3, r0
   10682:	b2db      	uxtb	r3, r3
   10684:	430b      	orrs	r3, r1
   10686:	b2db      	uxtb	r3, r3
   10688:	b2db      	uxtb	r3, r3
   1068a:	7253      	strb	r3, [r2, #9]
   1068c:	e04c      	b.n	10728 <SX1272FskSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
   1068e:	1dfb      	adds	r3, r7, #7
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	b25b      	sxtb	r3, r3
   10694:	2b01      	cmp	r3, #1
   10696:	dc02      	bgt.n	1069e <SX1272FskSetRFPower+0xa6>
            {
                power = 2;
   10698:	1dfb      	adds	r3, r7, #7
   1069a:	2202      	movs	r2, #2
   1069c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
   1069e:	1dfb      	adds	r3, r7, #7
   106a0:	781b      	ldrb	r3, [r3, #0]
   106a2:	b25b      	sxtb	r3, r3
   106a4:	2b11      	cmp	r3, #17
   106a6:	dd02      	ble.n	106ae <SX1272FskSetRFPower+0xb6>
            {
                power = 17;
   106a8:	1dfb      	adds	r3, r7, #7
   106aa:	2211      	movs	r2, #17
   106ac:	701a      	strb	r2, [r3, #0]
            }
            SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
   106ae:	4b25      	ldr	r3, [pc, #148]	; (10744 <SX1272FskSetRFPower+0x14c>)
   106b0:	681a      	ldr	r2, [r3, #0]
   106b2:	4b24      	ldr	r3, [pc, #144]	; (10744 <SX1272FskSetRFPower+0x14c>)
   106b4:	681b      	ldr	r3, [r3, #0]
   106b6:	7a5b      	ldrb	r3, [r3, #9]
   106b8:	b2db      	uxtb	r3, r3
   106ba:	210f      	movs	r1, #15
   106bc:	438b      	bics	r3, r1
   106be:	b2d9      	uxtb	r1, r3
   106c0:	1dfb      	adds	r3, r7, #7
   106c2:	781b      	ldrb	r3, [r3, #0]
   106c4:	3b02      	subs	r3, #2
   106c6:	b2db      	uxtb	r3, r3
   106c8:	b2db      	uxtb	r3, r3
   106ca:	1c18      	adds	r0, r3, #0
   106cc:	230f      	movs	r3, #15
   106ce:	4003      	ands	r3, r0
   106d0:	b2db      	uxtb	r3, r3
   106d2:	430b      	orrs	r3, r1
   106d4:	b2db      	uxtb	r3, r3
   106d6:	b2db      	uxtb	r3, r3
   106d8:	7253      	strb	r3, [r2, #9]
   106da:	e025      	b.n	10728 <SX1272FskSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
   106dc:	1dfb      	adds	r3, r7, #7
   106de:	781b      	ldrb	r3, [r3, #0]
   106e0:	b25b      	sxtb	r3, r3
   106e2:	3301      	adds	r3, #1
   106e4:	da02      	bge.n	106ec <SX1272FskSetRFPower+0xf4>
        {
            power = -1;
   106e6:	1dfb      	adds	r3, r7, #7
   106e8:	22ff      	movs	r2, #255	; 0xff
   106ea:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
   106ec:	1dfb      	adds	r3, r7, #7
   106ee:	781b      	ldrb	r3, [r3, #0]
   106f0:	b25b      	sxtb	r3, r3
   106f2:	2b0e      	cmp	r3, #14
   106f4:	dd02      	ble.n	106fc <SX1272FskSetRFPower+0x104>
        {
            power = 14;
   106f6:	1dfb      	adds	r3, r7, #7
   106f8:	220e      	movs	r2, #14
   106fa:	701a      	strb	r2, [r3, #0]
        }
        SX1272->RegPaConfig = ( SX1272->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
   106fc:	4b11      	ldr	r3, [pc, #68]	; (10744 <SX1272FskSetRFPower+0x14c>)
   106fe:	681a      	ldr	r2, [r3, #0]
   10700:	4b10      	ldr	r3, [pc, #64]	; (10744 <SX1272FskSetRFPower+0x14c>)
   10702:	681b      	ldr	r3, [r3, #0]
   10704:	7a5b      	ldrb	r3, [r3, #9]
   10706:	b2db      	uxtb	r3, r3
   10708:	210f      	movs	r1, #15
   1070a:	438b      	bics	r3, r1
   1070c:	b2d9      	uxtb	r1, r3
   1070e:	1dfb      	adds	r3, r7, #7
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	3301      	adds	r3, #1
   10714:	b2db      	uxtb	r3, r3
   10716:	b2db      	uxtb	r3, r3
   10718:	1c18      	adds	r0, r3, #0
   1071a:	230f      	movs	r3, #15
   1071c:	4003      	ands	r3, r0
   1071e:	b2db      	uxtb	r3, r3
   10720:	430b      	orrs	r3, r1
   10722:	b2db      	uxtb	r3, r3
   10724:	b2db      	uxtb	r3, r3
   10726:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_PACONFIG, SX1272->RegPaConfig );
   10728:	4b06      	ldr	r3, [pc, #24]	; (10744 <SX1272FskSetRFPower+0x14c>)
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	7a5b      	ldrb	r3, [r3, #9]
   1072e:	2009      	movs	r0, #9
   10730:	1c19      	adds	r1, r3, #0
   10732:	4b06      	ldr	r3, [pc, #24]	; (1074c <SX1272FskSetRFPower+0x154>)
   10734:	4798      	blx	r3
    FskSettings.Power = power;
   10736:	4b06      	ldr	r3, [pc, #24]	; (10750 <SX1272FskSetRFPower+0x158>)
   10738:	1dfa      	adds	r2, r7, #7
   1073a:	7812      	ldrb	r2, [r2, #0]
   1073c:	731a      	strb	r2, [r3, #12]
}
   1073e:	46bd      	mov	sp, r7
   10740:	b002      	add	sp, #8
   10742:	bd80      	pop	{r7, pc}
   10744:	20003700 	.word	0x20003700
   10748:	00011981 	.word	0x00011981
   1074c:	0001194d 	.word	0x0001194d
   10750:	2000000c 	.word	0x2000000c
   10754:	00000000 	.word	0x00000000

00010758 <SX1272FskComputeRxBwMantExp>:
 * \param [IN] rxBwValue Bandwidth value
 * \param [OUT] mantisse Mantisse of the bandwidth value
 * \param [OUT] exponent Exponent of the bandwidth value
 */
static void SX1272FskComputeRxBwMantExp( uint32_t rxBwValue, uint8_t* mantisse, uint8_t* exponent )
{
   10758:	b5f0      	push	{r4, r5, r6, r7, lr}
   1075a:	b08d      	sub	sp, #52	; 0x34
   1075c:	af00      	add	r7, sp, #0
   1075e:	6178      	str	r0, [r7, #20]
   10760:	6139      	str	r1, [r7, #16]
   10762:	60fa      	str	r2, [r7, #12]
    uint8_t tmpExp = 0;
   10764:	1c3b      	adds	r3, r7, #0
   10766:	332f      	adds	r3, #47	; 0x2f
   10768:	2200      	movs	r2, #0
   1076a:	701a      	strb	r2, [r3, #0]
    uint8_t tmpMant = 0;
   1076c:	1c3b      	adds	r3, r7, #0
   1076e:	332e      	adds	r3, #46	; 0x2e
   10770:	2200      	movs	r2, #0
   10772:	701a      	strb	r2, [r3, #0]

    double tmpRxBw = 0;
   10774:	4b43      	ldr	r3, [pc, #268]	; (10884 <SX1272FskComputeRxBwMantExp+0x12c>)
   10776:	4a42      	ldr	r2, [pc, #264]	; (10880 <SX1272FskComputeRxBwMantExp+0x128>)
   10778:	61ba      	str	r2, [r7, #24]
   1077a:	61fb      	str	r3, [r7, #28]
    double rxBwMin = 10e6;
   1077c:	4a42      	ldr	r2, [pc, #264]	; (10888 <SX1272FskComputeRxBwMantExp+0x130>)
   1077e:	4b43      	ldr	r3, [pc, #268]	; (1088c <SX1272FskComputeRxBwMantExp+0x134>)
   10780:	623a      	str	r2, [r7, #32]
   10782:	627b      	str	r3, [r7, #36]	; 0x24

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
   10784:	1c3b      	adds	r3, r7, #0
   10786:	332f      	adds	r3, #47	; 0x2f
   10788:	2200      	movs	r2, #0
   1078a:	701a      	strb	r2, [r3, #0]
   1078c:	e06e      	b.n	1086c <SX1272FskComputeRxBwMantExp+0x114>
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
   1078e:	1c3b      	adds	r3, r7, #0
   10790:	332e      	adds	r3, #46	; 0x2e
   10792:	2210      	movs	r2, #16
   10794:	701a      	strb	r2, [r3, #0]
   10796:	e05d      	b.n	10854 <SX1272FskComputeRxBwMantExp+0xfc>
        {
            if( ( SX1272->RegOpMode & RF_OPMODE_MODULATIONTYPE_FSK ) == RF_OPMODE_MODULATIONTYPE_FSK )
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 2 ) );
   10798:	1c3b      	adds	r3, r7, #0
   1079a:	332e      	adds	r3, #46	; 0x2e
   1079c:	781a      	ldrb	r2, [r3, #0]
   1079e:	4b40      	ldr	r3, [pc, #256]	; (108a0 <SX1272FskComputeRxBwMantExp+0x148>)
   107a0:	1c10      	adds	r0, r2, #0
   107a2:	4798      	blx	r3
   107a4:	6038      	str	r0, [r7, #0]
   107a6:	6079      	str	r1, [r7, #4]
   107a8:	1c3b      	adds	r3, r7, #0
   107aa:	332f      	adds	r3, #47	; 0x2f
   107ac:	781b      	ldrb	r3, [r3, #0]
   107ae:	1c9a      	adds	r2, r3, #2
   107b0:	4b3b      	ldr	r3, [pc, #236]	; (108a0 <SX1272FskComputeRxBwMantExp+0x148>)
   107b2:	1c10      	adds	r0, r2, #0
   107b4:	4798      	blx	r3
   107b6:	1c02      	adds	r2, r0, #0
   107b8:	1c0b      	adds	r3, r1, #0
   107ba:	4835      	ldr	r0, [pc, #212]	; (10890 <SX1272FskComputeRxBwMantExp+0x138>)
   107bc:	4935      	ldr	r1, [pc, #212]	; (10894 <SX1272FskComputeRxBwMantExp+0x13c>)
   107be:	4e39      	ldr	r6, [pc, #228]	; (108a4 <SX1272FskComputeRxBwMantExp+0x14c>)
   107c0:	47b0      	blx	r6
   107c2:	1c02      	adds	r2, r0, #0
   107c4:	1c0b      	adds	r3, r1, #0
   107c6:	4e38      	ldr	r6, [pc, #224]	; (108a8 <SX1272FskComputeRxBwMantExp+0x150>)
   107c8:	6838      	ldr	r0, [r7, #0]
   107ca:	6879      	ldr	r1, [r7, #4]
   107cc:	47b0      	blx	r6
   107ce:	1c02      	adds	r2, r0, #0
   107d0:	1c0b      	adds	r3, r1, #0
   107d2:	4e36      	ldr	r6, [pc, #216]	; (108ac <SX1272FskComputeRxBwMantExp+0x154>)
   107d4:	4830      	ldr	r0, [pc, #192]	; (10898 <SX1272FskComputeRxBwMantExp+0x140>)
   107d6:	4931      	ldr	r1, [pc, #196]	; (1089c <SX1272FskComputeRxBwMantExp+0x144>)
   107d8:	47b0      	blx	r6
   107da:	1c02      	adds	r2, r0, #0
   107dc:	1c0b      	adds	r3, r1, #0
   107de:	61ba      	str	r2, [r7, #24]
   107e0:	61fb      	str	r3, [r7, #28]
            }
            else
            {
                tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 3 ) );
            }
            if( fabs( tmpRxBw - rxBwValue ) < rxBwMin )
   107e2:	4b33      	ldr	r3, [pc, #204]	; (108b0 <SX1272FskComputeRxBwMantExp+0x158>)
   107e4:	6978      	ldr	r0, [r7, #20]
   107e6:	4798      	blx	r3
   107e8:	1c02      	adds	r2, r0, #0
   107ea:	1c0b      	adds	r3, r1, #0
   107ec:	4e31      	ldr	r6, [pc, #196]	; (108b4 <SX1272FskComputeRxBwMantExp+0x15c>)
   107ee:	69b8      	ldr	r0, [r7, #24]
   107f0:	69f9      	ldr	r1, [r7, #28]
   107f2:	47b0      	blx	r6
   107f4:	1c02      	adds	r2, r0, #0
   107f6:	1c0b      	adds	r3, r1, #0
   107f8:	1c11      	adds	r1, r2, #0
   107fa:	1c0c      	adds	r4, r1, #0
   107fc:	005b      	lsls	r3, r3, #1
   107fe:	085d      	lsrs	r5, r3, #1
   10800:	4e2d      	ldr	r6, [pc, #180]	; (108b8 <SX1272FskComputeRxBwMantExp+0x160>)
   10802:	1c20      	adds	r0, r4, #0
   10804:	1c29      	adds	r1, r5, #0
   10806:	6a3a      	ldr	r2, [r7, #32]
   10808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1080a:	47b0      	blx	r6
   1080c:	1c03      	adds	r3, r0, #0
   1080e:	2b00      	cmp	r3, #0
   10810:	d019      	beq.n	10846 <SX1272FskComputeRxBwMantExp+0xee>
            {
                rxBwMin = fabs( tmpRxBw - rxBwValue );
   10812:	4b27      	ldr	r3, [pc, #156]	; (108b0 <SX1272FskComputeRxBwMantExp+0x158>)
   10814:	6978      	ldr	r0, [r7, #20]
   10816:	4798      	blx	r3
   10818:	1c02      	adds	r2, r0, #0
   1081a:	1c0b      	adds	r3, r1, #0
   1081c:	4e25      	ldr	r6, [pc, #148]	; (108b4 <SX1272FskComputeRxBwMantExp+0x15c>)
   1081e:	69b8      	ldr	r0, [r7, #24]
   10820:	69f9      	ldr	r1, [r7, #28]
   10822:	47b0      	blx	r6
   10824:	1c02      	adds	r2, r0, #0
   10826:	1c0b      	adds	r3, r1, #0
   10828:	1c11      	adds	r1, r2, #0
   1082a:	6239      	str	r1, [r7, #32]
   1082c:	005b      	lsls	r3, r3, #1
   1082e:	085b      	lsrs	r3, r3, #1
   10830:	627b      	str	r3, [r7, #36]	; 0x24
                *mantisse = tmpMant;
   10832:	693b      	ldr	r3, [r7, #16]
   10834:	1c3a      	adds	r2, r7, #0
   10836:	322e      	adds	r2, #46	; 0x2e
   10838:	7812      	ldrb	r2, [r2, #0]
   1083a:	701a      	strb	r2, [r3, #0]
                *exponent = tmpExp;
   1083c:	68fb      	ldr	r3, [r7, #12]
   1083e:	1c3a      	adds	r2, r7, #0
   10840:	322f      	adds	r2, #47	; 0x2f
   10842:	7812      	ldrb	r2, [r2, #0]
   10844:	701a      	strb	r2, [r3, #0]
    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
    {
        for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
   10846:	1c3b      	adds	r3, r7, #0
   10848:	332e      	adds	r3, #46	; 0x2e
   1084a:	1c3a      	adds	r2, r7, #0
   1084c:	322e      	adds	r2, #46	; 0x2e
   1084e:	7812      	ldrb	r2, [r2, #0]
   10850:	3204      	adds	r2, #4
   10852:	701a      	strb	r2, [r3, #0]
   10854:	1c3b      	adds	r3, r7, #0
   10856:	332e      	adds	r3, #46	; 0x2e
   10858:	781b      	ldrb	r3, [r3, #0]
   1085a:	2b18      	cmp	r3, #24
   1085c:	d99c      	bls.n	10798 <SX1272FskComputeRxBwMantExp+0x40>
    uint8_t tmpMant = 0;

    double tmpRxBw = 0;
    double rxBwMin = 10e6;

    for( tmpExp = 0; tmpExp < 8; tmpExp++ )
   1085e:	1c3b      	adds	r3, r7, #0
   10860:	332f      	adds	r3, #47	; 0x2f
   10862:	781a      	ldrb	r2, [r3, #0]
   10864:	1c3b      	adds	r3, r7, #0
   10866:	332f      	adds	r3, #47	; 0x2f
   10868:	3201      	adds	r2, #1
   1086a:	701a      	strb	r2, [r3, #0]
   1086c:	1c3b      	adds	r3, r7, #0
   1086e:	332f      	adds	r3, #47	; 0x2f
   10870:	781b      	ldrb	r3, [r3, #0]
   10872:	2b07      	cmp	r3, #7
   10874:	d98b      	bls.n	1078e <SX1272FskComputeRxBwMantExp+0x36>
                *mantisse = tmpMant;
                *exponent = tmpExp;
            }
        }
    }
}
   10876:	46bd      	mov	sp, r7
   10878:	b00d      	add	sp, #52	; 0x34
   1087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1087c:	46c0      	nop			; (mov r8, r8)
   1087e:	46c0      	nop			; (mov r8, r8)
	...
   1088c:	416312d0 	.word	0x416312d0
   10890:	00000000 	.word	0x00000000
   10894:	40000000 	.word	0x40000000
   10898:	00000000 	.word	0x00000000
   1089c:	417e8480 	.word	0x417e8480
   108a0:	0001752d 	.word	0x0001752d
   108a4:	000143b9 	.word	0x000143b9
   108a8:	0001693d 	.word	0x0001693d
   108ac:	00016069 	.word	0x00016069
   108b0:	000175a9 	.word	0x000175a9
   108b4:	00016e5d 	.word	0x00016e5d
   108b8:	000158a5 	.word	0x000158a5
   108bc:	46c0      	nop			; (mov r8, r8)
   108be:	46c0      	nop			; (mov r8, r8)

000108c0 <SX1272FskSetDccBw>:

void SX1272FskSetDccBw( uint8_t* reg, uint32_t dccValue, uint32_t rxBwValue )
{
   108c0:	b580      	push	{r7, lr}
   108c2:	b086      	sub	sp, #24
   108c4:	af00      	add	r7, sp, #0
   108c6:	60f8      	str	r0, [r7, #12]
   108c8:	60b9      	str	r1, [r7, #8]
   108ca:	607a      	str	r2, [r7, #4]
    uint8_t mantisse = 0;
   108cc:	1c3b      	adds	r3, r7, #0
   108ce:	3317      	adds	r3, #23
   108d0:	2200      	movs	r2, #0
   108d2:	701a      	strb	r2, [r3, #0]
    uint8_t exponent = 0;
   108d4:	1c3b      	adds	r3, r7, #0
   108d6:	3316      	adds	r3, #22
   108d8:	2200      	movs	r2, #0
   108da:	701a      	strb	r2, [r3, #0]
    
    if( reg == &SX1272->RegRxBw )
   108dc:	4b39      	ldr	r3, [pc, #228]	; (109c4 <SX1272FskSetDccBw+0x104>)
   108de:	681b      	ldr	r3, [r3, #0]
   108e0:	1c1a      	adds	r2, r3, #0
   108e2:	3212      	adds	r2, #18
   108e4:	68fb      	ldr	r3, [r7, #12]
   108e6:	429a      	cmp	r2, r3
   108e8:	d107      	bne.n	108fa <SX1272FskSetDccBw+0x3a>
    {
        *reg = ( uint8_t )dccValue & 0x60;
   108ea:	68bb      	ldr	r3, [r7, #8]
   108ec:	b2da      	uxtb	r2, r3
   108ee:	2360      	movs	r3, #96	; 0x60
   108f0:	4013      	ands	r3, r2
   108f2:	b2da      	uxtb	r2, r3
   108f4:	68fb      	ldr	r3, [r7, #12]
   108f6:	701a      	strb	r2, [r3, #0]
   108f8:	e002      	b.n	10900 <SX1272FskSetDccBw+0x40>
    }
    else
    {
        *reg = 0;
   108fa:	68fb      	ldr	r3, [r7, #12]
   108fc:	2200      	movs	r2, #0
   108fe:	701a      	strb	r2, [r3, #0]
    }

    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );
   10900:	6879      	ldr	r1, [r7, #4]
   10902:	1c3a      	adds	r2, r7, #0
   10904:	3217      	adds	r2, #23
   10906:	1c3b      	adds	r3, r7, #0
   10908:	3316      	adds	r3, #22
   1090a:	1c08      	adds	r0, r1, #0
   1090c:	1c11      	adds	r1, r2, #0
   1090e:	1c1a      	adds	r2, r3, #0
   10910:	4b2d      	ldr	r3, [pc, #180]	; (109c8 <SX1272FskSetDccBw+0x108>)
   10912:	4798      	blx	r3

    switch( mantisse )
   10914:	1c3b      	adds	r3, r7, #0
   10916:	3317      	adds	r3, #23
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	2b14      	cmp	r3, #20
   1091c:	d015      	beq.n	1094a <SX1272FskSetDccBw+0x8a>
   1091e:	2b18      	cmp	r3, #24
   10920:	d023      	beq.n	1096a <SX1272FskSetDccBw+0xaa>
   10922:	2b10      	cmp	r3, #16
   10924:	d000      	beq.n	10928 <SX1272FskSetDccBw+0x68>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
            break;
        default:
            // Something went terribely wrong
            break;
   10926:	e030      	b.n	1098a <SX1272FskSetDccBw+0xca>
    SX1272FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );

    switch( mantisse )
    {
        case 16:
            *reg |= ( uint8_t )( 0x00 | ( exponent & 0x07 ) );
   10928:	68fb      	ldr	r3, [r7, #12]
   1092a:	781b      	ldrb	r3, [r3, #0]
   1092c:	b2da      	uxtb	r2, r3
   1092e:	1c3b      	adds	r3, r7, #0
   10930:	3316      	adds	r3, #22
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	b2db      	uxtb	r3, r3
   10936:	1c19      	adds	r1, r3, #0
   10938:	2307      	movs	r3, #7
   1093a:	400b      	ands	r3, r1
   1093c:	b2db      	uxtb	r3, r3
   1093e:	4313      	orrs	r3, r2
   10940:	b2db      	uxtb	r3, r3
   10942:	b2da      	uxtb	r2, r3
   10944:	68fb      	ldr	r3, [r7, #12]
   10946:	701a      	strb	r2, [r3, #0]
            break;
   10948:	e01f      	b.n	1098a <SX1272FskSetDccBw+0xca>
        case 20:
            *reg |= ( uint8_t )( 0x08 | ( exponent & 0x07 ) );
   1094a:	68fb      	ldr	r3, [r7, #12]
   1094c:	781a      	ldrb	r2, [r3, #0]
   1094e:	1c3b      	adds	r3, r7, #0
   10950:	3316      	adds	r3, #22
   10952:	7819      	ldrb	r1, [r3, #0]
   10954:	2307      	movs	r3, #7
   10956:	400b      	ands	r3, r1
   10958:	b2db      	uxtb	r3, r3
   1095a:	4313      	orrs	r3, r2
   1095c:	b2db      	uxtb	r3, r3
   1095e:	2208      	movs	r2, #8
   10960:	4313      	orrs	r3, r2
   10962:	b2da      	uxtb	r2, r3
   10964:	68fb      	ldr	r3, [r7, #12]
   10966:	701a      	strb	r2, [r3, #0]
            break;
   10968:	e00f      	b.n	1098a <SX1272FskSetDccBw+0xca>
        case 24:
            *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
   1096a:	68fb      	ldr	r3, [r7, #12]
   1096c:	781a      	ldrb	r2, [r3, #0]
   1096e:	1c3b      	adds	r3, r7, #0
   10970:	3316      	adds	r3, #22
   10972:	7819      	ldrb	r1, [r3, #0]
   10974:	2307      	movs	r3, #7
   10976:	400b      	ands	r3, r1
   10978:	b2db      	uxtb	r3, r3
   1097a:	4313      	orrs	r3, r2
   1097c:	b2db      	uxtb	r3, r3
   1097e:	2210      	movs	r2, #16
   10980:	4313      	orrs	r3, r2
   10982:	b2da      	uxtb	r2, r3
   10984:	68fb      	ldr	r3, [r7, #12]
   10986:	701a      	strb	r2, [r3, #0]
            break;
   10988:	46c0      	nop			; (mov r8, r8)
        default:
            // Something went terribely wrong
            break;
    }

    if( reg == &SX1272->RegRxBw )
   1098a:	4b0e      	ldr	r3, [pc, #56]	; (109c4 <SX1272FskSetDccBw+0x104>)
   1098c:	681b      	ldr	r3, [r3, #0]
   1098e:	1c1a      	adds	r2, r3, #0
   10990:	3212      	adds	r2, #18
   10992:	68fb      	ldr	r3, [r7, #12]
   10994:	429a      	cmp	r2, r3
   10996:	d109      	bne.n	109ac <SX1272FskSetDccBw+0xec>
    {
        SX1272Write( REG_RXBW, *reg );
   10998:	68fb      	ldr	r3, [r7, #12]
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	2012      	movs	r0, #18
   1099e:	1c19      	adds	r1, r3, #0
   109a0:	4b0a      	ldr	r3, [pc, #40]	; (109cc <SX1272FskSetDccBw+0x10c>)
   109a2:	4798      	blx	r3
        FskSettings.RxBw = rxBwValue;
   109a4:	4b0a      	ldr	r3, [pc, #40]	; (109d0 <SX1272FskSetDccBw+0x110>)
   109a6:	687a      	ldr	r2, [r7, #4]
   109a8:	611a      	str	r2, [r3, #16]
   109aa:	e008      	b.n	109be <SX1272FskSetDccBw+0xfe>
    }
    else
    {
        SX1272Write( REG_AFCBW, *reg );
   109ac:	68fb      	ldr	r3, [r7, #12]
   109ae:	781b      	ldrb	r3, [r3, #0]
   109b0:	2013      	movs	r0, #19
   109b2:	1c19      	adds	r1, r3, #0
   109b4:	4b05      	ldr	r3, [pc, #20]	; (109cc <SX1272FskSetDccBw+0x10c>)
   109b6:	4798      	blx	r3
        FskSettings.RxBwAfc = rxBwValue;
   109b8:	4b05      	ldr	r3, [pc, #20]	; (109d0 <SX1272FskSetDccBw+0x110>)
   109ba:	687a      	ldr	r2, [r7, #4]
   109bc:	615a      	str	r2, [r3, #20]
    }
}
   109be:	46bd      	mov	sp, r7
   109c0:	b006      	add	sp, #24
   109c2:	bd80      	pop	{r7, pc}
   109c4:	20003700 	.word	0x20003700
   109c8:	00010759 	.word	0x00010759
   109cc:	0001194d 	.word	0x0001194d
   109d0:	2000000c 	.word	0x2000000c

000109d4 <SX1272FskGetPacketCrcOn>:
    SX1272Write( REG_PACKETCONFIG1, SX1272->RegPacketConfig1 );
    FskSettings.CrcOn = enable;
}

bool SX1272FskGetPacketCrcOn( void )
{
   109d4:	b580      	push	{r7, lr}
   109d6:	af00      	add	r7, sp, #0
    SX1272Read( REG_PACKETCONFIG1, &SX1272->RegPacketConfig1 );
   109d8:	4b0c      	ldr	r3, [pc, #48]	; (10a0c <SX1272FskGetPacketCrcOn+0x38>)
   109da:	681b      	ldr	r3, [r3, #0]
   109dc:	3330      	adds	r3, #48	; 0x30
   109de:	2030      	movs	r0, #48	; 0x30
   109e0:	1c19      	adds	r1, r3, #0
   109e2:	4b0b      	ldr	r3, [pc, #44]	; (10a10 <SX1272FskGetPacketCrcOn+0x3c>)
   109e4:	4798      	blx	r3
    FskSettings.CrcOn = ( SX1272->RegPacketConfig1 & RF_PACKETCONFIG1_CRC_ON ) >> 4;
   109e6:	4b09      	ldr	r3, [pc, #36]	; (10a0c <SX1272FskGetPacketCrcOn+0x38>)
   109e8:	681a      	ldr	r2, [r3, #0]
   109ea:	2330      	movs	r3, #48	; 0x30
   109ec:	5cd3      	ldrb	r3, [r2, r3]
   109ee:	1c1a      	adds	r2, r3, #0
   109f0:	2310      	movs	r3, #16
   109f2:	4013      	ands	r3, r2
   109f4:	111b      	asrs	r3, r3, #4
   109f6:	1e5a      	subs	r2, r3, #1
   109f8:	4193      	sbcs	r3, r2
   109fa:	b2da      	uxtb	r2, r3
   109fc:	4b05      	ldr	r3, [pc, #20]	; (10a14 <SX1272FskGetPacketCrcOn+0x40>)
   109fe:	761a      	strb	r2, [r3, #24]
    return FskSettings.CrcOn;
   10a00:	4b04      	ldr	r3, [pc, #16]	; (10a14 <SX1272FskGetPacketCrcOn+0x40>)
   10a02:	7e1b      	ldrb	r3, [r3, #24]
}
   10a04:	1c18      	adds	r0, r3, #0
   10a06:	46bd      	mov	sp, r7
   10a08:	bd80      	pop	{r7, pc}
   10a0a:	46c0      	nop			; (mov r8, r8)
   10a0c:	20003700 	.word	0x20003700
   10a10:	00011981 	.word	0x00011981
   10a14:	2000000c 	.word	0x2000000c

00010a18 <SX1272FskSetPa20dBm>:
    FskSettings.PayloadLength = SX1272->RegPayloadLength;
    return FskSettings.PayloadLength;
}

void SX1272FskSetPa20dBm( bool enale )
{
   10a18:	b580      	push	{r7, lr}
   10a1a:	b082      	sub	sp, #8
   10a1c:	af00      	add	r7, sp, #0
   10a1e:	1c02      	adds	r2, r0, #0
   10a20:	1dfb      	adds	r3, r7, #7
   10a22:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_PADAC, &SX1272->RegPaDac );
   10a24:	4b10      	ldr	r3, [pc, #64]	; (10a68 <SX1272FskSetPa20dBm+0x50>)
   10a26:	681b      	ldr	r3, [r3, #0]
   10a28:	335a      	adds	r3, #90	; 0x5a
   10a2a:	205a      	movs	r0, #90	; 0x5a
   10a2c:	1c19      	adds	r1, r3, #0
   10a2e:	4b0f      	ldr	r3, [pc, #60]	; (10a6c <SX1272FskSetPa20dBm+0x54>)
   10a30:	4798      	blx	r3
    
    if( enale == true )
   10a32:	1dfb      	adds	r3, r7, #7
   10a34:	781b      	ldrb	r3, [r3, #0]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d005      	beq.n	10a46 <SX1272FskSetPa20dBm+0x2e>
    {
        SX1272->RegPaDac = 0x87;
   10a3a:	4b0b      	ldr	r3, [pc, #44]	; (10a68 <SX1272FskSetPa20dBm+0x50>)
   10a3c:	681a      	ldr	r2, [r3, #0]
   10a3e:	235a      	movs	r3, #90	; 0x5a
   10a40:	2187      	movs	r1, #135	; 0x87
   10a42:	54d1      	strb	r1, [r2, r3]
   10a44:	e004      	b.n	10a50 <SX1272FskSetPa20dBm+0x38>
    }
    else
    {
        SX1272->RegPaDac = 0x84;
   10a46:	4b08      	ldr	r3, [pc, #32]	; (10a68 <SX1272FskSetPa20dBm+0x50>)
   10a48:	681a      	ldr	r2, [r3, #0]
   10a4a:	235a      	movs	r3, #90	; 0x5a
   10a4c:	2184      	movs	r1, #132	; 0x84
   10a4e:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_PADAC, SX1272->RegPaDac );
   10a50:	4b05      	ldr	r3, [pc, #20]	; (10a68 <SX1272FskSetPa20dBm+0x50>)
   10a52:	681a      	ldr	r2, [r3, #0]
   10a54:	235a      	movs	r3, #90	; 0x5a
   10a56:	5cd3      	ldrb	r3, [r2, r3]
   10a58:	205a      	movs	r0, #90	; 0x5a
   10a5a:	1c19      	adds	r1, r3, #0
   10a5c:	4b04      	ldr	r3, [pc, #16]	; (10a70 <SX1272FskSetPa20dBm+0x58>)
   10a5e:	4798      	blx	r3
}
   10a60:	46bd      	mov	sp, r7
   10a62:	b002      	add	sp, #8
   10a64:	bd80      	pop	{r7, pc}
   10a66:	46c0      	nop			; (mov r8, r8)
   10a68:	20003700 	.word	0x20003700
   10a6c:	00011981 	.word	0x00011981
   10a70:	0001194d 	.word	0x0001194d

00010a74 <SX1272FskSetRssiOffset>:
    SX1272Read( REG_PARAMP, &SX1272->RegPaRamp );
    return SX1272->RegPaRamp & ~RF_PARAMP_MASK;
}

void SX1272FskSetRssiOffset( int8_t offset )
{
   10a74:	b580      	push	{r7, lr}
   10a76:	b082      	sub	sp, #8
   10a78:	af00      	add	r7, sp, #0
   10a7a:	1c02      	adds	r2, r0, #0
   10a7c:	1dfb      	adds	r3, r7, #7
   10a7e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_RSSICONFIG, &SX1272->RegRssiConfig );
   10a80:	4b1a      	ldr	r3, [pc, #104]	; (10aec <SX1272FskSetRssiOffset+0x78>)
   10a82:	681b      	ldr	r3, [r3, #0]
   10a84:	330e      	adds	r3, #14
   10a86:	200e      	movs	r0, #14
   10a88:	1c19      	adds	r1, r3, #0
   10a8a:	4b19      	ldr	r3, [pc, #100]	; (10af0 <SX1272FskSetRssiOffset+0x7c>)
   10a8c:	4798      	blx	r3
    if( offset < 0 )
   10a8e:	1dfb      	adds	r3, r7, #7
   10a90:	781b      	ldrb	r3, [r3, #0]
   10a92:	2b7f      	cmp	r3, #127	; 0x7f
   10a94:	d914      	bls.n	10ac0 <SX1272FskSetRssiOffset+0x4c>
    {
        offset = ( ~offset & 0x1F );
   10a96:	1dfb      	adds	r3, r7, #7
   10a98:	781b      	ldrb	r3, [r3, #0]
   10a9a:	43db      	mvns	r3, r3
   10a9c:	b2da      	uxtb	r2, r3
   10a9e:	1dfb      	adds	r3, r7, #7
   10aa0:	1c11      	adds	r1, r2, #0
   10aa2:	221f      	movs	r2, #31
   10aa4:	400a      	ands	r2, r1
   10aa6:	701a      	strb	r2, [r3, #0]
        offset += 1;
   10aa8:	1dfb      	adds	r3, r7, #7
   10aaa:	781b      	ldrb	r3, [r3, #0]
   10aac:	3301      	adds	r3, #1
   10aae:	b2da      	uxtb	r2, r3
   10ab0:	1dfb      	adds	r3, r7, #7
   10ab2:	701a      	strb	r2, [r3, #0]
        offset = -offset;
   10ab4:	1dfb      	adds	r3, r7, #7
   10ab6:	781b      	ldrb	r3, [r3, #0]
   10ab8:	425b      	negs	r3, r3
   10aba:	b2da      	uxtb	r2, r3
   10abc:	1dfb      	adds	r3, r7, #7
   10abe:	701a      	strb	r2, [r3, #0]
    }
    SX1272->RegRssiConfig |= ( uint8_t )( ( offset & 0x1F ) << 3 );
   10ac0:	4b0a      	ldr	r3, [pc, #40]	; (10aec <SX1272FskSetRssiOffset+0x78>)
   10ac2:	681a      	ldr	r2, [r3, #0]
   10ac4:	4b09      	ldr	r3, [pc, #36]	; (10aec <SX1272FskSetRssiOffset+0x78>)
   10ac6:	681b      	ldr	r3, [r3, #0]
   10ac8:	7b99      	ldrb	r1, [r3, #14]
   10aca:	1dfb      	adds	r3, r7, #7
   10acc:	781b      	ldrb	r3, [r3, #0]
   10ace:	00db      	lsls	r3, r3, #3
   10ad0:	b2db      	uxtb	r3, r3
   10ad2:	430b      	orrs	r3, r1
   10ad4:	b2db      	uxtb	r3, r3
   10ad6:	7393      	strb	r3, [r2, #14]
    SX1272Write( REG_RSSICONFIG, SX1272->RegRssiConfig );
   10ad8:	4b04      	ldr	r3, [pc, #16]	; (10aec <SX1272FskSetRssiOffset+0x78>)
   10ada:	681b      	ldr	r3, [r3, #0]
   10adc:	7b9b      	ldrb	r3, [r3, #14]
   10ade:	200e      	movs	r0, #14
   10ae0:	1c19      	adds	r1, r3, #0
   10ae2:	4b04      	ldr	r3, [pc, #16]	; (10af4 <SX1272FskSetRssiOffset+0x80>)
   10ae4:	4798      	blx	r3
}
   10ae6:	46bd      	mov	sp, r7
   10ae8:	b002      	add	sp, #8
   10aea:	bd80      	pop	{r7, pc}
   10aec:	20003700 	.word	0x20003700
   10af0:	00011981 	.word	0x00011981
   10af4:	0001194d 	.word	0x0001194d

00010af8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   10af8:	b580      	push	{r7, lr}
   10afa:	b082      	sub	sp, #8
   10afc:	af00      	add	r7, sp, #0
   10afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   10b00:	687b      	ldr	r3, [r7, #4]
   10b02:	2200      	movs	r2, #0
   10b04:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   10b06:	687b      	ldr	r3, [r7, #4]
   10b08:	2200      	movs	r2, #0
   10b0a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   10b0c:	687b      	ldr	r3, [r7, #4]
   10b0e:	2201      	movs	r2, #1
   10b10:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   10b12:	687b      	ldr	r3, [r7, #4]
   10b14:	2201      	movs	r2, #1
   10b16:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   10b18:	687b      	ldr	r3, [r7, #4]
   10b1a:	2200      	movs	r2, #0
   10b1c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   10b1e:	687b      	ldr	r3, [r7, #4]
   10b20:	2202      	movs	r2, #2
   10b22:	72da      	strb	r2, [r3, #11]
}
   10b24:	46bd      	mov	sp, r7
   10b26:	b002      	add	sp, #8
   10b28:	bd80      	pop	{r7, pc}
   10b2a:	46c0      	nop			; (mov r8, r8)

00010b2c <SX1272LoRaInit>:
//------------------------------------------------------------------------------
// This function
//
//==============================================================================
void SX1272LoRaInit( void )
{
   10b2c:	b580      	push	{r7, lr}
   10b2e:	af00      	add	r7, sp, #0
    RFLRState = RFLR_STATE_IDLE;
   10b30:	4b46      	ldr	r3, [pc, #280]	; (10c4c <SX1272LoRaInit+0x120>)
   10b32:	2200      	movs	r2, #0
   10b34:	701a      	strb	r2, [r3, #0]

	//------------------------
	// read the base buffer from the radio
	//------------------------
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10b36:	4b46      	ldr	r3, [pc, #280]	; (10c50 <SX1272LoRaInit+0x124>)
   10b38:	2001      	movs	r0, #1
   10b3a:	1c19      	adds	r1, r3, #0
   10b3c:	226f      	movs	r2, #111	; 0x6f
   10b3e:	4b45      	ldr	r3, [pc, #276]	; (10c54 <SX1272LoRaInit+0x128>)
   10b40:	4798      	blx	r3
	//beth     SX1272WriteBuffer( REG_OPMODE, &FSK_DEFAULT[1], 0x70 - 1 );
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10b42:	4b43      	ldr	r3, [pc, #268]	; (10c50 <SX1272LoRaInit+0x124>)
   10b44:	2001      	movs	r0, #1
   10b46:	1c19      	adds	r1, r3, #0
   10b48:	226f      	movs	r2, #111	; 0x6f
   10b4a:	4b42      	ldr	r3, [pc, #264]	; (10c54 <SX1272LoRaInit+0x128>)
   10b4c:	4798      	blx	r3
 
 	//----------------------------------------------
    // Set the device in FSK mode and Sleep Mode
	//----------------------------------------------
	//horton boc
    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
   10b4e:	2000      	movs	r0, #0
   10b50:	4b41      	ldr	r3, [pc, #260]	; (10c58 <SX1272LoRaInit+0x12c>)
   10b52:	4798      	blx	r3
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
   10b54:	4b41      	ldr	r3, [pc, #260]	; (10c5c <SX1272LoRaInit+0x130>)
   10b56:	681a      	ldr	r2, [r3, #0]
   10b58:	4b40      	ldr	r3, [pc, #256]	; (10c5c <SX1272LoRaInit+0x130>)
   10b5a:	681b      	ldr	r3, [r3, #0]
   10b5c:	785b      	ldrb	r3, [r3, #1]
   10b5e:	2180      	movs	r1, #128	; 0x80
   10b60:	4249      	negs	r1, r1
   10b62:	430b      	orrs	r3, r1
   10b64:	b2db      	uxtb	r3, r3
   10b66:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );    
   10b68:	4b3c      	ldr	r3, [pc, #240]	; (10c5c <SX1272LoRaInit+0x130>)
   10b6a:	681b      	ldr	r3, [r3, #0]
   10b6c:	785b      	ldrb	r3, [r3, #1]
   10b6e:	2001      	movs	r0, #1
   10b70:	1c19      	adds	r1, r3, #0
   10b72:	4b3b      	ldr	r3, [pc, #236]	; (10c60 <SX1272LoRaInit+0x134>)
   10b74:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );  	
   10b76:	4b36      	ldr	r3, [pc, #216]	; (10c50 <SX1272LoRaInit+0x124>)
   10b78:	2001      	movs	r0, #1
   10b7a:	1c19      	adds	r1, r3, #0
   10b7c:	226f      	movs	r2, #111	; 0x6f
   10b7e:	4b35      	ldr	r3, [pc, #212]	; (10c54 <SX1272LoRaInit+0x128>)
   10b80:	4798      	blx	r3
	//horton eoc
    //--------------------------------------
    // Then we initialize the device register
    // structure with the value of our setup
    //--------------------------------------
    SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & ~RFLR_PACONFIG_PASELECT_PABOOST ) |
   10b82:	4b36      	ldr	r3, [pc, #216]	; (10c5c <SX1272LoRaInit+0x130>)
   10b84:	681a      	ldr	r2, [r3, #0]
   10b86:	4b35      	ldr	r3, [pc, #212]	; (10c5c <SX1272LoRaInit+0x130>)
   10b88:	681b      	ldr	r3, [r3, #0]
   10b8a:	7a5b      	ldrb	r3, [r3, #9]
   10b8c:	2180      	movs	r1, #128	; 0x80
   10b8e:	4249      	negs	r1, r1
   10b90:	430b      	orrs	r3, r1
   10b92:	b2db      	uxtb	r3, r3
   10b94:	7253      	strb	r3, [r2, #9]
                            RFLR_PACONFIG_PASELECT_PABOOST;
    SX1272LR->RegLna = RFLR_LNA_GAIN_G1 | RFLR_LNA_BOOST_ON;
   10b96:	4b31      	ldr	r3, [pc, #196]	; (10c5c <SX1272LoRaInit+0x130>)
   10b98:	681b      	ldr	r3, [r3, #0]
   10b9a:	2223      	movs	r2, #35	; 0x23
   10b9c:	731a      	strb	r2, [r3, #12]

    SX1272WriteBuffer( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );
   10b9e:	4b2c      	ldr	r3, [pc, #176]	; (10c50 <SX1272LoRaInit+0x124>)
   10ba0:	2001      	movs	r0, #1
   10ba2:	1c19      	adds	r1, r3, #0
   10ba4:	226f      	movs	r2, #111	; 0x6f
   10ba6:	4b2f      	ldr	r3, [pc, #188]	; (10c64 <SX1272LoRaInit+0x138>)
   10ba8:	4798      	blx	r3
	
    // set the RF settings 
    SX1272LoRaSetRFFrequency( LoRaSettings.RFFrequency );
   10baa:	4b2f      	ldr	r3, [pc, #188]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bac:	681b      	ldr	r3, [r3, #0]
   10bae:	1c18      	adds	r0, r3, #0
   10bb0:	4b2e      	ldr	r3, [pc, #184]	; (10c6c <SX1272LoRaInit+0x140>)
   10bb2:	4798      	blx	r3
    SX1272LoRaSetPa20dBm( true );
   10bb4:	2001      	movs	r0, #1
   10bb6:	4b2e      	ldr	r3, [pc, #184]	; (10c70 <SX1272LoRaInit+0x144>)
   10bb8:	4798      	blx	r3
    SX1272LoRaSetRFPower( LoRaSettings.Power );
   10bba:	4b2b      	ldr	r3, [pc, #172]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bbc:	791b      	ldrb	r3, [r3, #4]
   10bbe:	b25b      	sxtb	r3, r3
   10bc0:	1c18      	adds	r0, r3, #0
   10bc2:	4b2c      	ldr	r3, [pc, #176]	; (10c74 <SX1272LoRaInit+0x148>)
   10bc4:	4798      	blx	r3
    SX1272LoRaSetSpreadingFactor( LoRaSettings.SpreadingFactor ); // SF6 only operates in implicit header mode.
   10bc6:	4b28      	ldr	r3, [pc, #160]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bc8:	799b      	ldrb	r3, [r3, #6]
   10bca:	1c18      	adds	r0, r3, #0
   10bcc:	4b2a      	ldr	r3, [pc, #168]	; (10c78 <SX1272LoRaInit+0x14c>)
   10bce:	4798      	blx	r3
    SX1272LoRaSetErrorCoding( LoRaSettings.ErrorCoding );
   10bd0:	4b25      	ldr	r3, [pc, #148]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bd2:	79db      	ldrb	r3, [r3, #7]
   10bd4:	1c18      	adds	r0, r3, #0
   10bd6:	4b29      	ldr	r3, [pc, #164]	; (10c7c <SX1272LoRaInit+0x150>)
   10bd8:	4798      	blx	r3
    SX1272LoRaSetPacketCrcOn( LoRaSettings.CrcOn );
   10bda:	4b23      	ldr	r3, [pc, #140]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bdc:	7a1b      	ldrb	r3, [r3, #8]
   10bde:	1c18      	adds	r0, r3, #0
   10be0:	4b27      	ldr	r3, [pc, #156]	; (10c80 <SX1272LoRaInit+0x154>)
   10be2:	4798      	blx	r3
    SX1272LoRaSetSignalBandwidth( LoRaSettings.SignalBw );
   10be4:	4b20      	ldr	r3, [pc, #128]	; (10c68 <SX1272LoRaInit+0x13c>)
   10be6:	795b      	ldrb	r3, [r3, #5]
   10be8:	1c18      	adds	r0, r3, #0
   10bea:	4b26      	ldr	r3, [pc, #152]	; (10c84 <SX1272LoRaInit+0x158>)
   10bec:	4798      	blx	r3
    
    SX1272LoRaSetImplicitHeaderOn( LoRaSettings.ImplicitHeaderOn );
   10bee:	4b1e      	ldr	r3, [pc, #120]	; (10c68 <SX1272LoRaInit+0x13c>)
   10bf0:	7a5b      	ldrb	r3, [r3, #9]
   10bf2:	1c18      	adds	r0, r3, #0
   10bf4:	4b24      	ldr	r3, [pc, #144]	; (10c88 <SX1272LoRaInit+0x15c>)
   10bf6:	4798      	blx	r3
    SX1272LoRaSetSymbTimeout( 0x3FF );
   10bf8:	4b24      	ldr	r3, [pc, #144]	; (10c8c <SX1272LoRaInit+0x160>)
   10bfa:	1c18      	adds	r0, r3, #0
   10bfc:	4b24      	ldr	r3, [pc, #144]	; (10c90 <SX1272LoRaInit+0x164>)
   10bfe:	4798      	blx	r3
    SX1272LoRaSetPayloadLength( LoRaSettings.PayloadLength );
   10c00:	4b19      	ldr	r3, [pc, #100]	; (10c68 <SX1272LoRaInit+0x13c>)
   10c02:	7e1b      	ldrb	r3, [r3, #24]
   10c04:	1c18      	adds	r0, r3, #0
   10c06:	4b23      	ldr	r3, [pc, #140]	; (10c94 <SX1272LoRaInit+0x168>)
   10c08:	4798      	blx	r3
    SX1272LoRaSetLowDatarateOptimize( true );
   10c0a:	2001      	movs	r0, #1
   10c0c:	4b22      	ldr	r3, [pc, #136]	; (10c98 <SX1272LoRaInit+0x16c>)
   10c0e:	4798      	blx	r3
	
 
	if (setCW != 0)
   10c10:	4b22      	ldr	r3, [pc, #136]	; (10c9c <SX1272LoRaInit+0x170>)
   10c12:	781b      	ldrb	r3, [r3, #0]
   10c14:	2b00      	cmp	r3, #0
   10c16:	d003      	beq.n	10c20 <SX1272LoRaInit+0xf4>
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON);
   10c18:	2008      	movs	r0, #8
   10c1a:	4b21      	ldr	r3, [pc, #132]	; (10ca0 <SX1272LoRaInit+0x174>)
   10c1c:	4798      	blx	r3
   10c1e:	e002      	b.n	10c26 <SX1272LoRaInit+0xfa>
	}
	else
	{
		SX1272LoRaSetContinuousTx(RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF);
   10c20:	2000      	movs	r0, #0
   10c22:	4b1f      	ldr	r3, [pc, #124]	; (10ca0 <SX1272LoRaInit+0x174>)
   10c24:	4798      	blx	r3
	}

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10c26:	2001      	movs	r0, #1
   10c28:	4b0b      	ldr	r3, [pc, #44]	; (10c58 <SX1272LoRaInit+0x12c>)
   10c2a:	4798      	blx	r3
	SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs+1, 0x70 - 1 );		
   10c2c:	4b08      	ldr	r3, [pc, #32]	; (10c50 <SX1272LoRaInit+0x124>)
   10c2e:	2001      	movs	r0, #1
   10c30:	1c19      	adds	r1, r3, #0
   10c32:	226f      	movs	r2, #111	; 0x6f
   10c34:	4b07      	ldr	r3, [pc, #28]	; (10c54 <SX1272LoRaInit+0x128>)
   10c36:	4798      	blx	r3
	
	if (setCW != 0)
   10c38:	4b18      	ldr	r3, [pc, #96]	; (10c9c <SX1272LoRaInit+0x170>)
   10c3a:	781b      	ldrb	r3, [r3, #0]
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	d002      	beq.n	10c46 <SX1272LoRaInit+0x11a>
	{
		SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER);
   10c40:	2003      	movs	r0, #3
   10c42:	4b05      	ldr	r3, [pc, #20]	; (10c58 <SX1272LoRaInit+0x12c>)
   10c44:	4798      	blx	r3
	}
}
   10c46:	46bd      	mov	sp, r7
   10c48:	bd80      	pop	{r7, pc}
   10c4a:	46c0      	nop			; (mov r8, r8)
   10c4c:	200004ee 	.word	0x200004ee
   10c50:	20003909 	.word	0x20003909
   10c54:	000119f5 	.word	0x000119f5
   10c58:	00010ca5 	.word	0x00010ca5
   10c5c:	20003804 	.word	0x20003804
   10c60:	0001194d 	.word	0x0001194d
   10c64:	000119bd 	.word	0x000119bd
   10c68:	20000028 	.word	0x20000028
   10c6c:	000111f1 	.word	0x000111f1
   10c70:	00011669 	.word	0x00011669
   10c74:	00011281 	.word	0x00011281
   10c78:	00011449 	.word	0x00011449
   10c7c:	000114ed 	.word	0x000114ed
   10c80:	00011555 	.word	0x00011555
   10c84:	000113dd 	.word	0x000113dd
   10c88:	000115bd 	.word	0x000115bd
   10c8c:	000003ff 	.word	0x000003ff
   10c90:	00011725 	.word	0x00011725
   10c94:	00011625 	.word	0x00011625
   10c98:	0001179d 	.word	0x0001179d
   10c9c:	20003690 	.word	0x20003690
   10ca0:	000116c5 	.word	0x000116c5

00010ca4 <SX1272LoRaSetOpMode>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272LoRaSetOpMode( uint8_t opMode )
{
   10ca4:	b580      	push	{r7, lr}
   10ca6:	b082      	sub	sp, #8
   10ca8:	af00      	add	r7, sp, #0
   10caa:	1c02      	adds	r2, r0, #0
   10cac:	1dfb      	adds	r3, r7, #7
   10cae:	701a      	strb	r2, [r3, #0]
   
    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_MASK ) | opMode;
   10cb0:	4b0c      	ldr	r3, [pc, #48]	; (10ce4 <SX1272LoRaSetOpMode+0x40>)
   10cb2:	681a      	ldr	r2, [r3, #0]
   10cb4:	4b0b      	ldr	r3, [pc, #44]	; (10ce4 <SX1272LoRaSetOpMode+0x40>)
   10cb6:	681b      	ldr	r3, [r3, #0]
   10cb8:	785b      	ldrb	r3, [r3, #1]
   10cba:	b2db      	uxtb	r3, r3
   10cbc:	2107      	movs	r1, #7
   10cbe:	438b      	bics	r3, r1
   10cc0:	b2d9      	uxtb	r1, r3
   10cc2:	1dfb      	adds	r3, r7, #7
   10cc4:	781b      	ldrb	r3, [r3, #0]
   10cc6:	430b      	orrs	r3, r1
   10cc8:	b2db      	uxtb	r3, r3
   10cca:	b2db      	uxtb	r3, r3
   10ccc:	7053      	strb	r3, [r2, #1]
    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );        
   10cce:	4b05      	ldr	r3, [pc, #20]	; (10ce4 <SX1272LoRaSetOpMode+0x40>)
   10cd0:	681b      	ldr	r3, [r3, #0]
   10cd2:	785b      	ldrb	r3, [r3, #1]
   10cd4:	2001      	movs	r0, #1
   10cd6:	1c19      	adds	r1, r3, #0
   10cd8:	4b03      	ldr	r3, [pc, #12]	; (10ce8 <SX1272LoRaSetOpMode+0x44>)
   10cda:	4798      	blx	r3
}
   10cdc:	46bd      	mov	sp, r7
   10cde:	b002      	add	sp, #8
   10ce0:	bd80      	pop	{r7, pc}
   10ce2:	46c0      	nop			; (mov r8, r8)
   10ce4:	20003804 	.word	0x20003804
   10ce8:	0001194d 	.word	0x0001194d

00010cec <configure_extintLORA_channel>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_channel(void)
{
   10cec:	b580      	push	{r7, lr}
   10cee:	b084      	sub	sp, #16
   10cf0:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   10cf2:	1d3b      	adds	r3, r7, #4
   10cf4:	1c18      	adds	r0, r3, #0
   10cf6:	4b0b      	ldr	r3, [pc, #44]	; (10d24 <configure_extintLORA_channel+0x38>)
   10cf8:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB09A_EIC_EXTINT9;  //PIN_PB31A_EIC_EXTINT15;
   10cfa:	1d3b      	adds	r3, r7, #4
   10cfc:	2229      	movs	r2, #41	; 0x29
   10cfe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MUX_PB09A_EIC_EXTINT9;  // MUX_PB31A_EIC_EXTINT15;
   10d00:	1d3b      	adds	r3, r7, #4
   10d02:	2200      	movs	r2, #0
   10d04:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   10d06:	1d3b      	adds	r3, r7, #4
   10d08:	2201      	movs	r2, #1
   10d0a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING; //EXTINT_DETECT_BOTH;
   10d0c:	1d3b      	adds	r3, r7, #4
   10d0e:	2201      	movs	r2, #1
   10d10:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(9, &config_extint_chan);  //15
   10d12:	1d3b      	adds	r3, r7, #4
   10d14:	2009      	movs	r0, #9
   10d16:	1c19      	adds	r1, r3, #0
   10d18:	4b03      	ldr	r3, [pc, #12]	; (10d28 <configure_extintLORA_channel+0x3c>)
   10d1a:	4798      	blx	r3
}
   10d1c:	46bd      	mov	sp, r7
   10d1e:	b004      	add	sp, #16
   10d20:	bd80      	pop	{r7, pc}
   10d22:	46c0      	nop			; (mov r8, r8)
   10d24:	00010af9 	.word	0x00010af9
   10d28:	0000406d 	.word	0x0000406d

00010d2c <configure_extintLORA_callbacks>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void configure_extintLORA_callbacks(void)
{
   10d2c:	b580      	push	{r7, lr}
   10d2e:	af00      	add	r7, sp, #0
	extint_register_callback(extintLORA_detection_callback,9,EXTINT_CALLBACK_TYPE_DETECT);
   10d30:	4b05      	ldr	r3, [pc, #20]	; (10d48 <configure_extintLORA_callbacks+0x1c>)
   10d32:	1c18      	adds	r0, r3, #0
   10d34:	2109      	movs	r1, #9
   10d36:	2200      	movs	r2, #0
   10d38:	4b04      	ldr	r3, [pc, #16]	; (10d4c <configure_extintLORA_callbacks+0x20>)
   10d3a:	4798      	blx	r3
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
   10d3c:	2009      	movs	r0, #9
   10d3e:	2100      	movs	r1, #0
   10d40:	4b03      	ldr	r3, [pc, #12]	; (10d50 <configure_extintLORA_callbacks+0x24>)
   10d42:	4798      	blx	r3
}
   10d44:	46bd      	mov	sp, r7
   10d46:	bd80      	pop	{r7, pc}
   10d48:	00010d55 	.word	0x00010d55
   10d4c:	00004239 	.word	0x00004239
   10d50:	00004295 	.word	0x00004295

00010d54 <extintLORA_detection_callback>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void extintLORA_detection_callback(void)
{
   10d54:	b580      	push	{r7, lr}
   10d56:	af00      	add	r7, sp, #0
	//	bool pin_state = port_pin_get_input_level(TPS_IRQ);
	schedByte |= SCHEDBYTE_RFLORA;
   10d58:	4b07      	ldr	r3, [pc, #28]	; (10d78 <extintLORA_detection_callback+0x24>)
   10d5a:	681b      	ldr	r3, [r3, #0]
   10d5c:	2280      	movs	r2, #128	; 0x80
   10d5e:	00d2      	lsls	r2, r2, #3
   10d60:	431a      	orrs	r2, r3
   10d62:	4b05      	ldr	r3, [pc, #20]	; (10d78 <extintLORA_detection_callback+0x24>)
   10d64:	601a      	str	r2, [r3, #0]
	schedByte |= SCHEDBYTE_RFFSK;
   10d66:	4b04      	ldr	r3, [pc, #16]	; (10d78 <extintLORA_detection_callback+0x24>)
   10d68:	681b      	ldr	r3, [r3, #0]
   10d6a:	2280      	movs	r2, #128	; 0x80
   10d6c:	0092      	lsls	r2, r2, #2
   10d6e:	431a      	orrs	r2, r3
   10d70:	4b01      	ldr	r3, [pc, #4]	; (10d78 <extintLORA_detection_callback+0x24>)
   10d72:	601a      	str	r2, [r3, #0]
}
   10d74:	46bd      	mov	sp, r7
   10d76:	bd80      	pop	{r7, pc}
   10d78:	2000369c 	.word	0x2000369c

00010d7c <AppLoraTask>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraTask(void)
{
   10d7c:	b580      	push	{r7, lr}
   10d7e:	af00      	add	r7, sp, #0
		
	if ((setCW == 0)&&(setRXContinuous==0)&&(whichRadio == WHICHRADIO_LORA))
   10d80:	4b6a      	ldr	r3, [pc, #424]	; (10f2c <AppLoraTask+0x1b0>)
   10d82:	781b      	ldrb	r3, [r3, #0]
   10d84:	2b00      	cmp	r3, #0
   10d86:	d000      	beq.n	10d8a <AppLoraTask+0xe>
   10d88:	e0ce      	b.n	10f28 <AppLoraTask+0x1ac>
   10d8a:	4b69      	ldr	r3, [pc, #420]	; (10f30 <AppLoraTask+0x1b4>)
   10d8c:	781b      	ldrb	r3, [r3, #0]
   10d8e:	2b00      	cmp	r3, #0
   10d90:	d000      	beq.n	10d94 <AppLoraTask+0x18>
   10d92:	e0c9      	b.n	10f28 <AppLoraTask+0x1ac>
   10d94:	4b67      	ldr	r3, [pc, #412]	; (10f34 <AppLoraTask+0x1b8>)
   10d96:	781b      	ldrb	r3, [r3, #0]
   10d98:	2b99      	cmp	r3, #153	; 0x99
   10d9a:	d000      	beq.n	10d9e <AppLoraTask+0x22>
   10d9c:	e0c4      	b.n	10f28 <AppLoraTask+0x1ac>
	{	 
		if (whichRadio == WHICHRADIO_LORA)
   10d9e:	4b65      	ldr	r3, [pc, #404]	; (10f34 <AppLoraTask+0x1b8>)
   10da0:	781b      	ldrb	r3, [r3, #0]
   10da2:	2b99      	cmp	r3, #153	; 0x99
   10da4:	d000      	beq.n	10da8 <AppLoraTask+0x2c>
   10da6:	e0bf      	b.n	10f28 <AppLoraTask+0x1ac>
		{	
			SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
   10da8:	4b63      	ldr	r3, [pc, #396]	; (10f38 <AppLoraTask+0x1bc>)
   10daa:	681b      	ldr	r3, [r3, #0]
   10dac:	3312      	adds	r3, #18
   10dae:	2012      	movs	r0, #18
   10db0:	1c19      	adds	r1, r3, #0
   10db2:	4b62      	ldr	r3, [pc, #392]	; (10f3c <AppLoraTask+0x1c0>)
   10db4:	4798      	blx	r3
			//----------------------------
			/// see if RX DONE for a receive event 
			//----------------------------
 			if (((SX1272LR->RegIrqFlags & 0x40)!= 0) && (setTXContinuous==0))
   10db6:	4b60      	ldr	r3, [pc, #384]	; (10f38 <AppLoraTask+0x1bc>)
   10db8:	681b      	ldr	r3, [r3, #0]
   10dba:	7c9b      	ldrb	r3, [r3, #18]
   10dbc:	1c1a      	adds	r2, r3, #0
   10dbe:	2340      	movs	r3, #64	; 0x40
   10dc0:	4013      	ands	r3, r2
   10dc2:	d100      	bne.n	10dc6 <AppLoraTask+0x4a>
   10dc4:	e07a      	b.n	10ebc <AppLoraTask+0x140>
   10dc6:	4b5e      	ldr	r3, [pc, #376]	; (10f40 <AppLoraTask+0x1c4>)
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d176      	bne.n	10ebc <AppLoraTask+0x140>
 			{ 		
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
   10dce:	2012      	movs	r0, #18
   10dd0:	2140      	movs	r1, #64	; 0x40
   10dd2:	4b5c      	ldr	r3, [pc, #368]	; (10f44 <AppLoraTask+0x1c8>)
   10dd4:	4798      	blx	r3
				RFLRState = RFLR_STATE_RX_DONE;		
   10dd6:	4b5c      	ldr	r3, [pc, #368]	; (10f48 <AppLoraTask+0x1cc>)
   10dd8:	2203      	movs	r2, #3
   10dda:	701a      	strb	r2, [r3, #0]
		
				loraReceiveCount++;
   10ddc:	4b5b      	ldr	r3, [pc, #364]	; (10f4c <AppLoraTask+0x1d0>)
   10dde:	881b      	ldrh	r3, [r3, #0]
   10de0:	3301      	adds	r3, #1
   10de2:	b29a      	uxth	r2, r3
   10de4:	4b59      	ldr	r3, [pc, #356]	; (10f4c <AppLoraTask+0x1d0>)
   10de6:	801a      	strh	r2, [r3, #0]
				SX1272Read( REG_LR_FIFORXCURRENTADDR, &SX1272LR->RegFifoRxCurrentAddr );
   10de8:	4b53      	ldr	r3, [pc, #332]	; (10f38 <AppLoraTask+0x1bc>)
   10dea:	681b      	ldr	r3, [r3, #0]
   10dec:	3310      	adds	r3, #16
   10dee:	2010      	movs	r0, #16
   10df0:	1c19      	adds	r1, r3, #0
   10df2:	4b52      	ldr	r3, [pc, #328]	; (10f3c <AppLoraTask+0x1c0>)
   10df4:	4798      	blx	r3

 
				SX1272Read( REG_LR_NBRXBYTES, &SX1272LR->RegNbRxBytes );
   10df6:	4b50      	ldr	r3, [pc, #320]	; (10f38 <AppLoraTask+0x1bc>)
   10df8:	681b      	ldr	r3, [r3, #0]
   10dfa:	3313      	adds	r3, #19
   10dfc:	2013      	movs	r0, #19
   10dfe:	1c19      	adds	r1, r3, #0
   10e00:	4b4e      	ldr	r3, [pc, #312]	; (10f3c <AppLoraTask+0x1c0>)
   10e02:	4798      	blx	r3
				RxPacketSize = SX1272LR->RegNbRxBytes;
   10e04:	4b4c      	ldr	r3, [pc, #304]	; (10f38 <AppLoraTask+0x1bc>)
   10e06:	681b      	ldr	r3, [r3, #0]
   10e08:	7cdb      	ldrb	r3, [r3, #19]
   10e0a:	1c1a      	adds	r2, r3, #0
   10e0c:	4b50      	ldr	r3, [pc, #320]	; (10f50 <AppLoraTask+0x1d4>)
   10e0e:	801a      	strh	r2, [r3, #0]
				RFBufferLora[0] = RxPacketSize; 
   10e10:	4b4f      	ldr	r3, [pc, #316]	; (10f50 <AppLoraTask+0x1d4>)
   10e12:	881b      	ldrh	r3, [r3, #0]
   10e14:	b2da      	uxtb	r2, r3
   10e16:	4b4f      	ldr	r3, [pc, #316]	; (10f54 <AppLoraTask+0x1d8>)
   10e18:	701a      	strb	r2, [r3, #0]
				SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxCurrentAddr;
   10e1a:	4b47      	ldr	r3, [pc, #284]	; (10f38 <AppLoraTask+0x1bc>)
   10e1c:	681a      	ldr	r2, [r3, #0]
   10e1e:	4b46      	ldr	r3, [pc, #280]	; (10f38 <AppLoraTask+0x1bc>)
   10e20:	681b      	ldr	r3, [r3, #0]
   10e22:	7c1b      	ldrb	r3, [r3, #16]
   10e24:	7353      	strb	r3, [r2, #13]
				SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   10e26:	4b44      	ldr	r3, [pc, #272]	; (10f38 <AppLoraTask+0x1bc>)
   10e28:	681b      	ldr	r3, [r3, #0]
   10e2a:	7b5b      	ldrb	r3, [r3, #13]
   10e2c:	200d      	movs	r0, #13
   10e2e:	1c19      	adds	r1, r3, #0
   10e30:	4b44      	ldr	r3, [pc, #272]	; (10f44 <AppLoraTask+0x1c8>)
   10e32:	4798      	blx	r3
				SX1272ReadFifo( RFBufferLora+1, SX1272LR->RegNbRxBytes );
   10e34:	4b40      	ldr	r3, [pc, #256]	; (10f38 <AppLoraTask+0x1bc>)
   10e36:	681b      	ldr	r3, [r3, #0]
   10e38:	7cdb      	ldrb	r3, [r3, #19]
   10e3a:	4a47      	ldr	r2, [pc, #284]	; (10f58 <AppLoraTask+0x1dc>)
   10e3c:	1c10      	adds	r0, r2, #0
   10e3e:	1c19      	adds	r1, r3, #0
   10e40:	4b46      	ldr	r3, [pc, #280]	; (10f5c <AppLoraTask+0x1e0>)
   10e42:	4798      	blx	r3
 
				if (testRFBufferOffset >= MAXPACKETS2)
   10e44:	4b46      	ldr	r3, [pc, #280]	; (10f60 <AppLoraTask+0x1e4>)
   10e46:	781b      	ldrb	r3, [r3, #0]
   10e48:	2b03      	cmp	r3, #3
   10e4a:	d902      	bls.n	10e52 <AppLoraTask+0xd6>
				{
					testRFBufferOffset = 0; 
   10e4c:	4b44      	ldr	r3, [pc, #272]	; (10f60 <AppLoraTask+0x1e4>)
   10e4e:	2200      	movs	r2, #0
   10e50:	701a      	strb	r2, [r3, #0]
				}
				testRFBuffer[testRFBufferOffset].Length = RFBufferLora[1];  //0];
   10e52:	4b43      	ldr	r3, [pc, #268]	; (10f60 <AppLoraTask+0x1e4>)
   10e54:	781b      	ldrb	r3, [r3, #0]
   10e56:	1c1a      	adds	r2, r3, #0
   10e58:	4b3e      	ldr	r3, [pc, #248]	; (10f54 <AppLoraTask+0x1d8>)
   10e5a:	7858      	ldrb	r0, [r3, #1]
   10e5c:	4941      	ldr	r1, [pc, #260]	; (10f64 <AppLoraTask+0x1e8>)
   10e5e:	1c13      	adds	r3, r2, #0
   10e60:	005b      	lsls	r3, r3, #1
   10e62:	189b      	adds	r3, r3, r2
   10e64:	1c02      	adds	r2, r0, #0
   10e66:	545a      	strb	r2, [r3, r1]
				testRFBuffer[testRFBufferOffset].Command[0] = RFBufferLora[3]; //2]; 
   10e68:	4b3d      	ldr	r3, [pc, #244]	; (10f60 <AppLoraTask+0x1e4>)
   10e6a:	781b      	ldrb	r3, [r3, #0]
   10e6c:	1c1a      	adds	r2, r3, #0
   10e6e:	4b39      	ldr	r3, [pc, #228]	; (10f54 <AppLoraTask+0x1d8>)
   10e70:	78d9      	ldrb	r1, [r3, #3]
   10e72:	483c      	ldr	r0, [pc, #240]	; (10f64 <AppLoraTask+0x1e8>)
   10e74:	1c13      	adds	r3, r2, #0
   10e76:	005b      	lsls	r3, r3, #1
   10e78:	189b      	adds	r3, r3, r2
   10e7a:	18c3      	adds	r3, r0, r3
   10e7c:	1c0a      	adds	r2, r1, #0
   10e7e:	705a      	strb	r2, [r3, #1]
				testRFBuffer[testRFBufferOffset].Command[1] = RFBufferLora[4]; //3]; 
   10e80:	4b37      	ldr	r3, [pc, #220]	; (10f60 <AppLoraTask+0x1e4>)
   10e82:	781b      	ldrb	r3, [r3, #0]
   10e84:	1c1a      	adds	r2, r3, #0
   10e86:	4b33      	ldr	r3, [pc, #204]	; (10f54 <AppLoraTask+0x1d8>)
   10e88:	7919      	ldrb	r1, [r3, #4]
   10e8a:	4836      	ldr	r0, [pc, #216]	; (10f64 <AppLoraTask+0x1e8>)
   10e8c:	1c13      	adds	r3, r2, #0
   10e8e:	005b      	lsls	r3, r3, #1
   10e90:	189b      	adds	r3, r3, r2
   10e92:	18c3      	adds	r3, r0, r3
   10e94:	3301      	adds	r3, #1
   10e96:	1c0a      	adds	r2, r1, #0
   10e98:	705a      	strb	r2, [r3, #1]
		#if REMOTEBOARD		
				AppScreenFSKReadingIn(&RFBufferLora[1],testRFBufferOffset);
		#endif		
				testRFBufferOffset++;	
   10e9a:	4b31      	ldr	r3, [pc, #196]	; (10f60 <AppLoraTask+0x1e4>)
   10e9c:	781b      	ldrb	r3, [r3, #0]
   10e9e:	3301      	adds	r3, #1
   10ea0:	b2da      	uxtb	r2, r3
   10ea2:	4b2f      	ldr	r3, [pc, #188]	; (10f60 <AppLoraTask+0x1e4>)
   10ea4:	701a      	strb	r2, [r3, #0]
				if (testRFBufferOffset >= MAXPACKETS2)
   10ea6:	4b2e      	ldr	r3, [pc, #184]	; (10f60 <AppLoraTask+0x1e4>)
   10ea8:	781b      	ldrb	r3, [r3, #0]
   10eaa:	2b03      	cmp	r3, #3
   10eac:	d902      	bls.n	10eb4 <AppLoraTask+0x138>
				{
					testRFBufferOffset = 0;
   10eae:	4b2c      	ldr	r3, [pc, #176]	; (10f60 <AppLoraTask+0x1e4>)
   10eb0:	2200      	movs	r2, #0
   10eb2:	701a      	strb	r2, [r3, #0]
				}	
		#if BRAKEBOARD		
				AppProtocolBrake(&RFBufferLora[1]);
   10eb4:	4b28      	ldr	r3, [pc, #160]	; (10f58 <AppLoraTask+0x1dc>)
   10eb6:	1c18      	adds	r0, r3, #0
   10eb8:	4b2b      	ldr	r3, [pc, #172]	; (10f68 <AppLoraTask+0x1ec>)
   10eba:	4798      	blx	r3
		#endif						
			}
			//----------------------------
			/// see if packetSent
			//----------------------------
 			if ((SX1272LR->RegIrqFlags & 0x08)!= 0)  
   10ebc:	4b1e      	ldr	r3, [pc, #120]	; (10f38 <AppLoraTask+0x1bc>)
   10ebe:	681b      	ldr	r3, [r3, #0]
   10ec0:	7c9b      	ldrb	r3, [r3, #18]
   10ec2:	1c1a      	adds	r2, r3, #0
   10ec4:	2308      	movs	r3, #8
   10ec6:	4013      	ands	r3, r2
   10ec8:	d02e      	beq.n	10f28 <AppLoraTask+0x1ac>
			{
				SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10eca:	2001      	movs	r0, #1
   10ecc:	4b27      	ldr	r3, [pc, #156]	; (10f6c <AppLoraTask+0x1f0>)
   10ece:	4798      	blx	r3
				SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE  );	
   10ed0:	2012      	movs	r0, #18
   10ed2:	2108      	movs	r1, #8
   10ed4:	4b1b      	ldr	r3, [pc, #108]	; (10f44 <AppLoraTask+0x1c8>)
   10ed6:	4798      	blx	r3
				//--------------------------------
				// set interrupt pin to processor
				SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
   10ed8:	4b17      	ldr	r3, [pc, #92]	; (10f38 <AppLoraTask+0x1bc>)
   10eda:	681a      	ldr	r2, [r3, #0]
   10edc:	233f      	movs	r3, #63	; 0x3f
   10ede:	2100      	movs	r1, #0
   10ee0:	54d1      	strb	r1, [r2, r3]
				SX1272LR->RegDioMapping2 = 0;
   10ee2:	4b15      	ldr	r3, [pc, #84]	; (10f38 <AppLoraTask+0x1bc>)
   10ee4:	681a      	ldr	r2, [r3, #0]
   10ee6:	2340      	movs	r3, #64	; 0x40
   10ee8:	2100      	movs	r1, #0
   10eea:	54d1      	strb	r1, [r2, r3]
				SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
   10eec:	4b12      	ldr	r3, [pc, #72]	; (10f38 <AppLoraTask+0x1bc>)
   10eee:	681b      	ldr	r3, [r3, #0]
   10ef0:	333f      	adds	r3, #63	; 0x3f
   10ef2:	2040      	movs	r0, #64	; 0x40
   10ef4:	1c19      	adds	r1, r3, #0
   10ef6:	2202      	movs	r2, #2
   10ef8:	4b1d      	ldr	r3, [pc, #116]	; (10f70 <AppLoraTask+0x1f4>)
   10efa:	4798      	blx	r3
				SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
   10efc:	2005      	movs	r0, #5
   10efe:	4b1b      	ldr	r3, [pc, #108]	; (10f6c <AppLoraTask+0x1f0>)
   10f00:	4798      	blx	r3
		#if REMOTEBOARD
				commSupTimer = COMM_SUP_TIME_REMOTE; 
		#endif		
				if (switchOnTransmit != 0)
   10f02:	4b1c      	ldr	r3, [pc, #112]	; (10f74 <AppLoraTask+0x1f8>)
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	2b00      	cmp	r3, #0
   10f08:	d008      	beq.n	10f1c <AppLoraTask+0x1a0>
				{
					whichRadio = switchOnTransmit; 
   10f0a:	4b1a      	ldr	r3, [pc, #104]	; (10f74 <AppLoraTask+0x1f8>)
   10f0c:	781a      	ldrb	r2, [r3, #0]
   10f0e:	4b09      	ldr	r3, [pc, #36]	; (10f34 <AppLoraTask+0x1b8>)
   10f10:	701a      	strb	r2, [r3, #0]
					CommInit();
   10f12:	4b19      	ldr	r3, [pc, #100]	; (10f78 <AppLoraTask+0x1fc>)
   10f14:	4798      	blx	r3
					switchOnTransmit = 0; 
   10f16:	4b17      	ldr	r3, [pc, #92]	; (10f74 <AppLoraTask+0x1f8>)
   10f18:	2200      	movs	r2, #0
   10f1a:	701a      	strb	r2, [r3, #0]
				}
				if (setTXContinuous!=0)
   10f1c:	4b08      	ldr	r3, [pc, #32]	; (10f40 <AppLoraTask+0x1c4>)
   10f1e:	781b      	ldrb	r3, [r3, #0]
   10f20:	2b00      	cmp	r3, #0
   10f22:	d001      	beq.n	10f28 <AppLoraTask+0x1ac>
				{
					SendOneMessage();
   10f24:	4b15      	ldr	r3, [pc, #84]	; (10f7c <AppLoraTask+0x200>)
   10f26:	4798      	blx	r3
				}
			}
		}
	}
}
   10f28:	46bd      	mov	sp, r7
   10f2a:	bd80      	pop	{r7, pc}
   10f2c:	20003690 	.word	0x20003690
   10f30:	20003691 	.word	0x20003691
   10f34:	200036d2 	.word	0x200036d2
   10f38:	20003804 	.word	0x20003804
   10f3c:	00011981 	.word	0x00011981
   10f40:	20003693 	.word	0x20003693
   10f44:	0001194d 	.word	0x0001194d
   10f48:	200004ee 	.word	0x200004ee
   10f4c:	200004f6 	.word	0x200004f6
   10f50:	200004f0 	.word	0x200004f0
   10f54:	20003808 	.word	0x20003808
   10f58:	20003809 	.word	0x20003809
   10f5c:	00011a55 	.word	0x00011a55
   10f60:	200004f8 	.word	0x200004f8
   10f64:	20003980 	.word	0x20003980
   10f68:	00009e81 	.word	0x00009e81
   10f6c:	00010ca5 	.word	0x00010ca5
   10f70:	000119bd 	.word	0x000119bd
   10f74:	200004d9 	.word	0x200004d9
   10f78:	0000f441 	.word	0x0000f441
   10f7c:	0000ae35 	.word	0x0000ae35

00010f80 <AppLoraReceiveStart>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void AppLoraReceiveStart(void)
{
   10f80:	b580      	push	{r7, lr}
   10f82:	af00      	add	r7, sp, #0
	 
 
 	//------------------------
	// set up receive.
	//------------------------
	SX1272Read(REG_LR_IRQFLAGS, &SX1272LR->RegIrqFlags);
   10f84:	4b39      	ldr	r3, [pc, #228]	; (1106c <AppLoraReceiveStart+0xec>)
   10f86:	681b      	ldr	r3, [r3, #0]
   10f88:	3312      	adds	r3, #18
   10f8a:	2012      	movs	r0, #18
   10f8c:	1c19      	adds	r1, r3, #0
   10f8e:	4b38      	ldr	r3, [pc, #224]	; (11070 <AppLoraReceiveStart+0xf0>)
   10f90:	4798      	blx	r3
    memset( RFBufferLora, 0, ( size_t )RF_BUFFER_SIZE );
   10f92:	4a38      	ldr	r2, [pc, #224]	; (11074 <AppLoraReceiveStart+0xf4>)
   10f94:	2380      	movs	r3, #128	; 0x80
   10f96:	005b      	lsls	r3, r3, #1
   10f98:	1c10      	adds	r0, r2, #0
   10f9a:	2100      	movs	r1, #0
   10f9c:	1c1a      	adds	r2, r3, #0
   10f9e:	4b36      	ldr	r3, [pc, #216]	; (11078 <AppLoraReceiveStart+0xf8>)
   10fa0:	4798      	blx	r3

	//---------------------------
	// enable the rf433 interrupt
	configure_extintLORA_channel();
   10fa2:	4b36      	ldr	r3, [pc, #216]	; (1107c <AppLoraReceiveStart+0xfc>)
   10fa4:	4798      	blx	r3
	configure_extintLORA_callbacks();
   10fa6:	4b36      	ldr	r3, [pc, #216]	; (11080 <AppLoraReceiveStart+0x100>)
   10fa8:	4798      	blx	r3

    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   10faa:	2001      	movs	r0, #1
   10fac:	4b35      	ldr	r3, [pc, #212]	; (11084 <AppLoraReceiveStart+0x104>)
   10fae:	4798      	blx	r3
 
	SX1272LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
   10fb0:	4b2e      	ldr	r3, [pc, #184]	; (1106c <AppLoraReceiveStart+0xec>)
   10fb2:	681b      	ldr	r3, [r3, #0]
   10fb4:	22b7      	movs	r2, #183	; 0xb7
   10fb6:	745a      	strb	r2, [r3, #17]
        RFLR_IRQFLAGS_VALIDHEADER |
        //RFLR_IRQFLAGS_TXDONE |
        RFLR_IRQFLAGS_CADDONE |
        RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
        RFLR_IRQFLAGS_CADDETECTED;
	SX1272Write( REG_LR_IRQFLAGSMASK, SX1272LR->RegIrqFlagsMask );	
   10fb8:	4b2c      	ldr	r3, [pc, #176]	; (1106c <AppLoraReceiveStart+0xec>)
   10fba:	681b      	ldr	r3, [r3, #0]
   10fbc:	7c5b      	ldrb	r3, [r3, #17]
   10fbe:	2011      	movs	r0, #17
   10fc0:	1c19      	adds	r1, r3, #0
   10fc2:	4b31      	ldr	r3, [pc, #196]	; (11088 <AppLoraReceiveStart+0x108>)
   10fc4:	4798      	blx	r3
    // Clear Irq
    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
   10fc6:	2012      	movs	r0, #18
   10fc8:	2140      	movs	r1, #64	; 0x40
   10fca:	4b2f      	ldr	r3, [pc, #188]	; (11088 <AppLoraReceiveStart+0x108>)
   10fcc:	4798      	blx	r3
    
	if( LoRaSettings.FreqHopOn == true )
   10fce:	4b2f      	ldr	r3, [pc, #188]	; (1108c <AppLoraReceiveStart+0x10c>)
   10fd0:	7adb      	ldrb	r3, [r3, #11]
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d019      	beq.n	1100a <AppLoraReceiveStart+0x8a>
    {
	    SX1272LR->RegHopPeriod = LoRaSettings.HopPeriod;
   10fd6:	4b25      	ldr	r3, [pc, #148]	; (1106c <AppLoraReceiveStart+0xec>)
   10fd8:	681a      	ldr	r2, [r3, #0]
   10fda:	4b2c      	ldr	r3, [pc, #176]	; (1108c <AppLoraReceiveStart+0x10c>)
   10fdc:	7b19      	ldrb	r1, [r3, #12]
   10fde:	2324      	movs	r3, #36	; 0x24
   10fe0:	54d1      	strb	r1, [r2, r3]
		SX1272Read( REG_LR_HOPCHANNEL, &SX1272LR->RegHopChannel );
   10fe2:	4b22      	ldr	r3, [pc, #136]	; (1106c <AppLoraReceiveStart+0xec>)
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	331c      	adds	r3, #28
   10fe8:	201c      	movs	r0, #28
   10fea:	1c19      	adds	r1, r3, #0
   10fec:	4b20      	ldr	r3, [pc, #128]	; (11070 <AppLoraReceiveStart+0xf0>)
   10fee:	4798      	blx	r3
		SX1272LoRaSetRFFrequency( HoppingFrequencies[SX1272LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
   10ff0:	4b1e      	ldr	r3, [pc, #120]	; (1106c <AppLoraReceiveStart+0xec>)
   10ff2:	681b      	ldr	r3, [r3, #0]
   10ff4:	7f1b      	ldrb	r3, [r3, #28]
   10ff6:	1c1a      	adds	r2, r3, #0
   10ff8:	233f      	movs	r3, #63	; 0x3f
   10ffa:	401a      	ands	r2, r3
   10ffc:	4b24      	ldr	r3, [pc, #144]	; (11090 <AppLoraReceiveStart+0x110>)
   10ffe:	0092      	lsls	r2, r2, #2
   11000:	58d3      	ldr	r3, [r2, r3]
   11002:	1c18      	adds	r0, r3, #0
   11004:	4b23      	ldr	r3, [pc, #140]	; (11094 <AppLoraReceiveStart+0x114>)
   11006:	4798      	blx	r3
   11008:	e004      	b.n	11014 <AppLoraReceiveStart+0x94>
    }
    else
    {
		SX1272LR->RegHopPeriod = 255;   //or 0 with transmit
   1100a:	4b18      	ldr	r3, [pc, #96]	; (1106c <AppLoraReceiveStart+0xec>)
   1100c:	681a      	ldr	r2, [r3, #0]
   1100e:	2324      	movs	r3, #36	; 0x24
   11010:	21ff      	movs	r1, #255	; 0xff
   11012:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_HOPPERIOD, SX1272LR->RegHopPeriod );	
   11014:	4b15      	ldr	r3, [pc, #84]	; (1106c <AppLoraReceiveStart+0xec>)
   11016:	681a      	ldr	r2, [r3, #0]
   11018:	2324      	movs	r3, #36	; 0x24
   1101a:	5cd3      	ldrb	r3, [r2, r3]
   1101c:	2024      	movs	r0, #36	; 0x24
   1101e:	1c19      	adds	r1, r3, #0
   11020:	4b19      	ldr	r3, [pc, #100]	; (11088 <AppLoraReceiveStart+0x108>)
   11022:	4798      	blx	r3
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00; //| RFLR_DIOMAPPING1_DIO0_01;
   11024:	4b11      	ldr	r3, [pc, #68]	; (1106c <AppLoraReceiveStart+0xec>)
   11026:	681a      	ldr	r2, [r3, #0]
   11028:	233f      	movs	r3, #63	; 0x3f
   1102a:	2100      	movs	r1, #0
   1102c:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
   1102e:	4b0f      	ldr	r3, [pc, #60]	; (1106c <AppLoraReceiveStart+0xec>)
   11030:	681a      	ldr	r2, [r3, #0]
   11032:	2340      	movs	r3, #64	; 0x40
   11034:	2100      	movs	r1, #0
   11036:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );	
   11038:	4b0c      	ldr	r3, [pc, #48]	; (1106c <AppLoraReceiveStart+0xec>)
   1103a:	681b      	ldr	r3, [r3, #0]
   1103c:	333f      	adds	r3, #63	; 0x3f
   1103e:	2040      	movs	r0, #64	; 0x40
   11040:	1c19      	adds	r1, r3, #0
   11042:	2202      	movs	r2, #2
   11044:	4b14      	ldr	r3, [pc, #80]	; (11098 <AppLoraReceiveStart+0x118>)
   11046:	4798      	blx	r3

    SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoRxBaseAddr;
   11048:	4b08      	ldr	r3, [pc, #32]	; (1106c <AppLoraReceiveStart+0xec>)
   1104a:	681a      	ldr	r2, [r3, #0]
   1104c:	4b07      	ldr	r3, [pc, #28]	; (1106c <AppLoraReceiveStart+0xec>)
   1104e:	681b      	ldr	r3, [r3, #0]
   11050:	7bdb      	ldrb	r3, [r3, #15]
   11052:	7353      	strb	r3, [r2, #13]
    SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   11054:	4b05      	ldr	r3, [pc, #20]	; (1106c <AppLoraReceiveStart+0xec>)
   11056:	681b      	ldr	r3, [r3, #0]
   11058:	7b5b      	ldrb	r3, [r3, #13]
   1105a:	200d      	movs	r0, #13
   1105c:	1c19      	adds	r1, r3, #0
   1105e:	4b0a      	ldr	r3, [pc, #40]	; (11088 <AppLoraReceiveStart+0x108>)
   11060:	4798      	blx	r3
    
    SX1272LoRaSetOpMode( RFLR_OPMODE_RECEIVER );	
   11062:	2005      	movs	r0, #5
   11064:	4b07      	ldr	r3, [pc, #28]	; (11084 <AppLoraReceiveStart+0x104>)
   11066:	4798      	blx	r3


}
   11068:	46bd      	mov	sp, r7
   1106a:	bd80      	pop	{r7, pc}
   1106c:	20003804 	.word	0x20003804
   11070:	00011981 	.word	0x00011981
   11074:	20003808 	.word	0x20003808
   11078:	00017e61 	.word	0x00017e61
   1107c:	00010ced 	.word	0x00010ced
   11080:	00010d2d 	.word	0x00010d2d
   11084:	00010ca5 	.word	0x00010ca5
   11088:	0001194d 	.word	0x0001194d
   1108c:	20000028 	.word	0x20000028
   11090:	00018464 	.word	0x00018464
   11094:	000111f1 	.word	0x000111f1
   11098:	000119bd 	.word	0x000119bd

0001109c <SX1272LoraTransmit>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
uint8_t SX1272LoraTransmit(uint8_t *txBuffer,uint16_t length)
{
   1109c:	b580      	push	{r7, lr}
   1109e:	b086      	sub	sp, #24
   110a0:	af00      	add	r7, sp, #0
   110a2:	6078      	str	r0, [r7, #4]
   110a4:	1c0a      	adds	r2, r1, #0
   110a6:	1cbb      	adds	r3, r7, #2
   110a8:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint8_t *ptr; 
    uint8_t status; 
	status = 1; 
   110aa:	1c3b      	adds	r3, r7, #0
   110ac:	330f      	adds	r3, #15
   110ae:	2201      	movs	r2, #1
   110b0:	701a      	strb	r2, [r3, #0]
 		  
	loraTransmitCount++;	   
   110b2:	4b45      	ldr	r3, [pc, #276]	; (111c8 <SX1272LoraTransmit+0x12c>)
   110b4:	881b      	ldrh	r3, [r3, #0]
   110b6:	3301      	adds	r3, #1
   110b8:	b29a      	uxth	r2, r3
   110ba:	4b43      	ldr	r3, [pc, #268]	; (111c8 <SX1272LoraTransmit+0x12c>)
   110bc:	801a      	strh	r2, [r3, #0]
		         
    SX1272Read( REG_LR_OPMODE, &SX1272LR->RegOpMode );   		
   110be:	4b43      	ldr	r3, [pc, #268]	; (111cc <SX1272LoraTransmit+0x130>)
   110c0:	681b      	ldr	r3, [r3, #0]
   110c2:	3301      	adds	r3, #1
   110c4:	2001      	movs	r0, #1
   110c6:	1c19      	adds	r1, r3, #0
   110c8:	4b41      	ldr	r3, [pc, #260]	; (111d0 <SX1272LoraTransmit+0x134>)
   110ca:	4798      	blx	r3
	if ((SX1272LR->RegOpMode & ~RFLR_OPMODE_MASK)!= 0x01)
   110cc:	4b3f      	ldr	r3, [pc, #252]	; (111cc <SX1272LoraTransmit+0x130>)
   110ce:	681b      	ldr	r3, [r3, #0]
   110d0:	785b      	ldrb	r3, [r3, #1]
   110d2:	22f8      	movs	r2, #248	; 0xf8
   110d4:	4393      	bics	r3, r2
   110d6:	2b01      	cmp	r3, #1
   110d8:	d002      	beq.n	110e0 <SX1272LoraTransmit+0x44>
	{	 
		SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );  		
   110da:	2001      	movs	r0, #1
   110dc:	4b3d      	ldr	r3, [pc, #244]	; (111d4 <SX1272LoraTransmit+0x138>)
   110de:	4798      	blx	r3
	}
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
   110e0:	687b      	ldr	r3, [r7, #4]
   110e2:	613b      	str	r3, [r7, #16]
	RFBufferLora[0] = length;
   110e4:	1cbb      	adds	r3, r7, #2
   110e6:	881b      	ldrh	r3, [r3, #0]
   110e8:	b2da      	uxtb	r2, r3
   110ea:	4b3b      	ldr	r3, [pc, #236]	; (111d8 <SX1272LoraTransmit+0x13c>)
   110ec:	701a      	strb	r2, [r3, #0]
	for (i=0;i<length;i++)
   110ee:	1c3b      	adds	r3, r7, #0
   110f0:	3316      	adds	r3, #22
   110f2:	2200      	movs	r2, #0
   110f4:	801a      	strh	r2, [r3, #0]
   110f6:	e010      	b.n	1111a <SX1272LoraTransmit+0x7e>
	{
		RFBufferLora[i+1] = *ptr++;
   110f8:	1c3b      	adds	r3, r7, #0
   110fa:	3316      	adds	r3, #22
   110fc:	881b      	ldrh	r3, [r3, #0]
   110fe:	1c5a      	adds	r2, r3, #1
   11100:	693b      	ldr	r3, [r7, #16]
   11102:	1c59      	adds	r1, r3, #1
   11104:	6139      	str	r1, [r7, #16]
   11106:	7819      	ldrb	r1, [r3, #0]
   11108:	4b33      	ldr	r3, [pc, #204]	; (111d8 <SX1272LoraTransmit+0x13c>)
   1110a:	5499      	strb	r1, [r3, r2]
	//-----------------------
	// check if the radio is ready to transmit.
	//-----------------------
	ptr = txBuffer; 
	RFBufferLora[0] = length;
	for (i=0;i<length;i++)
   1110c:	1c3b      	adds	r3, r7, #0
   1110e:	3316      	adds	r3, #22
   11110:	881a      	ldrh	r2, [r3, #0]
   11112:	1c3b      	adds	r3, r7, #0
   11114:	3316      	adds	r3, #22
   11116:	3201      	adds	r2, #1
   11118:	801a      	strh	r2, [r3, #0]
   1111a:	1c3a      	adds	r2, r7, #0
   1111c:	3216      	adds	r2, #22
   1111e:	1cbb      	adds	r3, r7, #2
   11120:	8812      	ldrh	r2, [r2, #0]
   11122:	881b      	ldrh	r3, [r3, #0]
   11124:	429a      	cmp	r2, r3
   11126:	d3e7      	bcc.n	110f8 <SX1272LoraTransmit+0x5c>
	{
		RFBufferLora[i+1] = *ptr++;
	}
	 
    TxPacketSize = length+1; 
   11128:	1cbb      	adds	r3, r7, #2
   1112a:	881b      	ldrh	r3, [r3, #0]
   1112c:	3301      	adds	r3, #1
   1112e:	b29a      	uxth	r2, r3
   11130:	4b2a      	ldr	r3, [pc, #168]	; (111dc <SX1272LoraTransmit+0x140>)
   11132:	801a      	strh	r2, [r3, #0]
        // Initializes the payload size
        SX1272LR->RegPayloadLength = TxPacketSize;
   11134:	4b25      	ldr	r3, [pc, #148]	; (111cc <SX1272LoraTransmit+0x130>)
   11136:	681a      	ldr	r2, [r3, #0]
   11138:	4b28      	ldr	r3, [pc, #160]	; (111dc <SX1272LoraTransmit+0x140>)
   1113a:	881b      	ldrh	r3, [r3, #0]
   1113c:	b2d9      	uxtb	r1, r3
   1113e:	2322      	movs	r3, #34	; 0x22
   11140:	54d1      	strb	r1, [r2, r3]
        SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   11142:	4b22      	ldr	r3, [pc, #136]	; (111cc <SX1272LoraTransmit+0x130>)
   11144:	681a      	ldr	r2, [r3, #0]
   11146:	2322      	movs	r3, #34	; 0x22
   11148:	5cd3      	ldrb	r3, [r2, r3]
   1114a:	2022      	movs	r0, #34	; 0x22
   1114c:	1c19      	adds	r1, r3, #0
   1114e:	4b24      	ldr	r3, [pc, #144]	; (111e0 <SX1272LoraTransmit+0x144>)
   11150:	4798      	blx	r3
        
        SX1272LR->RegFifoTxBaseAddr = 0x00; // Full buffer used for Tx
   11152:	4b1e      	ldr	r3, [pc, #120]	; (111cc <SX1272LoraTransmit+0x130>)
   11154:	681b      	ldr	r3, [r3, #0]
   11156:	2200      	movs	r2, #0
   11158:	739a      	strb	r2, [r3, #14]
        SX1272Write( REG_LR_FIFOTXBASEADDR, SX1272LR->RegFifoTxBaseAddr );
   1115a:	4b1c      	ldr	r3, [pc, #112]	; (111cc <SX1272LoraTransmit+0x130>)
   1115c:	681b      	ldr	r3, [r3, #0]
   1115e:	7b9b      	ldrb	r3, [r3, #14]
   11160:	200e      	movs	r0, #14
   11162:	1c19      	adds	r1, r3, #0
   11164:	4b1e      	ldr	r3, [pc, #120]	; (111e0 <SX1272LoraTransmit+0x144>)
   11166:	4798      	blx	r3

        SX1272LR->RegFifoAddrPtr = SX1272LR->RegFifoTxBaseAddr;
   11168:	4b18      	ldr	r3, [pc, #96]	; (111cc <SX1272LoraTransmit+0x130>)
   1116a:	681a      	ldr	r2, [r3, #0]
   1116c:	4b17      	ldr	r3, [pc, #92]	; (111cc <SX1272LoraTransmit+0x130>)
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	7b9b      	ldrb	r3, [r3, #14]
   11172:	7353      	strb	r3, [r2, #13]
        SX1272Write( REG_LR_FIFOADDRPTR, SX1272LR->RegFifoAddrPtr );
   11174:	4b15      	ldr	r3, [pc, #84]	; (111cc <SX1272LoraTransmit+0x130>)
   11176:	681b      	ldr	r3, [r3, #0]
   11178:	7b5b      	ldrb	r3, [r3, #13]
   1117a:	200d      	movs	r0, #13
   1117c:	1c19      	adds	r1, r3, #0
   1117e:	4b18      	ldr	r3, [pc, #96]	; (111e0 <SX1272LoraTransmit+0x144>)
   11180:	4798      	blx	r3
        
        // Write payload buffer to LORA modem
        SX1272WriteFifo( RFBufferLora, TxPacketSize);  //SX1272LR->RegPayloadLength );
   11182:	4b16      	ldr	r3, [pc, #88]	; (111dc <SX1272LoraTransmit+0x140>)
   11184:	881b      	ldrh	r3, [r3, #0]
   11186:	4a14      	ldr	r2, [pc, #80]	; (111d8 <SX1272LoraTransmit+0x13c>)
   11188:	1c10      	adds	r0, r2, #0
   1118a:	1c19      	adds	r1, r3, #0
   1118c:	4b15      	ldr	r3, [pc, #84]	; (111e4 <SX1272LoraTransmit+0x148>)
   1118e:	4798      	blx	r3
		
	//--------------------------------
	// set interrupt pin to processor
	SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00| RFLR_DIOMAPPING1_DIO0_01;
   11190:	4b0e      	ldr	r3, [pc, #56]	; (111cc <SX1272LoraTransmit+0x130>)
   11192:	681a      	ldr	r2, [r3, #0]
   11194:	233f      	movs	r3, #63	; 0x3f
   11196:	2140      	movs	r1, #64	; 0x40
   11198:	54d1      	strb	r1, [r2, r3]
	SX1272LR->RegDioMapping2 = 0;
   1119a:	4b0c      	ldr	r3, [pc, #48]	; (111cc <SX1272LoraTransmit+0x130>)
   1119c:	681a      	ldr	r2, [r3, #0]
   1119e:	2340      	movs	r3, #64	; 0x40
   111a0:	2100      	movs	r1, #0
   111a2:	54d1      	strb	r1, [r2, r3]
	SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );		
   111a4:	4b09      	ldr	r3, [pc, #36]	; (111cc <SX1272LoraTransmit+0x130>)
   111a6:	681b      	ldr	r3, [r3, #0]
   111a8:	333f      	adds	r3, #63	; 0x3f
   111aa:	2040      	movs	r0, #64	; 0x40
   111ac:	1c19      	adds	r1, r3, #0
   111ae:	2202      	movs	r2, #2
   111b0:	4b0d      	ldr	r3, [pc, #52]	; (111e8 <SX1272LoraTransmit+0x14c>)
   111b2:	4798      	blx	r3
	//------------------
	// turn on transmitter
    SX1272LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER );     		
   111b4:	2003      	movs	r0, #3
   111b6:	4b07      	ldr	r3, [pc, #28]	; (111d4 <SX1272LoraTransmit+0x138>)
   111b8:	4798      	blx	r3
		        done = 1;
//		        SX1272FskSetOpMode( RF_OPMODE_STANDBY );
	        }
        }
*/
     return status;
   111ba:	1c3b      	adds	r3, r7, #0
   111bc:	330f      	adds	r3, #15
   111be:	781b      	ldrb	r3, [r3, #0]
}
   111c0:	1c18      	adds	r0, r3, #0
   111c2:	46bd      	mov	sp, r7
   111c4:	b006      	add	sp, #24
   111c6:	bd80      	pop	{r7, pc}
   111c8:	200004f4 	.word	0x200004f4
   111cc:	20003804 	.word	0x20003804
   111d0:	00011981 	.word	0x00011981
   111d4:	00010ca5 	.word	0x00010ca5
   111d8:	20003808 	.word	0x20003808
   111dc:	200004f2 	.word	0x200004f2
   111e0:	0001194d 	.word	0x0001194d
   111e4:	00011a2d 	.word	0x00011a2d
   111e8:	000119bd 	.word	0x000119bd
   111ec:	00000000 	.word	0x00000000

000111f0 <SX1272LoRaSetRFFrequency>:
#define FREQ_STEP                                   61.03515625

extern tLoRaSettings LoRaSettings;

void SX1272LoRaSetRFFrequency( uint32_t freq )
{
   111f0:	b5b0      	push	{r4, r5, r7, lr}
   111f2:	b082      	sub	sp, #8
   111f4:	af00      	add	r7, sp, #0
   111f6:	6078      	str	r0, [r7, #4]
    LoRaSettings.RFFrequency = freq;
   111f8:	4b1b      	ldr	r3, [pc, #108]	; (11268 <SX1272LoRaSetRFFrequency+0x78>)
   111fa:	687a      	ldr	r2, [r7, #4]
   111fc:	601a      	str	r2, [r3, #0]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
   111fe:	4b1b      	ldr	r3, [pc, #108]	; (1126c <SX1272LoRaSetRFFrequency+0x7c>)
   11200:	6878      	ldr	r0, [r7, #4]
   11202:	4798      	blx	r3
   11204:	1c03      	adds	r3, r0, #0
   11206:	1c0c      	adds	r4, r1, #0
   11208:	4d19      	ldr	r5, [pc, #100]	; (11270 <SX1272LoRaSetRFFrequency+0x80>)
   1120a:	1c18      	adds	r0, r3, #0
   1120c:	1c21      	adds	r1, r4, #0
   1120e:	4b15      	ldr	r3, [pc, #84]	; (11264 <SX1272LoRaSetRFFrequency+0x74>)
   11210:	4a13      	ldr	r2, [pc, #76]	; (11260 <SX1272LoRaSetRFFrequency+0x70>)
   11212:	47a8      	blx	r5
   11214:	1c03      	adds	r3, r0, #0
   11216:	1c0c      	adds	r4, r1, #0
   11218:	4a16      	ldr	r2, [pc, #88]	; (11274 <SX1272LoRaSetRFFrequency+0x84>)
   1121a:	1c18      	adds	r0, r3, #0
   1121c:	1c21      	adds	r1, r4, #0
   1121e:	4790      	blx	r2
   11220:	1c03      	adds	r3, r0, #0
   11222:	607b      	str	r3, [r7, #4]
    SX1272LR->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
   11224:	4b14      	ldr	r3, [pc, #80]	; (11278 <SX1272LoRaSetRFFrequency+0x88>)
   11226:	681b      	ldr	r3, [r3, #0]
   11228:	687a      	ldr	r2, [r7, #4]
   1122a:	0c12      	lsrs	r2, r2, #16
   1122c:	b2d2      	uxtb	r2, r2
   1122e:	719a      	strb	r2, [r3, #6]
    SX1272LR->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
   11230:	4b11      	ldr	r3, [pc, #68]	; (11278 <SX1272LoRaSetRFFrequency+0x88>)
   11232:	681b      	ldr	r3, [r3, #0]
   11234:	687a      	ldr	r2, [r7, #4]
   11236:	0a12      	lsrs	r2, r2, #8
   11238:	b2d2      	uxtb	r2, r2
   1123a:	71da      	strb	r2, [r3, #7]
    SX1272LR->RegFrfLsb = ( uint8_t )( freq & 0xFF );
   1123c:	4b0e      	ldr	r3, [pc, #56]	; (11278 <SX1272LoRaSetRFFrequency+0x88>)
   1123e:	681b      	ldr	r3, [r3, #0]
   11240:	687a      	ldr	r2, [r7, #4]
   11242:	b2d2      	uxtb	r2, r2
   11244:	721a      	strb	r2, [r3, #8]
    SX1272WriteBuffer( REG_LR_FRFMSB, &SX1272LR->RegFrfMsb, 3 );
   11246:	4b0c      	ldr	r3, [pc, #48]	; (11278 <SX1272LoRaSetRFFrequency+0x88>)
   11248:	681b      	ldr	r3, [r3, #0]
   1124a:	3306      	adds	r3, #6
   1124c:	2006      	movs	r0, #6
   1124e:	1c19      	adds	r1, r3, #0
   11250:	2203      	movs	r2, #3
   11252:	4b0a      	ldr	r3, [pc, #40]	; (1127c <SX1272LoRaSetRFFrequency+0x8c>)
   11254:	4798      	blx	r3
}
   11256:	46bd      	mov	sp, r7
   11258:	b002      	add	sp, #8
   1125a:	bdb0      	pop	{r4, r5, r7, pc}
   1125c:	46c0      	nop			; (mov r8, r8)
   1125e:	46c0      	nop			; (mov r8, r8)
   11260:	00000000 	.word	0x00000000
   11264:	404e8480 	.word	0x404e8480
   11268:	20000028 	.word	0x20000028
   1126c:	000175a9 	.word	0x000175a9
   11270:	00016069 	.word	0x00016069
   11274:	00015979 	.word	0x00015979
   11278:	20003804 	.word	0x20003804
   1127c:	000119bd 	.word	0x000119bd

00011280 <SX1272LoRaSetRFPower>:

    return LoRaSettings.RFFrequency;
}

void SX1272LoRaSetRFPower( int8_t power )
{
   11280:	b580      	push	{r7, lr}
   11282:	b082      	sub	sp, #8
   11284:	af00      	add	r7, sp, #0
   11286:	1c02      	adds	r2, r0, #0
   11288:	1dfb      	adds	r3, r7, #7
   1128a:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PACONFIG, &SX1272LR->RegPaConfig );
   1128c:	4b4f      	ldr	r3, [pc, #316]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   1128e:	681b      	ldr	r3, [r3, #0]
   11290:	3309      	adds	r3, #9
   11292:	2009      	movs	r0, #9
   11294:	1c19      	adds	r1, r3, #0
   11296:	4b4e      	ldr	r3, [pc, #312]	; (113d0 <SX1272LoRaSetRFPower+0x150>)
   11298:	4798      	blx	r3
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   1129a:	4b4c      	ldr	r3, [pc, #304]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   1129c:	681b      	ldr	r3, [r3, #0]
   1129e:	3359      	adds	r3, #89	; 0x59
   112a0:	205a      	movs	r0, #90	; 0x5a
   112a2:	1c19      	adds	r1, r3, #0
   112a4:	4b4a      	ldr	r3, [pc, #296]	; (113d0 <SX1272LoRaSetRFPower+0x150>)
   112a6:	4798      	blx	r3
    
    if( ( SX1272LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
   112a8:	4b48      	ldr	r3, [pc, #288]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   112aa:	681b      	ldr	r3, [r3, #0]
   112ac:	7a5b      	ldrb	r3, [r3, #9]
   112ae:	b2db      	uxtb	r3, r3
   112b0:	b25b      	sxtb	r3, r3
   112b2:	2b00      	cmp	r3, #0
   112b4:	da56      	bge.n	11364 <SX1272LoRaSetRFPower+0xe4>
    {
        if( ( SX1272LR->RegPaDac & 0x07 ) == 0x07 )
   112b6:	4b45      	ldr	r3, [pc, #276]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   112b8:	681a      	ldr	r2, [r3, #0]
   112ba:	2359      	movs	r3, #89	; 0x59
   112bc:	5cd3      	ldrb	r3, [r2, r3]
   112be:	1c1a      	adds	r2, r3, #0
   112c0:	2307      	movs	r3, #7
   112c2:	4013      	ands	r3, r2
   112c4:	2b07      	cmp	r3, #7
   112c6:	d126      	bne.n	11316 <SX1272LoRaSetRFPower+0x96>
        {
            if( power < 5 )
   112c8:	1dfb      	adds	r3, r7, #7
   112ca:	781b      	ldrb	r3, [r3, #0]
   112cc:	b25b      	sxtb	r3, r3
   112ce:	2b04      	cmp	r3, #4
   112d0:	dc02      	bgt.n	112d8 <SX1272LoRaSetRFPower+0x58>
            {
                power = 5;
   112d2:	1dfb      	adds	r3, r7, #7
   112d4:	2205      	movs	r2, #5
   112d6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
   112d8:	1dfb      	adds	r3, r7, #7
   112da:	781b      	ldrb	r3, [r3, #0]
   112dc:	b25b      	sxtb	r3, r3
   112de:	2b14      	cmp	r3, #20
   112e0:	dd02      	ble.n	112e8 <SX1272LoRaSetRFPower+0x68>
            {
                power = 20;
   112e2:	1dfb      	adds	r3, r7, #7
   112e4:	2214      	movs	r2, #20
   112e6:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
   112e8:	4b38      	ldr	r3, [pc, #224]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   112ea:	681a      	ldr	r2, [r3, #0]
   112ec:	4b37      	ldr	r3, [pc, #220]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   112ee:	681b      	ldr	r3, [r3, #0]
   112f0:	7a5b      	ldrb	r3, [r3, #9]
   112f2:	b2db      	uxtb	r3, r3
   112f4:	210f      	movs	r1, #15
   112f6:	438b      	bics	r3, r1
   112f8:	b2d9      	uxtb	r1, r3
   112fa:	1dfb      	adds	r3, r7, #7
   112fc:	781b      	ldrb	r3, [r3, #0]
   112fe:	3b05      	subs	r3, #5
   11300:	b2db      	uxtb	r3, r3
   11302:	b2db      	uxtb	r3, r3
   11304:	1c18      	adds	r0, r3, #0
   11306:	230f      	movs	r3, #15
   11308:	4003      	ands	r3, r0
   1130a:	b2db      	uxtb	r3, r3
   1130c:	430b      	orrs	r3, r1
   1130e:	b2db      	uxtb	r3, r3
   11310:	b2db      	uxtb	r3, r3
   11312:	7253      	strb	r3, [r2, #9]
   11314:	e04c      	b.n	113b0 <SX1272LoRaSetRFPower+0x130>
        }
        else
        {
            if( power < 2 )
   11316:	1dfb      	adds	r3, r7, #7
   11318:	781b      	ldrb	r3, [r3, #0]
   1131a:	b25b      	sxtb	r3, r3
   1131c:	2b01      	cmp	r3, #1
   1131e:	dc02      	bgt.n	11326 <SX1272LoRaSetRFPower+0xa6>
            {
                power = 2;
   11320:	1dfb      	adds	r3, r7, #7
   11322:	2202      	movs	r2, #2
   11324:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
   11326:	1dfb      	adds	r3, r7, #7
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	b25b      	sxtb	r3, r3
   1132c:	2b11      	cmp	r3, #17
   1132e:	dd02      	ble.n	11336 <SX1272LoRaSetRFPower+0xb6>
            {
                power = 17;
   11330:	1dfb      	adds	r3, r7, #7
   11332:	2211      	movs	r2, #17
   11334:	701a      	strb	r2, [r3, #0]
            }
            SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
   11336:	4b25      	ldr	r3, [pc, #148]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   11338:	681a      	ldr	r2, [r3, #0]
   1133a:	4b24      	ldr	r3, [pc, #144]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   1133c:	681b      	ldr	r3, [r3, #0]
   1133e:	7a5b      	ldrb	r3, [r3, #9]
   11340:	b2db      	uxtb	r3, r3
   11342:	210f      	movs	r1, #15
   11344:	438b      	bics	r3, r1
   11346:	b2d9      	uxtb	r1, r3
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	781b      	ldrb	r3, [r3, #0]
   1134c:	3b02      	subs	r3, #2
   1134e:	b2db      	uxtb	r3, r3
   11350:	b2db      	uxtb	r3, r3
   11352:	1c18      	adds	r0, r3, #0
   11354:	230f      	movs	r3, #15
   11356:	4003      	ands	r3, r0
   11358:	b2db      	uxtb	r3, r3
   1135a:	430b      	orrs	r3, r1
   1135c:	b2db      	uxtb	r3, r3
   1135e:	b2db      	uxtb	r3, r3
   11360:	7253      	strb	r3, [r2, #9]
   11362:	e025      	b.n	113b0 <SX1272LoRaSetRFPower+0x130>
        }
    }
    else
    {
        if( power < -1 )
   11364:	1dfb      	adds	r3, r7, #7
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	b25b      	sxtb	r3, r3
   1136a:	3301      	adds	r3, #1
   1136c:	da02      	bge.n	11374 <SX1272LoRaSetRFPower+0xf4>
        {
            power = -1;
   1136e:	1dfb      	adds	r3, r7, #7
   11370:	22ff      	movs	r2, #255	; 0xff
   11372:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
   11374:	1dfb      	adds	r3, r7, #7
   11376:	781b      	ldrb	r3, [r3, #0]
   11378:	b25b      	sxtb	r3, r3
   1137a:	2b0e      	cmp	r3, #14
   1137c:	dd02      	ble.n	11384 <SX1272LoRaSetRFPower+0x104>
        {
            power = 14;
   1137e:	1dfb      	adds	r3, r7, #7
   11380:	220e      	movs	r2, #14
   11382:	701a      	strb	r2, [r3, #0]
        }
        SX1272LR->RegPaConfig = ( SX1272LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
   11384:	4b11      	ldr	r3, [pc, #68]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   11386:	681a      	ldr	r2, [r3, #0]
   11388:	4b10      	ldr	r3, [pc, #64]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	7a5b      	ldrb	r3, [r3, #9]
   1138e:	b2db      	uxtb	r3, r3
   11390:	210f      	movs	r1, #15
   11392:	438b      	bics	r3, r1
   11394:	b2d9      	uxtb	r1, r3
   11396:	1dfb      	adds	r3, r7, #7
   11398:	781b      	ldrb	r3, [r3, #0]
   1139a:	3301      	adds	r3, #1
   1139c:	b2db      	uxtb	r3, r3
   1139e:	b2db      	uxtb	r3, r3
   113a0:	1c18      	adds	r0, r3, #0
   113a2:	230f      	movs	r3, #15
   113a4:	4003      	ands	r3, r0
   113a6:	b2db      	uxtb	r3, r3
   113a8:	430b      	orrs	r3, r1
   113aa:	b2db      	uxtb	r3, r3
   113ac:	b2db      	uxtb	r3, r3
   113ae:	7253      	strb	r3, [r2, #9]
    }
    SX1272Write( REG_LR_PACONFIG, SX1272LR->RegPaConfig );
   113b0:	4b06      	ldr	r3, [pc, #24]	; (113cc <SX1272LoRaSetRFPower+0x14c>)
   113b2:	681b      	ldr	r3, [r3, #0]
   113b4:	7a5b      	ldrb	r3, [r3, #9]
   113b6:	2009      	movs	r0, #9
   113b8:	1c19      	adds	r1, r3, #0
   113ba:	4b06      	ldr	r3, [pc, #24]	; (113d4 <SX1272LoRaSetRFPower+0x154>)
   113bc:	4798      	blx	r3
    LoRaSettings.Power = power;
   113be:	4b06      	ldr	r3, [pc, #24]	; (113d8 <SX1272LoRaSetRFPower+0x158>)
   113c0:	1dfa      	adds	r2, r7, #7
   113c2:	7812      	ldrb	r2, [r2, #0]
   113c4:	711a      	strb	r2, [r3, #4]
}
   113c6:	46bd      	mov	sp, r7
   113c8:	b002      	add	sp, #8
   113ca:	bd80      	pop	{r7, pc}
   113cc:	20003804 	.word	0x20003804
   113d0:	00011981 	.word	0x00011981
   113d4:	0001194d 	.word	0x0001194d
   113d8:	20000028 	.word	0x20000028

000113dc <SX1272LoRaSetSignalBandwidth>:
    }
    return LoRaSettings.Power;
}

void SX1272LoRaSetSignalBandwidth( uint8_t bw )
{
   113dc:	b580      	push	{r7, lr}
   113de:	b082      	sub	sp, #8
   113e0:	af00      	add	r7, sp, #0
   113e2:	1c02      	adds	r2, r0, #0
   113e4:	1dfb      	adds	r3, r7, #7
   113e6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   113e8:	4b13      	ldr	r3, [pc, #76]	; (11438 <SX1272LoRaSetSignalBandwidth+0x5c>)
   113ea:	681b      	ldr	r3, [r3, #0]
   113ec:	331d      	adds	r3, #29
   113ee:	201d      	movs	r0, #29
   113f0:	1c19      	adds	r1, r3, #0
   113f2:	4b12      	ldr	r3, [pc, #72]	; (1143c <SX1272LoRaSetSignalBandwidth+0x60>)
   113f4:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_BW_MASK ) | ( bw << 6 );
   113f6:	4b10      	ldr	r3, [pc, #64]	; (11438 <SX1272LoRaSetSignalBandwidth+0x5c>)
   113f8:	681a      	ldr	r2, [r3, #0]
   113fa:	4b0f      	ldr	r3, [pc, #60]	; (11438 <SX1272LoRaSetSignalBandwidth+0x5c>)
   113fc:	681b      	ldr	r3, [r3, #0]
   113fe:	7f5b      	ldrb	r3, [r3, #29]
   11400:	b2db      	uxtb	r3, r3
   11402:	1c19      	adds	r1, r3, #0
   11404:	233f      	movs	r3, #63	; 0x3f
   11406:	400b      	ands	r3, r1
   11408:	b2d9      	uxtb	r1, r3
   1140a:	1dfb      	adds	r3, r7, #7
   1140c:	781b      	ldrb	r3, [r3, #0]
   1140e:	019b      	lsls	r3, r3, #6
   11410:	b2db      	uxtb	r3, r3
   11412:	430b      	orrs	r3, r1
   11414:	b2db      	uxtb	r3, r3
   11416:	b2db      	uxtb	r3, r3
   11418:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   1141a:	4b07      	ldr	r3, [pc, #28]	; (11438 <SX1272LoRaSetSignalBandwidth+0x5c>)
   1141c:	681b      	ldr	r3, [r3, #0]
   1141e:	7f5b      	ldrb	r3, [r3, #29]
   11420:	201d      	movs	r0, #29
   11422:	1c19      	adds	r1, r3, #0
   11424:	4b06      	ldr	r3, [pc, #24]	; (11440 <SX1272LoRaSetSignalBandwidth+0x64>)
   11426:	4798      	blx	r3
    LoRaSettings.SignalBw = bw;
   11428:	4b06      	ldr	r3, [pc, #24]	; (11444 <SX1272LoRaSetSignalBandwidth+0x68>)
   1142a:	1dfa      	adds	r2, r7, #7
   1142c:	7812      	ldrb	r2, [r2, #0]
   1142e:	715a      	strb	r2, [r3, #5]
}
   11430:	46bd      	mov	sp, r7
   11432:	b002      	add	sp, #8
   11434:	bd80      	pop	{r7, pc}
   11436:	46c0      	nop			; (mov r8, r8)
   11438:	20003804 	.word	0x20003804
   1143c:	00011981 	.word	0x00011981
   11440:	0001194d 	.word	0x0001194d
   11444:	20000028 	.word	0x20000028

00011448 <SX1272LoRaSetSpreadingFactor>:
    LoRaSettings.SignalBw = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_BW_MASK ) >> 6;
    return LoRaSettings.SignalBw;
}

void SX1272LoRaSetSpreadingFactor( uint8_t factor )
{
   11448:	b580      	push	{r7, lr}
   1144a:	b082      	sub	sp, #8
   1144c:	af00      	add	r7, sp, #0
   1144e:	1c02      	adds	r2, r0, #0
   11450:	1dfb      	adds	r3, r7, #7
   11452:	701a      	strb	r2, [r3, #0]

    if( factor > 12 )
   11454:	1dfb      	adds	r3, r7, #7
   11456:	781b      	ldrb	r3, [r3, #0]
   11458:	2b0c      	cmp	r3, #12
   1145a:	d903      	bls.n	11464 <SX1272LoRaSetSpreadingFactor+0x1c>
    {
        factor = 12;
   1145c:	1dfb      	adds	r3, r7, #7
   1145e:	220c      	movs	r2, #12
   11460:	701a      	strb	r2, [r3, #0]
   11462:	e006      	b.n	11472 <SX1272LoRaSetSpreadingFactor+0x2a>
    }
    else if( factor < 6 )
   11464:	1dfb      	adds	r3, r7, #7
   11466:	781b      	ldrb	r3, [r3, #0]
   11468:	2b05      	cmp	r3, #5
   1146a:	d802      	bhi.n	11472 <SX1272LoRaSetSpreadingFactor+0x2a>
    {
        factor = 6;
   1146c:	1dfb      	adds	r3, r7, #7
   1146e:	2206      	movs	r2, #6
   11470:	701a      	strb	r2, [r3, #0]
    }
    
    if( factor == 6 )
   11472:	1dfb      	adds	r3, r7, #7
   11474:	781b      	ldrb	r3, [r3, #0]
   11476:	2b06      	cmp	r3, #6
   11478:	d103      	bne.n	11482 <SX1272LoRaSetSpreadingFactor+0x3a>
    {
        SX1272LoRaSetNbTrigPeaks( 5 );
   1147a:	2005      	movs	r0, #5
   1147c:	4b16      	ldr	r3, [pc, #88]	; (114d8 <SX1272LoRaSetSpreadingFactor+0x90>)
   1147e:	4798      	blx	r3
   11480:	e002      	b.n	11488 <SX1272LoRaSetSpreadingFactor+0x40>
    }
    else
    {
        SX1272LoRaSetNbTrigPeaks( 3 );
   11482:	2003      	movs	r0, #3
   11484:	4b14      	ldr	r3, [pc, #80]	; (114d8 <SX1272LoRaSetSpreadingFactor+0x90>)
   11486:	4798      	blx	r3
    }

    SX1272Read( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2 );    
   11488:	4b14      	ldr	r3, [pc, #80]	; (114dc <SX1272LoRaSetSpreadingFactor+0x94>)
   1148a:	681b      	ldr	r3, [r3, #0]
   1148c:	331e      	adds	r3, #30
   1148e:	201e      	movs	r0, #30
   11490:	1c19      	adds	r1, r3, #0
   11492:	4b13      	ldr	r3, [pc, #76]	; (114e0 <SX1272LoRaSetSpreadingFactor+0x98>)
   11494:	4798      	blx	r3
    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SF_MASK ) | ( factor << 4 );
   11496:	4b11      	ldr	r3, [pc, #68]	; (114dc <SX1272LoRaSetSpreadingFactor+0x94>)
   11498:	681a      	ldr	r2, [r3, #0]
   1149a:	4b10      	ldr	r3, [pc, #64]	; (114dc <SX1272LoRaSetSpreadingFactor+0x94>)
   1149c:	681b      	ldr	r3, [r3, #0]
   1149e:	7f9b      	ldrb	r3, [r3, #30]
   114a0:	b2db      	uxtb	r3, r3
   114a2:	1c19      	adds	r1, r3, #0
   114a4:	230f      	movs	r3, #15
   114a6:	400b      	ands	r3, r1
   114a8:	b2d9      	uxtb	r1, r3
   114aa:	1dfb      	adds	r3, r7, #7
   114ac:	781b      	ldrb	r3, [r3, #0]
   114ae:	011b      	lsls	r3, r3, #4
   114b0:	b2db      	uxtb	r3, r3
   114b2:	430b      	orrs	r3, r1
   114b4:	b2db      	uxtb	r3, r3
   114b6:	b2db      	uxtb	r3, r3
   114b8:	7793      	strb	r3, [r2, #30]
    SX1272Write( REG_LR_MODEMCONFIG2, SX1272LR->RegModemConfig2 );    
   114ba:	4b08      	ldr	r3, [pc, #32]	; (114dc <SX1272LoRaSetSpreadingFactor+0x94>)
   114bc:	681b      	ldr	r3, [r3, #0]
   114be:	7f9b      	ldrb	r3, [r3, #30]
   114c0:	201e      	movs	r0, #30
   114c2:	1c19      	adds	r1, r3, #0
   114c4:	4b07      	ldr	r3, [pc, #28]	; (114e4 <SX1272LoRaSetSpreadingFactor+0x9c>)
   114c6:	4798      	blx	r3
    LoRaSettings.SpreadingFactor = factor;
   114c8:	4b07      	ldr	r3, [pc, #28]	; (114e8 <SX1272LoRaSetSpreadingFactor+0xa0>)
   114ca:	1dfa      	adds	r2, r7, #7
   114cc:	7812      	ldrb	r2, [r2, #0]
   114ce:	719a      	strb	r2, [r3, #6]
}
   114d0:	46bd      	mov	sp, r7
   114d2:	b002      	add	sp, #8
   114d4:	bd80      	pop	{r7, pc}
   114d6:	46c0      	nop			; (mov r8, r8)
   114d8:	000117f5 	.word	0x000117f5
   114dc:	20003804 	.word	0x20003804
   114e0:	00011981 	.word	0x00011981
   114e4:	0001194d 	.word	0x0001194d
   114e8:	20000028 	.word	0x20000028

000114ec <SX1272LoRaSetErrorCoding>:
    LoRaSettings.SpreadingFactor = ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SF_MASK ) >> 4;
    return LoRaSettings.SpreadingFactor;
}

void SX1272LoRaSetErrorCoding( uint8_t value )
{
   114ec:	b580      	push	{r7, lr}
   114ee:	b082      	sub	sp, #8
   114f0:	af00      	add	r7, sp, #0
   114f2:	1c02      	adds	r2, r0, #0
   114f4:	1dfb      	adds	r3, r7, #7
   114f6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   114f8:	4b12      	ldr	r3, [pc, #72]	; (11544 <SX1272LoRaSetErrorCoding+0x58>)
   114fa:	681b      	ldr	r3, [r3, #0]
   114fc:	331d      	adds	r3, #29
   114fe:	201d      	movs	r0, #29
   11500:	1c19      	adds	r1, r3, #0
   11502:	4b11      	ldr	r3, [pc, #68]	; (11548 <SX1272LoRaSetErrorCoding+0x5c>)
   11504:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_CODINGRATE_MASK ) | ( value << 3 );
   11506:	4b0f      	ldr	r3, [pc, #60]	; (11544 <SX1272LoRaSetErrorCoding+0x58>)
   11508:	681a      	ldr	r2, [r3, #0]
   1150a:	4b0e      	ldr	r3, [pc, #56]	; (11544 <SX1272LoRaSetErrorCoding+0x58>)
   1150c:	681b      	ldr	r3, [r3, #0]
   1150e:	7f5b      	ldrb	r3, [r3, #29]
   11510:	b2db      	uxtb	r3, r3
   11512:	2138      	movs	r1, #56	; 0x38
   11514:	438b      	bics	r3, r1
   11516:	b2d9      	uxtb	r1, r3
   11518:	1dfb      	adds	r3, r7, #7
   1151a:	781b      	ldrb	r3, [r3, #0]
   1151c:	00db      	lsls	r3, r3, #3
   1151e:	b2db      	uxtb	r3, r3
   11520:	430b      	orrs	r3, r1
   11522:	b2db      	uxtb	r3, r3
   11524:	b2db      	uxtb	r3, r3
   11526:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   11528:	4b06      	ldr	r3, [pc, #24]	; (11544 <SX1272LoRaSetErrorCoding+0x58>)
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	7f5b      	ldrb	r3, [r3, #29]
   1152e:	201d      	movs	r0, #29
   11530:	1c19      	adds	r1, r3, #0
   11532:	4b06      	ldr	r3, [pc, #24]	; (1154c <SX1272LoRaSetErrorCoding+0x60>)
   11534:	4798      	blx	r3
    LoRaSettings.ErrorCoding = value;
   11536:	4b06      	ldr	r3, [pc, #24]	; (11550 <SX1272LoRaSetErrorCoding+0x64>)
   11538:	1dfa      	adds	r2, r7, #7
   1153a:	7812      	ldrb	r2, [r2, #0]
   1153c:	71da      	strb	r2, [r3, #7]
}
   1153e:	46bd      	mov	sp, r7
   11540:	b002      	add	sp, #8
   11542:	bd80      	pop	{r7, pc}
   11544:	20003804 	.word	0x20003804
   11548:	00011981 	.word	0x00011981
   1154c:	0001194d 	.word	0x0001194d
   11550:	20000028 	.word	0x20000028

00011554 <SX1272LoRaSetPacketCrcOn>:
    LoRaSettings.ErrorCoding = ( SX1272LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_CODINGRATE_MASK ) >> 3;
    return LoRaSettings.ErrorCoding;
}

void SX1272LoRaSetPacketCrcOn( bool enable )
{
   11554:	b580      	push	{r7, lr}
   11556:	b082      	sub	sp, #8
   11558:	af00      	add	r7, sp, #0
   1155a:	1c02      	adds	r2, r0, #0
   1155c:	1dfb      	adds	r3, r7, #7
   1155e:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   11560:	4b12      	ldr	r3, [pc, #72]	; (115ac <SX1272LoRaSetPacketCrcOn+0x58>)
   11562:	681b      	ldr	r3, [r3, #0]
   11564:	331d      	adds	r3, #29
   11566:	201d      	movs	r0, #29
   11568:	1c19      	adds	r1, r3, #0
   1156a:	4b11      	ldr	r3, [pc, #68]	; (115b0 <SX1272LoRaSetPacketCrcOn+0x5c>)
   1156c:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK ) | ( enable << 1 );
   1156e:	4b0f      	ldr	r3, [pc, #60]	; (115ac <SX1272LoRaSetPacketCrcOn+0x58>)
   11570:	681a      	ldr	r2, [r3, #0]
   11572:	4b0e      	ldr	r3, [pc, #56]	; (115ac <SX1272LoRaSetPacketCrcOn+0x58>)
   11574:	681b      	ldr	r3, [r3, #0]
   11576:	7f5b      	ldrb	r3, [r3, #29]
   11578:	b2db      	uxtb	r3, r3
   1157a:	2102      	movs	r1, #2
   1157c:	438b      	bics	r3, r1
   1157e:	b2d9      	uxtb	r1, r3
   11580:	1dfb      	adds	r3, r7, #7
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	005b      	lsls	r3, r3, #1
   11586:	b2db      	uxtb	r3, r3
   11588:	430b      	orrs	r3, r1
   1158a:	b2db      	uxtb	r3, r3
   1158c:	b2db      	uxtb	r3, r3
   1158e:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   11590:	4b06      	ldr	r3, [pc, #24]	; (115ac <SX1272LoRaSetPacketCrcOn+0x58>)
   11592:	681b      	ldr	r3, [r3, #0]
   11594:	7f5b      	ldrb	r3, [r3, #29]
   11596:	201d      	movs	r0, #29
   11598:	1c19      	adds	r1, r3, #0
   1159a:	4b06      	ldr	r3, [pc, #24]	; (115b4 <SX1272LoRaSetPacketCrcOn+0x60>)
   1159c:	4798      	blx	r3
    LoRaSettings.CrcOn = enable;
   1159e:	4b06      	ldr	r3, [pc, #24]	; (115b8 <SX1272LoRaSetPacketCrcOn+0x64>)
   115a0:	1dfa      	adds	r2, r7, #7
   115a2:	7812      	ldrb	r2, [r2, #0]
   115a4:	721a      	strb	r2, [r3, #8]
}
   115a6:	46bd      	mov	sp, r7
   115a8:	b002      	add	sp, #8
   115aa:	bd80      	pop	{r7, pc}
   115ac:	20003804 	.word	0x20003804
   115b0:	00011981 	.word	0x00011981
   115b4:	0001194d 	.word	0x0001194d
   115b8:	20000028 	.word	0x20000028

000115bc <SX1272LoRaSetImplicitHeaderOn>:
    LoRaSettings.CrcOn = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_RXPAYLOADCRC_ON ) >> 1;
    return LoRaSettings.CrcOn;
}

void SX1272LoRaSetImplicitHeaderOn( bool enable )
{
   115bc:	b580      	push	{r7, lr}
   115be:	b082      	sub	sp, #8
   115c0:	af00      	add	r7, sp, #0
   115c2:	1c02      	adds	r2, r0, #0
   115c4:	1dfb      	adds	r3, r7, #7
   115c6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   115c8:	4b12      	ldr	r3, [pc, #72]	; (11614 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   115ca:	681b      	ldr	r3, [r3, #0]
   115cc:	331d      	adds	r3, #29
   115ce:	201d      	movs	r0, #29
   115d0:	1c19      	adds	r1, r3, #0
   115d2:	4b11      	ldr	r3, [pc, #68]	; (11618 <SX1272LoRaSetImplicitHeaderOn+0x5c>)
   115d4:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) | ( enable << 2 );
   115d6:	4b0f      	ldr	r3, [pc, #60]	; (11614 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   115d8:	681a      	ldr	r2, [r3, #0]
   115da:	4b0e      	ldr	r3, [pc, #56]	; (11614 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   115dc:	681b      	ldr	r3, [r3, #0]
   115de:	7f5b      	ldrb	r3, [r3, #29]
   115e0:	b2db      	uxtb	r3, r3
   115e2:	2104      	movs	r1, #4
   115e4:	438b      	bics	r3, r1
   115e6:	b2d9      	uxtb	r1, r3
   115e8:	1dfb      	adds	r3, r7, #7
   115ea:	781b      	ldrb	r3, [r3, #0]
   115ec:	009b      	lsls	r3, r3, #2
   115ee:	b2db      	uxtb	r3, r3
   115f0:	430b      	orrs	r3, r1
   115f2:	b2db      	uxtb	r3, r3
   115f4:	b2db      	uxtb	r3, r3
   115f6:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   115f8:	4b06      	ldr	r3, [pc, #24]	; (11614 <SX1272LoRaSetImplicitHeaderOn+0x58>)
   115fa:	681b      	ldr	r3, [r3, #0]
   115fc:	7f5b      	ldrb	r3, [r3, #29]
   115fe:	201d      	movs	r0, #29
   11600:	1c19      	adds	r1, r3, #0
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <SX1272LoRaSetImplicitHeaderOn+0x60>)
   11604:	4798      	blx	r3
    LoRaSettings.ImplicitHeaderOn = enable;
   11606:	4b06      	ldr	r3, [pc, #24]	; (11620 <SX1272LoRaSetImplicitHeaderOn+0x64>)
   11608:	1dfa      	adds	r2, r7, #7
   1160a:	7812      	ldrb	r2, [r2, #0]
   1160c:	725a      	strb	r2, [r3, #9]
}
   1160e:	46bd      	mov	sp, r7
   11610:	b002      	add	sp, #8
   11612:	bd80      	pop	{r7, pc}
   11614:	20003804 	.word	0x20003804
   11618:	00011981 	.word	0x00011981
   1161c:	0001194d 	.word	0x0001194d
   11620:	20000028 	.word	0x20000028

00011624 <SX1272LoRaSetPayloadLength>:
{
    return LoRaSettings.RxPacketTimeout;
}

void SX1272LoRaSetPayloadLength( uint8_t value )
{
   11624:	b580      	push	{r7, lr}
   11626:	b082      	sub	sp, #8
   11628:	af00      	add	r7, sp, #0
   1162a:	1c02      	adds	r2, r0, #0
   1162c:	1dfb      	adds	r3, r7, #7
   1162e:	701a      	strb	r2, [r3, #0]
    SX1272LR->RegPayloadLength = value;
   11630:	4b0a      	ldr	r3, [pc, #40]	; (1165c <SX1272LoRaSetPayloadLength+0x38>)
   11632:	681a      	ldr	r2, [r3, #0]
   11634:	1df9      	adds	r1, r7, #7
   11636:	2322      	movs	r3, #34	; 0x22
   11638:	7809      	ldrb	r1, [r1, #0]
   1163a:	54d1      	strb	r1, [r2, r3]
    SX1272Write( REG_LR_PAYLOADLENGTH, SX1272LR->RegPayloadLength );
   1163c:	4b07      	ldr	r3, [pc, #28]	; (1165c <SX1272LoRaSetPayloadLength+0x38>)
   1163e:	681a      	ldr	r2, [r3, #0]
   11640:	2322      	movs	r3, #34	; 0x22
   11642:	5cd3      	ldrb	r3, [r2, r3]
   11644:	2022      	movs	r0, #34	; 0x22
   11646:	1c19      	adds	r1, r3, #0
   11648:	4b05      	ldr	r3, [pc, #20]	; (11660 <SX1272LoRaSetPayloadLength+0x3c>)
   1164a:	4798      	blx	r3
    LoRaSettings.PayloadLength = value;
   1164c:	4b05      	ldr	r3, [pc, #20]	; (11664 <SX1272LoRaSetPayloadLength+0x40>)
   1164e:	1dfa      	adds	r2, r7, #7
   11650:	7812      	ldrb	r2, [r2, #0]
   11652:	761a      	strb	r2, [r3, #24]
}
   11654:	46bd      	mov	sp, r7
   11656:	b002      	add	sp, #8
   11658:	bd80      	pop	{r7, pc}
   1165a:	46c0      	nop			; (mov r8, r8)
   1165c:	20003804 	.word	0x20003804
   11660:	0001194d 	.word	0x0001194d
   11664:	20000028 	.word	0x20000028

00011668 <SX1272LoRaSetPa20dBm>:
    LoRaSettings.PayloadLength = SX1272LR->RegPayloadLength;
    return LoRaSettings.PayloadLength;
}

void SX1272LoRaSetPa20dBm( bool enale )
{
   11668:	b580      	push	{r7, lr}
   1166a:	b082      	sub	sp, #8
   1166c:	af00      	add	r7, sp, #0
   1166e:	1c02      	adds	r2, r0, #0
   11670:	1dfb      	adds	r3, r7, #7
   11672:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_PADAC, &SX1272LR->RegPaDac );
   11674:	4b10      	ldr	r3, [pc, #64]	; (116b8 <SX1272LoRaSetPa20dBm+0x50>)
   11676:	681b      	ldr	r3, [r3, #0]
   11678:	3359      	adds	r3, #89	; 0x59
   1167a:	205a      	movs	r0, #90	; 0x5a
   1167c:	1c19      	adds	r1, r3, #0
   1167e:	4b0f      	ldr	r3, [pc, #60]	; (116bc <SX1272LoRaSetPa20dBm+0x54>)
   11680:	4798      	blx	r3
    
    if( enale == true )
   11682:	1dfb      	adds	r3, r7, #7
   11684:	781b      	ldrb	r3, [r3, #0]
   11686:	2b00      	cmp	r3, #0
   11688:	d005      	beq.n	11696 <SX1272LoRaSetPa20dBm+0x2e>
    {
        SX1272LR->RegPaDac = 0x87;
   1168a:	4b0b      	ldr	r3, [pc, #44]	; (116b8 <SX1272LoRaSetPa20dBm+0x50>)
   1168c:	681a      	ldr	r2, [r3, #0]
   1168e:	2359      	movs	r3, #89	; 0x59
   11690:	2187      	movs	r1, #135	; 0x87
   11692:	54d1      	strb	r1, [r2, r3]
   11694:	e004      	b.n	116a0 <SX1272LoRaSetPa20dBm+0x38>
    }
    else
    {
        SX1272LR->RegPaDac = 0x84;
   11696:	4b08      	ldr	r3, [pc, #32]	; (116b8 <SX1272LoRaSetPa20dBm+0x50>)
   11698:	681a      	ldr	r2, [r3, #0]
   1169a:	2359      	movs	r3, #89	; 0x59
   1169c:	2184      	movs	r1, #132	; 0x84
   1169e:	54d1      	strb	r1, [r2, r3]
    }
    SX1272Write( REG_LR_PADAC, SX1272LR->RegPaDac );
   116a0:	4b05      	ldr	r3, [pc, #20]	; (116b8 <SX1272LoRaSetPa20dBm+0x50>)
   116a2:	681a      	ldr	r2, [r3, #0]
   116a4:	2359      	movs	r3, #89	; 0x59
   116a6:	5cd3      	ldrb	r3, [r2, r3]
   116a8:	205a      	movs	r0, #90	; 0x5a
   116aa:	1c19      	adds	r1, r3, #0
   116ac:	4b04      	ldr	r3, [pc, #16]	; (116c0 <SX1272LoRaSetPa20dBm+0x58>)
   116ae:	4798      	blx	r3
}
   116b0:	46bd      	mov	sp, r7
   116b2:	b002      	add	sp, #8
   116b4:	bd80      	pop	{r7, pc}
   116b6:	46c0      	nop			; (mov r8, r8)
   116b8:	20003804 	.word	0x20003804
   116bc:	00011981 	.word	0x00011981
   116c0:	0001194d 	.word	0x0001194d

000116c4 <SX1272LoRaSetContinuousTx>:
    SX1272Read( REG_LR_PARAMP, &SX1272LR->RegPaRamp );
    return SX1272LR->RegPaRamp & ~RFLR_PARAMP_MASK;
}

void SX1272LoRaSetContinuousTx( uint16_t value )
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	af00      	add	r7, sp, #0
   116ca:	1c02      	adds	r2, r0, #0
   116cc:	1dbb      	adds	r3, r7, #6
   116ce:	801a      	strh	r2, [r3, #0]
	SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   116d0:	4b11      	ldr	r3, [pc, #68]	; (11718 <SX1272LoRaSetContinuousTx+0x54>)
   116d2:	681b      	ldr	r3, [r3, #0]
   116d4:	331e      	adds	r3, #30
   116d6:	201e      	movs	r0, #30
   116d8:	1c19      	adds	r1, r3, #0
   116da:	2201      	movs	r2, #1
   116dc:	4b0f      	ldr	r3, [pc, #60]	; (1171c <SX1272LoRaSetContinuousTx+0x58>)
   116de:	4798      	blx	r3

	SX1272LR->RegModemConfig2 = ((SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_MASK ) | (value));
   116e0:	4b0d      	ldr	r3, [pc, #52]	; (11718 <SX1272LoRaSetContinuousTx+0x54>)
   116e2:	681a      	ldr	r2, [r3, #0]
   116e4:	4b0c      	ldr	r3, [pc, #48]	; (11718 <SX1272LoRaSetContinuousTx+0x54>)
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	7f9b      	ldrb	r3, [r3, #30]
   116ea:	b2db      	uxtb	r3, r3
   116ec:	2108      	movs	r1, #8
   116ee:	438b      	bics	r3, r1
   116f0:	b2d9      	uxtb	r1, r3
   116f2:	1dbb      	adds	r3, r7, #6
   116f4:	881b      	ldrh	r3, [r3, #0]
   116f6:	b2db      	uxtb	r3, r3
   116f8:	430b      	orrs	r3, r1
   116fa:	b2db      	uxtb	r3, r3
   116fc:	b2db      	uxtb	r3, r3
   116fe:	7793      	strb	r3, [r2, #30]
	SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 1 );
   11700:	4b05      	ldr	r3, [pc, #20]	; (11718 <SX1272LoRaSetContinuousTx+0x54>)
   11702:	681b      	ldr	r3, [r3, #0]
   11704:	331e      	adds	r3, #30
   11706:	201e      	movs	r0, #30
   11708:	1c19      	adds	r1, r3, #0
   1170a:	2201      	movs	r2, #1
   1170c:	4b04      	ldr	r3, [pc, #16]	; (11720 <SX1272LoRaSetContinuousTx+0x5c>)
   1170e:	4798      	blx	r3
}
   11710:	46bd      	mov	sp, r7
   11712:	b002      	add	sp, #8
   11714:	bd80      	pop	{r7, pc}
   11716:	46c0      	nop			; (mov r8, r8)
   11718:	20003804 	.word	0x20003804
   1171c:	000119f5 	.word	0x000119f5
   11720:	000119bd 	.word	0x000119bd

00011724 <SX1272LoRaSetSymbTimeout>:

void SX1272LoRaSetSymbTimeout( uint16_t value )
{
   11724:	b580      	push	{r7, lr}
   11726:	b082      	sub	sp, #8
   11728:	af00      	add	r7, sp, #0
   1172a:	1c02      	adds	r2, r0, #0
   1172c:	1dbb      	adds	r3, r7, #6
   1172e:	801a      	strh	r2, [r3, #0]
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   11730:	4b17      	ldr	r3, [pc, #92]	; (11790 <SX1272LoRaSetSymbTimeout+0x6c>)
   11732:	681b      	ldr	r3, [r3, #0]
   11734:	331e      	adds	r3, #30
   11736:	201e      	movs	r0, #30
   11738:	1c19      	adds	r1, r3, #0
   1173a:	2202      	movs	r2, #2
   1173c:	4b15      	ldr	r3, [pc, #84]	; (11794 <SX1272LoRaSetSymbTimeout+0x70>)
   1173e:	4798      	blx	r3

    SX1272LR->RegModemConfig2 = ( SX1272LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) | ( ( value >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );
   11740:	4b13      	ldr	r3, [pc, #76]	; (11790 <SX1272LoRaSetSymbTimeout+0x6c>)
   11742:	681a      	ldr	r2, [r3, #0]
   11744:	4b12      	ldr	r3, [pc, #72]	; (11790 <SX1272LoRaSetSymbTimeout+0x6c>)
   11746:	681b      	ldr	r3, [r3, #0]
   11748:	7f9b      	ldrb	r3, [r3, #30]
   1174a:	b2db      	uxtb	r3, r3
   1174c:	2103      	movs	r1, #3
   1174e:	438b      	bics	r3, r1
   11750:	b2d9      	uxtb	r1, r3
   11752:	1dbb      	adds	r3, r7, #6
   11754:	881b      	ldrh	r3, [r3, #0]
   11756:	0a1b      	lsrs	r3, r3, #8
   11758:	b29b      	uxth	r3, r3
   1175a:	b2db      	uxtb	r3, r3
   1175c:	1c18      	adds	r0, r3, #0
   1175e:	2303      	movs	r3, #3
   11760:	4003      	ands	r3, r0
   11762:	b2db      	uxtb	r3, r3
   11764:	430b      	orrs	r3, r1
   11766:	b2db      	uxtb	r3, r3
   11768:	b2db      	uxtb	r3, r3
   1176a:	7793      	strb	r3, [r2, #30]
    SX1272LR->RegSymbTimeoutLsb = value & 0xFF;
   1176c:	4b08      	ldr	r3, [pc, #32]	; (11790 <SX1272LoRaSetSymbTimeout+0x6c>)
   1176e:	681b      	ldr	r3, [r3, #0]
   11770:	1dba      	adds	r2, r7, #6
   11772:	8812      	ldrh	r2, [r2, #0]
   11774:	b2d2      	uxtb	r2, r2
   11776:	77da      	strb	r2, [r3, #31]
    SX1272WriteBuffer( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
   11778:	4b05      	ldr	r3, [pc, #20]	; (11790 <SX1272LoRaSetSymbTimeout+0x6c>)
   1177a:	681b      	ldr	r3, [r3, #0]
   1177c:	331e      	adds	r3, #30
   1177e:	201e      	movs	r0, #30
   11780:	1c19      	adds	r1, r3, #0
   11782:	2202      	movs	r2, #2
   11784:	4b04      	ldr	r3, [pc, #16]	; (11798 <SX1272LoRaSetSymbTimeout+0x74>)
   11786:	4798      	blx	r3
}
   11788:	46bd      	mov	sp, r7
   1178a:	b002      	add	sp, #8
   1178c:	bd80      	pop	{r7, pc}
   1178e:	46c0      	nop			; (mov r8, r8)
   11790:	20003804 	.word	0x20003804
   11794:	000119f5 	.word	0x000119f5
   11798:	000119bd 	.word	0x000119bd

0001179c <SX1272LoRaSetLowDatarateOptimize>:
    SX1272ReadBuffer2( REG_LR_MODEMCONFIG2, &SX1272LR->RegModemConfig2, 2 );
    return ( ( SX1272LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) << 8 ) | SX1272LR->RegSymbTimeoutLsb;
}

void SX1272LoRaSetLowDatarateOptimize( bool enable )
{
   1179c:	b580      	push	{r7, lr}
   1179e:	b082      	sub	sp, #8
   117a0:	af00      	add	r7, sp, #0
   117a2:	1c02      	adds	r2, r0, #0
   117a4:	1dfb      	adds	r3, r7, #7
   117a6:	701a      	strb	r2, [r3, #0]
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
   117a8:	4b0f      	ldr	r3, [pc, #60]	; (117e8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   117aa:	681b      	ldr	r3, [r3, #0]
   117ac:	331d      	adds	r3, #29
   117ae:	201d      	movs	r0, #29
   117b0:	1c19      	adds	r1, r3, #0
   117b2:	4b0e      	ldr	r3, [pc, #56]	; (117ec <SX1272LoRaSetLowDatarateOptimize+0x50>)
   117b4:	4798      	blx	r3
    SX1272LR->RegModemConfig1 = ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK ) | enable;
   117b6:	4b0c      	ldr	r3, [pc, #48]	; (117e8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   117b8:	681a      	ldr	r2, [r3, #0]
   117ba:	4b0b      	ldr	r3, [pc, #44]	; (117e8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   117bc:	681b      	ldr	r3, [r3, #0]
   117be:	7f5b      	ldrb	r3, [r3, #29]
   117c0:	b2db      	uxtb	r3, r3
   117c2:	2101      	movs	r1, #1
   117c4:	438b      	bics	r3, r1
   117c6:	b2d9      	uxtb	r1, r3
   117c8:	1dfb      	adds	r3, r7, #7
   117ca:	781b      	ldrb	r3, [r3, #0]
   117cc:	430b      	orrs	r3, r1
   117ce:	b2db      	uxtb	r3, r3
   117d0:	b2db      	uxtb	r3, r3
   117d2:	7753      	strb	r3, [r2, #29]
    SX1272Write( REG_LR_MODEMCONFIG1, SX1272LR->RegModemConfig1 );
   117d4:	4b04      	ldr	r3, [pc, #16]	; (117e8 <SX1272LoRaSetLowDatarateOptimize+0x4c>)
   117d6:	681b      	ldr	r3, [r3, #0]
   117d8:	7f5b      	ldrb	r3, [r3, #29]
   117da:	201d      	movs	r0, #29
   117dc:	1c19      	adds	r1, r3, #0
   117de:	4b04      	ldr	r3, [pc, #16]	; (117f0 <SX1272LoRaSetLowDatarateOptimize+0x54>)
   117e0:	4798      	blx	r3
}
   117e2:	46bd      	mov	sp, r7
   117e4:	b002      	add	sp, #8
   117e6:	bd80      	pop	{r7, pc}
   117e8:	20003804 	.word	0x20003804
   117ec:	00011981 	.word	0x00011981
   117f0:	0001194d 	.word	0x0001194d

000117f4 <SX1272LoRaSetNbTrigPeaks>:
    SX1272Read( REG_LR_MODEMCONFIG1, &SX1272LR->RegModemConfig1 );
    return ( SX1272LR->RegModemConfig1 & RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_ON );
}

void SX1272LoRaSetNbTrigPeaks( uint8_t value )
{
   117f4:	b580      	push	{r7, lr}
   117f6:	b082      	sub	sp, #8
   117f8:	af00      	add	r7, sp, #0
   117fa:	1c02      	adds	r2, r0, #0
   117fc:	1dfb      	adds	r3, r7, #7
   117fe:	701a      	strb	r2, [r3, #0]
    SX1272Read( 0x31, &SX1272LR->RegTestReserved31 );
   11800:	4b11      	ldr	r3, [pc, #68]	; (11848 <SX1272LoRaSetNbTrigPeaks+0x54>)
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	3330      	adds	r3, #48	; 0x30
   11806:	2031      	movs	r0, #49	; 0x31
   11808:	1c19      	adds	r1, r3, #0
   1180a:	4b10      	ldr	r3, [pc, #64]	; (1184c <SX1272LoRaSetNbTrigPeaks+0x58>)
   1180c:	4798      	blx	r3
    SX1272LR->RegTestReserved31 = ( SX1272LR->RegTestReserved31 & 0xF8 ) | value;
   1180e:	4b0e      	ldr	r3, [pc, #56]	; (11848 <SX1272LoRaSetNbTrigPeaks+0x54>)
   11810:	681a      	ldr	r2, [r3, #0]
   11812:	4b0d      	ldr	r3, [pc, #52]	; (11848 <SX1272LoRaSetNbTrigPeaks+0x54>)
   11814:	6819      	ldr	r1, [r3, #0]
   11816:	2330      	movs	r3, #48	; 0x30
   11818:	5ccb      	ldrb	r3, [r1, r3]
   1181a:	b2db      	uxtb	r3, r3
   1181c:	2107      	movs	r1, #7
   1181e:	438b      	bics	r3, r1
   11820:	b2d9      	uxtb	r1, r3
   11822:	1dfb      	adds	r3, r7, #7
   11824:	781b      	ldrb	r3, [r3, #0]
   11826:	430b      	orrs	r3, r1
   11828:	b2db      	uxtb	r3, r3
   1182a:	b2d9      	uxtb	r1, r3
   1182c:	2330      	movs	r3, #48	; 0x30
   1182e:	54d1      	strb	r1, [r2, r3]
    SX1272Write( 0x31, SX1272LR->RegTestReserved31 );
   11830:	4b05      	ldr	r3, [pc, #20]	; (11848 <SX1272LoRaSetNbTrigPeaks+0x54>)
   11832:	681a      	ldr	r2, [r3, #0]
   11834:	2330      	movs	r3, #48	; 0x30
   11836:	5cd3      	ldrb	r3, [r2, r3]
   11838:	2031      	movs	r0, #49	; 0x31
   1183a:	1c19      	adds	r1, r3, #0
   1183c:	4b04      	ldr	r3, [pc, #16]	; (11850 <SX1272LoRaSetNbTrigPeaks+0x5c>)
   1183e:	4798      	blx	r3
}
   11840:	46bd      	mov	sp, r7
   11842:	b002      	add	sp, #8
   11844:	bd80      	pop	{r7, pc}
   11846:	46c0      	nop			; (mov r8, r8)
   11848:	20003804 	.word	0x20003804
   1184c:	00011981 	.word	0x00011981
   11850:	0001194d 	.word	0x0001194d

00011854 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11854:	b580      	push	{r7, lr}
   11856:	b084      	sub	sp, #16
   11858:	af00      	add	r7, sp, #0
   1185a:	1c02      	adds	r2, r0, #0
   1185c:	1dfb      	adds	r3, r7, #7
   1185e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11860:	1c3b      	adds	r3, r7, #0
   11862:	330f      	adds	r3, #15
   11864:	1dfa      	adds	r2, r7, #7
   11866:	7812      	ldrb	r2, [r2, #0]
   11868:	09d2      	lsrs	r2, r2, #7
   1186a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1186c:	1c3b      	adds	r3, r7, #0
   1186e:	330e      	adds	r3, #14
   11870:	1dfa      	adds	r2, r7, #7
   11872:	7812      	ldrb	r2, [r2, #0]
   11874:	0952      	lsrs	r2, r2, #5
   11876:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11878:	4b0d      	ldr	r3, [pc, #52]	; (118b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1187a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1187c:	1c3b      	adds	r3, r7, #0
   1187e:	330f      	adds	r3, #15
   11880:	781b      	ldrb	r3, [r3, #0]
   11882:	2b00      	cmp	r3, #0
   11884:	d10e      	bne.n	118a4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   11886:	1c3b      	adds	r3, r7, #0
   11888:	330f      	adds	r3, #15
   1188a:	781b      	ldrb	r3, [r3, #0]
   1188c:	009b      	lsls	r3, r3, #2
   1188e:	2210      	movs	r2, #16
   11890:	19d2      	adds	r2, r2, r7
   11892:	18d3      	adds	r3, r2, r3
   11894:	3b08      	subs	r3, #8
   11896:	681a      	ldr	r2, [r3, #0]
   11898:	1c3b      	adds	r3, r7, #0
   1189a:	330e      	adds	r3, #14
   1189c:	781b      	ldrb	r3, [r3, #0]
   1189e:	01db      	lsls	r3, r3, #7
   118a0:	18d3      	adds	r3, r2, r3
   118a2:	e000      	b.n	118a6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   118a4:	2300      	movs	r3, #0
	}
}
   118a6:	1c18      	adds	r0, r3, #0
   118a8:	46bd      	mov	sp, r7
   118aa:	b004      	add	sp, #16
   118ac:	bd80      	pop	{r7, pc}
   118ae:	46c0      	nop			; (mov r8, r8)
   118b0:	41004400 	.word	0x41004400

000118b4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   118b4:	b580      	push	{r7, lr}
   118b6:	b082      	sub	sp, #8
   118b8:	af00      	add	r7, sp, #0
   118ba:	1c02      	adds	r2, r0, #0
   118bc:	1dfb      	adds	r3, r7, #7
   118be:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   118c0:	1dfb      	adds	r3, r7, #7
   118c2:	781b      	ldrb	r3, [r3, #0]
   118c4:	1c18      	adds	r0, r3, #0
   118c6:	4b03      	ldr	r3, [pc, #12]	; (118d4 <port_get_group_from_gpio_pin+0x20>)
   118c8:	4798      	blx	r3
   118ca:	1c03      	adds	r3, r0, #0
}
   118cc:	1c18      	adds	r0, r3, #0
   118ce:	46bd      	mov	sp, r7
   118d0:	b002      	add	sp, #8
   118d2:	bd80      	pop	{r7, pc}
   118d4:	00011855 	.word	0x00011855

000118d8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   118d8:	b580      	push	{r7, lr}
   118da:	b082      	sub	sp, #8
   118dc:	af00      	add	r7, sp, #0
   118de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   118e0:	687b      	ldr	r3, [r7, #4]
   118e2:	2200      	movs	r2, #0
   118e4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   118e6:	687b      	ldr	r3, [r7, #4]
   118e8:	2201      	movs	r2, #1
   118ea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   118ec:	687b      	ldr	r3, [r7, #4]
   118ee:	2200      	movs	r2, #0
   118f0:	709a      	strb	r2, [r3, #2]
}
   118f2:	46bd      	mov	sp, r7
   118f4:	b002      	add	sp, #8
   118f6:	bd80      	pop	{r7, pc}

000118f8 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   118f8:	b580      	push	{r7, lr}
   118fa:	b084      	sub	sp, #16
   118fc:	af00      	add	r7, sp, #0
   118fe:	1c0a      	adds	r2, r1, #0
   11900:	1dfb      	adds	r3, r7, #7
   11902:	1c01      	adds	r1, r0, #0
   11904:	7019      	strb	r1, [r3, #0]
   11906:	1dbb      	adds	r3, r7, #6
   11908:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1190a:	1dfb      	adds	r3, r7, #7
   1190c:	781b      	ldrb	r3, [r3, #0]
   1190e:	1c18      	adds	r0, r3, #0
   11910:	4b0d      	ldr	r3, [pc, #52]	; (11948 <port_pin_set_output_level+0x50>)
   11912:	4798      	blx	r3
   11914:	1c03      	adds	r3, r0, #0
   11916:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11918:	1dfb      	adds	r3, r7, #7
   1191a:	781a      	ldrb	r2, [r3, #0]
   1191c:	231f      	movs	r3, #31
   1191e:	4013      	ands	r3, r2
   11920:	2201      	movs	r2, #1
   11922:	1c11      	adds	r1, r2, #0
   11924:	4099      	lsls	r1, r3
   11926:	1c0b      	adds	r3, r1, #0
   11928:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1192a:	1dbb      	adds	r3, r7, #6
   1192c:	781b      	ldrb	r3, [r3, #0]
   1192e:	2b00      	cmp	r3, #0
   11930:	d003      	beq.n	1193a <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   11932:	68fb      	ldr	r3, [r7, #12]
   11934:	68ba      	ldr	r2, [r7, #8]
   11936:	619a      	str	r2, [r3, #24]
   11938:	e002      	b.n	11940 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1193a:	68fb      	ldr	r3, [r7, #12]
   1193c:	68ba      	ldr	r2, [r7, #8]
   1193e:	615a      	str	r2, [r3, #20]
	}
}
   11940:	46bd      	mov	sp, r7
   11942:	b004      	add	sp, #16
   11944:	bd80      	pop	{r7, pc}
   11946:	46c0      	nop			; (mov r8, r8)
   11948:	000118b5 	.word	0x000118b5

0001194c <SX1272Write>:
bool LoRaOn = false;
bool LoRaOnState = false;


void SX1272Write( uint8_t addr, uint8_t data )
{
   1194c:	b580      	push	{r7, lr}
   1194e:	b082      	sub	sp, #8
   11950:	af00      	add	r7, sp, #0
   11952:	1c0a      	adds	r2, r1, #0
   11954:	1dfb      	adds	r3, r7, #7
   11956:	1c01      	adds	r1, r0, #0
   11958:	7019      	strb	r1, [r3, #0]
   1195a:	1dbb      	adds	r3, r7, #6
   1195c:	701a      	strb	r2, [r3, #0]
	SPIXInOut(addr|0x80,&data,1);
   1195e:	1dfb      	adds	r3, r7, #7
   11960:	781b      	ldrb	r3, [r3, #0]
   11962:	2280      	movs	r2, #128	; 0x80
   11964:	4252      	negs	r2, r2
   11966:	4313      	orrs	r3, r2
   11968:	b2da      	uxtb	r2, r3
   1196a:	1dbb      	adds	r3, r7, #6
   1196c:	1c10      	adds	r0, r2, #0
   1196e:	1c19      	adds	r1, r3, #0
   11970:	2201      	movs	r2, #1
   11972:	4b02      	ldr	r3, [pc, #8]	; (1197c <SX1272Write+0x30>)
   11974:	4798      	blx	r3
}
   11976:	46bd      	mov	sp, r7
   11978:	b002      	add	sp, #8
   1197a:	bd80      	pop	{r7, pc}
   1197c:	0000e5c5 	.word	0x0000e5c5

00011980 <SX1272Read>:

void SX1272Read( uint8_t addr, uint8_t *data )
{
   11980:	b580      	push	{r7, lr}
   11982:	b084      	sub	sp, #16
   11984:	af00      	add	r7, sp, #0
   11986:	1c02      	adds	r2, r0, #0
   11988:	6039      	str	r1, [r7, #0]
   1198a:	1dfb      	adds	r3, r7, #7
   1198c:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[2];
	SPIXInOut2(addr & 0x7f,tempBuffer,1);
   1198e:	1dfb      	adds	r3, r7, #7
   11990:	781a      	ldrb	r2, [r3, #0]
   11992:	237f      	movs	r3, #127	; 0x7f
   11994:	4013      	ands	r3, r2
   11996:	b2da      	uxtb	r2, r3
   11998:	1c3b      	adds	r3, r7, #0
   1199a:	330c      	adds	r3, #12
   1199c:	1c10      	adds	r0, r2, #0
   1199e:	1c19      	adds	r1, r3, #0
   119a0:	2201      	movs	r2, #1
   119a2:	4b05      	ldr	r3, [pc, #20]	; (119b8 <SX1272Read+0x38>)
   119a4:	4798      	blx	r3
	*data = tempBuffer[0];
   119a6:	1c3b      	adds	r3, r7, #0
   119a8:	330c      	adds	r3, #12
   119aa:	781a      	ldrb	r2, [r3, #0]
   119ac:	683b      	ldr	r3, [r7, #0]
   119ae:	701a      	strb	r2, [r3, #0]
}
   119b0:	46bd      	mov	sp, r7
   119b2:	b004      	add	sp, #16
   119b4:	bd80      	pop	{r7, pc}
   119b6:	46c0      	nop			; (mov r8, r8)
   119b8:	0000e6bd 	.word	0x0000e6bd

000119bc <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   119bc:	b580      	push	{r7, lr}
   119be:	b082      	sub	sp, #8
   119c0:	af00      	add	r7, sp, #0
   119c2:	6039      	str	r1, [r7, #0]
   119c4:	1dfb      	adds	r3, r7, #7
   119c6:	1c01      	adds	r1, r0, #0
   119c8:	7019      	strb	r1, [r3, #0]
   119ca:	1d3b      	adds	r3, r7, #4
   119cc:	801a      	strh	r2, [r3, #0]
	SPIXInOut(addr|0x80,buffer,size);
   119ce:	1dfb      	adds	r3, r7, #7
   119d0:	781b      	ldrb	r3, [r3, #0]
   119d2:	2280      	movs	r2, #128	; 0x80
   119d4:	4252      	negs	r2, r2
   119d6:	4313      	orrs	r3, r2
   119d8:	b2d9      	uxtb	r1, r3
   119da:	683a      	ldr	r2, [r7, #0]
   119dc:	1d3b      	adds	r3, r7, #4
   119de:	881b      	ldrh	r3, [r3, #0]
   119e0:	1c08      	adds	r0, r1, #0
   119e2:	1c11      	adds	r1, r2, #0
   119e4:	1c1a      	adds	r2, r3, #0
   119e6:	4b02      	ldr	r3, [pc, #8]	; (119f0 <SX1272WriteBuffer+0x34>)
   119e8:	4798      	blx	r3
}
   119ea:	46bd      	mov	sp, r7
   119ec:	b002      	add	sp, #8
   119ee:	bd80      	pop	{r7, pc}
   119f0:	0000e5c5 	.word	0x0000e5c5

000119f4 <SX1272ReadBuffer2>:

void SX1272ReadBuffer2( uint8_t addr, uint8_t *buffer, uint16_t size )
{
   119f4:	b580      	push	{r7, lr}
   119f6:	b082      	sub	sp, #8
   119f8:	af00      	add	r7, sp, #0
   119fa:	6039      	str	r1, [r7, #0]
   119fc:	1dfb      	adds	r3, r7, #7
   119fe:	1c01      	adds	r1, r0, #0
   11a00:	7019      	strb	r1, [r3, #0]
   11a02:	1d3b      	adds	r3, r7, #4
   11a04:	801a      	strh	r2, [r3, #0]
	SPIXInOut2(addr & 0x7f,buffer,size);
   11a06:	1dfb      	adds	r3, r7, #7
   11a08:	781a      	ldrb	r2, [r3, #0]
   11a0a:	237f      	movs	r3, #127	; 0x7f
   11a0c:	4013      	ands	r3, r2
   11a0e:	b2d9      	uxtb	r1, r3
   11a10:	683a      	ldr	r2, [r7, #0]
   11a12:	1d3b      	adds	r3, r7, #4
   11a14:	881b      	ldrh	r3, [r3, #0]
   11a16:	1c08      	adds	r0, r1, #0
   11a18:	1c11      	adds	r1, r2, #0
   11a1a:	1c1a      	adds	r2, r3, #0
   11a1c:	4b02      	ldr	r3, [pc, #8]	; (11a28 <SX1272ReadBuffer2+0x34>)
   11a1e:	4798      	blx	r3
}
   11a20:	46bd      	mov	sp, r7
   11a22:	b002      	add	sp, #8
   11a24:	bd80      	pop	{r7, pc}
   11a26:	46c0      	nop			; (mov r8, r8)
   11a28:	0000e6bd 	.word	0x0000e6bd

00011a2c <SX1272WriteFifo>:

 
void SX1272WriteFifo( uint8_t *buffer, uint16_t size )
{
   11a2c:	b580      	push	{r7, lr}
   11a2e:	b082      	sub	sp, #8
   11a30:	af00      	add	r7, sp, #0
   11a32:	6078      	str	r0, [r7, #4]
   11a34:	1c0a      	adds	r2, r1, #0
   11a36:	1cbb      	adds	r3, r7, #2
   11a38:	801a      	strh	r2, [r3, #0]
//	SX1272WriteBuffer( 0, buffer, size );
	SPIXInOut(0x80,buffer,size);
   11a3a:	687a      	ldr	r2, [r7, #4]
   11a3c:	1cbb      	adds	r3, r7, #2
   11a3e:	881b      	ldrh	r3, [r3, #0]
   11a40:	2080      	movs	r0, #128	; 0x80
   11a42:	1c11      	adds	r1, r2, #0
   11a44:	1c1a      	adds	r2, r3, #0
   11a46:	4b02      	ldr	r3, [pc, #8]	; (11a50 <SX1272WriteFifo+0x24>)
   11a48:	4798      	blx	r3
}
   11a4a:	46bd      	mov	sp, r7
   11a4c:	b002      	add	sp, #8
   11a4e:	bd80      	pop	{r7, pc}
   11a50:	0000e5c5 	.word	0x0000e5c5

00011a54 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint16_t size )
{
   11a54:	b580      	push	{r7, lr}
   11a56:	b082      	sub	sp, #8
   11a58:	af00      	add	r7, sp, #0
   11a5a:	6078      	str	r0, [r7, #4]
   11a5c:	1c0a      	adds	r2, r1, #0
   11a5e:	1cbb      	adds	r3, r7, #2
   11a60:	801a      	strh	r2, [r3, #0]
//	SX1272ReadBuffer2( 0, buffer, size );
	SPIXInOut2(0,buffer,size);	
   11a62:	687a      	ldr	r2, [r7, #4]
   11a64:	1cbb      	adds	r3, r7, #2
   11a66:	881b      	ldrh	r3, [r3, #0]
   11a68:	2000      	movs	r0, #0
   11a6a:	1c11      	adds	r1, r2, #0
   11a6c:	1c1a      	adds	r2, r3, #0
   11a6e:	4b02      	ldr	r3, [pc, #8]	; (11a78 <SX1272ReadFifo+0x24>)
   11a70:	4798      	blx	r3
}
   11a72:	46bd      	mov	sp, r7
   11a74:	b002      	add	sp, #8
   11a76:	bd80      	pop	{r7, pc}
   11a78:	0000e6bd 	.word	0x0000e6bd

00011a7c <SX1272Init>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Init(uint8_t radiowhich )
{
   11a7c:	b580      	push	{r7, lr}
   11a7e:	b082      	sub	sp, #8
   11a80:	af00      	add	r7, sp, #0
   11a82:	1c02      	adds	r2, r0, #0
   11a84:	1dfb      	adds	r3, r7, #7
   11a86:	701a      	strb	r2, [r3, #0]
    // Initialize FSK and LoRa registers structure
	if (radiowhich == WHICHRADIO_LORA)
   11a88:	1dfb      	adds	r3, r7, #7
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	2b99      	cmp	r3, #153	; 0x99
   11a8e:	d10f      	bne.n	11ab0 <SX1272Init+0x34>
	{
		SX1272LR = ( tSX1272LR* )SX1272Regs;
   11a90:	4b10      	ldr	r3, [pc, #64]	; (11ad4 <SX1272Init+0x58>)
   11a92:	4a11      	ldr	r2, [pc, #68]	; (11ad8 <SX1272Init+0x5c>)
   11a94:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   11a96:	4b11      	ldr	r3, [pc, #68]	; (11adc <SX1272Init+0x60>)
   11a98:	4798      	blx	r3
		LoRaOn = true;
   11a9a:	4b11      	ldr	r3, [pc, #68]	; (11ae0 <SX1272Init+0x64>)
   11a9c:	2201      	movs	r2, #1
   11a9e:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   11aa0:	4b0f      	ldr	r3, [pc, #60]	; (11ae0 <SX1272Init+0x64>)
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	1c18      	adds	r0, r3, #0
   11aa6:	4b0f      	ldr	r3, [pc, #60]	; (11ae4 <SX1272Init+0x68>)
   11aa8:	4798      	blx	r3
		// Initialize LoRa modem
		SX1272LoRaInit( );		
   11aaa:	4b0f      	ldr	r3, [pc, #60]	; (11ae8 <SX1272Init+0x6c>)
   11aac:	4798      	blx	r3
   11aae:	e00e      	b.n	11ace <SX1272Init+0x52>
	}
	else
	{
		SX1272 = ( tSX1272* )SX1272Regs;
   11ab0:	4b0e      	ldr	r3, [pc, #56]	; (11aec <SX1272Init+0x70>)
   11ab2:	4a09      	ldr	r2, [pc, #36]	; (11ad8 <SX1272Init+0x5c>)
   11ab4:	601a      	str	r2, [r3, #0]
		SX1272Reset( );
   11ab6:	4b09      	ldr	r3, [pc, #36]	; (11adc <SX1272Init+0x60>)
   11ab8:	4798      	blx	r3
		LoRaOn = false;
   11aba:	4b09      	ldr	r3, [pc, #36]	; (11ae0 <SX1272Init+0x64>)
   11abc:	2200      	movs	r2, #0
   11abe:	701a      	strb	r2, [r3, #0]
		SX1272SetLoRaOn( LoRaOn );
   11ac0:	4b07      	ldr	r3, [pc, #28]	; (11ae0 <SX1272Init+0x64>)
   11ac2:	781b      	ldrb	r3, [r3, #0]
   11ac4:	1c18      	adds	r0, r3, #0
   11ac6:	4b07      	ldr	r3, [pc, #28]	; (11ae4 <SX1272Init+0x68>)
   11ac8:	4798      	blx	r3
		// Initialize FSK modem
		SX1272FskInit( );		
   11aca:	4b09      	ldr	r3, [pc, #36]	; (11af0 <SX1272Init+0x74>)
   11acc:	4798      	blx	r3
	}
}
   11ace:	46bd      	mov	sp, r7
   11ad0:	b002      	add	sp, #8
   11ad2:	bd80      	pop	{r7, pc}
   11ad4:	20003804 	.word	0x20003804
   11ad8:	20003908 	.word	0x20003908
   11adc:	00011af5 	.word	0x00011af5
   11ae0:	200004f9 	.word	0x200004f9
   11ae4:	00011b71 	.word	0x00011b71
   11ae8:	00010b2d 	.word	0x00010b2d
   11aec:	20003700 	.word	0x20003700
   11af0:	0000fd45 	.word	0x0000fd45

00011af4 <SX1272Reset>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272Reset( void )
{
   11af4:	b580      	push	{r7, lr}
   11af6:	b082      	sub	sp, #8
   11af8:	af00      	add	r7, sp, #0
	uint32_t i; 
  	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   11afa:	1c3b      	adds	r3, r7, #0
   11afc:	1c18      	adds	r0, r3, #0
   11afe:	4b18      	ldr	r3, [pc, #96]	; (11b60 <SX1272Reset+0x6c>)
   11b00:	4798      	blx	r3
	//--------------------------
	// Set RESET pin to 1
	port_pin_set_output_level(LORA_XRESET, 1);
   11b02:	2028      	movs	r0, #40	; 0x28
   11b04:	2101      	movs	r1, #1
   11b06:	4b17      	ldr	r3, [pc, #92]	; (11b64 <SX1272Reset+0x70>)
   11b08:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   11b0a:	1c3b      	adds	r3, r7, #0
   11b0c:	2201      	movs	r2, #1
   11b0e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LORA_XRESET, &pin_conf);
   11b10:	1c3b      	adds	r3, r7, #0
   11b12:	2028      	movs	r0, #40	; 0x28
   11b14:	1c19      	adds	r1, r3, #0
   11b16:	4b14      	ldr	r3, [pc, #80]	; (11b68 <SX1272Reset+0x74>)
   11b18:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   11b1a:	2300      	movs	r3, #0
   11b1c:	607b      	str	r3, [r7, #4]
   11b1e:	e002      	b.n	11b26 <SX1272Reset+0x32>
   11b20:	687b      	ldr	r3, [r7, #4]
   11b22:	3301      	adds	r3, #1
   11b24:	607b      	str	r3, [r7, #4]
   11b26:	687a      	ldr	r2, [r7, #4]
   11b28:	4b10      	ldr	r3, [pc, #64]	; (11b6c <SX1272Reset+0x78>)
   11b2a:	429a      	cmp	r2, r3
   11b2c:	d9f8      	bls.n	11b20 <SX1272Reset+0x2c>
	{
		
	}
  	port_pin_set_output_level(LORA_XRESET, 0);
   11b2e:	2028      	movs	r0, #40	; 0x28
   11b30:	2100      	movs	r1, #0
   11b32:	4b0c      	ldr	r3, [pc, #48]	; (11b64 <SX1272Reset+0x70>)
   11b34:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;		
   11b36:	1c3b      	adds	r3, r7, #0
   11b38:	2201      	movs	r2, #1
   11b3a:	701a      	strb	r2, [r3, #0]
    port_pin_set_config(LORA_XRESET, &pin_conf);   
   11b3c:	1c3b      	adds	r3, r7, #0
   11b3e:	2028      	movs	r0, #40	; 0x28
   11b40:	1c19      	adds	r1, r3, #0
   11b42:	4b09      	ldr	r3, [pc, #36]	; (11b68 <SX1272Reset+0x74>)
   11b44:	4798      	blx	r3
    // Wait 1 msec
	for (i=0;i<0x00007000;i++)
   11b46:	2300      	movs	r3, #0
   11b48:	607b      	str	r3, [r7, #4]
   11b4a:	e002      	b.n	11b52 <SX1272Reset+0x5e>
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	3301      	adds	r3, #1
   11b50:	607b      	str	r3, [r7, #4]
   11b52:	687a      	ldr	r2, [r7, #4]
   11b54:	4b05      	ldr	r3, [pc, #20]	; (11b6c <SX1272Reset+0x78>)
   11b56:	429a      	cmp	r2, r3
   11b58:	d9f8      	bls.n	11b4c <SX1272Reset+0x58>
	{
		
	}
}
   11b5a:	46bd      	mov	sp, r7
   11b5c:	b002      	add	sp, #8
   11b5e:	bd80      	pop	{r7, pc}
   11b60:	000118d9 	.word	0x000118d9
   11b64:	000118f9 	.word	0x000118f9
   11b68:	00011cfd 	.word	0x00011cfd
   11b6c:	00006fff 	.word	0x00006fff

00011b70 <SX1272SetLoRaOn>:
// FUNCTION:
//------------------------------------------------------------------------------
// This function
//==============================================================================
void SX1272SetLoRaOn( bool enable )
{
   11b70:	b580      	push	{r7, lr}
   11b72:	b082      	sub	sp, #8
   11b74:	af00      	add	r7, sp, #0
   11b76:	1c02      	adds	r2, r0, #0
   11b78:	1dfb      	adds	r3, r7, #7
   11b7a:	701a      	strb	r2, [r3, #0]
 
    LoRaOnState = enable;
   11b7c:	4b28      	ldr	r3, [pc, #160]	; (11c20 <SX1272SetLoRaOn+0xb0>)
   11b7e:	1dfa      	adds	r2, r7, #7
   11b80:	7812      	ldrb	r2, [r2, #0]
   11b82:	701a      	strb	r2, [r3, #0]

    if( LoRaOn == true )
   11b84:	4b27      	ldr	r3, [pc, #156]	; (11c24 <SX1272SetLoRaOn+0xb4>)
   11b86:	781b      	ldrb	r3, [r3, #0]
   11b88:	2b00      	cmp	r3, #0
   11b8a:	d023      	beq.n	11bd4 <SX1272SetLoRaOn+0x64>
    {
		//---------------------------------------
		// set up the LORA RADIO
		//---------------------------------------
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   11b8c:	4b26      	ldr	r3, [pc, #152]	; (11c28 <SX1272SetLoRaOn+0xb8>)
   11b8e:	2001      	movs	r0, #1
   11b90:	1c19      	adds	r1, r3, #0
   11b92:	226f      	movs	r2, #111	; 0x6f
   11b94:	4b25      	ldr	r3, [pc, #148]	; (11c2c <SX1272SetLoRaOn+0xbc>)
   11b96:	4798      	blx	r3
	    SX1272LoRaSetOpMode( RFLR_OPMODE_SLEEP );
   11b98:	2000      	movs	r0, #0
   11b9a:	4b25      	ldr	r3, [pc, #148]	; (11c30 <SX1272SetLoRaOn+0xc0>)
   11b9c:	4798      	blx	r3
	    
	    SX1272LR->RegOpMode = ( SX1272LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
   11b9e:	4b25      	ldr	r3, [pc, #148]	; (11c34 <SX1272SetLoRaOn+0xc4>)
   11ba0:	681a      	ldr	r2, [r3, #0]
   11ba2:	4b24      	ldr	r3, [pc, #144]	; (11c34 <SX1272SetLoRaOn+0xc4>)
   11ba4:	681b      	ldr	r3, [r3, #0]
   11ba6:	785b      	ldrb	r3, [r3, #1]
   11ba8:	2180      	movs	r1, #128	; 0x80
   11baa:	4249      	negs	r1, r1
   11bac:	430b      	orrs	r3, r1
   11bae:	b2db      	uxtb	r3, r3
   11bb0:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_LR_OPMODE, SX1272LR->RegOpMode );
   11bb2:	4b20      	ldr	r3, [pc, #128]	; (11c34 <SX1272SetLoRaOn+0xc4>)
   11bb4:	681b      	ldr	r3, [r3, #0]
   11bb6:	785b      	ldrb	r3, [r3, #1]
   11bb8:	2001      	movs	r0, #1
   11bba:	1c19      	adds	r1, r3, #0
   11bbc:	4b1e      	ldr	r3, [pc, #120]	; (11c38 <SX1272SetLoRaOn+0xc8>)
   11bbe:	4798      	blx	r3
	    
	    SX1272LoRaSetOpMode( RFLR_OPMODE_STANDBY );
   11bc0:	2001      	movs	r0, #1
   11bc2:	4b1b      	ldr	r3, [pc, #108]	; (11c30 <SX1272SetLoRaOn+0xc0>)
   11bc4:	4798      	blx	r3
	    //        SX1272LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
	    // CadDetected          ModeReady
	    //        SX1272LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
	    //        SX1272WriteBuffer( REG_LR_DIOMAPPING1, &SX1272LR->RegDioMapping1, 2 );
	    
	    SX1272ReadBuffer2( REG_LR_OPMODE, SX1272Regs, 0x70 - 1 );
   11bc6:	4b18      	ldr	r3, [pc, #96]	; (11c28 <SX1272SetLoRaOn+0xb8>)
   11bc8:	2001      	movs	r0, #1
   11bca:	1c19      	adds	r1, r3, #0
   11bcc:	226f      	movs	r2, #111	; 0x6f
   11bce:	4b17      	ldr	r3, [pc, #92]	; (11c2c <SX1272SetLoRaOn+0xbc>)
   11bd0:	4798      	blx	r3
   11bd2:	e021      	b.n	11c18 <SX1272SetLoRaOn+0xa8>
    else
    {
		//-----------------------------
		// set up FSK RADIO
		//-----------------------------
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   11bd4:	4b19      	ldr	r3, [pc, #100]	; (11c3c <SX1272SetLoRaOn+0xcc>)
   11bd6:	2001      	movs	r0, #1
   11bd8:	1c19      	adds	r1, r3, #0
   11bda:	226f      	movs	r2, #111	; 0x6f
   11bdc:	4b13      	ldr	r3, [pc, #76]	; (11c2c <SX1272SetLoRaOn+0xbc>)
   11bde:	4798      	blx	r3
	    SX1272FskSetOpMode( RF_OPMODE_SLEEP );
   11be0:	2000      	movs	r0, #0
   11be2:	4b17      	ldr	r3, [pc, #92]	; (11c40 <SX1272SetLoRaOn+0xd0>)
   11be4:	4798      	blx	r3
	    
	    SX1272->RegOpMode = ( SX1272->RegOpMode & RF_OPMODE_LONGRANGEMODE_MASK ) | RF_OPMODE_LONGRANGEMODE_OFF;
   11be6:	4b17      	ldr	r3, [pc, #92]	; (11c44 <SX1272SetLoRaOn+0xd4>)
   11be8:	681a      	ldr	r2, [r3, #0]
   11bea:	4b16      	ldr	r3, [pc, #88]	; (11c44 <SX1272SetLoRaOn+0xd4>)
   11bec:	681b      	ldr	r3, [r3, #0]
   11bee:	7859      	ldrb	r1, [r3, #1]
   11bf0:	237f      	movs	r3, #127	; 0x7f
   11bf2:	400b      	ands	r3, r1
   11bf4:	b2db      	uxtb	r3, r3
   11bf6:	7053      	strb	r3, [r2, #1]
	    SX1272Write( REG_OPMODE, SX1272->RegOpMode );
   11bf8:	4b12      	ldr	r3, [pc, #72]	; (11c44 <SX1272SetLoRaOn+0xd4>)
   11bfa:	681b      	ldr	r3, [r3, #0]
   11bfc:	785b      	ldrb	r3, [r3, #1]
   11bfe:	2001      	movs	r0, #1
   11c00:	1c19      	adds	r1, r3, #0
   11c02:	4b0d      	ldr	r3, [pc, #52]	; (11c38 <SX1272SetLoRaOn+0xc8>)
   11c04:	4798      	blx	r3
	    
	    SX1272FskSetOpMode( RFLR_OPMODE_STANDBY );
   11c06:	2001      	movs	r0, #1
   11c08:	4b0d      	ldr	r3, [pc, #52]	; (11c40 <SX1272SetLoRaOn+0xd0>)
   11c0a:	4798      	blx	r3
	    SX1272ReadBuffer2( REG_OPMODE, SX1272Regs+1, 0x70 - 1 );
   11c0c:	4b0b      	ldr	r3, [pc, #44]	; (11c3c <SX1272SetLoRaOn+0xcc>)
   11c0e:	2001      	movs	r0, #1
   11c10:	1c19      	adds	r1, r3, #0
   11c12:	226f      	movs	r2, #111	; 0x6f
   11c14:	4b05      	ldr	r3, [pc, #20]	; (11c2c <SX1272SetLoRaOn+0xbc>)
   11c16:	4798      	blx	r3
    }
}
   11c18:	46bd      	mov	sp, r7
   11c1a:	b002      	add	sp, #8
   11c1c:	bd80      	pop	{r7, pc}
   11c1e:	46c0      	nop			; (mov r8, r8)
   11c20:	200004fa 	.word	0x200004fa
   11c24:	200004f9 	.word	0x200004f9
   11c28:	20003908 	.word	0x20003908
   11c2c:	000119f5 	.word	0x000119f5
   11c30:	00010ca5 	.word	0x00010ca5
   11c34:	20003804 	.word	0x20003804
   11c38:	0001194d 	.word	0x0001194d
   11c3c:	20003909 	.word	0x20003909
   11c40:	0000ff71 	.word	0x0000ff71
   11c44:	20003700 	.word	0x20003700

00011c48 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   11c48:	b580      	push	{r7, lr}
   11c4a:	b082      	sub	sp, #8
   11c4c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   11c4e:	4b0f      	ldr	r3, [pc, #60]	; (11c8c <cpu_irq_enter_critical+0x44>)
   11c50:	681b      	ldr	r3, [r3, #0]
   11c52:	2b00      	cmp	r3, #0
   11c54:	d112      	bne.n	11c7c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   11c56:	f3ef 8310 	mrs	r3, PRIMASK
   11c5a:	607b      	str	r3, [r7, #4]
  return(result);
   11c5c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d109      	bne.n	11c76 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   11c62:	b672      	cpsid	i
   11c64:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   11c68:	4b09      	ldr	r3, [pc, #36]	; (11c90 <cpu_irq_enter_critical+0x48>)
   11c6a:	2200      	movs	r2, #0
   11c6c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   11c6e:	4b09      	ldr	r3, [pc, #36]	; (11c94 <cpu_irq_enter_critical+0x4c>)
   11c70:	2201      	movs	r2, #1
   11c72:	701a      	strb	r2, [r3, #0]
   11c74:	e002      	b.n	11c7c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   11c76:	4b07      	ldr	r3, [pc, #28]	; (11c94 <cpu_irq_enter_critical+0x4c>)
   11c78:	2200      	movs	r2, #0
   11c7a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   11c7c:	4b03      	ldr	r3, [pc, #12]	; (11c8c <cpu_irq_enter_critical+0x44>)
   11c7e:	681b      	ldr	r3, [r3, #0]
   11c80:	1c5a      	adds	r2, r3, #1
   11c82:	4b02      	ldr	r3, [pc, #8]	; (11c8c <cpu_irq_enter_critical+0x44>)
   11c84:	601a      	str	r2, [r3, #0]
}
   11c86:	46bd      	mov	sp, r7
   11c88:	b002      	add	sp, #8
   11c8a:	bd80      	pop	{r7, pc}
   11c8c:	200004fc 	.word	0x200004fc
   11c90:	20000044 	.word	0x20000044
   11c94:	20000500 	.word	0x20000500

00011c98 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   11c98:	b580      	push	{r7, lr}
   11c9a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   11c9c:	4b0a      	ldr	r3, [pc, #40]	; (11cc8 <cpu_irq_leave_critical+0x30>)
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	1e5a      	subs	r2, r3, #1
   11ca2:	4b09      	ldr	r3, [pc, #36]	; (11cc8 <cpu_irq_leave_critical+0x30>)
   11ca4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   11ca6:	4b08      	ldr	r3, [pc, #32]	; (11cc8 <cpu_irq_leave_critical+0x30>)
   11ca8:	681b      	ldr	r3, [r3, #0]
   11caa:	2b00      	cmp	r3, #0
   11cac:	d10a      	bne.n	11cc4 <cpu_irq_leave_critical+0x2c>
   11cae:	4b07      	ldr	r3, [pc, #28]	; (11ccc <cpu_irq_leave_critical+0x34>)
   11cb0:	781b      	ldrb	r3, [r3, #0]
   11cb2:	b2db      	uxtb	r3, r3
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	d005      	beq.n	11cc4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   11cb8:	4b05      	ldr	r3, [pc, #20]	; (11cd0 <cpu_irq_leave_critical+0x38>)
   11cba:	2201      	movs	r2, #1
   11cbc:	701a      	strb	r2, [r3, #0]
   11cbe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   11cc2:	b662      	cpsie	i
	}
}
   11cc4:	46bd      	mov	sp, r7
   11cc6:	bd80      	pop	{r7, pc}
   11cc8:	200004fc 	.word	0x200004fc
   11ccc:	20000500 	.word	0x20000500
   11cd0:	20000044 	.word	0x20000044

00011cd4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   11cd4:	b580      	push	{r7, lr}
   11cd6:	b082      	sub	sp, #8
   11cd8:	af00      	add	r7, sp, #0
   11cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11cdc:	687b      	ldr	r3, [r7, #4]
   11cde:	2280      	movs	r2, #128	; 0x80
   11ce0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11ce2:	687b      	ldr	r3, [r7, #4]
   11ce4:	2200      	movs	r2, #0
   11ce6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ce8:	687b      	ldr	r3, [r7, #4]
   11cea:	2201      	movs	r2, #1
   11cec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11cee:	687b      	ldr	r3, [r7, #4]
   11cf0:	2200      	movs	r2, #0
   11cf2:	70da      	strb	r2, [r3, #3]
}
   11cf4:	46bd      	mov	sp, r7
   11cf6:	b002      	add	sp, #8
   11cf8:	bd80      	pop	{r7, pc}
   11cfa:	46c0      	nop			; (mov r8, r8)

00011cfc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11cfc:	b580      	push	{r7, lr}
   11cfe:	b084      	sub	sp, #16
   11d00:	af00      	add	r7, sp, #0
   11d02:	1c02      	adds	r2, r0, #0
   11d04:	6039      	str	r1, [r7, #0]
   11d06:	1dfb      	adds	r3, r7, #7
   11d08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11d0a:	1c3b      	adds	r3, r7, #0
   11d0c:	330c      	adds	r3, #12
   11d0e:	1c18      	adds	r0, r3, #0
   11d10:	4b0f      	ldr	r3, [pc, #60]	; (11d50 <port_pin_set_config+0x54>)
   11d12:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11d14:	1c3b      	adds	r3, r7, #0
   11d16:	330c      	adds	r3, #12
   11d18:	2280      	movs	r2, #128	; 0x80
   11d1a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11d1c:	683b      	ldr	r3, [r7, #0]
   11d1e:	781a      	ldrb	r2, [r3, #0]
   11d20:	1c3b      	adds	r3, r7, #0
   11d22:	330c      	adds	r3, #12
   11d24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11d26:	683b      	ldr	r3, [r7, #0]
   11d28:	785a      	ldrb	r2, [r3, #1]
   11d2a:	1c3b      	adds	r3, r7, #0
   11d2c:	330c      	adds	r3, #12
   11d2e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11d30:	683b      	ldr	r3, [r7, #0]
   11d32:	789a      	ldrb	r2, [r3, #2]
   11d34:	1c3b      	adds	r3, r7, #0
   11d36:	330c      	adds	r3, #12
   11d38:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11d3a:	1dfb      	adds	r3, r7, #7
   11d3c:	781a      	ldrb	r2, [r3, #0]
   11d3e:	1c3b      	adds	r3, r7, #0
   11d40:	330c      	adds	r3, #12
   11d42:	1c10      	adds	r0, r2, #0
   11d44:	1c19      	adds	r1, r3, #0
   11d46:	4b03      	ldr	r3, [pc, #12]	; (11d54 <port_pin_set_config+0x58>)
   11d48:	4798      	blx	r3
}
   11d4a:	46bd      	mov	sp, r7
   11d4c:	b004      	add	sp, #16
   11d4e:	bd80      	pop	{r7, pc}
   11d50:	00011cd5 	.word	0x00011cd5
   11d54:	000142a1 	.word	0x000142a1

00011d58 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   11d58:	b580      	push	{r7, lr}
   11d5a:	b082      	sub	sp, #8
   11d5c:	af00      	add	r7, sp, #0
   11d5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   11d60:	687b      	ldr	r3, [r7, #4]
   11d62:	2200      	movs	r2, #0
   11d64:	701a      	strb	r2, [r3, #0]
}
   11d66:	46bd      	mov	sp, r7
   11d68:	b002      	add	sp, #8
   11d6a:	bd80      	pop	{r7, pc}

00011d6c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   11d6c:	b580      	push	{r7, lr}
   11d6e:	b082      	sub	sp, #8
   11d70:	af00      	add	r7, sp, #0
   11d72:	1c02      	adds	r2, r0, #0
   11d74:	6039      	str	r1, [r7, #0]
   11d76:	1dfb      	adds	r3, r7, #7
   11d78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11d7a:	1dfb      	adds	r3, r7, #7
   11d7c:	781b      	ldrb	r3, [r3, #0]
   11d7e:	2b01      	cmp	r3, #1
   11d80:	d00a      	beq.n	11d98 <system_apb_clock_set_mask+0x2c>
   11d82:	2b02      	cmp	r3, #2
   11d84:	d00f      	beq.n	11da6 <system_apb_clock_set_mask+0x3a>
   11d86:	2b00      	cmp	r3, #0
   11d88:	d114      	bne.n	11db4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   11d8a:	4b0e      	ldr	r3, [pc, #56]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11d8c:	4a0d      	ldr	r2, [pc, #52]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11d8e:	6991      	ldr	r1, [r2, #24]
   11d90:	683a      	ldr	r2, [r7, #0]
   11d92:	430a      	orrs	r2, r1
   11d94:	619a      	str	r2, [r3, #24]
			break;
   11d96:	e00f      	b.n	11db8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   11d98:	4b0a      	ldr	r3, [pc, #40]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11d9a:	4a0a      	ldr	r2, [pc, #40]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11d9c:	69d1      	ldr	r1, [r2, #28]
   11d9e:	683a      	ldr	r2, [r7, #0]
   11da0:	430a      	orrs	r2, r1
   11da2:	61da      	str	r2, [r3, #28]
			break;
   11da4:	e008      	b.n	11db8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   11da6:	4b07      	ldr	r3, [pc, #28]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11da8:	4a06      	ldr	r2, [pc, #24]	; (11dc4 <system_apb_clock_set_mask+0x58>)
   11daa:	6a11      	ldr	r1, [r2, #32]
   11dac:	683a      	ldr	r2, [r7, #0]
   11dae:	430a      	orrs	r2, r1
   11db0:	621a      	str	r2, [r3, #32]
			break;
   11db2:	e001      	b.n	11db8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   11db4:	2317      	movs	r3, #23
   11db6:	e000      	b.n	11dba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   11db8:	2300      	movs	r3, #0
}
   11dba:	1c18      	adds	r0, r3, #0
   11dbc:	46bd      	mov	sp, r7
   11dbe:	b002      	add	sp, #8
   11dc0:	bd80      	pop	{r7, pc}
   11dc2:	46c0      	nop			; (mov r8, r8)
   11dc4:	40000400 	.word	0x40000400

00011dc8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b082      	sub	sp, #8
   11dcc:	af00      	add	r7, sp, #0
   11dce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11dd0:	687b      	ldr	r3, [r7, #4]
   11dd2:	2280      	movs	r2, #128	; 0x80
   11dd4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	2200      	movs	r2, #0
   11dda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2201      	movs	r2, #1
   11de0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11de2:	687b      	ldr	r3, [r7, #4]
   11de4:	2200      	movs	r2, #0
   11de6:	70da      	strb	r2, [r3, #3]
}
   11de8:	46bd      	mov	sp, r7
   11dea:	b002      	add	sp, #8
   11dec:	bd80      	pop	{r7, pc}
   11dee:	46c0      	nop			; (mov r8, r8)

00011df0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   11df0:	b580      	push	{r7, lr}
   11df2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   11df4:	4b05      	ldr	r3, [pc, #20]	; (11e0c <system_is_debugger_present+0x1c>)
   11df6:	789b      	ldrb	r3, [r3, #2]
   11df8:	b2db      	uxtb	r3, r3
   11dfa:	1c1a      	adds	r2, r3, #0
   11dfc:	2302      	movs	r3, #2
   11dfe:	4013      	ands	r3, r2
   11e00:	1e5a      	subs	r2, r3, #1
   11e02:	4193      	sbcs	r3, r2
   11e04:	b2db      	uxtb	r3, r3
}
   11e06:	1c18      	adds	r0, r3, #0
   11e08:	46bd      	mov	sp, r7
   11e0a:	bd80      	pop	{r7, pc}
   11e0c:	41002000 	.word	0x41002000

00011e10 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   11e10:	b580      	push	{r7, lr}
   11e12:	b084      	sub	sp, #16
   11e14:	af00      	add	r7, sp, #0
   11e16:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   11e18:	687b      	ldr	r3, [r7, #4]
   11e1a:	681b      	ldr	r3, [r3, #0]
   11e1c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
   11e1e:	68fb      	ldr	r3, [r7, #12]
   11e20:	8a1b      	ldrh	r3, [r3, #16]
   11e22:	b29b      	uxth	r3, r3
   11e24:	1c1a      	adds	r2, r3, #0
   11e26:	2380      	movs	r3, #128	; 0x80
   11e28:	021b      	lsls	r3, r3, #8
   11e2a:	4013      	ands	r3, r2
   11e2c:	1e5a      	subs	r2, r3, #1
   11e2e:	4193      	sbcs	r3, r2
   11e30:	b2db      	uxtb	r3, r3
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   11e32:	1c18      	adds	r0, r3, #0
   11e34:	46bd      	mov	sp, r7
   11e36:	b004      	add	sp, #16
   11e38:	bd80      	pop	{r7, pc}
   11e3a:	46c0      	nop			; (mov r8, r8)

00011e3c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   11e3c:	b580      	push	{r7, lr}
   11e3e:	b082      	sub	sp, #8
   11e40:	af00      	add	r7, sp, #0
   11e42:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   11e44:	46c0      	nop			; (mov r8, r8)
   11e46:	687b      	ldr	r3, [r7, #4]
   11e48:	1c18      	adds	r0, r3, #0
   11e4a:	4b04      	ldr	r3, [pc, #16]	; (11e5c <_i2c_master_wait_for_sync+0x20>)
   11e4c:	4798      	blx	r3
   11e4e:	1c03      	adds	r3, r0, #0
   11e50:	2b00      	cmp	r3, #0
   11e52:	d1f8      	bne.n	11e46 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   11e54:	46bd      	mov	sp, r7
   11e56:	b002      	add	sp, #8
   11e58:	bd80      	pop	{r7, pc}
   11e5a:	46c0      	nop			; (mov r8, r8)
   11e5c:	00011e11 	.word	0x00011e11

00011e60 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   11e60:	b590      	push	{r4, r7, lr}
   11e62:	b08d      	sub	sp, #52	; 0x34
   11e64:	af00      	add	r7, sp, #0
   11e66:	6078      	str	r0, [r7, #4]
   11e68:	6039      	str	r1, [r7, #0]
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
   11e6a:	1c3b      	adds	r3, r7, #0
   11e6c:	332b      	adds	r3, #43	; 0x2b
   11e6e:	2200      	movs	r2, #0
   11e70:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11e72:	687b      	ldr	r3, [r7, #4]
   11e74:	681b      	ldr	r3, [r3, #0]
   11e76:	61fb      	str	r3, [r7, #28]
	Sercom *const sercom_hw = module->hw;
   11e78:	687b      	ldr	r3, [r7, #4]
   11e7a:	681b      	ldr	r3, [r3, #0]
   11e7c:	61bb      	str	r3, [r7, #24]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   11e7e:	1c3c      	adds	r4, r7, #0
   11e80:	3417      	adds	r4, #23
   11e82:	69bb      	ldr	r3, [r7, #24]
   11e84:	1c18      	adds	r0, r3, #0
   11e86:	4b5a      	ldr	r3, [pc, #360]	; (11ff0 <_i2c_master_set_config+0x190>)
   11e88:	4798      	blx	r3
   11e8a:	1c03      	adds	r3, r0, #0
   11e8c:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   11e8e:	1c3b      	adds	r3, r7, #0
   11e90:	330c      	adds	r3, #12
   11e92:	1c18      	adds	r0, r3, #0
   11e94:	4b57      	ldr	r3, [pc, #348]	; (11ff4 <_i2c_master_set_config+0x194>)
   11e96:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   11e98:	683b      	ldr	r3, [r7, #0]
   11e9a:	695b      	ldr	r3, [r3, #20]
   11e9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pad1 = config->pinmux_pad1;
   11e9e:	683b      	ldr	r3, [r7, #0]
   11ea0:	699b      	ldr	r3, [r3, #24]
   11ea2:	623b      	str	r3, [r7, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   11ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ea6:	2b00      	cmp	r3, #0
   11ea8:	d106      	bne.n	11eb8 <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   11eaa:	69bb      	ldr	r3, [r7, #24]
   11eac:	1c18      	adds	r0, r3, #0
   11eae:	2100      	movs	r1, #0
   11eb0:	4b51      	ldr	r3, [pc, #324]	; (11ff8 <_i2c_master_set_config+0x198>)
   11eb2:	4798      	blx	r3
   11eb4:	1c03      	adds	r3, r0, #0
   11eb6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   11eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eba:	b2da      	uxtb	r2, r3
   11ebc:	1c3b      	adds	r3, r7, #0
   11ebe:	330c      	adds	r3, #12
   11ec0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11ec2:	1c3b      	adds	r3, r7, #0
   11ec4:	330c      	adds	r3, #12
   11ec6:	2202      	movs	r2, #2
   11ec8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   11eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ecc:	0c1b      	lsrs	r3, r3, #16
   11ece:	b2da      	uxtb	r2, r3
   11ed0:	1c3b      	adds	r3, r7, #0
   11ed2:	330c      	adds	r3, #12
   11ed4:	1c10      	adds	r0, r2, #0
   11ed6:	1c19      	adds	r1, r3, #0
   11ed8:	4b48      	ldr	r3, [pc, #288]	; (11ffc <_i2c_master_set_config+0x19c>)
   11eda:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   11edc:	6a3b      	ldr	r3, [r7, #32]
   11ede:	2b00      	cmp	r3, #0
   11ee0:	d106      	bne.n	11ef0 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   11ee2:	69bb      	ldr	r3, [r7, #24]
   11ee4:	1c18      	adds	r0, r3, #0
   11ee6:	2101      	movs	r1, #1
   11ee8:	4b43      	ldr	r3, [pc, #268]	; (11ff8 <_i2c_master_set_config+0x198>)
   11eea:	4798      	blx	r3
   11eec:	1c03      	adds	r3, r0, #0
   11eee:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   11ef0:	6a3b      	ldr	r3, [r7, #32]
   11ef2:	b2da      	uxtb	r2, r3
   11ef4:	1c3b      	adds	r3, r7, #0
   11ef6:	330c      	adds	r3, #12
   11ef8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   11efa:	1c3b      	adds	r3, r7, #0
   11efc:	330c      	adds	r3, #12
   11efe:	2202      	movs	r2, #2
   11f00:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   11f02:	6a3b      	ldr	r3, [r7, #32]
   11f04:	0c1b      	lsrs	r3, r3, #16
   11f06:	b2da      	uxtb	r2, r3
   11f08:	1c3b      	adds	r3, r7, #0
   11f0a:	330c      	adds	r3, #12
   11f0c:	1c10      	adds	r0, r2, #0
   11f0e:	1c19      	adds	r1, r3, #0
   11f10:	4b3a      	ldr	r3, [pc, #232]	; (11ffc <_i2c_master_set_config+0x19c>)
   11f12:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   11f14:	683b      	ldr	r3, [r7, #0]
   11f16:	899a      	ldrh	r2, [r3, #12]
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   11f1c:	683b      	ldr	r3, [r7, #0]
   11f1e:	89da      	ldrh	r2, [r3, #14]
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   11f24:	683b      	ldr	r3, [r7, #0]
   11f26:	7c1b      	ldrb	r3, [r3, #16]
   11f28:	2b00      	cmp	r3, #0
   11f2a:	d104      	bne.n	11f36 <_i2c_master_set_config+0xd6>
   11f2c:	4b34      	ldr	r3, [pc, #208]	; (12000 <_i2c_master_set_config+0x1a0>)
   11f2e:	4798      	blx	r3
   11f30:	1c03      	adds	r3, r0, #0
   11f32:	2b00      	cmp	r3, #0
   11f34:	d002      	beq.n	11f3c <_i2c_master_set_config+0xdc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   11f36:	2380      	movs	r3, #128	; 0x80
   11f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   11f3a:	e001      	b.n	11f40 <_i2c_master_set_config+0xe0>
	} else {
		tmp_ctrla = 0;
   11f3c:	2300      	movs	r3, #0
   11f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   11f40:	683b      	ldr	r3, [r7, #0]
   11f42:	689b      	ldr	r3, [r3, #8]
   11f44:	2b00      	cmp	r3, #0
   11f46:	d004      	beq.n	11f52 <_i2c_master_set_config+0xf2>
		tmp_ctrla |= config->start_hold_time;
   11f48:	683b      	ldr	r3, [r7, #0]
   11f4a:	689b      	ldr	r3, [r3, #8]
   11f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11f4e:	4313      	orrs	r3, r2
   11f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   11f52:	683b      	ldr	r3, [r7, #0]
   11f54:	7f1b      	ldrb	r3, [r3, #28]
   11f56:	2b00      	cmp	r3, #0
   11f58:	d004      	beq.n	11f64 <_i2c_master_set_config+0x104>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
   11f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11f5c:	2280      	movs	r2, #128	; 0x80
   11f5e:	05d2      	lsls	r2, r2, #23
   11f60:	4313      	orrs	r3, r2
   11f62:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   11f64:	683b      	ldr	r3, [r7, #0]
   11f66:	6a1b      	ldr	r3, [r3, #32]
   11f68:	2b00      	cmp	r3, #0
   11f6a:	d004      	beq.n	11f76 <_i2c_master_set_config+0x116>
		tmp_ctrla |= config->inactive_timeout;
   11f6c:	683b      	ldr	r3, [r7, #0]
   11f6e:	6a1b      	ldr	r3, [r3, #32]
   11f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11f72:	4313      	orrs	r3, r2
   11f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   11f76:	69fb      	ldr	r3, [r7, #28]
   11f78:	681a      	ldr	r2, [r3, #0]
   11f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11f7c:	431a      	orrs	r2, r3
   11f7e:	69fb      	ldr	r3, [r7, #28]
   11f80:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   11f82:	69fb      	ldr	r3, [r7, #28]
   11f84:	2280      	movs	r2, #128	; 0x80
   11f86:	0052      	lsls	r2, r2, #1
   11f88:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   11f8a:	1c3b      	adds	r3, r7, #0
   11f8c:	3317      	adds	r3, #23
   11f8e:	781b      	ldrb	r3, [r3, #0]
   11f90:	330d      	adds	r3, #13
   11f92:	b2db      	uxtb	r3, r3
   11f94:	1c18      	adds	r0, r3, #0
   11f96:	4b1b      	ldr	r3, [pc, #108]	; (12004 <_i2c_master_set_config+0x1a4>)
   11f98:	4798      	blx	r3
   11f9a:	1c02      	adds	r2, r0, #0
   11f9c:	683b      	ldr	r3, [r7, #0]
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	21fa      	movs	r1, #250	; 0xfa
   11fa2:	00c9      	lsls	r1, r1, #3
   11fa4:	434b      	muls	r3, r1
   11fa6:	18d3      	adds	r3, r2, r3
   11fa8:	1e59      	subs	r1, r3, #1
   11faa:	683b      	ldr	r3, [r7, #0]
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	22fa      	movs	r2, #250	; 0xfa
   11fb0:	00d2      	lsls	r2, r2, #3
   11fb2:	435a      	muls	r2, r3
   11fb4:	4b14      	ldr	r3, [pc, #80]	; (12008 <_i2c_master_set_config+0x1a8>)
   11fb6:	1c08      	adds	r0, r1, #0
   11fb8:	1c11      	adds	r1, r2, #0
   11fba:	4798      	blx	r3
   11fbc:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
   11fbe:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
   11fc0:	613b      	str	r3, [r7, #16]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
   11fc2:	693b      	ldr	r3, [r7, #16]
   11fc4:	2bff      	cmp	r3, #255	; 0xff
   11fc6:	dc02      	bgt.n	11fce <_i2c_master_set_config+0x16e>
   11fc8:	693b      	ldr	r3, [r7, #16]
   11fca:	2b00      	cmp	r3, #0
   11fcc:	da04      	bge.n	11fd8 <_i2c_master_set_config+0x178>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   11fce:	1c3b      	adds	r3, r7, #0
   11fd0:	332b      	adds	r3, #43	; 0x2b
   11fd2:	2240      	movs	r2, #64	; 0x40
   11fd4:	701a      	strb	r2, [r3, #0]
   11fd6:	e004      	b.n	11fe2 <_i2c_master_set_config+0x182>
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
   11fd8:	693b      	ldr	r3, [r7, #16]
   11fda:	b2db      	uxtb	r3, r3
   11fdc:	1c1a      	adds	r2, r3, #0
   11fde:	69fb      	ldr	r3, [r7, #28]
   11fe0:	815a      	strh	r2, [r3, #10]
	}

	return tmp_status_code;
   11fe2:	1c3b      	adds	r3, r7, #0
   11fe4:	332b      	adds	r3, #43	; 0x2b
   11fe6:	781b      	ldrb	r3, [r3, #0]
}
   11fe8:	1c18      	adds	r0, r3, #0
   11fea:	46bd      	mov	sp, r7
   11fec:	b00d      	add	sp, #52	; 0x34
   11fee:	bd90      	pop	{r4, r7, pc}
   11ff0:	000128ed 	.word	0x000128ed
   11ff4:	00011dc9 	.word	0x00011dc9
   11ff8:	0001271d 	.word	0x0001271d
   11ffc:	000142a1 	.word	0x000142a1
   12000:	00011df1 	.word	0x00011df1
   12004:	000140e1 	.word	0x000140e1
   12008:	00015719 	.word	0x00015719

0001200c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1200c:	b580      	push	{r7, lr}
   1200e:	b08a      	sub	sp, #40	; 0x28
   12010:	af00      	add	r7, sp, #0
   12012:	60f8      	str	r0, [r7, #12]
   12014:	60b9      	str	r1, [r7, #8]
   12016:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   12018:	68fb      	ldr	r3, [r7, #12]
   1201a:	68ba      	ldr	r2, [r7, #8]
   1201c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1201e:	68fb      	ldr	r3, [r7, #12]
   12020:	681b      	ldr	r3, [r3, #0]
   12022:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12024:	68fb      	ldr	r3, [r7, #12]
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	1c18      	adds	r0, r3, #0
   1202a:	4b26      	ldr	r3, [pc, #152]	; (120c4 <i2c_master_init+0xb8>)
   1202c:	4798      	blx	r3
   1202e:	1c03      	adds	r3, r0, #0
   12030:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   12032:	6a3b      	ldr	r3, [r7, #32]
   12034:	3302      	adds	r3, #2
   12036:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12038:	6a3b      	ldr	r3, [r7, #32]
   1203a:	330d      	adds	r3, #13
   1203c:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1203e:	69fb      	ldr	r3, [r7, #28]
   12040:	2201      	movs	r2, #1
   12042:	1c11      	adds	r1, r2, #0
   12044:	4099      	lsls	r1, r3
   12046:	1c0b      	adds	r3, r1, #0
   12048:	2002      	movs	r0, #2
   1204a:	1c19      	adds	r1, r3, #0
   1204c:	4b1e      	ldr	r3, [pc, #120]	; (120c8 <i2c_master_init+0xbc>)
   1204e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12050:	1c3b      	adds	r3, r7, #0
   12052:	3314      	adds	r3, #20
   12054:	1c18      	adds	r0, r3, #0
   12056:	4b1d      	ldr	r3, [pc, #116]	; (120cc <i2c_master_init+0xc0>)
   12058:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1205a:	687b      	ldr	r3, [r7, #4]
   1205c:	791a      	ldrb	r2, [r3, #4]
   1205e:	1c3b      	adds	r3, r7, #0
   12060:	3314      	adds	r3, #20
   12062:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12064:	69bb      	ldr	r3, [r7, #24]
   12066:	b2da      	uxtb	r2, r3
   12068:	1c3b      	adds	r3, r7, #0
   1206a:	3314      	adds	r3, #20
   1206c:	1c10      	adds	r0, r2, #0
   1206e:	1c19      	adds	r1, r3, #0
   12070:	4b17      	ldr	r3, [pc, #92]	; (120d0 <i2c_master_init+0xc4>)
   12072:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12074:	69bb      	ldr	r3, [r7, #24]
   12076:	b2db      	uxtb	r3, r3
   12078:	1c18      	adds	r0, r3, #0
   1207a:	4b16      	ldr	r3, [pc, #88]	; (120d4 <i2c_master_init+0xc8>)
   1207c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1207e:	687b      	ldr	r3, [r7, #4]
   12080:	791b      	ldrb	r3, [r3, #4]
   12082:	1c18      	adds	r0, r3, #0
   12084:	2100      	movs	r1, #0
   12086:	4b14      	ldr	r3, [pc, #80]	; (120d8 <i2c_master_init+0xcc>)
   12088:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1208c:	681a      	ldr	r2, [r3, #0]
   1208e:	2302      	movs	r3, #2
   12090:	4013      	ands	r3, r2
   12092:	d001      	beq.n	12098 <i2c_master_init+0x8c>
		return STATUS_ERR_DENIED;
   12094:	231c      	movs	r3, #28
   12096:	e010      	b.n	120ba <i2c_master_init+0xae>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   12098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1209a:	681a      	ldr	r2, [r3, #0]
   1209c:	2301      	movs	r3, #1
   1209e:	4013      	ands	r3, r2
   120a0:	d001      	beq.n	120a6 <i2c_master_init+0x9a>
		return STATUS_BUSY;
   120a2:	2305      	movs	r3, #5
   120a4:	e009      	b.n	120ba <i2c_master_init+0xae>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
   120a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   120a8:	2214      	movs	r2, #20
   120aa:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   120ac:	68fa      	ldr	r2, [r7, #12]
   120ae:	687b      	ldr	r3, [r7, #4]
   120b0:	1c10      	adds	r0, r2, #0
   120b2:	1c19      	adds	r1, r3, #0
   120b4:	4b09      	ldr	r3, [pc, #36]	; (120dc <i2c_master_init+0xd0>)
   120b6:	4798      	blx	r3
   120b8:	1c03      	adds	r3, r0, #0
}
   120ba:	1c18      	adds	r0, r3, #0
   120bc:	46bd      	mov	sp, r7
   120be:	b00a      	add	sp, #40	; 0x28
   120c0:	bd80      	pop	{r7, pc}
   120c2:	46c0      	nop			; (mov r8, r8)
   120c4:	000128ed 	.word	0x000128ed
   120c8:	00011d6d 	.word	0x00011d6d
   120cc:	00011d59 	.word	0x00011d59
   120d0:	00013f81 	.word	0x00013f81
   120d4:	00013fc1 	.word	0x00013fc1
   120d8:	00012691 	.word	0x00012691
   120dc:	00011e61 	.word	0x00011e61

000120e0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   120e0:	b580      	push	{r7, lr}
   120e2:	b084      	sub	sp, #16
   120e4:	af00      	add	r7, sp, #0
   120e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   120e8:	687b      	ldr	r3, [r7, #4]
   120ea:	681b      	ldr	r3, [r3, #0]
   120ec:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   120ee:	68fb      	ldr	r3, [r7, #12]
   120f0:	7b9b      	ldrb	r3, [r3, #14]
   120f2:	b2db      	uxtb	r3, r3
   120f4:	1c1a      	adds	r2, r3, #0
   120f6:	2302      	movs	r3, #2
   120f8:	4013      	ands	r3, r2
   120fa:	d00b      	beq.n	12114 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   120fc:	68fb      	ldr	r3, [r7, #12]
   120fe:	2202      	movs	r2, #2
   12100:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   12102:	68fb      	ldr	r3, [r7, #12]
   12104:	8a1b      	ldrh	r3, [r3, #16]
   12106:	b29b      	uxth	r3, r3
   12108:	1c1a      	adds	r2, r3, #0
   1210a:	2302      	movs	r3, #2
   1210c:	4013      	ands	r3, r2
   1210e:	d011      	beq.n	12134 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   12110:	2341      	movs	r3, #65	; 0x41
   12112:	e010      	b.n	12136 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12114:	68fb      	ldr	r3, [r7, #12]
   12116:	8a1b      	ldrh	r3, [r3, #16]
   12118:	b29b      	uxth	r3, r3
   1211a:	1c1a      	adds	r2, r3, #0
   1211c:	2304      	movs	r3, #4
   1211e:	4013      	ands	r3, r2
   12120:	d008      	beq.n	12134 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	685b      	ldr	r3, [r3, #4]
   12126:	22c0      	movs	r2, #192	; 0xc0
   12128:	0292      	lsls	r2, r2, #10
   1212a:	431a      	orrs	r2, r3
   1212c:	68fb      	ldr	r3, [r7, #12]
   1212e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   12130:	2318      	movs	r3, #24
   12132:	e000      	b.n	12136 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   12134:	2300      	movs	r3, #0
}
   12136:	1c18      	adds	r0, r3, #0
   12138:	46bd      	mov	sp, r7
   1213a:	b004      	add	sp, #16
   1213c:	bd80      	pop	{r7, pc}
   1213e:	46c0      	nop			; (mov r8, r8)

00012140 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   12140:	b580      	push	{r7, lr}
   12142:	b084      	sub	sp, #16
   12144:	af00      	add	r7, sp, #0
   12146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12148:	687b      	ldr	r3, [r7, #4]
   1214a:	681b      	ldr	r3, [r3, #0]
   1214c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1214e:	1c3b      	adds	r3, r7, #0
   12150:	330e      	adds	r3, #14
   12152:	2200      	movs	r2, #0
   12154:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12156:	e00f      	b.n	12178 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   12158:	1c3b      	adds	r3, r7, #0
   1215a:	330e      	adds	r3, #14
   1215c:	1c3a      	adds	r2, r7, #0
   1215e:	320e      	adds	r2, #14
   12160:	8812      	ldrh	r2, [r2, #0]
   12162:	3201      	adds	r2, #1
   12164:	801a      	strh	r2, [r3, #0]
   12166:	687b      	ldr	r3, [r7, #4]
   12168:	891b      	ldrh	r3, [r3, #8]
   1216a:	1c3a      	adds	r2, r7, #0
   1216c:	320e      	adds	r2, #14
   1216e:	8812      	ldrh	r2, [r2, #0]
   12170:	429a      	cmp	r2, r3
   12172:	d301      	bcc.n	12178 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   12174:	2312      	movs	r3, #18
   12176:	e00e      	b.n	12196 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12178:	68bb      	ldr	r3, [r7, #8]
   1217a:	7b9b      	ldrb	r3, [r3, #14]
   1217c:	b2db      	uxtb	r3, r3
   1217e:	1c1a      	adds	r2, r3, #0
   12180:	2301      	movs	r3, #1
   12182:	4013      	ands	r3, r2
   12184:	d106      	bne.n	12194 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   12186:	68bb      	ldr	r3, [r7, #8]
   12188:	7b9b      	ldrb	r3, [r3, #14]
   1218a:	b2db      	uxtb	r3, r3
   1218c:	1c1a      	adds	r2, r3, #0
   1218e:	2302      	movs	r3, #2
   12190:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   12192:	d0e1      	beq.n	12158 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
   12194:	2300      	movs	r3, #0
}
   12196:	1c18      	adds	r0, r3, #0
   12198:	46bd      	mov	sp, r7
   1219a:	b004      	add	sp, #16
   1219c:	bd80      	pop	{r7, pc}
   1219e:	46c0      	nop			; (mov r8, r8)

000121a0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   121a0:	b590      	push	{r4, r7, lr}
   121a2:	b087      	sub	sp, #28
   121a4:	af00      	add	r7, sp, #0
   121a6:	6078      	str	r0, [r7, #4]
   121a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   121aa:	687b      	ldr	r3, [r7, #4]
   121ac:	681b      	ldr	r3, [r3, #0]
   121ae:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   121b0:	1c3b      	adds	r3, r7, #0
   121b2:	3314      	adds	r3, #20
   121b4:	683a      	ldr	r2, [r7, #0]
   121b6:	8852      	ldrh	r2, [r2, #2]
   121b8:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   121ba:	1c3b      	adds	r3, r7, #0
   121bc:	3312      	adds	r3, #18
   121be:	2200      	movs	r2, #0
   121c0:	801a      	strh	r2, [r3, #0]

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
   121c2:	683b      	ldr	r3, [r7, #0]
   121c4:	881b      	ldrh	r3, [r3, #0]
   121c6:	005b      	lsls	r3, r3, #1
   121c8:	b2db      	uxtb	r3, r3
   121ca:	2201      	movs	r2, #1
   121cc:	4313      	orrs	r3, r2
   121ce:	b2db      	uxtb	r3, r3
   121d0:	b2da      	uxtb	r2, r3
   121d2:	68fb      	ldr	r3, [r7, #12]
   121d4:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   121d6:	1c3c      	adds	r4, r7, #0
   121d8:	3417      	adds	r4, #23
   121da:	687b      	ldr	r3, [r7, #4]
   121dc:	1c18      	adds	r0, r3, #0
   121de:	4b40      	ldr	r3, [pc, #256]	; (122e0 <_i2c_master_read_packet+0x140>)
   121e0:	4798      	blx	r3
   121e2:	1c03      	adds	r3, r0, #0
   121e4:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   121e6:	68fb      	ldr	r3, [r7, #12]
   121e8:	685a      	ldr	r2, [r3, #4]
   121ea:	4b3e      	ldr	r3, [pc, #248]	; (122e4 <_i2c_master_read_packet+0x144>)
   121ec:	401a      	ands	r2, r3
   121ee:	68fb      	ldr	r3, [r7, #12]
   121f0:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   121f2:	1c3b      	adds	r3, r7, #0
   121f4:	3317      	adds	r3, #23
   121f6:	781b      	ldrb	r3, [r3, #0]
   121f8:	2b00      	cmp	r3, #0
   121fa:	d107      	bne.n	1220c <_i2c_master_read_packet+0x6c>
		tmp_status = _i2c_master_address_response(module);
   121fc:	1c3c      	adds	r4, r7, #0
   121fe:	3417      	adds	r4, #23
   12200:	687b      	ldr	r3, [r7, #4]
   12202:	1c18      	adds	r0, r3, #0
   12204:	4b38      	ldr	r3, [pc, #224]	; (122e8 <_i2c_master_read_packet+0x148>)
   12206:	4798      	blx	r3
   12208:	1c03      	adds	r3, r0, #0
   1220a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   1220c:	1c3b      	adds	r3, r7, #0
   1220e:	3317      	adds	r3, #23
   12210:	781b      	ldrb	r3, [r3, #0]
   12212:	2b00      	cmp	r3, #0
   12214:	d15c      	bne.n	122d0 <_i2c_master_read_packet+0x130>
		/* Read data buffer. */
		while (tmp_data_length--) {
   12216:	e035      	b.n	12284 <_i2c_master_read_packet+0xe4>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   12218:	68fb      	ldr	r3, [r7, #12]
   1221a:	8a1b      	ldrh	r3, [r3, #16]
   1221c:	b29b      	uxth	r3, r3
   1221e:	1c1a      	adds	r2, r3, #0
   12220:	2320      	movs	r3, #32
   12222:	4013      	ands	r3, r2
   12224:	d101      	bne.n	1222a <_i2c_master_read_packet+0x8a>
				return STATUS_ERR_PACKET_COLLISION;
   12226:	2341      	movs	r3, #65	; 0x41
   12228:	e055      	b.n	122d6 <_i2c_master_read_packet+0x136>
			}

			if (tmp_data_length == 0) {
   1222a:	1c3b      	adds	r3, r7, #0
   1222c:	3314      	adds	r3, #20
   1222e:	881b      	ldrh	r3, [r3, #0]
   12230:	2b00      	cmp	r3, #0
   12232:	d107      	bne.n	12244 <_i2c_master_read_packet+0xa4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12234:	68fb      	ldr	r3, [r7, #12]
   12236:	685b      	ldr	r3, [r3, #4]
   12238:	2280      	movs	r2, #128	; 0x80
   1223a:	02d2      	lsls	r2, r2, #11
   1223c:	431a      	orrs	r2, r3
   1223e:	68fb      	ldr	r3, [r7, #12]
   12240:	605a      	str	r2, [r3, #4]
   12242:	e019      	b.n	12278 <_i2c_master_read_packet+0xd8>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	1c18      	adds	r0, r3, #0
   12248:	4b28      	ldr	r3, [pc, #160]	; (122ec <_i2c_master_read_packet+0x14c>)
   1224a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   1224c:	683b      	ldr	r3, [r7, #0]
   1224e:	685a      	ldr	r2, [r3, #4]
   12250:	1c3b      	adds	r3, r7, #0
   12252:	3312      	adds	r3, #18
   12254:	881b      	ldrh	r3, [r3, #0]
   12256:	1c39      	adds	r1, r7, #0
   12258:	3112      	adds	r1, #18
   1225a:	1c58      	adds	r0, r3, #1
   1225c:	8008      	strh	r0, [r1, #0]
   1225e:	18d3      	adds	r3, r2, r3
   12260:	68fa      	ldr	r2, [r7, #12]
   12262:	7e12      	ldrb	r2, [r2, #24]
   12264:	b2d2      	uxtb	r2, r2
   12266:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   12268:	1c3c      	adds	r4, r7, #0
   1226a:	3417      	adds	r4, #23
   1226c:	687b      	ldr	r3, [r7, #4]
   1226e:	1c18      	adds	r0, r3, #0
   12270:	4b1b      	ldr	r3, [pc, #108]	; (122e0 <_i2c_master_read_packet+0x140>)
   12272:	4798      	blx	r3
   12274:	1c03      	adds	r3, r0, #0
   12276:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   12278:	1c3b      	adds	r3, r7, #0
   1227a:	3317      	adds	r3, #23
   1227c:	781b      	ldrb	r3, [r3, #0]
   1227e:	2b00      	cmp	r3, #0
   12280:	d000      	beq.n	12284 <_i2c_master_read_packet+0xe4>
				break;
   12282:	e008      	b.n	12296 <_i2c_master_read_packet+0xf6>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
   12284:	1c3b      	adds	r3, r7, #0
   12286:	3314      	adds	r3, #20
   12288:	881b      	ldrh	r3, [r3, #0]
   1228a:	1c3a      	adds	r2, r7, #0
   1228c:	3214      	adds	r2, #20
   1228e:	1e59      	subs	r1, r3, #1
   12290:	8011      	strh	r1, [r2, #0]
   12292:	2b00      	cmp	r3, #0
   12294:	d1c0      	bne.n	12218 <_i2c_master_read_packet+0x78>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
   12296:	687b      	ldr	r3, [r7, #4]
   12298:	7a9b      	ldrb	r3, [r3, #10]
   1229a:	2b00      	cmp	r3, #0
   1229c:	d00a      	beq.n	122b4 <_i2c_master_read_packet+0x114>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	1c18      	adds	r0, r3, #0
   122a2:	4b12      	ldr	r3, [pc, #72]	; (122ec <_i2c_master_read_packet+0x14c>)
   122a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   122a6:	68fb      	ldr	r3, [r7, #12]
   122a8:	685b      	ldr	r3, [r3, #4]
   122aa:	22c0      	movs	r2, #192	; 0xc0
   122ac:	0292      	lsls	r2, r2, #10
   122ae:	431a      	orrs	r2, r3
   122b0:	68fb      	ldr	r3, [r7, #12]
   122b2:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   122b4:	687b      	ldr	r3, [r7, #4]
   122b6:	1c18      	adds	r0, r3, #0
   122b8:	4b0c      	ldr	r3, [pc, #48]	; (122ec <_i2c_master_read_packet+0x14c>)
   122ba:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   122bc:	683b      	ldr	r3, [r7, #0]
   122be:	685a      	ldr	r2, [r3, #4]
   122c0:	1c3b      	adds	r3, r7, #0
   122c2:	3312      	adds	r3, #18
   122c4:	881b      	ldrh	r3, [r3, #0]
   122c6:	18d3      	adds	r3, r2, r3
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	7e12      	ldrb	r2, [r2, #24]
   122cc:	b2d2      	uxtb	r2, r2
   122ce:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   122d0:	1c3b      	adds	r3, r7, #0
   122d2:	3317      	adds	r3, #23
   122d4:	781b      	ldrb	r3, [r3, #0]
}
   122d6:	1c18      	adds	r0, r3, #0
   122d8:	46bd      	mov	sp, r7
   122da:	b007      	add	sp, #28
   122dc:	bd90      	pop	{r4, r7, pc}
   122de:	46c0      	nop			; (mov r8, r8)
   122e0:	00012141 	.word	0x00012141
   122e4:	fffbffff 	.word	0xfffbffff
   122e8:	000120e1 	.word	0x000120e1
   122ec:	00011e3d 	.word	0x00011e3d

000122f0 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   122f0:	b580      	push	{r7, lr}
   122f2:	b082      	sub	sp, #8
   122f4:	af00      	add	r7, sp, #0
   122f6:	6078      	str	r0, [r7, #4]
   122f8:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   122fa:	687b      	ldr	r3, [r7, #4]
   122fc:	2201      	movs	r2, #1
   122fe:	729a      	strb	r2, [r3, #10]

	return _i2c_master_read_packet(module, packet);
   12300:	687a      	ldr	r2, [r7, #4]
   12302:	683b      	ldr	r3, [r7, #0]
   12304:	1c10      	adds	r0, r2, #0
   12306:	1c19      	adds	r1, r3, #0
   12308:	4b03      	ldr	r3, [pc, #12]	; (12318 <i2c_master_read_packet_wait+0x28>)
   1230a:	4798      	blx	r3
   1230c:	1c03      	adds	r3, r0, #0
}
   1230e:	1c18      	adds	r0, r3, #0
   12310:	46bd      	mov	sp, r7
   12312:	b002      	add	sp, #8
   12314:	bd80      	pop	{r7, pc}
   12316:	46c0      	nop			; (mov r8, r8)
   12318:	000121a1 	.word	0x000121a1

0001231c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1231c:	b590      	push	{r4, r7, lr}
   1231e:	b087      	sub	sp, #28
   12320:	af00      	add	r7, sp, #0
   12322:	6078      	str	r0, [r7, #4]
   12324:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12326:	687b      	ldr	r3, [r7, #4]
   12328:	681b      	ldr	r3, [r3, #0]
   1232a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   1232c:	1c3b      	adds	r3, r7, #0
   1232e:	3314      	adds	r3, #20
   12330:	683a      	ldr	r2, [r7, #0]
   12332:	8852      	ldrh	r2, [r2, #2]
   12334:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   12336:	687b      	ldr	r3, [r7, #4]
   12338:	1c18      	adds	r0, r3, #0
   1233a:	4b3d      	ldr	r3, [pc, #244]	; (12430 <_i2c_master_write_packet+0x114>)
   1233c:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
   1233e:	683b      	ldr	r3, [r7, #0]
   12340:	881b      	ldrh	r3, [r3, #0]
   12342:	b2db      	uxtb	r3, r3
   12344:	18db      	adds	r3, r3, r3
   12346:	b2da      	uxtb	r2, r3
   12348:	68fb      	ldr	r3, [r7, #12]
   1234a:	751a      	strb	r2, [r3, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1234c:	1c3c      	adds	r4, r7, #0
   1234e:	3417      	adds	r4, #23
   12350:	687b      	ldr	r3, [r7, #4]
   12352:	1c18      	adds	r0, r3, #0
   12354:	4b37      	ldr	r3, [pc, #220]	; (12434 <_i2c_master_write_packet+0x118>)
   12356:	4798      	blx	r3
   12358:	1c03      	adds	r3, r0, #0
   1235a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   1235c:	1c3b      	adds	r3, r7, #0
   1235e:	3317      	adds	r3, #23
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	2b00      	cmp	r3, #0
   12364:	d107      	bne.n	12376 <_i2c_master_write_packet+0x5a>
		tmp_status = _i2c_master_address_response(module);
   12366:	1c3c      	adds	r4, r7, #0
   12368:	3417      	adds	r4, #23
   1236a:	687b      	ldr	r3, [r7, #4]
   1236c:	1c18      	adds	r0, r3, #0
   1236e:	4b32      	ldr	r3, [pc, #200]	; (12438 <_i2c_master_write_packet+0x11c>)
   12370:	4798      	blx	r3
   12372:	1c03      	adds	r3, r0, #0
   12374:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   12376:	1c3b      	adds	r3, r7, #0
   12378:	3317      	adds	r3, #23
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d150      	bne.n	12422 <_i2c_master_write_packet+0x106>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   12380:	1c3b      	adds	r3, r7, #0
   12382:	3312      	adds	r3, #18
   12384:	2200      	movs	r2, #0
   12386:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   12388:	e033      	b.n	123f2 <_i2c_master_write_packet+0xd6>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	8a1b      	ldrh	r3, [r3, #16]
   1238e:	b29b      	uxth	r3, r3
   12390:	1c1a      	adds	r2, r3, #0
   12392:	2320      	movs	r3, #32
   12394:	4013      	ands	r3, r2
   12396:	d101      	bne.n	1239c <_i2c_master_write_packet+0x80>
				return STATUS_ERR_PACKET_COLLISION;
   12398:	2341      	movs	r3, #65	; 0x41
   1239a:	e045      	b.n	12428 <_i2c_master_write_packet+0x10c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   1239c:	687b      	ldr	r3, [r7, #4]
   1239e:	1c18      	adds	r0, r3, #0
   123a0:	4b23      	ldr	r3, [pc, #140]	; (12430 <_i2c_master_write_packet+0x114>)
   123a2:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   123a4:	683b      	ldr	r3, [r7, #0]
   123a6:	685a      	ldr	r2, [r3, #4]
   123a8:	1c3b      	adds	r3, r7, #0
   123aa:	3312      	adds	r3, #18
   123ac:	881b      	ldrh	r3, [r3, #0]
   123ae:	1c39      	adds	r1, r7, #0
   123b0:	3112      	adds	r1, #18
   123b2:	1c58      	adds	r0, r3, #1
   123b4:	8008      	strh	r0, [r1, #0]
   123b6:	18d3      	adds	r3, r2, r3
   123b8:	781a      	ldrb	r2, [r3, #0]
   123ba:	68fb      	ldr	r3, [r7, #12]
   123bc:	761a      	strb	r2, [r3, #24]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   123be:	1c3c      	adds	r4, r7, #0
   123c0:	3417      	adds	r4, #23
   123c2:	687b      	ldr	r3, [r7, #4]
   123c4:	1c18      	adds	r0, r3, #0
   123c6:	4b1b      	ldr	r3, [pc, #108]	; (12434 <_i2c_master_write_packet+0x118>)
   123c8:	4798      	blx	r3
   123ca:	1c03      	adds	r3, r0, #0
   123cc:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   123ce:	1c3b      	adds	r3, r7, #0
   123d0:	3317      	adds	r3, #23
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	2b00      	cmp	r3, #0
   123d6:	d000      	beq.n	123da <_i2c_master_write_packet+0xbe>
				break;
   123d8:	e014      	b.n	12404 <_i2c_master_write_packet+0xe8>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   123da:	68fb      	ldr	r3, [r7, #12]
   123dc:	8a1b      	ldrh	r3, [r3, #16]
   123de:	b29b      	uxth	r3, r3
   123e0:	1c1a      	adds	r2, r3, #0
   123e2:	2304      	movs	r3, #4
   123e4:	4013      	ands	r3, r2
   123e6:	d004      	beq.n	123f2 <_i2c_master_write_packet+0xd6>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   123e8:	1c3b      	adds	r3, r7, #0
   123ea:	3317      	adds	r3, #23
   123ec:	221e      	movs	r2, #30
   123ee:	701a      	strb	r2, [r3, #0]
				break;
   123f0:	e008      	b.n	12404 <_i2c_master_write_packet+0xe8>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
   123f2:	1c3b      	adds	r3, r7, #0
   123f4:	3314      	adds	r3, #20
   123f6:	881b      	ldrh	r3, [r3, #0]
   123f8:	1c3a      	adds	r2, r7, #0
   123fa:	3214      	adds	r2, #20
   123fc:	1e59      	subs	r1, r3, #1
   123fe:	8011      	strh	r1, [r2, #0]
   12400:	2b00      	cmp	r3, #0
   12402:	d1c2      	bne.n	1238a <_i2c_master_write_packet+0x6e>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
   12404:	687b      	ldr	r3, [r7, #4]
   12406:	7a9b      	ldrb	r3, [r3, #10]
   12408:	2b00      	cmp	r3, #0
   1240a:	d00a      	beq.n	12422 <_i2c_master_write_packet+0x106>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   1240c:	687b      	ldr	r3, [r7, #4]
   1240e:	1c18      	adds	r0, r3, #0
   12410:	4b07      	ldr	r3, [pc, #28]	; (12430 <_i2c_master_write_packet+0x114>)
   12412:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12414:	68fb      	ldr	r3, [r7, #12]
   12416:	685b      	ldr	r3, [r3, #4]
   12418:	22c0      	movs	r2, #192	; 0xc0
   1241a:	0292      	lsls	r2, r2, #10
   1241c:	431a      	orrs	r2, r3
   1241e:	68fb      	ldr	r3, [r7, #12]
   12420:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   12422:	1c3b      	adds	r3, r7, #0
   12424:	3317      	adds	r3, #23
   12426:	781b      	ldrb	r3, [r3, #0]
}
   12428:	1c18      	adds	r0, r3, #0
   1242a:	46bd      	mov	sp, r7
   1242c:	b007      	add	sp, #28
   1242e:	bd90      	pop	{r4, r7, pc}
   12430:	00011e3d 	.word	0x00011e3d
   12434:	00012141 	.word	0x00012141
   12438:	000120e1 	.word	0x000120e1

0001243c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1243c:	b580      	push	{r7, lr}
   1243e:	b082      	sub	sp, #8
   12440:	af00      	add	r7, sp, #0
   12442:	6078      	str	r0, [r7, #4]
   12444:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
   12446:	687b      	ldr	r3, [r7, #4]
   12448:	2201      	movs	r2, #1
   1244a:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
   1244c:	687a      	ldr	r2, [r7, #4]
   1244e:	683b      	ldr	r3, [r7, #0]
   12450:	1c10      	adds	r0, r2, #0
   12452:	1c19      	adds	r1, r3, #0
   12454:	4b03      	ldr	r3, [pc, #12]	; (12464 <i2c_master_write_packet_wait+0x28>)
   12456:	4798      	blx	r3
   12458:	1c03      	adds	r3, r0, #0
}
   1245a:	1c18      	adds	r0, r3, #0
   1245c:	46bd      	mov	sp, r7
   1245e:	b002      	add	sp, #8
   12460:	bd80      	pop	{r7, pc}
   12462:	46c0      	nop			; (mov r8, r8)
   12464:	0001231d 	.word	0x0001231d

00012468 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12468:	b580      	push	{r7, lr}
   1246a:	b082      	sub	sp, #8
   1246c:	af00      	add	r7, sp, #0
   1246e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12470:	687b      	ldr	r3, [r7, #4]
   12472:	2200      	movs	r2, #0
   12474:	701a      	strb	r2, [r3, #0]
}
   12476:	46bd      	mov	sp, r7
   12478:	b002      	add	sp, #8
   1247a:	bd80      	pop	{r7, pc}

0001247c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1247c:	b580      	push	{r7, lr}
   1247e:	b086      	sub	sp, #24
   12480:	af00      	add	r7, sp, #0
   12482:	60f8      	str	r0, [r7, #12]
   12484:	60b9      	str	r1, [r7, #8]
   12486:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   12488:	1c3b      	adds	r3, r7, #0
   1248a:	3316      	adds	r3, #22
   1248c:	2200      	movs	r2, #0
   1248e:	801a      	strh	r2, [r3, #0]

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
   12490:	68bb      	ldr	r3, [r7, #8]
   12492:	085a      	lsrs	r2, r3, #1
   12494:	68fb      	ldr	r3, [r7, #12]
   12496:	429a      	cmp	r2, r3
   12498:	d201      	bcs.n	1249e <_sercom_get_sync_baud_val+0x22>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1249a:	2340      	movs	r3, #64	; 0x40
   1249c:	e018      	b.n	124d0 <_sercom_get_sync_baud_val+0x54>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
   1249e:	68fb      	ldr	r3, [r7, #12]
   124a0:	005a      	lsls	r2, r3, #1
   124a2:	4b0d      	ldr	r3, [pc, #52]	; (124d8 <_sercom_get_sync_baud_val+0x5c>)
   124a4:	68b8      	ldr	r0, [r7, #8]
   124a6:	1c11      	adds	r1, r2, #0
   124a8:	4798      	blx	r3
   124aa:	1c03      	adds	r3, r0, #0
   124ac:	b29a      	uxth	r2, r3
   124ae:	1c3b      	adds	r3, r7, #0
   124b0:	3316      	adds	r3, #22
   124b2:	3a01      	subs	r2, #1
   124b4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   124b6:	1c3b      	adds	r3, r7, #0
   124b8:	3316      	adds	r3, #22
   124ba:	881b      	ldrh	r3, [r3, #0]
   124bc:	2bff      	cmp	r3, #255	; 0xff
   124be:	d901      	bls.n	124c4 <_sercom_get_sync_baud_val+0x48>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   124c0:	2340      	movs	r3, #64	; 0x40
   124c2:	e005      	b.n	124d0 <_sercom_get_sync_baud_val+0x54>
	} else {
		*baudvalue = baud_calculated;
   124c4:	687b      	ldr	r3, [r7, #4]
   124c6:	1c3a      	adds	r2, r7, #0
   124c8:	3216      	adds	r2, #22
   124ca:	8812      	ldrh	r2, [r2, #0]
   124cc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   124ce:	2300      	movs	r3, #0
	}
}
   124d0:	1c18      	adds	r0, r3, #0
   124d2:	46bd      	mov	sp, r7
   124d4:	b006      	add	sp, #24
   124d6:	bd80      	pop	{r7, pc}
   124d8:	00015719 	.word	0x00015719
   124dc:	00000000 	.word	0x00000000

000124e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   124e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   124e2:	b09d      	sub	sp, #116	; 0x74
   124e4:	af00      	add	r7, sp, #0
   124e6:	64f8      	str	r0, [r7, #76]	; 0x4c
   124e8:	64b9      	str	r1, [r7, #72]	; 0x48
   124ea:	647a      	str	r2, [r7, #68]	; 0x44
   124ec:	1c3a      	adds	r2, r7, #0
   124ee:	3243      	adds	r2, #67	; 0x43
   124f0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   124f2:	2300      	movs	r3, #0
   124f4:	2400      	movs	r4, #0
   124f6:	65bb      	str	r3, [r7, #88]	; 0x58
   124f8:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
   124fa:	2300      	movs	r3, #0
   124fc:	2400      	movs	r4, #0
   124fe:	653b      	str	r3, [r7, #80]	; 0x50
   12500:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
   12502:	2300      	movs	r3, #0
   12504:	2400      	movs	r4, #0
   12506:	66bb      	str	r3, [r7, #104]	; 0x68
   12508:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
   1250a:	1c3b      	adds	r3, r7, #0
   1250c:	3388      	adds	r3, #136	; 0x88
   1250e:	781a      	ldrb	r2, [r3, #0]
   12510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12512:	435a      	muls	r2, r3
   12514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12516:	429a      	cmp	r2, r3
   12518:	d301      	bcc.n	1251e <_sercom_get_async_baud_val+0x3e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1251a:	2340      	movs	r3, #64	; 0x40
   1251c:	e0a6      	b.n	1266c <_sercom_get_async_baud_val+0x18c>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1251e:	1c3b      	adds	r3, r7, #0
   12520:	3343      	adds	r3, #67	; 0x43
   12522:	781b      	ldrb	r3, [r3, #0]
   12524:	2b00      	cmp	r3, #0
   12526:	d13c      	bne.n	125a2 <_sercom_get_async_baud_val+0xc2>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
   12528:	1c3b      	adds	r3, r7, #0
   1252a:	3388      	adds	r3, #136	; 0x88
   1252c:	781b      	ldrb	r3, [r3, #0]
   1252e:	b2db      	uxtb	r3, r3
   12530:	63bb      	str	r3, [r7, #56]	; 0x38
   12532:	2300      	movs	r3, #0
   12534:	63fb      	str	r3, [r7, #60]	; 0x3c
   12536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12538:	633b      	str	r3, [r7, #48]	; 0x30
   1253a:	2300      	movs	r3, #0
   1253c:	637b      	str	r3, [r7, #52]	; 0x34
   1253e:	4c50      	ldr	r4, [pc, #320]	; (12680 <_sercom_get_async_baud_val+0x1a0>)
   12540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12548:	47a0      	blx	r4
   1254a:	1c03      	adds	r3, r0, #0
   1254c:	1c0c      	adds	r4, r1, #0
   1254e:	001a      	movs	r2, r3
   12550:	62fa      	str	r2, [r7, #44]	; 0x2c
   12552:	2300      	movs	r3, #0
   12554:	62bb      	str	r3, [r7, #40]	; 0x28
   12556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12558:	623b      	str	r3, [r7, #32]
   1255a:	2300      	movs	r3, #0
   1255c:	627b      	str	r3, [r7, #36]	; 0x24
   1255e:	4c49      	ldr	r4, [pc, #292]	; (12684 <_sercom_get_async_baud_val+0x1a4>)
   12560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12564:	6a3a      	ldr	r2, [r7, #32]
   12566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12568:	47a0      	blx	r4
   1256a:	1c03      	adds	r3, r0, #0
   1256c:	1c0c      	adds	r4, r1, #0
   1256e:	65bb      	str	r3, [r7, #88]	; 0x58
   12570:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
   12572:	4a42      	ldr	r2, [pc, #264]	; (1267c <_sercom_get_async_baud_val+0x19c>)
   12574:	4940      	ldr	r1, [pc, #256]	; (12678 <_sercom_get_async_baud_val+0x198>)
   12576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12578:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1257a:	1c0d      	adds	r5, r1, #0
   1257c:	1c16      	adds	r6, r2, #0
   1257e:	1aed      	subs	r5, r5, r3
   12580:	41a6      	sbcs	r6, r4
   12582:	1c2b      	adds	r3, r5, #0
   12584:	1c34      	adds	r4, r6, #0
   12586:	653b      	str	r3, [r7, #80]	; 0x50
   12588:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
   1258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1258c:	0c1b      	lsrs	r3, r3, #16
   1258e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   12590:	0416      	lsls	r6, r2, #16
   12592:	431e      	orrs	r6, r3
   12594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12596:	041d      	lsls	r5, r3, #16
   12598:	0033      	movs	r3, r6
   1259a:	66bb      	str	r3, [r7, #104]	; 0x68
   1259c:	2300      	movs	r3, #0
   1259e:	66fb      	str	r3, [r7, #108]	; 0x6c
   125a0:	e05e      	b.n	12660 <_sercom_get_async_baud_val+0x180>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   125a2:	1c3b      	adds	r3, r7, #0
   125a4:	3343      	adds	r3, #67	; 0x43
   125a6:	781b      	ldrb	r3, [r3, #0]
   125a8:	2b01      	cmp	r3, #1
   125aa:	d159      	bne.n	12660 <_sercom_get_async_baud_val+0x180>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   125ac:	1c3b      	adds	r3, r7, #0
   125ae:	3367      	adds	r3, #103	; 0x67
   125b0:	2200      	movs	r2, #0
   125b2:	701a      	strb	r2, [r3, #0]
   125b4:	e03e      	b.n	12634 <_sercom_get_async_baud_val+0x154>
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
   125b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   125b8:	61bb      	str	r3, [r7, #24]
   125ba:	2300      	movs	r3, #0
   125bc:	61fb      	str	r3, [r7, #28]
   125be:	69be      	ldr	r6, [r7, #24]
   125c0:	0f73      	lsrs	r3, r6, #29
   125c2:	69fa      	ldr	r2, [r7, #28]
   125c4:	00d2      	lsls	r2, r2, #3
   125c6:	617a      	str	r2, [r7, #20]
   125c8:	697d      	ldr	r5, [r7, #20]
   125ca:	431d      	orrs	r5, r3
   125cc:	617d      	str	r5, [r7, #20]
   125ce:	69be      	ldr	r6, [r7, #24]
   125d0:	00f6      	lsls	r6, r6, #3
   125d2:	613e      	str	r6, [r7, #16]
   125d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   125d6:	60bb      	str	r3, [r7, #8]
   125d8:	2300      	movs	r3, #0
   125da:	60fb      	str	r3, [r7, #12]
   125dc:	1c3b      	adds	r3, r7, #0
   125de:	3388      	adds	r3, #136	; 0x88
   125e0:	781b      	ldrb	r3, [r3, #0]
   125e2:	b2db      	uxtb	r3, r3
   125e4:	603b      	str	r3, [r7, #0]
   125e6:	2300      	movs	r3, #0
   125e8:	607b      	str	r3, [r7, #4]
   125ea:	4c25      	ldr	r4, [pc, #148]	; (12680 <_sercom_get_async_baud_val+0x1a0>)
   125ec:	68b8      	ldr	r0, [r7, #8]
   125ee:	68f9      	ldr	r1, [r7, #12]
   125f0:	683a      	ldr	r2, [r7, #0]
   125f2:	687b      	ldr	r3, [r7, #4]
   125f4:	47a0      	blx	r4
   125f6:	1c03      	adds	r3, r0, #0
   125f8:	1c0c      	adds	r4, r1, #0
   125fa:	4d22      	ldr	r5, [pc, #136]	; (12684 <_sercom_get_async_baud_val+0x1a4>)
   125fc:	6938      	ldr	r0, [r7, #16]
   125fe:	6979      	ldr	r1, [r7, #20]
   12600:	1c1a      	adds	r2, r3, #0
   12602:	1c23      	adds	r3, r4, #0
   12604:	47a8      	blx	r5
   12606:	1c03      	adds	r3, r0, #0
   12608:	1c0c      	adds	r4, r1, #0
   1260a:	1c1a      	adds	r2, r3, #0
   1260c:	1c3b      	adds	r3, r7, #0
   1260e:	3367      	adds	r3, #103	; 0x67
   12610:	781b      	ldrb	r3, [r3, #0]
   12612:	1ad3      	subs	r3, r2, r3
   12614:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
   12616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   12618:	08db      	lsrs	r3, r3, #3
   1261a:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
   1261c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1261e:	4b1a      	ldr	r3, [pc, #104]	; (12688 <_sercom_get_async_baud_val+0x1a8>)
   12620:	429a      	cmp	r2, r3
   12622:	d800      	bhi.n	12626 <_sercom_get_async_baud_val+0x146>
				break;
   12624:	e00b      	b.n	1263e <_sercom_get_async_baud_val+0x15e>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
   12626:	1c3b      	adds	r3, r7, #0
   12628:	3367      	adds	r3, #103	; 0x67
   1262a:	781a      	ldrb	r2, [r3, #0]
   1262c:	1c3b      	adds	r3, r7, #0
   1262e:	3367      	adds	r3, #103	; 0x67
   12630:	3201      	adds	r2, #1
   12632:	701a      	strb	r2, [r3, #0]
   12634:	1c3b      	adds	r3, r7, #0
   12636:	3367      	adds	r3, #103	; 0x67
   12638:	781b      	ldrb	r3, [r3, #0]
   1263a:	2b07      	cmp	r3, #7
   1263c:	d9bb      	bls.n	125b6 <_sercom_get_async_baud_val+0xd6>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
   1263e:	1c3b      	adds	r3, r7, #0
   12640:	3367      	adds	r3, #103	; 0x67
   12642:	781b      	ldrb	r3, [r3, #0]
   12644:	2b08      	cmp	r3, #8
   12646:	d101      	bne.n	1264c <_sercom_get_async_baud_val+0x16c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12648:	2340      	movs	r3, #64	; 0x40
   1264a:	e00f      	b.n	1266c <_sercom_get_async_baud_val+0x18c>
		}
		baud_calculated = baud_int | (baud_fp << 13);
   1264c:	1c3b      	adds	r3, r7, #0
   1264e:	3367      	adds	r3, #103	; 0x67
   12650:	781b      	ldrb	r3, [r3, #0]
   12652:	035b      	lsls	r3, r3, #13
   12654:	1c1a      	adds	r2, r3, #0
   12656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   12658:	4313      	orrs	r3, r2
   1265a:	66bb      	str	r3, [r7, #104]	; 0x68
   1265c:	2300      	movs	r3, #0
   1265e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
   12660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12662:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   12664:	b29a      	uxth	r2, r3
   12666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12668:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1266a:	2300      	movs	r3, #0
}
   1266c:	1c18      	adds	r0, r3, #0
   1266e:	46bd      	mov	sp, r7
   12670:	b01d      	add	sp, #116	; 0x74
   12672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12674:	46c0      	nop			; (mov r8, r8)
   12676:	46c0      	nop			; (mov r8, r8)
   12678:	00000000 	.word	0x00000000
   1267c:	00000001 	.word	0x00000001
   12680:	00015935 	.word	0x00015935
   12684:	000158f5 	.word	0x000158f5
   12688:	00001fff 	.word	0x00001fff
   1268c:	46c0      	nop			; (mov r8, r8)
   1268e:	46c0      	nop			; (mov r8, r8)

00012690 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   12690:	b580      	push	{r7, lr}
   12692:	b084      	sub	sp, #16
   12694:	af00      	add	r7, sp, #0
   12696:	1c0a      	adds	r2, r1, #0
   12698:	1dfb      	adds	r3, r7, #7
   1269a:	1c01      	adds	r1, r0, #0
   1269c:	7019      	strb	r1, [r3, #0]
   1269e:	1dbb      	adds	r3, r7, #6
   126a0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
   126a2:	4b1a      	ldr	r3, [pc, #104]	; (1270c <sercom_set_gclk_generator+0x7c>)
   126a4:	781b      	ldrb	r3, [r3, #0]
   126a6:	2201      	movs	r2, #1
   126a8:	4053      	eors	r3, r2
   126aa:	b2db      	uxtb	r3, r3
   126ac:	2b00      	cmp	r3, #0
   126ae:	d103      	bne.n	126b8 <sercom_set_gclk_generator+0x28>
   126b0:	1dbb      	adds	r3, r7, #6
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	2b00      	cmp	r3, #0
   126b6:	d01b      	beq.n	126f0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   126b8:	1c3b      	adds	r3, r7, #0
   126ba:	330c      	adds	r3, #12
   126bc:	1c18      	adds	r0, r3, #0
   126be:	4b14      	ldr	r3, [pc, #80]	; (12710 <sercom_set_gclk_generator+0x80>)
   126c0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   126c2:	1c3b      	adds	r3, r7, #0
   126c4:	330c      	adds	r3, #12
   126c6:	1dfa      	adds	r2, r7, #7
   126c8:	7812      	ldrb	r2, [r2, #0]
   126ca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   126cc:	1c3b      	adds	r3, r7, #0
   126ce:	330c      	adds	r3, #12
   126d0:	200c      	movs	r0, #12
   126d2:	1c19      	adds	r1, r3, #0
   126d4:	4b0f      	ldr	r3, [pc, #60]	; (12714 <sercom_set_gclk_generator+0x84>)
   126d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   126d8:	200c      	movs	r0, #12
   126da:	4b0f      	ldr	r3, [pc, #60]	; (12718 <sercom_set_gclk_generator+0x88>)
   126dc:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
   126de:	4b0b      	ldr	r3, [pc, #44]	; (1270c <sercom_set_gclk_generator+0x7c>)
   126e0:	1dfa      	adds	r2, r7, #7
   126e2:	7812      	ldrb	r2, [r2, #0]
   126e4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   126e6:	4b09      	ldr	r3, [pc, #36]	; (1270c <sercom_set_gclk_generator+0x7c>)
   126e8:	2201      	movs	r2, #1
   126ea:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   126ec:	2300      	movs	r3, #0
   126ee:	e008      	b.n	12702 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   126f0:	4b06      	ldr	r3, [pc, #24]	; (1270c <sercom_set_gclk_generator+0x7c>)
   126f2:	785b      	ldrb	r3, [r3, #1]
   126f4:	1dfa      	adds	r2, r7, #7
   126f6:	7812      	ldrb	r2, [r2, #0]
   126f8:	429a      	cmp	r2, r3
   126fa:	d101      	bne.n	12700 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
   126fc:	2300      	movs	r3, #0
   126fe:	e000      	b.n	12702 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
   12700:	231d      	movs	r3, #29
}
   12702:	1c18      	adds	r0, r3, #0
   12704:	46bd      	mov	sp, r7
   12706:	b004      	add	sp, #16
   12708:	bd80      	pop	{r7, pc}
   1270a:	46c0      	nop			; (mov r8, r8)
   1270c:	20000504 	.word	0x20000504
   12710:	00012469 	.word	0x00012469
   12714:	00013f81 	.word	0x00013f81
   12718:	00013fc1 	.word	0x00013fc1

0001271c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1271c:	b580      	push	{r7, lr}
   1271e:	b082      	sub	sp, #8
   12720:	af00      	add	r7, sp, #0
   12722:	6078      	str	r0, [r7, #4]
   12724:	1c0a      	adds	r2, r1, #0
   12726:	1cfb      	adds	r3, r7, #3
   12728:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1272a:	687b      	ldr	r3, [r7, #4]
   1272c:	4a4d      	ldr	r2, [pc, #308]	; (12864 <_sercom_get_default_pad+0x148>)
   1272e:	4293      	cmp	r3, r2
   12730:	d03f      	beq.n	127b2 <_sercom_get_default_pad+0x96>
   12732:	4a4c      	ldr	r2, [pc, #304]	; (12864 <_sercom_get_default_pad+0x148>)
   12734:	4293      	cmp	r3, r2
   12736:	d806      	bhi.n	12746 <_sercom_get_default_pad+0x2a>
   12738:	4a4b      	ldr	r2, [pc, #300]	; (12868 <_sercom_get_default_pad+0x14c>)
   1273a:	4293      	cmp	r3, r2
   1273c:	d00f      	beq.n	1275e <_sercom_get_default_pad+0x42>
   1273e:	4a4b      	ldr	r2, [pc, #300]	; (1286c <_sercom_get_default_pad+0x150>)
   12740:	4293      	cmp	r3, r2
   12742:	d021      	beq.n	12788 <_sercom_get_default_pad+0x6c>
   12744:	e089      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12746:	4a4a      	ldr	r2, [pc, #296]	; (12870 <_sercom_get_default_pad+0x154>)
   12748:	4293      	cmp	r3, r2
   1274a:	d100      	bne.n	1274e <_sercom_get_default_pad+0x32>
   1274c:	e05b      	b.n	12806 <_sercom_get_default_pad+0xea>
   1274e:	4a49      	ldr	r2, [pc, #292]	; (12874 <_sercom_get_default_pad+0x158>)
   12750:	4293      	cmp	r3, r2
   12752:	d100      	bne.n	12756 <_sercom_get_default_pad+0x3a>
   12754:	e06c      	b.n	12830 <_sercom_get_default_pad+0x114>
   12756:	4a48      	ldr	r2, [pc, #288]	; (12878 <_sercom_get_default_pad+0x15c>)
   12758:	4293      	cmp	r3, r2
   1275a:	d03f      	beq.n	127dc <_sercom_get_default_pad+0xc0>
   1275c:	e07d      	b.n	1285a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1275e:	1cfb      	adds	r3, r7, #3
   12760:	781b      	ldrb	r3, [r3, #0]
   12762:	2b01      	cmp	r3, #1
   12764:	d00a      	beq.n	1277c <_sercom_get_default_pad+0x60>
   12766:	dc02      	bgt.n	1276e <_sercom_get_default_pad+0x52>
   12768:	2b00      	cmp	r3, #0
   1276a:	d005      	beq.n	12778 <_sercom_get_default_pad+0x5c>
   1276c:	e075      	b.n	1285a <_sercom_get_default_pad+0x13e>
   1276e:	2b02      	cmp	r3, #2
   12770:	d006      	beq.n	12780 <_sercom_get_default_pad+0x64>
   12772:	2b03      	cmp	r3, #3
   12774:	d006      	beq.n	12784 <_sercom_get_default_pad+0x68>
   12776:	e070      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12778:	4b40      	ldr	r3, [pc, #256]	; (1287c <_sercom_get_default_pad+0x160>)
   1277a:	e06f      	b.n	1285c <_sercom_get_default_pad+0x140>
   1277c:	4b40      	ldr	r3, [pc, #256]	; (12880 <_sercom_get_default_pad+0x164>)
   1277e:	e06d      	b.n	1285c <_sercom_get_default_pad+0x140>
   12780:	4b40      	ldr	r3, [pc, #256]	; (12884 <_sercom_get_default_pad+0x168>)
   12782:	e06b      	b.n	1285c <_sercom_get_default_pad+0x140>
   12784:	4b40      	ldr	r3, [pc, #256]	; (12888 <_sercom_get_default_pad+0x16c>)
   12786:	e069      	b.n	1285c <_sercom_get_default_pad+0x140>
   12788:	1cfb      	adds	r3, r7, #3
   1278a:	781b      	ldrb	r3, [r3, #0]
   1278c:	2b01      	cmp	r3, #1
   1278e:	d00a      	beq.n	127a6 <_sercom_get_default_pad+0x8a>
   12790:	dc02      	bgt.n	12798 <_sercom_get_default_pad+0x7c>
   12792:	2b00      	cmp	r3, #0
   12794:	d005      	beq.n	127a2 <_sercom_get_default_pad+0x86>
   12796:	e060      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12798:	2b02      	cmp	r3, #2
   1279a:	d006      	beq.n	127aa <_sercom_get_default_pad+0x8e>
   1279c:	2b03      	cmp	r3, #3
   1279e:	d006      	beq.n	127ae <_sercom_get_default_pad+0x92>
   127a0:	e05b      	b.n	1285a <_sercom_get_default_pad+0x13e>
   127a2:	2303      	movs	r3, #3
   127a4:	e05a      	b.n	1285c <_sercom_get_default_pad+0x140>
   127a6:	4b39      	ldr	r3, [pc, #228]	; (1288c <_sercom_get_default_pad+0x170>)
   127a8:	e058      	b.n	1285c <_sercom_get_default_pad+0x140>
   127aa:	4b39      	ldr	r3, [pc, #228]	; (12890 <_sercom_get_default_pad+0x174>)
   127ac:	e056      	b.n	1285c <_sercom_get_default_pad+0x140>
   127ae:	4b39      	ldr	r3, [pc, #228]	; (12894 <_sercom_get_default_pad+0x178>)
   127b0:	e054      	b.n	1285c <_sercom_get_default_pad+0x140>
   127b2:	1cfb      	adds	r3, r7, #3
   127b4:	781b      	ldrb	r3, [r3, #0]
   127b6:	2b01      	cmp	r3, #1
   127b8:	d00a      	beq.n	127d0 <_sercom_get_default_pad+0xb4>
   127ba:	dc02      	bgt.n	127c2 <_sercom_get_default_pad+0xa6>
   127bc:	2b00      	cmp	r3, #0
   127be:	d005      	beq.n	127cc <_sercom_get_default_pad+0xb0>
   127c0:	e04b      	b.n	1285a <_sercom_get_default_pad+0x13e>
   127c2:	2b02      	cmp	r3, #2
   127c4:	d006      	beq.n	127d4 <_sercom_get_default_pad+0xb8>
   127c6:	2b03      	cmp	r3, #3
   127c8:	d006      	beq.n	127d8 <_sercom_get_default_pad+0xbc>
   127ca:	e046      	b.n	1285a <_sercom_get_default_pad+0x13e>
   127cc:	4b32      	ldr	r3, [pc, #200]	; (12898 <_sercom_get_default_pad+0x17c>)
   127ce:	e045      	b.n	1285c <_sercom_get_default_pad+0x140>
   127d0:	4b32      	ldr	r3, [pc, #200]	; (1289c <_sercom_get_default_pad+0x180>)
   127d2:	e043      	b.n	1285c <_sercom_get_default_pad+0x140>
   127d4:	4b32      	ldr	r3, [pc, #200]	; (128a0 <_sercom_get_default_pad+0x184>)
   127d6:	e041      	b.n	1285c <_sercom_get_default_pad+0x140>
   127d8:	4b32      	ldr	r3, [pc, #200]	; (128a4 <_sercom_get_default_pad+0x188>)
   127da:	e03f      	b.n	1285c <_sercom_get_default_pad+0x140>
   127dc:	1cfb      	adds	r3, r7, #3
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2b01      	cmp	r3, #1
   127e2:	d00a      	beq.n	127fa <_sercom_get_default_pad+0xde>
   127e4:	dc02      	bgt.n	127ec <_sercom_get_default_pad+0xd0>
   127e6:	2b00      	cmp	r3, #0
   127e8:	d005      	beq.n	127f6 <_sercom_get_default_pad+0xda>
   127ea:	e036      	b.n	1285a <_sercom_get_default_pad+0x13e>
   127ec:	2b02      	cmp	r3, #2
   127ee:	d006      	beq.n	127fe <_sercom_get_default_pad+0xe2>
   127f0:	2b03      	cmp	r3, #3
   127f2:	d006      	beq.n	12802 <_sercom_get_default_pad+0xe6>
   127f4:	e031      	b.n	1285a <_sercom_get_default_pad+0x13e>
   127f6:	4b2c      	ldr	r3, [pc, #176]	; (128a8 <_sercom_get_default_pad+0x18c>)
   127f8:	e030      	b.n	1285c <_sercom_get_default_pad+0x140>
   127fa:	4b2c      	ldr	r3, [pc, #176]	; (128ac <_sercom_get_default_pad+0x190>)
   127fc:	e02e      	b.n	1285c <_sercom_get_default_pad+0x140>
   127fe:	4b2c      	ldr	r3, [pc, #176]	; (128b0 <_sercom_get_default_pad+0x194>)
   12800:	e02c      	b.n	1285c <_sercom_get_default_pad+0x140>
   12802:	4b2c      	ldr	r3, [pc, #176]	; (128b4 <_sercom_get_default_pad+0x198>)
   12804:	e02a      	b.n	1285c <_sercom_get_default_pad+0x140>
   12806:	1cfb      	adds	r3, r7, #3
   12808:	781b      	ldrb	r3, [r3, #0]
   1280a:	2b01      	cmp	r3, #1
   1280c:	d00a      	beq.n	12824 <_sercom_get_default_pad+0x108>
   1280e:	dc02      	bgt.n	12816 <_sercom_get_default_pad+0xfa>
   12810:	2b00      	cmp	r3, #0
   12812:	d005      	beq.n	12820 <_sercom_get_default_pad+0x104>
   12814:	e021      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12816:	2b02      	cmp	r3, #2
   12818:	d006      	beq.n	12828 <_sercom_get_default_pad+0x10c>
   1281a:	2b03      	cmp	r3, #3
   1281c:	d006      	beq.n	1282c <_sercom_get_default_pad+0x110>
   1281e:	e01c      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12820:	4b25      	ldr	r3, [pc, #148]	; (128b8 <_sercom_get_default_pad+0x19c>)
   12822:	e01b      	b.n	1285c <_sercom_get_default_pad+0x140>
   12824:	4b25      	ldr	r3, [pc, #148]	; (128bc <_sercom_get_default_pad+0x1a0>)
   12826:	e019      	b.n	1285c <_sercom_get_default_pad+0x140>
   12828:	4b25      	ldr	r3, [pc, #148]	; (128c0 <_sercom_get_default_pad+0x1a4>)
   1282a:	e017      	b.n	1285c <_sercom_get_default_pad+0x140>
   1282c:	4b25      	ldr	r3, [pc, #148]	; (128c4 <_sercom_get_default_pad+0x1a8>)
   1282e:	e015      	b.n	1285c <_sercom_get_default_pad+0x140>
   12830:	1cfb      	adds	r3, r7, #3
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	2b01      	cmp	r3, #1
   12836:	d00a      	beq.n	1284e <_sercom_get_default_pad+0x132>
   12838:	dc02      	bgt.n	12840 <_sercom_get_default_pad+0x124>
   1283a:	2b00      	cmp	r3, #0
   1283c:	d005      	beq.n	1284a <_sercom_get_default_pad+0x12e>
   1283e:	e00c      	b.n	1285a <_sercom_get_default_pad+0x13e>
   12840:	2b02      	cmp	r3, #2
   12842:	d006      	beq.n	12852 <_sercom_get_default_pad+0x136>
   12844:	2b03      	cmp	r3, #3
   12846:	d006      	beq.n	12856 <_sercom_get_default_pad+0x13a>
   12848:	e007      	b.n	1285a <_sercom_get_default_pad+0x13e>
   1284a:	4b1f      	ldr	r3, [pc, #124]	; (128c8 <_sercom_get_default_pad+0x1ac>)
   1284c:	e006      	b.n	1285c <_sercom_get_default_pad+0x140>
   1284e:	4b1f      	ldr	r3, [pc, #124]	; (128cc <_sercom_get_default_pad+0x1b0>)
   12850:	e004      	b.n	1285c <_sercom_get_default_pad+0x140>
   12852:	4b1f      	ldr	r3, [pc, #124]	; (128d0 <_sercom_get_default_pad+0x1b4>)
   12854:	e002      	b.n	1285c <_sercom_get_default_pad+0x140>
   12856:	4b1f      	ldr	r3, [pc, #124]	; (128d4 <_sercom_get_default_pad+0x1b8>)
   12858:	e000      	b.n	1285c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1285a:	2300      	movs	r3, #0
}
   1285c:	1c18      	adds	r0, r3, #0
   1285e:	46bd      	mov	sp, r7
   12860:	b002      	add	sp, #8
   12862:	bd80      	pop	{r7, pc}
   12864:	42001000 	.word	0x42001000
   12868:	42000800 	.word	0x42000800
   1286c:	42000c00 	.word	0x42000c00
   12870:	42001800 	.word	0x42001800
   12874:	42001c00 	.word	0x42001c00
   12878:	42001400 	.word	0x42001400
   1287c:	00040003 	.word	0x00040003
   12880:	00050003 	.word	0x00050003
   12884:	00060003 	.word	0x00060003
   12888:	00070003 	.word	0x00070003
   1288c:	00010003 	.word	0x00010003
   12890:	001e0003 	.word	0x001e0003
   12894:	001f0003 	.word	0x001f0003
   12898:	00080003 	.word	0x00080003
   1289c:	00090003 	.word	0x00090003
   128a0:	000a0003 	.word	0x000a0003
   128a4:	000b0003 	.word	0x000b0003
   128a8:	00100003 	.word	0x00100003
   128ac:	00110003 	.word	0x00110003
   128b0:	00120003 	.word	0x00120003
   128b4:	00130003 	.word	0x00130003
   128b8:	000c0003 	.word	0x000c0003
   128bc:	000d0003 	.word	0x000d0003
   128c0:	000e0003 	.word	0x000e0003
   128c4:	000f0003 	.word	0x000f0003
   128c8:	00160003 	.word	0x00160003
   128cc:	00170003 	.word	0x00170003
   128d0:	00180003 	.word	0x00180003
   128d4:	00190003 	.word	0x00190003

000128d8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   128d8:	b580      	push	{r7, lr}
   128da:	b082      	sub	sp, #8
   128dc:	af00      	add	r7, sp, #0
   128de:	1c02      	adds	r2, r0, #0
   128e0:	1dfb      	adds	r3, r7, #7
   128e2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   128e4:	46bd      	mov	sp, r7
   128e6:	b002      	add	sp, #8
   128e8:	bd80      	pop	{r7, pc}
   128ea:	46c0      	nop			; (mov r8, r8)

000128ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   128ec:	b590      	push	{r4, r7, lr}
   128ee:	b08b      	sub	sp, #44	; 0x2c
   128f0:	af00      	add	r7, sp, #0
   128f2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   128f4:	1c3b      	adds	r3, r7, #0
   128f6:	330c      	adds	r3, #12
   128f8:	4a0e      	ldr	r2, [pc, #56]	; (12934 <_sercom_get_sercom_inst_index+0x48>)
   128fa:	ca13      	ldmia	r2!, {r0, r1, r4}
   128fc:	c313      	stmia	r3!, {r0, r1, r4}
   128fe:	ca13      	ldmia	r2!, {r0, r1, r4}
   12900:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12902:	2300      	movs	r3, #0
   12904:	627b      	str	r3, [r7, #36]	; 0x24
   12906:	e00d      	b.n	12924 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   12908:	687a      	ldr	r2, [r7, #4]
   1290a:	1c3b      	adds	r3, r7, #0
   1290c:	330c      	adds	r3, #12
   1290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12910:	0089      	lsls	r1, r1, #2
   12912:	58cb      	ldr	r3, [r1, r3]
   12914:	429a      	cmp	r2, r3
   12916:	d102      	bne.n	1291e <_sercom_get_sercom_inst_index+0x32>
			return i;
   12918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1291a:	b2db      	uxtb	r3, r3
   1291c:	e006      	b.n	1292c <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12920:	3301      	adds	r3, #1
   12922:	627b      	str	r3, [r7, #36]	; 0x24
   12924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12926:	2b05      	cmp	r3, #5
   12928:	d9ee      	bls.n	12908 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1292a:	2300      	movs	r3, #0
}
   1292c:	1c18      	adds	r0, r3, #0
   1292e:	46bd      	mov	sp, r7
   12930:	b00b      	add	sp, #44	; 0x2c
   12932:	bd90      	pop	{r4, r7, pc}
   12934:	00018530 	.word	0x00018530

00012938 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   12938:	b580      	push	{r7, lr}
   1293a:	b084      	sub	sp, #16
   1293c:	af00      	add	r7, sp, #0
   1293e:	1c02      	adds	r2, r0, #0
   12940:	6039      	str	r1, [r7, #0]
   12942:	1dfb      	adds	r3, r7, #7
   12944:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
   12946:	4b13      	ldr	r3, [pc, #76]	; (12994 <_sercom_set_handler+0x5c>)
   12948:	781b      	ldrb	r3, [r3, #0]
   1294a:	2201      	movs	r2, #1
   1294c:	4053      	eors	r3, r2
   1294e:	b2db      	uxtb	r3, r3
   12950:	2b00      	cmp	r3, #0
   12952:	d015      	beq.n	12980 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12954:	2300      	movs	r3, #0
   12956:	60fb      	str	r3, [r7, #12]
   12958:	e00c      	b.n	12974 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1295a:	4b0f      	ldr	r3, [pc, #60]	; (12998 <_sercom_set_handler+0x60>)
   1295c:	68fa      	ldr	r2, [r7, #12]
   1295e:	0092      	lsls	r2, r2, #2
   12960:	490e      	ldr	r1, [pc, #56]	; (1299c <_sercom_set_handler+0x64>)
   12962:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   12964:	4b0e      	ldr	r3, [pc, #56]	; (129a0 <_sercom_set_handler+0x68>)
   12966:	68fa      	ldr	r2, [r7, #12]
   12968:	0092      	lsls	r2, r2, #2
   1296a:	2100      	movs	r1, #0
   1296c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1296e:	68fb      	ldr	r3, [r7, #12]
   12970:	3301      	adds	r3, #1
   12972:	60fb      	str	r3, [r7, #12]
   12974:	68fb      	ldr	r3, [r7, #12]
   12976:	2b05      	cmp	r3, #5
   12978:	d9ef      	bls.n	1295a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   1297a:	4b06      	ldr	r3, [pc, #24]	; (12994 <_sercom_set_handler+0x5c>)
   1297c:	2201      	movs	r2, #1
   1297e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   12980:	1dfb      	adds	r3, r7, #7
   12982:	781a      	ldrb	r2, [r3, #0]
   12984:	4b04      	ldr	r3, [pc, #16]	; (12998 <_sercom_set_handler+0x60>)
   12986:	0092      	lsls	r2, r2, #2
   12988:	6839      	ldr	r1, [r7, #0]
   1298a:	50d1      	str	r1, [r2, r3]
}
   1298c:	46bd      	mov	sp, r7
   1298e:	b004      	add	sp, #16
   12990:	bd80      	pop	{r7, pc}
   12992:	46c0      	nop			; (mov r8, r8)
   12994:	20000508 	.word	0x20000508
   12998:	2000050c 	.word	0x2000050c
   1299c:	000128d9 	.word	0x000128d9
   129a0:	2000398c 	.word	0x2000398c

000129a4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   129a4:	b590      	push	{r4, r7, lr}
   129a6:	b085      	sub	sp, #20
   129a8:	af00      	add	r7, sp, #0
   129aa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   129ac:	1c3a      	adds	r2, r7, #0
   129ae:	3208      	adds	r2, #8
   129b0:	4b0e      	ldr	r3, [pc, #56]	; (129ec <_sercom_get_interrupt_vector+0x48>)
   129b2:	1c11      	adds	r1, r2, #0
   129b4:	1c1a      	adds	r2, r3, #0
   129b6:	2306      	movs	r3, #6
   129b8:	1c08      	adds	r0, r1, #0
   129ba:	1c11      	adds	r1, r2, #0
   129bc:	1c1a      	adds	r2, r3, #0
   129be:	4b0c      	ldr	r3, [pc, #48]	; (129f0 <_sercom_get_interrupt_vector+0x4c>)
   129c0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   129c2:	1c3c      	adds	r4, r7, #0
   129c4:	340f      	adds	r4, #15
   129c6:	687b      	ldr	r3, [r7, #4]
   129c8:	1c18      	adds	r0, r3, #0
   129ca:	4b0a      	ldr	r3, [pc, #40]	; (129f4 <_sercom_get_interrupt_vector+0x50>)
   129cc:	4798      	blx	r3
   129ce:	1c03      	adds	r3, r0, #0
   129d0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   129d2:	1c3b      	adds	r3, r7, #0
   129d4:	330f      	adds	r3, #15
   129d6:	781b      	ldrb	r3, [r3, #0]
   129d8:	1c3a      	adds	r2, r7, #0
   129da:	3208      	adds	r2, #8
   129dc:	5cd3      	ldrb	r3, [r2, r3]
   129de:	b2db      	uxtb	r3, r3
   129e0:	b25b      	sxtb	r3, r3
}
   129e2:	1c18      	adds	r0, r3, #0
   129e4:	46bd      	mov	sp, r7
   129e6:	b005      	add	sp, #20
   129e8:	bd90      	pop	{r4, r7, pc}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	00018548 	.word	0x00018548
   129f0:	00017ddd 	.word	0x00017ddd
   129f4:	000128ed 	.word	0x000128ed

000129f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   129f8:	b580      	push	{r7, lr}
   129fa:	af00      	add	r7, sp, #0
   129fc:	4b02      	ldr	r3, [pc, #8]	; (12a08 <SERCOM0_Handler+0x10>)
   129fe:	681b      	ldr	r3, [r3, #0]
   12a00:	2000      	movs	r0, #0
   12a02:	4798      	blx	r3
   12a04:	46bd      	mov	sp, r7
   12a06:	bd80      	pop	{r7, pc}
   12a08:	2000050c 	.word	0x2000050c

00012a0c <SERCOM1_Handler>:
   12a0c:	b580      	push	{r7, lr}
   12a0e:	af00      	add	r7, sp, #0
   12a10:	4b02      	ldr	r3, [pc, #8]	; (12a1c <SERCOM1_Handler+0x10>)
   12a12:	685b      	ldr	r3, [r3, #4]
   12a14:	2001      	movs	r0, #1
   12a16:	4798      	blx	r3
   12a18:	46bd      	mov	sp, r7
   12a1a:	bd80      	pop	{r7, pc}
   12a1c:	2000050c 	.word	0x2000050c

00012a20 <SERCOM2_Handler>:
   12a20:	b580      	push	{r7, lr}
   12a22:	af00      	add	r7, sp, #0
   12a24:	4b02      	ldr	r3, [pc, #8]	; (12a30 <SERCOM2_Handler+0x10>)
   12a26:	689b      	ldr	r3, [r3, #8]
   12a28:	2002      	movs	r0, #2
   12a2a:	4798      	blx	r3
   12a2c:	46bd      	mov	sp, r7
   12a2e:	bd80      	pop	{r7, pc}
   12a30:	2000050c 	.word	0x2000050c

00012a34 <SERCOM3_Handler>:
   12a34:	b580      	push	{r7, lr}
   12a36:	af00      	add	r7, sp, #0
   12a38:	4b02      	ldr	r3, [pc, #8]	; (12a44 <SERCOM3_Handler+0x10>)
   12a3a:	68db      	ldr	r3, [r3, #12]
   12a3c:	2003      	movs	r0, #3
   12a3e:	4798      	blx	r3
   12a40:	46bd      	mov	sp, r7
   12a42:	bd80      	pop	{r7, pc}
   12a44:	2000050c 	.word	0x2000050c

00012a48 <SERCOM4_Handler>:
   12a48:	b580      	push	{r7, lr}
   12a4a:	af00      	add	r7, sp, #0
   12a4c:	4b02      	ldr	r3, [pc, #8]	; (12a58 <SERCOM4_Handler+0x10>)
   12a4e:	691b      	ldr	r3, [r3, #16]
   12a50:	2004      	movs	r0, #4
   12a52:	4798      	blx	r3
   12a54:	46bd      	mov	sp, r7
   12a56:	bd80      	pop	{r7, pc}
   12a58:	2000050c 	.word	0x2000050c

00012a5c <SERCOM5_Handler>:
   12a5c:	b580      	push	{r7, lr}
   12a5e:	af00      	add	r7, sp, #0
   12a60:	4b02      	ldr	r3, [pc, #8]	; (12a6c <SERCOM5_Handler+0x10>)
   12a62:	695b      	ldr	r3, [r3, #20]
   12a64:	2005      	movs	r0, #5
   12a66:	4798      	blx	r3
   12a68:	46bd      	mov	sp, r7
   12a6a:	bd80      	pop	{r7, pc}
   12a6c:	2000050c 	.word	0x2000050c

00012a70 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12a70:	b580      	push	{r7, lr}
   12a72:	b082      	sub	sp, #8
   12a74:	af00      	add	r7, sp, #0
   12a76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12a78:	687b      	ldr	r3, [r7, #4]
   12a7a:	2280      	movs	r2, #128	; 0x80
   12a7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12a7e:	687b      	ldr	r3, [r7, #4]
   12a80:	2200      	movs	r2, #0
   12a82:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12a84:	687b      	ldr	r3, [r7, #4]
   12a86:	2201      	movs	r2, #1
   12a88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12a8a:	687b      	ldr	r3, [r7, #4]
   12a8c:	2200      	movs	r2, #0
   12a8e:	70da      	strb	r2, [r3, #3]
}
   12a90:	46bd      	mov	sp, r7
   12a92:	b002      	add	sp, #8
   12a94:	bd80      	pop	{r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)

00012a98 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12a98:	b580      	push	{r7, lr}
   12a9a:	b084      	sub	sp, #16
   12a9c:	af00      	add	r7, sp, #0
   12a9e:	1c02      	adds	r2, r0, #0
   12aa0:	1dfb      	adds	r3, r7, #7
   12aa2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12aa4:	1c3b      	adds	r3, r7, #0
   12aa6:	330f      	adds	r3, #15
   12aa8:	1dfa      	adds	r2, r7, #7
   12aaa:	7812      	ldrb	r2, [r2, #0]
   12aac:	09d2      	lsrs	r2, r2, #7
   12aae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12ab0:	1c3b      	adds	r3, r7, #0
   12ab2:	330e      	adds	r3, #14
   12ab4:	1dfa      	adds	r2, r7, #7
   12ab6:	7812      	ldrb	r2, [r2, #0]
   12ab8:	0952      	lsrs	r2, r2, #5
   12aba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12abc:	4b0d      	ldr	r3, [pc, #52]	; (12af4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   12abe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   12ac0:	1c3b      	adds	r3, r7, #0
   12ac2:	330f      	adds	r3, #15
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d10e      	bne.n	12ae8 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   12aca:	1c3b      	adds	r3, r7, #0
   12acc:	330f      	adds	r3, #15
   12ace:	781b      	ldrb	r3, [r3, #0]
   12ad0:	009b      	lsls	r3, r3, #2
   12ad2:	2210      	movs	r2, #16
   12ad4:	19d2      	adds	r2, r2, r7
   12ad6:	18d3      	adds	r3, r2, r3
   12ad8:	3b08      	subs	r3, #8
   12ada:	681a      	ldr	r2, [r3, #0]
   12adc:	1c3b      	adds	r3, r7, #0
   12ade:	330e      	adds	r3, #14
   12ae0:	781b      	ldrb	r3, [r3, #0]
   12ae2:	01db      	lsls	r3, r3, #7
   12ae4:	18d3      	adds	r3, r2, r3
   12ae6:	e000      	b.n	12aea <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   12ae8:	2300      	movs	r3, #0
	}
}
   12aea:	1c18      	adds	r0, r3, #0
   12aec:	46bd      	mov	sp, r7
   12aee:	b004      	add	sp, #16
   12af0:	bd80      	pop	{r7, pc}
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	41004400 	.word	0x41004400

00012af8 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   12af8:	b580      	push	{r7, lr}
   12afa:	b086      	sub	sp, #24
   12afc:	af00      	add	r7, sp, #0
   12afe:	1c02      	adds	r2, r0, #0
   12b00:	1dfb      	adds	r3, r7, #7
   12b02:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12b04:	1dfb      	adds	r3, r7, #7
   12b06:	781b      	ldrb	r3, [r3, #0]
   12b08:	1c18      	adds	r0, r3, #0
   12b0a:	4b19      	ldr	r3, [pc, #100]	; (12b70 <system_pinmux_pin_get_mux_position+0x78>)
   12b0c:	4798      	blx	r3
   12b0e:	1c03      	adds	r3, r0, #0
   12b10:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   12b12:	1dfb      	adds	r3, r7, #7
   12b14:	781a      	ldrb	r2, [r3, #0]
   12b16:	231f      	movs	r3, #31
   12b18:	4013      	ands	r3, r2
   12b1a:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   12b1c:	6979      	ldr	r1, [r7, #20]
   12b1e:	2340      	movs	r3, #64	; 0x40
   12b20:	693a      	ldr	r2, [r7, #16]
   12b22:	188a      	adds	r2, r1, r2
   12b24:	18d3      	adds	r3, r2, r3
   12b26:	781b      	ldrb	r3, [r3, #0]
   12b28:	b2db      	uxtb	r3, r3
   12b2a:	1c1a      	adds	r2, r3, #0
   12b2c:	2301      	movs	r3, #1
   12b2e:	4013      	ands	r3, r2
   12b30:	d101      	bne.n	12b36 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   12b32:	2380      	movs	r3, #128	; 0x80
   12b34:	e017      	b.n	12b66 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   12b36:	693b      	ldr	r3, [r7, #16]
   12b38:	085a      	lsrs	r2, r3, #1
   12b3a:	6979      	ldr	r1, [r7, #20]
   12b3c:	2330      	movs	r3, #48	; 0x30
   12b3e:	188a      	adds	r2, r1, r2
   12b40:	18d3      	adds	r3, r2, r3
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	b2db      	uxtb	r3, r3
   12b46:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   12b48:	693a      	ldr	r2, [r7, #16]
   12b4a:	2301      	movs	r3, #1
   12b4c:	4013      	ands	r3, r2
   12b4e:	d005      	beq.n	12b5c <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   12b50:	68fa      	ldr	r2, [r7, #12]
   12b52:	23f0      	movs	r3, #240	; 0xf0
   12b54:	4013      	ands	r3, r2
   12b56:	091b      	lsrs	r3, r3, #4
   12b58:	b2db      	uxtb	r3, r3
   12b5a:	e004      	b.n	12b66 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   12b5c:	68fb      	ldr	r3, [r7, #12]
   12b5e:	b2da      	uxtb	r2, r3
   12b60:	230f      	movs	r3, #15
   12b62:	4013      	ands	r3, r2
   12b64:	b2db      	uxtb	r3, r3
	}
}
   12b66:	1c18      	adds	r0, r3, #0
   12b68:	46bd      	mov	sp, r7
   12b6a:	b006      	add	sp, #24
   12b6c:	bd80      	pop	{r7, pc}
   12b6e:	46c0      	nop			; (mov r8, r8)
   12b70:	00012a99 	.word	0x00012a99

00012b74 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b082      	sub	sp, #8
   12b78:	af00      	add	r7, sp, #0
   12b7a:	1c02      	adds	r2, r0, #0
   12b7c:	1dfb      	adds	r3, r7, #7
   12b7e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12b80:	1dfb      	adds	r3, r7, #7
   12b82:	781b      	ldrb	r3, [r3, #0]
   12b84:	1c18      	adds	r0, r3, #0
   12b86:	4b03      	ldr	r3, [pc, #12]	; (12b94 <port_get_group_from_gpio_pin+0x20>)
   12b88:	4798      	blx	r3
   12b8a:	1c03      	adds	r3, r0, #0
}
   12b8c:	1c18      	adds	r0, r3, #0
   12b8e:	46bd      	mov	sp, r7
   12b90:	b002      	add	sp, #8
   12b92:	bd80      	pop	{r7, pc}
   12b94:	00012a99 	.word	0x00012a99

00012b98 <port_pin_set_output_level>:
 */

static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   12b98:	b580      	push	{r7, lr}
   12b9a:	b084      	sub	sp, #16
   12b9c:	af00      	add	r7, sp, #0
   12b9e:	1c0a      	adds	r2, r1, #0
   12ba0:	1dfb      	adds	r3, r7, #7
   12ba2:	1c01      	adds	r1, r0, #0
   12ba4:	7019      	strb	r1, [r3, #0]
   12ba6:	1dbb      	adds	r3, r7, #6
   12ba8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12baa:	1dfb      	adds	r3, r7, #7
   12bac:	781b      	ldrb	r3, [r3, #0]
   12bae:	1c18      	adds	r0, r3, #0
   12bb0:	4b0d      	ldr	r3, [pc, #52]	; (12be8 <port_pin_set_output_level+0x50>)
   12bb2:	4798      	blx	r3
   12bb4:	1c03      	adds	r3, r0, #0
   12bb6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12bb8:	1dfb      	adds	r3, r7, #7
   12bba:	781a      	ldrb	r2, [r3, #0]
   12bbc:	231f      	movs	r3, #31
   12bbe:	4013      	ands	r3, r2
   12bc0:	2201      	movs	r2, #1
   12bc2:	1c11      	adds	r1, r2, #0
   12bc4:	4099      	lsls	r1, r3
   12bc6:	1c0b      	adds	r3, r1, #0
   12bc8:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   12bca:	1dbb      	adds	r3, r7, #6
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d003      	beq.n	12bda <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
   12bd2:	68fb      	ldr	r3, [r7, #12]
   12bd4:	68ba      	ldr	r2, [r7, #8]
   12bd6:	619a      	str	r2, [r3, #24]
   12bd8:	e002      	b.n	12be0 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
   12bda:	68fb      	ldr	r3, [r7, #12]
   12bdc:	68ba      	ldr	r2, [r7, #8]
   12bde:	615a      	str	r2, [r3, #20]
	}
}
   12be0:	46bd      	mov	sp, r7
   12be2:	b004      	add	sp, #16
   12be4:	bd80      	pop	{r7, pc}
   12be6:	46c0      	nop			; (mov r8, r8)
   12be8:	00012b75 	.word	0x00012b75

00012bec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12bec:	b580      	push	{r7, lr}
   12bee:	b082      	sub	sp, #8
   12bf0:	af00      	add	r7, sp, #0
   12bf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12bf4:	687b      	ldr	r3, [r7, #4]
   12bf6:	2200      	movs	r2, #0
   12bf8:	701a      	strb	r2, [r3, #0]
}
   12bfa:	46bd      	mov	sp, r7
   12bfc:	b002      	add	sp, #8
   12bfe:	bd80      	pop	{r7, pc}

00012c00 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12c00:	b580      	push	{r7, lr}
   12c02:	b082      	sub	sp, #8
   12c04:	af00      	add	r7, sp, #0
   12c06:	1c02      	adds	r2, r0, #0
   12c08:	6039      	str	r1, [r7, #0]
   12c0a:	1dfb      	adds	r3, r7, #7
   12c0c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12c0e:	1dfb      	adds	r3, r7, #7
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	2b01      	cmp	r3, #1
   12c14:	d00a      	beq.n	12c2c <system_apb_clock_set_mask+0x2c>
   12c16:	2b02      	cmp	r3, #2
   12c18:	d00f      	beq.n	12c3a <system_apb_clock_set_mask+0x3a>
   12c1a:	2b00      	cmp	r3, #0
   12c1c:	d114      	bne.n	12c48 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12c1e:	4b0e      	ldr	r3, [pc, #56]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c20:	4a0d      	ldr	r2, [pc, #52]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c22:	6991      	ldr	r1, [r2, #24]
   12c24:	683a      	ldr	r2, [r7, #0]
   12c26:	430a      	orrs	r2, r1
   12c28:	619a      	str	r2, [r3, #24]
			break;
   12c2a:	e00f      	b.n	12c4c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12c2c:	4b0a      	ldr	r3, [pc, #40]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c2e:	4a0a      	ldr	r2, [pc, #40]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c30:	69d1      	ldr	r1, [r2, #28]
   12c32:	683a      	ldr	r2, [r7, #0]
   12c34:	430a      	orrs	r2, r1
   12c36:	61da      	str	r2, [r3, #28]
			break;
   12c38:	e008      	b.n	12c4c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12c3a:	4b07      	ldr	r3, [pc, #28]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c3c:	4a06      	ldr	r2, [pc, #24]	; (12c58 <system_apb_clock_set_mask+0x58>)
   12c3e:	6a11      	ldr	r1, [r2, #32]
   12c40:	683a      	ldr	r2, [r7, #0]
   12c42:	430a      	orrs	r2, r1
   12c44:	621a      	str	r2, [r3, #32]
			break;
   12c46:	e001      	b.n	12c4c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12c48:	2317      	movs	r3, #23
   12c4a:	e000      	b.n	12c4e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12c4c:	2300      	movs	r3, #0
}
   12c4e:	1c18      	adds	r0, r3, #0
   12c50:	46bd      	mov	sp, r7
   12c52:	b002      	add	sp, #8
   12c54:	bd80      	pop	{r7, pc}
   12c56:	46c0      	nop			; (mov r8, r8)
   12c58:	40000400 	.word	0x40000400

00012c5c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   12c5c:	b580      	push	{r7, lr}
   12c5e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   12c60:	4b05      	ldr	r3, [pc, #20]	; (12c78 <system_is_debugger_present+0x1c>)
   12c62:	789b      	ldrb	r3, [r3, #2]
   12c64:	b2db      	uxtb	r3, r3
   12c66:	1c1a      	adds	r2, r3, #0
   12c68:	2302      	movs	r3, #2
   12c6a:	4013      	ands	r3, r2
   12c6c:	1e5a      	subs	r2, r3, #1
   12c6e:	4193      	sbcs	r3, r2
   12c70:	b2db      	uxtb	r3, r3
}
   12c72:	1c18      	adds	r0, r3, #0
   12c74:	46bd      	mov	sp, r7
   12c76:	bd80      	pop	{r7, pc}
   12c78:	41002000 	.word	0x41002000

00012c7c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   12c7c:	b580      	push	{r7, lr}
   12c7e:	b084      	sub	sp, #16
   12c80:	af00      	add	r7, sp, #0
   12c82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12c84:	687b      	ldr	r3, [r7, #4]
   12c86:	681b      	ldr	r3, [r3, #0]
   12c88:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   12c8a:	68fb      	ldr	r3, [r7, #12]
   12c8c:	7b9b      	ldrb	r3, [r3, #14]
   12c8e:	b2db      	uxtb	r3, r3
   12c90:	1c1a      	adds	r2, r3, #0
   12c92:	2302      	movs	r3, #2
   12c94:	4013      	ands	r3, r2
   12c96:	1e5a      	subs	r2, r3, #1
   12c98:	4193      	sbcs	r3, r2
   12c9a:	b2db      	uxtb	r3, r3
}
   12c9c:	1c18      	adds	r0, r3, #0
   12c9e:	46bd      	mov	sp, r7
   12ca0:	b004      	add	sp, #16
   12ca2:	bd80      	pop	{r7, pc}

00012ca4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b084      	sub	sp, #16
   12ca8:	af00      	add	r7, sp, #0
   12caa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12cac:	687b      	ldr	r3, [r7, #4]
   12cae:	681b      	ldr	r3, [r3, #0]
   12cb0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12cb2:	68fb      	ldr	r3, [r7, #12]
   12cb4:	7b9b      	ldrb	r3, [r3, #14]
   12cb6:	b2db      	uxtb	r3, r3
   12cb8:	1c1a      	adds	r2, r3, #0
   12cba:	2301      	movs	r3, #1
   12cbc:	4013      	ands	r3, r2
   12cbe:	1e5a      	subs	r2, r3, #1
   12cc0:	4193      	sbcs	r3, r2
   12cc2:	b2db      	uxtb	r3, r3
}
   12cc4:	1c18      	adds	r0, r3, #0
   12cc6:	46bd      	mov	sp, r7
   12cc8:	b004      	add	sp, #16
   12cca:	bd80      	pop	{r7, pc}

00012ccc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   12ccc:	b580      	push	{r7, lr}
   12cce:	b084      	sub	sp, #16
   12cd0:	af00      	add	r7, sp, #0
   12cd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12cd4:	687b      	ldr	r3, [r7, #4]
   12cd6:	681b      	ldr	r3, [r3, #0]
   12cd8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   12cda:	68fb      	ldr	r3, [r7, #12]
   12cdc:	7b9b      	ldrb	r3, [r3, #14]
   12cde:	b2db      	uxtb	r3, r3
   12ce0:	1c1a      	adds	r2, r3, #0
   12ce2:	2304      	movs	r3, #4
   12ce4:	4013      	ands	r3, r2
   12ce6:	1e5a      	subs	r2, r3, #1
   12ce8:	4193      	sbcs	r3, r2
   12cea:	b2db      	uxtb	r3, r3
}
   12cec:	1c18      	adds	r0, r3, #0
   12cee:	46bd      	mov	sp, r7
   12cf0:	b004      	add	sp, #16
   12cf2:	bd80      	pop	{r7, pc}

00012cf4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   12cf4:	b580      	push	{r7, lr}
   12cf6:	b084      	sub	sp, #16
   12cf8:	af00      	add	r7, sp, #0
   12cfa:	6078      	str	r0, [r7, #4]
   12cfc:	1c0a      	adds	r2, r1, #0
   12cfe:	1cbb      	adds	r3, r7, #2
   12d00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d02:	687b      	ldr	r3, [r7, #4]
   12d04:	681b      	ldr	r3, [r3, #0]
   12d06:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   12d08:	687b      	ldr	r3, [r7, #4]
   12d0a:	1c18      	adds	r0, r3, #0
   12d0c:	4b0a      	ldr	r3, [pc, #40]	; (12d38 <spi_write+0x44>)
   12d0e:	4798      	blx	r3
   12d10:	1c03      	adds	r3, r0, #0
   12d12:	2201      	movs	r2, #1
   12d14:	4053      	eors	r3, r2
   12d16:	b2db      	uxtb	r3, r3
   12d18:	2b00      	cmp	r3, #0
   12d1a:	d001      	beq.n	12d20 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   12d1c:	2305      	movs	r3, #5
   12d1e:	e007      	b.n	12d30 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12d20:	1cbb      	adds	r3, r7, #2
   12d22:	881b      	ldrh	r3, [r3, #0]
   12d24:	05db      	lsls	r3, r3, #23
   12d26:	0ddb      	lsrs	r3, r3, #23
   12d28:	b29a      	uxth	r2, r3
   12d2a:	68fb      	ldr	r3, [r7, #12]
   12d2c:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
   12d2e:	2300      	movs	r3, #0
}
   12d30:	1c18      	adds	r0, r3, #0
   12d32:	46bd      	mov	sp, r7
   12d34:	b004      	add	sp, #16
   12d36:	bd80      	pop	{r7, pc}
   12d38:	00012ca5 	.word	0x00012ca5

00012d3c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   12d3c:	b580      	push	{r7, lr}
   12d3e:	b084      	sub	sp, #16
   12d40:	af00      	add	r7, sp, #0
   12d42:	6078      	str	r0, [r7, #4]
   12d44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d46:	687b      	ldr	r3, [r7, #4]
   12d48:	681b      	ldr	r3, [r3, #0]
   12d4a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	1c18      	adds	r0, r3, #0
   12d50:	4b1d      	ldr	r3, [pc, #116]	; (12dc8 <spi_read+0x8c>)
   12d52:	4798      	blx	r3
   12d54:	1c03      	adds	r3, r0, #0
   12d56:	2201      	movs	r2, #1
   12d58:	4053      	eors	r3, r2
   12d5a:	b2db      	uxtb	r3, r3
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d001      	beq.n	12d64 <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   12d60:	2310      	movs	r3, #16
   12d62:	e02d      	b.n	12dc0 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   12d64:	1c3b      	adds	r3, r7, #0
   12d66:	330f      	adds	r3, #15
   12d68:	2200      	movs	r2, #0
   12d6a:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12d6c:	68bb      	ldr	r3, [r7, #8]
   12d6e:	8a1b      	ldrh	r3, [r3, #16]
   12d70:	b29b      	uxth	r3, r3
   12d72:	1c1a      	adds	r2, r3, #0
   12d74:	2304      	movs	r3, #4
   12d76:	4013      	ands	r3, r2
   12d78:	d00b      	beq.n	12d92 <spi_read+0x56>
		retval = STATUS_ERR_OVERFLOW;
   12d7a:	1c3b      	adds	r3, r7, #0
   12d7c:	330f      	adds	r3, #15
   12d7e:	221e      	movs	r2, #30
   12d80:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
   12d82:	68bb      	ldr	r3, [r7, #8]
   12d84:	8a1b      	ldrh	r3, [r3, #16]
   12d86:	b29b      	uxth	r3, r3
   12d88:	2204      	movs	r2, #4
   12d8a:	4313      	orrs	r3, r2
   12d8c:	b29a      	uxth	r2, r3
   12d8e:	68bb      	ldr	r3, [r7, #8]
   12d90:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12d92:	687b      	ldr	r3, [r7, #4]
   12d94:	799b      	ldrb	r3, [r3, #6]
   12d96:	2b01      	cmp	r3, #1
   12d98:	d108      	bne.n	12dac <spi_read+0x70>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12d9a:	68bb      	ldr	r3, [r7, #8]
   12d9c:	8b1b      	ldrh	r3, [r3, #24]
   12d9e:	b29b      	uxth	r3, r3
   12da0:	05db      	lsls	r3, r3, #23
   12da2:	0ddb      	lsrs	r3, r3, #23
   12da4:	b29a      	uxth	r2, r3
   12da6:	683b      	ldr	r3, [r7, #0]
   12da8:	801a      	strh	r2, [r3, #0]
   12daa:	e006      	b.n	12dba <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12dac:	68bb      	ldr	r3, [r7, #8]
   12dae:	8b1b      	ldrh	r3, [r3, #24]
   12db0:	b29b      	uxth	r3, r3
   12db2:	b2db      	uxtb	r3, r3
   12db4:	1c1a      	adds	r2, r3, #0
   12db6:	683b      	ldr	r3, [r7, #0]
   12db8:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   12dba:	1c3b      	adds	r3, r7, #0
   12dbc:	330f      	adds	r3, #15
   12dbe:	781b      	ldrb	r3, [r3, #0]
}
   12dc0:	1c18      	adds	r0, r3, #0
   12dc2:	46bd      	mov	sp, r7
   12dc4:	b004      	add	sp, #16
   12dc6:	bd80      	pop	{r7, pc}
   12dc8:	00012ccd 	.word	0x00012ccd

00012dcc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12dcc:	b590      	push	{r4, r7, lr}
   12dce:	b093      	sub	sp, #76	; 0x4c
   12dd0:	af00      	add	r7, sp, #0
   12dd2:	6078      	str	r0, [r7, #4]
   12dd4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	681b      	ldr	r3, [r3, #0]
   12dda:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12ddc:	687b      	ldr	r3, [r7, #4]
   12dde:	681b      	ldr	r3, [r3, #0]
   12de0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12de2:	1c3b      	adds	r3, r7, #0
   12de4:	331c      	adds	r3, #28
   12de6:	1c18      	adds	r0, r3, #0
   12de8:	4b69      	ldr	r3, [pc, #420]	; (12f90 <_spi_set_config+0x1c4>)
   12dea:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12dec:	1c3b      	adds	r3, r7, #0
   12dee:	331c      	adds	r3, #28
   12df0:	2200      	movs	r2, #0
   12df2:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12df4:	683b      	ldr	r3, [r7, #0]
   12df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12df8:	1c3b      	adds	r3, r7, #0
   12dfa:	330c      	adds	r3, #12
   12dfc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12dfe:	683b      	ldr	r3, [r7, #0]
   12e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12e02:	1c3b      	adds	r3, r7, #0
   12e04:	330c      	adds	r3, #12
   12e06:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12e08:	683b      	ldr	r3, [r7, #0]
   12e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12e0c:	1c3b      	adds	r3, r7, #0
   12e0e:	330c      	adds	r3, #12
   12e10:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12e12:	683b      	ldr	r3, [r7, #0]
   12e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
   12e16:	1c3b      	adds	r3, r7, #0
   12e18:	330c      	adds	r3, #12
   12e1a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12e1c:	1c3b      	adds	r3, r7, #0
   12e1e:	3347      	adds	r3, #71	; 0x47
   12e20:	2200      	movs	r2, #0
   12e22:	701a      	strb	r2, [r3, #0]
   12e24:	e02c      	b.n	12e80 <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12e26:	1c3b      	adds	r3, r7, #0
   12e28:	3347      	adds	r3, #71	; 0x47
   12e2a:	781a      	ldrb	r2, [r3, #0]
   12e2c:	1c3b      	adds	r3, r7, #0
   12e2e:	330c      	adds	r3, #12
   12e30:	0092      	lsls	r2, r2, #2
   12e32:	58d3      	ldr	r3, [r2, r3]
   12e34:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12e38:	2b00      	cmp	r3, #0
   12e3a:	d109      	bne.n	12e50 <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   12e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12e3e:	1c3b      	adds	r3, r7, #0
   12e40:	3347      	adds	r3, #71	; 0x47
   12e42:	781b      	ldrb	r3, [r3, #0]
   12e44:	1c10      	adds	r0, r2, #0
   12e46:	1c19      	adds	r1, r3, #0
   12e48:	4b52      	ldr	r3, [pc, #328]	; (12f94 <_spi_set_config+0x1c8>)
   12e4a:	4798      	blx	r3
   12e4c:	1c03      	adds	r3, r0, #0
   12e4e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   12e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12e52:	3301      	adds	r3, #1
   12e54:	d00d      	beq.n	12e72 <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   12e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12e58:	b2da      	uxtb	r2, r3
   12e5a:	1c3b      	adds	r3, r7, #0
   12e5c:	331c      	adds	r3, #28
   12e5e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   12e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12e62:	0c1b      	lsrs	r3, r3, #16
   12e64:	b2da      	uxtb	r2, r3
   12e66:	1c3b      	adds	r3, r7, #0
   12e68:	331c      	adds	r3, #28
   12e6a:	1c10      	adds	r0, r2, #0
   12e6c:	1c19      	adds	r1, r3, #0
   12e6e:	4b4a      	ldr	r3, [pc, #296]	; (12f98 <_spi_set_config+0x1cc>)
   12e70:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12e72:	1c3b      	adds	r3, r7, #0
   12e74:	3347      	adds	r3, #71	; 0x47
   12e76:	781a      	ldrb	r2, [r3, #0]
   12e78:	1c3b      	adds	r3, r7, #0
   12e7a:	3347      	adds	r3, #71	; 0x47
   12e7c:	3201      	adds	r2, #1
   12e7e:	701a      	strb	r2, [r3, #0]
   12e80:	1c3b      	adds	r3, r7, #0
   12e82:	3347      	adds	r3, #71	; 0x47
   12e84:	781b      	ldrb	r3, [r3, #0]
   12e86:	2b03      	cmp	r3, #3
   12e88:	d9cd      	bls.n	12e26 <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
   12e8a:	683b      	ldr	r3, [r7, #0]
   12e8c:	781a      	ldrb	r2, [r3, #0]
   12e8e:	687b      	ldr	r3, [r7, #4]
   12e90:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   12e92:	683b      	ldr	r3, [r7, #0]
   12e94:	7c1a      	ldrb	r2, [r3, #16]
   12e96:	687b      	ldr	r3, [r7, #4]
   12e98:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   12e9a:	683b      	ldr	r3, [r7, #0]
   12e9c:	7c9a      	ldrb	r2, [r3, #18]
   12e9e:	687b      	ldr	r3, [r7, #4]
   12ea0:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   12ea2:	1c3b      	adds	r3, r7, #0
   12ea4:	330a      	adds	r3, #10
   12ea6:	2200      	movs	r2, #0
   12ea8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   12eaa:	2300      	movs	r3, #0
   12eac:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   12eae:	2300      	movs	r3, #0
   12eb0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   12eb2:	683b      	ldr	r3, [r7, #0]
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	2b01      	cmp	r3, #1
   12eb8:	d12b      	bne.n	12f12 <_spi_set_config+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12eba:	687b      	ldr	r3, [r7, #4]
   12ebc:	681b      	ldr	r3, [r3, #0]
   12ebe:	1c18      	adds	r0, r3, #0
   12ec0:	4b36      	ldr	r3, [pc, #216]	; (12f9c <_spi_set_config+0x1d0>)
   12ec2:	4798      	blx	r3
   12ec4:	1c03      	adds	r3, r0, #0
   12ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12eca:	330d      	adds	r3, #13
   12ecc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ed0:	b2db      	uxtb	r3, r3
   12ed2:	1c18      	adds	r0, r3, #0
   12ed4:	4b32      	ldr	r3, [pc, #200]	; (12fa0 <_spi_set_config+0x1d4>)
   12ed6:	4798      	blx	r3
   12ed8:	1c03      	adds	r3, r0, #0
   12eda:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   12edc:	683b      	ldr	r3, [r7, #0]
   12ede:	6959      	ldr	r1, [r3, #20]
   12ee0:	1c3c      	adds	r4, r7, #0
   12ee2:	3423      	adds	r4, #35	; 0x23
   12ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12ee6:	1c3b      	adds	r3, r7, #0
   12ee8:	330a      	adds	r3, #10
   12eea:	1c08      	adds	r0, r1, #0
   12eec:	1c11      	adds	r1, r2, #0
   12eee:	1c1a      	adds	r2, r3, #0
   12ef0:	4b2c      	ldr	r3, [pc, #176]	; (12fa4 <_spi_set_config+0x1d8>)
   12ef2:	4798      	blx	r3
   12ef4:	1c03      	adds	r3, r0, #0
   12ef6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   12ef8:	1c3b      	adds	r3, r7, #0
   12efa:	3323      	adds	r3, #35	; 0x23
   12efc:	781b      	ldrb	r3, [r3, #0]
   12efe:	2b00      	cmp	r3, #0
   12f00:	d001      	beq.n	12f06 <_spi_set_config+0x13a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12f02:	2317      	movs	r3, #23
   12f04:	e040      	b.n	12f88 <_spi_set_config+0x1bc>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   12f06:	1c3b      	adds	r3, r7, #0
   12f08:	330a      	adds	r3, #10
   12f0a:	881b      	ldrh	r3, [r3, #0]
   12f0c:	b2da      	uxtb	r2, r3
   12f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f10:	729a      	strb	r2, [r3, #10]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   12f12:	683b      	ldr	r3, [r7, #0]
   12f14:	685b      	ldr	r3, [r3, #4]
   12f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12f18:	4313      	orrs	r3, r2
   12f1a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12f1c:	683b      	ldr	r3, [r7, #0]
   12f1e:	689b      	ldr	r3, [r3, #8]
   12f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12f22:	4313      	orrs	r3, r2
   12f24:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
   12f26:	683b      	ldr	r3, [r7, #0]
   12f28:	68db      	ldr	r3, [r3, #12]
   12f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12f2c:	4313      	orrs	r3, r2
   12f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	
//---------BETH I SHOEHORNED THIS IN	
	ctrla |=   SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   12f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12f32:	220c      	movs	r2, #12
   12f34:	4313      	orrs	r3, r2
   12f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12f38:	683b      	ldr	r3, [r7, #0]
   12f3a:	7c1b      	ldrb	r3, [r3, #16]
   12f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12f3e:	4313      	orrs	r3, r2
   12f40:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   12f42:	683b      	ldr	r3, [r7, #0]
   12f44:	7c5b      	ldrb	r3, [r3, #17]
   12f46:	2b00      	cmp	r3, #0
   12f48:	d104      	bne.n	12f54 <_spi_set_config+0x188>
   12f4a:	4b17      	ldr	r3, [pc, #92]	; (12fa8 <_spi_set_config+0x1dc>)
   12f4c:	4798      	blx	r3
   12f4e:	1c03      	adds	r3, r0, #0
   12f50:	2b00      	cmp	r3, #0
   12f52:	d003      	beq.n	12f5c <_spi_set_config+0x190>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   12f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12f56:	2280      	movs	r2, #128	; 0x80
   12f58:	4313      	orrs	r3, r2
   12f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   12f5c:	683b      	ldr	r3, [r7, #0]
   12f5e:	7c9b      	ldrb	r3, [r3, #18]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d004      	beq.n	12f6e <_spi_set_config+0x1a2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   12f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f66:	2280      	movs	r2, #128	; 0x80
   12f68:	0292      	lsls	r2, r2, #10
   12f6a:	4313      	orrs	r3, r2
   12f6c:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   12f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f70:	681a      	ldr	r2, [r3, #0]
   12f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12f74:	431a      	orrs	r2, r3
   12f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f78:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   12f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f7c:	685a      	ldr	r2, [r3, #4]
   12f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f80:	431a      	orrs	r2, r3
   12f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f84:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   12f86:	2300      	movs	r3, #0
}
   12f88:	1c18      	adds	r0, r3, #0
   12f8a:	46bd      	mov	sp, r7
   12f8c:	b013      	add	sp, #76	; 0x4c
   12f8e:	bd90      	pop	{r4, r7, pc}
   12f90:	00012a71 	.word	0x00012a71
   12f94:	0001271d 	.word	0x0001271d
   12f98:	000142a1 	.word	0x000142a1
   12f9c:	000128ed 	.word	0x000128ed
   12fa0:	000140e1 	.word	0x000140e1
   12fa4:	0001247d 	.word	0x0001247d
   12fa8:	00012c5d 	.word	0x00012c5d

00012fac <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12fac:	b590      	push	{r4, r7, lr}
   12fae:	b091      	sub	sp, #68	; 0x44
   12fb0:	af00      	add	r7, sp, #0
   12fb2:	6078      	str	r0, [r7, #4]
   12fb4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12fb6:	687b      	ldr	r3, [r7, #4]
   12fb8:	681b      	ldr	r3, [r3, #0]
   12fba:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	681b      	ldr	r3, [r3, #0]
   12fc0:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   12fc2:	683b      	ldr	r3, [r7, #0]
   12fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   12fc6:	1c3b      	adds	r3, r7, #0
   12fc8:	3310      	adds	r3, #16
   12fca:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   12fd0:	1c3b      	adds	r3, r7, #0
   12fd2:	3310      	adds	r3, #16
   12fd4:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   12fd6:	683b      	ldr	r3, [r7, #0]
   12fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   12fda:	1c3b      	adds	r3, r7, #0
   12fdc:	3310      	adds	r3, #16
   12fde:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
   12fe0:	683b      	ldr	r3, [r7, #0]
   12fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
   12fe4:	1c3b      	adds	r3, r7, #0
   12fe6:	3310      	adds	r3, #16
   12fe8:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12fea:	1c3b      	adds	r3, r7, #0
   12fec:	333f      	adds	r3, #63	; 0x3f
   12fee:	2200      	movs	r2, #0
   12ff0:	701a      	strb	r2, [r3, #0]
   12ff2:	e030      	b.n	13056 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12ff4:	1c3b      	adds	r3, r7, #0
   12ff6:	333f      	adds	r3, #63	; 0x3f
   12ff8:	781a      	ldrb	r2, [r3, #0]
   12ffa:	1c3b      	adds	r3, r7, #0
   12ffc:	3310      	adds	r3, #16
   12ffe:	0092      	lsls	r2, r2, #2
   13000:	58d3      	ldr	r3, [r2, r3]
   13002:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   13004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13006:	2b00      	cmp	r3, #0
   13008:	d109      	bne.n	1301e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1300a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1300c:	1c3b      	adds	r3, r7, #0
   1300e:	333f      	adds	r3, #63	; 0x3f
   13010:	781b      	ldrb	r3, [r3, #0]
   13012:	1c10      	adds	r0, r2, #0
   13014:	1c19      	adds	r1, r3, #0
   13016:	4b4d      	ldr	r3, [pc, #308]	; (1314c <_spi_check_config+0x1a0>)
   13018:	4798      	blx	r3
   1301a:	1c03      	adds	r3, r0, #0
   1301c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   1301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13020:	3301      	adds	r3, #1
   13022:	d100      	bne.n	13026 <_spi_check_config+0x7a>
			continue;
   13024:	e010      	b.n	13048 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
   13026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13028:	041b      	lsls	r3, r3, #16
   1302a:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   1302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1302e:	0c1b      	lsrs	r3, r3, #16
   13030:	b2db      	uxtb	r3, r3
   13032:	1c18      	adds	r0, r3, #0
   13034:	4b46      	ldr	r3, [pc, #280]	; (13150 <_spi_check_config+0x1a4>)
   13036:	4798      	blx	r3
   13038:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   1303a:	429c      	cmp	r4, r3
   1303c:	d004      	beq.n	13048 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
   1303e:	687b      	ldr	r3, [r7, #4]
   13040:	2200      	movs	r2, #0
   13042:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   13044:	231c      	movs	r3, #28
   13046:	e07d      	b.n	13144 <_spi_check_config+0x198>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13048:	1c3b      	adds	r3, r7, #0
   1304a:	333f      	adds	r3, #63	; 0x3f
   1304c:	781a      	ldrb	r2, [r3, #0]
   1304e:	1c3b      	adds	r3, r7, #0
   13050:	333f      	adds	r3, #63	; 0x3f
   13052:	3201      	adds	r2, #1
   13054:	701a      	strb	r2, [r3, #0]
   13056:	1c3b      	adds	r3, r7, #0
   13058:	333f      	adds	r3, #63	; 0x3f
   1305a:	781b      	ldrb	r3, [r3, #0]
   1305c:	2b03      	cmp	r3, #3
   1305e:	d9c9      	bls.n	12ff4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   13060:	200c      	movs	r0, #12
   13062:	4b3c      	ldr	r3, [pc, #240]	; (13154 <_spi_check_config+0x1a8>)
   13064:	4798      	blx	r3
   13066:	1c03      	adds	r3, r0, #0
   13068:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   1306a:	2300      	movs	r3, #0
   1306c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   1306e:	2300      	movs	r3, #0
   13070:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   13072:	683b      	ldr	r3, [r7, #0]
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	2b01      	cmp	r3, #1
   13078:	d123      	bne.n	130c2 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   1307a:	683b      	ldr	r3, [r7, #0]
   1307c:	6959      	ldr	r1, [r3, #20]
   1307e:	1c3c      	adds	r4, r7, #0
   13080:	3423      	adds	r4, #35	; 0x23
   13082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13084:	1c3b      	adds	r3, r7, #0
   13086:	330e      	adds	r3, #14
   13088:	1c08      	adds	r0, r1, #0
   1308a:	1c11      	adds	r1, r2, #0
   1308c:	1c1a      	adds	r2, r3, #0
   1308e:	4b32      	ldr	r3, [pc, #200]	; (13158 <_spi_check_config+0x1ac>)
   13090:	4798      	blx	r3
   13092:	1c03      	adds	r3, r0, #0
   13094:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   13096:	1c3b      	adds	r3, r7, #0
   13098:	3323      	adds	r3, #35	; 0x23
   1309a:	781b      	ldrb	r3, [r3, #0]
   1309c:	2b00      	cmp	r3, #0
   1309e:	d001      	beq.n	130a4 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   130a0:	2317      	movs	r3, #23
   130a2:	e04f      	b.n	13144 <_spi_check_config+0x198>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130a6:	7a9b      	ldrb	r3, [r3, #10]
   130a8:	b2da      	uxtb	r2, r3
   130aa:	1c3b      	adds	r3, r7, #0
   130ac:	330e      	adds	r3, #14
   130ae:	881b      	ldrh	r3, [r3, #0]
   130b0:	b2db      	uxtb	r3, r3
   130b2:	429a      	cmp	r2, r3
   130b4:	d001      	beq.n	130ba <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   130b6:	231c      	movs	r3, #28
   130b8:	e044      	b.n	13144 <_spi_check_config+0x198>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   130ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130bc:	220c      	movs	r2, #12
   130be:	4313      	orrs	r3, r2
   130c0:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   130c2:	683b      	ldr	r3, [r7, #0]
   130c4:	685b      	ldr	r3, [r3, #4]
   130c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   130c8:	4313      	orrs	r3, r2
   130ca:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   130cc:	683b      	ldr	r3, [r7, #0]
   130ce:	689b      	ldr	r3, [r3, #8]
   130d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   130d2:	4313      	orrs	r3, r2
   130d4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	68db      	ldr	r3, [r3, #12]
   130da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   130dc:	4313      	orrs	r3, r2
   130de:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   130e0:	683b      	ldr	r3, [r7, #0]
   130e2:	7c1b      	ldrb	r3, [r3, #16]
   130e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   130e6:	4313      	orrs	r3, r2
   130e8:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   130ea:	683b      	ldr	r3, [r7, #0]
   130ec:	7c5b      	ldrb	r3, [r3, #17]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d003      	beq.n	130fa <_spi_check_config+0x14e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   130f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130f4:	2280      	movs	r2, #128	; 0x80
   130f6:	4313      	orrs	r3, r2
   130f8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   130fa:	683b      	ldr	r3, [r7, #0]
   130fc:	7c9b      	ldrb	r3, [r3, #18]
   130fe:	2b00      	cmp	r3, #0
   13100:	d004      	beq.n	1310c <_spi_check_config+0x160>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   13102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13104:	2280      	movs	r2, #128	; 0x80
   13106:	0292      	lsls	r2, r2, #10
   13108:	4313      	orrs	r3, r2
   1310a:	633b      	str	r3, [r7, #48]	; 0x30
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   1310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1310e:	2202      	movs	r2, #2
   13110:	4313      	orrs	r3, r2
   13112:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   13114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13116:	681a      	ldr	r2, [r3, #0]
   13118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1311a:	429a      	cmp	r2, r3
   1311c:	d10e      	bne.n	1313c <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
   1311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13120:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   13122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13124:	429a      	cmp	r2, r3
   13126:	d109      	bne.n	1313c <_spi_check_config+0x190>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
   13128:	683b      	ldr	r3, [r7, #0]
   1312a:	781a      	ldrb	r2, [r3, #0]
   1312c:	687b      	ldr	r3, [r7, #4]
   1312e:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   13130:	683b      	ldr	r3, [r7, #0]
   13132:	7c1a      	ldrb	r2, [r3, #16]
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   13138:	2300      	movs	r3, #0
   1313a:	e003      	b.n	13144 <_spi_check_config+0x198>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   1313c:	687b      	ldr	r3, [r7, #4]
   1313e:	2200      	movs	r2, #0
   13140:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   13142:	231c      	movs	r3, #28
}
   13144:	1c18      	adds	r0, r3, #0
   13146:	46bd      	mov	sp, r7
   13148:	b011      	add	sp, #68	; 0x44
   1314a:	bd90      	pop	{r4, r7, pc}
   1314c:	0001271d 	.word	0x0001271d
   13150:	00012af9 	.word	0x00012af9
   13154:	000140e1 	.word	0x000140e1
   13158:	0001247d 	.word	0x0001247d

0001315c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1315c:	b580      	push	{r7, lr}
   1315e:	b08a      	sub	sp, #40	; 0x28
   13160:	af00      	add	r7, sp, #0
   13162:	60f8      	str	r0, [r7, #12]
   13164:	60b9      	str	r1, [r7, #8]
   13166:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13168:	68fb      	ldr	r3, [r7, #12]
   1316a:	68ba      	ldr	r2, [r7, #8]
   1316c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1316e:	68fb      	ldr	r3, [r7, #12]
   13170:	681b      	ldr	r3, [r3, #0]
   13172:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   13174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13176:	681a      	ldr	r2, [r3, #0]
   13178:	2302      	movs	r3, #2
   1317a:	4013      	ands	r3, r2
   1317c:	d007      	beq.n	1318e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   1317e:	68fa      	ldr	r2, [r7, #12]
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	1c10      	adds	r0, r2, #0
   13184:	1c19      	adds	r1, r3, #0
   13186:	4b2a      	ldr	r3, [pc, #168]	; (13230 <spi_init+0xd4>)
   13188:	4798      	blx	r3
   1318a:	1c03      	adds	r3, r0, #0
   1318c:	e04c      	b.n	13228 <spi_init+0xcc>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13190:	681a      	ldr	r2, [r3, #0]
   13192:	2301      	movs	r3, #1
   13194:	4013      	ands	r3, r2
   13196:	d001      	beq.n	1319c <spi_init+0x40>
		return STATUS_BUSY;
   13198:	2305      	movs	r3, #5
   1319a:	e045      	b.n	13228 <spi_init+0xcc>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1319c:	68fb      	ldr	r3, [r7, #12]
   1319e:	681b      	ldr	r3, [r3, #0]
   131a0:	1c18      	adds	r0, r3, #0
   131a2:	4b24      	ldr	r3, [pc, #144]	; (13234 <spi_init+0xd8>)
   131a4:	4798      	blx	r3
   131a6:	1c03      	adds	r3, r0, #0
   131a8:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   131aa:	6a3b      	ldr	r3, [r7, #32]
   131ac:	3302      	adds	r3, #2
   131ae:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   131b0:	6a3b      	ldr	r3, [r7, #32]
   131b2:	330d      	adds	r3, #13
   131b4:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   131b6:	69fb      	ldr	r3, [r7, #28]
   131b8:	2201      	movs	r2, #1
   131ba:	1c11      	adds	r1, r2, #0
   131bc:	4099      	lsls	r1, r3
   131be:	1c0b      	adds	r3, r1, #0
   131c0:	2002      	movs	r0, #2
   131c2:	1c19      	adds	r1, r3, #0
   131c4:	4b1c      	ldr	r3, [pc, #112]	; (13238 <spi_init+0xdc>)
   131c6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   131c8:	1c3b      	adds	r3, r7, #0
   131ca:	3314      	adds	r3, #20
   131cc:	1c18      	adds	r0, r3, #0
   131ce:	4b1b      	ldr	r3, [pc, #108]	; (1323c <spi_init+0xe0>)
   131d0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   131d2:	687a      	ldr	r2, [r7, #4]
   131d4:	2320      	movs	r3, #32
   131d6:	5cd2      	ldrb	r2, [r2, r3]
   131d8:	1c3b      	adds	r3, r7, #0
   131da:	3314      	adds	r3, #20
   131dc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   131de:	69bb      	ldr	r3, [r7, #24]
   131e0:	b2da      	uxtb	r2, r3
   131e2:	1c3b      	adds	r3, r7, #0
   131e4:	3314      	adds	r3, #20
   131e6:	1c10      	adds	r0, r2, #0
   131e8:	1c19      	adds	r1, r3, #0
   131ea:	4b15      	ldr	r3, [pc, #84]	; (13240 <spi_init+0xe4>)
   131ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   131ee:	69bb      	ldr	r3, [r7, #24]
   131f0:	b2db      	uxtb	r3, r3
   131f2:	1c18      	adds	r0, r3, #0
   131f4:	4b13      	ldr	r3, [pc, #76]	; (13244 <spi_init+0xe8>)
   131f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   131f8:	687a      	ldr	r2, [r7, #4]
   131fa:	2320      	movs	r3, #32
   131fc:	5cd3      	ldrb	r3, [r2, r3]
   131fe:	1c18      	adds	r0, r3, #0
   13200:	2100      	movs	r1, #0
   13202:	4b11      	ldr	r3, [pc, #68]	; (13248 <spi_init+0xec>)
   13204:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   13206:	687b      	ldr	r3, [r7, #4]
   13208:	781b      	ldrb	r3, [r3, #0]
   1320a:	2b01      	cmp	r3, #1
   1320c:	d105      	bne.n	1321a <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
   1320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13210:	681b      	ldr	r3, [r3, #0]
   13212:	220c      	movs	r2, #12
   13214:	431a      	orrs	r2, r3
   13216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13218:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   1321a:	68fa      	ldr	r2, [r7, #12]
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	1c10      	adds	r0, r2, #0
   13220:	1c19      	adds	r1, r3, #0
   13222:	4b0a      	ldr	r3, [pc, #40]	; (1324c <spi_init+0xf0>)
   13224:	4798      	blx	r3
   13226:	1c03      	adds	r3, r0, #0
}
   13228:	1c18      	adds	r0, r3, #0
   1322a:	46bd      	mov	sp, r7
   1322c:	b00a      	add	sp, #40	; 0x28
   1322e:	bd80      	pop	{r7, pc}
   13230:	00012fad 	.word	0x00012fad
   13234:	000128ed 	.word	0x000128ed
   13238:	00012c01 	.word	0x00012c01
   1323c:	00012bed 	.word	0x00012bed
   13240:	00013f81 	.word	0x00013f81
   13244:	00013fc1 	.word	0x00013fc1
   13248:	00012691 	.word	0x00012691
   1324c:	00012dcd 	.word	0x00012dcd

00013250 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   13250:	b580      	push	{r7, lr}
   13252:	b086      	sub	sp, #24
   13254:	af00      	add	r7, sp, #0
   13256:	60f8      	str	r0, [r7, #12]
   13258:	60b9      	str	r1, [r7, #8]
   1325a:	1dfb      	adds	r3, r7, #7
   1325c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1325e:	68fb      	ldr	r3, [r7, #12]
   13260:	795b      	ldrb	r3, [r3, #5]
   13262:	2b01      	cmp	r3, #1
   13264:	d001      	beq.n	1326a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13266:	2315      	movs	r3, #21
   13268:	e052      	b.n	13310 <spi_select_slave+0xc0>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
   1326a:	1dfb      	adds	r3, r7, #7
   1326c:	781b      	ldrb	r3, [r3, #0]
   1326e:	2b00      	cmp	r3, #0
   13270:	d047      	beq.n	13302 <spi_select_slave+0xb2>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   13272:	68bb      	ldr	r3, [r7, #8]
   13274:	785b      	ldrb	r3, [r3, #1]
   13276:	2b00      	cmp	r3, #0
   13278:	d03c      	beq.n	132f4 <spi_select_slave+0xa4>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   1327a:	68fb      	ldr	r3, [r7, #12]
   1327c:	1c18      	adds	r0, r3, #0
   1327e:	4b26      	ldr	r3, [pc, #152]	; (13318 <spi_select_slave+0xc8>)
   13280:	4798      	blx	r3
   13282:	1c03      	adds	r3, r0, #0
   13284:	2201      	movs	r2, #1
   13286:	4053      	eors	r3, r2
   13288:	b2db      	uxtb	r3, r3
   1328a:	2b00      	cmp	r3, #0
   1328c:	d007      	beq.n	1329e <spi_select_slave+0x4e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1328e:	68bb      	ldr	r3, [r7, #8]
   13290:	781b      	ldrb	r3, [r3, #0]
   13292:	1c18      	adds	r0, r3, #0
   13294:	2101      	movs	r1, #1
   13296:	4b21      	ldr	r3, [pc, #132]	; (1331c <spi_select_slave+0xcc>)
   13298:	4798      	blx	r3
					return STATUS_BUSY;
   1329a:	2305      	movs	r3, #5
   1329c:	e038      	b.n	13310 <spi_select_slave+0xc0>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1329e:	68bb      	ldr	r3, [r7, #8]
   132a0:	781b      	ldrb	r3, [r3, #0]
   132a2:	1c18      	adds	r0, r3, #0
   132a4:	2100      	movs	r1, #0
   132a6:	4b1d      	ldr	r3, [pc, #116]	; (1331c <spi_select_slave+0xcc>)
   132a8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   132aa:	68bb      	ldr	r3, [r7, #8]
   132ac:	789b      	ldrb	r3, [r3, #2]
   132ae:	68fa      	ldr	r2, [r7, #12]
   132b0:	1c10      	adds	r0, r2, #0
   132b2:	1c19      	adds	r1, r3, #0
   132b4:	4b1a      	ldr	r3, [pc, #104]	; (13320 <spi_select_slave+0xd0>)
   132b6:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   132b8:	68fb      	ldr	r3, [r7, #12]
   132ba:	79db      	ldrb	r3, [r3, #7]
   132bc:	2201      	movs	r2, #1
   132be:	4053      	eors	r3, r2
   132c0:	b2db      	uxtb	r3, r3
   132c2:	2b00      	cmp	r3, #0
   132c4:	d023      	beq.n	1330e <spi_select_slave+0xbe>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   132c6:	46c0      	nop			; (mov r8, r8)
   132c8:	68fb      	ldr	r3, [r7, #12]
   132ca:	1c18      	adds	r0, r3, #0
   132cc:	4b15      	ldr	r3, [pc, #84]	; (13324 <spi_select_slave+0xd4>)
   132ce:	4798      	blx	r3
   132d0:	1c03      	adds	r3, r0, #0
   132d2:	2201      	movs	r2, #1
   132d4:	4053      	eors	r3, r2
   132d6:	b2db      	uxtb	r3, r3
   132d8:	2b00      	cmp	r3, #0
   132da:	d1f5      	bne.n	132c8 <spi_select_slave+0x78>
					}
					uint16_t flush = 0;
   132dc:	1c3b      	adds	r3, r7, #0
   132de:	3316      	adds	r3, #22
   132e0:	2200      	movs	r2, #0
   132e2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   132e4:	68fa      	ldr	r2, [r7, #12]
   132e6:	1c3b      	adds	r3, r7, #0
   132e8:	3316      	adds	r3, #22
   132ea:	1c10      	adds	r0, r2, #0
   132ec:	1c19      	adds	r1, r3, #0
   132ee:	4b0e      	ldr	r3, [pc, #56]	; (13328 <spi_select_slave+0xd8>)
   132f0:	4798      	blx	r3
   132f2:	e00c      	b.n	1330e <spi_select_slave+0xbe>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   132f4:	68bb      	ldr	r3, [r7, #8]
   132f6:	781b      	ldrb	r3, [r3, #0]
   132f8:	1c18      	adds	r0, r3, #0
   132fa:	2100      	movs	r1, #0
   132fc:	4b07      	ldr	r3, [pc, #28]	; (1331c <spi_select_slave+0xcc>)
   132fe:	4798      	blx	r3
   13300:	e005      	b.n	1330e <spi_select_slave+0xbe>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   13302:	68bb      	ldr	r3, [r7, #8]
   13304:	781b      	ldrb	r3, [r3, #0]
   13306:	1c18      	adds	r0, r3, #0
   13308:	2101      	movs	r1, #1
   1330a:	4b04      	ldr	r3, [pc, #16]	; (1331c <spi_select_slave+0xcc>)
   1330c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   1330e:	2300      	movs	r3, #0
}
   13310:	1c18      	adds	r0, r3, #0
   13312:	46bd      	mov	sp, r7
   13314:	b006      	add	sp, #24
   13316:	bd80      	pop	{r7, pc}
   13318:	00012ca5 	.word	0x00012ca5
   1331c:	00012b99 	.word	0x00012b99
   13320:	00012cf5 	.word	0x00012cf5
   13324:	00012ccd 	.word	0x00012ccd
   13328:	00012d3d 	.word	0x00012d3d

0001332c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   1332c:	b590      	push	{r4, r7, lr}
   1332e:	b089      	sub	sp, #36	; 0x24
   13330:	af00      	add	r7, sp, #0
   13332:	60f8      	str	r0, [r7, #12]
   13334:	60b9      	str	r1, [r7, #8]
   13336:	607a      	str	r2, [r7, #4]
   13338:	1c1a      	adds	r2, r3, #0
   1333a:	1cbb      	adds	r3, r7, #2
   1333c:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   1333e:	1cbb      	adds	r3, r7, #2
   13340:	881b      	ldrh	r3, [r3, #0]
   13342:	2b00      	cmp	r3, #0
   13344:	d101      	bne.n	1334a <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
   13346:	2317      	movs	r3, #23
   13348:	e0b2      	b.n	134b0 <spi_transceive_buffer_wait+0x184>
	}

	if (!(module->receiver_enabled)) {
   1334a:	68fb      	ldr	r3, [r7, #12]
   1334c:	79db      	ldrb	r3, [r3, #7]
   1334e:	2201      	movs	r2, #1
   13350:	4053      	eors	r3, r2
   13352:	b2db      	uxtb	r3, r3
   13354:	2b00      	cmp	r3, #0
   13356:	d001      	beq.n	1335c <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
   13358:	231c      	movs	r3, #28
   1335a:	e0a9      	b.n	134b0 <spi_transceive_buffer_wait+0x184>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1335c:	1c3b      	adds	r3, r7, #0
   1335e:	331e      	adds	r3, #30
   13360:	2200      	movs	r2, #0
   13362:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   13364:	1c3b      	adds	r3, r7, #0
   13366:	331c      	adds	r3, #28
   13368:	2200      	movs	r2, #0
   1336a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   1336c:	1c3b      	adds	r3, r7, #0
   1336e:	331a      	adds	r3, #26
   13370:	1cba      	adds	r2, r7, #2
   13372:	8812      	ldrh	r2, [r2, #0]
   13374:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   13376:	e083      	b.n	13480 <spi_transceive_buffer_wait+0x154>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   13378:	46c0      	nop			; (mov r8, r8)
   1337a:	68fb      	ldr	r3, [r7, #12]
   1337c:	1c18      	adds	r0, r3, #0
   1337e:	4b4e      	ldr	r3, [pc, #312]	; (134b8 <spi_transceive_buffer_wait+0x18c>)
   13380:	4798      	blx	r3
   13382:	1c03      	adds	r3, r0, #0
   13384:	2201      	movs	r2, #1
   13386:	4053      	eors	r3, r2
   13388:	b2db      	uxtb	r3, r3
   1338a:	2b00      	cmp	r3, #0
   1338c:	d1f5      	bne.n	1337a <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   1338e:	1c3b      	adds	r3, r7, #0
   13390:	331e      	adds	r3, #30
   13392:	881b      	ldrh	r3, [r3, #0]
   13394:	1c3a      	adds	r2, r7, #0
   13396:	321e      	adds	r2, #30
   13398:	1c59      	adds	r1, r3, #1
   1339a:	8011      	strh	r1, [r2, #0]
   1339c:	68ba      	ldr	r2, [r7, #8]
   1339e:	18d3      	adds	r3, r2, r3
   133a0:	781a      	ldrb	r2, [r3, #0]
   133a2:	1c3b      	adds	r3, r7, #0
   133a4:	3318      	adds	r3, #24
   133a6:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   133a8:	68fb      	ldr	r3, [r7, #12]
   133aa:	799b      	ldrb	r3, [r3, #6]
   133ac:	2b01      	cmp	r3, #1
   133ae:	d113      	bne.n	133d8 <spi_transceive_buffer_wait+0xac>
			data_to_send |= (tx_data[tx_pos++] << 8);
   133b0:	1c3b      	adds	r3, r7, #0
   133b2:	331e      	adds	r3, #30
   133b4:	881b      	ldrh	r3, [r3, #0]
   133b6:	1c3a      	adds	r2, r7, #0
   133b8:	321e      	adds	r2, #30
   133ba:	1c59      	adds	r1, r3, #1
   133bc:	8011      	strh	r1, [r2, #0]
   133be:	68ba      	ldr	r2, [r7, #8]
   133c0:	18d3      	adds	r3, r2, r3
   133c2:	781b      	ldrb	r3, [r3, #0]
   133c4:	021b      	lsls	r3, r3, #8
   133c6:	b29a      	uxth	r2, r3
   133c8:	1c3b      	adds	r3, r7, #0
   133ca:	3318      	adds	r3, #24
   133cc:	881b      	ldrh	r3, [r3, #0]
   133ce:	4313      	orrs	r3, r2
   133d0:	b29a      	uxth	r2, r3
   133d2:	1c3b      	adds	r3, r7, #0
   133d4:	3318      	adds	r3, #24
   133d6:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   133d8:	68fa      	ldr	r2, [r7, #12]
   133da:	1c3b      	adds	r3, r7, #0
   133dc:	3318      	adds	r3, #24
   133de:	881b      	ldrh	r3, [r3, #0]
   133e0:	1c10      	adds	r0, r2, #0
   133e2:	1c19      	adds	r1, r3, #0
   133e4:	4b35      	ldr	r3, [pc, #212]	; (134bc <spi_transceive_buffer_wait+0x190>)
   133e6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   133e8:	46c0      	nop			; (mov r8, r8)
   133ea:	68fb      	ldr	r3, [r7, #12]
   133ec:	1c18      	adds	r0, r3, #0
   133ee:	4b34      	ldr	r3, [pc, #208]	; (134c0 <spi_transceive_buffer_wait+0x194>)
   133f0:	4798      	blx	r3
   133f2:	1c03      	adds	r3, r0, #0
   133f4:	2201      	movs	r2, #1
   133f6:	4053      	eors	r3, r2
   133f8:	b2db      	uxtb	r3, r3
   133fa:	2b00      	cmp	r3, #0
   133fc:	d1f5      	bne.n	133ea <spi_transceive_buffer_wait+0xbe>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   133fe:	1c3b      	adds	r3, r7, #0
   13400:	3314      	adds	r3, #20
   13402:	2200      	movs	r2, #0
   13404:	801a      	strh	r2, [r3, #0]
		rx_length--;
   13406:	1c3b      	adds	r3, r7, #0
   13408:	331a      	adds	r3, #26
   1340a:	881a      	ldrh	r2, [r3, #0]
   1340c:	1c3b      	adds	r3, r7, #0
   1340e:	331a      	adds	r3, #26
   13410:	3a01      	subs	r2, #1
   13412:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   13414:	1c3c      	adds	r4, r7, #0
   13416:	3417      	adds	r4, #23
   13418:	68fa      	ldr	r2, [r7, #12]
   1341a:	1c3b      	adds	r3, r7, #0
   1341c:	3314      	adds	r3, #20
   1341e:	1c10      	adds	r0, r2, #0
   13420:	1c19      	adds	r1, r3, #0
   13422:	4b28      	ldr	r3, [pc, #160]	; (134c4 <spi_transceive_buffer_wait+0x198>)
   13424:	4798      	blx	r3
   13426:	1c03      	adds	r3, r0, #0
   13428:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   1342a:	1c3b      	adds	r3, r7, #0
   1342c:	3317      	adds	r3, #23
   1342e:	781b      	ldrb	r3, [r3, #0]
   13430:	2b00      	cmp	r3, #0
   13432:	d003      	beq.n	1343c <spi_transceive_buffer_wait+0x110>
			/* Overflow, abort */
			return retval;
   13434:	1c3b      	adds	r3, r7, #0
   13436:	3317      	adds	r3, #23
   13438:	781b      	ldrb	r3, [r3, #0]
   1343a:	e039      	b.n	134b0 <spi_transceive_buffer_wait+0x184>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   1343c:	1c3b      	adds	r3, r7, #0
   1343e:	331c      	adds	r3, #28
   13440:	881b      	ldrh	r3, [r3, #0]
   13442:	1c3a      	adds	r2, r7, #0
   13444:	321c      	adds	r2, #28
   13446:	1c59      	adds	r1, r3, #1
   13448:	8011      	strh	r1, [r2, #0]
   1344a:	687a      	ldr	r2, [r7, #4]
   1344c:	18d3      	adds	r3, r2, r3
   1344e:	1c3a      	adds	r2, r7, #0
   13450:	3214      	adds	r2, #20
   13452:	8812      	ldrh	r2, [r2, #0]
   13454:	b2d2      	uxtb	r2, r2
   13456:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13458:	68fb      	ldr	r3, [r7, #12]
   1345a:	799b      	ldrb	r3, [r3, #6]
   1345c:	2b01      	cmp	r3, #1
   1345e:	d10f      	bne.n	13480 <spi_transceive_buffer_wait+0x154>
			rx_data[rx_pos++] = (received_data >> 8);
   13460:	1c3b      	adds	r3, r7, #0
   13462:	331c      	adds	r3, #28
   13464:	881b      	ldrh	r3, [r3, #0]
   13466:	1c3a      	adds	r2, r7, #0
   13468:	321c      	adds	r2, #28
   1346a:	1c59      	adds	r1, r3, #1
   1346c:	8011      	strh	r1, [r2, #0]
   1346e:	687a      	ldr	r2, [r7, #4]
   13470:	18d3      	adds	r3, r2, r3
   13472:	1c3a      	adds	r2, r7, #0
   13474:	3214      	adds	r2, #20
   13476:	8812      	ldrh	r2, [r2, #0]
   13478:	0a12      	lsrs	r2, r2, #8
   1347a:	b292      	uxth	r2, r2
   1347c:	b2d2      	uxtb	r2, r2
   1347e:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
   13480:	1cbb      	adds	r3, r7, #2
   13482:	881b      	ldrh	r3, [r3, #0]
   13484:	1cba      	adds	r2, r7, #2
   13486:	1e59      	subs	r1, r3, #1
   13488:	8011      	strh	r1, [r2, #0]
   1348a:	2b00      	cmp	r3, #0
   1348c:	d000      	beq.n	13490 <spi_transceive_buffer_wait+0x164>
   1348e:	e773      	b.n	13378 <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   13490:	68fb      	ldr	r3, [r7, #12]
   13492:	795b      	ldrb	r3, [r3, #5]
   13494:	2b01      	cmp	r3, #1
   13496:	d10a      	bne.n	134ae <spi_transceive_buffer_wait+0x182>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   13498:	46c0      	nop			; (mov r8, r8)
   1349a:	68fb      	ldr	r3, [r7, #12]
   1349c:	1c18      	adds	r0, r3, #0
   1349e:	4b0a      	ldr	r3, [pc, #40]	; (134c8 <spi_transceive_buffer_wait+0x19c>)
   134a0:	4798      	blx	r3
   134a2:	1c03      	adds	r3, r0, #0
   134a4:	2201      	movs	r2, #1
   134a6:	4053      	eors	r3, r2
   134a8:	b2db      	uxtb	r3, r3
   134aa:	2b00      	cmp	r3, #0
   134ac:	d1f5      	bne.n	1349a <spi_transceive_buffer_wait+0x16e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
   134ae:	2300      	movs	r3, #0
}
   134b0:	1c18      	adds	r0, r3, #0
   134b2:	46bd      	mov	sp, r7
   134b4:	b009      	add	sp, #36	; 0x24
   134b6:	bd90      	pop	{r4, r7, pc}
   134b8:	00012ca5 	.word	0x00012ca5
   134bc:	00012cf5 	.word	0x00012cf5
   134c0:	00012ccd 	.word	0x00012ccd
   134c4:	00012d3d 	.word	0x00012d3d
   134c8:	00012c7d 	.word	0x00012c7d

000134cc <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   134cc:	b580      	push	{r7, lr}
   134ce:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   134d0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   134d4:	4b02      	ldr	r3, [pc, #8]	; (134e0 <NVIC_SystemReset+0x14>)
   134d6:	4a03      	ldr	r2, [pc, #12]	; (134e4 <NVIC_SystemReset+0x18>)
   134d8:	60da      	str	r2, [r3, #12]
   134da:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   134de:	e7fe      	b.n	134de <NVIC_SystemReset+0x12>
   134e0:	e000ed00 	.word	0xe000ed00
   134e4:	05fa0004 	.word	0x05fa0004

000134e8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   134e8:	b580      	push	{r7, lr}
   134ea:	b082      	sub	sp, #8
   134ec:	af00      	add	r7, sp, #0
   134ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   134f0:	687b      	ldr	r3, [r7, #4]
   134f2:	2201      	movs	r2, #1
   134f4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   134f6:	687b      	ldr	r3, [r7, #4]
   134f8:	2200      	movs	r2, #0
   134fa:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   134fc:	687b      	ldr	r3, [r7, #4]
   134fe:	2206      	movs	r2, #6
   13500:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	2200      	movs	r2, #0
   13506:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   13508:	687b      	ldr	r3, [r7, #4]
   1350a:	2200      	movs	r2, #0
   1350c:	725a      	strb	r2, [r3, #9]
}
   1350e:	46bd      	mov	sp, r7
   13510:	b002      	add	sp, #8
   13512:	bd80      	pop	{r7, pc}

00013514 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   13514:	b580      	push	{r7, lr}
   13516:	b082      	sub	sp, #8
   13518:	af00      	add	r7, sp, #0
   1351a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1351c:	687b      	ldr	r3, [r7, #4]
   1351e:	2200      	movs	r2, #0
   13520:	701a      	strb	r2, [r3, #0]
}
   13522:	46bd      	mov	sp, r7
   13524:	b002      	add	sp, #8
   13526:	bd80      	pop	{r7, pc}

00013528 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   13528:	b580      	push	{r7, lr}
   1352a:	b082      	sub	sp, #8
   1352c:	af00      	add	r7, sp, #0
   1352e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   13530:	687b      	ldr	r3, [r7, #4]
   13532:	2203      	movs	r2, #3
   13534:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   13536:	687b      	ldr	r3, [r7, #4]
   13538:	2200      	movs	r2, #0
   1353a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	2201      	movs	r2, #1
   13540:	709a      	strb	r2, [r3, #2]
}
   13542:	46bd      	mov	sp, r7
   13544:	b002      	add	sp, #8
   13546:	bd80      	pop	{r7, pc}

00013548 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   13548:	b580      	push	{r7, lr}
   1354a:	b082      	sub	sp, #8
   1354c:	af00      	add	r7, sp, #0
   1354e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	2200      	movs	r2, #0
   13554:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   13556:	687b      	ldr	r3, [r7, #4]
   13558:	2200      	movs	r2, #0
   1355a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1355c:	687b      	ldr	r3, [r7, #4]
   1355e:	2200      	movs	r2, #0
   13560:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13562:	687b      	ldr	r3, [r7, #4]
   13564:	2200      	movs	r2, #0
   13566:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   13568:	687b      	ldr	r3, [r7, #4]
   1356a:	2200      	movs	r2, #0
   1356c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	2201      	movs	r2, #1
   13572:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   13574:	687b      	ldr	r3, [r7, #4]
   13576:	2207      	movs	r2, #7
   13578:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1357a:	687b      	ldr	r3, [r7, #4]
   1357c:	223f      	movs	r2, #63	; 0x3f
   1357e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   13580:	687b      	ldr	r3, [r7, #4]
   13582:	2201      	movs	r2, #1
   13584:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   13586:	687b      	ldr	r3, [r7, #4]
   13588:	2201      	movs	r2, #1
   1358a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   1358c:	687b      	ldr	r3, [r7, #4]
   1358e:	2206      	movs	r2, #6
   13590:	821a      	strh	r2, [r3, #16]
}
   13592:	46bd      	mov	sp, r7
   13594:	b002      	add	sp, #8
   13596:	bd80      	pop	{r7, pc}

00013598 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   13598:	b580      	push	{r7, lr}
   1359a:	b082      	sub	sp, #8
   1359c:	af00      	add	r7, sp, #0
   1359e:	1c02      	adds	r2, r0, #0
   135a0:	1dfb      	adds	r3, r7, #7
   135a2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
   135a4:	4b03      	ldr	r3, [pc, #12]	; (135b4 <system_cpu_clock_set_divider+0x1c>)
   135a6:	1dfa      	adds	r2, r7, #7
   135a8:	7812      	ldrb	r2, [r2, #0]
   135aa:	721a      	strb	r2, [r3, #8]
}
   135ac:	46bd      	mov	sp, r7
   135ae:	b002      	add	sp, #8
   135b0:	bd80      	pop	{r7, pc}
   135b2:	46c0      	nop			; (mov r8, r8)
   135b4:	40000400 	.word	0x40000400

000135b8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   135b8:	b580      	push	{r7, lr}
   135ba:	b082      	sub	sp, #8
   135bc:	af00      	add	r7, sp, #0
   135be:	1c0a      	adds	r2, r1, #0
   135c0:	1dfb      	adds	r3, r7, #7
   135c2:	1c01      	adds	r1, r0, #0
   135c4:	7019      	strb	r1, [r3, #0]
   135c6:	1dbb      	adds	r3, r7, #6
   135c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   135ca:	1dfb      	adds	r3, r7, #7
   135cc:	781b      	ldrb	r3, [r3, #0]
   135ce:	2b01      	cmp	r3, #1
   135d0:	d008      	beq.n	135e4 <system_apb_clock_set_divider+0x2c>
   135d2:	2b02      	cmp	r3, #2
   135d4:	d00b      	beq.n	135ee <system_apb_clock_set_divider+0x36>
   135d6:	2b00      	cmp	r3, #0
   135d8:	d10e      	bne.n	135f8 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   135da:	4b0b      	ldr	r3, [pc, #44]	; (13608 <system_apb_clock_set_divider+0x50>)
   135dc:	1dba      	adds	r2, r7, #6
   135de:	7812      	ldrb	r2, [r2, #0]
   135e0:	725a      	strb	r2, [r3, #9]
			break;
   135e2:	e00b      	b.n	135fc <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   135e4:	4b08      	ldr	r3, [pc, #32]	; (13608 <system_apb_clock_set_divider+0x50>)
   135e6:	1dba      	adds	r2, r7, #6
   135e8:	7812      	ldrb	r2, [r2, #0]
   135ea:	729a      	strb	r2, [r3, #10]
			break;
   135ec:	e006      	b.n	135fc <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   135ee:	4b06      	ldr	r3, [pc, #24]	; (13608 <system_apb_clock_set_divider+0x50>)
   135f0:	1dba      	adds	r2, r7, #6
   135f2:	7812      	ldrb	r2, [r2, #0]
   135f4:	72da      	strb	r2, [r3, #11]
			break;
   135f6:	e001      	b.n	135fc <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   135f8:	2317      	movs	r3, #23
   135fa:	e000      	b.n	135fe <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
   135fc:	2300      	movs	r3, #0
}
   135fe:	1c18      	adds	r0, r3, #0
   13600:	46bd      	mov	sp, r7
   13602:	b002      	add	sp, #8
   13604:	bd80      	pop	{r7, pc}
   13606:	46c0      	nop			; (mov r8, r8)
   13608:	40000400 	.word	0x40000400

0001360c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   1360c:	b580      	push	{r7, lr}
   1360e:	b082      	sub	sp, #8
   13610:	af00      	add	r7, sp, #0
   13612:	1c02      	adds	r2, r0, #0
   13614:	1dfb      	adds	r3, r7, #7
   13616:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   13618:	4b08      	ldr	r3, [pc, #32]	; (1363c <system_flash_set_waitstates+0x30>)
   1361a:	1dfa      	adds	r2, r7, #7
   1361c:	7811      	ldrb	r1, [r2, #0]
   1361e:	220f      	movs	r2, #15
   13620:	400a      	ands	r2, r1
   13622:	b2d1      	uxtb	r1, r2
   13624:	220f      	movs	r2, #15
   13626:	400a      	ands	r2, r1
   13628:	0052      	lsls	r2, r2, #1
   1362a:	6859      	ldr	r1, [r3, #4]
   1362c:	201e      	movs	r0, #30
   1362e:	4381      	bics	r1, r0
   13630:	430a      	orrs	r2, r1
   13632:	605a      	str	r2, [r3, #4]
}
   13634:	46bd      	mov	sp, r7
   13636:	b002      	add	sp, #8
   13638:	bd80      	pop	{r7, pc}
   1363a:	46c0      	nop			; (mov r8, r8)
   1363c:	41004000 	.word	0x41004000

00013640 <system_get_device_id>:
 * Retrieves the signature of the current device.
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
   13640:	b580      	push	{r7, lr}
   13642:	af00      	add	r7, sp, #0
	return DSU->DID.reg;
   13644:	4b02      	ldr	r3, [pc, #8]	; (13650 <system_get_device_id+0x10>)
   13646:	699b      	ldr	r3, [r3, #24]
}
   13648:	1c18      	adds	r0, r3, #0
   1364a:	46bd      	mov	sp, r7
   1364c:	bd80      	pop	{r7, pc}
   1364e:	46c0      	nop			; (mov r8, r8)
   13650:	41002000 	.word	0x41002000

00013654 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
   13654:	b580      	push	{r7, lr}
   13656:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   13658:	46c0      	nop			; (mov r8, r8)
   1365a:	4b03      	ldr	r3, [pc, #12]	; (13668 <_system_dfll_wait_for_sync+0x14>)
   1365c:	68da      	ldr	r2, [r3, #12]
   1365e:	2310      	movs	r3, #16
   13660:	4013      	ands	r3, r2
   13662:	d0fa      	beq.n	1365a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   13664:	46bd      	mov	sp, r7
   13666:	bd80      	pop	{r7, pc}
   13668:	40000800 	.word	0x40000800

0001366c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   1366c:	b580      	push	{r7, lr}
   1366e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
   13670:	4a0c      	ldr	r2, [pc, #48]	; (136a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13672:	4b0d      	ldr	r3, [pc, #52]	; (136a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13674:	681b      	ldr	r3, [r3, #0]
   13676:	b29b      	uxth	r3, r3
   13678:	2180      	movs	r1, #128	; 0x80
   1367a:	438b      	bics	r3, r1
   1367c:	b29b      	uxth	r3, r3
   1367e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
   13680:	4b0a      	ldr	r3, [pc, #40]	; (136ac <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   13682:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   13684:	4b07      	ldr	r3, [pc, #28]	; (136a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13686:	4a08      	ldr	r2, [pc, #32]	; (136a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13688:	6892      	ldr	r2, [r2, #8]
   1368a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1368c:	4b05      	ldr	r3, [pc, #20]	; (136a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1368e:	4a06      	ldr	r2, [pc, #24]	; (136a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13690:	6852      	ldr	r2, [r2, #4]
   13692:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   13694:	4a03      	ldr	r2, [pc, #12]	; (136a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   13696:	4b04      	ldr	r3, [pc, #16]	; (136a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   13698:	681b      	ldr	r3, [r3, #0]
   1369a:	b29b      	uxth	r3, r3
   1369c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1369e:	46bd      	mov	sp, r7
   136a0:	bd80      	pop	{r7, pc}
   136a2:	46c0      	nop			; (mov r8, r8)
   136a4:	40000800 	.word	0x40000800
   136a8:	20000524 	.word	0x20000524
   136ac:	00013655 	.word	0x00013655

000136b0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   136b0:	b580      	push	{r7, lr}
   136b2:	b082      	sub	sp, #8
   136b4:	af00      	add	r7, sp, #0
   136b6:	1c02      	adds	r2, r0, #0
   136b8:	1dfb      	adds	r3, r7, #7
   136ba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   136bc:	1dfb      	adds	r3, r7, #7
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	2b07      	cmp	r3, #7
   136c2:	d836      	bhi.n	13732 <system_clock_source_get_hz+0x82>
   136c4:	009a      	lsls	r2, r3, #2
   136c6:	4b1d      	ldr	r3, [pc, #116]	; (1373c <system_clock_source_get_hz+0x8c>)
   136c8:	18d3      	adds	r3, r2, r3
   136ca:	681b      	ldr	r3, [r3, #0]
   136cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   136ce:	4b1c      	ldr	r3, [pc, #112]	; (13740 <system_clock_source_get_hz+0x90>)
   136d0:	68db      	ldr	r3, [r3, #12]
   136d2:	e02f      	b.n	13734 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   136d4:	4b1b      	ldr	r3, [pc, #108]	; (13744 <system_clock_source_get_hz+0x94>)
   136d6:	6a1b      	ldr	r3, [r3, #32]
   136d8:	0a1b      	lsrs	r3, r3, #8
   136da:	1c1a      	adds	r2, r3, #0
   136dc:	2303      	movs	r3, #3
   136de:	4013      	ands	r3, r2
   136e0:	b2db      	uxtb	r3, r3
   136e2:	4a19      	ldr	r2, [pc, #100]	; (13748 <system_clock_source_get_hz+0x98>)
   136e4:	1c11      	adds	r1, r2, #0
   136e6:	40d9      	lsrs	r1, r3
   136e8:	1c0b      	adds	r3, r1, #0
   136ea:	e023      	b.n	13734 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   136ec:	2380      	movs	r3, #128	; 0x80
   136ee:	021b      	lsls	r3, r3, #8
   136f0:	e020      	b.n	13734 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   136f2:	2380      	movs	r3, #128	; 0x80
   136f4:	021b      	lsls	r3, r3, #8
   136f6:	e01d      	b.n	13734 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   136f8:	4b11      	ldr	r3, [pc, #68]	; (13740 <system_clock_source_get_hz+0x90>)
   136fa:	691b      	ldr	r3, [r3, #16]
   136fc:	e01a      	b.n	13734 <system_clock_source_get_hz+0x84>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   136fe:	4b10      	ldr	r3, [pc, #64]	; (13740 <system_clock_source_get_hz+0x90>)
   13700:	681a      	ldr	r2, [r3, #0]
   13702:	2302      	movs	r3, #2
   13704:	4013      	ands	r3, r2
   13706:	d101      	bne.n	1370c <system_clock_source_get_hz+0x5c>
			return 0;
   13708:	2300      	movs	r3, #0
   1370a:	e013      	b.n	13734 <system_clock_source_get_hz+0x84>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1370c:	4b0f      	ldr	r3, [pc, #60]	; (1374c <system_clock_source_get_hz+0x9c>)
   1370e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   13710:	4b0b      	ldr	r3, [pc, #44]	; (13740 <system_clock_source_get_hz+0x90>)
   13712:	681a      	ldr	r2, [r3, #0]
   13714:	2304      	movs	r3, #4
   13716:	4013      	ands	r3, r2
   13718:	d009      	beq.n	1372e <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1371a:	2000      	movs	r0, #0
   1371c:	4b0c      	ldr	r3, [pc, #48]	; (13750 <system_clock_source_get_hz+0xa0>)
   1371e:	4798      	blx	r3
   13720:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
   13722:	4b07      	ldr	r3, [pc, #28]	; (13740 <system_clock_source_get_hz+0x90>)
   13724:	689b      	ldr	r3, [r3, #8]
   13726:	041b      	lsls	r3, r3, #16
   13728:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1372a:	4353      	muls	r3, r2
   1372c:	e002      	b.n	13734 <system_clock_source_get_hz+0x84>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   1372e:	4b09      	ldr	r3, [pc, #36]	; (13754 <system_clock_source_get_hz+0xa4>)
   13730:	e000      	b.n	13734 <system_clock_source_get_hz+0x84>

	default:
		return 0;
   13732:	2300      	movs	r3, #0
	}
}
   13734:	1c18      	adds	r0, r3, #0
   13736:	46bd      	mov	sp, r7
   13738:	b002      	add	sp, #8
   1373a:	bd80      	pop	{r7, pc}
   1373c:	00018550 	.word	0x00018550
   13740:	20000524 	.word	0x20000524
   13744:	40000800 	.word	0x40000800
   13748:	007a1200 	.word	0x007a1200
   1374c:	00013655 	.word	0x00013655
   13750:	000140e1 	.word	0x000140e1
   13754:	02dc6c00 	.word	0x02dc6c00

00013758 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   13758:	b580      	push	{r7, lr}
   1375a:	b084      	sub	sp, #16
   1375c:	af00      	add	r7, sp, #0
   1375e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   13760:	4b16      	ldr	r3, [pc, #88]	; (137bc <system_clock_source_osc8m_set_config+0x64>)
   13762:	6a1b      	ldr	r3, [r3, #32]
   13764:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   13766:	687b      	ldr	r3, [r7, #4]
   13768:	781b      	ldrb	r3, [r3, #0]
   1376a:	1c1a      	adds	r2, r3, #0
   1376c:	2303      	movs	r3, #3
   1376e:	4013      	ands	r3, r2
   13770:	b2d9      	uxtb	r1, r3
   13772:	1c3b      	adds	r3, r7, #0
   13774:	330d      	adds	r3, #13
   13776:	2203      	movs	r2, #3
   13778:	400a      	ands	r2, r1
   1377a:	7819      	ldrb	r1, [r3, #0]
   1377c:	2003      	movs	r0, #3
   1377e:	4381      	bics	r1, r0
   13780:	430a      	orrs	r2, r1
   13782:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	789a      	ldrb	r2, [r3, #2]
   13788:	1c3b      	adds	r3, r7, #0
   1378a:	330c      	adds	r3, #12
   1378c:	01d2      	lsls	r2, r2, #7
   1378e:	7818      	ldrb	r0, [r3, #0]
   13790:	217f      	movs	r1, #127	; 0x7f
   13792:	4001      	ands	r1, r0
   13794:	430a      	orrs	r2, r1
   13796:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   13798:	687b      	ldr	r3, [r7, #4]
   1379a:	7859      	ldrb	r1, [r3, #1]
   1379c:	1c3b      	adds	r3, r7, #0
   1379e:	330c      	adds	r3, #12
   137a0:	2201      	movs	r2, #1
   137a2:	400a      	ands	r2, r1
   137a4:	0192      	lsls	r2, r2, #6
   137a6:	7819      	ldrb	r1, [r3, #0]
   137a8:	2040      	movs	r0, #64	; 0x40
   137aa:	4381      	bics	r1, r0
   137ac:	430a      	orrs	r2, r1
   137ae:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   137b0:	4b02      	ldr	r3, [pc, #8]	; (137bc <system_clock_source_osc8m_set_config+0x64>)
   137b2:	68fa      	ldr	r2, [r7, #12]
   137b4:	621a      	str	r2, [r3, #32]
}
   137b6:	46bd      	mov	sp, r7
   137b8:	b004      	add	sp, #16
   137ba:	bd80      	pop	{r7, pc}
   137bc:	40000800 	.word	0x40000800

000137c0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   137c0:	b580      	push	{r7, lr}
   137c2:	b084      	sub	sp, #16
   137c4:	af00      	add	r7, sp, #0
   137c6:	6078      	str	r0, [r7, #4]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();
   137c8:	4b39      	ldr	r3, [pc, #228]	; (138b0 <system_clock_source_dfll_set_config+0xf0>)
   137ca:	4798      	blx	r3
   137cc:	1c03      	adds	r3, r0, #0
   137ce:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   137d0:	68fa      	ldr	r2, [r7, #12]
   137d2:	23f0      	movs	r3, #240	; 0xf0
   137d4:	011b      	lsls	r3, r3, #4
   137d6:	4013      	ands	r3, r2
   137d8:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   137da:	68fb      	ldr	r3, [r7, #12]
   137dc:	0a1b      	lsrs	r3, r3, #8
   137de:	60fb      	str	r3, [r7, #12]

	if (rev < _SYSTEM_MCU_REVISION_D) {
   137e0:	68fb      	ldr	r3, [r7, #12]
   137e2:	2b02      	cmp	r3, #2
   137e4:	d80f      	bhi.n	13806 <system_clock_source_dfll_set_config+0x46>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   137e6:	687b      	ldr	r3, [r7, #4]
   137e8:	7a1b      	ldrb	r3, [r3, #8]
   137ea:	021b      	lsls	r3, r3, #8
   137ec:	1c1a      	adds	r2, r3, #0
   137ee:	23f8      	movs	r3, #248	; 0xf8
   137f0:	015b      	lsls	r3, r3, #5
   137f2:	401a      	ands	r2, r3
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
   137f4:	687b      	ldr	r3, [r7, #4]
   137f6:	895b      	ldrh	r3, [r3, #10]
   137f8:	1c19      	adds	r1, r3, #0
   137fa:	23ff      	movs	r3, #255	; 0xff
   137fc:	400b      	ands	r3, r1
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
   137fe:	431a      	orrs	r2, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
   13800:	4b2c      	ldr	r3, [pc, #176]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   13802:	605a      	str	r2, [r3, #4]
   13804:	e00b      	b.n	1381e <system_clock_source_dfll_set_config+0x5e>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   13806:	687b      	ldr	r3, [r7, #4]
   13808:	7a1b      	ldrb	r3, [r3, #8]
   1380a:	029b      	lsls	r3, r3, #10
   1380c:	041b      	lsls	r3, r3, #16
   1380e:	0c1a      	lsrs	r2, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
   13810:	687b      	ldr	r3, [r7, #4]
   13812:	895b      	ldrh	r3, [r3, #10]
   13814:	059b      	lsls	r3, r3, #22
   13816:	0d9b      	lsrs	r3, r3, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
   13818:	431a      	orrs	r2, r3
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
   1381a:	4b26      	ldr	r3, [pc, #152]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   1381c:	605a      	str	r2, [r3, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1381e:	687b      	ldr	r3, [r7, #4]
   13820:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	79db      	ldrb	r3, [r3, #7]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   13826:	4313      	orrs	r3, r2
   13828:	b2db      	uxtb	r3, r3
   1382a:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   1382c:	687b      	ldr	r3, [r7, #4]
   1382e:	885b      	ldrh	r3, [r3, #2]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   13830:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   13832:	687b      	ldr	r3, [r7, #4]
   13834:	889b      	ldrh	r3, [r3, #4]
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   13836:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   13838:	687b      	ldr	r3, [r7, #4]
   1383a:	785b      	ldrb	r3, [r3, #1]
   1383c:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   1383e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
   13840:	4b1c      	ldr	r3, [pc, #112]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   13842:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   13844:	687b      	ldr	r3, [r7, #4]
   13846:	781b      	ldrb	r3, [r3, #0]
   13848:	2b04      	cmp	r3, #4
   1384a:	d12e      	bne.n	138aa <system_clock_source_dfll_set_config+0xea>

		if(rev < _SYSTEM_MCU_REVISION_D) {
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	2b02      	cmp	r3, #2
   13850:	d814      	bhi.n	1387c <system_clock_source_dfll_set_config+0xbc>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   13852:	687b      	ldr	r3, [r7, #4]
   13854:	7b1b      	ldrb	r3, [r3, #12]
   13856:	061b      	lsls	r3, r3, #24
   13858:	1c1a      	adds	r2, r3, #0
   1385a:	23f8      	movs	r3, #248	; 0xf8
   1385c:	055b      	lsls	r3, r3, #21
   1385e:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	89db      	ldrh	r3, [r3, #14]
   13864:	041b      	lsls	r3, r3, #16
   13866:	1c19      	adds	r1, r3, #0
   13868:	23ff      	movs	r3, #255	; 0xff
   1386a:	041b      	lsls	r3, r3, #16
   1386c:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
   1386e:	431a      	orrs	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13870:	687b      	ldr	r3, [r7, #4]
   13872:	8a1b      	ldrh	r3, [r3, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
   13874:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
   13876:	4b0f      	ldr	r3, [pc, #60]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   13878:	609a      	str	r2, [r3, #8]
   1387a:	e00f      	b.n	1389c <system_clock_source_dfll_set_config+0xdc>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   1387c:	687b      	ldr	r3, [r7, #4]
   1387e:	7b1b      	ldrb	r3, [r3, #12]
   13880:	069b      	lsls	r3, r3, #26
   13882:	1c1a      	adds	r2, r3, #0
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   13884:	687b      	ldr	r3, [r7, #4]
   13886:	89db      	ldrh	r3, [r3, #14]
   13888:	041b      	lsls	r3, r3, #16
   1388a:	1c19      	adds	r1, r3, #0
   1388c:	4b0a      	ldr	r3, [pc, #40]	; (138b8 <system_clock_source_dfll_set_config+0xf8>)
   1388e:	400b      	ands	r3, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
   13890:	431a      	orrs	r2, r3
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13892:	687b      	ldr	r3, [r7, #4]
   13894:	8a1b      	ldrh	r3, [r3, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
   13896:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
   13898:	4b06      	ldr	r3, [pc, #24]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   1389a:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   1389c:	4b05      	ldr	r3, [pc, #20]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   1389e:	681a      	ldr	r2, [r3, #0]
   138a0:	687b      	ldr	r3, [r7, #4]
   138a2:	781b      	ldrb	r3, [r3, #0]
   138a4:	431a      	orrs	r2, r3
   138a6:	4b03      	ldr	r3, [pc, #12]	; (138b4 <system_clock_source_dfll_set_config+0xf4>)
   138a8:	601a      	str	r2, [r3, #0]
	}
}
   138aa:	46bd      	mov	sp, r7
   138ac:	b004      	add	sp, #16
   138ae:	bd80      	pop	{r7, pc}
   138b0:	00013641 	.word	0x00013641
   138b4:	20000524 	.word	0x20000524
   138b8:	03ff0000 	.word	0x03ff0000

000138bc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   138bc:	b580      	push	{r7, lr}
   138be:	b082      	sub	sp, #8
   138c0:	af00      	add	r7, sp, #0
   138c2:	1c02      	adds	r2, r0, #0
   138c4:	1dfb      	adds	r3, r7, #7
   138c6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   138c8:	1dfb      	adds	r3, r7, #7
   138ca:	781b      	ldrb	r3, [r3, #0]
   138cc:	2b07      	cmp	r3, #7
   138ce:	d830      	bhi.n	13932 <system_clock_source_enable+0x76>
   138d0:	009a      	lsls	r2, r3, #2
   138d2:	4b1b      	ldr	r3, [pc, #108]	; (13940 <system_clock_source_enable+0x84>)
   138d4:	18d3      	adds	r3, r2, r3
   138d6:	681b      	ldr	r3, [r3, #0]
   138d8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   138da:	4b1a      	ldr	r3, [pc, #104]	; (13944 <system_clock_source_enable+0x88>)
   138dc:	4a19      	ldr	r2, [pc, #100]	; (13944 <system_clock_source_enable+0x88>)
   138de:	6a12      	ldr	r2, [r2, #32]
   138e0:	2102      	movs	r1, #2
   138e2:	430a      	orrs	r2, r1
   138e4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   138e6:	2300      	movs	r3, #0
   138e8:	e026      	b.n	13938 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   138ea:	4b16      	ldr	r3, [pc, #88]	; (13944 <system_clock_source_enable+0x88>)
   138ec:	4a15      	ldr	r2, [pc, #84]	; (13944 <system_clock_source_enable+0x88>)
   138ee:	6992      	ldr	r2, [r2, #24]
   138f0:	2102      	movs	r1, #2
   138f2:	430a      	orrs	r2, r1
   138f4:	619a      	str	r2, [r3, #24]
		break;
   138f6:	e01e      	b.n	13936 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   138f8:	4b12      	ldr	r3, [pc, #72]	; (13944 <system_clock_source_enable+0x88>)
   138fa:	4a12      	ldr	r2, [pc, #72]	; (13944 <system_clock_source_enable+0x88>)
   138fc:	8a12      	ldrh	r2, [r2, #16]
   138fe:	b292      	uxth	r2, r2
   13900:	2102      	movs	r1, #2
   13902:	430a      	orrs	r2, r1
   13904:	b292      	uxth	r2, r2
   13906:	821a      	strh	r2, [r3, #16]
		break;
   13908:	e015      	b.n	13936 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1390a:	4b0e      	ldr	r3, [pc, #56]	; (13944 <system_clock_source_enable+0x88>)
   1390c:	4a0d      	ldr	r2, [pc, #52]	; (13944 <system_clock_source_enable+0x88>)
   1390e:	8a92      	ldrh	r2, [r2, #20]
   13910:	b292      	uxth	r2, r2
   13912:	2102      	movs	r1, #2
   13914:	430a      	orrs	r2, r1
   13916:	b292      	uxth	r2, r2
   13918:	829a      	strh	r2, [r3, #20]
		break;
   1391a:	e00c      	b.n	13936 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1391c:	4b0a      	ldr	r3, [pc, #40]	; (13948 <system_clock_source_enable+0x8c>)
   1391e:	681b      	ldr	r3, [r3, #0]
   13920:	2202      	movs	r2, #2
   13922:	431a      	orrs	r2, r3
   13924:	4b08      	ldr	r3, [pc, #32]	; (13948 <system_clock_source_enable+0x8c>)
   13926:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   13928:	4b08      	ldr	r3, [pc, #32]	; (1394c <system_clock_source_enable+0x90>)
   1392a:	4798      	blx	r3
		break;
   1392c:	e003      	b.n	13936 <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   1392e:	2300      	movs	r3, #0
   13930:	e002      	b.n	13938 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   13932:	2317      	movs	r3, #23
   13934:	e000      	b.n	13938 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
   13936:	2300      	movs	r3, #0
}
   13938:	1c18      	adds	r0, r3, #0
   1393a:	46bd      	mov	sp, r7
   1393c:	b002      	add	sp, #8
   1393e:	bd80      	pop	{r7, pc}
   13940:	00018570 	.word	0x00018570
   13944:	40000800 	.word	0x40000800
   13948:	20000524 	.word	0x20000524
   1394c:	0001366d 	.word	0x0001366d

00013950 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   13950:	b580      	push	{r7, lr}
   13952:	b084      	sub	sp, #16
   13954:	af00      	add	r7, sp, #0
   13956:	1c02      	adds	r2, r0, #0
   13958:	1dfb      	adds	r3, r7, #7
   1395a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   1395c:	2300      	movs	r3, #0
   1395e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   13960:	1dfb      	adds	r3, r7, #7
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	2b07      	cmp	r3, #7
   13966:	d815      	bhi.n	13994 <system_clock_source_is_ready+0x44>
   13968:	009a      	lsls	r2, r3, #2
   1396a:	4b12      	ldr	r3, [pc, #72]	; (139b4 <system_clock_source_is_ready+0x64>)
   1396c:	18d3      	adds	r3, r2, r3
   1396e:	681b      	ldr	r3, [r3, #0]
   13970:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   13972:	2308      	movs	r3, #8
   13974:	60fb      	str	r3, [r7, #12]
		break;
   13976:	e00f      	b.n	13998 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   13978:	2304      	movs	r3, #4
   1397a:	60fb      	str	r3, [r7, #12]
		break;
   1397c:	e00c      	b.n	13998 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   1397e:	2301      	movs	r3, #1
   13980:	60fb      	str	r3, [r7, #12]
		break;
   13982:	e009      	b.n	13998 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   13984:	2302      	movs	r3, #2
   13986:	60fb      	str	r3, [r7, #12]
		break;
   13988:	e006      	b.n	13998 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   1398a:	23d0      	movs	r3, #208	; 0xd0
   1398c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   1398e:	e003      	b.n	13998 <system_clock_source_is_ready+0x48>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   13990:	2301      	movs	r3, #1
   13992:	e00a      	b.n	139aa <system_clock_source_is_ready+0x5a>

	default:
		return false;
   13994:	2300      	movs	r3, #0
   13996:	e008      	b.n	139aa <system_clock_source_is_ready+0x5a>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   13998:	4b07      	ldr	r3, [pc, #28]	; (139b8 <system_clock_source_is_ready+0x68>)
   1399a:	68db      	ldr	r3, [r3, #12]
   1399c:	68fa      	ldr	r2, [r7, #12]
   1399e:	401a      	ands	r2, r3
   139a0:	68fb      	ldr	r3, [r7, #12]
   139a2:	1ad3      	subs	r3, r2, r3
   139a4:	425a      	negs	r2, r3
   139a6:	4153      	adcs	r3, r2
   139a8:	b2db      	uxtb	r3, r3
}
   139aa:	1c18      	adds	r0, r3, #0
   139ac:	46bd      	mov	sp, r7
   139ae:	b004      	add	sp, #16
   139b0:	bd80      	pop	{r7, pc}
   139b2:	46c0      	nop			; (mov r8, r8)
   139b4:	00018590 	.word	0x00018590
   139b8:	40000800 	.word	0x40000800

000139bc <system_clock_init>:
 */
static uint8_t tries; 
uint32_t clockAttempts = 0;
uint8_t ButtonCheckPower(void);
void system_clock_init(void)
{
   139bc:	b580      	push	{r7, lr}
   139be:	b0a2      	sub	sp, #136	; 0x88
   139c0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
   139c2:	4b88      	ldr	r3, [pc, #544]	; (13be4 <system_clock_init+0x228>)
   139c4:	4a88      	ldr	r2, [pc, #544]	; (13be8 <system_clock_init+0x22c>)
   139c6:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_BOD12DET | SYSCTRL_INTFLAG_BOD33DET |
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   139c8:	2003      	movs	r0, #3
   139ca:	4b88      	ldr	r3, [pc, #544]	; (13bec <system_clock_init+0x230>)
   139cc:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   139ce:	1c3b      	adds	r3, r7, #0
   139d0:	3374      	adds	r3, #116	; 0x74
   139d2:	1c18      	adds	r0, r3, #0
   139d4:	4b86      	ldr	r3, [pc, #536]	; (13bf0 <system_clock_init+0x234>)
   139d6:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   139d8:	1c3b      	adds	r3, r7, #0
   139da:	3374      	adds	r3, #116	; 0x74
   139dc:	2204      	movs	r2, #4
   139de:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   139e0:	1c3b      	adds	r3, r7, #0
   139e2:	3374      	adds	r3, #116	; 0x74
   139e4:	2200      	movs	r2, #0
   139e6:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   139e8:	1c3b      	adds	r3, r7, #0
   139ea:	3374      	adds	r3, #116	; 0x74
   139ec:	2200      	movs	r2, #0
   139ee:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   139f0:	1c3b      	adds	r3, r7, #0
   139f2:	3374      	adds	r3, #116	; 0x74
   139f4:	2200      	movs	r2, #0
   139f6:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   139f8:	1c3b      	adds	r3, r7, #0
   139fa:	3374      	adds	r3, #116	; 0x74
   139fc:	2200      	movs	r2, #0
   139fe:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   13a00:	1c3b      	adds	r3, r7, #0
   13a02:	3374      	adds	r3, #116	; 0x74
   13a04:	2200      	movs	r2, #0
   13a06:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   13a08:	1c3b      	adds	r3, r7, #0
   13a0a:	3374      	adds	r3, #116	; 0x74
   13a0c:	2206      	movs	r2, #6
   13a0e:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   13a10:	1c3b      	adds	r3, r7, #0
   13a12:	3374      	adds	r3, #116	; 0x74
   13a14:	2207      	movs	r2, #7
   13a16:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   13a18:	1c3b      	adds	r3, r7, #0
   13a1a:	3374      	adds	r3, #116	; 0x74
   13a1c:	223f      	movs	r2, #63	; 0x3f
   13a1e:	81da      	strh	r2, [r3, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
   13a20:	1c3b      	adds	r3, r7, #0
   13a22:	3374      	adds	r3, #116	; 0x74
   13a24:	1c18      	adds	r0, r3, #0
   13a26:	4b73      	ldr	r3, [pc, #460]	; (13bf4 <system_clock_init+0x238>)
   13a28:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   13a2a:	1c3b      	adds	r3, r7, #0
   13a2c:	3370      	adds	r3, #112	; 0x70
   13a2e:	1c18      	adds	r0, r3, #0
   13a30:	4b71      	ldr	r3, [pc, #452]	; (13bf8 <system_clock_init+0x23c>)
   13a32:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   13a34:	1c3b      	adds	r3, r7, #0
   13a36:	3370      	adds	r3, #112	; 0x70
   13a38:	2200      	movs	r2, #0
   13a3a:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   13a3c:	1c3b      	adds	r3, r7, #0
   13a3e:	3370      	adds	r3, #112	; 0x70
   13a40:	2201      	movs	r2, #1
   13a42:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   13a44:	1c3b      	adds	r3, r7, #0
   13a46:	3370      	adds	r3, #112	; 0x70
   13a48:	2200      	movs	r2, #0
   13a4a:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   13a4c:	1c3b      	adds	r3, r7, #0
   13a4e:	3370      	adds	r3, #112	; 0x70
   13a50:	1c18      	adds	r0, r3, #0
   13a52:	4b6a      	ldr	r3, [pc, #424]	; (13bfc <system_clock_init+0x240>)
   13a54:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   13a56:	2006      	movs	r0, #6
   13a58:	4b69      	ldr	r3, [pc, #420]	; (13c00 <system_clock_init+0x244>)
   13a5a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   13a5c:	4b69      	ldr	r3, [pc, #420]	; (13c04 <system_clock_init+0x248>)
   13a5e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   13a60:	1c3b      	adds	r3, r7, #0
   13a62:	3358      	adds	r3, #88	; 0x58
   13a64:	1c18      	adds	r0, r3, #0
   13a66:	4b68      	ldr	r3, [pc, #416]	; (13c08 <system_clock_init+0x24c>)
   13a68:	4798      	blx	r3
   13a6a:	1c3b      	adds	r3, r7, #0
   13a6c:	3358      	adds	r3, #88	; 0x58
   13a6e:	2206      	movs	r2, #6
   13a70:	701a      	strb	r2, [r3, #0]
   13a72:	1c3b      	adds	r3, r7, #0
   13a74:	3358      	adds	r3, #88	; 0x58
   13a76:	2201      	movs	r2, #1
   13a78:	605a      	str	r2, [r3, #4]
   13a7a:	1c3b      	adds	r3, r7, #0
   13a7c:	3358      	adds	r3, #88	; 0x58
   13a7e:	2200      	movs	r2, #0
   13a80:	721a      	strb	r2, [r3, #8]
   13a82:	1c3b      	adds	r3, r7, #0
   13a84:	3358      	adds	r3, #88	; 0x58
   13a86:	2200      	movs	r2, #0
   13a88:	725a      	strb	r2, [r3, #9]
   13a8a:	1c3b      	adds	r3, r7, #0
   13a8c:	3358      	adds	r3, #88	; 0x58
   13a8e:	2001      	movs	r0, #1
   13a90:	1c19      	adds	r1, r3, #0
   13a92:	4b5e      	ldr	r3, [pc, #376]	; (13c0c <system_clock_init+0x250>)
   13a94:	4798      	blx	r3
   13a96:	2001      	movs	r0, #1
   13a98:	4b5d      	ldr	r3, [pc, #372]	; (13c10 <system_clock_init+0x254>)
   13a9a:	4798      	blx	r3
   13a9c:	1c3b      	adds	r3, r7, #0
   13a9e:	3340      	adds	r3, #64	; 0x40
   13aa0:	1c18      	adds	r0, r3, #0
   13aa2:	4b59      	ldr	r3, [pc, #356]	; (13c08 <system_clock_init+0x24c>)
   13aa4:	4798      	blx	r3
   13aa6:	1c3b      	adds	r3, r7, #0
   13aa8:	3340      	adds	r3, #64	; 0x40
   13aaa:	2206      	movs	r2, #6
   13aac:	701a      	strb	r2, [r3, #0]
   13aae:	1c3b      	adds	r3, r7, #0
   13ab0:	3340      	adds	r3, #64	; 0x40
   13ab2:	2201      	movs	r2, #1
   13ab4:	605a      	str	r2, [r3, #4]
   13ab6:	1c3b      	adds	r3, r7, #0
   13ab8:	3340      	adds	r3, #64	; 0x40
   13aba:	2200      	movs	r2, #0
   13abc:	721a      	strb	r2, [r3, #8]
   13abe:	1c3b      	adds	r3, r7, #0
   13ac0:	3340      	adds	r3, #64	; 0x40
   13ac2:	2200      	movs	r2, #0
   13ac4:	725a      	strb	r2, [r3, #9]
   13ac6:	1c3b      	adds	r3, r7, #0
   13ac8:	3340      	adds	r3, #64	; 0x40
   13aca:	2003      	movs	r0, #3
   13acc:	1c19      	adds	r1, r3, #0
   13ace:	4b4f      	ldr	r3, [pc, #316]	; (13c0c <system_clock_init+0x250>)
   13ad0:	4798      	blx	r3
   13ad2:	2003      	movs	r0, #3
   13ad4:	4b4e      	ldr	r3, [pc, #312]	; (13c10 <system_clock_init+0x254>)
   13ad6:	4798      	blx	r3
   13ad8:	1c3b      	adds	r3, r7, #0
   13ada:	3334      	adds	r3, #52	; 0x34
   13adc:	1c18      	adds	r0, r3, #0
   13ade:	4b4a      	ldr	r3, [pc, #296]	; (13c08 <system_clock_init+0x24c>)
   13ae0:	4798      	blx	r3
   13ae2:	1c3b      	adds	r3, r7, #0
   13ae4:	3334      	adds	r3, #52	; 0x34
   13ae6:	2206      	movs	r2, #6
   13ae8:	701a      	strb	r2, [r3, #0]
   13aea:	1c3b      	adds	r3, r7, #0
   13aec:	3334      	adds	r3, #52	; 0x34
   13aee:	2201      	movs	r2, #1
   13af0:	605a      	str	r2, [r3, #4]
   13af2:	1c3b      	adds	r3, r7, #0
   13af4:	3334      	adds	r3, #52	; 0x34
   13af6:	2200      	movs	r2, #0
   13af8:	721a      	strb	r2, [r3, #8]
   13afa:	1c3b      	adds	r3, r7, #0
   13afc:	3334      	adds	r3, #52	; 0x34
   13afe:	2200      	movs	r2, #0
   13b00:	725a      	strb	r2, [r3, #9]
   13b02:	1c3b      	adds	r3, r7, #0
   13b04:	3334      	adds	r3, #52	; 0x34
   13b06:	2004      	movs	r0, #4
   13b08:	1c19      	adds	r1, r3, #0
   13b0a:	4b40      	ldr	r3, [pc, #256]	; (13c0c <system_clock_init+0x250>)
   13b0c:	4798      	blx	r3
   13b0e:	2004      	movs	r0, #4
   13b10:	4b3f      	ldr	r3, [pc, #252]	; (13c10 <system_clock_init+0x254>)
   13b12:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   13b14:	1c3b      	adds	r3, r7, #0
   13b16:	330c      	adds	r3, #12
   13b18:	1c18      	adds	r0, r3, #0
   13b1a:	4b3e      	ldr	r3, [pc, #248]	; (13c14 <system_clock_init+0x258>)
   13b1c:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   13b1e:	1c3b      	adds	r3, r7, #0
   13b20:	330c      	adds	r3, #12
   13b22:	2201      	movs	r2, #1
   13b24:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   13b26:	1c3b      	adds	r3, r7, #0
   13b28:	330c      	adds	r3, #12
   13b2a:	2000      	movs	r0, #0
   13b2c:	1c19      	adds	r1, r3, #0
   13b2e:	4b3a      	ldr	r3, [pc, #232]	; (13c18 <system_clock_init+0x25c>)
   13b30:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   13b32:	2000      	movs	r0, #0
   13b34:	4b39      	ldr	r3, [pc, #228]	; (13c1c <system_clock_init+0x260>)
   13b36:	4798      	blx	r3
#endif

#if 1 //turn off DFLL
	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   13b38:	2007      	movs	r0, #7
   13b3a:	4b31      	ldr	r3, [pc, #196]	; (13c00 <system_clock_init+0x244>)
   13b3c:	4798      	blx	r3
	//--------------------
	// CLK_FIX
	clockAttempts = 0;
   13b3e:	4b38      	ldr	r3, [pc, #224]	; (13c20 <system_clock_init+0x264>)
   13b40:	2200      	movs	r2, #0
   13b42:	601a      	str	r2, [r3, #0]
	tries++;
   13b44:	4b37      	ldr	r3, [pc, #220]	; (13c24 <system_clock_init+0x268>)
   13b46:	781b      	ldrb	r3, [r3, #0]
   13b48:	3301      	adds	r3, #1
   13b4a:	b2da      	uxtb	r2, r3
   13b4c:	4b35      	ldr	r3, [pc, #212]	; (13c24 <system_clock_init+0x268>)
   13b4e:	701a      	strb	r2, [r3, #0]
#if BRAKEBOARD
	ButtonCheckPower();
   13b50:	4b35      	ldr	r3, [pc, #212]	; (13c28 <system_clock_init+0x26c>)
   13b52:	4798      	blx	r3
#endif	
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL))
   13b54:	e016      	b.n	13b84 <system_clock_init+0x1c8>
	{
		clockAttempts++;
   13b56:	4b32      	ldr	r3, [pc, #200]	; (13c20 <system_clock_init+0x264>)
   13b58:	681b      	ldr	r3, [r3, #0]
   13b5a:	1c5a      	adds	r2, r3, #1
   13b5c:	4b30      	ldr	r3, [pc, #192]	; (13c20 <system_clock_init+0x264>)
   13b5e:	601a      	str	r2, [r3, #0]
		if (clockAttempts == 0)
   13b60:	4b2f      	ldr	r3, [pc, #188]	; (13c20 <system_clock_init+0x264>)
   13b62:	681b      	ldr	r3, [r3, #0]
   13b64:	2b00      	cmp	r3, #0
   13b66:	d102      	bne.n	13b6e <system_clock_init+0x1b2>
		{
			clockAttempts = 0xffff;
   13b68:	4b2d      	ldr	r3, [pc, #180]	; (13c20 <system_clock_init+0x264>)
   13b6a:	4a30      	ldr	r2, [pc, #192]	; (13c2c <system_clock_init+0x270>)
   13b6c:	601a      	str	r2, [r3, #0]
		}
		if (clockAttempts > 0xff)
   13b6e:	4b2c      	ldr	r3, [pc, #176]	; (13c20 <system_clock_init+0x264>)
   13b70:	681b      	ldr	r3, [r3, #0]
   13b72:	2bff      	cmp	r3, #255	; 0xff
   13b74:	d901      	bls.n	13b7a <system_clock_init+0x1be>
		{
			NVIC_SystemReset();	
   13b76:	4b2e      	ldr	r3, [pc, #184]	; (13c30 <system_clock_init+0x274>)
   13b78:	4798      	blx	r3
		}
#if BRAKEBOARD		
		if (ButtonCheckPower()!= 0)
   13b7a:	4b2b      	ldr	r3, [pc, #172]	; (13c28 <system_clock_init+0x26c>)
   13b7c:	4798      	blx	r3
   13b7e:	1c03      	adds	r3, r0, #0
   13b80:	2b00      	cmp	r3, #0
   13b82:	d12b      	bne.n	13bdc <system_clock_init+0x220>
	clockAttempts = 0;
	tries++;
#if BRAKEBOARD
	ButtonCheckPower();
#endif	
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL))
   13b84:	2007      	movs	r0, #7
   13b86:	4b2b      	ldr	r3, [pc, #172]	; (13c34 <system_clock_init+0x278>)
   13b88:	4798      	blx	r3
   13b8a:	1c03      	adds	r3, r0, #0
   13b8c:	2201      	movs	r2, #1
   13b8e:	4053      	eors	r3, r2
   13b90:	b2db      	uxtb	r3, r3
   13b92:	2b00      	cmp	r3, #0
   13b94:	d1df      	bne.n	13b56 <system_clock_init+0x19a>
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif
#endif
	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   13b96:	2000      	movs	r0, #0
   13b98:	4b27      	ldr	r3, [pc, #156]	; (13c38 <system_clock_init+0x27c>)
   13b9a:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   13b9c:	2000      	movs	r0, #0
   13b9e:	2100      	movs	r1, #0
   13ba0:	4b26      	ldr	r3, [pc, #152]	; (13c3c <system_clock_init+0x280>)
   13ba2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   13ba4:	2001      	movs	r0, #1
   13ba6:	2100      	movs	r1, #0
   13ba8:	4b24      	ldr	r3, [pc, #144]	; (13c3c <system_clock_init+0x280>)
   13baa:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   13bac:	1c3b      	adds	r3, r7, #0
   13bae:	1c18      	adds	r0, r3, #0
   13bb0:	4b15      	ldr	r3, [pc, #84]	; (13c08 <system_clock_init+0x24c>)
   13bb2:	4798      	blx	r3
   13bb4:	1c3b      	adds	r3, r7, #0
   13bb6:	2207      	movs	r2, #7
   13bb8:	701a      	strb	r2, [r3, #0]
   13bba:	1c3b      	adds	r3, r7, #0
   13bbc:	2201      	movs	r2, #1
   13bbe:	605a      	str	r2, [r3, #4]
   13bc0:	1c3b      	adds	r3, r7, #0
   13bc2:	2200      	movs	r2, #0
   13bc4:	721a      	strb	r2, [r3, #8]
   13bc6:	1c3b      	adds	r3, r7, #0
   13bc8:	2200      	movs	r2, #0
   13bca:	725a      	strb	r2, [r3, #9]
   13bcc:	1c3b      	adds	r3, r7, #0
   13bce:	2000      	movs	r0, #0
   13bd0:	1c19      	adds	r1, r3, #0
   13bd2:	4b0e      	ldr	r3, [pc, #56]	; (13c0c <system_clock_init+0x250>)
   13bd4:	4798      	blx	r3
   13bd6:	2000      	movs	r0, #0
   13bd8:	4b0d      	ldr	r3, [pc, #52]	; (13c10 <system_clock_init+0x254>)
   13bda:	4798      	blx	r3
#endif
}
   13bdc:	46bd      	mov	sp, r7
   13bde:	b022      	add	sp, #136	; 0x88
   13be0:	bd80      	pop	{r7, pc}
   13be2:	46c0      	nop			; (mov r8, r8)
   13be4:	40000800 	.word	0x40000800
   13be8:	00003610 	.word	0x00003610
   13bec:	0001360d 	.word	0x0001360d
   13bf0:	00013549 	.word	0x00013549
   13bf4:	000137c1 	.word	0x000137c1
   13bf8:	00013529 	.word	0x00013529
   13bfc:	00013759 	.word	0x00013759
   13c00:	000138bd 	.word	0x000138bd
   13c04:	00013ce1 	.word	0x00013ce1
   13c08:	000134e9 	.word	0x000134e9
   13c0c:	00013d11 	.word	0x00013d11
   13c10:	00013e39 	.word	0x00013e39
   13c14:	00013515 	.word	0x00013515
   13c18:	00013f81 	.word	0x00013f81
   13c1c:	00013fc1 	.word	0x00013fc1
   13c20:	2000053c 	.word	0x2000053c
   13c24:	20000538 	.word	0x20000538
   13c28:	0000ba7d 	.word	0x0000ba7d
   13c2c:	0000ffff 	.word	0x0000ffff
   13c30:	000134cd 	.word	0x000134cd
   13c34:	00013951 	.word	0x00013951
   13c38:	00013599 	.word	0x00013599
   13c3c:	000135b9 	.word	0x000135b9

00013c40 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13c40:	b580      	push	{r7, lr}
   13c42:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
   13c44:	4b06      	ldr	r3, [pc, #24]	; (13c60 <system_gclk_is_syncing+0x20>)
   13c46:	785b      	ldrb	r3, [r3, #1]
   13c48:	b2db      	uxtb	r3, r3
   13c4a:	b2db      	uxtb	r3, r3
   13c4c:	b25b      	sxtb	r3, r3
   13c4e:	2b00      	cmp	r3, #0
   13c50:	da01      	bge.n	13c56 <system_gclk_is_syncing+0x16>
		return true;
   13c52:	2301      	movs	r3, #1
   13c54:	e000      	b.n	13c58 <system_gclk_is_syncing+0x18>
	}

	return false;
   13c56:	2300      	movs	r3, #0
}
   13c58:	1c18      	adds	r0, r3, #0
   13c5a:	46bd      	mov	sp, r7
   13c5c:	bd80      	pop	{r7, pc}
   13c5e:	46c0      	nop			; (mov r8, r8)
   13c60:	40000c00 	.word	0x40000c00

00013c64 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13c64:	b580      	push	{r7, lr}
   13c66:	b082      	sub	sp, #8
   13c68:	af00      	add	r7, sp, #0
   13c6a:	1c02      	adds	r2, r0, #0
   13c6c:	6039      	str	r1, [r7, #0]
   13c6e:	1dfb      	adds	r3, r7, #7
   13c70:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13c72:	1dfb      	adds	r3, r7, #7
   13c74:	781b      	ldrb	r3, [r3, #0]
   13c76:	2b01      	cmp	r3, #1
   13c78:	d00a      	beq.n	13c90 <system_apb_clock_set_mask+0x2c>
   13c7a:	2b02      	cmp	r3, #2
   13c7c:	d00f      	beq.n	13c9e <system_apb_clock_set_mask+0x3a>
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d114      	bne.n	13cac <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13c82:	4b0e      	ldr	r3, [pc, #56]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13c84:	4a0d      	ldr	r2, [pc, #52]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13c86:	6991      	ldr	r1, [r2, #24]
   13c88:	683a      	ldr	r2, [r7, #0]
   13c8a:	430a      	orrs	r2, r1
   13c8c:	619a      	str	r2, [r3, #24]
			break;
   13c8e:	e00f      	b.n	13cb0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13c90:	4b0a      	ldr	r3, [pc, #40]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13c92:	4a0a      	ldr	r2, [pc, #40]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13c94:	69d1      	ldr	r1, [r2, #28]
   13c96:	683a      	ldr	r2, [r7, #0]
   13c98:	430a      	orrs	r2, r1
   13c9a:	61da      	str	r2, [r3, #28]
			break;
   13c9c:	e008      	b.n	13cb0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13c9e:	4b07      	ldr	r3, [pc, #28]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13ca0:	4a06      	ldr	r2, [pc, #24]	; (13cbc <system_apb_clock_set_mask+0x58>)
   13ca2:	6a11      	ldr	r1, [r2, #32]
   13ca4:	683a      	ldr	r2, [r7, #0]
   13ca6:	430a      	orrs	r2, r1
   13ca8:	621a      	str	r2, [r3, #32]
			break;
   13caa:	e001      	b.n	13cb0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13cac:	2317      	movs	r3, #23
   13cae:	e000      	b.n	13cb2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13cb0:	2300      	movs	r3, #0
}
   13cb2:	1c18      	adds	r0, r3, #0
   13cb4:	46bd      	mov	sp, r7
   13cb6:	b002      	add	sp, #8
   13cb8:	bd80      	pop	{r7, pc}
   13cba:	46c0      	nop			; (mov r8, r8)
   13cbc:	40000400 	.word	0x40000400

00013cc0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   13cc0:	b580      	push	{r7, lr}
   13cc2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13cc4:	4b01      	ldr	r3, [pc, #4]	; (13ccc <system_interrupt_enter_critical_section+0xc>)
   13cc6:	4798      	blx	r3
}
   13cc8:	46bd      	mov	sp, r7
   13cca:	bd80      	pop	{r7, pc}
   13ccc:	00011c49 	.word	0x00011c49

00013cd0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   13cd0:	b580      	push	{r7, lr}
   13cd2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13cd4:	4b01      	ldr	r3, [pc, #4]	; (13cdc <system_interrupt_leave_critical_section+0xc>)
   13cd6:	4798      	blx	r3
}
   13cd8:	46bd      	mov	sp, r7
   13cda:	bd80      	pop	{r7, pc}
   13cdc:	00011c99 	.word	0x00011c99

00013ce0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   13ce0:	b580      	push	{r7, lr}
   13ce2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   13ce4:	2000      	movs	r0, #0
   13ce6:	2108      	movs	r1, #8
   13ce8:	4b07      	ldr	r3, [pc, #28]	; (13d08 <system_gclk_init+0x28>)
   13cea:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   13cec:	4b07      	ldr	r3, [pc, #28]	; (13d0c <system_gclk_init+0x2c>)
   13cee:	2201      	movs	r2, #1
   13cf0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   13cf2:	46c0      	nop			; (mov r8, r8)
   13cf4:	4b05      	ldr	r3, [pc, #20]	; (13d0c <system_gclk_init+0x2c>)
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	b2db      	uxtb	r3, r3
   13cfa:	1c1a      	adds	r2, r3, #0
   13cfc:	2301      	movs	r3, #1
   13cfe:	4013      	ands	r3, r2
   13d00:	d1f8      	bne.n	13cf4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   13d02:	46bd      	mov	sp, r7
   13d04:	bd80      	pop	{r7, pc}
   13d06:	46c0      	nop			; (mov r8, r8)
   13d08:	00013c65 	.word	0x00013c65
   13d0c:	40000c00 	.word	0x40000c00

00013d10 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   13d10:	b580      	push	{r7, lr}
   13d12:	b086      	sub	sp, #24
   13d14:	af00      	add	r7, sp, #0
   13d16:	1c02      	adds	r2, r0, #0
   13d18:	6039      	str	r1, [r7, #0]
   13d1a:	1dfb      	adds	r3, r7, #7
   13d1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   13d1e:	1dfb      	adds	r3, r7, #7
   13d20:	781b      	ldrb	r3, [r3, #0]
   13d22:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   13d24:	1dfb      	adds	r3, r7, #7
   13d26:	781b      	ldrb	r3, [r3, #0]
   13d28:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   13d2a:	683b      	ldr	r3, [r7, #0]
   13d2c:	781b      	ldrb	r3, [r3, #0]
   13d2e:	021b      	lsls	r3, r3, #8
   13d30:	697a      	ldr	r2, [r7, #20]
   13d32:	4313      	orrs	r3, r2
   13d34:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   13d36:	683b      	ldr	r3, [r7, #0]
   13d38:	785b      	ldrb	r3, [r3, #1]
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d004      	beq.n	13d48 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   13d3e:	697b      	ldr	r3, [r7, #20]
   13d40:	2280      	movs	r2, #128	; 0x80
   13d42:	02d2      	lsls	r2, r2, #11
   13d44:	4313      	orrs	r3, r2
   13d46:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   13d48:	683b      	ldr	r3, [r7, #0]
   13d4a:	7a5b      	ldrb	r3, [r3, #9]
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d004      	beq.n	13d5a <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   13d50:	697b      	ldr	r3, [r7, #20]
   13d52:	2280      	movs	r2, #128	; 0x80
   13d54:	0312      	lsls	r2, r2, #12
   13d56:	4313      	orrs	r3, r2
   13d58:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   13d5a:	683b      	ldr	r3, [r7, #0]
   13d5c:	685b      	ldr	r3, [r3, #4]
   13d5e:	2b01      	cmp	r3, #1
   13d60:	d92c      	bls.n	13dbc <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   13d62:	683b      	ldr	r3, [r7, #0]
   13d64:	685a      	ldr	r2, [r3, #4]
   13d66:	683b      	ldr	r3, [r7, #0]
   13d68:	685b      	ldr	r3, [r3, #4]
   13d6a:	3b01      	subs	r3, #1
   13d6c:	4013      	ands	r3, r2
   13d6e:	d11a      	bne.n	13da6 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   13d70:	2300      	movs	r3, #0
   13d72:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   13d74:	2302      	movs	r3, #2
   13d76:	60bb      	str	r3, [r7, #8]
   13d78:	e005      	b.n	13d86 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
   13d7a:	68fb      	ldr	r3, [r7, #12]
   13d7c:	3301      	adds	r3, #1
   13d7e:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   13d80:	68bb      	ldr	r3, [r7, #8]
   13d82:	005b      	lsls	r3, r3, #1
   13d84:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   13d86:	683b      	ldr	r3, [r7, #0]
   13d88:	685a      	ldr	r2, [r3, #4]
   13d8a:	68bb      	ldr	r3, [r7, #8]
   13d8c:	429a      	cmp	r2, r3
   13d8e:	d8f4      	bhi.n	13d7a <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   13d90:	68fb      	ldr	r3, [r7, #12]
   13d92:	021b      	lsls	r3, r3, #8
   13d94:	693a      	ldr	r2, [r7, #16]
   13d96:	4313      	orrs	r3, r2
   13d98:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   13d9a:	697b      	ldr	r3, [r7, #20]
   13d9c:	2280      	movs	r2, #128	; 0x80
   13d9e:	0352      	lsls	r2, r2, #13
   13da0:	4313      	orrs	r3, r2
   13da2:	617b      	str	r3, [r7, #20]
   13da4:	e00a      	b.n	13dbc <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   13da6:	683b      	ldr	r3, [r7, #0]
   13da8:	685b      	ldr	r3, [r3, #4]
   13daa:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   13dac:	693a      	ldr	r2, [r7, #16]
   13dae:	4313      	orrs	r3, r2
   13db0:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   13db2:	697b      	ldr	r3, [r7, #20]
   13db4:	2280      	movs	r2, #128	; 0x80
   13db6:	0292      	lsls	r2, r2, #10
   13db8:	4313      	orrs	r3, r2
   13dba:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13dbc:	683b      	ldr	r3, [r7, #0]
   13dbe:	7a1b      	ldrb	r3, [r3, #8]
   13dc0:	2b00      	cmp	r3, #0
   13dc2:	d005      	beq.n	13dd0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   13dc4:	697b      	ldr	r3, [r7, #20]
   13dc6:	2280      	movs	r2, #128	; 0x80
   13dc8:	0392      	lsls	r2, r2, #14
   13dca:	4313      	orrs	r3, r2
   13dcc:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13dce:	e7ff      	b.n	13dd0 <system_gclk_gen_set_config+0xc0>
   13dd0:	46c0      	nop			; (mov r8, r8)
   13dd2:	4b14      	ldr	r3, [pc, #80]	; (13e24 <system_gclk_gen_set_config+0x114>)
   13dd4:	4798      	blx	r3
   13dd6:	1c03      	adds	r3, r0, #0
   13dd8:	2b00      	cmp	r3, #0
   13dda:	d1fa      	bne.n	13dd2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13ddc:	4b12      	ldr	r3, [pc, #72]	; (13e28 <system_gclk_gen_set_config+0x118>)
   13dde:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13de0:	4b12      	ldr	r3, [pc, #72]	; (13e2c <system_gclk_gen_set_config+0x11c>)
   13de2:	1dfa      	adds	r2, r7, #7
   13de4:	7812      	ldrb	r2, [r2, #0]
   13de6:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   13de8:	46c0      	nop			; (mov r8, r8)
   13dea:	4b0e      	ldr	r3, [pc, #56]	; (13e24 <system_gclk_gen_set_config+0x114>)
   13dec:	4798      	blx	r3
   13dee:	1c03      	adds	r3, r0, #0
   13df0:	2b00      	cmp	r3, #0
   13df2:	d1fa      	bne.n	13dea <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   13df4:	4b0e      	ldr	r3, [pc, #56]	; (13e30 <system_gclk_gen_set_config+0x120>)
   13df6:	693a      	ldr	r2, [r7, #16]
   13df8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   13dfa:	46c0      	nop			; (mov r8, r8)
   13dfc:	4b09      	ldr	r3, [pc, #36]	; (13e24 <system_gclk_gen_set_config+0x114>)
   13dfe:	4798      	blx	r3
   13e00:	1c03      	adds	r3, r0, #0
   13e02:	2b00      	cmp	r3, #0
   13e04:	d1fa      	bne.n	13dfc <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   13e06:	4b0a      	ldr	r3, [pc, #40]	; (13e30 <system_gclk_gen_set_config+0x120>)
   13e08:	4a09      	ldr	r2, [pc, #36]	; (13e30 <system_gclk_gen_set_config+0x120>)
   13e0a:	6851      	ldr	r1, [r2, #4]
   13e0c:	2280      	movs	r2, #128	; 0x80
   13e0e:	0252      	lsls	r2, r2, #9
   13e10:	4011      	ands	r1, r2
   13e12:	697a      	ldr	r2, [r7, #20]
   13e14:	430a      	orrs	r2, r1
   13e16:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13e18:	4b06      	ldr	r3, [pc, #24]	; (13e34 <system_gclk_gen_set_config+0x124>)
   13e1a:	4798      	blx	r3
}
   13e1c:	46bd      	mov	sp, r7
   13e1e:	b006      	add	sp, #24
   13e20:	bd80      	pop	{r7, pc}
   13e22:	46c0      	nop			; (mov r8, r8)
   13e24:	00013c41 	.word	0x00013c41
   13e28:	00013cc1 	.word	0x00013cc1
   13e2c:	40000c08 	.word	0x40000c08
   13e30:	40000c00 	.word	0x40000c00
   13e34:	00013cd1 	.word	0x00013cd1

00013e38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   13e38:	b580      	push	{r7, lr}
   13e3a:	b082      	sub	sp, #8
   13e3c:	af00      	add	r7, sp, #0
   13e3e:	1c02      	adds	r2, r0, #0
   13e40:	1dfb      	adds	r3, r7, #7
   13e42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13e44:	46c0      	nop			; (mov r8, r8)
   13e46:	4b0e      	ldr	r3, [pc, #56]	; (13e80 <system_gclk_gen_enable+0x48>)
   13e48:	4798      	blx	r3
   13e4a:	1c03      	adds	r3, r0, #0
   13e4c:	2b00      	cmp	r3, #0
   13e4e:	d1fa      	bne.n	13e46 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13e50:	4b0c      	ldr	r3, [pc, #48]	; (13e84 <system_gclk_gen_enable+0x4c>)
   13e52:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13e54:	4b0c      	ldr	r3, [pc, #48]	; (13e88 <system_gclk_gen_enable+0x50>)
   13e56:	1dfa      	adds	r2, r7, #7
   13e58:	7812      	ldrb	r2, [r2, #0]
   13e5a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13e5c:	46c0      	nop			; (mov r8, r8)
   13e5e:	4b08      	ldr	r3, [pc, #32]	; (13e80 <system_gclk_gen_enable+0x48>)
   13e60:	4798      	blx	r3
   13e62:	1c03      	adds	r3, r0, #0
   13e64:	2b00      	cmp	r3, #0
   13e66:	d1fa      	bne.n	13e5e <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   13e68:	4b08      	ldr	r3, [pc, #32]	; (13e8c <system_gclk_gen_enable+0x54>)
   13e6a:	4a08      	ldr	r2, [pc, #32]	; (13e8c <system_gclk_gen_enable+0x54>)
   13e6c:	6852      	ldr	r2, [r2, #4]
   13e6e:	2180      	movs	r1, #128	; 0x80
   13e70:	0249      	lsls	r1, r1, #9
   13e72:	430a      	orrs	r2, r1
   13e74:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13e76:	4b06      	ldr	r3, [pc, #24]	; (13e90 <system_gclk_gen_enable+0x58>)
   13e78:	4798      	blx	r3
}
   13e7a:	46bd      	mov	sp, r7
   13e7c:	b002      	add	sp, #8
   13e7e:	bd80      	pop	{r7, pc}
   13e80:	00013c41 	.word	0x00013c41
   13e84:	00013cc1 	.word	0x00013cc1
   13e88:	40000c04 	.word	0x40000c04
   13e8c:	40000c00 	.word	0x40000c00
   13e90:	00013cd1 	.word	0x00013cd1

00013e94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   13e94:	b580      	push	{r7, lr}
   13e96:	b086      	sub	sp, #24
   13e98:	af00      	add	r7, sp, #0
   13e9a:	1c02      	adds	r2, r0, #0
   13e9c:	1dfb      	adds	r3, r7, #7
   13e9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13ea0:	46c0      	nop			; (mov r8, r8)
   13ea2:	4b2f      	ldr	r3, [pc, #188]	; (13f60 <system_gclk_gen_get_hz+0xcc>)
   13ea4:	4798      	blx	r3
   13ea6:	1c03      	adds	r3, r0, #0
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	d1fa      	bne.n	13ea2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   13eac:	4b2d      	ldr	r3, [pc, #180]	; (13f64 <system_gclk_gen_get_hz+0xd0>)
   13eae:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13eb0:	4b2d      	ldr	r3, [pc, #180]	; (13f68 <system_gclk_gen_get_hz+0xd4>)
   13eb2:	1dfa      	adds	r2, r7, #7
   13eb4:	7812      	ldrb	r2, [r2, #0]
   13eb6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13eb8:	46c0      	nop			; (mov r8, r8)
   13eba:	4b29      	ldr	r3, [pc, #164]	; (13f60 <system_gclk_gen_get_hz+0xcc>)
   13ebc:	4798      	blx	r3
   13ebe:	1c03      	adds	r3, r0, #0
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	d1fa      	bne.n	13eba <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13ec4:	4b29      	ldr	r3, [pc, #164]	; (13f6c <system_gclk_gen_get_hz+0xd8>)
   13ec6:	685b      	ldr	r3, [r3, #4]
   13ec8:	0a1b      	lsrs	r3, r3, #8
   13eca:	1c1a      	adds	r2, r3, #0
   13ecc:	231f      	movs	r3, #31
   13ece:	4013      	ands	r3, r2
   13ed0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   13ed2:	1c18      	adds	r0, r3, #0
   13ed4:	4b26      	ldr	r3, [pc, #152]	; (13f70 <system_gclk_gen_get_hz+0xdc>)
   13ed6:	4798      	blx	r3
   13ed8:	1c03      	adds	r3, r0, #0
   13eda:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13edc:	4b22      	ldr	r3, [pc, #136]	; (13f68 <system_gclk_gen_get_hz+0xd4>)
   13ede:	1dfa      	adds	r2, r7, #7
   13ee0:	7812      	ldrb	r2, [r2, #0]
   13ee2:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   13ee4:	4b21      	ldr	r3, [pc, #132]	; (13f6c <system_gclk_gen_get_hz+0xd8>)
   13ee6:	685b      	ldr	r3, [r3, #4]
   13ee8:	0d1b      	lsrs	r3, r3, #20
   13eea:	1c1a      	adds	r2, r3, #0
   13eec:	2301      	movs	r3, #1
   13eee:	4013      	ands	r3, r2
   13ef0:	b2da      	uxtb	r2, r3
   13ef2:	1c3b      	adds	r3, r7, #0
   13ef4:	3313      	adds	r3, #19
   13ef6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13ef8:	4b1e      	ldr	r3, [pc, #120]	; (13f74 <system_gclk_gen_get_hz+0xe0>)
   13efa:	1dfa      	adds	r2, r7, #7
   13efc:	7812      	ldrb	r2, [r2, #0]
   13efe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13f00:	46c0      	nop			; (mov r8, r8)
   13f02:	4b17      	ldr	r3, [pc, #92]	; (13f60 <system_gclk_gen_get_hz+0xcc>)
   13f04:	4798      	blx	r3
   13f06:	1c03      	adds	r3, r0, #0
   13f08:	2b00      	cmp	r3, #0
   13f0a:	d1fa      	bne.n	13f02 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   13f0c:	4b17      	ldr	r3, [pc, #92]	; (13f6c <system_gclk_gen_get_hz+0xd8>)
   13f0e:	689b      	ldr	r3, [r3, #8]
   13f10:	0a1b      	lsrs	r3, r3, #8
   13f12:	2200      	movs	r2, #0
   13f14:	4393      	bics	r3, r2
   13f16:	b29b      	uxth	r3, r3
   13f18:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   13f1a:	4b17      	ldr	r3, [pc, #92]	; (13f78 <system_gclk_gen_get_hz+0xe4>)
   13f1c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   13f1e:	1c3b      	adds	r3, r7, #0
   13f20:	3313      	adds	r3, #19
   13f22:	781b      	ldrb	r3, [r3, #0]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d109      	bne.n	13f3c <system_gclk_gen_get_hz+0xa8>
   13f28:	68fb      	ldr	r3, [r7, #12]
   13f2a:	2b01      	cmp	r3, #1
   13f2c:	d906      	bls.n	13f3c <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
   13f2e:	4b13      	ldr	r3, [pc, #76]	; (13f7c <system_gclk_gen_get_hz+0xe8>)
   13f30:	6978      	ldr	r0, [r7, #20]
   13f32:	68f9      	ldr	r1, [r7, #12]
   13f34:	4798      	blx	r3
   13f36:	1c03      	adds	r3, r0, #0
   13f38:	617b      	str	r3, [r7, #20]
   13f3a:	e00b      	b.n	13f54 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
   13f3c:	1c3b      	adds	r3, r7, #0
   13f3e:	3313      	adds	r3, #19
   13f40:	781b      	ldrb	r3, [r3, #0]
   13f42:	2b00      	cmp	r3, #0
   13f44:	d006      	beq.n	13f54 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
   13f46:	68fb      	ldr	r3, [r7, #12]
   13f48:	3301      	adds	r3, #1
   13f4a:	697a      	ldr	r2, [r7, #20]
   13f4c:	1c11      	adds	r1, r2, #0
   13f4e:	40d9      	lsrs	r1, r3
   13f50:	1c0b      	adds	r3, r1, #0
   13f52:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   13f54:	697b      	ldr	r3, [r7, #20]
}
   13f56:	1c18      	adds	r0, r3, #0
   13f58:	46bd      	mov	sp, r7
   13f5a:	b006      	add	sp, #24
   13f5c:	bd80      	pop	{r7, pc}
   13f5e:	46c0      	nop			; (mov r8, r8)
   13f60:	00013c41 	.word	0x00013c41
   13f64:	00013cc1 	.word	0x00013cc1
   13f68:	40000c04 	.word	0x40000c04
   13f6c:	40000c00 	.word	0x40000c00
   13f70:	000136b1 	.word	0x000136b1
   13f74:	40000c08 	.word	0x40000c08
   13f78:	00013cd1 	.word	0x00013cd1
   13f7c:	00015719 	.word	0x00015719

00013f80 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   13f80:	b580      	push	{r7, lr}
   13f82:	b084      	sub	sp, #16
   13f84:	af00      	add	r7, sp, #0
   13f86:	1c02      	adds	r2, r0, #0
   13f88:	6039      	str	r1, [r7, #0]
   13f8a:	1dfb      	adds	r3, r7, #7
   13f8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   13f8e:	1dfb      	adds	r3, r7, #7
   13f90:	781b      	ldrb	r3, [r3, #0]
   13f92:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   13f94:	683b      	ldr	r3, [r7, #0]
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	021b      	lsls	r3, r3, #8
   13f9a:	68fa      	ldr	r2, [r7, #12]
   13f9c:	4313      	orrs	r3, r2
   13f9e:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   13fa0:	1dfb      	adds	r3, r7, #7
   13fa2:	781b      	ldrb	r3, [r3, #0]
   13fa4:	1c18      	adds	r0, r3, #0
   13fa6:	4b04      	ldr	r3, [pc, #16]	; (13fb8 <system_gclk_chan_set_config+0x38>)
   13fa8:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   13faa:	4b04      	ldr	r3, [pc, #16]	; (13fbc <system_gclk_chan_set_config+0x3c>)
   13fac:	68fa      	ldr	r2, [r7, #12]
   13fae:	b292      	uxth	r2, r2
   13fb0:	805a      	strh	r2, [r3, #2]
}
   13fb2:	46bd      	mov	sp, r7
   13fb4:	b004      	add	sp, #16
   13fb6:	bd80      	pop	{r7, pc}
   13fb8:	00014005 	.word	0x00014005
   13fbc:	40000c00 	.word	0x40000c00

00013fc0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   13fc0:	b580      	push	{r7, lr}
   13fc2:	b082      	sub	sp, #8
   13fc4:	af00      	add	r7, sp, #0
   13fc6:	1c02      	adds	r2, r0, #0
   13fc8:	1dfb      	adds	r3, r7, #7
   13fca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   13fcc:	4b09      	ldr	r3, [pc, #36]	; (13ff4 <system_gclk_chan_enable+0x34>)
   13fce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13fd0:	4b09      	ldr	r3, [pc, #36]	; (13ff8 <system_gclk_chan_enable+0x38>)
   13fd2:	1dfa      	adds	r2, r7, #7
   13fd4:	7812      	ldrb	r2, [r2, #0]
   13fd6:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   13fd8:	4b08      	ldr	r3, [pc, #32]	; (13ffc <system_gclk_chan_enable+0x3c>)
   13fda:	4a08      	ldr	r2, [pc, #32]	; (13ffc <system_gclk_chan_enable+0x3c>)
   13fdc:	8852      	ldrh	r2, [r2, #2]
   13fde:	b292      	uxth	r2, r2
   13fe0:	2180      	movs	r1, #128	; 0x80
   13fe2:	01c9      	lsls	r1, r1, #7
   13fe4:	430a      	orrs	r2, r1
   13fe6:	b292      	uxth	r2, r2
   13fe8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   13fea:	4b05      	ldr	r3, [pc, #20]	; (14000 <system_gclk_chan_enable+0x40>)
   13fec:	4798      	blx	r3
}
   13fee:	46bd      	mov	sp, r7
   13ff0:	b002      	add	sp, #8
   13ff2:	bd80      	pop	{r7, pc}
   13ff4:	00013cc1 	.word	0x00013cc1
   13ff8:	40000c02 	.word	0x40000c02
   13ffc:	40000c00 	.word	0x40000c00
   14000:	00013cd1 	.word	0x00013cd1

00014004 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   14004:	b580      	push	{r7, lr}
   14006:	b084      	sub	sp, #16
   14008:	af00      	add	r7, sp, #0
   1400a:	1c02      	adds	r2, r0, #0
   1400c:	1dfb      	adds	r3, r7, #7
   1400e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   14010:	4b1c      	ldr	r3, [pc, #112]	; (14084 <system_gclk_chan_disable+0x80>)
   14012:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   14014:	4b1c      	ldr	r3, [pc, #112]	; (14088 <system_gclk_chan_disable+0x84>)
   14016:	1dfa      	adds	r2, r7, #7
   14018:	7812      	ldrb	r2, [r2, #0]
   1401a:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1401c:	4b1b      	ldr	r3, [pc, #108]	; (1408c <system_gclk_chan_disable+0x88>)
   1401e:	885b      	ldrh	r3, [r3, #2]
   14020:	b29b      	uxth	r3, r3
   14022:	0a1b      	lsrs	r3, r3, #8
   14024:	1c1a      	adds	r2, r3, #0
   14026:	230f      	movs	r3, #15
   14028:	4013      	ands	r3, r2
   1402a:	b2db      	uxtb	r3, r3
   1402c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1402e:	4b17      	ldr	r3, [pc, #92]	; (1408c <system_gclk_chan_disable+0x88>)
   14030:	8859      	ldrh	r1, [r3, #2]
   14032:	4a17      	ldr	r2, [pc, #92]	; (14090 <system_gclk_chan_disable+0x8c>)
   14034:	400a      	ands	r2, r1
   14036:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   14038:	4b14      	ldr	r3, [pc, #80]	; (1408c <system_gclk_chan_disable+0x88>)
   1403a:	4a14      	ldr	r2, [pc, #80]	; (1408c <system_gclk_chan_disable+0x88>)
   1403c:	8852      	ldrh	r2, [r2, #2]
   1403e:	b291      	uxth	r1, r2
   14040:	4a14      	ldr	r2, [pc, #80]	; (14094 <system_gclk_chan_disable+0x90>)
   14042:	400a      	ands	r2, r1
   14044:	b292      	uxth	r2, r2
   14046:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   14048:	46c0      	nop			; (mov r8, r8)
   1404a:	4b10      	ldr	r3, [pc, #64]	; (1408c <system_gclk_chan_disable+0x88>)
   1404c:	885b      	ldrh	r3, [r3, #2]
   1404e:	b29b      	uxth	r3, r3
   14050:	1c1a      	adds	r2, r3, #0
   14052:	2380      	movs	r3, #128	; 0x80
   14054:	01db      	lsls	r3, r3, #7
   14056:	4013      	ands	r3, r2
   14058:	d1f7      	bne.n	1404a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1405a:	4b0c      	ldr	r3, [pc, #48]	; (1408c <system_gclk_chan_disable+0x88>)
   1405c:	68fa      	ldr	r2, [r7, #12]
   1405e:	b2d2      	uxtb	r2, r2
   14060:	1c11      	adds	r1, r2, #0
   14062:	220f      	movs	r2, #15
   14064:	400a      	ands	r2, r1
   14066:	b2d1      	uxtb	r1, r2
   14068:	220f      	movs	r2, #15
   1406a:	400a      	ands	r2, r1
   1406c:	0212      	lsls	r2, r2, #8
   1406e:	8858      	ldrh	r0, [r3, #2]
   14070:	4907      	ldr	r1, [pc, #28]	; (14090 <system_gclk_chan_disable+0x8c>)
   14072:	4001      	ands	r1, r0
   14074:	430a      	orrs	r2, r1
   14076:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   14078:	4b07      	ldr	r3, [pc, #28]	; (14098 <system_gclk_chan_disable+0x94>)
   1407a:	4798      	blx	r3
}
   1407c:	46bd      	mov	sp, r7
   1407e:	b004      	add	sp, #16
   14080:	bd80      	pop	{r7, pc}
   14082:	46c0      	nop			; (mov r8, r8)
   14084:	00013cc1 	.word	0x00013cc1
   14088:	40000c02 	.word	0x40000c02
   1408c:	40000c00 	.word	0x40000c00
   14090:	fffff0ff 	.word	0xfffff0ff
   14094:	ffffbfff 	.word	0xffffbfff
   14098:	00013cd1 	.word	0x00013cd1

0001409c <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
   1409c:	b580      	push	{r7, lr}
   1409e:	b082      	sub	sp, #8
   140a0:	af00      	add	r7, sp, #0
   140a2:	1c02      	adds	r2, r0, #0
   140a4:	1dfb      	adds	r3, r7, #7
   140a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   140a8:	4b09      	ldr	r3, [pc, #36]	; (140d0 <system_gclk_chan_lock+0x34>)
   140aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   140ac:	4b09      	ldr	r3, [pc, #36]	; (140d4 <system_gclk_chan_lock+0x38>)
   140ae:	1dfa      	adds	r2, r7, #7
   140b0:	7812      	ldrb	r2, [r2, #0]
   140b2:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   140b4:	4b08      	ldr	r3, [pc, #32]	; (140d8 <system_gclk_chan_lock+0x3c>)
   140b6:	4a08      	ldr	r2, [pc, #32]	; (140d8 <system_gclk_chan_lock+0x3c>)
   140b8:	8852      	ldrh	r2, [r2, #2]
   140ba:	b292      	uxth	r2, r2
   140bc:	2180      	movs	r1, #128	; 0x80
   140be:	01c9      	lsls	r1, r1, #7
   140c0:	430a      	orrs	r2, r1
   140c2:	b292      	uxth	r2, r2
   140c4:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
   140c6:	4b05      	ldr	r3, [pc, #20]	; (140dc <system_gclk_chan_lock+0x40>)
   140c8:	4798      	blx	r3
}
   140ca:	46bd      	mov	sp, r7
   140cc:	b002      	add	sp, #8
   140ce:	bd80      	pop	{r7, pc}
   140d0:	00013cc1 	.word	0x00013cc1
   140d4:	40000c02 	.word	0x40000c02
   140d8:	40000c00 	.word	0x40000c00
   140dc:	00013cd1 	.word	0x00013cd1

000140e0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   140e0:	b580      	push	{r7, lr}
   140e2:	b084      	sub	sp, #16
   140e4:	af00      	add	r7, sp, #0
   140e6:	1c02      	adds	r2, r0, #0
   140e8:	1dfb      	adds	r3, r7, #7
   140ea:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   140ec:	4b0e      	ldr	r3, [pc, #56]	; (14128 <system_gclk_chan_get_hz+0x48>)
   140ee:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   140f0:	4b0e      	ldr	r3, [pc, #56]	; (1412c <system_gclk_chan_get_hz+0x4c>)
   140f2:	1dfa      	adds	r2, r7, #7
   140f4:	7812      	ldrb	r2, [r2, #0]
   140f6:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   140f8:	4b0d      	ldr	r3, [pc, #52]	; (14130 <system_gclk_chan_get_hz+0x50>)
   140fa:	885b      	ldrh	r3, [r3, #2]
   140fc:	b29b      	uxth	r3, r3
   140fe:	0a1b      	lsrs	r3, r3, #8
   14100:	1c1a      	adds	r2, r3, #0
   14102:	230f      	movs	r3, #15
   14104:	4013      	ands	r3, r2
   14106:	b2da      	uxtb	r2, r3
   14108:	1c3b      	adds	r3, r7, #0
   1410a:	330f      	adds	r3, #15
   1410c:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   1410e:	4b09      	ldr	r3, [pc, #36]	; (14134 <system_gclk_chan_get_hz+0x54>)
   14110:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   14112:	1c3b      	adds	r3, r7, #0
   14114:	330f      	adds	r3, #15
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	1c18      	adds	r0, r3, #0
   1411a:	4b07      	ldr	r3, [pc, #28]	; (14138 <system_gclk_chan_get_hz+0x58>)
   1411c:	4798      	blx	r3
   1411e:	1c03      	adds	r3, r0, #0
}
   14120:	1c18      	adds	r0, r3, #0
   14122:	46bd      	mov	sp, r7
   14124:	b004      	add	sp, #16
   14126:	bd80      	pop	{r7, pc}
   14128:	00013cc1 	.word	0x00013cc1
   1412c:	40000c02 	.word	0x40000c02
   14130:	40000c00 	.word	0x40000c00
   14134:	00013cd1 	.word	0x00013cd1
   14138:	00013e95 	.word	0x00013e95

0001413c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1413c:	b580      	push	{r7, lr}
   1413e:	b084      	sub	sp, #16
   14140:	af00      	add	r7, sp, #0
   14142:	1c02      	adds	r2, r0, #0
   14144:	1dfb      	adds	r3, r7, #7
   14146:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14148:	1c3b      	adds	r3, r7, #0
   1414a:	330f      	adds	r3, #15
   1414c:	1dfa      	adds	r2, r7, #7
   1414e:	7812      	ldrb	r2, [r2, #0]
   14150:	09d2      	lsrs	r2, r2, #7
   14152:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14154:	1c3b      	adds	r3, r7, #0
   14156:	330e      	adds	r3, #14
   14158:	1dfa      	adds	r2, r7, #7
   1415a:	7812      	ldrb	r2, [r2, #0]
   1415c:	0952      	lsrs	r2, r2, #5
   1415e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14160:	4b0d      	ldr	r3, [pc, #52]	; (14198 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14162:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14164:	1c3b      	adds	r3, r7, #0
   14166:	330f      	adds	r3, #15
   14168:	781b      	ldrb	r3, [r3, #0]
   1416a:	2b00      	cmp	r3, #0
   1416c:	d10e      	bne.n	1418c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
   1416e:	1c3b      	adds	r3, r7, #0
   14170:	330f      	adds	r3, #15
   14172:	781b      	ldrb	r3, [r3, #0]
   14174:	009b      	lsls	r3, r3, #2
   14176:	2210      	movs	r2, #16
   14178:	19d2      	adds	r2, r2, r7
   1417a:	18d3      	adds	r3, r2, r3
   1417c:	3b08      	subs	r3, #8
   1417e:	681a      	ldr	r2, [r3, #0]
   14180:	1c3b      	adds	r3, r7, #0
   14182:	330e      	adds	r3, #14
   14184:	781b      	ldrb	r3, [r3, #0]
   14186:	01db      	lsls	r3, r3, #7
   14188:	18d3      	adds	r3, r2, r3
   1418a:	e000      	b.n	1418e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
   1418c:	2300      	movs	r3, #0
	}
}
   1418e:	1c18      	adds	r0, r3, #0
   14190:	46bd      	mov	sp, r7
   14192:	b004      	add	sp, #16
   14194:	bd80      	pop	{r7, pc}
   14196:	46c0      	nop			; (mov r8, r8)
   14198:	41004400 	.word	0x41004400

0001419c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1419c:	b580      	push	{r7, lr}
   1419e:	b088      	sub	sp, #32
   141a0:	af00      	add	r7, sp, #0
   141a2:	60f8      	str	r0, [r7, #12]
   141a4:	60b9      	str	r1, [r7, #8]
   141a6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   141a8:	2300      	movs	r3, #0
   141aa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   141ac:	687b      	ldr	r3, [r7, #4]
   141ae:	78db      	ldrb	r3, [r3, #3]
   141b0:	2201      	movs	r2, #1
   141b2:	4053      	eors	r3, r2
   141b4:	b2db      	uxtb	r3, r3
   141b6:	2b00      	cmp	r3, #0
   141b8:	d033      	beq.n	14222 <_system_pinmux_config+0x86>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   141ba:	687b      	ldr	r3, [r7, #4]
   141bc:	781b      	ldrb	r3, [r3, #0]
   141be:	2b80      	cmp	r3, #128	; 0x80
   141c0:	d00a      	beq.n	141d8 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   141c2:	69fb      	ldr	r3, [r7, #28]
   141c4:	2280      	movs	r2, #128	; 0x80
   141c6:	0252      	lsls	r2, r2, #9
   141c8:	4313      	orrs	r3, r2
   141ca:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   141cc:	687b      	ldr	r3, [r7, #4]
   141ce:	781b      	ldrb	r3, [r3, #0]
   141d0:	061b      	lsls	r3, r3, #24
   141d2:	69fa      	ldr	r2, [r7, #28]
   141d4:	4313      	orrs	r3, r2
   141d6:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   141d8:	687b      	ldr	r3, [r7, #4]
   141da:	785b      	ldrb	r3, [r3, #1]
   141dc:	2b00      	cmp	r3, #0
   141de:	d003      	beq.n	141e8 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   141e0:	687b      	ldr	r3, [r7, #4]
   141e2:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   141e4:	2b02      	cmp	r3, #2
   141e6:	d110      	bne.n	1420a <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   141e8:	69fb      	ldr	r3, [r7, #28]
   141ea:	2280      	movs	r2, #128	; 0x80
   141ec:	0292      	lsls	r2, r2, #10
   141ee:	4313      	orrs	r3, r2
   141f0:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   141f2:	687b      	ldr	r3, [r7, #4]
   141f4:	789b      	ldrb	r3, [r3, #2]
   141f6:	2b00      	cmp	r3, #0
   141f8:	d004      	beq.n	14204 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   141fa:	69fb      	ldr	r3, [r7, #28]
   141fc:	2280      	movs	r2, #128	; 0x80
   141fe:	02d2      	lsls	r2, r2, #11
   14200:	4313      	orrs	r3, r2
   14202:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   14204:	68fb      	ldr	r3, [r7, #12]
   14206:	68ba      	ldr	r2, [r7, #8]
   14208:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1420a:	687b      	ldr	r3, [r7, #4]
   1420c:	785b      	ldrb	r3, [r3, #1]
   1420e:	2b01      	cmp	r3, #1
   14210:	d003      	beq.n	1421a <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   14212:	687b      	ldr	r3, [r7, #4]
   14214:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   14216:	2b02      	cmp	r3, #2
   14218:	d103      	bne.n	14222 <_system_pinmux_config+0x86>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1421a:	69fa      	ldr	r2, [r7, #28]
   1421c:	4b1f      	ldr	r3, [pc, #124]	; (1429c <_system_pinmux_config+0x100>)
   1421e:	4013      	ands	r3, r2
   14220:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   14222:	68bb      	ldr	r3, [r7, #8]
   14224:	041b      	lsls	r3, r3, #16
   14226:	0c1b      	lsrs	r3, r3, #16
   14228:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1422a:	68bb      	ldr	r3, [r7, #8]
   1422c:	0c1b      	lsrs	r3, r3, #16
   1422e:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   14230:	69ba      	ldr	r2, [r7, #24]
   14232:	69fb      	ldr	r3, [r7, #28]
   14234:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   14236:	22a0      	movs	r2, #160	; 0xa0
   14238:	05d2      	lsls	r2, r2, #23
   1423a:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1423c:	68fb      	ldr	r3, [r7, #12]
   1423e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   14240:	697a      	ldr	r2, [r7, #20]
   14242:	69fb      	ldr	r3, [r7, #28]
   14244:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   14246:	22d0      	movs	r2, #208	; 0xd0
   14248:	0612      	lsls	r2, r2, #24
   1424a:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1424c:	68fb      	ldr	r3, [r7, #12]
   1424e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   14250:	687b      	ldr	r3, [r7, #4]
   14252:	78db      	ldrb	r3, [r3, #3]
   14254:	2201      	movs	r2, #1
   14256:	4053      	eors	r3, r2
   14258:	b2db      	uxtb	r3, r3
   1425a:	2b00      	cmp	r3, #0
   1425c:	d01a      	beq.n	14294 <_system_pinmux_config+0xf8>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1425e:	69fa      	ldr	r2, [r7, #28]
   14260:	2380      	movs	r3, #128	; 0x80
   14262:	02db      	lsls	r3, r3, #11
   14264:	4013      	ands	r3, r2
   14266:	d00a      	beq.n	1427e <_system_pinmux_config+0xe2>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   14268:	687b      	ldr	r3, [r7, #4]
   1426a:	789b      	ldrb	r3, [r3, #2]
   1426c:	2b01      	cmp	r3, #1
   1426e:	d103      	bne.n	14278 <_system_pinmux_config+0xdc>
				port->OUTSET.reg = pin_mask;
   14270:	68fb      	ldr	r3, [r7, #12]
   14272:	68ba      	ldr	r2, [r7, #8]
   14274:	619a      	str	r2, [r3, #24]
   14276:	e002      	b.n	1427e <_system_pinmux_config+0xe2>
			} else {
				port->OUTCLR.reg = pin_mask;
   14278:	68fb      	ldr	r3, [r7, #12]
   1427a:	68ba      	ldr	r2, [r7, #8]
   1427c:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1427e:	687b      	ldr	r3, [r7, #4]
   14280:	785b      	ldrb	r3, [r3, #1]
   14282:	2b01      	cmp	r3, #1
   14284:	d003      	beq.n	1428e <_system_pinmux_config+0xf2>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   14286:	687b      	ldr	r3, [r7, #4]
   14288:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1428a:	2b02      	cmp	r3, #2
   1428c:	d102      	bne.n	14294 <_system_pinmux_config+0xf8>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1428e:	68fb      	ldr	r3, [r7, #12]
   14290:	68ba      	ldr	r2, [r7, #8]
   14292:	609a      	str	r2, [r3, #8]
		}
	}
}
   14294:	46bd      	mov	sp, r7
   14296:	b008      	add	sp, #32
   14298:	bd80      	pop	{r7, pc}
   1429a:	46c0      	nop			; (mov r8, r8)
   1429c:	fffbffff 	.word	0xfffbffff

000142a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   142a0:	b580      	push	{r7, lr}
   142a2:	b084      	sub	sp, #16
   142a4:	af00      	add	r7, sp, #0
   142a6:	1c02      	adds	r2, r0, #0
   142a8:	6039      	str	r1, [r7, #0]
   142aa:	1dfb      	adds	r3, r7, #7
   142ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   142ae:	1dfb      	adds	r3, r7, #7
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	1c18      	adds	r0, r3, #0
   142b4:	4b0b      	ldr	r3, [pc, #44]	; (142e4 <system_pinmux_pin_set_config+0x44>)
   142b6:	4798      	blx	r3
   142b8:	1c03      	adds	r3, r0, #0
   142ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   142bc:	1dfb      	adds	r3, r7, #7
   142be:	781a      	ldrb	r2, [r3, #0]
   142c0:	231f      	movs	r3, #31
   142c2:	4013      	ands	r3, r2
   142c4:	2201      	movs	r2, #1
   142c6:	1c11      	adds	r1, r2, #0
   142c8:	4099      	lsls	r1, r3
   142ca:	1c0b      	adds	r3, r1, #0
   142cc:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   142ce:	68f9      	ldr	r1, [r7, #12]
   142d0:	68ba      	ldr	r2, [r7, #8]
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	1c08      	adds	r0, r1, #0
   142d6:	1c11      	adds	r1, r2, #0
   142d8:	1c1a      	adds	r2, r3, #0
   142da:	4b03      	ldr	r3, [pc, #12]	; (142e8 <system_pinmux_pin_set_config+0x48>)
   142dc:	4798      	blx	r3
}
   142de:	46bd      	mov	sp, r7
   142e0:	b004      	add	sp, #16
   142e2:	bd80      	pop	{r7, pc}
   142e4:	0001413d 	.word	0x0001413d
   142e8:	0001419d 	.word	0x0001419d

000142ec <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   142ec:	b580      	push	{r7, lr}
   142ee:	af00      	add	r7, sp, #0
	return;
   142f0:	46c0      	nop			; (mov r8, r8)
}
   142f2:	46bd      	mov	sp, r7
   142f4:	bd80      	pop	{r7, pc}
   142f6:	46c0      	nop			; (mov r8, r8)

000142f8 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
   142f8:	b580      	push	{r7, lr}
   142fa:	af00      	add	r7, sp, #0
	while (1) {
	 
		Assert(false);
	}
	*/
}
   142fc:	46bd      	mov	sp, r7
   142fe:	bd80      	pop	{r7, pc}

00014300 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   14300:	b580      	push	{r7, lr}
   14302:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   14304:	4b03      	ldr	r3, [pc, #12]	; (14314 <system_init+0x14>)
   14306:	4798      	blx	r3

	/* Initialize board hardware */
//BAM	system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
   14308:	4b03      	ldr	r3, [pc, #12]	; (14318 <system_init+0x18>)
   1430a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1430c:	4b03      	ldr	r3, [pc, #12]	; (1431c <system_init+0x1c>)
   1430e:	4798      	blx	r3
}
   14310:	46bd      	mov	sp, r7
   14312:	bd80      	pop	{r7, pc}
   14314:	000139bd 	.word	0x000139bd
   14318:	000142ed 	.word	0x000142ed
   1431c:	00003f31 	.word	0x00003f31

00014320 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   14320:	b580      	push	{r7, lr}
   14322:	b082      	sub	sp, #8
   14324:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   14326:	4b16      	ldr	r3, [pc, #88]	; (14380 <Reset_Handler+0x60>)
   14328:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1432a:	4b16      	ldr	r3, [pc, #88]	; (14384 <Reset_Handler+0x64>)
   1432c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1432e:	687a      	ldr	r2, [r7, #4]
   14330:	683b      	ldr	r3, [r7, #0]
   14332:	429a      	cmp	r2, r3
   14334:	d00c      	beq.n	14350 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   14336:	e007      	b.n	14348 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   14338:	683b      	ldr	r3, [r7, #0]
   1433a:	1d1a      	adds	r2, r3, #4
   1433c:	603a      	str	r2, [r7, #0]
   1433e:	687a      	ldr	r2, [r7, #4]
   14340:	1d11      	adds	r1, r2, #4
   14342:	6079      	str	r1, [r7, #4]
   14344:	6812      	ldr	r2, [r2, #0]
   14346:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   14348:	683a      	ldr	r2, [r7, #0]
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <Reset_Handler+0x68>)
   1434c:	429a      	cmp	r2, r3
   1434e:	d3f3      	bcc.n	14338 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   14350:	4b0e      	ldr	r3, [pc, #56]	; (1438c <Reset_Handler+0x6c>)
   14352:	603b      	str	r3, [r7, #0]
   14354:	e004      	b.n	14360 <Reset_Handler+0x40>
                *pDest++ = 0;
   14356:	683b      	ldr	r3, [r7, #0]
   14358:	1d1a      	adds	r2, r3, #4
   1435a:	603a      	str	r2, [r7, #0]
   1435c:	2200      	movs	r2, #0
   1435e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   14360:	683a      	ldr	r2, [r7, #0]
   14362:	4b0b      	ldr	r3, [pc, #44]	; (14390 <Reset_Handler+0x70>)
   14364:	429a      	cmp	r2, r3
   14366:	d3f6      	bcc.n	14356 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   14368:	4b0a      	ldr	r3, [pc, #40]	; (14394 <Reset_Handler+0x74>)
   1436a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1436c:	4b0a      	ldr	r3, [pc, #40]	; (14398 <Reset_Handler+0x78>)
   1436e:	687a      	ldr	r2, [r7, #4]
   14370:	217f      	movs	r1, #127	; 0x7f
   14372:	438a      	bics	r2, r1
   14374:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
   14376:	4b09      	ldr	r3, [pc, #36]	; (1439c <Reset_Handler+0x7c>)
   14378:	4798      	blx	r3

        /* Branch to main function */
        main();
   1437a:	4b09      	ldr	r3, [pc, #36]	; (143a0 <Reset_Handler+0x80>)
   1437c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1437e:	e7fe      	b.n	1437e <Reset_Handler+0x5e>
   14380:	000186b4 	.word	0x000186b4
   14384:	20000000 	.word	0x20000000
   14388:	20000474 	.word	0x20000474
   1438c:	20000474 	.word	0x20000474
   14390:	200039a4 	.word	0x200039a4
   14394:	00003100 	.word	0x00003100
   14398:	e000ed00 	.word	0xe000ed00
   1439c:	00017d95 	.word	0x00017d95
   143a0:	0000ec95 	.word	0x0000ec95

000143a4 <Dummy_Handler1>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler1(void)
{
   143a4:	b580      	push	{r7, lr}
   143a6:	af00      	add	r7, sp, #0
        while (1) {
        }
   143a8:	e7fe      	b.n	143a8 <Dummy_Handler1+0x4>
   143aa:	46c0      	nop			; (mov r8, r8)

000143ac <Dummy_Handler2>:
}
void Dummy_Handler2(void)
{
   143ac:	b580      	push	{r7, lr}
   143ae:	af00      	add	r7, sp, #0
        while (1) {
        }
   143b0:	e7fe      	b.n	143b0 <Dummy_Handler2+0x4>
   143b2:	46c0      	nop			; (mov r8, r8)
   143b4:	0000      	movs	r0, r0
	...

000143b8 <pow>:
   143b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ba:	4646      	mov	r6, r8
   143bc:	464f      	mov	r7, r9
   143be:	b4c0      	push	{r6, r7}
   143c0:	b08f      	sub	sp, #60	; 0x3c
   143c2:	1c16      	adds	r6, r2, #0
   143c4:	1c1f      	adds	r7, r3, #0
   143c6:	9000      	str	r0, [sp, #0]
   143c8:	9101      	str	r1, [sp, #4]
   143ca:	f000 f9ad 	bl	14728 <__ieee754_pow>
   143ce:	4abc      	ldr	r2, [pc, #752]	; (146c0 <pow+0x308>)
   143d0:	2300      	movs	r3, #0
   143d2:	56d3      	ldrsb	r3, [r2, r3]
   143d4:	1c04      	adds	r4, r0, #0
   143d6:	1c0d      	adds	r5, r1, #0
   143d8:	4690      	mov	r8, r2
   143da:	9402      	str	r4, [sp, #8]
   143dc:	9503      	str	r5, [sp, #12]
   143de:	3301      	adds	r3, #1
   143e0:	d005      	beq.n	143ee <pow+0x36>
   143e2:	1c30      	adds	r0, r6, #0
   143e4:	1c39      	adds	r1, r7, #0
   143e6:	f001 f821 	bl	1542c <__fpclassifyd>
   143ea:	2800      	cmp	r0, #0
   143ec:	d106      	bne.n	143fc <pow+0x44>
   143ee:	9802      	ldr	r0, [sp, #8]
   143f0:	9903      	ldr	r1, [sp, #12]
   143f2:	b00f      	add	sp, #60	; 0x3c
   143f4:	bc0c      	pop	{r2, r3}
   143f6:	4690      	mov	r8, r2
   143f8:	4699      	mov	r9, r3
   143fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143fc:	9800      	ldr	r0, [sp, #0]
   143fe:	9901      	ldr	r1, [sp, #4]
   14400:	f001 f814 	bl	1542c <__fpclassifyd>
   14404:	4681      	mov	r9, r0
   14406:	2800      	cmp	r0, #0
   14408:	d131      	bne.n	1446e <pow+0xb6>
   1440a:	1c30      	adds	r0, r6, #0
   1440c:	1c39      	adds	r1, r7, #0
   1440e:	4ba1      	ldr	r3, [pc, #644]	; (14694 <pow+0x2dc>)
   14410:	4a9f      	ldr	r2, [pc, #636]	; (14690 <pow+0x2d8>)
   14412:	f001 fa41 	bl	15898 <__aeabi_dcmpeq>
   14416:	2800      	cmp	r0, #0
   14418:	d0e9      	beq.n	143ee <pow+0x36>
   1441a:	2301      	movs	r3, #1
   1441c:	9304      	str	r3, [sp, #16]
   1441e:	4ba9      	ldr	r3, [pc, #676]	; (146c4 <pow+0x30c>)
   14420:	ac04      	add	r4, sp, #16
   14422:	6063      	str	r3, [r4, #4]
   14424:	464b      	mov	r3, r9
   14426:	6223      	str	r3, [r4, #32]
   14428:	9a00      	ldr	r2, [sp, #0]
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	60a2      	str	r2, [r4, #8]
   1442e:	60e3      	str	r3, [r4, #12]
   14430:	4a99      	ldr	r2, [pc, #612]	; (14698 <pow+0x2e0>)
   14432:	4b9a      	ldr	r3, [pc, #616]	; (1469c <pow+0x2e4>)
   14434:	61a2      	str	r2, [r4, #24]
   14436:	61e3      	str	r3, [r4, #28]
   14438:	4642      	mov	r2, r8
   1443a:	2300      	movs	r3, #0
   1443c:	56d3      	ldrsb	r3, [r2, r3]
   1443e:	6126      	str	r6, [r4, #16]
   14440:	6167      	str	r7, [r4, #20]
   14442:	1c5a      	adds	r2, r3, #1
   14444:	d00e      	beq.n	14464 <pow+0xac>
   14446:	2b02      	cmp	r3, #2
   14448:	d00c      	beq.n	14464 <pow+0xac>
   1444a:	1c20      	adds	r0, r4, #0
   1444c:	f001 f81e 	bl	1548c <matherr>
   14450:	2800      	cmp	r0, #0
   14452:	d100      	bne.n	14456 <pow+0x9e>
   14454:	e07b      	b.n	1454e <pow+0x196>
   14456:	6a23      	ldr	r3, [r4, #32]
   14458:	2b00      	cmp	r3, #0
   1445a:	d003      	beq.n	14464 <pow+0xac>
   1445c:	f003 fc94 	bl	17d88 <__errno>
   14460:	6a23      	ldr	r3, [r4, #32]
   14462:	6003      	str	r3, [r0, #0]
   14464:	69a2      	ldr	r2, [r4, #24]
   14466:	69e3      	ldr	r3, [r4, #28]
   14468:	9202      	str	r2, [sp, #8]
   1446a:	9303      	str	r3, [sp, #12]
   1446c:	e7bf      	b.n	143ee <pow+0x36>
   1446e:	9800      	ldr	r0, [sp, #0]
   14470:	9901      	ldr	r1, [sp, #4]
   14472:	4b88      	ldr	r3, [pc, #544]	; (14694 <pow+0x2dc>)
   14474:	4a86      	ldr	r2, [pc, #536]	; (14690 <pow+0x2d8>)
   14476:	f001 fa0f 	bl	15898 <__aeabi_dcmpeq>
   1447a:	2800      	cmp	r0, #0
   1447c:	d022      	beq.n	144c4 <pow+0x10c>
   1447e:	1c30      	adds	r0, r6, #0
   14480:	1c39      	adds	r1, r7, #0
   14482:	4b84      	ldr	r3, [pc, #528]	; (14694 <pow+0x2dc>)
   14484:	4a82      	ldr	r2, [pc, #520]	; (14690 <pow+0x2d8>)
   14486:	f001 fa07 	bl	15898 <__aeabi_dcmpeq>
   1448a:	1e05      	subs	r5, r0, #0
   1448c:	d02c      	beq.n	144e8 <pow+0x130>
   1448e:	2301      	movs	r3, #1
   14490:	9304      	str	r3, [sp, #16]
   14492:	4b8c      	ldr	r3, [pc, #560]	; (146c4 <pow+0x30c>)
   14494:	ac04      	add	r4, sp, #16
   14496:	6063      	str	r3, [r4, #4]
   14498:	2300      	movs	r3, #0
   1449a:	6223      	str	r3, [r4, #32]
   1449c:	9a00      	ldr	r2, [sp, #0]
   1449e:	9b01      	ldr	r3, [sp, #4]
   144a0:	60a2      	str	r2, [r4, #8]
   144a2:	60e3      	str	r3, [r4, #12]
   144a4:	4b7b      	ldr	r3, [pc, #492]	; (14694 <pow+0x2dc>)
   144a6:	4a7a      	ldr	r2, [pc, #488]	; (14690 <pow+0x2d8>)
   144a8:	61a2      	str	r2, [r4, #24]
   144aa:	61e3      	str	r3, [r4, #28]
   144ac:	4642      	mov	r2, r8
   144ae:	2300      	movs	r3, #0
   144b0:	56d3      	ldrsb	r3, [r2, r3]
   144b2:	6126      	str	r6, [r4, #16]
   144b4:	6167      	str	r7, [r4, #20]
   144b6:	2b00      	cmp	r3, #0
   144b8:	d0c7      	beq.n	1444a <pow+0x92>
   144ba:	4a77      	ldr	r2, [pc, #476]	; (14698 <pow+0x2e0>)
   144bc:	4b77      	ldr	r3, [pc, #476]	; (1469c <pow+0x2e4>)
   144be:	61a2      	str	r2, [r4, #24]
   144c0:	61e3      	str	r3, [r4, #28]
   144c2:	e7cf      	b.n	14464 <pow+0xac>
   144c4:	1c20      	adds	r0, r4, #0
   144c6:	1c29      	adds	r1, r5, #0
   144c8:	f000 ffa8 	bl	1541c <finite>
   144cc:	4681      	mov	r9, r0
   144ce:	2800      	cmp	r0, #0
   144d0:	d042      	beq.n	14558 <pow+0x1a0>
   144d2:	1c20      	adds	r0, r4, #0
   144d4:	1c29      	adds	r1, r5, #0
   144d6:	4b6f      	ldr	r3, [pc, #444]	; (14694 <pow+0x2dc>)
   144d8:	4a6d      	ldr	r2, [pc, #436]	; (14690 <pow+0x2d8>)
   144da:	f001 f9dd 	bl	15898 <__aeabi_dcmpeq>
   144de:	2800      	cmp	r0, #0
   144e0:	d16c      	bne.n	145bc <pow+0x204>
   144e2:	9402      	str	r4, [sp, #8]
   144e4:	9503      	str	r5, [sp, #12]
   144e6:	e782      	b.n	143ee <pow+0x36>
   144e8:	1c30      	adds	r0, r6, #0
   144ea:	1c39      	adds	r1, r7, #0
   144ec:	f000 ff96 	bl	1541c <finite>
   144f0:	2800      	cmp	r0, #0
   144f2:	d100      	bne.n	144f6 <pow+0x13e>
   144f4:	e77b      	b.n	143ee <pow+0x36>
   144f6:	1c30      	adds	r0, r6, #0
   144f8:	1c39      	adds	r1, r7, #0
   144fa:	4b66      	ldr	r3, [pc, #408]	; (14694 <pow+0x2dc>)
   144fc:	4a64      	ldr	r2, [pc, #400]	; (14690 <pow+0x2d8>)
   144fe:	f001 f9d1 	bl	158a4 <__aeabi_dcmplt>
   14502:	2800      	cmp	r0, #0
   14504:	d100      	bne.n	14508 <pow+0x150>
   14506:	e772      	b.n	143ee <pow+0x36>
   14508:	2301      	movs	r3, #1
   1450a:	9304      	str	r3, [sp, #16]
   1450c:	4b6d      	ldr	r3, [pc, #436]	; (146c4 <pow+0x30c>)
   1450e:	ac04      	add	r4, sp, #16
   14510:	6063      	str	r3, [r4, #4]
   14512:	9a00      	ldr	r2, [sp, #0]
   14514:	9b01      	ldr	r3, [sp, #4]
   14516:	60a2      	str	r2, [r4, #8]
   14518:	60e3      	str	r3, [r4, #12]
   1451a:	4643      	mov	r3, r8
   1451c:	7819      	ldrb	r1, [r3, #0]
   1451e:	6225      	str	r5, [r4, #32]
   14520:	6126      	str	r6, [r4, #16]
   14522:	6167      	str	r7, [r4, #20]
   14524:	2900      	cmp	r1, #0
   14526:	d100      	bne.n	1452a <pow+0x172>
   14528:	e07a      	b.n	14620 <pow+0x268>
   1452a:	4a5d      	ldr	r2, [pc, #372]	; (146a0 <pow+0x2e8>)
   1452c:	4b5d      	ldr	r3, [pc, #372]	; (146a4 <pow+0x2ec>)
   1452e:	61a2      	str	r2, [r4, #24]
   14530:	61e3      	str	r3, [r4, #28]
   14532:	2902      	cmp	r1, #2
   14534:	d13c      	bne.n	145b0 <pow+0x1f8>
   14536:	f003 fc27 	bl	17d88 <__errno>
   1453a:	2321      	movs	r3, #33	; 0x21
   1453c:	6003      	str	r3, [r0, #0]
   1453e:	6a23      	ldr	r3, [r4, #32]
   14540:	2b00      	cmp	r3, #0
   14542:	d08f      	beq.n	14464 <pow+0xac>
   14544:	f003 fc20 	bl	17d88 <__errno>
   14548:	6a22      	ldr	r2, [r4, #32]
   1454a:	6002      	str	r2, [r0, #0]
   1454c:	e78a      	b.n	14464 <pow+0xac>
   1454e:	f003 fc1b 	bl	17d88 <__errno>
   14552:	2321      	movs	r3, #33	; 0x21
   14554:	6003      	str	r3, [r0, #0]
   14556:	e77e      	b.n	14456 <pow+0x9e>
   14558:	9800      	ldr	r0, [sp, #0]
   1455a:	9901      	ldr	r1, [sp, #4]
   1455c:	f000 ff5e 	bl	1541c <finite>
   14560:	2800      	cmp	r0, #0
   14562:	d0b6      	beq.n	144d2 <pow+0x11a>
   14564:	1c30      	adds	r0, r6, #0
   14566:	1c39      	adds	r1, r7, #0
   14568:	f000 ff58 	bl	1541c <finite>
   1456c:	2800      	cmp	r0, #0
   1456e:	d0b0      	beq.n	144d2 <pow+0x11a>
   14570:	1c20      	adds	r0, r4, #0
   14572:	1c29      	adds	r1, r5, #0
   14574:	f000 ff5a 	bl	1542c <__fpclassifyd>
   14578:	ac04      	add	r4, sp, #16
   1457a:	2800      	cmp	r0, #0
   1457c:	d155      	bne.n	1462a <pow+0x272>
   1457e:	2301      	movs	r3, #1
   14580:	9304      	str	r3, [sp, #16]
   14582:	4b50      	ldr	r3, [pc, #320]	; (146c4 <pow+0x30c>)
   14584:	6220      	str	r0, [r4, #32]
   14586:	6063      	str	r3, [r4, #4]
   14588:	9a00      	ldr	r2, [sp, #0]
   1458a:	9b01      	ldr	r3, [sp, #4]
   1458c:	60a2      	str	r2, [r4, #8]
   1458e:	60e3      	str	r3, [r4, #12]
   14590:	4643      	mov	r3, r8
   14592:	781d      	ldrb	r5, [r3, #0]
   14594:	6126      	str	r6, [r4, #16]
   14596:	6167      	str	r7, [r4, #20]
   14598:	2d00      	cmp	r5, #0
   1459a:	d041      	beq.n	14620 <pow+0x268>
   1459c:	493d      	ldr	r1, [pc, #244]	; (14694 <pow+0x2dc>)
   1459e:	483c      	ldr	r0, [pc, #240]	; (14690 <pow+0x2d8>)
   145a0:	1c02      	adds	r2, r0, #0
   145a2:	1c0b      	adds	r3, r1, #0
   145a4:	f001 fd60 	bl	16068 <__aeabi_ddiv>
   145a8:	61a0      	str	r0, [r4, #24]
   145aa:	61e1      	str	r1, [r4, #28]
   145ac:	2d02      	cmp	r5, #2
   145ae:	d0c2      	beq.n	14536 <pow+0x17e>
   145b0:	1c20      	adds	r0, r4, #0
   145b2:	f000 ff6b 	bl	1548c <matherr>
   145b6:	2800      	cmp	r0, #0
   145b8:	d1c1      	bne.n	1453e <pow+0x186>
   145ba:	e7bc      	b.n	14536 <pow+0x17e>
   145bc:	9800      	ldr	r0, [sp, #0]
   145be:	9901      	ldr	r1, [sp, #4]
   145c0:	f000 ff2c 	bl	1541c <finite>
   145c4:	9402      	str	r4, [sp, #8]
   145c6:	9503      	str	r5, [sp, #12]
   145c8:	2800      	cmp	r0, #0
   145ca:	d100      	bne.n	145ce <pow+0x216>
   145cc:	e70f      	b.n	143ee <pow+0x36>
   145ce:	1c30      	adds	r0, r6, #0
   145d0:	1c39      	adds	r1, r7, #0
   145d2:	f000 ff23 	bl	1541c <finite>
   145d6:	9402      	str	r4, [sp, #8]
   145d8:	9503      	str	r5, [sp, #12]
   145da:	2800      	cmp	r0, #0
   145dc:	d100      	bne.n	145e0 <pow+0x228>
   145de:	e706      	b.n	143ee <pow+0x36>
   145e0:	ac04      	add	r4, sp, #16
   145e2:	2304      	movs	r3, #4
   145e4:	9304      	str	r3, [sp, #16]
   145e6:	6126      	str	r6, [r4, #16]
   145e8:	6167      	str	r7, [r4, #20]
   145ea:	4b36      	ldr	r3, [pc, #216]	; (146c4 <pow+0x30c>)
   145ec:	6063      	str	r3, [r4, #4]
   145ee:	2300      	movs	r3, #0
   145f0:	6223      	str	r3, [r4, #32]
   145f2:	9a00      	ldr	r2, [sp, #0]
   145f4:	9b01      	ldr	r3, [sp, #4]
   145f6:	60a2      	str	r2, [r4, #8]
   145f8:	60e3      	str	r3, [r4, #12]
   145fa:	4b26      	ldr	r3, [pc, #152]	; (14694 <pow+0x2dc>)
   145fc:	4a24      	ldr	r2, [pc, #144]	; (14690 <pow+0x2d8>)
   145fe:	61a2      	str	r2, [r4, #24]
   14600:	61e3      	str	r3, [r4, #28]
   14602:	4642      	mov	r2, r8
   14604:	2300      	movs	r3, #0
   14606:	56d3      	ldrsb	r3, [r2, r3]
   14608:	2b02      	cmp	r3, #2
   1460a:	d004      	beq.n	14616 <pow+0x25e>
   1460c:	1c20      	adds	r0, r4, #0
   1460e:	f000 ff3d 	bl	1548c <matherr>
   14612:	2800      	cmp	r0, #0
   14614:	d193      	bne.n	1453e <pow+0x186>
   14616:	f003 fbb7 	bl	17d88 <__errno>
   1461a:	2322      	movs	r3, #34	; 0x22
   1461c:	6003      	str	r3, [r0, #0]
   1461e:	e78e      	b.n	1453e <pow+0x186>
   14620:	4b1c      	ldr	r3, [pc, #112]	; (14694 <pow+0x2dc>)
   14622:	4a1b      	ldr	r2, [pc, #108]	; (14690 <pow+0x2d8>)
   14624:	61a2      	str	r2, [r4, #24]
   14626:	61e3      	str	r3, [r4, #28]
   14628:	e7c2      	b.n	145b0 <pow+0x1f8>
   1462a:	2303      	movs	r3, #3
   1462c:	9304      	str	r3, [sp, #16]
   1462e:	4b25      	ldr	r3, [pc, #148]	; (146c4 <pow+0x30c>)
   14630:	6126      	str	r6, [r4, #16]
   14632:	6167      	str	r7, [r4, #20]
   14634:	6063      	str	r3, [r4, #4]
   14636:	464b      	mov	r3, r9
   14638:	6223      	str	r3, [r4, #32]
   1463a:	9a00      	ldr	r2, [sp, #0]
   1463c:	9b01      	ldr	r3, [sp, #4]
   1463e:	60a2      	str	r2, [r4, #8]
   14640:	60e3      	str	r3, [r4, #12]
   14642:	4642      	mov	r2, r8
   14644:	2300      	movs	r3, #0
   14646:	56d3      	ldrsb	r3, [r2, r3]
   14648:	2b00      	cmp	r3, #0
   1464a:	d13d      	bne.n	146c8 <pow+0x310>
   1464c:	4a16      	ldr	r2, [pc, #88]	; (146a8 <pow+0x2f0>)
   1464e:	4b17      	ldr	r3, [pc, #92]	; (146ac <pow+0x2f4>)
   14650:	9800      	ldr	r0, [sp, #0]
   14652:	9901      	ldr	r1, [sp, #4]
   14654:	61a2      	str	r2, [r4, #24]
   14656:	61e3      	str	r3, [r4, #28]
   14658:	4b0e      	ldr	r3, [pc, #56]	; (14694 <pow+0x2dc>)
   1465a:	4a0d      	ldr	r2, [pc, #52]	; (14690 <pow+0x2d8>)
   1465c:	f001 f922 	bl	158a4 <__aeabi_dcmplt>
   14660:	2800      	cmp	r0, #0
   14662:	d0ce      	beq.n	14602 <pow+0x24a>
   14664:	4a12      	ldr	r2, [pc, #72]	; (146b0 <pow+0x2f8>)
   14666:	4b13      	ldr	r3, [pc, #76]	; (146b4 <pow+0x2fc>)
   14668:	1c30      	adds	r0, r6, #0
   1466a:	1c39      	adds	r1, r7, #0
   1466c:	f002 f966 	bl	1693c <__aeabi_dmul>
   14670:	1c06      	adds	r6, r0, #0
   14672:	1c0f      	adds	r7, r1, #0
   14674:	f000 ff14 	bl	154a0 <rint>
   14678:	1c32      	adds	r2, r6, #0
   1467a:	1c3b      	adds	r3, r7, #0
   1467c:	f001 f90c 	bl	15898 <__aeabi_dcmpeq>
   14680:	2800      	cmp	r0, #0
   14682:	d1be      	bne.n	14602 <pow+0x24a>
   14684:	4a0c      	ldr	r2, [pc, #48]	; (146b8 <pow+0x300>)
   14686:	4b0d      	ldr	r3, [pc, #52]	; (146bc <pow+0x304>)
   14688:	61a2      	str	r2, [r4, #24]
   1468a:	61e3      	str	r3, [r4, #28]
   1468c:	e7b9      	b.n	14602 <pow+0x24a>
   1468e:	46c0      	nop			; (mov r8, r8)
	...
   1469c:	3ff00000 	.word	0x3ff00000
   146a0:	00000000 	.word	0x00000000
   146a4:	fff00000 	.word	0xfff00000
   146a8:	e0000000 	.word	0xe0000000
   146ac:	47efffff 	.word	0x47efffff
   146b0:	00000000 	.word	0x00000000
   146b4:	3fe00000 	.word	0x3fe00000
   146b8:	e0000000 	.word	0xe0000000
   146bc:	c7efffff 	.word	0xc7efffff
   146c0:	20000045 	.word	0x20000045
   146c4:	000185b0 	.word	0x000185b0
   146c8:	4b10      	ldr	r3, [pc, #64]	; (1470c <pow+0x354>)
   146ca:	4a0f      	ldr	r2, [pc, #60]	; (14708 <pow+0x350>)
   146cc:	9800      	ldr	r0, [sp, #0]
   146ce:	9901      	ldr	r1, [sp, #4]
   146d0:	61a2      	str	r2, [r4, #24]
   146d2:	61e3      	str	r3, [r4, #28]
   146d4:	4a0e      	ldr	r2, [pc, #56]	; (14710 <pow+0x358>)
   146d6:	4b0f      	ldr	r3, [pc, #60]	; (14714 <pow+0x35c>)
   146d8:	f001 f8e4 	bl	158a4 <__aeabi_dcmplt>
   146dc:	2800      	cmp	r0, #0
   146de:	d090      	beq.n	14602 <pow+0x24a>
   146e0:	4a0d      	ldr	r2, [pc, #52]	; (14718 <pow+0x360>)
   146e2:	4b0e      	ldr	r3, [pc, #56]	; (1471c <pow+0x364>)
   146e4:	1c30      	adds	r0, r6, #0
   146e6:	1c39      	adds	r1, r7, #0
   146e8:	f002 f928 	bl	1693c <__aeabi_dmul>
   146ec:	1c06      	adds	r6, r0, #0
   146ee:	1c0f      	adds	r7, r1, #0
   146f0:	f000 fed6 	bl	154a0 <rint>
   146f4:	1c32      	adds	r2, r6, #0
   146f6:	1c3b      	adds	r3, r7, #0
   146f8:	f001 f8ce 	bl	15898 <__aeabi_dcmpeq>
   146fc:	2800      	cmp	r0, #0
   146fe:	d000      	beq.n	14702 <pow+0x34a>
   14700:	e77f      	b.n	14602 <pow+0x24a>
   14702:	4a07      	ldr	r2, [pc, #28]	; (14720 <pow+0x368>)
   14704:	4b07      	ldr	r3, [pc, #28]	; (14724 <pow+0x36c>)
   14706:	e77a      	b.n	145fe <pow+0x246>
   14708:	00000000 	.word	0x00000000
   1470c:	7ff00000 	.word	0x7ff00000
	...
   1471c:	3fe00000 	.word	0x3fe00000
   14720:	00000000 	.word	0x00000000
   14724:	fff00000 	.word	0xfff00000

00014728 <__ieee754_pow>:
   14728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1472a:	465f      	mov	r7, fp
   1472c:	4656      	mov	r6, sl
   1472e:	464d      	mov	r5, r9
   14730:	4644      	mov	r4, r8
   14732:	b4f0      	push	{r4, r5, r6, r7}
   14734:	4699      	mov	r9, r3
   14736:	464b      	mov	r3, r9
   14738:	005c      	lsls	r4, r3, #1
   1473a:	4693      	mov	fp, r2
   1473c:	0864      	lsrs	r4, r4, #1
   1473e:	b08f      	sub	sp, #60	; 0x3c
   14740:	1c0d      	adds	r5, r1, #0
   14742:	1c0f      	adds	r7, r1, #0
   14744:	465a      	mov	r2, fp
   14746:	1c21      	adds	r1, r4, #0
   14748:	9000      	str	r0, [sp, #0]
   1474a:	1c06      	adds	r6, r0, #0
   1474c:	4682      	mov	sl, r0
   1474e:	9302      	str	r3, [sp, #8]
   14750:	4658      	mov	r0, fp
   14752:	4311      	orrs	r1, r2
   14754:	d037      	beq.n	147c6 <__ieee754_pow+0x9e>
   14756:	0069      	lsls	r1, r5, #1
   14758:	0849      	lsrs	r1, r1, #1
   1475a:	4688      	mov	r8, r1
   1475c:	4968      	ldr	r1, [pc, #416]	; (14900 <__ieee754_pow+0x1d8>)
   1475e:	9504      	str	r5, [sp, #16]
   14760:	4588      	cmp	r8, r1
   14762:	dc2b      	bgt.n	147bc <__ieee754_pow+0x94>
   14764:	d028      	beq.n	147b8 <__ieee754_pow+0x90>
   14766:	4966      	ldr	r1, [pc, #408]	; (14900 <__ieee754_pow+0x1d8>)
   14768:	428c      	cmp	r4, r1
   1476a:	dc27      	bgt.n	147bc <__ieee754_pow+0x94>
   1476c:	d100      	bne.n	14770 <__ieee754_pow+0x48>
   1476e:	e080      	b.n	14872 <__ieee754_pow+0x14a>
   14770:	2100      	movs	r1, #0
   14772:	9108      	str	r1, [sp, #32]
   14774:	9904      	ldr	r1, [sp, #16]
   14776:	2900      	cmp	r1, #0
   14778:	da00      	bge.n	1477c <__ieee754_pow+0x54>
   1477a:	e07e      	b.n	1487a <__ieee754_pow+0x152>
   1477c:	2800      	cmp	r0, #0
   1477e:	d133      	bne.n	147e8 <__ieee754_pow+0xc0>
   14780:	4b5f      	ldr	r3, [pc, #380]	; (14900 <__ieee754_pow+0x1d8>)
   14782:	429c      	cmp	r4, r3
   14784:	d100      	bne.n	14788 <__ieee754_pow+0x60>
   14786:	e096      	b.n	148b6 <__ieee754_pow+0x18e>
   14788:	4b5e      	ldr	r3, [pc, #376]	; (14904 <__ieee754_pow+0x1dc>)
   1478a:	429c      	cmp	r4, r3
   1478c:	d06a      	beq.n	14864 <__ieee754_pow+0x13c>
   1478e:	9802      	ldr	r0, [sp, #8]
   14790:	2380      	movs	r3, #128	; 0x80
   14792:	05db      	lsls	r3, r3, #23
   14794:	4298      	cmp	r0, r3
   14796:	d101      	bne.n	1479c <__ieee754_pow+0x74>
   14798:	f000 fbe1 	bl	14f5e <__ieee754_pow+0x836>
   1479c:	4b5a      	ldr	r3, [pc, #360]	; (14908 <__ieee754_pow+0x1e0>)
   1479e:	9902      	ldr	r1, [sp, #8]
   147a0:	4299      	cmp	r1, r3
   147a2:	d121      	bne.n	147e8 <__ieee754_pow+0xc0>
   147a4:	9a04      	ldr	r2, [sp, #16]
   147a6:	2a00      	cmp	r2, #0
   147a8:	db1e      	blt.n	147e8 <__ieee754_pow+0xc0>
   147aa:	1c29      	adds	r1, r5, #0
   147ac:	9800      	ldr	r0, [sp, #0]
   147ae:	f000 fd4b 	bl	15248 <__ieee754_sqrt>
   147b2:	1c06      	adds	r6, r0, #0
   147b4:	1c0d      	adds	r5, r1, #0
   147b6:	e008      	b.n	147ca <__ieee754_pow+0xa2>
   147b8:	2e00      	cmp	r6, #0
   147ba:	d0d4      	beq.n	14766 <__ieee754_pow+0x3e>
   147bc:	4a53      	ldr	r2, [pc, #332]	; (1490c <__ieee754_pow+0x1e4>)
   147be:	1c13      	adds	r3, r2, #0
   147c0:	4443      	add	r3, r8
   147c2:	4333      	orrs	r3, r6
   147c4:	d10a      	bne.n	147dc <__ieee754_pow+0xb4>
   147c6:	4d4f      	ldr	r5, [pc, #316]	; (14904 <__ieee754_pow+0x1dc>)
   147c8:	2600      	movs	r6, #0
   147ca:	1c30      	adds	r0, r6, #0
   147cc:	1c29      	adds	r1, r5, #0
   147ce:	b00f      	add	sp, #60	; 0x3c
   147d0:	bc3c      	pop	{r2, r3, r4, r5}
   147d2:	4690      	mov	r8, r2
   147d4:	4699      	mov	r9, r3
   147d6:	46a2      	mov	sl, r4
   147d8:	46ab      	mov	fp, r5
   147da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147dc:	484c      	ldr	r0, [pc, #304]	; (14910 <__ieee754_pow+0x1e8>)
   147de:	f000 fe57 	bl	15490 <nan>
   147e2:	1c06      	adds	r6, r0, #0
   147e4:	1c0d      	adds	r5, r1, #0
   147e6:	e7f0      	b.n	147ca <__ieee754_pow+0xa2>
   147e8:	9800      	ldr	r0, [sp, #0]
   147ea:	1c29      	adds	r1, r5, #0
   147ec:	f000 fe12 	bl	15414 <fabs>
   147f0:	4653      	mov	r3, sl
   147f2:	9006      	str	r0, [sp, #24]
   147f4:	468c      	mov	ip, r1
   147f6:	2b00      	cmp	r3, #0
   147f8:	d020      	beq.n	1483c <__ieee754_pow+0x114>
   147fa:	0ffb      	lsrs	r3, r7, #31
   147fc:	3b01      	subs	r3, #1
   147fe:	9304      	str	r3, [sp, #16]
   14800:	9e04      	ldr	r6, [sp, #16]
   14802:	9b08      	ldr	r3, [sp, #32]
   14804:	4333      	orrs	r3, r6
   14806:	d06a      	beq.n	148de <__ieee754_pow+0x1b6>
   14808:	4b42      	ldr	r3, [pc, #264]	; (14914 <__ieee754_pow+0x1ec>)
   1480a:	429c      	cmp	r4, r3
   1480c:	dc00      	bgt.n	14810 <__ieee754_pow+0xe8>
   1480e:	e08d      	b.n	1492c <__ieee754_pow+0x204>
   14810:	4b41      	ldr	r3, [pc, #260]	; (14918 <__ieee754_pow+0x1f0>)
   14812:	429c      	cmp	r4, r3
   14814:	dc01      	bgt.n	1481a <__ieee754_pow+0xf2>
   14816:	f000 fc35 	bl	15084 <__ieee754_pow+0x95c>
   1481a:	4b40      	ldr	r3, [pc, #256]	; (1491c <__ieee754_pow+0x1f4>)
   1481c:	4598      	cmp	r8, r3
   1481e:	dc00      	bgt.n	14822 <__ieee754_pow+0xfa>
   14820:	e389      	b.n	14f36 <__ieee754_pow+0x80e>
   14822:	9e02      	ldr	r6, [sp, #8]
   14824:	2e00      	cmp	r6, #0
   14826:	dc00      	bgt.n	1482a <__ieee754_pow+0x102>
   14828:	e389      	b.n	14f3e <__ieee754_pow+0x816>
   1482a:	4934      	ldr	r1, [pc, #208]	; (148fc <__ieee754_pow+0x1d4>)
   1482c:	4832      	ldr	r0, [pc, #200]	; (148f8 <__ieee754_pow+0x1d0>)
   1482e:	1c02      	adds	r2, r0, #0
   14830:	1c0b      	adds	r3, r1, #0
   14832:	f002 f883 	bl	1693c <__aeabi_dmul>
   14836:	1c06      	adds	r6, r0, #0
   14838:	1c0d      	adds	r5, r1, #0
   1483a:	e7c6      	b.n	147ca <__ieee754_pow+0xa2>
   1483c:	4640      	mov	r0, r8
   1483e:	2800      	cmp	r0, #0
   14840:	d004      	beq.n	1484c <__ieee754_pow+0x124>
   14842:	4b30      	ldr	r3, [pc, #192]	; (14904 <__ieee754_pow+0x1dc>)
   14844:	00ba      	lsls	r2, r7, #2
   14846:	0892      	lsrs	r2, r2, #2
   14848:	429a      	cmp	r2, r3
   1484a:	d1d6      	bne.n	147fa <__ieee754_pow+0xd2>
   1484c:	9c02      	ldr	r4, [sp, #8]
   1484e:	2c00      	cmp	r4, #0
   14850:	da01      	bge.n	14856 <__ieee754_pow+0x12e>
   14852:	f000 fbc4 	bl	14fde <__ieee754_pow+0x8b6>
   14856:	9e04      	ldr	r6, [sp, #16]
   14858:	2e00      	cmp	r6, #0
   1485a:	da00      	bge.n	1485e <__ieee754_pow+0x136>
   1485c:	e373      	b.n	14f46 <__ieee754_pow+0x81e>
   1485e:	9e06      	ldr	r6, [sp, #24]
   14860:	4665      	mov	r5, ip
   14862:	e7b2      	b.n	147ca <__ieee754_pow+0xa2>
   14864:	9c02      	ldr	r4, [sp, #8]
   14866:	2c00      	cmp	r4, #0
   14868:	da01      	bge.n	1486e <__ieee754_pow+0x146>
   1486a:	f000 fc76 	bl	1515a <__ieee754_pow+0xa32>
   1486e:	9e00      	ldr	r6, [sp, #0]
   14870:	e7ab      	b.n	147ca <__ieee754_pow+0xa2>
   14872:	2800      	cmp	r0, #0
   14874:	d100      	bne.n	14878 <__ieee754_pow+0x150>
   14876:	e77b      	b.n	14770 <__ieee754_pow+0x48>
   14878:	e7a0      	b.n	147bc <__ieee754_pow+0x94>
   1487a:	4929      	ldr	r1, [pc, #164]	; (14920 <__ieee754_pow+0x1f8>)
   1487c:	428c      	cmp	r4, r1
   1487e:	dc2b      	bgt.n	148d8 <__ieee754_pow+0x1b0>
   14880:	4926      	ldr	r1, [pc, #152]	; (1491c <__ieee754_pow+0x1f4>)
   14882:	428c      	cmp	r4, r1
   14884:	dc00      	bgt.n	14888 <__ieee754_pow+0x160>
   14886:	e779      	b.n	1477c <__ieee754_pow+0x54>
   14888:	1521      	asrs	r1, r4, #20
   1488a:	468c      	mov	ip, r1
   1488c:	4925      	ldr	r1, [pc, #148]	; (14924 <__ieee754_pow+0x1fc>)
   1488e:	458c      	cmp	ip, r1
   14890:	dc01      	bgt.n	14896 <__ieee754_pow+0x16e>
   14892:	f000 fc86 	bl	151a2 <__ieee754_pow+0xa7a>
   14896:	4b24      	ldr	r3, [pc, #144]	; (14928 <__ieee754_pow+0x200>)
   14898:	4661      	mov	r1, ip
   1489a:	1a5b      	subs	r3, r3, r1
   1489c:	1c11      	adds	r1, r2, #0
   1489e:	40d9      	lsrs	r1, r3
   148a0:	1c0a      	adds	r2, r1, #0
   148a2:	409a      	lsls	r2, r3
   148a4:	4282      	cmp	r2, r0
   148a6:	d000      	beq.n	148aa <__ieee754_pow+0x182>
   148a8:	e768      	b.n	1477c <__ieee754_pow+0x54>
   148aa:	2201      	movs	r2, #1
   148ac:	400a      	ands	r2, r1
   148ae:	2302      	movs	r3, #2
   148b0:	1a9b      	subs	r3, r3, r2
   148b2:	9308      	str	r3, [sp, #32]
   148b4:	e762      	b.n	1477c <__ieee754_pow+0x54>
   148b6:	4a15      	ldr	r2, [pc, #84]	; (1490c <__ieee754_pow+0x1e4>)
   148b8:	1c13      	adds	r3, r2, #0
   148ba:	4443      	add	r3, r8
   148bc:	4333      	orrs	r3, r6
   148be:	d100      	bne.n	148c2 <__ieee754_pow+0x19a>
   148c0:	e781      	b.n	147c6 <__ieee754_pow+0x9e>
   148c2:	4b16      	ldr	r3, [pc, #88]	; (1491c <__ieee754_pow+0x1f4>)
   148c4:	4598      	cmp	r8, r3
   148c6:	dc00      	bgt.n	148ca <__ieee754_pow+0x1a2>
   148c8:	e37f      	b.n	14fca <__ieee754_pow+0x8a2>
   148ca:	9c02      	ldr	r4, [sp, #8]
   148cc:	2c00      	cmp	r4, #0
   148ce:	da00      	bge.n	148d2 <__ieee754_pow+0x1aa>
   148d0:	e335      	b.n	14f3e <__ieee754_pow+0x816>
   148d2:	465e      	mov	r6, fp
   148d4:	464d      	mov	r5, r9
   148d6:	e778      	b.n	147ca <__ieee754_pow+0xa2>
   148d8:	2102      	movs	r1, #2
   148da:	9108      	str	r1, [sp, #32]
   148dc:	e74e      	b.n	1477c <__ieee754_pow+0x54>
   148de:	9800      	ldr	r0, [sp, #0]
   148e0:	9a00      	ldr	r2, [sp, #0]
   148e2:	1c29      	adds	r1, r5, #0
   148e4:	1c2b      	adds	r3, r5, #0
   148e6:	f002 fab9 	bl	16e5c <__aeabi_dsub>
   148ea:	1c02      	adds	r2, r0, #0
   148ec:	1c0b      	adds	r3, r1, #0
   148ee:	f001 fbbb 	bl	16068 <__aeabi_ddiv>
   148f2:	1c06      	adds	r6, r0, #0
   148f4:	1c0d      	adds	r5, r1, #0
   148f6:	e768      	b.n	147ca <__ieee754_pow+0xa2>
   148f8:	8800759c 	.word	0x8800759c
   148fc:	7e37e43c 	.word	0x7e37e43c
   14900:	7ff00000 	.word	0x7ff00000
   14904:	3ff00000 	.word	0x3ff00000
   14908:	3fe00000 	.word	0x3fe00000
   1490c:	c0100000 	.word	0xc0100000
   14910:	000185e8 	.word	0x000185e8
   14914:	41e00000 	.word	0x41e00000
   14918:	43f00000 	.word	0x43f00000
   1491c:	3fefffff 	.word	0x3fefffff
   14920:	433fffff 	.word	0x433fffff
   14924:	00000413 	.word	0x00000413
   14928:	00000433 	.word	0x00000433
   1492c:	4ae2      	ldr	r2, [pc, #904]	; (14cb8 <__ieee754_pow+0x590>)
   1492e:	2300      	movs	r3, #0
   14930:	4590      	cmp	r8, r2
   14932:	dc09      	bgt.n	14948 <__ieee754_pow+0x220>
   14934:	9806      	ldr	r0, [sp, #24]
   14936:	4bc5      	ldr	r3, [pc, #788]	; (14c4c <__ieee754_pow+0x524>)
   14938:	4ac3      	ldr	r2, [pc, #780]	; (14c48 <__ieee754_pow+0x520>)
   1493a:	4661      	mov	r1, ip
   1493c:	f001 fffe 	bl	1693c <__aeabi_dmul>
   14940:	2335      	movs	r3, #53	; 0x35
   14942:	9006      	str	r0, [sp, #24]
   14944:	4688      	mov	r8, r1
   14946:	425b      	negs	r3, r3
   14948:	4640      	mov	r0, r8
   1494a:	49dc      	ldr	r1, [pc, #880]	; (14cbc <__ieee754_pow+0x594>)
   1494c:	1502      	asrs	r2, r0, #20
   1494e:	1852      	adds	r2, r2, r1
   14950:	18d2      	adds	r2, r2, r3
   14952:	4692      	mov	sl, r2
   14954:	0303      	lsls	r3, r0, #12
   14956:	4dda      	ldr	r5, [pc, #872]	; (14cc0 <__ieee754_pow+0x598>)
   14958:	4ada      	ldr	r2, [pc, #872]	; (14cc4 <__ieee754_pow+0x59c>)
   1495a:	0b1b      	lsrs	r3, r3, #12
   1495c:	431d      	orrs	r5, r3
   1495e:	4293      	cmp	r3, r2
   14960:	dc01      	bgt.n	14966 <__ieee754_pow+0x23e>
   14962:	f000 fbf6 	bl	15152 <__ieee754_pow+0xa2a>
   14966:	4ad8      	ldr	r2, [pc, #864]	; (14cc8 <__ieee754_pow+0x5a0>)
   14968:	4293      	cmp	r3, r2
   1496a:	dc01      	bgt.n	14970 <__ieee754_pow+0x248>
   1496c:	f000 fc36 	bl	151dc <__ieee754_pow+0xab4>
   14970:	4bd6      	ldr	r3, [pc, #856]	; (14ccc <__ieee754_pow+0x5a4>)
   14972:	2201      	movs	r2, #1
   14974:	4492      	add	sl, r2
   14976:	18ed      	adds	r5, r5, r3
   14978:	2400      	movs	r4, #0
   1497a:	2100      	movs	r1, #0
   1497c:	9a06      	ldr	r2, [sp, #24]
   1497e:	1c2b      	adds	r3, r5, #0
   14980:	9206      	str	r2, [sp, #24]
   14982:	9307      	str	r3, [sp, #28]
   14984:	00c9      	lsls	r1, r1, #3
   14986:	4bd2      	ldr	r3, [pc, #840]	; (14cd0 <__ieee754_pow+0x5a8>)
   14988:	4688      	mov	r8, r1
   1498a:	4443      	add	r3, r8
   1498c:	6818      	ldr	r0, [r3, #0]
   1498e:	6859      	ldr	r1, [r3, #4]
   14990:	900a      	str	r0, [sp, #40]	; 0x28
   14992:	910b      	str	r1, [sp, #44]	; 0x2c
   14994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14998:	9806      	ldr	r0, [sp, #24]
   1499a:	9907      	ldr	r1, [sp, #28]
   1499c:	f002 fa5e 	bl	16e5c <__aeabi_dsub>
   149a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   149a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149a4:	1c06      	adds	r6, r0, #0
   149a6:	1c0f      	adds	r7, r1, #0
   149a8:	9806      	ldr	r0, [sp, #24]
   149aa:	9907      	ldr	r1, [sp, #28]
   149ac:	f001 f83a 	bl	15a24 <__aeabi_dadd>
   149b0:	1c02      	adds	r2, r0, #0
   149b2:	1c0b      	adds	r3, r1, #0
   149b4:	48a6      	ldr	r0, [pc, #664]	; (14c50 <__ieee754_pow+0x528>)
   149b6:	49a7      	ldr	r1, [pc, #668]	; (14c54 <__ieee754_pow+0x52c>)
   149b8:	f001 fb56 	bl	16068 <__aeabi_ddiv>
   149bc:	900c      	str	r0, [sp, #48]	; 0x30
   149be:	910d      	str	r1, [sp, #52]	; 0x34
   149c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   149c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   149c4:	1c30      	adds	r0, r6, #0
   149c6:	1c39      	adds	r1, r7, #0
   149c8:	f001 ffb8 	bl	1693c <__aeabi_dmul>
   149cc:	9002      	str	r0, [sp, #8]
   149ce:	9103      	str	r1, [sp, #12]
   149d0:	1c0b      	adds	r3, r1, #0
   149d2:	2180      	movs	r1, #128	; 0x80
   149d4:	0589      	lsls	r1, r1, #22
   149d6:	106d      	asrs	r5, r5, #1
   149d8:	2080      	movs	r0, #128	; 0x80
   149da:	2200      	movs	r2, #0
   149dc:	430d      	orrs	r5, r1
   149de:	0300      	lsls	r0, r0, #12
   149e0:	9200      	str	r2, [sp, #0]
   149e2:	9301      	str	r3, [sp, #4]
   149e4:	4a9c      	ldr	r2, [pc, #624]	; (14c58 <__ieee754_pow+0x530>)
   149e6:	4b9d      	ldr	r3, [pc, #628]	; (14c5c <__ieee754_pow+0x534>)
   149e8:	1829      	adds	r1, r5, r0
   149ea:	190b      	adds	r3, r1, r4
   149ec:	9800      	ldr	r0, [sp, #0]
   149ee:	9901      	ldr	r1, [sp, #4]
   149f0:	1c14      	adds	r4, r2, #0
   149f2:	1c1d      	adds	r5, r3, #0
   149f4:	f001 ffa2 	bl	1693c <__aeabi_dmul>
   149f8:	1c02      	adds	r2, r0, #0
   149fa:	1c0b      	adds	r3, r1, #0
   149fc:	1c30      	adds	r0, r6, #0
   149fe:	1c39      	adds	r1, r7, #0
   14a00:	f002 fa2c 	bl	16e5c <__aeabi_dsub>
   14a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a08:	1c06      	adds	r6, r0, #0
   14a0a:	1c0f      	adds	r7, r1, #0
   14a0c:	1c20      	adds	r0, r4, #0
   14a0e:	1c29      	adds	r1, r5, #0
   14a10:	f002 fa24 	bl	16e5c <__aeabi_dsub>
   14a14:	1c02      	adds	r2, r0, #0
   14a16:	1c0b      	adds	r3, r1, #0
   14a18:	9806      	ldr	r0, [sp, #24]
   14a1a:	9907      	ldr	r1, [sp, #28]
   14a1c:	f002 fa1e 	bl	16e5c <__aeabi_dsub>
   14a20:	1c02      	adds	r2, r0, #0
   14a22:	1c0b      	adds	r3, r1, #0
   14a24:	9800      	ldr	r0, [sp, #0]
   14a26:	9901      	ldr	r1, [sp, #4]
   14a28:	f001 ff88 	bl	1693c <__aeabi_dmul>
   14a2c:	1c02      	adds	r2, r0, #0
   14a2e:	1c0b      	adds	r3, r1, #0
   14a30:	1c30      	adds	r0, r6, #0
   14a32:	1c39      	adds	r1, r7, #0
   14a34:	f002 fa12 	bl	16e5c <__aeabi_dsub>
   14a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14a3c:	f001 ff7e 	bl	1693c <__aeabi_dmul>
   14a40:	9006      	str	r0, [sp, #24]
   14a42:	9107      	str	r1, [sp, #28]
   14a44:	9802      	ldr	r0, [sp, #8]
   14a46:	9903      	ldr	r1, [sp, #12]
   14a48:	1c02      	adds	r2, r0, #0
   14a4a:	1c0b      	adds	r3, r1, #0
   14a4c:	f001 ff76 	bl	1693c <__aeabi_dmul>
   14a50:	1c04      	adds	r4, r0, #0
   14a52:	1c0d      	adds	r5, r1, #0
   14a54:	1c22      	adds	r2, r4, #0
   14a56:	1c2b      	adds	r3, r5, #0
   14a58:	f001 ff70 	bl	1693c <__aeabi_dmul>
   14a5c:	4a80      	ldr	r2, [pc, #512]	; (14c60 <__ieee754_pow+0x538>)
   14a5e:	4b81      	ldr	r3, [pc, #516]	; (14c64 <__ieee754_pow+0x53c>)
   14a60:	1c06      	adds	r6, r0, #0
   14a62:	1c0f      	adds	r7, r1, #0
   14a64:	1c20      	adds	r0, r4, #0
   14a66:	1c29      	adds	r1, r5, #0
   14a68:	f001 ff68 	bl	1693c <__aeabi_dmul>
   14a6c:	4a7e      	ldr	r2, [pc, #504]	; (14c68 <__ieee754_pow+0x540>)
   14a6e:	4b7f      	ldr	r3, [pc, #508]	; (14c6c <__ieee754_pow+0x544>)
   14a70:	f000 ffd8 	bl	15a24 <__aeabi_dadd>
   14a74:	1c22      	adds	r2, r4, #0
   14a76:	1c2b      	adds	r3, r5, #0
   14a78:	f001 ff60 	bl	1693c <__aeabi_dmul>
   14a7c:	4a7c      	ldr	r2, [pc, #496]	; (14c70 <__ieee754_pow+0x548>)
   14a7e:	4b7d      	ldr	r3, [pc, #500]	; (14c74 <__ieee754_pow+0x54c>)
   14a80:	f000 ffd0 	bl	15a24 <__aeabi_dadd>
   14a84:	1c22      	adds	r2, r4, #0
   14a86:	1c2b      	adds	r3, r5, #0
   14a88:	f001 ff58 	bl	1693c <__aeabi_dmul>
   14a8c:	4a7a      	ldr	r2, [pc, #488]	; (14c78 <__ieee754_pow+0x550>)
   14a8e:	4b7b      	ldr	r3, [pc, #492]	; (14c7c <__ieee754_pow+0x554>)
   14a90:	f000 ffc8 	bl	15a24 <__aeabi_dadd>
   14a94:	1c22      	adds	r2, r4, #0
   14a96:	1c2b      	adds	r3, r5, #0
   14a98:	f001 ff50 	bl	1693c <__aeabi_dmul>
   14a9c:	4a78      	ldr	r2, [pc, #480]	; (14c80 <__ieee754_pow+0x558>)
   14a9e:	4b79      	ldr	r3, [pc, #484]	; (14c84 <__ieee754_pow+0x55c>)
   14aa0:	f000 ffc0 	bl	15a24 <__aeabi_dadd>
   14aa4:	1c22      	adds	r2, r4, #0
   14aa6:	1c2b      	adds	r3, r5, #0
   14aa8:	f001 ff48 	bl	1693c <__aeabi_dmul>
   14aac:	4a76      	ldr	r2, [pc, #472]	; (14c88 <__ieee754_pow+0x560>)
   14aae:	4b77      	ldr	r3, [pc, #476]	; (14c8c <__ieee754_pow+0x564>)
   14ab0:	f000 ffb8 	bl	15a24 <__aeabi_dadd>
   14ab4:	1c02      	adds	r2, r0, #0
   14ab6:	1c0b      	adds	r3, r1, #0
   14ab8:	1c30      	adds	r0, r6, #0
   14aba:	1c39      	adds	r1, r7, #0
   14abc:	f001 ff3e 	bl	1693c <__aeabi_dmul>
   14ac0:	9a02      	ldr	r2, [sp, #8]
   14ac2:	9b03      	ldr	r3, [sp, #12]
   14ac4:	1c04      	adds	r4, r0, #0
   14ac6:	1c0d      	adds	r5, r1, #0
   14ac8:	9800      	ldr	r0, [sp, #0]
   14aca:	9901      	ldr	r1, [sp, #4]
   14acc:	f000 ffaa 	bl	15a24 <__aeabi_dadd>
   14ad0:	9a06      	ldr	r2, [sp, #24]
   14ad2:	9b07      	ldr	r3, [sp, #28]
   14ad4:	f001 ff32 	bl	1693c <__aeabi_dmul>
   14ad8:	1c22      	adds	r2, r4, #0
   14ada:	1c2b      	adds	r3, r5, #0
   14adc:	f000 ffa2 	bl	15a24 <__aeabi_dadd>
   14ae0:	1c06      	adds	r6, r0, #0
   14ae2:	1c0f      	adds	r7, r1, #0
   14ae4:	9800      	ldr	r0, [sp, #0]
   14ae6:	9901      	ldr	r1, [sp, #4]
   14ae8:	1c02      	adds	r2, r0, #0
   14aea:	1c0b      	adds	r3, r1, #0
   14aec:	f001 ff26 	bl	1693c <__aeabi_dmul>
   14af0:	4a67      	ldr	r2, [pc, #412]	; (14c90 <__ieee754_pow+0x568>)
   14af2:	4b68      	ldr	r3, [pc, #416]	; (14c94 <__ieee754_pow+0x56c>)
   14af4:	900a      	str	r0, [sp, #40]	; 0x28
   14af6:	910b      	str	r1, [sp, #44]	; 0x2c
   14af8:	f000 ff94 	bl	15a24 <__aeabi_dadd>
   14afc:	1c32      	adds	r2, r6, #0
   14afe:	1c3b      	adds	r3, r7, #0
   14b00:	f000 ff90 	bl	15a24 <__aeabi_dadd>
   14b04:	2400      	movs	r4, #0
   14b06:	1c0d      	adds	r5, r1, #0
   14b08:	1c22      	adds	r2, r4, #0
   14b0a:	9800      	ldr	r0, [sp, #0]
   14b0c:	9901      	ldr	r1, [sp, #4]
   14b0e:	1c2b      	adds	r3, r5, #0
   14b10:	f001 ff14 	bl	1693c <__aeabi_dmul>
   14b14:	1c22      	adds	r2, r4, #0
   14b16:	1c2b      	adds	r3, r5, #0
   14b18:	9000      	str	r0, [sp, #0]
   14b1a:	9101      	str	r1, [sp, #4]
   14b1c:	9806      	ldr	r0, [sp, #24]
   14b1e:	9907      	ldr	r1, [sp, #28]
   14b20:	f001 ff0c 	bl	1693c <__aeabi_dmul>
   14b24:	4a5a      	ldr	r2, [pc, #360]	; (14c90 <__ieee754_pow+0x568>)
   14b26:	4b5b      	ldr	r3, [pc, #364]	; (14c94 <__ieee754_pow+0x56c>)
   14b28:	9006      	str	r0, [sp, #24]
   14b2a:	9107      	str	r1, [sp, #28]
   14b2c:	1c20      	adds	r0, r4, #0
   14b2e:	1c29      	adds	r1, r5, #0
   14b30:	f002 f994 	bl	16e5c <__aeabi_dsub>
   14b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14b38:	f002 f990 	bl	16e5c <__aeabi_dsub>
   14b3c:	1c02      	adds	r2, r0, #0
   14b3e:	1c0b      	adds	r3, r1, #0
   14b40:	1c30      	adds	r0, r6, #0
   14b42:	1c39      	adds	r1, r7, #0
   14b44:	f002 f98a 	bl	16e5c <__aeabi_dsub>
   14b48:	9a02      	ldr	r2, [sp, #8]
   14b4a:	9b03      	ldr	r3, [sp, #12]
   14b4c:	f001 fef6 	bl	1693c <__aeabi_dmul>
   14b50:	1c02      	adds	r2, r0, #0
   14b52:	1c0b      	adds	r3, r1, #0
   14b54:	9806      	ldr	r0, [sp, #24]
   14b56:	9907      	ldr	r1, [sp, #28]
   14b58:	f000 ff64 	bl	15a24 <__aeabi_dadd>
   14b5c:	1c06      	adds	r6, r0, #0
   14b5e:	1c0f      	adds	r7, r1, #0
   14b60:	1c32      	adds	r2, r6, #0
   14b62:	1c3b      	adds	r3, r7, #0
   14b64:	9800      	ldr	r0, [sp, #0]
   14b66:	9901      	ldr	r1, [sp, #4]
   14b68:	f000 ff5c 	bl	15a24 <__aeabi_dadd>
   14b6c:	4a4a      	ldr	r2, [pc, #296]	; (14c98 <__ieee754_pow+0x570>)
   14b6e:	4b4b      	ldr	r3, [pc, #300]	; (14c9c <__ieee754_pow+0x574>)
   14b70:	2400      	movs	r4, #0
   14b72:	1c20      	adds	r0, r4, #0
   14b74:	1c0d      	adds	r5, r1, #0
   14b76:	f001 fee1 	bl	1693c <__aeabi_dmul>
   14b7a:	4a49      	ldr	r2, [pc, #292]	; (14ca0 <__ieee754_pow+0x578>)
   14b7c:	4b49      	ldr	r3, [pc, #292]	; (14ca4 <__ieee754_pow+0x57c>)
   14b7e:	9006      	str	r0, [sp, #24]
   14b80:	9107      	str	r1, [sp, #28]
   14b82:	1c20      	adds	r0, r4, #0
   14b84:	1c29      	adds	r1, r5, #0
   14b86:	f001 fed9 	bl	1693c <__aeabi_dmul>
   14b8a:	9a00      	ldr	r2, [sp, #0]
   14b8c:	9b01      	ldr	r3, [sp, #4]
   14b8e:	9002      	str	r0, [sp, #8]
   14b90:	9103      	str	r1, [sp, #12]
   14b92:	1c20      	adds	r0, r4, #0
   14b94:	1c29      	adds	r1, r5, #0
   14b96:	f002 f961 	bl	16e5c <__aeabi_dsub>
   14b9a:	1c02      	adds	r2, r0, #0
   14b9c:	1c0b      	adds	r3, r1, #0
   14b9e:	1c30      	adds	r0, r6, #0
   14ba0:	1c39      	adds	r1, r7, #0
   14ba2:	f002 f95b 	bl	16e5c <__aeabi_dsub>
   14ba6:	4a40      	ldr	r2, [pc, #256]	; (14ca8 <__ieee754_pow+0x580>)
   14ba8:	4b40      	ldr	r3, [pc, #256]	; (14cac <__ieee754_pow+0x584>)
   14baa:	f001 fec7 	bl	1693c <__aeabi_dmul>
   14bae:	1c02      	adds	r2, r0, #0
   14bb0:	1c0b      	adds	r3, r1, #0
   14bb2:	9802      	ldr	r0, [sp, #8]
   14bb4:	9903      	ldr	r1, [sp, #12]
   14bb6:	f000 ff35 	bl	15a24 <__aeabi_dadd>
   14bba:	4b46      	ldr	r3, [pc, #280]	; (14cd4 <__ieee754_pow+0x5ac>)
   14bbc:	4443      	add	r3, r8
   14bbe:	681a      	ldr	r2, [r3, #0]
   14bc0:	685b      	ldr	r3, [r3, #4]
   14bc2:	f000 ff2f 	bl	15a24 <__aeabi_dadd>
   14bc6:	1c06      	adds	r6, r0, #0
   14bc8:	4650      	mov	r0, sl
   14bca:	1c0f      	adds	r7, r1, #0
   14bcc:	f002 fcae 	bl	1752c <__aeabi_i2d>
   14bd0:	1c0d      	adds	r5, r1, #0
   14bd2:	4941      	ldr	r1, [pc, #260]	; (14cd8 <__ieee754_pow+0x5b0>)
   14bd4:	1c04      	adds	r4, r0, #0
   14bd6:	4441      	add	r1, r8
   14bd8:	680a      	ldr	r2, [r1, #0]
   14bda:	684b      	ldr	r3, [r1, #4]
   14bdc:	9806      	ldr	r0, [sp, #24]
   14bde:	9907      	ldr	r1, [sp, #28]
   14be0:	9202      	str	r2, [sp, #8]
   14be2:	9303      	str	r3, [sp, #12]
   14be4:	1c32      	adds	r2, r6, #0
   14be6:	1c3b      	adds	r3, r7, #0
   14be8:	f000 ff1c 	bl	15a24 <__aeabi_dadd>
   14bec:	9a02      	ldr	r2, [sp, #8]
   14bee:	9b03      	ldr	r3, [sp, #12]
   14bf0:	f000 ff18 	bl	15a24 <__aeabi_dadd>
   14bf4:	1c22      	adds	r2, r4, #0
   14bf6:	1c2b      	adds	r3, r5, #0
   14bf8:	f000 ff14 	bl	15a24 <__aeabi_dadd>
   14bfc:	2200      	movs	r2, #0
   14bfe:	1c0b      	adds	r3, r1, #0
   14c00:	9200      	str	r2, [sp, #0]
   14c02:	9301      	str	r3, [sp, #4]
   14c04:	1c10      	adds	r0, r2, #0
   14c06:	1c2b      	adds	r3, r5, #0
   14c08:	1c22      	adds	r2, r4, #0
   14c0a:	f002 f927 	bl	16e5c <__aeabi_dsub>
   14c0e:	9a02      	ldr	r2, [sp, #8]
   14c10:	9b03      	ldr	r3, [sp, #12]
   14c12:	f002 f923 	bl	16e5c <__aeabi_dsub>
   14c16:	9a06      	ldr	r2, [sp, #24]
   14c18:	9b07      	ldr	r3, [sp, #28]
   14c1a:	f002 f91f 	bl	16e5c <__aeabi_dsub>
   14c1e:	1c02      	adds	r2, r0, #0
   14c20:	1c0b      	adds	r3, r1, #0
   14c22:	1c30      	adds	r0, r6, #0
   14c24:	1c39      	adds	r1, r7, #0
   14c26:	f002 f919 	bl	16e5c <__aeabi_dsub>
   14c2a:	9002      	str	r0, [sp, #8]
   14c2c:	9103      	str	r1, [sp, #12]
   14c2e:	9b08      	ldr	r3, [sp, #32]
   14c30:	9c04      	ldr	r4, [sp, #16]
   14c32:	3b01      	subs	r3, #1
   14c34:	4323      	orrs	r3, r4
   14c36:	d000      	beq.n	14c3a <__ieee754_pow+0x512>
   14c38:	e1c2      	b.n	14fc0 <__ieee754_pow+0x898>
   14c3a:	481d      	ldr	r0, [pc, #116]	; (14cb0 <__ieee754_pow+0x588>)
   14c3c:	491d      	ldr	r1, [pc, #116]	; (14cb4 <__ieee754_pow+0x58c>)
   14c3e:	9004      	str	r0, [sp, #16]
   14c40:	9105      	str	r1, [sp, #20]
   14c42:	e04b      	b.n	14cdc <__ieee754_pow+0x5b4>
   14c44:	46c0      	nop			; (mov r8, r8)
   14c46:	46c0      	nop			; (mov r8, r8)
   14c48:	00000000 	.word	0x00000000
   14c4c:	43400000 	.word	0x43400000
   14c50:	00000000 	.word	0x00000000
   14c54:	3ff00000 	.word	0x3ff00000
	...
   14c60:	4a454eef 	.word	0x4a454eef
   14c64:	3fca7e28 	.word	0x3fca7e28
   14c68:	93c9db65 	.word	0x93c9db65
   14c6c:	3fcd864a 	.word	0x3fcd864a
   14c70:	a91d4101 	.word	0xa91d4101
   14c74:	3fd17460 	.word	0x3fd17460
   14c78:	518f264d 	.word	0x518f264d
   14c7c:	3fd55555 	.word	0x3fd55555
   14c80:	db6fabff 	.word	0xdb6fabff
   14c84:	3fdb6db6 	.word	0x3fdb6db6
   14c88:	33333303 	.word	0x33333303
   14c8c:	3fe33333 	.word	0x3fe33333
   14c90:	00000000 	.word	0x00000000
   14c94:	40080000 	.word	0x40080000
   14c98:	e0000000 	.word	0xe0000000
   14c9c:	3feec709 	.word	0x3feec709
   14ca0:	145b01f5 	.word	0x145b01f5
   14ca4:	be3e2fe0 	.word	0xbe3e2fe0
   14ca8:	dc3a03fd 	.word	0xdc3a03fd
   14cac:	3feec709 	.word	0x3feec709
   14cb0:	00000000 	.word	0x00000000
   14cb4:	bff00000 	.word	0xbff00000
   14cb8:	000fffff 	.word	0x000fffff
   14cbc:	fffffc01 	.word	0xfffffc01
   14cc0:	3ff00000 	.word	0x3ff00000
   14cc4:	0003988e 	.word	0x0003988e
   14cc8:	000bb679 	.word	0x000bb679
   14ccc:	fff00000 	.word	0xfff00000
   14cd0:	000185d8 	.word	0x000185d8
   14cd4:	000185c8 	.word	0x000185c8
   14cd8:	000185b8 	.word	0x000185b8
   14cdc:	2600      	movs	r6, #0
   14cde:	1c32      	adds	r2, r6, #0
   14ce0:	464b      	mov	r3, r9
   14ce2:	4658      	mov	r0, fp
   14ce4:	4649      	mov	r1, r9
   14ce6:	f002 f8b9 	bl	16e5c <__aeabi_dsub>
   14cea:	9a00      	ldr	r2, [sp, #0]
   14cec:	9b01      	ldr	r3, [sp, #4]
   14cee:	f001 fe25 	bl	1693c <__aeabi_dmul>
   14cf2:	9a02      	ldr	r2, [sp, #8]
   14cf4:	9b03      	ldr	r3, [sp, #12]
   14cf6:	1c04      	adds	r4, r0, #0
   14cf8:	1c0d      	adds	r5, r1, #0
   14cfa:	4658      	mov	r0, fp
   14cfc:	4649      	mov	r1, r9
   14cfe:	f001 fe1d 	bl	1693c <__aeabi_dmul>
   14d02:	1c02      	adds	r2, r0, #0
   14d04:	1c0b      	adds	r3, r1, #0
   14d06:	1c20      	adds	r0, r4, #0
   14d08:	1c29      	adds	r1, r5, #0
   14d0a:	f000 fe8b 	bl	15a24 <__aeabi_dadd>
   14d0e:	9a00      	ldr	r2, [sp, #0]
   14d10:	9b01      	ldr	r3, [sp, #4]
   14d12:	9002      	str	r0, [sp, #8]
   14d14:	9103      	str	r1, [sp, #12]
   14d16:	1c30      	adds	r0, r6, #0
   14d18:	4649      	mov	r1, r9
   14d1a:	f001 fe0f 	bl	1693c <__aeabi_dmul>
   14d1e:	9000      	str	r0, [sp, #0]
   14d20:	9101      	str	r1, [sp, #4]
   14d22:	9a00      	ldr	r2, [sp, #0]
   14d24:	9b01      	ldr	r3, [sp, #4]
   14d26:	9802      	ldr	r0, [sp, #8]
   14d28:	9903      	ldr	r1, [sp, #12]
   14d2a:	f000 fe7b 	bl	15a24 <__aeabi_dadd>
   14d2e:	4bcc      	ldr	r3, [pc, #816]	; (15060 <__ieee754_pow+0x938>)
   14d30:	1c04      	adds	r4, r0, #0
   14d32:	1c0d      	adds	r5, r1, #0
   14d34:	1c0f      	adds	r7, r1, #0
   14d36:	4688      	mov	r8, r1
   14d38:	4299      	cmp	r1, r3
   14d3a:	dc00      	bgt.n	14d3e <__ieee754_pow+0x616>
   14d3c:	e119      	b.n	14f72 <__ieee754_pow+0x84a>
   14d3e:	4ac9      	ldr	r2, [pc, #804]	; (15064 <__ieee754_pow+0x93c>)
   14d40:	188b      	adds	r3, r1, r2
   14d42:	4303      	orrs	r3, r0
   14d44:	d000      	beq.n	14d48 <__ieee754_pow+0x620>
   14d46:	e212      	b.n	1516e <__ieee754_pow+0xa46>
   14d48:	4bac      	ldr	r3, [pc, #688]	; (14ffc <__ieee754_pow+0x8d4>)
   14d4a:	4aab      	ldr	r2, [pc, #684]	; (14ff8 <__ieee754_pow+0x8d0>)
   14d4c:	9802      	ldr	r0, [sp, #8]
   14d4e:	9903      	ldr	r1, [sp, #12]
   14d50:	f000 fe68 	bl	15a24 <__aeabi_dadd>
   14d54:	9a00      	ldr	r2, [sp, #0]
   14d56:	9b01      	ldr	r3, [sp, #4]
   14d58:	9008      	str	r0, [sp, #32]
   14d5a:	9109      	str	r1, [sp, #36]	; 0x24
   14d5c:	1c20      	adds	r0, r4, #0
   14d5e:	1c29      	adds	r1, r5, #0
   14d60:	f002 f87c 	bl	16e5c <__aeabi_dsub>
   14d64:	1c02      	adds	r2, r0, #0
   14d66:	1c0b      	adds	r3, r1, #0
   14d68:	9808      	ldr	r0, [sp, #32]
   14d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
   14d6c:	f000 fdae 	bl	158cc <__aeabi_dcmpgt>
   14d70:	46a9      	mov	r9, r5
   14d72:	2800      	cmp	r0, #0
   14d74:	d000      	beq.n	14d78 <__ieee754_pow+0x650>
   14d76:	e1fa      	b.n	1516e <__ieee754_pow+0xa46>
   14d78:	464a      	mov	r2, r9
   14d7a:	4bbb      	ldr	r3, [pc, #748]	; (15068 <__ieee754_pow+0x940>)
   14d7c:	2480      	movs	r4, #128	; 0x80
   14d7e:	1511      	asrs	r1, r2, #20
   14d80:	0364      	lsls	r4, r4, #13
   14d82:	18c9      	adds	r1, r1, r3
   14d84:	1c20      	adds	r0, r4, #0
   14d86:	4108      	asrs	r0, r1
   14d88:	19c1      	adds	r1, r0, r7
   14d8a:	0048      	lsls	r0, r1, #1
   14d8c:	4a9c      	ldr	r2, [pc, #624]	; (15000 <__ieee754_pow+0x8d8>)
   14d8e:	4b9d      	ldr	r3, [pc, #628]	; (15004 <__ieee754_pow+0x8dc>)
   14d90:	1c0b      	adds	r3, r1, #0
   14d92:	0309      	lsls	r1, r1, #12
   14d94:	4eb5      	ldr	r6, [pc, #724]	; (1506c <__ieee754_pow+0x944>)
   14d96:	0b09      	lsrs	r1, r1, #12
   14d98:	0d40      	lsrs	r0, r0, #21
   14d9a:	430c      	orrs	r4, r1
   14d9c:	49b4      	ldr	r1, [pc, #720]	; (15070 <__ieee754_pow+0x948>)
   14d9e:	1985      	adds	r5, r0, r6
   14da0:	4eb4      	ldr	r6, [pc, #720]	; (15074 <__ieee754_pow+0x94c>)
   14da2:	1a08      	subs	r0, r1, r0
   14da4:	4104      	asrs	r4, r0
   14da6:	412e      	asrs	r6, r5
   14da8:	4640      	mov	r0, r8
   14daa:	43b3      	bics	r3, r6
   14dac:	46a1      	mov	r9, r4
   14dae:	2800      	cmp	r0, #0
   14db0:	da00      	bge.n	14db4 <__ieee754_pow+0x68c>
   14db2:	e21e      	b.n	151f2 <__ieee754_pow+0xaca>
   14db4:	9800      	ldr	r0, [sp, #0]
   14db6:	9901      	ldr	r1, [sp, #4]
   14db8:	f002 f850 	bl	16e5c <__aeabi_dsub>
   14dbc:	9000      	str	r0, [sp, #0]
   14dbe:	9101      	str	r1, [sp, #4]
   14dc0:	9a00      	ldr	r2, [sp, #0]
   14dc2:	9b01      	ldr	r3, [sp, #4]
   14dc4:	9802      	ldr	r0, [sp, #8]
   14dc6:	9903      	ldr	r1, [sp, #12]
   14dc8:	f000 fe2c 	bl	15a24 <__aeabi_dadd>
   14dcc:	464a      	mov	r2, r9
   14dce:	0512      	lsls	r2, r2, #20
   14dd0:	4690      	mov	r8, r2
   14dd2:	2400      	movs	r4, #0
   14dd4:	1c20      	adds	r0, r4, #0
   14dd6:	4a8c      	ldr	r2, [pc, #560]	; (15008 <__ieee754_pow+0x8e0>)
   14dd8:	4b8c      	ldr	r3, [pc, #560]	; (1500c <__ieee754_pow+0x8e4>)
   14dda:	1c0d      	adds	r5, r1, #0
   14ddc:	1c0f      	adds	r7, r1, #0
   14dde:	f001 fdad 	bl	1693c <__aeabi_dmul>
   14de2:	9a00      	ldr	r2, [sp, #0]
   14de4:	9b01      	ldr	r3, [sp, #4]
   14de6:	9008      	str	r0, [sp, #32]
   14de8:	9109      	str	r1, [sp, #36]	; 0x24
   14dea:	1c20      	adds	r0, r4, #0
   14dec:	1c29      	adds	r1, r5, #0
   14dee:	f002 f835 	bl	16e5c <__aeabi_dsub>
   14df2:	1c02      	adds	r2, r0, #0
   14df4:	1c0b      	adds	r3, r1, #0
   14df6:	9802      	ldr	r0, [sp, #8]
   14df8:	9903      	ldr	r1, [sp, #12]
   14dfa:	f002 f82f 	bl	16e5c <__aeabi_dsub>
   14dfe:	4a84      	ldr	r2, [pc, #528]	; (15010 <__ieee754_pow+0x8e8>)
   14e00:	4b84      	ldr	r3, [pc, #528]	; (15014 <__ieee754_pow+0x8ec>)
   14e02:	f001 fd9b 	bl	1693c <__aeabi_dmul>
   14e06:	4a84      	ldr	r2, [pc, #528]	; (15018 <__ieee754_pow+0x8f0>)
   14e08:	4b84      	ldr	r3, [pc, #528]	; (1501c <__ieee754_pow+0x8f4>)
   14e0a:	1c26      	adds	r6, r4, #0
   14e0c:	1c0d      	adds	r5, r1, #0
   14e0e:	1c04      	adds	r4, r0, #0
   14e10:	1c39      	adds	r1, r7, #0
   14e12:	1c30      	adds	r0, r6, #0
   14e14:	f001 fd92 	bl	1693c <__aeabi_dmul>
   14e18:	1c02      	adds	r2, r0, #0
   14e1a:	1c0b      	adds	r3, r1, #0
   14e1c:	1c20      	adds	r0, r4, #0
   14e1e:	1c29      	adds	r1, r5, #0
   14e20:	f000 fe00 	bl	15a24 <__aeabi_dadd>
   14e24:	1c04      	adds	r4, r0, #0
   14e26:	1c0d      	adds	r5, r1, #0
   14e28:	1c22      	adds	r2, r4, #0
   14e2a:	1c2b      	adds	r3, r5, #0
   14e2c:	9808      	ldr	r0, [sp, #32]
   14e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e30:	f000 fdf8 	bl	15a24 <__aeabi_dadd>
   14e34:	9a08      	ldr	r2, [sp, #32]
   14e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e38:	1c06      	adds	r6, r0, #0
   14e3a:	1c0f      	adds	r7, r1, #0
   14e3c:	f002 f80e 	bl	16e5c <__aeabi_dsub>
   14e40:	1c02      	adds	r2, r0, #0
   14e42:	1c0b      	adds	r3, r1, #0
   14e44:	1c20      	adds	r0, r4, #0
   14e46:	1c29      	adds	r1, r5, #0
   14e48:	f002 f808 	bl	16e5c <__aeabi_dsub>
   14e4c:	1c32      	adds	r2, r6, #0
   14e4e:	9000      	str	r0, [sp, #0]
   14e50:	9101      	str	r1, [sp, #4]
   14e52:	1c3b      	adds	r3, r7, #0
   14e54:	1c30      	adds	r0, r6, #0
   14e56:	1c39      	adds	r1, r7, #0
   14e58:	f001 fd70 	bl	1693c <__aeabi_dmul>
   14e5c:	4a70      	ldr	r2, [pc, #448]	; (15020 <__ieee754_pow+0x8f8>)
   14e5e:	4b71      	ldr	r3, [pc, #452]	; (15024 <__ieee754_pow+0x8fc>)
   14e60:	1c04      	adds	r4, r0, #0
   14e62:	1c0d      	adds	r5, r1, #0
   14e64:	f001 fd6a 	bl	1693c <__aeabi_dmul>
   14e68:	4a6f      	ldr	r2, [pc, #444]	; (15028 <__ieee754_pow+0x900>)
   14e6a:	4b70      	ldr	r3, [pc, #448]	; (1502c <__ieee754_pow+0x904>)
   14e6c:	f001 fff6 	bl	16e5c <__aeabi_dsub>
   14e70:	1c22      	adds	r2, r4, #0
   14e72:	1c2b      	adds	r3, r5, #0
   14e74:	f001 fd62 	bl	1693c <__aeabi_dmul>
   14e78:	4a6d      	ldr	r2, [pc, #436]	; (15030 <__ieee754_pow+0x908>)
   14e7a:	4b6e      	ldr	r3, [pc, #440]	; (15034 <__ieee754_pow+0x90c>)
   14e7c:	f000 fdd2 	bl	15a24 <__aeabi_dadd>
   14e80:	1c22      	adds	r2, r4, #0
   14e82:	1c2b      	adds	r3, r5, #0
   14e84:	f001 fd5a 	bl	1693c <__aeabi_dmul>
   14e88:	4a6b      	ldr	r2, [pc, #428]	; (15038 <__ieee754_pow+0x910>)
   14e8a:	4b6c      	ldr	r3, [pc, #432]	; (1503c <__ieee754_pow+0x914>)
   14e8c:	f001 ffe6 	bl	16e5c <__aeabi_dsub>
   14e90:	1c22      	adds	r2, r4, #0
   14e92:	1c2b      	adds	r3, r5, #0
   14e94:	f001 fd52 	bl	1693c <__aeabi_dmul>
   14e98:	4a69      	ldr	r2, [pc, #420]	; (15040 <__ieee754_pow+0x918>)
   14e9a:	4b6a      	ldr	r3, [pc, #424]	; (15044 <__ieee754_pow+0x91c>)
   14e9c:	f000 fdc2 	bl	15a24 <__aeabi_dadd>
   14ea0:	1c22      	adds	r2, r4, #0
   14ea2:	1c2b      	adds	r3, r5, #0
   14ea4:	f001 fd4a 	bl	1693c <__aeabi_dmul>
   14ea8:	1c02      	adds	r2, r0, #0
   14eaa:	1c0b      	adds	r3, r1, #0
   14eac:	1c30      	adds	r0, r6, #0
   14eae:	1c39      	adds	r1, r7, #0
   14eb0:	f001 ffd4 	bl	16e5c <__aeabi_dsub>
   14eb4:	1c04      	adds	r4, r0, #0
   14eb6:	1c0d      	adds	r5, r1, #0
   14eb8:	1c22      	adds	r2, r4, #0
   14eba:	1c2b      	adds	r3, r5, #0
   14ebc:	1c30      	adds	r0, r6, #0
   14ebe:	1c39      	adds	r1, r7, #0
   14ec0:	f001 fd3c 	bl	1693c <__aeabi_dmul>
   14ec4:	4a60      	ldr	r2, [pc, #384]	; (15048 <__ieee754_pow+0x920>)
   14ec6:	4b61      	ldr	r3, [pc, #388]	; (1504c <__ieee754_pow+0x924>)
   14ec8:	9002      	str	r0, [sp, #8]
   14eca:	9103      	str	r1, [sp, #12]
   14ecc:	1c20      	adds	r0, r4, #0
   14ece:	1c29      	adds	r1, r5, #0
   14ed0:	f001 ffc4 	bl	16e5c <__aeabi_dsub>
   14ed4:	1c02      	adds	r2, r0, #0
   14ed6:	1c0b      	adds	r3, r1, #0
   14ed8:	9802      	ldr	r0, [sp, #8]
   14eda:	9903      	ldr	r1, [sp, #12]
   14edc:	f001 f8c4 	bl	16068 <__aeabi_ddiv>
   14ee0:	9a00      	ldr	r2, [sp, #0]
   14ee2:	9b01      	ldr	r3, [sp, #4]
   14ee4:	1c04      	adds	r4, r0, #0
   14ee6:	1c0d      	adds	r5, r1, #0
   14ee8:	1c30      	adds	r0, r6, #0
   14eea:	1c39      	adds	r1, r7, #0
   14eec:	f001 fd26 	bl	1693c <__aeabi_dmul>
   14ef0:	9a00      	ldr	r2, [sp, #0]
   14ef2:	9b01      	ldr	r3, [sp, #4]
   14ef4:	f000 fd96 	bl	15a24 <__aeabi_dadd>
   14ef8:	1c02      	adds	r2, r0, #0
   14efa:	1c0b      	adds	r3, r1, #0
   14efc:	1c20      	adds	r0, r4, #0
   14efe:	1c29      	adds	r1, r5, #0
   14f00:	f001 ffac 	bl	16e5c <__aeabi_dsub>
   14f04:	1c32      	adds	r2, r6, #0
   14f06:	1c3b      	adds	r3, r7, #0
   14f08:	f001 ffa8 	bl	16e5c <__aeabi_dsub>
   14f0c:	1c0b      	adds	r3, r1, #0
   14f0e:	1c02      	adds	r2, r0, #0
   14f10:	484f      	ldr	r0, [pc, #316]	; (15050 <__ieee754_pow+0x928>)
   14f12:	4950      	ldr	r1, [pc, #320]	; (15054 <__ieee754_pow+0x92c>)
   14f14:	f001 ffa2 	bl	16e5c <__aeabi_dsub>
   14f18:	4646      	mov	r6, r8
   14f1a:	1873      	adds	r3, r6, r1
   14f1c:	151c      	asrs	r4, r3, #20
   14f1e:	2c00      	cmp	r4, #0
   14f20:	dc00      	bgt.n	14f24 <__ieee754_pow+0x7fc>
   14f22:	e160      	b.n	151e6 <__ieee754_pow+0xabe>
   14f24:	1c02      	adds	r2, r0, #0
   14f26:	9804      	ldr	r0, [sp, #16]
   14f28:	9905      	ldr	r1, [sp, #20]
   14f2a:	f001 fd07 	bl	1693c <__aeabi_dmul>
   14f2e:	1c06      	adds	r6, r0, #0
   14f30:	1c0d      	adds	r5, r1, #0
   14f32:	f7ff fc4a 	bl	147ca <__ieee754_pow+0xa2>
   14f36:	9c02      	ldr	r4, [sp, #8]
   14f38:	2c00      	cmp	r4, #0
   14f3a:	da00      	bge.n	14f3e <__ieee754_pow+0x816>
   14f3c:	e475      	b.n	1482a <__ieee754_pow+0x102>
   14f3e:	2600      	movs	r6, #0
   14f40:	2500      	movs	r5, #0
   14f42:	f7ff fc42 	bl	147ca <__ieee754_pow+0xa2>
   14f46:	484c      	ldr	r0, [pc, #304]	; (15078 <__ieee754_pow+0x950>)
   14f48:	9c08      	ldr	r4, [sp, #32]
   14f4a:	1c03      	adds	r3, r0, #0
   14f4c:	4443      	add	r3, r8
   14f4e:	4323      	orrs	r3, r4
   14f50:	d000      	beq.n	14f54 <__ieee754_pow+0x82c>
   14f52:	e11a      	b.n	1518a <__ieee754_pow+0xa62>
   14f54:	9806      	ldr	r0, [sp, #24]
   14f56:	4661      	mov	r1, ip
   14f58:	9a06      	ldr	r2, [sp, #24]
   14f5a:	4663      	mov	r3, ip
   14f5c:	e4c3      	b.n	148e6 <__ieee754_pow+0x1be>
   14f5e:	1c29      	adds	r1, r5, #0
   14f60:	1c2b      	adds	r3, r5, #0
   14f62:	9800      	ldr	r0, [sp, #0]
   14f64:	9a00      	ldr	r2, [sp, #0]
   14f66:	f001 fce9 	bl	1693c <__aeabi_dmul>
   14f6a:	1c06      	adds	r6, r0, #0
   14f6c:	1c0d      	adds	r5, r1, #0
   14f6e:	f7ff fc2c 	bl	147ca <__ieee754_pow+0xa2>
   14f72:	004b      	lsls	r3, r1, #1
   14f74:	085b      	lsrs	r3, r3, #1
   14f76:	4699      	mov	r9, r3
   14f78:	4b40      	ldr	r3, [pc, #256]	; (1507c <__ieee754_pow+0x954>)
   14f7a:	4599      	cmp	r9, r3
   14f7c:	dc00      	bgt.n	14f80 <__ieee754_pow+0x858>
   14f7e:	e125      	b.n	151cc <__ieee754_pow+0xaa4>
   14f80:	483f      	ldr	r0, [pc, #252]	; (15080 <__ieee754_pow+0x958>)
   14f82:	180b      	adds	r3, r1, r0
   14f84:	4323      	orrs	r3, r4
   14f86:	d10d      	bne.n	14fa4 <__ieee754_pow+0x87c>
   14f88:	9a00      	ldr	r2, [sp, #0]
   14f8a:	9b01      	ldr	r3, [sp, #4]
   14f8c:	1c20      	adds	r0, r4, #0
   14f8e:	f001 ff65 	bl	16e5c <__aeabi_dsub>
   14f92:	1c02      	adds	r2, r0, #0
   14f94:	1c0b      	adds	r3, r1, #0
   14f96:	9802      	ldr	r0, [sp, #8]
   14f98:	9903      	ldr	r1, [sp, #12]
   14f9a:	f000 fc8d 	bl	158b8 <__aeabi_dcmple>
   14f9e:	2800      	cmp	r0, #0
   14fa0:	d100      	bne.n	14fa4 <__ieee754_pow+0x87c>
   14fa2:	e6e9      	b.n	14d78 <__ieee754_pow+0x650>
   14fa4:	4a2c      	ldr	r2, [pc, #176]	; (15058 <__ieee754_pow+0x930>)
   14fa6:	4b2d      	ldr	r3, [pc, #180]	; (1505c <__ieee754_pow+0x934>)
   14fa8:	9804      	ldr	r0, [sp, #16]
   14faa:	9905      	ldr	r1, [sp, #20]
   14fac:	f001 fcc6 	bl	1693c <__aeabi_dmul>
   14fb0:	4a29      	ldr	r2, [pc, #164]	; (15058 <__ieee754_pow+0x930>)
   14fb2:	4b2a      	ldr	r3, [pc, #168]	; (1505c <__ieee754_pow+0x934>)
   14fb4:	f001 fcc2 	bl	1693c <__aeabi_dmul>
   14fb8:	1c06      	adds	r6, r0, #0
   14fba:	1c0d      	adds	r5, r1, #0
   14fbc:	f7ff fc05 	bl	147ca <__ieee754_pow+0xa2>
   14fc0:	4923      	ldr	r1, [pc, #140]	; (15050 <__ieee754_pow+0x928>)
   14fc2:	4a24      	ldr	r2, [pc, #144]	; (15054 <__ieee754_pow+0x92c>)
   14fc4:	9104      	str	r1, [sp, #16]
   14fc6:	9205      	str	r2, [sp, #20]
   14fc8:	e688      	b.n	14cdc <__ieee754_pow+0x5b4>
   14fca:	9e02      	ldr	r6, [sp, #8]
   14fcc:	2e00      	cmp	r6, #0
   14fce:	dab6      	bge.n	14f3e <__ieee754_pow+0x816>
   14fd0:	2080      	movs	r0, #128	; 0x80
   14fd2:	0600      	lsls	r0, r0, #24
   14fd4:	1c05      	adds	r5, r0, #0
   14fd6:	465e      	mov	r6, fp
   14fd8:	444d      	add	r5, r9
   14fda:	f7ff fbf6 	bl	147ca <__ieee754_pow+0xa2>
   14fde:	9a06      	ldr	r2, [sp, #24]
   14fe0:	4663      	mov	r3, ip
   14fe2:	481b      	ldr	r0, [pc, #108]	; (15050 <__ieee754_pow+0x928>)
   14fe4:	491b      	ldr	r1, [pc, #108]	; (15054 <__ieee754_pow+0x92c>)
   14fe6:	f001 f83f 	bl	16068 <__aeabi_ddiv>
   14fea:	9006      	str	r0, [sp, #24]
   14fec:	468c      	mov	ip, r1
   14fee:	f7ff fc32 	bl	14856 <__ieee754_pow+0x12e>
   14ff2:	46c0      	nop			; (mov r8, r8)
   14ff4:	46c0      	nop			; (mov r8, r8)
   14ff6:	46c0      	nop			; (mov r8, r8)
   14ff8:	652b82fe 	.word	0x652b82fe
   14ffc:	3c971547 	.word	0x3c971547
	...
   1500c:	3fe62e43 	.word	0x3fe62e43
   15010:	fefa39ef 	.word	0xfefa39ef
   15014:	3fe62e42 	.word	0x3fe62e42
   15018:	0ca86c39 	.word	0x0ca86c39
   1501c:	be205c61 	.word	0xbe205c61
   15020:	72bea4d0 	.word	0x72bea4d0
   15024:	3e663769 	.word	0x3e663769
   15028:	c5d26bf1 	.word	0xc5d26bf1
   1502c:	3ebbbd41 	.word	0x3ebbbd41
   15030:	af25de2c 	.word	0xaf25de2c
   15034:	3f11566a 	.word	0x3f11566a
   15038:	16bebd93 	.word	0x16bebd93
   1503c:	3f66c16c 	.word	0x3f66c16c
   15040:	5555553e 	.word	0x5555553e
   15044:	3fc55555 	.word	0x3fc55555
   15048:	00000000 	.word	0x00000000
   1504c:	40000000 	.word	0x40000000
   15050:	00000000 	.word	0x00000000
   15054:	3ff00000 	.word	0x3ff00000
   15058:	c2f8f359 	.word	0xc2f8f359
   1505c:	01a56e1f 	.word	0x01a56e1f
   15060:	408fffff 	.word	0x408fffff
   15064:	bf700000 	.word	0xbf700000
   15068:	fffffc02 	.word	0xfffffc02
   1506c:	fffffc01 	.word	0xfffffc01
   15070:	00000413 	.word	0x00000413
   15074:	000fffff 	.word	0x000fffff
   15078:	c0100000 	.word	0xc0100000
   1507c:	4090cbff 	.word	0x4090cbff
   15080:	3f6f3400 	.word	0x3f6f3400
   15084:	4b6c      	ldr	r3, [pc, #432]	; (15238 <__ieee754_pow+0xb10>)
   15086:	4598      	cmp	r8, r3
   15088:	dc00      	bgt.n	1508c <__ieee754_pow+0x964>
   1508a:	e754      	b.n	14f36 <__ieee754_pow+0x80e>
   1508c:	4b6b      	ldr	r3, [pc, #428]	; (1523c <__ieee754_pow+0xb14>)
   1508e:	4598      	cmp	r8, r3
   15090:	dd01      	ble.n	15096 <__ieee754_pow+0x96e>
   15092:	f7ff fbc6 	bl	14822 <__ieee754_pow+0xfa>
   15096:	4661      	mov	r1, ip
   15098:	4b58      	ldr	r3, [pc, #352]	; (151fc <__ieee754_pow+0xad4>)
   1509a:	4a57      	ldr	r2, [pc, #348]	; (151f8 <__ieee754_pow+0xad0>)
   1509c:	9806      	ldr	r0, [sp, #24]
   1509e:	f001 fedd 	bl	16e5c <__aeabi_dsub>
   150a2:	4a57      	ldr	r2, [pc, #348]	; (15200 <__ieee754_pow+0xad8>)
   150a4:	4b57      	ldr	r3, [pc, #348]	; (15204 <__ieee754_pow+0xadc>)
   150a6:	1c04      	adds	r4, r0, #0
   150a8:	1c0d      	adds	r5, r1, #0
   150aa:	f001 fc47 	bl	1693c <__aeabi_dmul>
   150ae:	4a56      	ldr	r2, [pc, #344]	; (15208 <__ieee754_pow+0xae0>)
   150b0:	4b56      	ldr	r3, [pc, #344]	; (1520c <__ieee754_pow+0xae4>)
   150b2:	1c06      	adds	r6, r0, #0
   150b4:	1c0f      	adds	r7, r1, #0
   150b6:	1c20      	adds	r0, r4, #0
   150b8:	1c29      	adds	r1, r5, #0
   150ba:	f001 fc3f 	bl	1693c <__aeabi_dmul>
   150be:	1c22      	adds	r2, r4, #0
   150c0:	9000      	str	r0, [sp, #0]
   150c2:	9101      	str	r1, [sp, #4]
   150c4:	1c2b      	adds	r3, r5, #0
   150c6:	1c20      	adds	r0, r4, #0
   150c8:	1c29      	adds	r1, r5, #0
   150ca:	f001 fc37 	bl	1693c <__aeabi_dmul>
   150ce:	4a50      	ldr	r2, [pc, #320]	; (15210 <__ieee754_pow+0xae8>)
   150d0:	4b50      	ldr	r3, [pc, #320]	; (15214 <__ieee754_pow+0xaec>)
   150d2:	9002      	str	r0, [sp, #8]
   150d4:	9103      	str	r1, [sp, #12]
   150d6:	1c20      	adds	r0, r4, #0
   150d8:	1c29      	adds	r1, r5, #0
   150da:	f001 fc2f 	bl	1693c <__aeabi_dmul>
   150de:	1c02      	adds	r2, r0, #0
   150e0:	1c0b      	adds	r3, r1, #0
   150e2:	484d      	ldr	r0, [pc, #308]	; (15218 <__ieee754_pow+0xaf0>)
   150e4:	494d      	ldr	r1, [pc, #308]	; (1521c <__ieee754_pow+0xaf4>)
   150e6:	f001 feb9 	bl	16e5c <__aeabi_dsub>
   150ea:	1c22      	adds	r2, r4, #0
   150ec:	1c2b      	adds	r3, r5, #0
   150ee:	f001 fc25 	bl	1693c <__aeabi_dmul>
   150f2:	1c02      	adds	r2, r0, #0
   150f4:	1c0b      	adds	r3, r1, #0
   150f6:	484a      	ldr	r0, [pc, #296]	; (15220 <__ieee754_pow+0xaf8>)
   150f8:	494a      	ldr	r1, [pc, #296]	; (15224 <__ieee754_pow+0xafc>)
   150fa:	f001 feaf 	bl	16e5c <__aeabi_dsub>
   150fe:	1c02      	adds	r2, r0, #0
   15100:	1c0b      	adds	r3, r1, #0
   15102:	9802      	ldr	r0, [sp, #8]
   15104:	9903      	ldr	r1, [sp, #12]
   15106:	f001 fc19 	bl	1693c <__aeabi_dmul>
   1510a:	4a47      	ldr	r2, [pc, #284]	; (15228 <__ieee754_pow+0xb00>)
   1510c:	4b47      	ldr	r3, [pc, #284]	; (1522c <__ieee754_pow+0xb04>)
   1510e:	f001 fc15 	bl	1693c <__aeabi_dmul>
   15112:	1c02      	adds	r2, r0, #0
   15114:	1c0b      	adds	r3, r1, #0
   15116:	9800      	ldr	r0, [sp, #0]
   15118:	9901      	ldr	r1, [sp, #4]
   1511a:	f001 fe9f 	bl	16e5c <__aeabi_dsub>
   1511e:	1c04      	adds	r4, r0, #0
   15120:	1c0d      	adds	r5, r1, #0
   15122:	1c22      	adds	r2, r4, #0
   15124:	1c2b      	adds	r3, r5, #0
   15126:	1c30      	adds	r0, r6, #0
   15128:	1c39      	adds	r1, r7, #0
   1512a:	f000 fc7b 	bl	15a24 <__aeabi_dadd>
   1512e:	2200      	movs	r2, #0
   15130:	1c0b      	adds	r3, r1, #0
   15132:	9200      	str	r2, [sp, #0]
   15134:	9301      	str	r3, [sp, #4]
   15136:	1c10      	adds	r0, r2, #0
   15138:	1c3b      	adds	r3, r7, #0
   1513a:	1c32      	adds	r2, r6, #0
   1513c:	f001 fe8e 	bl	16e5c <__aeabi_dsub>
   15140:	1c02      	adds	r2, r0, #0
   15142:	1c0b      	adds	r3, r1, #0
   15144:	1c20      	adds	r0, r4, #0
   15146:	1c29      	adds	r1, r5, #0
   15148:	f001 fe88 	bl	16e5c <__aeabi_dsub>
   1514c:	9002      	str	r0, [sp, #8]
   1514e:	9103      	str	r1, [sp, #12]
   15150:	e56d      	b.n	14c2e <__ieee754_pow+0x506>
   15152:	2400      	movs	r4, #0
   15154:	2100      	movs	r1, #0
   15156:	f7ff fc11 	bl	1497c <__ieee754_pow+0x254>
   1515a:	1c2b      	adds	r3, r5, #0
   1515c:	4927      	ldr	r1, [pc, #156]	; (151fc <__ieee754_pow+0xad4>)
   1515e:	4826      	ldr	r0, [pc, #152]	; (151f8 <__ieee754_pow+0xad0>)
   15160:	9a00      	ldr	r2, [sp, #0]
   15162:	f000 ff81 	bl	16068 <__aeabi_ddiv>
   15166:	1c06      	adds	r6, r0, #0
   15168:	1c0d      	adds	r5, r1, #0
   1516a:	f7ff fb2e 	bl	147ca <__ieee754_pow+0xa2>
   1516e:	4a30      	ldr	r2, [pc, #192]	; (15230 <__ieee754_pow+0xb08>)
   15170:	4b30      	ldr	r3, [pc, #192]	; (15234 <__ieee754_pow+0xb0c>)
   15172:	9804      	ldr	r0, [sp, #16]
   15174:	9905      	ldr	r1, [sp, #20]
   15176:	f001 fbe1 	bl	1693c <__aeabi_dmul>
   1517a:	4a2d      	ldr	r2, [pc, #180]	; (15230 <__ieee754_pow+0xb08>)
   1517c:	4b2d      	ldr	r3, [pc, #180]	; (15234 <__ieee754_pow+0xb0c>)
   1517e:	f001 fbdd 	bl	1693c <__aeabi_dmul>
   15182:	1c06      	adds	r6, r0, #0
   15184:	1c0d      	adds	r5, r1, #0
   15186:	f7ff fb20 	bl	147ca <__ieee754_pow+0xa2>
   1518a:	9e08      	ldr	r6, [sp, #32]
   1518c:	2e01      	cmp	r6, #1
   1518e:	d001      	beq.n	15194 <__ieee754_pow+0xa6c>
   15190:	f7ff fb65 	bl	1485e <__ieee754_pow+0x136>
   15194:	2080      	movs	r0, #128	; 0x80
   15196:	0600      	lsls	r0, r0, #24
   15198:	1c05      	adds	r5, r0, #0
   1519a:	9e06      	ldr	r6, [sp, #24]
   1519c:	4465      	add	r5, ip
   1519e:	f7ff fb14 	bl	147ca <__ieee754_pow+0xa2>
   151a2:	2800      	cmp	r0, #0
   151a4:	d001      	beq.n	151aa <__ieee754_pow+0xa82>
   151a6:	f7ff fb1f 	bl	147e8 <__ieee754_pow+0xc0>
   151aa:	4663      	mov	r3, ip
   151ac:	1ac9      	subs	r1, r1, r3
   151ae:	1c22      	adds	r2, r4, #0
   151b0:	410a      	asrs	r2, r1
   151b2:	1c10      	adds	r0, r2, #0
   151b4:	4088      	lsls	r0, r1
   151b6:	42a0      	cmp	r0, r4
   151b8:	d001      	beq.n	151be <__ieee754_pow+0xa96>
   151ba:	f7ff fae5 	bl	14788 <__ieee754_pow+0x60>
   151be:	2301      	movs	r3, #1
   151c0:	401a      	ands	r2, r3
   151c2:	2302      	movs	r3, #2
   151c4:	1a9b      	subs	r3, r3, r2
   151c6:	9308      	str	r3, [sp, #32]
   151c8:	f7ff fade 	bl	14788 <__ieee754_pow+0x60>
   151cc:	4b1c      	ldr	r3, [pc, #112]	; (15240 <__ieee754_pow+0xb18>)
   151ce:	4599      	cmp	r9, r3
   151d0:	dd00      	ble.n	151d4 <__ieee754_pow+0xaac>
   151d2:	e5d1      	b.n	14d78 <__ieee754_pow+0x650>
   151d4:	2300      	movs	r3, #0
   151d6:	4698      	mov	r8, r3
   151d8:	4699      	mov	r9, r3
   151da:	e5fa      	b.n	14dd2 <__ieee754_pow+0x6aa>
   151dc:	2480      	movs	r4, #128	; 0x80
   151de:	02e4      	lsls	r4, r4, #11
   151e0:	2101      	movs	r1, #1
   151e2:	f7ff fbcb 	bl	1497c <__ieee754_pow+0x254>
   151e6:	464a      	mov	r2, r9
   151e8:	f000 fa06 	bl	155f8 <scalbn>
   151ec:	1c02      	adds	r2, r0, #0
   151ee:	1c0b      	adds	r3, r1, #0
   151f0:	e699      	b.n	14f26 <__ieee754_pow+0x7fe>
   151f2:	4264      	negs	r4, r4
   151f4:	46a1      	mov	r9, r4
   151f6:	e5dd      	b.n	14db4 <__ieee754_pow+0x68c>
   151f8:	00000000 	.word	0x00000000
   151fc:	3ff00000 	.word	0x3ff00000
   15200:	60000000 	.word	0x60000000
   15204:	3ff71547 	.word	0x3ff71547
   15208:	f85ddf44 	.word	0xf85ddf44
   1520c:	3e54ae0b 	.word	0x3e54ae0b
   15210:	00000000 	.word	0x00000000
   15214:	3fd00000 	.word	0x3fd00000
   15218:	55555555 	.word	0x55555555
   1521c:	3fd55555 	.word	0x3fd55555
   15220:	00000000 	.word	0x00000000
   15224:	3fe00000 	.word	0x3fe00000
   15228:	652b82fe 	.word	0x652b82fe
   1522c:	3ff71547 	.word	0x3ff71547
   15230:	8800759c 	.word	0x8800759c
   15234:	7e37e43c 	.word	0x7e37e43c
   15238:	3feffffe 	.word	0x3feffffe
   1523c:	3ff00000 	.word	0x3ff00000
   15240:	3fe00000 	.word	0x3fe00000
   15244:	46c0      	nop			; (mov r8, r8)
   15246:	46c0      	nop			; (mov r8, r8)

00015248 <__ieee754_sqrt>:
   15248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1524a:	465f      	mov	r7, fp
   1524c:	4656      	mov	r6, sl
   1524e:	464d      	mov	r5, r9
   15250:	4644      	mov	r4, r8
   15252:	b4f0      	push	{r4, r5, r6, r7}
   15254:	4e6c      	ldr	r6, [pc, #432]	; (15408 <__ieee754_sqrt+0x1c0>)
   15256:	1c0d      	adds	r5, r1, #0
   15258:	1c37      	adds	r7, r6, #0
   1525a:	b083      	sub	sp, #12
   1525c:	1c04      	adds	r4, r0, #0
   1525e:	1c02      	adds	r2, r0, #0
   15260:	1c0b      	adds	r3, r1, #0
   15262:	402f      	ands	r7, r5
   15264:	42b7      	cmp	r7, r6
   15266:	d100      	bne.n	1526a <__ieee754_sqrt+0x22>
   15268:	e0ad      	b.n	153c6 <__ieee754_sqrt+0x17e>
   1526a:	2900      	cmp	r1, #0
   1526c:	dc00      	bgt.n	15270 <__ieee754_sqrt+0x28>
   1526e:	e08b      	b.n	15388 <__ieee754_sqrt+0x140>
   15270:	152f      	asrs	r7, r5, #20
   15272:	d100      	bne.n	15276 <__ieee754_sqrt+0x2e>
   15274:	e094      	b.n	153a0 <__ieee754_sqrt+0x158>
   15276:	4d65      	ldr	r5, [pc, #404]	; (1540c <__ieee754_sqrt+0x1c4>)
   15278:	0309      	lsls	r1, r1, #12
   1527a:	2380      	movs	r3, #128	; 0x80
   1527c:	0b09      	lsrs	r1, r1, #12
   1527e:	035b      	lsls	r3, r3, #13
   15280:	197f      	adds	r7, r7, r5
   15282:	430b      	orrs	r3, r1
   15284:	07fe      	lsls	r6, r7, #31
   15286:	d500      	bpl.n	1528a <__ieee754_sqrt+0x42>
   15288:	e070      	b.n	1536c <__ieee754_sqrt+0x124>
   1528a:	107f      	asrs	r7, r7, #1
   1528c:	0fc2      	lsrs	r2, r0, #31
   1528e:	46b8      	mov	r8, r7
   15290:	005b      	lsls	r3, r3, #1
   15292:	2700      	movs	r7, #0
   15294:	2180      	movs	r1, #128	; 0x80
   15296:	189b      	adds	r3, r3, r2
   15298:	2416      	movs	r4, #22
   1529a:	0042      	lsls	r2, r0, #1
   1529c:	9700      	str	r7, [sp, #0]
   1529e:	2000      	movs	r0, #0
   152a0:	0389      	lsls	r1, r1, #14
   152a2:	1845      	adds	r5, r0, r1
   152a4:	429d      	cmp	r5, r3
   152a6:	dc04      	bgt.n	152b2 <__ieee754_sqrt+0x6a>
   152a8:	1868      	adds	r0, r5, r1
   152aa:	1b5b      	subs	r3, r3, r5
   152ac:	9d00      	ldr	r5, [sp, #0]
   152ae:	186d      	adds	r5, r5, r1
   152b0:	9500      	str	r5, [sp, #0]
   152b2:	0fd5      	lsrs	r5, r2, #31
   152b4:	005b      	lsls	r3, r3, #1
   152b6:	3c01      	subs	r4, #1
   152b8:	195b      	adds	r3, r3, r5
   152ba:	0052      	lsls	r2, r2, #1
   152bc:	0849      	lsrs	r1, r1, #1
   152be:	2c00      	cmp	r4, #0
   152c0:	d1ef      	bne.n	152a2 <__ieee754_sqrt+0x5a>
   152c2:	2180      	movs	r1, #128	; 0x80
   152c4:	2600      	movs	r6, #0
   152c6:	0609      	lsls	r1, r1, #24
   152c8:	2520      	movs	r5, #32
   152ca:	9601      	str	r6, [sp, #4]
   152cc:	46b4      	mov	ip, r6
   152ce:	4689      	mov	r9, r1
   152d0:	e009      	b.n	152e6 <__ieee754_sqrt+0x9e>
   152d2:	4283      	cmp	r3, r0
   152d4:	d046      	beq.n	15364 <__ieee754_sqrt+0x11c>
   152d6:	0fd4      	lsrs	r4, r2, #31
   152d8:	005b      	lsls	r3, r3, #1
   152da:	3d01      	subs	r5, #1
   152dc:	191b      	adds	r3, r3, r4
   152de:	0052      	lsls	r2, r2, #1
   152e0:	0849      	lsrs	r1, r1, #1
   152e2:	2d00      	cmp	r5, #0
   152e4:	d01c      	beq.n	15320 <__ieee754_sqrt+0xd8>
   152e6:	4666      	mov	r6, ip
   152e8:	198c      	adds	r4, r1, r6
   152ea:	4283      	cmp	r3, r0
   152ec:	ddf1      	ble.n	152d2 <__ieee754_sqrt+0x8a>
   152ee:	1867      	adds	r7, r4, r1
   152f0:	0fe6      	lsrs	r6, r4, #31
   152f2:	46bc      	mov	ip, r7
   152f4:	07f6      	lsls	r6, r6, #31
   152f6:	4682      	mov	sl, r0
   152f8:	454e      	cmp	r6, r9
   152fa:	d02c      	beq.n	15356 <__ieee754_sqrt+0x10e>
   152fc:	1a1b      	subs	r3, r3, r0
   152fe:	42a2      	cmp	r2, r4
   15300:	4180      	sbcs	r0, r0
   15302:	4240      	negs	r0, r0
   15304:	9f01      	ldr	r7, [sp, #4]
   15306:	1a1b      	subs	r3, r3, r0
   15308:	1b12      	subs	r2, r2, r4
   1530a:	187f      	adds	r7, r7, r1
   1530c:	0fd4      	lsrs	r4, r2, #31
   1530e:	005b      	lsls	r3, r3, #1
   15310:	3d01      	subs	r5, #1
   15312:	9701      	str	r7, [sp, #4]
   15314:	4650      	mov	r0, sl
   15316:	191b      	adds	r3, r3, r4
   15318:	0052      	lsls	r2, r2, #1
   1531a:	0849      	lsrs	r1, r1, #1
   1531c:	2d00      	cmp	r5, #0
   1531e:	d1e2      	bne.n	152e6 <__ieee754_sqrt+0x9e>
   15320:	4313      	orrs	r3, r2
   15322:	d128      	bne.n	15376 <__ieee754_sqrt+0x12e>
   15324:	9801      	ldr	r0, [sp, #4]
   15326:	0843      	lsrs	r3, r0, #1
   15328:	9d00      	ldr	r5, [sp, #0]
   1532a:	4e39      	ldr	r6, [pc, #228]	; (15410 <__ieee754_sqrt+0x1c8>)
   1532c:	106a      	asrs	r2, r5, #1
   1532e:	1992      	adds	r2, r2, r6
   15330:	07ed      	lsls	r5, r5, #31
   15332:	d502      	bpl.n	1533a <__ieee754_sqrt+0xf2>
   15334:	2180      	movs	r1, #128	; 0x80
   15336:	0609      	lsls	r1, r1, #24
   15338:	430b      	orrs	r3, r1
   1533a:	4640      	mov	r0, r8
   1533c:	0507      	lsls	r7, r0, #20
   1533e:	18b9      	adds	r1, r7, r2
   15340:	1c1c      	adds	r4, r3, #0
   15342:	1c0d      	adds	r5, r1, #0
   15344:	1c20      	adds	r0, r4, #0
   15346:	1c29      	adds	r1, r5, #0
   15348:	b003      	add	sp, #12
   1534a:	bc3c      	pop	{r2, r3, r4, r5}
   1534c:	4690      	mov	r8, r2
   1534e:	4699      	mov	r9, r3
   15350:	46a2      	mov	sl, r4
   15352:	46ab      	mov	fp, r5
   15354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15356:	0fff      	lsrs	r7, r7, #31
   15358:	07ff      	lsls	r7, r7, #31
   1535a:	427e      	negs	r6, r7
   1535c:	417e      	adcs	r6, r7
   1535e:	46b2      	mov	sl, r6
   15360:	4482      	add	sl, r0
   15362:	e7cb      	b.n	152fc <__ieee754_sqrt+0xb4>
   15364:	4294      	cmp	r4, r2
   15366:	d9c2      	bls.n	152ee <__ieee754_sqrt+0xa6>
   15368:	1c18      	adds	r0, r3, #0
   1536a:	e7b4      	b.n	152d6 <__ieee754_sqrt+0x8e>
   1536c:	0fc2      	lsrs	r2, r0, #31
   1536e:	005b      	lsls	r3, r3, #1
   15370:	189b      	adds	r3, r3, r2
   15372:	0040      	lsls	r0, r0, #1
   15374:	e789      	b.n	1528a <__ieee754_sqrt+0x42>
   15376:	9901      	ldr	r1, [sp, #4]
   15378:	3101      	adds	r1, #1
   1537a:	d02f      	beq.n	153dc <__ieee754_sqrt+0x194>
   1537c:	9c01      	ldr	r4, [sp, #4]
   1537e:	2301      	movs	r3, #1
   15380:	4023      	ands	r3, r4
   15382:	191b      	adds	r3, r3, r4
   15384:	085b      	lsrs	r3, r3, #1
   15386:	e7cf      	b.n	15328 <__ieee754_sqrt+0xe0>
   15388:	006b      	lsls	r3, r5, #1
   1538a:	085b      	lsrs	r3, r3, #1
   1538c:	431a      	orrs	r2, r3
   1538e:	d0d9      	beq.n	15344 <__ieee754_sqrt+0xfc>
   15390:	2700      	movs	r7, #0
   15392:	2900      	cmp	r1, #0
   15394:	d12b      	bne.n	153ee <__ieee754_sqrt+0x1a6>
   15396:	0ac1      	lsrs	r1, r0, #11
   15398:	3f15      	subs	r7, #21
   1539a:	0540      	lsls	r0, r0, #21
   1539c:	2900      	cmp	r1, #0
   1539e:	d0fa      	beq.n	15396 <__ieee754_sqrt+0x14e>
   153a0:	2280      	movs	r2, #128	; 0x80
   153a2:	0352      	lsls	r2, r2, #13
   153a4:	4211      	tst	r1, r2
   153a6:	d11e      	bne.n	153e6 <__ieee754_sqrt+0x19e>
   153a8:	2300      	movs	r3, #0
   153aa:	0049      	lsls	r1, r1, #1
   153ac:	3301      	adds	r3, #1
   153ae:	4211      	tst	r1, r2
   153b0:	d0fb      	beq.n	153aa <__ieee754_sqrt+0x162>
   153b2:	2401      	movs	r4, #1
   153b4:	2220      	movs	r2, #32
   153b6:	1ae4      	subs	r4, r4, r3
   153b8:	1ad2      	subs	r2, r2, r3
   153ba:	193f      	adds	r7, r7, r4
   153bc:	1c04      	adds	r4, r0, #0
   153be:	40d4      	lsrs	r4, r2
   153c0:	4321      	orrs	r1, r4
   153c2:	4098      	lsls	r0, r3
   153c4:	e757      	b.n	15276 <__ieee754_sqrt+0x2e>
   153c6:	1c20      	adds	r0, r4, #0
   153c8:	1c29      	adds	r1, r5, #0
   153ca:	f001 fab7 	bl	1693c <__aeabi_dmul>
   153ce:	1c22      	adds	r2, r4, #0
   153d0:	1c2b      	adds	r3, r5, #0
   153d2:	f000 fb27 	bl	15a24 <__aeabi_dadd>
   153d6:	1c04      	adds	r4, r0, #0
   153d8:	1c0d      	adds	r5, r1, #0
   153da:	e7b3      	b.n	15344 <__ieee754_sqrt+0xfc>
   153dc:	9a00      	ldr	r2, [sp, #0]
   153de:	2300      	movs	r3, #0
   153e0:	3201      	adds	r2, #1
   153e2:	9200      	str	r2, [sp, #0]
   153e4:	e7a0      	b.n	15328 <__ieee754_sqrt+0xe0>
   153e6:	2220      	movs	r2, #32
   153e8:	2401      	movs	r4, #1
   153ea:	2300      	movs	r3, #0
   153ec:	e7e5      	b.n	153ba <__ieee754_sqrt+0x172>
   153ee:	1c22      	adds	r2, r4, #0
   153f0:	1c2b      	adds	r3, r5, #0
   153f2:	1c20      	adds	r0, r4, #0
   153f4:	1c29      	adds	r1, r5, #0
   153f6:	f001 fd31 	bl	16e5c <__aeabi_dsub>
   153fa:	1c02      	adds	r2, r0, #0
   153fc:	1c0b      	adds	r3, r1, #0
   153fe:	f000 fe33 	bl	16068 <__aeabi_ddiv>
   15402:	1c04      	adds	r4, r0, #0
   15404:	1c0d      	adds	r5, r1, #0
   15406:	e79d      	b.n	15344 <__ieee754_sqrt+0xfc>
   15408:	7ff00000 	.word	0x7ff00000
   1540c:	fffffc01 	.word	0xfffffc01
   15410:	3fe00000 	.word	0x3fe00000

00015414 <fabs>:
   15414:	004b      	lsls	r3, r1, #1
   15416:	0859      	lsrs	r1, r3, #1
   15418:	4770      	bx	lr
   1541a:	46c0      	nop			; (mov r8, r8)

0001541c <finite>:
   1541c:	0048      	lsls	r0, r1, #1
   1541e:	4b02      	ldr	r3, [pc, #8]	; (15428 <finite+0xc>)
   15420:	0840      	lsrs	r0, r0, #1
   15422:	18c0      	adds	r0, r0, r3
   15424:	0fc0      	lsrs	r0, r0, #31
   15426:	4770      	bx	lr
   15428:	80100000 	.word	0x80100000

0001542c <__fpclassifyd>:
   1542c:	1c0b      	adds	r3, r1, #0
   1542e:	1c01      	adds	r1, r0, #0
   15430:	1c02      	adds	r2, r0, #0
   15432:	b530      	push	{r4, r5, lr}
   15434:	4319      	orrs	r1, r3
   15436:	2002      	movs	r0, #2
   15438:	2900      	cmp	r1, #0
   1543a:	d100      	bne.n	1543e <__fpclassifyd+0x12>
   1543c:	bd30      	pop	{r4, r5, pc}
   1543e:	2180      	movs	r1, #128	; 0x80
   15440:	0609      	lsls	r1, r1, #24
   15442:	428b      	cmp	r3, r1
   15444:	d016      	beq.n	15474 <__fpclassifyd+0x48>
   15446:	490d      	ldr	r1, [pc, #52]	; (1547c <__fpclassifyd+0x50>)
   15448:	2004      	movs	r0, #4
   1544a:	185c      	adds	r4, r3, r1
   1544c:	490c      	ldr	r1, [pc, #48]	; (15480 <__fpclassifyd+0x54>)
   1544e:	428c      	cmp	r4, r1
   15450:	d9f4      	bls.n	1543c <__fpclassifyd+0x10>
   15452:	4d0c      	ldr	r5, [pc, #48]	; (15484 <__fpclassifyd+0x58>)
   15454:	195c      	adds	r4, r3, r5
   15456:	428c      	cmp	r4, r1
   15458:	d9f0      	bls.n	1543c <__fpclassifyd+0x10>
   1545a:	4c0b      	ldr	r4, [pc, #44]	; (15488 <__fpclassifyd+0x5c>)
   1545c:	0059      	lsls	r1, r3, #1
   1545e:	0849      	lsrs	r1, r1, #1
   15460:	2003      	movs	r0, #3
   15462:	42a1      	cmp	r1, r4
   15464:	d9ea      	bls.n	1543c <__fpclassifyd+0x10>
   15466:	4c07      	ldr	r4, [pc, #28]	; (15484 <__fpclassifyd+0x58>)
   15468:	2000      	movs	r0, #0
   1546a:	42a1      	cmp	r1, r4
   1546c:	d1e6      	bne.n	1543c <__fpclassifyd+0x10>
   1546e:	4250      	negs	r0, r2
   15470:	4150      	adcs	r0, r2
   15472:	e7e3      	b.n	1543c <__fpclassifyd+0x10>
   15474:	2a00      	cmp	r2, #0
   15476:	d0e1      	beq.n	1543c <__fpclassifyd+0x10>
   15478:	e7ef      	b.n	1545a <__fpclassifyd+0x2e>
   1547a:	46c0      	nop			; (mov r8, r8)
   1547c:	fff00000 	.word	0xfff00000
   15480:	7fdfffff 	.word	0x7fdfffff
   15484:	7ff00000 	.word	0x7ff00000
   15488:	000fffff 	.word	0x000fffff

0001548c <matherr>:
   1548c:	2000      	movs	r0, #0
   1548e:	4770      	bx	lr

00015490 <nan>:
   15490:	4902      	ldr	r1, [pc, #8]	; (1549c <nan+0xc>)
   15492:	4801      	ldr	r0, [pc, #4]	; (15498 <nan+0x8>)
   15494:	4770      	bx	lr
   15496:	46c0      	nop			; (mov r8, r8)
   15498:	00000000 	.word	0x00000000
   1549c:	7ff80000 	.word	0x7ff80000

000154a0 <rint>:
   154a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   154a2:	4646      	mov	r6, r8
   154a4:	464f      	mov	r7, r9
   154a6:	b4c0      	push	{r6, r7}
   154a8:	0fca      	lsrs	r2, r1, #31
   154aa:	4690      	mov	r8, r2
   154ac:	004b      	lsls	r3, r1, #1
   154ae:	4a4d      	ldr	r2, [pc, #308]	; (155e4 <rint+0x144>)
   154b0:	0d5b      	lsrs	r3, r3, #21
   154b2:	189e      	adds	r6, r3, r2
   154b4:	b083      	sub	sp, #12
   154b6:	1c04      	adds	r4, r0, #0
   154b8:	1c0d      	adds	r5, r1, #0
   154ba:	468c      	mov	ip, r1
   154bc:	1c07      	adds	r7, r0, #0
   154be:	2e13      	cmp	r6, #19
   154c0:	dc3b      	bgt.n	1553a <rint+0x9a>
   154c2:	2e00      	cmp	r6, #0
   154c4:	db5c      	blt.n	15580 <rint+0xe0>
   154c6:	4f48      	ldr	r7, [pc, #288]	; (155e8 <rint+0x148>)
   154c8:	1c02      	adds	r2, r0, #0
   154ca:	4137      	asrs	r7, r6
   154cc:	1c3b      	adds	r3, r7, #0
   154ce:	400b      	ands	r3, r1
   154d0:	4303      	orrs	r3, r0
   154d2:	4699      	mov	r9, r3
   154d4:	4648      	mov	r0, r9
   154d6:	1c0b      	adds	r3, r1, #0
   154d8:	2800      	cmp	r0, #0
   154da:	d027      	beq.n	1552c <rint+0x8c>
   154dc:	087b      	lsrs	r3, r7, #1
   154de:	1c1a      	adds	r2, r3, #0
   154e0:	400a      	ands	r2, r1
   154e2:	4322      	orrs	r2, r4
   154e4:	2700      	movs	r7, #0
   154e6:	2a00      	cmp	r2, #0
   154e8:	d00a      	beq.n	15500 <rint+0x60>
   154ea:	2e13      	cmp	r6, #19
   154ec:	d100      	bne.n	154f0 <rint+0x50>
   154ee:	e076      	b.n	155de <rint+0x13e>
   154f0:	1c29      	adds	r1, r5, #0
   154f2:	2280      	movs	r2, #128	; 0x80
   154f4:	4399      	bics	r1, r3
   154f6:	02d2      	lsls	r2, r2, #11
   154f8:	1c0b      	adds	r3, r1, #0
   154fa:	4132      	asrs	r2, r6
   154fc:	4313      	orrs	r3, r2
   154fe:	469c      	mov	ip, r3
   15500:	4640      	mov	r0, r8
   15502:	00c1      	lsls	r1, r0, #3
   15504:	4839      	ldr	r0, [pc, #228]	; (155ec <rint+0x14c>)
   15506:	4663      	mov	r3, ip
   15508:	1841      	adds	r1, r0, r1
   1550a:	680c      	ldr	r4, [r1, #0]
   1550c:	684d      	ldr	r5, [r1, #4]
   1550e:	1c3a      	adds	r2, r7, #0
   15510:	1c20      	adds	r0, r4, #0
   15512:	1c29      	adds	r1, r5, #0
   15514:	f000 fa86 	bl	15a24 <__aeabi_dadd>
   15518:	9000      	str	r0, [sp, #0]
   1551a:	9101      	str	r1, [sp, #4]
   1551c:	9800      	ldr	r0, [sp, #0]
   1551e:	9901      	ldr	r1, [sp, #4]
   15520:	1c22      	adds	r2, r4, #0
   15522:	1c2b      	adds	r3, r5, #0
   15524:	f001 fc9a 	bl	16e5c <__aeabi_dsub>
   15528:	1c02      	adds	r2, r0, #0
   1552a:	1c0b      	adds	r3, r1, #0
   1552c:	1c10      	adds	r0, r2, #0
   1552e:	1c19      	adds	r1, r3, #0
   15530:	b003      	add	sp, #12
   15532:	bc0c      	pop	{r2, r3}
   15534:	4690      	mov	r8, r2
   15536:	4699      	mov	r9, r3
   15538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1553a:	2e33      	cmp	r6, #51	; 0x33
   1553c:	dd0b      	ble.n	15556 <rint+0xb6>
   1553e:	1c0b      	adds	r3, r1, #0
   15540:	2180      	movs	r1, #128	; 0x80
   15542:	1c02      	adds	r2, r0, #0
   15544:	00c9      	lsls	r1, r1, #3
   15546:	428e      	cmp	r6, r1
   15548:	d1f0      	bne.n	1552c <rint+0x8c>
   1554a:	1c29      	adds	r1, r5, #0
   1554c:	f000 fa6a 	bl	15a24 <__aeabi_dadd>
   15550:	1c02      	adds	r2, r0, #0
   15552:	1c0b      	adds	r3, r1, #0
   15554:	e7ea      	b.n	1552c <rint+0x8c>
   15556:	4a26      	ldr	r2, [pc, #152]	; (155f0 <rint+0x150>)
   15558:	2601      	movs	r6, #1
   1555a:	18d2      	adds	r2, r2, r3
   1555c:	4276      	negs	r6, r6
   1555e:	40d6      	lsrs	r6, r2
   15560:	4691      	mov	r9, r2
   15562:	1c0b      	adds	r3, r1, #0
   15564:	1c02      	adds	r2, r0, #0
   15566:	4206      	tst	r6, r0
   15568:	d0e0      	beq.n	1552c <rint+0x8c>
   1556a:	0876      	lsrs	r6, r6, #1
   1556c:	4206      	tst	r6, r0
   1556e:	d0c7      	beq.n	15500 <rint+0x60>
   15570:	2380      	movs	r3, #128	; 0x80
   15572:	43b4      	bics	r4, r6
   15574:	05db      	lsls	r3, r3, #23
   15576:	4648      	mov	r0, r9
   15578:	4103      	asrs	r3, r0
   1557a:	1c27      	adds	r7, r4, #0
   1557c:	431f      	orrs	r7, r3
   1557e:	e7bf      	b.n	15500 <rint+0x60>
   15580:	004e      	lsls	r6, r1, #1
   15582:	0876      	lsrs	r6, r6, #1
   15584:	4306      	orrs	r6, r0
   15586:	1c02      	adds	r2, r0, #0
   15588:	1c0b      	adds	r3, r1, #0
   1558a:	2e00      	cmp	r6, #0
   1558c:	d0ce      	beq.n	1552c <rint+0x8c>
   1558e:	0309      	lsls	r1, r1, #12
   15590:	0b09      	lsrs	r1, r1, #12
   15592:	4301      	orrs	r1, r0
   15594:	4248      	negs	r0, r1
   15596:	4301      	orrs	r1, r0
   15598:	2080      	movs	r0, #128	; 0x80
   1559a:	0300      	lsls	r0, r0, #12
   1559c:	0b09      	lsrs	r1, r1, #12
   1559e:	4001      	ands	r1, r0
   155a0:	0c68      	lsrs	r0, r5, #17
   155a2:	0440      	lsls	r0, r0, #17
   155a4:	1c0b      	adds	r3, r1, #0
   155a6:	4303      	orrs	r3, r0
   155a8:	4640      	mov	r0, r8
   155aa:	00c1      	lsls	r1, r0, #3
   155ac:	480f      	ldr	r0, [pc, #60]	; (155ec <rint+0x14c>)
   155ae:	1841      	adds	r1, r0, r1
   155b0:	680c      	ldr	r4, [r1, #0]
   155b2:	684d      	ldr	r5, [r1, #4]
   155b4:	1c29      	adds	r1, r5, #0
   155b6:	1c20      	adds	r0, r4, #0
   155b8:	f000 fa34 	bl	15a24 <__aeabi_dadd>
   155bc:	9000      	str	r0, [sp, #0]
   155be:	9101      	str	r1, [sp, #4]
   155c0:	9800      	ldr	r0, [sp, #0]
   155c2:	9901      	ldr	r1, [sp, #4]
   155c4:	1c2b      	adds	r3, r5, #0
   155c6:	1c22      	adds	r2, r4, #0
   155c8:	f001 fc48 	bl	16e5c <__aeabi_dsub>
   155cc:	1c0d      	adds	r5, r1, #0
   155ce:	4641      	mov	r1, r8
   155d0:	1c02      	adds	r2, r0, #0
   155d2:	07c8      	lsls	r0, r1, #31
   155d4:	0069      	lsls	r1, r5, #1
   155d6:	0849      	lsrs	r1, r1, #1
   155d8:	1c03      	adds	r3, r0, #0
   155da:	430b      	orrs	r3, r1
   155dc:	e7a6      	b.n	1552c <rint+0x8c>
   155de:	2780      	movs	r7, #128	; 0x80
   155e0:	063f      	lsls	r7, r7, #24
   155e2:	e785      	b.n	154f0 <rint+0x50>
   155e4:	fffffc01 	.word	0xfffffc01
   155e8:	000fffff 	.word	0x000fffff
   155ec:	000185f0 	.word	0x000185f0
   155f0:	fffffbed 	.word	0xfffffbed
   155f4:	00000000 	.word	0x00000000

000155f8 <scalbn>:
   155f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155fa:	4e3d      	ldr	r6, [pc, #244]	; (156f0 <scalbn+0xf8>)
   155fc:	1c17      	adds	r7, r2, #0
   155fe:	1c33      	adds	r3, r6, #0
   15600:	400b      	ands	r3, r1
   15602:	1c04      	adds	r4, r0, #0
   15604:	1c0d      	adds	r5, r1, #0
   15606:	1c0a      	adds	r2, r1, #0
   15608:	151b      	asrs	r3, r3, #20
   1560a:	d125      	bne.n	15658 <scalbn+0x60>
   1560c:	004b      	lsls	r3, r1, #1
   1560e:	085b      	lsrs	r3, r3, #1
   15610:	4318      	orrs	r0, r3
   15612:	d01e      	beq.n	15652 <scalbn+0x5a>
   15614:	1c20      	adds	r0, r4, #0
   15616:	1c29      	adds	r1, r5, #0
   15618:	4b2e      	ldr	r3, [pc, #184]	; (156d4 <scalbn+0xdc>)
   1561a:	4a2d      	ldr	r2, [pc, #180]	; (156d0 <scalbn+0xd8>)
   1561c:	f001 f98e 	bl	1693c <__aeabi_dmul>
   15620:	4b34      	ldr	r3, [pc, #208]	; (156f4 <scalbn+0xfc>)
   15622:	1c04      	adds	r4, r0, #0
   15624:	1c0d      	adds	r5, r1, #0
   15626:	429f      	cmp	r7, r3
   15628:	db31      	blt.n	1568e <scalbn+0x96>
   1562a:	400e      	ands	r6, r1
   1562c:	1533      	asrs	r3, r6, #20
   1562e:	1c0a      	adds	r2, r1, #0
   15630:	3b36      	subs	r3, #54	; 0x36
   15632:	4931      	ldr	r1, [pc, #196]	; (156f8 <scalbn+0x100>)
   15634:	19db      	adds	r3, r3, r7
   15636:	428b      	cmp	r3, r1
   15638:	dd15      	ble.n	15666 <scalbn+0x6e>
   1563a:	1c22      	adds	r2, r4, #0
   1563c:	1c2b      	adds	r3, r5, #0
   1563e:	4826      	ldr	r0, [pc, #152]	; (156d8 <scalbn+0xe0>)
   15640:	4926      	ldr	r1, [pc, #152]	; (156dc <scalbn+0xe4>)
   15642:	f000 f861 	bl	15708 <copysign>
   15646:	4a24      	ldr	r2, [pc, #144]	; (156d8 <scalbn+0xe0>)
   15648:	4b24      	ldr	r3, [pc, #144]	; (156dc <scalbn+0xe4>)
   1564a:	f001 f977 	bl	1693c <__aeabi_dmul>
   1564e:	1c04      	adds	r4, r0, #0
   15650:	1c0d      	adds	r5, r1, #0
   15652:	1c29      	adds	r1, r5, #0
   15654:	1c20      	adds	r0, r4, #0
   15656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15658:	4928      	ldr	r1, [pc, #160]	; (156fc <scalbn+0x104>)
   1565a:	428b      	cmp	r3, r1
   1565c:	d01e      	beq.n	1569c <scalbn+0xa4>
   1565e:	4926      	ldr	r1, [pc, #152]	; (156f8 <scalbn+0x100>)
   15660:	19db      	adds	r3, r3, r7
   15662:	428b      	cmp	r3, r1
   15664:	dce9      	bgt.n	1563a <scalbn+0x42>
   15666:	2b00      	cmp	r3, #0
   15668:	dd05      	ble.n	15676 <scalbn+0x7e>
   1566a:	4925      	ldr	r1, [pc, #148]	; (15700 <scalbn+0x108>)
   1566c:	051b      	lsls	r3, r3, #20
   1566e:	400a      	ands	r2, r1
   15670:	1c1d      	adds	r5, r3, #0
   15672:	4315      	orrs	r5, r2
   15674:	e7ed      	b.n	15652 <scalbn+0x5a>
   15676:	1c19      	adds	r1, r3, #0
   15678:	3135      	adds	r1, #53	; 0x35
   1567a:	da18      	bge.n	156ae <scalbn+0xb6>
   1567c:	4b21      	ldr	r3, [pc, #132]	; (15704 <scalbn+0x10c>)
   1567e:	429f      	cmp	r7, r3
   15680:	dcdb      	bgt.n	1563a <scalbn+0x42>
   15682:	4817      	ldr	r0, [pc, #92]	; (156e0 <scalbn+0xe8>)
   15684:	4917      	ldr	r1, [pc, #92]	; (156e4 <scalbn+0xec>)
   15686:	1c22      	adds	r2, r4, #0
   15688:	1c2b      	adds	r3, r5, #0
   1568a:	f000 f83d 	bl	15708 <copysign>
   1568e:	4a14      	ldr	r2, [pc, #80]	; (156e0 <scalbn+0xe8>)
   15690:	4b14      	ldr	r3, [pc, #80]	; (156e4 <scalbn+0xec>)
   15692:	f001 f953 	bl	1693c <__aeabi_dmul>
   15696:	1c04      	adds	r4, r0, #0
   15698:	1c0d      	adds	r5, r1, #0
   1569a:	e7da      	b.n	15652 <scalbn+0x5a>
   1569c:	1c20      	adds	r0, r4, #0
   1569e:	1c29      	adds	r1, r5, #0
   156a0:	1c22      	adds	r2, r4, #0
   156a2:	1c2b      	adds	r3, r5, #0
   156a4:	f000 f9be 	bl	15a24 <__aeabi_dadd>
   156a8:	1c04      	adds	r4, r0, #0
   156aa:	1c0d      	adds	r5, r1, #0
   156ac:	e7d1      	b.n	15652 <scalbn+0x5a>
   156ae:	4914      	ldr	r1, [pc, #80]	; (15700 <scalbn+0x108>)
   156b0:	3336      	adds	r3, #54	; 0x36
   156b2:	051b      	lsls	r3, r3, #20
   156b4:	400a      	ands	r2, r1
   156b6:	1c1d      	adds	r5, r3, #0
   156b8:	4315      	orrs	r5, r2
   156ba:	1c20      	adds	r0, r4, #0
   156bc:	1c29      	adds	r1, r5, #0
   156be:	4a0a      	ldr	r2, [pc, #40]	; (156e8 <scalbn+0xf0>)
   156c0:	4b0a      	ldr	r3, [pc, #40]	; (156ec <scalbn+0xf4>)
   156c2:	f001 f93b 	bl	1693c <__aeabi_dmul>
   156c6:	1c04      	adds	r4, r0, #0
   156c8:	1c0d      	adds	r5, r1, #0
   156ca:	e7c2      	b.n	15652 <scalbn+0x5a>
   156cc:	46c0      	nop			; (mov r8, r8)
   156ce:	46c0      	nop			; (mov r8, r8)
   156d0:	00000000 	.word	0x00000000
   156d4:	43500000 	.word	0x43500000
   156d8:	8800759c 	.word	0x8800759c
   156dc:	7e37e43c 	.word	0x7e37e43c
   156e0:	c2f8f359 	.word	0xc2f8f359
   156e4:	01a56e1f 	.word	0x01a56e1f
   156e8:	00000000 	.word	0x00000000
   156ec:	3c900000 	.word	0x3c900000
   156f0:	7ff00000 	.word	0x7ff00000
   156f4:	ffff3cb0 	.word	0xffff3cb0
   156f8:	000007fe 	.word	0x000007fe
   156fc:	000007ff 	.word	0x000007ff
   15700:	800fffff 	.word	0x800fffff
   15704:	0000c350 	.word	0x0000c350

00015708 <copysign>:
   15708:	b530      	push	{r4, r5, lr}
   1570a:	0fda      	lsrs	r2, r3, #31
   1570c:	07d2      	lsls	r2, r2, #31
   1570e:	004b      	lsls	r3, r1, #1
   15710:	085b      	lsrs	r3, r3, #1
   15712:	1c11      	adds	r1, r2, #0
   15714:	4319      	orrs	r1, r3
   15716:	bd30      	pop	{r4, r5, pc}

00015718 <__aeabi_uidiv>:
   15718:	2900      	cmp	r1, #0
   1571a:	d034      	beq.n	15786 <.udivsi3_skip_div0_test+0x6a>

0001571c <.udivsi3_skip_div0_test>:
   1571c:	2301      	movs	r3, #1
   1571e:	2200      	movs	r2, #0
   15720:	b410      	push	{r4}
   15722:	4288      	cmp	r0, r1
   15724:	d32c      	bcc.n	15780 <.udivsi3_skip_div0_test+0x64>
   15726:	2401      	movs	r4, #1
   15728:	0724      	lsls	r4, r4, #28
   1572a:	42a1      	cmp	r1, r4
   1572c:	d204      	bcs.n	15738 <.udivsi3_skip_div0_test+0x1c>
   1572e:	4281      	cmp	r1, r0
   15730:	d202      	bcs.n	15738 <.udivsi3_skip_div0_test+0x1c>
   15732:	0109      	lsls	r1, r1, #4
   15734:	011b      	lsls	r3, r3, #4
   15736:	e7f8      	b.n	1572a <.udivsi3_skip_div0_test+0xe>
   15738:	00e4      	lsls	r4, r4, #3
   1573a:	42a1      	cmp	r1, r4
   1573c:	d204      	bcs.n	15748 <.udivsi3_skip_div0_test+0x2c>
   1573e:	4281      	cmp	r1, r0
   15740:	d202      	bcs.n	15748 <.udivsi3_skip_div0_test+0x2c>
   15742:	0049      	lsls	r1, r1, #1
   15744:	005b      	lsls	r3, r3, #1
   15746:	e7f8      	b.n	1573a <.udivsi3_skip_div0_test+0x1e>
   15748:	4288      	cmp	r0, r1
   1574a:	d301      	bcc.n	15750 <.udivsi3_skip_div0_test+0x34>
   1574c:	1a40      	subs	r0, r0, r1
   1574e:	431a      	orrs	r2, r3
   15750:	084c      	lsrs	r4, r1, #1
   15752:	42a0      	cmp	r0, r4
   15754:	d302      	bcc.n	1575c <.udivsi3_skip_div0_test+0x40>
   15756:	1b00      	subs	r0, r0, r4
   15758:	085c      	lsrs	r4, r3, #1
   1575a:	4322      	orrs	r2, r4
   1575c:	088c      	lsrs	r4, r1, #2
   1575e:	42a0      	cmp	r0, r4
   15760:	d302      	bcc.n	15768 <.udivsi3_skip_div0_test+0x4c>
   15762:	1b00      	subs	r0, r0, r4
   15764:	089c      	lsrs	r4, r3, #2
   15766:	4322      	orrs	r2, r4
   15768:	08cc      	lsrs	r4, r1, #3
   1576a:	42a0      	cmp	r0, r4
   1576c:	d302      	bcc.n	15774 <.udivsi3_skip_div0_test+0x58>
   1576e:	1b00      	subs	r0, r0, r4
   15770:	08dc      	lsrs	r4, r3, #3
   15772:	4322      	orrs	r2, r4
   15774:	2800      	cmp	r0, #0
   15776:	d003      	beq.n	15780 <.udivsi3_skip_div0_test+0x64>
   15778:	091b      	lsrs	r3, r3, #4
   1577a:	d001      	beq.n	15780 <.udivsi3_skip_div0_test+0x64>
   1577c:	0909      	lsrs	r1, r1, #4
   1577e:	e7e3      	b.n	15748 <.udivsi3_skip_div0_test+0x2c>
   15780:	1c10      	adds	r0, r2, #0
   15782:	bc10      	pop	{r4}
   15784:	4770      	bx	lr
   15786:	2800      	cmp	r0, #0
   15788:	d001      	beq.n	1578e <.udivsi3_skip_div0_test+0x72>
   1578a:	2000      	movs	r0, #0
   1578c:	43c0      	mvns	r0, r0
   1578e:	b407      	push	{r0, r1, r2}
   15790:	4802      	ldr	r0, [pc, #8]	; (1579c <.udivsi3_skip_div0_test+0x80>)
   15792:	a102      	add	r1, pc, #8	; (adr r1, 1579c <.udivsi3_skip_div0_test+0x80>)
   15794:	1840      	adds	r0, r0, r1
   15796:	9002      	str	r0, [sp, #8]
   15798:	bd03      	pop	{r0, r1, pc}
   1579a:	46c0      	nop			; (mov r8, r8)
   1579c:	000000d9 	.word	0x000000d9

000157a0 <__aeabi_uidivmod>:
   157a0:	2900      	cmp	r1, #0
   157a2:	d0f0      	beq.n	15786 <.udivsi3_skip_div0_test+0x6a>
   157a4:	b503      	push	{r0, r1, lr}
   157a6:	f7ff ffb9 	bl	1571c <.udivsi3_skip_div0_test>
   157aa:	bc0e      	pop	{r1, r2, r3}
   157ac:	4342      	muls	r2, r0
   157ae:	1a89      	subs	r1, r1, r2
   157b0:	4718      	bx	r3
   157b2:	46c0      	nop			; (mov r8, r8)

000157b4 <__aeabi_idiv>:
   157b4:	2900      	cmp	r1, #0
   157b6:	d041      	beq.n	1583c <.divsi3_skip_div0_test+0x84>

000157b8 <.divsi3_skip_div0_test>:
   157b8:	b410      	push	{r4}
   157ba:	1c04      	adds	r4, r0, #0
   157bc:	404c      	eors	r4, r1
   157be:	46a4      	mov	ip, r4
   157c0:	2301      	movs	r3, #1
   157c2:	2200      	movs	r2, #0
   157c4:	2900      	cmp	r1, #0
   157c6:	d500      	bpl.n	157ca <.divsi3_skip_div0_test+0x12>
   157c8:	4249      	negs	r1, r1
   157ca:	2800      	cmp	r0, #0
   157cc:	d500      	bpl.n	157d0 <.divsi3_skip_div0_test+0x18>
   157ce:	4240      	negs	r0, r0
   157d0:	4288      	cmp	r0, r1
   157d2:	d32c      	bcc.n	1582e <.divsi3_skip_div0_test+0x76>
   157d4:	2401      	movs	r4, #1
   157d6:	0724      	lsls	r4, r4, #28
   157d8:	42a1      	cmp	r1, r4
   157da:	d204      	bcs.n	157e6 <.divsi3_skip_div0_test+0x2e>
   157dc:	4281      	cmp	r1, r0
   157de:	d202      	bcs.n	157e6 <.divsi3_skip_div0_test+0x2e>
   157e0:	0109      	lsls	r1, r1, #4
   157e2:	011b      	lsls	r3, r3, #4
   157e4:	e7f8      	b.n	157d8 <.divsi3_skip_div0_test+0x20>
   157e6:	00e4      	lsls	r4, r4, #3
   157e8:	42a1      	cmp	r1, r4
   157ea:	d204      	bcs.n	157f6 <.divsi3_skip_div0_test+0x3e>
   157ec:	4281      	cmp	r1, r0
   157ee:	d202      	bcs.n	157f6 <.divsi3_skip_div0_test+0x3e>
   157f0:	0049      	lsls	r1, r1, #1
   157f2:	005b      	lsls	r3, r3, #1
   157f4:	e7f8      	b.n	157e8 <.divsi3_skip_div0_test+0x30>
   157f6:	4288      	cmp	r0, r1
   157f8:	d301      	bcc.n	157fe <.divsi3_skip_div0_test+0x46>
   157fa:	1a40      	subs	r0, r0, r1
   157fc:	431a      	orrs	r2, r3
   157fe:	084c      	lsrs	r4, r1, #1
   15800:	42a0      	cmp	r0, r4
   15802:	d302      	bcc.n	1580a <.divsi3_skip_div0_test+0x52>
   15804:	1b00      	subs	r0, r0, r4
   15806:	085c      	lsrs	r4, r3, #1
   15808:	4322      	orrs	r2, r4
   1580a:	088c      	lsrs	r4, r1, #2
   1580c:	42a0      	cmp	r0, r4
   1580e:	d302      	bcc.n	15816 <.divsi3_skip_div0_test+0x5e>
   15810:	1b00      	subs	r0, r0, r4
   15812:	089c      	lsrs	r4, r3, #2
   15814:	4322      	orrs	r2, r4
   15816:	08cc      	lsrs	r4, r1, #3
   15818:	42a0      	cmp	r0, r4
   1581a:	d302      	bcc.n	15822 <.divsi3_skip_div0_test+0x6a>
   1581c:	1b00      	subs	r0, r0, r4
   1581e:	08dc      	lsrs	r4, r3, #3
   15820:	4322      	orrs	r2, r4
   15822:	2800      	cmp	r0, #0
   15824:	d003      	beq.n	1582e <.divsi3_skip_div0_test+0x76>
   15826:	091b      	lsrs	r3, r3, #4
   15828:	d001      	beq.n	1582e <.divsi3_skip_div0_test+0x76>
   1582a:	0909      	lsrs	r1, r1, #4
   1582c:	e7e3      	b.n	157f6 <.divsi3_skip_div0_test+0x3e>
   1582e:	1c10      	adds	r0, r2, #0
   15830:	4664      	mov	r4, ip
   15832:	2c00      	cmp	r4, #0
   15834:	d500      	bpl.n	15838 <.divsi3_skip_div0_test+0x80>
   15836:	4240      	negs	r0, r0
   15838:	bc10      	pop	{r4}
   1583a:	4770      	bx	lr
   1583c:	2800      	cmp	r0, #0
   1583e:	d006      	beq.n	1584e <.divsi3_skip_div0_test+0x96>
   15840:	db03      	blt.n	1584a <.divsi3_skip_div0_test+0x92>
   15842:	2000      	movs	r0, #0
   15844:	43c0      	mvns	r0, r0
   15846:	0840      	lsrs	r0, r0, #1
   15848:	e001      	b.n	1584e <.divsi3_skip_div0_test+0x96>
   1584a:	2080      	movs	r0, #128	; 0x80
   1584c:	0600      	lsls	r0, r0, #24
   1584e:	b407      	push	{r0, r1, r2}
   15850:	4802      	ldr	r0, [pc, #8]	; (1585c <.divsi3_skip_div0_test+0xa4>)
   15852:	a102      	add	r1, pc, #8	; (adr r1, 1585c <.divsi3_skip_div0_test+0xa4>)
   15854:	1840      	adds	r0, r0, r1
   15856:	9002      	str	r0, [sp, #8]
   15858:	bd03      	pop	{r0, r1, pc}
   1585a:	46c0      	nop			; (mov r8, r8)
   1585c:	00000019 	.word	0x00000019

00015860 <__aeabi_idivmod>:
   15860:	2900      	cmp	r1, #0
   15862:	d0eb      	beq.n	1583c <.divsi3_skip_div0_test+0x84>
   15864:	b503      	push	{r0, r1, lr}
   15866:	f7ff ffa7 	bl	157b8 <.divsi3_skip_div0_test>
   1586a:	bc0e      	pop	{r1, r2, r3}
   1586c:	4342      	muls	r2, r0
   1586e:	1a89      	subs	r1, r1, r2
   15870:	4718      	bx	r3
   15872:	46c0      	nop			; (mov r8, r8)

00015874 <__aeabi_idiv0>:
   15874:	4770      	bx	lr
   15876:	46c0      	nop			; (mov r8, r8)

00015878 <__aeabi_cdrcmple>:
   15878:	4684      	mov	ip, r0
   1587a:	1c10      	adds	r0, r2, #0
   1587c:	4662      	mov	r2, ip
   1587e:	468c      	mov	ip, r1
   15880:	1c19      	adds	r1, r3, #0
   15882:	4663      	mov	r3, ip
   15884:	e000      	b.n	15888 <__aeabi_cdcmpeq>
   15886:	46c0      	nop			; (mov r8, r8)

00015888 <__aeabi_cdcmpeq>:
   15888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1588a:	f000 ffd9 	bl	16840 <__ledf2>
   1588e:	2800      	cmp	r0, #0
   15890:	d401      	bmi.n	15896 <__aeabi_cdcmpeq+0xe>
   15892:	2100      	movs	r1, #0
   15894:	42c8      	cmn	r0, r1
   15896:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015898 <__aeabi_dcmpeq>:
   15898:	b510      	push	{r4, lr}
   1589a:	f000 ff09 	bl	166b0 <__eqdf2>
   1589e:	4240      	negs	r0, r0
   158a0:	3001      	adds	r0, #1
   158a2:	bd10      	pop	{r4, pc}

000158a4 <__aeabi_dcmplt>:
   158a4:	b510      	push	{r4, lr}
   158a6:	f000 ffcb 	bl	16840 <__ledf2>
   158aa:	2800      	cmp	r0, #0
   158ac:	db01      	blt.n	158b2 <__aeabi_dcmplt+0xe>
   158ae:	2000      	movs	r0, #0
   158b0:	bd10      	pop	{r4, pc}
   158b2:	2001      	movs	r0, #1
   158b4:	bd10      	pop	{r4, pc}
   158b6:	46c0      	nop			; (mov r8, r8)

000158b8 <__aeabi_dcmple>:
   158b8:	b510      	push	{r4, lr}
   158ba:	f000 ffc1 	bl	16840 <__ledf2>
   158be:	2800      	cmp	r0, #0
   158c0:	dd01      	ble.n	158c6 <__aeabi_dcmple+0xe>
   158c2:	2000      	movs	r0, #0
   158c4:	bd10      	pop	{r4, pc}
   158c6:	2001      	movs	r0, #1
   158c8:	bd10      	pop	{r4, pc}
   158ca:	46c0      	nop			; (mov r8, r8)

000158cc <__aeabi_dcmpgt>:
   158cc:	b510      	push	{r4, lr}
   158ce:	f000 ff39 	bl	16744 <__gedf2>
   158d2:	2800      	cmp	r0, #0
   158d4:	dc01      	bgt.n	158da <__aeabi_dcmpgt+0xe>
   158d6:	2000      	movs	r0, #0
   158d8:	bd10      	pop	{r4, pc}
   158da:	2001      	movs	r0, #1
   158dc:	bd10      	pop	{r4, pc}
   158de:	46c0      	nop			; (mov r8, r8)

000158e0 <__aeabi_dcmpge>:
   158e0:	b510      	push	{r4, lr}
   158e2:	f000 ff2f 	bl	16744 <__gedf2>
   158e6:	2800      	cmp	r0, #0
   158e8:	da01      	bge.n	158ee <__aeabi_dcmpge+0xe>
   158ea:	2000      	movs	r0, #0
   158ec:	bd10      	pop	{r4, pc}
   158ee:	2001      	movs	r0, #1
   158f0:	bd10      	pop	{r4, pc}
   158f2:	46c0      	nop			; (mov r8, r8)

000158f4 <__aeabi_uldivmod>:
   158f4:	2b00      	cmp	r3, #0
   158f6:	d111      	bne.n	1591c <__aeabi_uldivmod+0x28>
   158f8:	2a00      	cmp	r2, #0
   158fa:	d10f      	bne.n	1591c <__aeabi_uldivmod+0x28>
   158fc:	2900      	cmp	r1, #0
   158fe:	d100      	bne.n	15902 <__aeabi_uldivmod+0xe>
   15900:	2800      	cmp	r0, #0
   15902:	d002      	beq.n	1590a <__aeabi_uldivmod+0x16>
   15904:	2100      	movs	r1, #0
   15906:	43c9      	mvns	r1, r1
   15908:	1c08      	adds	r0, r1, #0
   1590a:	b407      	push	{r0, r1, r2}
   1590c:	4802      	ldr	r0, [pc, #8]	; (15918 <__aeabi_uldivmod+0x24>)
   1590e:	a102      	add	r1, pc, #8	; (adr r1, 15918 <__aeabi_uldivmod+0x24>)
   15910:	1840      	adds	r0, r0, r1
   15912:	9002      	str	r0, [sp, #8]
   15914:	bd03      	pop	{r0, r1, pc}
   15916:	46c0      	nop			; (mov r8, r8)
   15918:	ffffff5d 	.word	0xffffff5d
   1591c:	b403      	push	{r0, r1}
   1591e:	4668      	mov	r0, sp
   15920:	b501      	push	{r0, lr}
   15922:	9802      	ldr	r0, [sp, #8]
   15924:	f000 f864 	bl	159f0 <__gnu_uldivmod_helper>
   15928:	9b01      	ldr	r3, [sp, #4]
   1592a:	469e      	mov	lr, r3
   1592c:	b002      	add	sp, #8
   1592e:	bc0c      	pop	{r2, r3}
   15930:	4770      	bx	lr
   15932:	46c0      	nop			; (mov r8, r8)

00015934 <__aeabi_lmul>:
   15934:	469c      	mov	ip, r3
   15936:	0403      	lsls	r3, r0, #16
   15938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1593a:	0c1b      	lsrs	r3, r3, #16
   1593c:	0417      	lsls	r7, r2, #16
   1593e:	0c3f      	lsrs	r7, r7, #16
   15940:	0c15      	lsrs	r5, r2, #16
   15942:	1c1e      	adds	r6, r3, #0
   15944:	1c04      	adds	r4, r0, #0
   15946:	0c00      	lsrs	r0, r0, #16
   15948:	437e      	muls	r6, r7
   1594a:	436b      	muls	r3, r5
   1594c:	4347      	muls	r7, r0
   1594e:	4345      	muls	r5, r0
   15950:	18fb      	adds	r3, r7, r3
   15952:	0c30      	lsrs	r0, r6, #16
   15954:	1818      	adds	r0, r3, r0
   15956:	4287      	cmp	r7, r0
   15958:	d902      	bls.n	15960 <__aeabi_lmul+0x2c>
   1595a:	2380      	movs	r3, #128	; 0x80
   1595c:	025b      	lsls	r3, r3, #9
   1595e:	18ed      	adds	r5, r5, r3
   15960:	0c03      	lsrs	r3, r0, #16
   15962:	18ed      	adds	r5, r5, r3
   15964:	4663      	mov	r3, ip
   15966:	435c      	muls	r4, r3
   15968:	434a      	muls	r2, r1
   1596a:	0436      	lsls	r6, r6, #16
   1596c:	0c36      	lsrs	r6, r6, #16
   1596e:	18a1      	adds	r1, r4, r2
   15970:	0400      	lsls	r0, r0, #16
   15972:	1980      	adds	r0, r0, r6
   15974:	1949      	adds	r1, r1, r5
   15976:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015978 <__aeabi_d2uiz>:
   15978:	b538      	push	{r3, r4, r5, lr}
   1597a:	4b0e      	ldr	r3, [pc, #56]	; (159b4 <__aeabi_d2uiz+0x3c>)
   1597c:	4a0c      	ldr	r2, [pc, #48]	; (159b0 <__aeabi_d2uiz+0x38>)
   1597e:	1c04      	adds	r4, r0, #0
   15980:	1c0d      	adds	r5, r1, #0
   15982:	f7ff ffad 	bl	158e0 <__aeabi_dcmpge>
   15986:	2800      	cmp	r0, #0
   15988:	d104      	bne.n	15994 <__aeabi_d2uiz+0x1c>
   1598a:	1c20      	adds	r0, r4, #0
   1598c:	1c29      	adds	r1, r5, #0
   1598e:	f001 fd99 	bl	174c4 <__aeabi_d2iz>
   15992:	bd38      	pop	{r3, r4, r5, pc}
   15994:	4b07      	ldr	r3, [pc, #28]	; (159b4 <__aeabi_d2uiz+0x3c>)
   15996:	4a06      	ldr	r2, [pc, #24]	; (159b0 <__aeabi_d2uiz+0x38>)
   15998:	1c20      	adds	r0, r4, #0
   1599a:	1c29      	adds	r1, r5, #0
   1599c:	f001 fa5e 	bl	16e5c <__aeabi_dsub>
   159a0:	f001 fd90 	bl	174c4 <__aeabi_d2iz>
   159a4:	2380      	movs	r3, #128	; 0x80
   159a6:	061b      	lsls	r3, r3, #24
   159a8:	18c0      	adds	r0, r0, r3
   159aa:	e7f2      	b.n	15992 <__aeabi_d2uiz+0x1a>
   159ac:	46c0      	nop			; (mov r8, r8)
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	00000000 	.word	0x00000000
   159b4:	41e00000 	.word	0x41e00000

000159b8 <__gnu_ldivmod_helper>:
   159b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   159ba:	b083      	sub	sp, #12
   159bc:	1c16      	adds	r6, r2, #0
   159be:	1c1f      	adds	r7, r3, #0
   159c0:	9000      	str	r0, [sp, #0]
   159c2:	9101      	str	r1, [sp, #4]
   159c4:	f001 fe42 	bl	1764c <__divdi3>
   159c8:	1c04      	adds	r4, r0, #0
   159ca:	1c0d      	adds	r5, r1, #0
   159cc:	1c22      	adds	r2, r4, #0
   159ce:	1c2b      	adds	r3, r5, #0
   159d0:	1c30      	adds	r0, r6, #0
   159d2:	1c39      	adds	r1, r7, #0
   159d4:	f7ff ffae 	bl	15934 <__aeabi_lmul>
   159d8:	9a00      	ldr	r2, [sp, #0]
   159da:	9b01      	ldr	r3, [sp, #4]
   159dc:	1a12      	subs	r2, r2, r0
   159de:	418b      	sbcs	r3, r1
   159e0:	9908      	ldr	r1, [sp, #32]
   159e2:	1c20      	adds	r0, r4, #0
   159e4:	600a      	str	r2, [r1, #0]
   159e6:	604b      	str	r3, [r1, #4]
   159e8:	1c29      	adds	r1, r5, #0
   159ea:	b003      	add	sp, #12
   159ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159ee:	46c0      	nop			; (mov r8, r8)

000159f0 <__gnu_uldivmod_helper>:
   159f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   159f2:	b083      	sub	sp, #12
   159f4:	1c14      	adds	r4, r2, #0
   159f6:	1c1d      	adds	r5, r3, #0
   159f8:	9000      	str	r0, [sp, #0]
   159fa:	9101      	str	r1, [sp, #4]
   159fc:	f002 f802 	bl	17a04 <__udivdi3>
   15a00:	1c22      	adds	r2, r4, #0
   15a02:	1c2b      	adds	r3, r5, #0
   15a04:	1c06      	adds	r6, r0, #0
   15a06:	1c0f      	adds	r7, r1, #0
   15a08:	f7ff ff94 	bl	15934 <__aeabi_lmul>
   15a0c:	9a00      	ldr	r2, [sp, #0]
   15a0e:	9b01      	ldr	r3, [sp, #4]
   15a10:	1a12      	subs	r2, r2, r0
   15a12:	418b      	sbcs	r3, r1
   15a14:	9908      	ldr	r1, [sp, #32]
   15a16:	1c30      	adds	r0, r6, #0
   15a18:	600a      	str	r2, [r1, #0]
   15a1a:	604b      	str	r3, [r1, #4]
   15a1c:	1c39      	adds	r1, r7, #0
   15a1e:	b003      	add	sp, #12
   15a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a22:	46c0      	nop			; (mov r8, r8)

00015a24 <__aeabi_dadd>:
   15a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a26:	465f      	mov	r7, fp
   15a28:	4656      	mov	r6, sl
   15a2a:	4644      	mov	r4, r8
   15a2c:	464d      	mov	r5, r9
   15a2e:	b4f0      	push	{r4, r5, r6, r7}
   15a30:	030c      	lsls	r4, r1, #12
   15a32:	004d      	lsls	r5, r1, #1
   15a34:	0fce      	lsrs	r6, r1, #31
   15a36:	0a61      	lsrs	r1, r4, #9
   15a38:	0f44      	lsrs	r4, r0, #29
   15a3a:	4321      	orrs	r1, r4
   15a3c:	00c4      	lsls	r4, r0, #3
   15a3e:	0318      	lsls	r0, r3, #12
   15a40:	4680      	mov	r8, r0
   15a42:	0058      	lsls	r0, r3, #1
   15a44:	0d40      	lsrs	r0, r0, #21
   15a46:	4682      	mov	sl, r0
   15a48:	0fd8      	lsrs	r0, r3, #31
   15a4a:	4684      	mov	ip, r0
   15a4c:	4640      	mov	r0, r8
   15a4e:	0a40      	lsrs	r0, r0, #9
   15a50:	0f53      	lsrs	r3, r2, #29
   15a52:	4303      	orrs	r3, r0
   15a54:	00d0      	lsls	r0, r2, #3
   15a56:	0d6d      	lsrs	r5, r5, #21
   15a58:	1c37      	adds	r7, r6, #0
   15a5a:	4683      	mov	fp, r0
   15a5c:	4652      	mov	r2, sl
   15a5e:	4566      	cmp	r6, ip
   15a60:	d100      	bne.n	15a64 <__aeabi_dadd+0x40>
   15a62:	e0a4      	b.n	15bae <__aeabi_dadd+0x18a>
   15a64:	1aaf      	subs	r7, r5, r2
   15a66:	2f00      	cmp	r7, #0
   15a68:	dc00      	bgt.n	15a6c <__aeabi_dadd+0x48>
   15a6a:	e109      	b.n	15c80 <__aeabi_dadd+0x25c>
   15a6c:	2a00      	cmp	r2, #0
   15a6e:	d13b      	bne.n	15ae8 <__aeabi_dadd+0xc4>
   15a70:	4318      	orrs	r0, r3
   15a72:	d000      	beq.n	15a76 <__aeabi_dadd+0x52>
   15a74:	e0ea      	b.n	15c4c <__aeabi_dadd+0x228>
   15a76:	0763      	lsls	r3, r4, #29
   15a78:	d100      	bne.n	15a7c <__aeabi_dadd+0x58>
   15a7a:	e087      	b.n	15b8c <__aeabi_dadd+0x168>
   15a7c:	230f      	movs	r3, #15
   15a7e:	4023      	ands	r3, r4
   15a80:	2b04      	cmp	r3, #4
   15a82:	d100      	bne.n	15a86 <__aeabi_dadd+0x62>
   15a84:	e082      	b.n	15b8c <__aeabi_dadd+0x168>
   15a86:	1d22      	adds	r2, r4, #4
   15a88:	42a2      	cmp	r2, r4
   15a8a:	41a4      	sbcs	r4, r4
   15a8c:	4264      	negs	r4, r4
   15a8e:	2380      	movs	r3, #128	; 0x80
   15a90:	1909      	adds	r1, r1, r4
   15a92:	041b      	lsls	r3, r3, #16
   15a94:	400b      	ands	r3, r1
   15a96:	1c37      	adds	r7, r6, #0
   15a98:	1c14      	adds	r4, r2, #0
   15a9a:	2b00      	cmp	r3, #0
   15a9c:	d100      	bne.n	15aa0 <__aeabi_dadd+0x7c>
   15a9e:	e07c      	b.n	15b9a <__aeabi_dadd+0x176>
   15aa0:	4bce      	ldr	r3, [pc, #824]	; (15ddc <__aeabi_dadd+0x3b8>)
   15aa2:	3501      	adds	r5, #1
   15aa4:	429d      	cmp	r5, r3
   15aa6:	d100      	bne.n	15aaa <__aeabi_dadd+0x86>
   15aa8:	e105      	b.n	15cb6 <__aeabi_dadd+0x292>
   15aaa:	4bcd      	ldr	r3, [pc, #820]	; (15de0 <__aeabi_dadd+0x3bc>)
   15aac:	08e4      	lsrs	r4, r4, #3
   15aae:	4019      	ands	r1, r3
   15ab0:	0748      	lsls	r0, r1, #29
   15ab2:	0249      	lsls	r1, r1, #9
   15ab4:	4304      	orrs	r4, r0
   15ab6:	0b0b      	lsrs	r3, r1, #12
   15ab8:	2000      	movs	r0, #0
   15aba:	2100      	movs	r1, #0
   15abc:	031b      	lsls	r3, r3, #12
   15abe:	0b1a      	lsrs	r2, r3, #12
   15ac0:	0d0b      	lsrs	r3, r1, #20
   15ac2:	056d      	lsls	r5, r5, #21
   15ac4:	051b      	lsls	r3, r3, #20
   15ac6:	4313      	orrs	r3, r2
   15ac8:	086a      	lsrs	r2, r5, #1
   15aca:	4dc6      	ldr	r5, [pc, #792]	; (15de4 <__aeabi_dadd+0x3c0>)
   15acc:	07ff      	lsls	r7, r7, #31
   15ace:	401d      	ands	r5, r3
   15ad0:	4315      	orrs	r5, r2
   15ad2:	006d      	lsls	r5, r5, #1
   15ad4:	086d      	lsrs	r5, r5, #1
   15ad6:	1c29      	adds	r1, r5, #0
   15ad8:	4339      	orrs	r1, r7
   15ada:	1c20      	adds	r0, r4, #0
   15adc:	bc3c      	pop	{r2, r3, r4, r5}
   15ade:	4690      	mov	r8, r2
   15ae0:	4699      	mov	r9, r3
   15ae2:	46a2      	mov	sl, r4
   15ae4:	46ab      	mov	fp, r5
   15ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ae8:	48bc      	ldr	r0, [pc, #752]	; (15ddc <__aeabi_dadd+0x3b8>)
   15aea:	4285      	cmp	r5, r0
   15aec:	d0c3      	beq.n	15a76 <__aeabi_dadd+0x52>
   15aee:	2080      	movs	r0, #128	; 0x80
   15af0:	0400      	lsls	r0, r0, #16
   15af2:	4303      	orrs	r3, r0
   15af4:	2f38      	cmp	r7, #56	; 0x38
   15af6:	dd00      	ble.n	15afa <__aeabi_dadd+0xd6>
   15af8:	e0f0      	b.n	15cdc <__aeabi_dadd+0x2b8>
   15afa:	2f1f      	cmp	r7, #31
   15afc:	dd00      	ble.n	15b00 <__aeabi_dadd+0xdc>
   15afe:	e124      	b.n	15d4a <__aeabi_dadd+0x326>
   15b00:	2020      	movs	r0, #32
   15b02:	1bc0      	subs	r0, r0, r7
   15b04:	1c1a      	adds	r2, r3, #0
   15b06:	4681      	mov	r9, r0
   15b08:	4082      	lsls	r2, r0
   15b0a:	4658      	mov	r0, fp
   15b0c:	40f8      	lsrs	r0, r7
   15b0e:	4302      	orrs	r2, r0
   15b10:	4694      	mov	ip, r2
   15b12:	4658      	mov	r0, fp
   15b14:	464a      	mov	r2, r9
   15b16:	4090      	lsls	r0, r2
   15b18:	1e42      	subs	r2, r0, #1
   15b1a:	4190      	sbcs	r0, r2
   15b1c:	40fb      	lsrs	r3, r7
   15b1e:	4662      	mov	r2, ip
   15b20:	4302      	orrs	r2, r0
   15b22:	1c1f      	adds	r7, r3, #0
   15b24:	1aa2      	subs	r2, r4, r2
   15b26:	4294      	cmp	r4, r2
   15b28:	41a4      	sbcs	r4, r4
   15b2a:	4264      	negs	r4, r4
   15b2c:	1bc9      	subs	r1, r1, r7
   15b2e:	1b09      	subs	r1, r1, r4
   15b30:	1c14      	adds	r4, r2, #0
   15b32:	020b      	lsls	r3, r1, #8
   15b34:	d59f      	bpl.n	15a76 <__aeabi_dadd+0x52>
   15b36:	0249      	lsls	r1, r1, #9
   15b38:	0a4f      	lsrs	r7, r1, #9
   15b3a:	2f00      	cmp	r7, #0
   15b3c:	d100      	bne.n	15b40 <__aeabi_dadd+0x11c>
   15b3e:	e0c8      	b.n	15cd2 <__aeabi_dadd+0x2ae>
   15b40:	1c38      	adds	r0, r7, #0
   15b42:	f001 fd65 	bl	17610 <__clzsi2>
   15b46:	1c02      	adds	r2, r0, #0
   15b48:	3a08      	subs	r2, #8
   15b4a:	2a1f      	cmp	r2, #31
   15b4c:	dd00      	ble.n	15b50 <__aeabi_dadd+0x12c>
   15b4e:	e0b5      	b.n	15cbc <__aeabi_dadd+0x298>
   15b50:	2128      	movs	r1, #40	; 0x28
   15b52:	1a09      	subs	r1, r1, r0
   15b54:	1c20      	adds	r0, r4, #0
   15b56:	4097      	lsls	r7, r2
   15b58:	40c8      	lsrs	r0, r1
   15b5a:	4307      	orrs	r7, r0
   15b5c:	4094      	lsls	r4, r2
   15b5e:	4295      	cmp	r5, r2
   15b60:	dd00      	ble.n	15b64 <__aeabi_dadd+0x140>
   15b62:	e0b2      	b.n	15cca <__aeabi_dadd+0x2a6>
   15b64:	1b55      	subs	r5, r2, r5
   15b66:	1c69      	adds	r1, r5, #1
   15b68:	291f      	cmp	r1, #31
   15b6a:	dd00      	ble.n	15b6e <__aeabi_dadd+0x14a>
   15b6c:	e0dc      	b.n	15d28 <__aeabi_dadd+0x304>
   15b6e:	221f      	movs	r2, #31
   15b70:	1b55      	subs	r5, r2, r5
   15b72:	1c3b      	adds	r3, r7, #0
   15b74:	1c22      	adds	r2, r4, #0
   15b76:	40ab      	lsls	r3, r5
   15b78:	40ca      	lsrs	r2, r1
   15b7a:	40ac      	lsls	r4, r5
   15b7c:	1e65      	subs	r5, r4, #1
   15b7e:	41ac      	sbcs	r4, r5
   15b80:	4313      	orrs	r3, r2
   15b82:	40cf      	lsrs	r7, r1
   15b84:	431c      	orrs	r4, r3
   15b86:	1c39      	adds	r1, r7, #0
   15b88:	2500      	movs	r5, #0
   15b8a:	e774      	b.n	15a76 <__aeabi_dadd+0x52>
   15b8c:	2380      	movs	r3, #128	; 0x80
   15b8e:	041b      	lsls	r3, r3, #16
   15b90:	400b      	ands	r3, r1
   15b92:	1c37      	adds	r7, r6, #0
   15b94:	2b00      	cmp	r3, #0
   15b96:	d000      	beq.n	15b9a <__aeabi_dadd+0x176>
   15b98:	e782      	b.n	15aa0 <__aeabi_dadd+0x7c>
   15b9a:	4b90      	ldr	r3, [pc, #576]	; (15ddc <__aeabi_dadd+0x3b8>)
   15b9c:	0748      	lsls	r0, r1, #29
   15b9e:	08e4      	lsrs	r4, r4, #3
   15ba0:	4304      	orrs	r4, r0
   15ba2:	08c9      	lsrs	r1, r1, #3
   15ba4:	429d      	cmp	r5, r3
   15ba6:	d048      	beq.n	15c3a <__aeabi_dadd+0x216>
   15ba8:	0309      	lsls	r1, r1, #12
   15baa:	0b0b      	lsrs	r3, r1, #12
   15bac:	e784      	b.n	15ab8 <__aeabi_dadd+0x94>
   15bae:	1aaa      	subs	r2, r5, r2
   15bb0:	4694      	mov	ip, r2
   15bb2:	2a00      	cmp	r2, #0
   15bb4:	dc00      	bgt.n	15bb8 <__aeabi_dadd+0x194>
   15bb6:	e098      	b.n	15cea <__aeabi_dadd+0x2c6>
   15bb8:	4650      	mov	r0, sl
   15bba:	2800      	cmp	r0, #0
   15bbc:	d052      	beq.n	15c64 <__aeabi_dadd+0x240>
   15bbe:	4887      	ldr	r0, [pc, #540]	; (15ddc <__aeabi_dadd+0x3b8>)
   15bc0:	4285      	cmp	r5, r0
   15bc2:	d100      	bne.n	15bc6 <__aeabi_dadd+0x1a2>
   15bc4:	e757      	b.n	15a76 <__aeabi_dadd+0x52>
   15bc6:	2080      	movs	r0, #128	; 0x80
   15bc8:	0400      	lsls	r0, r0, #16
   15bca:	4303      	orrs	r3, r0
   15bcc:	4662      	mov	r2, ip
   15bce:	2a38      	cmp	r2, #56	; 0x38
   15bd0:	dd00      	ble.n	15bd4 <__aeabi_dadd+0x1b0>
   15bd2:	e0fc      	b.n	15dce <__aeabi_dadd+0x3aa>
   15bd4:	2a1f      	cmp	r2, #31
   15bd6:	dd00      	ble.n	15bda <__aeabi_dadd+0x1b6>
   15bd8:	e14a      	b.n	15e70 <__aeabi_dadd+0x44c>
   15bda:	2220      	movs	r2, #32
   15bdc:	4660      	mov	r0, ip
   15bde:	1a10      	subs	r0, r2, r0
   15be0:	1c1a      	adds	r2, r3, #0
   15be2:	4082      	lsls	r2, r0
   15be4:	4682      	mov	sl, r0
   15be6:	4691      	mov	r9, r2
   15be8:	4658      	mov	r0, fp
   15bea:	4662      	mov	r2, ip
   15bec:	40d0      	lsrs	r0, r2
   15bee:	464a      	mov	r2, r9
   15bf0:	4302      	orrs	r2, r0
   15bf2:	4690      	mov	r8, r2
   15bf4:	4658      	mov	r0, fp
   15bf6:	4652      	mov	r2, sl
   15bf8:	4090      	lsls	r0, r2
   15bfa:	1e42      	subs	r2, r0, #1
   15bfc:	4190      	sbcs	r0, r2
   15bfe:	4642      	mov	r2, r8
   15c00:	4302      	orrs	r2, r0
   15c02:	4660      	mov	r0, ip
   15c04:	40c3      	lsrs	r3, r0
   15c06:	1912      	adds	r2, r2, r4
   15c08:	42a2      	cmp	r2, r4
   15c0a:	41a4      	sbcs	r4, r4
   15c0c:	4264      	negs	r4, r4
   15c0e:	1859      	adds	r1, r3, r1
   15c10:	1909      	adds	r1, r1, r4
   15c12:	1c14      	adds	r4, r2, #0
   15c14:	0208      	lsls	r0, r1, #8
   15c16:	d400      	bmi.n	15c1a <__aeabi_dadd+0x1f6>
   15c18:	e72d      	b.n	15a76 <__aeabi_dadd+0x52>
   15c1a:	4b70      	ldr	r3, [pc, #448]	; (15ddc <__aeabi_dadd+0x3b8>)
   15c1c:	3501      	adds	r5, #1
   15c1e:	429d      	cmp	r5, r3
   15c20:	d100      	bne.n	15c24 <__aeabi_dadd+0x200>
   15c22:	e122      	b.n	15e6a <__aeabi_dadd+0x446>
   15c24:	4b6e      	ldr	r3, [pc, #440]	; (15de0 <__aeabi_dadd+0x3bc>)
   15c26:	0860      	lsrs	r0, r4, #1
   15c28:	4019      	ands	r1, r3
   15c2a:	2301      	movs	r3, #1
   15c2c:	4023      	ands	r3, r4
   15c2e:	1c1c      	adds	r4, r3, #0
   15c30:	4304      	orrs	r4, r0
   15c32:	07cb      	lsls	r3, r1, #31
   15c34:	431c      	orrs	r4, r3
   15c36:	0849      	lsrs	r1, r1, #1
   15c38:	e71d      	b.n	15a76 <__aeabi_dadd+0x52>
   15c3a:	1c23      	adds	r3, r4, #0
   15c3c:	430b      	orrs	r3, r1
   15c3e:	d03a      	beq.n	15cb6 <__aeabi_dadd+0x292>
   15c40:	2380      	movs	r3, #128	; 0x80
   15c42:	031b      	lsls	r3, r3, #12
   15c44:	430b      	orrs	r3, r1
   15c46:	031b      	lsls	r3, r3, #12
   15c48:	0b1b      	lsrs	r3, r3, #12
   15c4a:	e735      	b.n	15ab8 <__aeabi_dadd+0x94>
   15c4c:	3f01      	subs	r7, #1
   15c4e:	2f00      	cmp	r7, #0
   15c50:	d165      	bne.n	15d1e <__aeabi_dadd+0x2fa>
   15c52:	4658      	mov	r0, fp
   15c54:	1a22      	subs	r2, r4, r0
   15c56:	4294      	cmp	r4, r2
   15c58:	41a4      	sbcs	r4, r4
   15c5a:	4264      	negs	r4, r4
   15c5c:	1ac9      	subs	r1, r1, r3
   15c5e:	1b09      	subs	r1, r1, r4
   15c60:	1c14      	adds	r4, r2, #0
   15c62:	e766      	b.n	15b32 <__aeabi_dadd+0x10e>
   15c64:	4658      	mov	r0, fp
   15c66:	4318      	orrs	r0, r3
   15c68:	d100      	bne.n	15c6c <__aeabi_dadd+0x248>
   15c6a:	e704      	b.n	15a76 <__aeabi_dadd+0x52>
   15c6c:	2201      	movs	r2, #1
   15c6e:	4252      	negs	r2, r2
   15c70:	4494      	add	ip, r2
   15c72:	4660      	mov	r0, ip
   15c74:	2800      	cmp	r0, #0
   15c76:	d000      	beq.n	15c7a <__aeabi_dadd+0x256>
   15c78:	e0c5      	b.n	15e06 <__aeabi_dadd+0x3e2>
   15c7a:	4658      	mov	r0, fp
   15c7c:	1902      	adds	r2, r0, r4
   15c7e:	e7c3      	b.n	15c08 <__aeabi_dadd+0x1e4>
   15c80:	2f00      	cmp	r7, #0
   15c82:	d173      	bne.n	15d6c <__aeabi_dadd+0x348>
   15c84:	1c68      	adds	r0, r5, #1
   15c86:	0540      	lsls	r0, r0, #21
   15c88:	0d40      	lsrs	r0, r0, #21
   15c8a:	2801      	cmp	r0, #1
   15c8c:	dc00      	bgt.n	15c90 <__aeabi_dadd+0x26c>
   15c8e:	e0de      	b.n	15e4e <__aeabi_dadd+0x42a>
   15c90:	465a      	mov	r2, fp
   15c92:	1aa2      	subs	r2, r4, r2
   15c94:	4294      	cmp	r4, r2
   15c96:	41bf      	sbcs	r7, r7
   15c98:	1ac8      	subs	r0, r1, r3
   15c9a:	427f      	negs	r7, r7
   15c9c:	1bc7      	subs	r7, r0, r7
   15c9e:	0238      	lsls	r0, r7, #8
   15ca0:	d400      	bmi.n	15ca4 <__aeabi_dadd+0x280>
   15ca2:	e089      	b.n	15db8 <__aeabi_dadd+0x394>
   15ca4:	465a      	mov	r2, fp
   15ca6:	1b14      	subs	r4, r2, r4
   15ca8:	45a3      	cmp	fp, r4
   15caa:	4192      	sbcs	r2, r2
   15cac:	1a59      	subs	r1, r3, r1
   15cae:	4252      	negs	r2, r2
   15cb0:	1a8f      	subs	r7, r1, r2
   15cb2:	4666      	mov	r6, ip
   15cb4:	e741      	b.n	15b3a <__aeabi_dadd+0x116>
   15cb6:	2300      	movs	r3, #0
   15cb8:	2400      	movs	r4, #0
   15cba:	e6fd      	b.n	15ab8 <__aeabi_dadd+0x94>
   15cbc:	1c27      	adds	r7, r4, #0
   15cbe:	3828      	subs	r0, #40	; 0x28
   15cc0:	4087      	lsls	r7, r0
   15cc2:	2400      	movs	r4, #0
   15cc4:	4295      	cmp	r5, r2
   15cc6:	dc00      	bgt.n	15cca <__aeabi_dadd+0x2a6>
   15cc8:	e74c      	b.n	15b64 <__aeabi_dadd+0x140>
   15cca:	4945      	ldr	r1, [pc, #276]	; (15de0 <__aeabi_dadd+0x3bc>)
   15ccc:	1aad      	subs	r5, r5, r2
   15cce:	4039      	ands	r1, r7
   15cd0:	e6d1      	b.n	15a76 <__aeabi_dadd+0x52>
   15cd2:	1c20      	adds	r0, r4, #0
   15cd4:	f001 fc9c 	bl	17610 <__clzsi2>
   15cd8:	3020      	adds	r0, #32
   15cda:	e734      	b.n	15b46 <__aeabi_dadd+0x122>
   15cdc:	465a      	mov	r2, fp
   15cde:	431a      	orrs	r2, r3
   15ce0:	1e53      	subs	r3, r2, #1
   15ce2:	419a      	sbcs	r2, r3
   15ce4:	b2d2      	uxtb	r2, r2
   15ce6:	2700      	movs	r7, #0
   15ce8:	e71c      	b.n	15b24 <__aeabi_dadd+0x100>
   15cea:	2a00      	cmp	r2, #0
   15cec:	d000      	beq.n	15cf0 <__aeabi_dadd+0x2cc>
   15cee:	e0dc      	b.n	15eaa <__aeabi_dadd+0x486>
   15cf0:	1c68      	adds	r0, r5, #1
   15cf2:	0542      	lsls	r2, r0, #21
   15cf4:	0d52      	lsrs	r2, r2, #21
   15cf6:	2a01      	cmp	r2, #1
   15cf8:	dc00      	bgt.n	15cfc <__aeabi_dadd+0x2d8>
   15cfa:	e08d      	b.n	15e18 <__aeabi_dadd+0x3f4>
   15cfc:	4d37      	ldr	r5, [pc, #220]	; (15ddc <__aeabi_dadd+0x3b8>)
   15cfe:	42a8      	cmp	r0, r5
   15d00:	d100      	bne.n	15d04 <__aeabi_dadd+0x2e0>
   15d02:	e0f3      	b.n	15eec <__aeabi_dadd+0x4c8>
   15d04:	465d      	mov	r5, fp
   15d06:	192a      	adds	r2, r5, r4
   15d08:	42a2      	cmp	r2, r4
   15d0a:	41a4      	sbcs	r4, r4
   15d0c:	4264      	negs	r4, r4
   15d0e:	1859      	adds	r1, r3, r1
   15d10:	1909      	adds	r1, r1, r4
   15d12:	07cc      	lsls	r4, r1, #31
   15d14:	0852      	lsrs	r2, r2, #1
   15d16:	4314      	orrs	r4, r2
   15d18:	0849      	lsrs	r1, r1, #1
   15d1a:	1c05      	adds	r5, r0, #0
   15d1c:	e6ab      	b.n	15a76 <__aeabi_dadd+0x52>
   15d1e:	482f      	ldr	r0, [pc, #188]	; (15ddc <__aeabi_dadd+0x3b8>)
   15d20:	4285      	cmp	r5, r0
   15d22:	d000      	beq.n	15d26 <__aeabi_dadd+0x302>
   15d24:	e6e6      	b.n	15af4 <__aeabi_dadd+0xd0>
   15d26:	e6a6      	b.n	15a76 <__aeabi_dadd+0x52>
   15d28:	1c2b      	adds	r3, r5, #0
   15d2a:	3b1f      	subs	r3, #31
   15d2c:	1c3a      	adds	r2, r7, #0
   15d2e:	40da      	lsrs	r2, r3
   15d30:	1c13      	adds	r3, r2, #0
   15d32:	2920      	cmp	r1, #32
   15d34:	d06c      	beq.n	15e10 <__aeabi_dadd+0x3ec>
   15d36:	223f      	movs	r2, #63	; 0x3f
   15d38:	1b55      	subs	r5, r2, r5
   15d3a:	40af      	lsls	r7, r5
   15d3c:	433c      	orrs	r4, r7
   15d3e:	1e60      	subs	r0, r4, #1
   15d40:	4184      	sbcs	r4, r0
   15d42:	431c      	orrs	r4, r3
   15d44:	2100      	movs	r1, #0
   15d46:	2500      	movs	r5, #0
   15d48:	e695      	b.n	15a76 <__aeabi_dadd+0x52>
   15d4a:	1c38      	adds	r0, r7, #0
   15d4c:	3820      	subs	r0, #32
   15d4e:	1c1a      	adds	r2, r3, #0
   15d50:	40c2      	lsrs	r2, r0
   15d52:	1c10      	adds	r0, r2, #0
   15d54:	2f20      	cmp	r7, #32
   15d56:	d05d      	beq.n	15e14 <__aeabi_dadd+0x3f0>
   15d58:	2240      	movs	r2, #64	; 0x40
   15d5a:	1bd7      	subs	r7, r2, r7
   15d5c:	40bb      	lsls	r3, r7
   15d5e:	465a      	mov	r2, fp
   15d60:	431a      	orrs	r2, r3
   15d62:	1e53      	subs	r3, r2, #1
   15d64:	419a      	sbcs	r2, r3
   15d66:	4302      	orrs	r2, r0
   15d68:	2700      	movs	r7, #0
   15d6a:	e6db      	b.n	15b24 <__aeabi_dadd+0x100>
   15d6c:	2d00      	cmp	r5, #0
   15d6e:	d03b      	beq.n	15de8 <__aeabi_dadd+0x3c4>
   15d70:	4d1a      	ldr	r5, [pc, #104]	; (15ddc <__aeabi_dadd+0x3b8>)
   15d72:	45aa      	cmp	sl, r5
   15d74:	d100      	bne.n	15d78 <__aeabi_dadd+0x354>
   15d76:	e093      	b.n	15ea0 <__aeabi_dadd+0x47c>
   15d78:	2580      	movs	r5, #128	; 0x80
   15d7a:	042d      	lsls	r5, r5, #16
   15d7c:	427f      	negs	r7, r7
   15d7e:	4329      	orrs	r1, r5
   15d80:	2f38      	cmp	r7, #56	; 0x38
   15d82:	dd00      	ble.n	15d86 <__aeabi_dadd+0x362>
   15d84:	e0ac      	b.n	15ee0 <__aeabi_dadd+0x4bc>
   15d86:	2f1f      	cmp	r7, #31
   15d88:	dd00      	ble.n	15d8c <__aeabi_dadd+0x368>
   15d8a:	e129      	b.n	15fe0 <__aeabi_dadd+0x5bc>
   15d8c:	2520      	movs	r5, #32
   15d8e:	1bed      	subs	r5, r5, r7
   15d90:	1c08      	adds	r0, r1, #0
   15d92:	1c26      	adds	r6, r4, #0
   15d94:	40a8      	lsls	r0, r5
   15d96:	40fe      	lsrs	r6, r7
   15d98:	40ac      	lsls	r4, r5
   15d9a:	4306      	orrs	r6, r0
   15d9c:	1e65      	subs	r5, r4, #1
   15d9e:	41ac      	sbcs	r4, r5
   15da0:	4334      	orrs	r4, r6
   15da2:	40f9      	lsrs	r1, r7
   15da4:	465d      	mov	r5, fp
   15da6:	1b2c      	subs	r4, r5, r4
   15da8:	45a3      	cmp	fp, r4
   15daa:	4192      	sbcs	r2, r2
   15dac:	1a5b      	subs	r3, r3, r1
   15dae:	4252      	negs	r2, r2
   15db0:	1a99      	subs	r1, r3, r2
   15db2:	4655      	mov	r5, sl
   15db4:	4666      	mov	r6, ip
   15db6:	e6bc      	b.n	15b32 <__aeabi_dadd+0x10e>
   15db8:	1c13      	adds	r3, r2, #0
   15dba:	433b      	orrs	r3, r7
   15dbc:	1c14      	adds	r4, r2, #0
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d000      	beq.n	15dc4 <__aeabi_dadd+0x3a0>
   15dc2:	e6ba      	b.n	15b3a <__aeabi_dadd+0x116>
   15dc4:	2700      	movs	r7, #0
   15dc6:	2100      	movs	r1, #0
   15dc8:	2500      	movs	r5, #0
   15dca:	2400      	movs	r4, #0
   15dcc:	e6e5      	b.n	15b9a <__aeabi_dadd+0x176>
   15dce:	465a      	mov	r2, fp
   15dd0:	431a      	orrs	r2, r3
   15dd2:	1e53      	subs	r3, r2, #1
   15dd4:	419a      	sbcs	r2, r3
   15dd6:	b2d2      	uxtb	r2, r2
   15dd8:	2300      	movs	r3, #0
   15dda:	e714      	b.n	15c06 <__aeabi_dadd+0x1e2>
   15ddc:	000007ff 	.word	0x000007ff
   15de0:	ff7fffff 	.word	0xff7fffff
   15de4:	800fffff 	.word	0x800fffff
   15de8:	1c0d      	adds	r5, r1, #0
   15dea:	4325      	orrs	r5, r4
   15dec:	d058      	beq.n	15ea0 <__aeabi_dadd+0x47c>
   15dee:	43ff      	mvns	r7, r7
   15df0:	2f00      	cmp	r7, #0
   15df2:	d151      	bne.n	15e98 <__aeabi_dadd+0x474>
   15df4:	1b04      	subs	r4, r0, r4
   15df6:	45a3      	cmp	fp, r4
   15df8:	4192      	sbcs	r2, r2
   15dfa:	1a59      	subs	r1, r3, r1
   15dfc:	4252      	negs	r2, r2
   15dfe:	1a89      	subs	r1, r1, r2
   15e00:	4655      	mov	r5, sl
   15e02:	4666      	mov	r6, ip
   15e04:	e695      	b.n	15b32 <__aeabi_dadd+0x10e>
   15e06:	4896      	ldr	r0, [pc, #600]	; (16060 <__aeabi_dadd+0x63c>)
   15e08:	4285      	cmp	r5, r0
   15e0a:	d000      	beq.n	15e0e <__aeabi_dadd+0x3ea>
   15e0c:	e6de      	b.n	15bcc <__aeabi_dadd+0x1a8>
   15e0e:	e632      	b.n	15a76 <__aeabi_dadd+0x52>
   15e10:	2700      	movs	r7, #0
   15e12:	e793      	b.n	15d3c <__aeabi_dadd+0x318>
   15e14:	2300      	movs	r3, #0
   15e16:	e7a2      	b.n	15d5e <__aeabi_dadd+0x33a>
   15e18:	1c08      	adds	r0, r1, #0
   15e1a:	4320      	orrs	r0, r4
   15e1c:	2d00      	cmp	r5, #0
   15e1e:	d000      	beq.n	15e22 <__aeabi_dadd+0x3fe>
   15e20:	e0c4      	b.n	15fac <__aeabi_dadd+0x588>
   15e22:	2800      	cmp	r0, #0
   15e24:	d100      	bne.n	15e28 <__aeabi_dadd+0x404>
   15e26:	e0f7      	b.n	16018 <__aeabi_dadd+0x5f4>
   15e28:	4658      	mov	r0, fp
   15e2a:	4318      	orrs	r0, r3
   15e2c:	d100      	bne.n	15e30 <__aeabi_dadd+0x40c>
   15e2e:	e622      	b.n	15a76 <__aeabi_dadd+0x52>
   15e30:	4658      	mov	r0, fp
   15e32:	1902      	adds	r2, r0, r4
   15e34:	42a2      	cmp	r2, r4
   15e36:	41a4      	sbcs	r4, r4
   15e38:	4264      	negs	r4, r4
   15e3a:	1859      	adds	r1, r3, r1
   15e3c:	1909      	adds	r1, r1, r4
   15e3e:	1c14      	adds	r4, r2, #0
   15e40:	020a      	lsls	r2, r1, #8
   15e42:	d400      	bmi.n	15e46 <__aeabi_dadd+0x422>
   15e44:	e617      	b.n	15a76 <__aeabi_dadd+0x52>
   15e46:	4b87      	ldr	r3, [pc, #540]	; (16064 <__aeabi_dadd+0x640>)
   15e48:	2501      	movs	r5, #1
   15e4a:	4019      	ands	r1, r3
   15e4c:	e613      	b.n	15a76 <__aeabi_dadd+0x52>
   15e4e:	1c08      	adds	r0, r1, #0
   15e50:	4320      	orrs	r0, r4
   15e52:	2d00      	cmp	r5, #0
   15e54:	d139      	bne.n	15eca <__aeabi_dadd+0x4a6>
   15e56:	2800      	cmp	r0, #0
   15e58:	d171      	bne.n	15f3e <__aeabi_dadd+0x51a>
   15e5a:	4659      	mov	r1, fp
   15e5c:	4319      	orrs	r1, r3
   15e5e:	d003      	beq.n	15e68 <__aeabi_dadd+0x444>
   15e60:	1c19      	adds	r1, r3, #0
   15e62:	465c      	mov	r4, fp
   15e64:	4666      	mov	r6, ip
   15e66:	e606      	b.n	15a76 <__aeabi_dadd+0x52>
   15e68:	2700      	movs	r7, #0
   15e6a:	2100      	movs	r1, #0
   15e6c:	2400      	movs	r4, #0
   15e6e:	e694      	b.n	15b9a <__aeabi_dadd+0x176>
   15e70:	4660      	mov	r0, ip
   15e72:	3820      	subs	r0, #32
   15e74:	1c1a      	adds	r2, r3, #0
   15e76:	40c2      	lsrs	r2, r0
   15e78:	4660      	mov	r0, ip
   15e7a:	4691      	mov	r9, r2
   15e7c:	2820      	cmp	r0, #32
   15e7e:	d100      	bne.n	15e82 <__aeabi_dadd+0x45e>
   15e80:	e0ac      	b.n	15fdc <__aeabi_dadd+0x5b8>
   15e82:	2240      	movs	r2, #64	; 0x40
   15e84:	1a12      	subs	r2, r2, r0
   15e86:	4093      	lsls	r3, r2
   15e88:	465a      	mov	r2, fp
   15e8a:	431a      	orrs	r2, r3
   15e8c:	1e53      	subs	r3, r2, #1
   15e8e:	419a      	sbcs	r2, r3
   15e90:	464b      	mov	r3, r9
   15e92:	431a      	orrs	r2, r3
   15e94:	2300      	movs	r3, #0
   15e96:	e6b6      	b.n	15c06 <__aeabi_dadd+0x1e2>
   15e98:	4d71      	ldr	r5, [pc, #452]	; (16060 <__aeabi_dadd+0x63c>)
   15e9a:	45aa      	cmp	sl, r5
   15e9c:	d000      	beq.n	15ea0 <__aeabi_dadd+0x47c>
   15e9e:	e76f      	b.n	15d80 <__aeabi_dadd+0x35c>
   15ea0:	1c19      	adds	r1, r3, #0
   15ea2:	465c      	mov	r4, fp
   15ea4:	4655      	mov	r5, sl
   15ea6:	4666      	mov	r6, ip
   15ea8:	e5e5      	b.n	15a76 <__aeabi_dadd+0x52>
   15eaa:	2d00      	cmp	r5, #0
   15eac:	d122      	bne.n	15ef4 <__aeabi_dadd+0x4d0>
   15eae:	1c0d      	adds	r5, r1, #0
   15eb0:	4325      	orrs	r5, r4
   15eb2:	d077      	beq.n	15fa4 <__aeabi_dadd+0x580>
   15eb4:	43d5      	mvns	r5, r2
   15eb6:	2d00      	cmp	r5, #0
   15eb8:	d171      	bne.n	15f9e <__aeabi_dadd+0x57a>
   15eba:	445c      	add	r4, fp
   15ebc:	455c      	cmp	r4, fp
   15ebe:	4192      	sbcs	r2, r2
   15ec0:	1859      	adds	r1, r3, r1
   15ec2:	4252      	negs	r2, r2
   15ec4:	1889      	adds	r1, r1, r2
   15ec6:	4655      	mov	r5, sl
   15ec8:	e6a4      	b.n	15c14 <__aeabi_dadd+0x1f0>
   15eca:	2800      	cmp	r0, #0
   15ecc:	d14d      	bne.n	15f6a <__aeabi_dadd+0x546>
   15ece:	4659      	mov	r1, fp
   15ed0:	4319      	orrs	r1, r3
   15ed2:	d100      	bne.n	15ed6 <__aeabi_dadd+0x4b2>
   15ed4:	e094      	b.n	16000 <__aeabi_dadd+0x5dc>
   15ed6:	1c19      	adds	r1, r3, #0
   15ed8:	465c      	mov	r4, fp
   15eda:	4666      	mov	r6, ip
   15edc:	4d60      	ldr	r5, [pc, #384]	; (16060 <__aeabi_dadd+0x63c>)
   15ede:	e5ca      	b.n	15a76 <__aeabi_dadd+0x52>
   15ee0:	430c      	orrs	r4, r1
   15ee2:	1e61      	subs	r1, r4, #1
   15ee4:	418c      	sbcs	r4, r1
   15ee6:	b2e4      	uxtb	r4, r4
   15ee8:	2100      	movs	r1, #0
   15eea:	e75b      	b.n	15da4 <__aeabi_dadd+0x380>
   15eec:	1c05      	adds	r5, r0, #0
   15eee:	2100      	movs	r1, #0
   15ef0:	2400      	movs	r4, #0
   15ef2:	e652      	b.n	15b9a <__aeabi_dadd+0x176>
   15ef4:	4d5a      	ldr	r5, [pc, #360]	; (16060 <__aeabi_dadd+0x63c>)
   15ef6:	45aa      	cmp	sl, r5
   15ef8:	d054      	beq.n	15fa4 <__aeabi_dadd+0x580>
   15efa:	4255      	negs	r5, r2
   15efc:	2280      	movs	r2, #128	; 0x80
   15efe:	0410      	lsls	r0, r2, #16
   15f00:	4301      	orrs	r1, r0
   15f02:	2d38      	cmp	r5, #56	; 0x38
   15f04:	dd00      	ble.n	15f08 <__aeabi_dadd+0x4e4>
   15f06:	e081      	b.n	1600c <__aeabi_dadd+0x5e8>
   15f08:	2d1f      	cmp	r5, #31
   15f0a:	dd00      	ble.n	15f0e <__aeabi_dadd+0x4ea>
   15f0c:	e092      	b.n	16034 <__aeabi_dadd+0x610>
   15f0e:	2220      	movs	r2, #32
   15f10:	1b50      	subs	r0, r2, r5
   15f12:	1c0a      	adds	r2, r1, #0
   15f14:	4684      	mov	ip, r0
   15f16:	4082      	lsls	r2, r0
   15f18:	1c20      	adds	r0, r4, #0
   15f1a:	40e8      	lsrs	r0, r5
   15f1c:	4302      	orrs	r2, r0
   15f1e:	4690      	mov	r8, r2
   15f20:	4662      	mov	r2, ip
   15f22:	4094      	lsls	r4, r2
   15f24:	1e60      	subs	r0, r4, #1
   15f26:	4184      	sbcs	r4, r0
   15f28:	4642      	mov	r2, r8
   15f2a:	4314      	orrs	r4, r2
   15f2c:	40e9      	lsrs	r1, r5
   15f2e:	445c      	add	r4, fp
   15f30:	455c      	cmp	r4, fp
   15f32:	4192      	sbcs	r2, r2
   15f34:	18cb      	adds	r3, r1, r3
   15f36:	4252      	negs	r2, r2
   15f38:	1899      	adds	r1, r3, r2
   15f3a:	4655      	mov	r5, sl
   15f3c:	e66a      	b.n	15c14 <__aeabi_dadd+0x1f0>
   15f3e:	4658      	mov	r0, fp
   15f40:	4318      	orrs	r0, r3
   15f42:	d100      	bne.n	15f46 <__aeabi_dadd+0x522>
   15f44:	e597      	b.n	15a76 <__aeabi_dadd+0x52>
   15f46:	4658      	mov	r0, fp
   15f48:	1a27      	subs	r7, r4, r0
   15f4a:	42bc      	cmp	r4, r7
   15f4c:	4192      	sbcs	r2, r2
   15f4e:	1ac8      	subs	r0, r1, r3
   15f50:	4252      	negs	r2, r2
   15f52:	1a80      	subs	r0, r0, r2
   15f54:	0202      	lsls	r2, r0, #8
   15f56:	d566      	bpl.n	16026 <__aeabi_dadd+0x602>
   15f58:	4658      	mov	r0, fp
   15f5a:	1b04      	subs	r4, r0, r4
   15f5c:	45a3      	cmp	fp, r4
   15f5e:	4192      	sbcs	r2, r2
   15f60:	1a59      	subs	r1, r3, r1
   15f62:	4252      	negs	r2, r2
   15f64:	1a89      	subs	r1, r1, r2
   15f66:	4666      	mov	r6, ip
   15f68:	e585      	b.n	15a76 <__aeabi_dadd+0x52>
   15f6a:	4658      	mov	r0, fp
   15f6c:	4318      	orrs	r0, r3
   15f6e:	d033      	beq.n	15fd8 <__aeabi_dadd+0x5b4>
   15f70:	0748      	lsls	r0, r1, #29
   15f72:	08e4      	lsrs	r4, r4, #3
   15f74:	4304      	orrs	r4, r0
   15f76:	2080      	movs	r0, #128	; 0x80
   15f78:	08c9      	lsrs	r1, r1, #3
   15f7a:	0300      	lsls	r0, r0, #12
   15f7c:	4201      	tst	r1, r0
   15f7e:	d008      	beq.n	15f92 <__aeabi_dadd+0x56e>
   15f80:	08dd      	lsrs	r5, r3, #3
   15f82:	4205      	tst	r5, r0
   15f84:	d105      	bne.n	15f92 <__aeabi_dadd+0x56e>
   15f86:	4659      	mov	r1, fp
   15f88:	08ca      	lsrs	r2, r1, #3
   15f8a:	075c      	lsls	r4, r3, #29
   15f8c:	4314      	orrs	r4, r2
   15f8e:	1c29      	adds	r1, r5, #0
   15f90:	4666      	mov	r6, ip
   15f92:	0f63      	lsrs	r3, r4, #29
   15f94:	00c9      	lsls	r1, r1, #3
   15f96:	4319      	orrs	r1, r3
   15f98:	00e4      	lsls	r4, r4, #3
   15f9a:	4d31      	ldr	r5, [pc, #196]	; (16060 <__aeabi_dadd+0x63c>)
   15f9c:	e56b      	b.n	15a76 <__aeabi_dadd+0x52>
   15f9e:	4a30      	ldr	r2, [pc, #192]	; (16060 <__aeabi_dadd+0x63c>)
   15fa0:	4592      	cmp	sl, r2
   15fa2:	d1ae      	bne.n	15f02 <__aeabi_dadd+0x4de>
   15fa4:	1c19      	adds	r1, r3, #0
   15fa6:	465c      	mov	r4, fp
   15fa8:	4655      	mov	r5, sl
   15faa:	e564      	b.n	15a76 <__aeabi_dadd+0x52>
   15fac:	2800      	cmp	r0, #0
   15fae:	d036      	beq.n	1601e <__aeabi_dadd+0x5fa>
   15fb0:	4658      	mov	r0, fp
   15fb2:	4318      	orrs	r0, r3
   15fb4:	d010      	beq.n	15fd8 <__aeabi_dadd+0x5b4>
   15fb6:	2580      	movs	r5, #128	; 0x80
   15fb8:	0748      	lsls	r0, r1, #29
   15fba:	08e4      	lsrs	r4, r4, #3
   15fbc:	08c9      	lsrs	r1, r1, #3
   15fbe:	032d      	lsls	r5, r5, #12
   15fc0:	4304      	orrs	r4, r0
   15fc2:	4229      	tst	r1, r5
   15fc4:	d0e5      	beq.n	15f92 <__aeabi_dadd+0x56e>
   15fc6:	08d8      	lsrs	r0, r3, #3
   15fc8:	4228      	tst	r0, r5
   15fca:	d1e2      	bne.n	15f92 <__aeabi_dadd+0x56e>
   15fcc:	465d      	mov	r5, fp
   15fce:	08ea      	lsrs	r2, r5, #3
   15fd0:	075c      	lsls	r4, r3, #29
   15fd2:	4314      	orrs	r4, r2
   15fd4:	1c01      	adds	r1, r0, #0
   15fd6:	e7dc      	b.n	15f92 <__aeabi_dadd+0x56e>
   15fd8:	4d21      	ldr	r5, [pc, #132]	; (16060 <__aeabi_dadd+0x63c>)
   15fda:	e54c      	b.n	15a76 <__aeabi_dadd+0x52>
   15fdc:	2300      	movs	r3, #0
   15fde:	e753      	b.n	15e88 <__aeabi_dadd+0x464>
   15fe0:	1c3d      	adds	r5, r7, #0
   15fe2:	3d20      	subs	r5, #32
   15fe4:	1c0a      	adds	r2, r1, #0
   15fe6:	40ea      	lsrs	r2, r5
   15fe8:	1c15      	adds	r5, r2, #0
   15fea:	2f20      	cmp	r7, #32
   15fec:	d034      	beq.n	16058 <__aeabi_dadd+0x634>
   15fee:	2640      	movs	r6, #64	; 0x40
   15ff0:	1bf7      	subs	r7, r6, r7
   15ff2:	40b9      	lsls	r1, r7
   15ff4:	430c      	orrs	r4, r1
   15ff6:	1e61      	subs	r1, r4, #1
   15ff8:	418c      	sbcs	r4, r1
   15ffa:	432c      	orrs	r4, r5
   15ffc:	2100      	movs	r1, #0
   15ffe:	e6d1      	b.n	15da4 <__aeabi_dadd+0x380>
   16000:	2180      	movs	r1, #128	; 0x80
   16002:	2700      	movs	r7, #0
   16004:	03c9      	lsls	r1, r1, #15
   16006:	4d16      	ldr	r5, [pc, #88]	; (16060 <__aeabi_dadd+0x63c>)
   16008:	2400      	movs	r4, #0
   1600a:	e5c6      	b.n	15b9a <__aeabi_dadd+0x176>
   1600c:	430c      	orrs	r4, r1
   1600e:	1e61      	subs	r1, r4, #1
   16010:	418c      	sbcs	r4, r1
   16012:	b2e4      	uxtb	r4, r4
   16014:	2100      	movs	r1, #0
   16016:	e78a      	b.n	15f2e <__aeabi_dadd+0x50a>
   16018:	1c19      	adds	r1, r3, #0
   1601a:	465c      	mov	r4, fp
   1601c:	e52b      	b.n	15a76 <__aeabi_dadd+0x52>
   1601e:	1c19      	adds	r1, r3, #0
   16020:	465c      	mov	r4, fp
   16022:	4d0f      	ldr	r5, [pc, #60]	; (16060 <__aeabi_dadd+0x63c>)
   16024:	e527      	b.n	15a76 <__aeabi_dadd+0x52>
   16026:	1c03      	adds	r3, r0, #0
   16028:	433b      	orrs	r3, r7
   1602a:	d100      	bne.n	1602e <__aeabi_dadd+0x60a>
   1602c:	e71c      	b.n	15e68 <__aeabi_dadd+0x444>
   1602e:	1c01      	adds	r1, r0, #0
   16030:	1c3c      	adds	r4, r7, #0
   16032:	e520      	b.n	15a76 <__aeabi_dadd+0x52>
   16034:	2020      	movs	r0, #32
   16036:	4240      	negs	r0, r0
   16038:	1940      	adds	r0, r0, r5
   1603a:	1c0a      	adds	r2, r1, #0
   1603c:	40c2      	lsrs	r2, r0
   1603e:	4690      	mov	r8, r2
   16040:	2d20      	cmp	r5, #32
   16042:	d00b      	beq.n	1605c <__aeabi_dadd+0x638>
   16044:	2040      	movs	r0, #64	; 0x40
   16046:	1b45      	subs	r5, r0, r5
   16048:	40a9      	lsls	r1, r5
   1604a:	430c      	orrs	r4, r1
   1604c:	1e61      	subs	r1, r4, #1
   1604e:	418c      	sbcs	r4, r1
   16050:	4645      	mov	r5, r8
   16052:	432c      	orrs	r4, r5
   16054:	2100      	movs	r1, #0
   16056:	e76a      	b.n	15f2e <__aeabi_dadd+0x50a>
   16058:	2100      	movs	r1, #0
   1605a:	e7cb      	b.n	15ff4 <__aeabi_dadd+0x5d0>
   1605c:	2100      	movs	r1, #0
   1605e:	e7f4      	b.n	1604a <__aeabi_dadd+0x626>
   16060:	000007ff 	.word	0x000007ff
   16064:	ff7fffff 	.word	0xff7fffff

00016068 <__aeabi_ddiv>:
   16068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1606a:	4656      	mov	r6, sl
   1606c:	4644      	mov	r4, r8
   1606e:	465f      	mov	r7, fp
   16070:	464d      	mov	r5, r9
   16072:	b4f0      	push	{r4, r5, r6, r7}
   16074:	1c1f      	adds	r7, r3, #0
   16076:	030b      	lsls	r3, r1, #12
   16078:	0b1b      	lsrs	r3, r3, #12
   1607a:	4698      	mov	r8, r3
   1607c:	004b      	lsls	r3, r1, #1
   1607e:	b087      	sub	sp, #28
   16080:	1c04      	adds	r4, r0, #0
   16082:	4681      	mov	r9, r0
   16084:	0d5b      	lsrs	r3, r3, #21
   16086:	0fc8      	lsrs	r0, r1, #31
   16088:	1c16      	adds	r6, r2, #0
   1608a:	469a      	mov	sl, r3
   1608c:	9000      	str	r0, [sp, #0]
   1608e:	2b00      	cmp	r3, #0
   16090:	d051      	beq.n	16136 <__aeabi_ddiv+0xce>
   16092:	4b6a      	ldr	r3, [pc, #424]	; (1623c <__aeabi_ddiv+0x1d4>)
   16094:	459a      	cmp	sl, r3
   16096:	d031      	beq.n	160fc <__aeabi_ddiv+0x94>
   16098:	2280      	movs	r2, #128	; 0x80
   1609a:	4641      	mov	r1, r8
   1609c:	0352      	lsls	r2, r2, #13
   1609e:	430a      	orrs	r2, r1
   160a0:	0f63      	lsrs	r3, r4, #29
   160a2:	00d2      	lsls	r2, r2, #3
   160a4:	431a      	orrs	r2, r3
   160a6:	4b66      	ldr	r3, [pc, #408]	; (16240 <__aeabi_ddiv+0x1d8>)
   160a8:	4690      	mov	r8, r2
   160aa:	2500      	movs	r5, #0
   160ac:	00e2      	lsls	r2, r4, #3
   160ae:	4691      	mov	r9, r2
   160b0:	449a      	add	sl, r3
   160b2:	2400      	movs	r4, #0
   160b4:	9502      	str	r5, [sp, #8]
   160b6:	033b      	lsls	r3, r7, #12
   160b8:	0b1b      	lsrs	r3, r3, #12
   160ba:	469b      	mov	fp, r3
   160bc:	0ffd      	lsrs	r5, r7, #31
   160be:	007b      	lsls	r3, r7, #1
   160c0:	1c31      	adds	r1, r6, #0
   160c2:	0d5b      	lsrs	r3, r3, #21
   160c4:	9501      	str	r5, [sp, #4]
   160c6:	d060      	beq.n	1618a <__aeabi_ddiv+0x122>
   160c8:	4a5c      	ldr	r2, [pc, #368]	; (1623c <__aeabi_ddiv+0x1d4>)
   160ca:	4293      	cmp	r3, r2
   160cc:	d054      	beq.n	16178 <__aeabi_ddiv+0x110>
   160ce:	2180      	movs	r1, #128	; 0x80
   160d0:	4658      	mov	r0, fp
   160d2:	0349      	lsls	r1, r1, #13
   160d4:	4301      	orrs	r1, r0
   160d6:	0f72      	lsrs	r2, r6, #29
   160d8:	00c9      	lsls	r1, r1, #3
   160da:	4311      	orrs	r1, r2
   160dc:	4a58      	ldr	r2, [pc, #352]	; (16240 <__aeabi_ddiv+0x1d8>)
   160de:	468b      	mov	fp, r1
   160e0:	189b      	adds	r3, r3, r2
   160e2:	00f1      	lsls	r1, r6, #3
   160e4:	2000      	movs	r0, #0
   160e6:	9a00      	ldr	r2, [sp, #0]
   160e8:	4304      	orrs	r4, r0
   160ea:	406a      	eors	r2, r5
   160ec:	9203      	str	r2, [sp, #12]
   160ee:	2c0f      	cmp	r4, #15
   160f0:	d900      	bls.n	160f4 <__aeabi_ddiv+0x8c>
   160f2:	e0ad      	b.n	16250 <__aeabi_ddiv+0x1e8>
   160f4:	4e53      	ldr	r6, [pc, #332]	; (16244 <__aeabi_ddiv+0x1dc>)
   160f6:	00a4      	lsls	r4, r4, #2
   160f8:	5934      	ldr	r4, [r6, r4]
   160fa:	46a7      	mov	pc, r4
   160fc:	4640      	mov	r0, r8
   160fe:	4304      	orrs	r4, r0
   16100:	d16e      	bne.n	161e0 <__aeabi_ddiv+0x178>
   16102:	2100      	movs	r1, #0
   16104:	2502      	movs	r5, #2
   16106:	2408      	movs	r4, #8
   16108:	4688      	mov	r8, r1
   1610a:	4689      	mov	r9, r1
   1610c:	9502      	str	r5, [sp, #8]
   1610e:	e7d2      	b.n	160b6 <__aeabi_ddiv+0x4e>
   16110:	9c00      	ldr	r4, [sp, #0]
   16112:	9802      	ldr	r0, [sp, #8]
   16114:	46c3      	mov	fp, r8
   16116:	4649      	mov	r1, r9
   16118:	9401      	str	r4, [sp, #4]
   1611a:	2802      	cmp	r0, #2
   1611c:	d064      	beq.n	161e8 <__aeabi_ddiv+0x180>
   1611e:	2803      	cmp	r0, #3
   16120:	d100      	bne.n	16124 <__aeabi_ddiv+0xbc>
   16122:	e2ab      	b.n	1667c <__aeabi_ddiv+0x614>
   16124:	2801      	cmp	r0, #1
   16126:	d000      	beq.n	1612a <__aeabi_ddiv+0xc2>
   16128:	e238      	b.n	1659c <__aeabi_ddiv+0x534>
   1612a:	9a01      	ldr	r2, [sp, #4]
   1612c:	2400      	movs	r4, #0
   1612e:	4002      	ands	r2, r0
   16130:	2500      	movs	r5, #0
   16132:	46a1      	mov	r9, r4
   16134:	e060      	b.n	161f8 <__aeabi_ddiv+0x190>
   16136:	4643      	mov	r3, r8
   16138:	4323      	orrs	r3, r4
   1613a:	d04a      	beq.n	161d2 <__aeabi_ddiv+0x16a>
   1613c:	4640      	mov	r0, r8
   1613e:	2800      	cmp	r0, #0
   16140:	d100      	bne.n	16144 <__aeabi_ddiv+0xdc>
   16142:	e1c0      	b.n	164c6 <__aeabi_ddiv+0x45e>
   16144:	f001 fa64 	bl	17610 <__clzsi2>
   16148:	1e03      	subs	r3, r0, #0
   1614a:	2b27      	cmp	r3, #39	; 0x27
   1614c:	dd00      	ble.n	16150 <__aeabi_ddiv+0xe8>
   1614e:	e1b3      	b.n	164b8 <__aeabi_ddiv+0x450>
   16150:	2128      	movs	r1, #40	; 0x28
   16152:	1a0d      	subs	r5, r1, r0
   16154:	1c21      	adds	r1, r4, #0
   16156:	3b08      	subs	r3, #8
   16158:	4642      	mov	r2, r8
   1615a:	40e9      	lsrs	r1, r5
   1615c:	409a      	lsls	r2, r3
   1615e:	1c0d      	adds	r5, r1, #0
   16160:	4315      	orrs	r5, r2
   16162:	1c22      	adds	r2, r4, #0
   16164:	409a      	lsls	r2, r3
   16166:	46a8      	mov	r8, r5
   16168:	4691      	mov	r9, r2
   1616a:	4b37      	ldr	r3, [pc, #220]	; (16248 <__aeabi_ddiv+0x1e0>)
   1616c:	2500      	movs	r5, #0
   1616e:	1a1b      	subs	r3, r3, r0
   16170:	469a      	mov	sl, r3
   16172:	2400      	movs	r4, #0
   16174:	9502      	str	r5, [sp, #8]
   16176:	e79e      	b.n	160b6 <__aeabi_ddiv+0x4e>
   16178:	465a      	mov	r2, fp
   1617a:	4316      	orrs	r6, r2
   1617c:	2003      	movs	r0, #3
   1617e:	2e00      	cmp	r6, #0
   16180:	d1b1      	bne.n	160e6 <__aeabi_ddiv+0x7e>
   16182:	46b3      	mov	fp, r6
   16184:	2100      	movs	r1, #0
   16186:	2002      	movs	r0, #2
   16188:	e7ad      	b.n	160e6 <__aeabi_ddiv+0x7e>
   1618a:	465a      	mov	r2, fp
   1618c:	4332      	orrs	r2, r6
   1618e:	d01b      	beq.n	161c8 <__aeabi_ddiv+0x160>
   16190:	465b      	mov	r3, fp
   16192:	2b00      	cmp	r3, #0
   16194:	d100      	bne.n	16198 <__aeabi_ddiv+0x130>
   16196:	e18a      	b.n	164ae <__aeabi_ddiv+0x446>
   16198:	4658      	mov	r0, fp
   1619a:	f001 fa39 	bl	17610 <__clzsi2>
   1619e:	2827      	cmp	r0, #39	; 0x27
   161a0:	dd00      	ble.n	161a4 <__aeabi_ddiv+0x13c>
   161a2:	e17d      	b.n	164a0 <__aeabi_ddiv+0x438>
   161a4:	2228      	movs	r2, #40	; 0x28
   161a6:	1a17      	subs	r7, r2, r0
   161a8:	1c01      	adds	r1, r0, #0
   161aa:	1c32      	adds	r2, r6, #0
   161ac:	3908      	subs	r1, #8
   161ae:	465b      	mov	r3, fp
   161b0:	40fa      	lsrs	r2, r7
   161b2:	408b      	lsls	r3, r1
   161b4:	1c17      	adds	r7, r2, #0
   161b6:	431f      	orrs	r7, r3
   161b8:	1c33      	adds	r3, r6, #0
   161ba:	408b      	lsls	r3, r1
   161bc:	46bb      	mov	fp, r7
   161be:	1c19      	adds	r1, r3, #0
   161c0:	4b21      	ldr	r3, [pc, #132]	; (16248 <__aeabi_ddiv+0x1e0>)
   161c2:	1a1b      	subs	r3, r3, r0
   161c4:	2000      	movs	r0, #0
   161c6:	e78e      	b.n	160e6 <__aeabi_ddiv+0x7e>
   161c8:	2700      	movs	r7, #0
   161ca:	46bb      	mov	fp, r7
   161cc:	2100      	movs	r1, #0
   161ce:	2001      	movs	r0, #1
   161d0:	e789      	b.n	160e6 <__aeabi_ddiv+0x7e>
   161d2:	2000      	movs	r0, #0
   161d4:	2501      	movs	r5, #1
   161d6:	2404      	movs	r4, #4
   161d8:	4680      	mov	r8, r0
   161da:	4681      	mov	r9, r0
   161dc:	9502      	str	r5, [sp, #8]
   161de:	e76a      	b.n	160b6 <__aeabi_ddiv+0x4e>
   161e0:	2503      	movs	r5, #3
   161e2:	240c      	movs	r4, #12
   161e4:	9502      	str	r5, [sp, #8]
   161e6:	e766      	b.n	160b6 <__aeabi_ddiv+0x4e>
   161e8:	9c01      	ldr	r4, [sp, #4]
   161ea:	9403      	str	r4, [sp, #12]
   161ec:	9d03      	ldr	r5, [sp, #12]
   161ee:	2201      	movs	r2, #1
   161f0:	402a      	ands	r2, r5
   161f2:	2400      	movs	r4, #0
   161f4:	4d11      	ldr	r5, [pc, #68]	; (1623c <__aeabi_ddiv+0x1d4>)
   161f6:	46a1      	mov	r9, r4
   161f8:	2000      	movs	r0, #0
   161fa:	2100      	movs	r1, #0
   161fc:	0324      	lsls	r4, r4, #12
   161fe:	0b26      	lsrs	r6, r4, #12
   16200:	0d0c      	lsrs	r4, r1, #20
   16202:	0524      	lsls	r4, r4, #20
   16204:	4b11      	ldr	r3, [pc, #68]	; (1624c <__aeabi_ddiv+0x1e4>)
   16206:	4334      	orrs	r4, r6
   16208:	052d      	lsls	r5, r5, #20
   1620a:	4023      	ands	r3, r4
   1620c:	432b      	orrs	r3, r5
   1620e:	005b      	lsls	r3, r3, #1
   16210:	085b      	lsrs	r3, r3, #1
   16212:	07d2      	lsls	r2, r2, #31
   16214:	1c19      	adds	r1, r3, #0
   16216:	4648      	mov	r0, r9
   16218:	4311      	orrs	r1, r2
   1621a:	b007      	add	sp, #28
   1621c:	bc3c      	pop	{r2, r3, r4, r5}
   1621e:	4690      	mov	r8, r2
   16220:	4699      	mov	r9, r3
   16222:	46a2      	mov	sl, r4
   16224:	46ab      	mov	fp, r5
   16226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16228:	2200      	movs	r2, #0
   1622a:	2480      	movs	r4, #128	; 0x80
   1622c:	0324      	lsls	r4, r4, #12
   1622e:	4691      	mov	r9, r2
   16230:	4d02      	ldr	r5, [pc, #8]	; (1623c <__aeabi_ddiv+0x1d4>)
   16232:	e7e1      	b.n	161f8 <__aeabi_ddiv+0x190>
   16234:	2400      	movs	r4, #0
   16236:	2500      	movs	r5, #0
   16238:	46a1      	mov	r9, r4
   1623a:	e7dd      	b.n	161f8 <__aeabi_ddiv+0x190>
   1623c:	000007ff 	.word	0x000007ff
   16240:	fffffc01 	.word	0xfffffc01
   16244:	00018600 	.word	0x00018600
   16248:	fffffc0d 	.word	0xfffffc0d
   1624c:	800fffff 	.word	0x800fffff
   16250:	4655      	mov	r5, sl
   16252:	1aed      	subs	r5, r5, r3
   16254:	9504      	str	r5, [sp, #16]
   16256:	45d8      	cmp	r8, fp
   16258:	d900      	bls.n	1625c <__aeabi_ddiv+0x1f4>
   1625a:	e153      	b.n	16504 <__aeabi_ddiv+0x49c>
   1625c:	d100      	bne.n	16260 <__aeabi_ddiv+0x1f8>
   1625e:	e14e      	b.n	164fe <__aeabi_ddiv+0x496>
   16260:	9c04      	ldr	r4, [sp, #16]
   16262:	2500      	movs	r5, #0
   16264:	3c01      	subs	r4, #1
   16266:	464e      	mov	r6, r9
   16268:	9404      	str	r4, [sp, #16]
   1626a:	4647      	mov	r7, r8
   1626c:	46a9      	mov	r9, r5
   1626e:	4658      	mov	r0, fp
   16270:	0203      	lsls	r3, r0, #8
   16272:	0e0c      	lsrs	r4, r1, #24
   16274:	431c      	orrs	r4, r3
   16276:	0209      	lsls	r1, r1, #8
   16278:	0c25      	lsrs	r5, r4, #16
   1627a:	0423      	lsls	r3, r4, #16
   1627c:	0c1b      	lsrs	r3, r3, #16
   1627e:	9100      	str	r1, [sp, #0]
   16280:	1c38      	adds	r0, r7, #0
   16282:	1c29      	adds	r1, r5, #0
   16284:	9301      	str	r3, [sp, #4]
   16286:	f7ff fa47 	bl	15718 <__aeabi_uidiv>
   1628a:	9901      	ldr	r1, [sp, #4]
   1628c:	4683      	mov	fp, r0
   1628e:	4341      	muls	r1, r0
   16290:	1c38      	adds	r0, r7, #0
   16292:	468a      	mov	sl, r1
   16294:	1c29      	adds	r1, r5, #0
   16296:	f7ff fa83 	bl	157a0 <__aeabi_uidivmod>
   1629a:	0c33      	lsrs	r3, r6, #16
   1629c:	0409      	lsls	r1, r1, #16
   1629e:	4319      	orrs	r1, r3
   162a0:	458a      	cmp	sl, r1
   162a2:	d90c      	bls.n	162be <__aeabi_ddiv+0x256>
   162a4:	465b      	mov	r3, fp
   162a6:	1909      	adds	r1, r1, r4
   162a8:	3b01      	subs	r3, #1
   162aa:	428c      	cmp	r4, r1
   162ac:	d900      	bls.n	162b0 <__aeabi_ddiv+0x248>
   162ae:	e147      	b.n	16540 <__aeabi_ddiv+0x4d8>
   162b0:	458a      	cmp	sl, r1
   162b2:	d800      	bhi.n	162b6 <__aeabi_ddiv+0x24e>
   162b4:	e144      	b.n	16540 <__aeabi_ddiv+0x4d8>
   162b6:	2202      	movs	r2, #2
   162b8:	4252      	negs	r2, r2
   162ba:	4493      	add	fp, r2
   162bc:	1909      	adds	r1, r1, r4
   162be:	4653      	mov	r3, sl
   162c0:	1acb      	subs	r3, r1, r3
   162c2:	1c18      	adds	r0, r3, #0
   162c4:	1c29      	adds	r1, r5, #0
   162c6:	4698      	mov	r8, r3
   162c8:	f7ff fa26 	bl	15718 <__aeabi_uidiv>
   162cc:	1c07      	adds	r7, r0, #0
   162ce:	9801      	ldr	r0, [sp, #4]
   162d0:	1c29      	adds	r1, r5, #0
   162d2:	4378      	muls	r0, r7
   162d4:	4682      	mov	sl, r0
   162d6:	4640      	mov	r0, r8
   162d8:	f7ff fa62 	bl	157a0 <__aeabi_uidivmod>
   162dc:	0436      	lsls	r6, r6, #16
   162de:	040b      	lsls	r3, r1, #16
   162e0:	0c36      	lsrs	r6, r6, #16
   162e2:	4333      	orrs	r3, r6
   162e4:	459a      	cmp	sl, r3
   162e6:	d909      	bls.n	162fc <__aeabi_ddiv+0x294>
   162e8:	191b      	adds	r3, r3, r4
   162ea:	1e7a      	subs	r2, r7, #1
   162ec:	429c      	cmp	r4, r3
   162ee:	d900      	bls.n	162f2 <__aeabi_ddiv+0x28a>
   162f0:	e124      	b.n	1653c <__aeabi_ddiv+0x4d4>
   162f2:	459a      	cmp	sl, r3
   162f4:	d800      	bhi.n	162f8 <__aeabi_ddiv+0x290>
   162f6:	e121      	b.n	1653c <__aeabi_ddiv+0x4d4>
   162f8:	3f02      	subs	r7, #2
   162fa:	191b      	adds	r3, r3, r4
   162fc:	465e      	mov	r6, fp
   162fe:	0432      	lsls	r2, r6, #16
   16300:	4317      	orrs	r7, r2
   16302:	0c38      	lsrs	r0, r7, #16
   16304:	46bb      	mov	fp, r7
   16306:	9e00      	ldr	r6, [sp, #0]
   16308:	9f00      	ldr	r7, [sp, #0]
   1630a:	4651      	mov	r1, sl
   1630c:	0c3f      	lsrs	r7, r7, #16
   1630e:	0432      	lsls	r2, r6, #16
   16310:	1a5b      	subs	r3, r3, r1
   16312:	4659      	mov	r1, fp
   16314:	46ba      	mov	sl, r7
   16316:	0c12      	lsrs	r2, r2, #16
   16318:	040f      	lsls	r7, r1, #16
   1631a:	0c3f      	lsrs	r7, r7, #16
   1631c:	4690      	mov	r8, r2
   1631e:	4651      	mov	r1, sl
   16320:	437a      	muls	r2, r7
   16322:	434f      	muls	r7, r1
   16324:	4641      	mov	r1, r8
   16326:	4341      	muls	r1, r0
   16328:	4656      	mov	r6, sl
   1632a:	4370      	muls	r0, r6
   1632c:	19cf      	adds	r7, r1, r7
   1632e:	0c16      	lsrs	r6, r2, #16
   16330:	19be      	adds	r6, r7, r6
   16332:	42b1      	cmp	r1, r6
   16334:	d902      	bls.n	1633c <__aeabi_ddiv+0x2d4>
   16336:	2780      	movs	r7, #128	; 0x80
   16338:	027f      	lsls	r7, r7, #9
   1633a:	19c0      	adds	r0, r0, r7
   1633c:	0c31      	lsrs	r1, r6, #16
   1633e:	0412      	lsls	r2, r2, #16
   16340:	0436      	lsls	r6, r6, #16
   16342:	0c12      	lsrs	r2, r2, #16
   16344:	1840      	adds	r0, r0, r1
   16346:	18b6      	adds	r6, r6, r2
   16348:	4283      	cmp	r3, r0
   1634a:	d200      	bcs.n	1634e <__aeabi_ddiv+0x2e6>
   1634c:	e0c4      	b.n	164d8 <__aeabi_ddiv+0x470>
   1634e:	d100      	bne.n	16352 <__aeabi_ddiv+0x2ea>
   16350:	e0be      	b.n	164d0 <__aeabi_ddiv+0x468>
   16352:	1a19      	subs	r1, r3, r0
   16354:	4648      	mov	r0, r9
   16356:	1b86      	subs	r6, r0, r6
   16358:	45b1      	cmp	r9, r6
   1635a:	41bf      	sbcs	r7, r7
   1635c:	427f      	negs	r7, r7
   1635e:	1bcf      	subs	r7, r1, r7
   16360:	42a7      	cmp	r7, r4
   16362:	d100      	bne.n	16366 <__aeabi_ddiv+0x2fe>
   16364:	e113      	b.n	1658e <__aeabi_ddiv+0x526>
   16366:	1c29      	adds	r1, r5, #0
   16368:	1c38      	adds	r0, r7, #0
   1636a:	f7ff f9d5 	bl	15718 <__aeabi_uidiv>
   1636e:	9901      	ldr	r1, [sp, #4]
   16370:	9002      	str	r0, [sp, #8]
   16372:	4341      	muls	r1, r0
   16374:	1c38      	adds	r0, r7, #0
   16376:	4689      	mov	r9, r1
   16378:	1c29      	adds	r1, r5, #0
   1637a:	f7ff fa11 	bl	157a0 <__aeabi_uidivmod>
   1637e:	0c33      	lsrs	r3, r6, #16
   16380:	0409      	lsls	r1, r1, #16
   16382:	4319      	orrs	r1, r3
   16384:	4589      	cmp	r9, r1
   16386:	d90c      	bls.n	163a2 <__aeabi_ddiv+0x33a>
   16388:	9b02      	ldr	r3, [sp, #8]
   1638a:	1909      	adds	r1, r1, r4
   1638c:	3b01      	subs	r3, #1
   1638e:	428c      	cmp	r4, r1
   16390:	d900      	bls.n	16394 <__aeabi_ddiv+0x32c>
   16392:	e0ff      	b.n	16594 <__aeabi_ddiv+0x52c>
   16394:	4589      	cmp	r9, r1
   16396:	d800      	bhi.n	1639a <__aeabi_ddiv+0x332>
   16398:	e0fc      	b.n	16594 <__aeabi_ddiv+0x52c>
   1639a:	9f02      	ldr	r7, [sp, #8]
   1639c:	1909      	adds	r1, r1, r4
   1639e:	3f02      	subs	r7, #2
   163a0:	9702      	str	r7, [sp, #8]
   163a2:	464f      	mov	r7, r9
   163a4:	1bcf      	subs	r7, r1, r7
   163a6:	1c38      	adds	r0, r7, #0
   163a8:	1c29      	adds	r1, r5, #0
   163aa:	9705      	str	r7, [sp, #20]
   163ac:	f7ff f9b4 	bl	15718 <__aeabi_uidiv>
   163b0:	1c07      	adds	r7, r0, #0
   163b2:	9801      	ldr	r0, [sp, #4]
   163b4:	1c29      	adds	r1, r5, #0
   163b6:	4378      	muls	r0, r7
   163b8:	4681      	mov	r9, r0
   163ba:	9805      	ldr	r0, [sp, #20]
   163bc:	f7ff f9f0 	bl	157a0 <__aeabi_uidivmod>
   163c0:	0436      	lsls	r6, r6, #16
   163c2:	0409      	lsls	r1, r1, #16
   163c4:	0c36      	lsrs	r6, r6, #16
   163c6:	430e      	orrs	r6, r1
   163c8:	45b1      	cmp	r9, r6
   163ca:	d909      	bls.n	163e0 <__aeabi_ddiv+0x378>
   163cc:	1936      	adds	r6, r6, r4
   163ce:	1e7b      	subs	r3, r7, #1
   163d0:	42b4      	cmp	r4, r6
   163d2:	d900      	bls.n	163d6 <__aeabi_ddiv+0x36e>
   163d4:	e0e0      	b.n	16598 <__aeabi_ddiv+0x530>
   163d6:	45b1      	cmp	r9, r6
   163d8:	d800      	bhi.n	163dc <__aeabi_ddiv+0x374>
   163da:	e0dd      	b.n	16598 <__aeabi_ddiv+0x530>
   163dc:	3f02      	subs	r7, #2
   163de:	1936      	adds	r6, r6, r4
   163e0:	9d02      	ldr	r5, [sp, #8]
   163e2:	4649      	mov	r1, r9
   163e4:	1a76      	subs	r6, r6, r1
   163e6:	0429      	lsls	r1, r5, #16
   163e8:	4339      	orrs	r1, r7
   163ea:	040b      	lsls	r3, r1, #16
   163ec:	4657      	mov	r7, sl
   163ee:	0c0a      	lsrs	r2, r1, #16
   163f0:	0c1b      	lsrs	r3, r3, #16
   163f2:	4640      	mov	r0, r8
   163f4:	4645      	mov	r5, r8
   163f6:	4358      	muls	r0, r3
   163f8:	4355      	muls	r5, r2
   163fa:	437b      	muls	r3, r7
   163fc:	437a      	muls	r2, r7
   163fe:	18eb      	adds	r3, r5, r3
   16400:	0c07      	lsrs	r7, r0, #16
   16402:	19db      	adds	r3, r3, r7
   16404:	429d      	cmp	r5, r3
   16406:	d902      	bls.n	1640e <__aeabi_ddiv+0x3a6>
   16408:	2580      	movs	r5, #128	; 0x80
   1640a:	026d      	lsls	r5, r5, #9
   1640c:	1952      	adds	r2, r2, r5
   1640e:	0c1d      	lsrs	r5, r3, #16
   16410:	0400      	lsls	r0, r0, #16
   16412:	041b      	lsls	r3, r3, #16
   16414:	0c00      	lsrs	r0, r0, #16
   16416:	1952      	adds	r2, r2, r5
   16418:	181b      	adds	r3, r3, r0
   1641a:	4296      	cmp	r6, r2
   1641c:	d335      	bcc.n	1648a <__aeabi_ddiv+0x422>
   1641e:	d100      	bne.n	16422 <__aeabi_ddiv+0x3ba>
   16420:	e0fc      	b.n	1661c <__aeabi_ddiv+0x5b4>
   16422:	2301      	movs	r3, #1
   16424:	4319      	orrs	r1, r3
   16426:	9e04      	ldr	r6, [sp, #16]
   16428:	4f99      	ldr	r7, [pc, #612]	; (16690 <__aeabi_ddiv+0x628>)
   1642a:	19f5      	adds	r5, r6, r7
   1642c:	2d00      	cmp	r5, #0
   1642e:	dc00      	bgt.n	16432 <__aeabi_ddiv+0x3ca>
   16430:	e0a1      	b.n	16576 <__aeabi_ddiv+0x50e>
   16432:	0748      	lsls	r0, r1, #29
   16434:	d009      	beq.n	1644a <__aeabi_ddiv+0x3e2>
   16436:	230f      	movs	r3, #15
   16438:	400b      	ands	r3, r1
   1643a:	2b04      	cmp	r3, #4
   1643c:	d005      	beq.n	1644a <__aeabi_ddiv+0x3e2>
   1643e:	1d0b      	adds	r3, r1, #4
   16440:	428b      	cmp	r3, r1
   16442:	4189      	sbcs	r1, r1
   16444:	4249      	negs	r1, r1
   16446:	448b      	add	fp, r1
   16448:	1c19      	adds	r1, r3, #0
   1644a:	465a      	mov	r2, fp
   1644c:	01d2      	lsls	r2, r2, #7
   1644e:	d507      	bpl.n	16460 <__aeabi_ddiv+0x3f8>
   16450:	4b90      	ldr	r3, [pc, #576]	; (16694 <__aeabi_ddiv+0x62c>)
   16452:	465c      	mov	r4, fp
   16454:	9e04      	ldr	r6, [sp, #16]
   16456:	2780      	movs	r7, #128	; 0x80
   16458:	401c      	ands	r4, r3
   1645a:	00ff      	lsls	r7, r7, #3
   1645c:	46a3      	mov	fp, r4
   1645e:	19f5      	adds	r5, r6, r7
   16460:	4b8d      	ldr	r3, [pc, #564]	; (16698 <__aeabi_ddiv+0x630>)
   16462:	429d      	cmp	r5, r3
   16464:	dd7a      	ble.n	1655c <__aeabi_ddiv+0x4f4>
   16466:	9c03      	ldr	r4, [sp, #12]
   16468:	2201      	movs	r2, #1
   1646a:	4022      	ands	r2, r4
   1646c:	2400      	movs	r4, #0
   1646e:	4d8b      	ldr	r5, [pc, #556]	; (1669c <__aeabi_ddiv+0x634>)
   16470:	46a1      	mov	r9, r4
   16472:	e6c1      	b.n	161f8 <__aeabi_ddiv+0x190>
   16474:	2480      	movs	r4, #128	; 0x80
   16476:	0324      	lsls	r4, r4, #12
   16478:	4647      	mov	r7, r8
   1647a:	4227      	tst	r7, r4
   1647c:	d14c      	bne.n	16518 <__aeabi_ddiv+0x4b0>
   1647e:	433c      	orrs	r4, r7
   16480:	0324      	lsls	r4, r4, #12
   16482:	0b24      	lsrs	r4, r4, #12
   16484:	9a00      	ldr	r2, [sp, #0]
   16486:	4d85      	ldr	r5, [pc, #532]	; (1669c <__aeabi_ddiv+0x634>)
   16488:	e6b6      	b.n	161f8 <__aeabi_ddiv+0x190>
   1648a:	1936      	adds	r6, r6, r4
   1648c:	1e48      	subs	r0, r1, #1
   1648e:	42b4      	cmp	r4, r6
   16490:	d95e      	bls.n	16550 <__aeabi_ddiv+0x4e8>
   16492:	1c01      	adds	r1, r0, #0
   16494:	4296      	cmp	r6, r2
   16496:	d1c4      	bne.n	16422 <__aeabi_ddiv+0x3ba>
   16498:	9e00      	ldr	r6, [sp, #0]
   1649a:	429e      	cmp	r6, r3
   1649c:	d1c1      	bne.n	16422 <__aeabi_ddiv+0x3ba>
   1649e:	e7c2      	b.n	16426 <__aeabi_ddiv+0x3be>
   164a0:	1c03      	adds	r3, r0, #0
   164a2:	3b28      	subs	r3, #40	; 0x28
   164a4:	1c31      	adds	r1, r6, #0
   164a6:	4099      	lsls	r1, r3
   164a8:	468b      	mov	fp, r1
   164aa:	2100      	movs	r1, #0
   164ac:	e688      	b.n	161c0 <__aeabi_ddiv+0x158>
   164ae:	1c30      	adds	r0, r6, #0
   164b0:	f001 f8ae 	bl	17610 <__clzsi2>
   164b4:	3020      	adds	r0, #32
   164b6:	e672      	b.n	1619e <__aeabi_ddiv+0x136>
   164b8:	3b28      	subs	r3, #40	; 0x28
   164ba:	1c21      	adds	r1, r4, #0
   164bc:	4099      	lsls	r1, r3
   164be:	2200      	movs	r2, #0
   164c0:	4688      	mov	r8, r1
   164c2:	4691      	mov	r9, r2
   164c4:	e651      	b.n	1616a <__aeabi_ddiv+0x102>
   164c6:	1c20      	adds	r0, r4, #0
   164c8:	f001 f8a2 	bl	17610 <__clzsi2>
   164cc:	3020      	adds	r0, #32
   164ce:	e63b      	b.n	16148 <__aeabi_ddiv+0xe0>
   164d0:	2100      	movs	r1, #0
   164d2:	45b1      	cmp	r9, r6
   164d4:	d300      	bcc.n	164d8 <__aeabi_ddiv+0x470>
   164d6:	e73d      	b.n	16354 <__aeabi_ddiv+0x2ec>
   164d8:	9f00      	ldr	r7, [sp, #0]
   164da:	465a      	mov	r2, fp
   164dc:	44b9      	add	r9, r7
   164de:	45b9      	cmp	r9, r7
   164e0:	41bf      	sbcs	r7, r7
   164e2:	427f      	negs	r7, r7
   164e4:	193f      	adds	r7, r7, r4
   164e6:	18fb      	adds	r3, r7, r3
   164e8:	3a01      	subs	r2, #1
   164ea:	429c      	cmp	r4, r3
   164ec:	d21e      	bcs.n	1652c <__aeabi_ddiv+0x4c4>
   164ee:	4298      	cmp	r0, r3
   164f0:	d900      	bls.n	164f4 <__aeabi_ddiv+0x48c>
   164f2:	e07e      	b.n	165f2 <__aeabi_ddiv+0x58a>
   164f4:	d100      	bne.n	164f8 <__aeabi_ddiv+0x490>
   164f6:	e0b5      	b.n	16664 <__aeabi_ddiv+0x5fc>
   164f8:	1a19      	subs	r1, r3, r0
   164fa:	4693      	mov	fp, r2
   164fc:	e72a      	b.n	16354 <__aeabi_ddiv+0x2ec>
   164fe:	4589      	cmp	r9, r1
   16500:	d800      	bhi.n	16504 <__aeabi_ddiv+0x49c>
   16502:	e6ad      	b.n	16260 <__aeabi_ddiv+0x1f8>
   16504:	4648      	mov	r0, r9
   16506:	4646      	mov	r6, r8
   16508:	4642      	mov	r2, r8
   1650a:	0877      	lsrs	r7, r6, #1
   1650c:	07d3      	lsls	r3, r2, #31
   1650e:	0846      	lsrs	r6, r0, #1
   16510:	07c0      	lsls	r0, r0, #31
   16512:	431e      	orrs	r6, r3
   16514:	4681      	mov	r9, r0
   16516:	e6aa      	b.n	1626e <__aeabi_ddiv+0x206>
   16518:	4658      	mov	r0, fp
   1651a:	4220      	tst	r0, r4
   1651c:	d112      	bne.n	16544 <__aeabi_ddiv+0x4dc>
   1651e:	4304      	orrs	r4, r0
   16520:	0324      	lsls	r4, r4, #12
   16522:	1c2a      	adds	r2, r5, #0
   16524:	0b24      	lsrs	r4, r4, #12
   16526:	4689      	mov	r9, r1
   16528:	4d5c      	ldr	r5, [pc, #368]	; (1669c <__aeabi_ddiv+0x634>)
   1652a:	e665      	b.n	161f8 <__aeabi_ddiv+0x190>
   1652c:	42a3      	cmp	r3, r4
   1652e:	d1e3      	bne.n	164f8 <__aeabi_ddiv+0x490>
   16530:	9f00      	ldr	r7, [sp, #0]
   16532:	454f      	cmp	r7, r9
   16534:	d9db      	bls.n	164ee <__aeabi_ddiv+0x486>
   16536:	1a21      	subs	r1, r4, r0
   16538:	4693      	mov	fp, r2
   1653a:	e70b      	b.n	16354 <__aeabi_ddiv+0x2ec>
   1653c:	1c17      	adds	r7, r2, #0
   1653e:	e6dd      	b.n	162fc <__aeabi_ddiv+0x294>
   16540:	469b      	mov	fp, r3
   16542:	e6bc      	b.n	162be <__aeabi_ddiv+0x256>
   16544:	433c      	orrs	r4, r7
   16546:	0324      	lsls	r4, r4, #12
   16548:	0b24      	lsrs	r4, r4, #12
   1654a:	9a00      	ldr	r2, [sp, #0]
   1654c:	4d53      	ldr	r5, [pc, #332]	; (1669c <__aeabi_ddiv+0x634>)
   1654e:	e653      	b.n	161f8 <__aeabi_ddiv+0x190>
   16550:	42b2      	cmp	r2, r6
   16552:	d859      	bhi.n	16608 <__aeabi_ddiv+0x5a0>
   16554:	d100      	bne.n	16558 <__aeabi_ddiv+0x4f0>
   16556:	e08a      	b.n	1666e <__aeabi_ddiv+0x606>
   16558:	1c01      	adds	r1, r0, #0
   1655a:	e762      	b.n	16422 <__aeabi_ddiv+0x3ba>
   1655c:	465f      	mov	r7, fp
   1655e:	08c9      	lsrs	r1, r1, #3
   16560:	077b      	lsls	r3, r7, #29
   16562:	9e03      	ldr	r6, [sp, #12]
   16564:	430b      	orrs	r3, r1
   16566:	027c      	lsls	r4, r7, #9
   16568:	056d      	lsls	r5, r5, #21
   1656a:	2201      	movs	r2, #1
   1656c:	4699      	mov	r9, r3
   1656e:	0b24      	lsrs	r4, r4, #12
   16570:	0d6d      	lsrs	r5, r5, #21
   16572:	4032      	ands	r2, r6
   16574:	e640      	b.n	161f8 <__aeabi_ddiv+0x190>
   16576:	4b4a      	ldr	r3, [pc, #296]	; (166a0 <__aeabi_ddiv+0x638>)
   16578:	9f04      	ldr	r7, [sp, #16]
   1657a:	1bdb      	subs	r3, r3, r7
   1657c:	2b38      	cmp	r3, #56	; 0x38
   1657e:	dd10      	ble.n	165a2 <__aeabi_ddiv+0x53a>
   16580:	9c03      	ldr	r4, [sp, #12]
   16582:	2201      	movs	r2, #1
   16584:	4022      	ands	r2, r4
   16586:	2400      	movs	r4, #0
   16588:	2500      	movs	r5, #0
   1658a:	46a1      	mov	r9, r4
   1658c:	e634      	b.n	161f8 <__aeabi_ddiv+0x190>
   1658e:	2101      	movs	r1, #1
   16590:	4249      	negs	r1, r1
   16592:	e748      	b.n	16426 <__aeabi_ddiv+0x3be>
   16594:	9302      	str	r3, [sp, #8]
   16596:	e704      	b.n	163a2 <__aeabi_ddiv+0x33a>
   16598:	1c1f      	adds	r7, r3, #0
   1659a:	e721      	b.n	163e0 <__aeabi_ddiv+0x378>
   1659c:	9c01      	ldr	r4, [sp, #4]
   1659e:	9403      	str	r4, [sp, #12]
   165a0:	e741      	b.n	16426 <__aeabi_ddiv+0x3be>
   165a2:	2b1f      	cmp	r3, #31
   165a4:	dc40      	bgt.n	16628 <__aeabi_ddiv+0x5c0>
   165a6:	483f      	ldr	r0, [pc, #252]	; (166a4 <__aeabi_ddiv+0x63c>)
   165a8:	9f04      	ldr	r7, [sp, #16]
   165aa:	1c0c      	adds	r4, r1, #0
   165ac:	183a      	adds	r2, r7, r0
   165ae:	4658      	mov	r0, fp
   165b0:	4091      	lsls	r1, r2
   165b2:	40dc      	lsrs	r4, r3
   165b4:	4090      	lsls	r0, r2
   165b6:	4320      	orrs	r0, r4
   165b8:	1c0a      	adds	r2, r1, #0
   165ba:	1e51      	subs	r1, r2, #1
   165bc:	418a      	sbcs	r2, r1
   165be:	1c01      	adds	r1, r0, #0
   165c0:	4311      	orrs	r1, r2
   165c2:	465a      	mov	r2, fp
   165c4:	40da      	lsrs	r2, r3
   165c6:	1c13      	adds	r3, r2, #0
   165c8:	0748      	lsls	r0, r1, #29
   165ca:	d009      	beq.n	165e0 <__aeabi_ddiv+0x578>
   165cc:	220f      	movs	r2, #15
   165ce:	400a      	ands	r2, r1
   165d0:	2a04      	cmp	r2, #4
   165d2:	d005      	beq.n	165e0 <__aeabi_ddiv+0x578>
   165d4:	1d0a      	adds	r2, r1, #4
   165d6:	428a      	cmp	r2, r1
   165d8:	4189      	sbcs	r1, r1
   165da:	4249      	negs	r1, r1
   165dc:	185b      	adds	r3, r3, r1
   165de:	1c11      	adds	r1, r2, #0
   165e0:	021a      	lsls	r2, r3, #8
   165e2:	d534      	bpl.n	1664e <__aeabi_ddiv+0x5e6>
   165e4:	9c03      	ldr	r4, [sp, #12]
   165e6:	2201      	movs	r2, #1
   165e8:	4022      	ands	r2, r4
   165ea:	2400      	movs	r4, #0
   165ec:	2501      	movs	r5, #1
   165ee:	46a1      	mov	r9, r4
   165f0:	e602      	b.n	161f8 <__aeabi_ddiv+0x190>
   165f2:	9f00      	ldr	r7, [sp, #0]
   165f4:	2102      	movs	r1, #2
   165f6:	4249      	negs	r1, r1
   165f8:	44b9      	add	r9, r7
   165fa:	448b      	add	fp, r1
   165fc:	45b9      	cmp	r9, r7
   165fe:	4189      	sbcs	r1, r1
   16600:	4249      	negs	r1, r1
   16602:	1909      	adds	r1, r1, r4
   16604:	18cb      	adds	r3, r1, r3
   16606:	e6a4      	b.n	16352 <__aeabi_ddiv+0x2ea>
   16608:	9d00      	ldr	r5, [sp, #0]
   1660a:	1e88      	subs	r0, r1, #2
   1660c:	0069      	lsls	r1, r5, #1
   1660e:	42a9      	cmp	r1, r5
   16610:	41ad      	sbcs	r5, r5
   16612:	426d      	negs	r5, r5
   16614:	192c      	adds	r4, r5, r4
   16616:	1936      	adds	r6, r6, r4
   16618:	9100      	str	r1, [sp, #0]
   1661a:	e73a      	b.n	16492 <__aeabi_ddiv+0x42a>
   1661c:	2b00      	cmp	r3, #0
   1661e:	d000      	beq.n	16622 <__aeabi_ddiv+0x5ba>
   16620:	e733      	b.n	1648a <__aeabi_ddiv+0x422>
   16622:	2400      	movs	r4, #0
   16624:	9400      	str	r4, [sp, #0]
   16626:	e737      	b.n	16498 <__aeabi_ddiv+0x430>
   16628:	4a1f      	ldr	r2, [pc, #124]	; (166a8 <__aeabi_ddiv+0x640>)
   1662a:	9c04      	ldr	r4, [sp, #16]
   1662c:	465d      	mov	r5, fp
   1662e:	1b12      	subs	r2, r2, r4
   16630:	40d5      	lsrs	r5, r2
   16632:	1c2a      	adds	r2, r5, #0
   16634:	2b20      	cmp	r3, #32
   16636:	d01f      	beq.n	16678 <__aeabi_ddiv+0x610>
   16638:	4e1c      	ldr	r6, [pc, #112]	; (166ac <__aeabi_ddiv+0x644>)
   1663a:	465f      	mov	r7, fp
   1663c:	19a3      	adds	r3, r4, r6
   1663e:	409f      	lsls	r7, r3
   16640:	1c3b      	adds	r3, r7, #0
   16642:	4319      	orrs	r1, r3
   16644:	1e4b      	subs	r3, r1, #1
   16646:	4199      	sbcs	r1, r3
   16648:	4311      	orrs	r1, r2
   1664a:	2300      	movs	r3, #0
   1664c:	e7bc      	b.n	165c8 <__aeabi_ddiv+0x560>
   1664e:	075a      	lsls	r2, r3, #29
   16650:	08c9      	lsrs	r1, r1, #3
   16652:	430a      	orrs	r2, r1
   16654:	9f03      	ldr	r7, [sp, #12]
   16656:	4691      	mov	r9, r2
   16658:	025b      	lsls	r3, r3, #9
   1665a:	2201      	movs	r2, #1
   1665c:	0b1c      	lsrs	r4, r3, #12
   1665e:	403a      	ands	r2, r7
   16660:	2500      	movs	r5, #0
   16662:	e5c9      	b.n	161f8 <__aeabi_ddiv+0x190>
   16664:	454e      	cmp	r6, r9
   16666:	d8c4      	bhi.n	165f2 <__aeabi_ddiv+0x58a>
   16668:	4693      	mov	fp, r2
   1666a:	2100      	movs	r1, #0
   1666c:	e672      	b.n	16354 <__aeabi_ddiv+0x2ec>
   1666e:	9f00      	ldr	r7, [sp, #0]
   16670:	429f      	cmp	r7, r3
   16672:	d3c9      	bcc.n	16608 <__aeabi_ddiv+0x5a0>
   16674:	1c01      	adds	r1, r0, #0
   16676:	e70f      	b.n	16498 <__aeabi_ddiv+0x430>
   16678:	2300      	movs	r3, #0
   1667a:	e7e2      	b.n	16642 <__aeabi_ddiv+0x5da>
   1667c:	2480      	movs	r4, #128	; 0x80
   1667e:	0324      	lsls	r4, r4, #12
   16680:	465f      	mov	r7, fp
   16682:	433c      	orrs	r4, r7
   16684:	0324      	lsls	r4, r4, #12
   16686:	0b24      	lsrs	r4, r4, #12
   16688:	9a01      	ldr	r2, [sp, #4]
   1668a:	4689      	mov	r9, r1
   1668c:	4d03      	ldr	r5, [pc, #12]	; (1669c <__aeabi_ddiv+0x634>)
   1668e:	e5b3      	b.n	161f8 <__aeabi_ddiv+0x190>
   16690:	000003ff 	.word	0x000003ff
   16694:	feffffff 	.word	0xfeffffff
   16698:	000007fe 	.word	0x000007fe
   1669c:	000007ff 	.word	0x000007ff
   166a0:	fffffc02 	.word	0xfffffc02
   166a4:	0000041e 	.word	0x0000041e
   166a8:	fffffbe2 	.word	0xfffffbe2
   166ac:	0000043e 	.word	0x0000043e

000166b0 <__eqdf2>:
   166b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   166b2:	465f      	mov	r7, fp
   166b4:	4656      	mov	r6, sl
   166b6:	464d      	mov	r5, r9
   166b8:	4644      	mov	r4, r8
   166ba:	b4f0      	push	{r4, r5, r6, r7}
   166bc:	1c0d      	adds	r5, r1, #0
   166be:	1c04      	adds	r4, r0, #0
   166c0:	4680      	mov	r8, r0
   166c2:	0fe8      	lsrs	r0, r5, #31
   166c4:	4681      	mov	r9, r0
   166c6:	0318      	lsls	r0, r3, #12
   166c8:	030f      	lsls	r7, r1, #12
   166ca:	0b00      	lsrs	r0, r0, #12
   166cc:	0b3f      	lsrs	r7, r7, #12
   166ce:	b083      	sub	sp, #12
   166d0:	4684      	mov	ip, r0
   166d2:	481b      	ldr	r0, [pc, #108]	; (16740 <__eqdf2+0x90>)
   166d4:	9700      	str	r7, [sp, #0]
   166d6:	0049      	lsls	r1, r1, #1
   166d8:	005e      	lsls	r6, r3, #1
   166da:	0fdf      	lsrs	r7, r3, #31
   166dc:	0d49      	lsrs	r1, r1, #21
   166de:	4692      	mov	sl, r2
   166e0:	0d76      	lsrs	r6, r6, #21
   166e2:	46bb      	mov	fp, r7
   166e4:	4281      	cmp	r1, r0
   166e6:	d00c      	beq.n	16702 <__eqdf2+0x52>
   166e8:	4815      	ldr	r0, [pc, #84]	; (16740 <__eqdf2+0x90>)
   166ea:	4286      	cmp	r6, r0
   166ec:	d010      	beq.n	16710 <__eqdf2+0x60>
   166ee:	2001      	movs	r0, #1
   166f0:	42b1      	cmp	r1, r6
   166f2:	d015      	beq.n	16720 <__eqdf2+0x70>
   166f4:	b003      	add	sp, #12
   166f6:	bc3c      	pop	{r2, r3, r4, r5}
   166f8:	4690      	mov	r8, r2
   166fa:	4699      	mov	r9, r3
   166fc:	46a2      	mov	sl, r4
   166fe:	46ab      	mov	fp, r5
   16700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16702:	9f00      	ldr	r7, [sp, #0]
   16704:	2001      	movs	r0, #1
   16706:	4327      	orrs	r7, r4
   16708:	d1f4      	bne.n	166f4 <__eqdf2+0x44>
   1670a:	480d      	ldr	r0, [pc, #52]	; (16740 <__eqdf2+0x90>)
   1670c:	4286      	cmp	r6, r0
   1670e:	d1ee      	bne.n	166ee <__eqdf2+0x3e>
   16710:	4660      	mov	r0, ip
   16712:	4302      	orrs	r2, r0
   16714:	2001      	movs	r0, #1
   16716:	2a00      	cmp	r2, #0
   16718:	d1ec      	bne.n	166f4 <__eqdf2+0x44>
   1671a:	2001      	movs	r0, #1
   1671c:	42b1      	cmp	r1, r6
   1671e:	d1e9      	bne.n	166f4 <__eqdf2+0x44>
   16720:	9b00      	ldr	r3, [sp, #0]
   16722:	4563      	cmp	r3, ip
   16724:	d1e6      	bne.n	166f4 <__eqdf2+0x44>
   16726:	45d0      	cmp	r8, sl
   16728:	d1e4      	bne.n	166f4 <__eqdf2+0x44>
   1672a:	45d9      	cmp	r9, fp
   1672c:	d006      	beq.n	1673c <__eqdf2+0x8c>
   1672e:	2900      	cmp	r1, #0
   16730:	d1e0      	bne.n	166f4 <__eqdf2+0x44>
   16732:	431c      	orrs	r4, r3
   16734:	1c20      	adds	r0, r4, #0
   16736:	1e44      	subs	r4, r0, #1
   16738:	41a0      	sbcs	r0, r4
   1673a:	e7db      	b.n	166f4 <__eqdf2+0x44>
   1673c:	2000      	movs	r0, #0
   1673e:	e7d9      	b.n	166f4 <__eqdf2+0x44>
   16740:	000007ff 	.word	0x000007ff

00016744 <__gedf2>:
   16744:	b5f0      	push	{r4, r5, r6, r7, lr}
   16746:	465f      	mov	r7, fp
   16748:	4656      	mov	r6, sl
   1674a:	464d      	mov	r5, r9
   1674c:	4644      	mov	r4, r8
   1674e:	b4f0      	push	{r4, r5, r6, r7}
   16750:	0fcd      	lsrs	r5, r1, #31
   16752:	0fde      	lsrs	r6, r3, #31
   16754:	46ac      	mov	ip, r5
   16756:	031d      	lsls	r5, r3, #12
   16758:	0b2d      	lsrs	r5, r5, #12
   1675a:	46b1      	mov	r9, r6
   1675c:	4e37      	ldr	r6, [pc, #220]	; (1683c <__gedf2+0xf8>)
   1675e:	030f      	lsls	r7, r1, #12
   16760:	004c      	lsls	r4, r1, #1
   16762:	46ab      	mov	fp, r5
   16764:	005d      	lsls	r5, r3, #1
   16766:	4680      	mov	r8, r0
   16768:	0b3f      	lsrs	r7, r7, #12
   1676a:	0d64      	lsrs	r4, r4, #21
   1676c:	4692      	mov	sl, r2
   1676e:	0d6d      	lsrs	r5, r5, #21
   16770:	42b4      	cmp	r4, r6
   16772:	d032      	beq.n	167da <__gedf2+0x96>
   16774:	4e31      	ldr	r6, [pc, #196]	; (1683c <__gedf2+0xf8>)
   16776:	42b5      	cmp	r5, r6
   16778:	d035      	beq.n	167e6 <__gedf2+0xa2>
   1677a:	2c00      	cmp	r4, #0
   1677c:	d10e      	bne.n	1679c <__gedf2+0x58>
   1677e:	4338      	orrs	r0, r7
   16780:	4241      	negs	r1, r0
   16782:	4141      	adcs	r1, r0
   16784:	1c08      	adds	r0, r1, #0
   16786:	2d00      	cmp	r5, #0
   16788:	d00b      	beq.n	167a2 <__gedf2+0x5e>
   1678a:	2900      	cmp	r1, #0
   1678c:	d119      	bne.n	167c2 <__gedf2+0x7e>
   1678e:	45cc      	cmp	ip, r9
   16790:	d02d      	beq.n	167ee <__gedf2+0xaa>
   16792:	4665      	mov	r5, ip
   16794:	4268      	negs	r0, r5
   16796:	2301      	movs	r3, #1
   16798:	4318      	orrs	r0, r3
   1679a:	e018      	b.n	167ce <__gedf2+0x8a>
   1679c:	2d00      	cmp	r5, #0
   1679e:	d1f6      	bne.n	1678e <__gedf2+0x4a>
   167a0:	1c28      	adds	r0, r5, #0
   167a2:	4659      	mov	r1, fp
   167a4:	430a      	orrs	r2, r1
   167a6:	4253      	negs	r3, r2
   167a8:	4153      	adcs	r3, r2
   167aa:	2800      	cmp	r0, #0
   167ac:	d106      	bne.n	167bc <__gedf2+0x78>
   167ae:	2b00      	cmp	r3, #0
   167b0:	d0ed      	beq.n	1678e <__gedf2+0x4a>
   167b2:	4663      	mov	r3, ip
   167b4:	4258      	negs	r0, r3
   167b6:	2301      	movs	r3, #1
   167b8:	4318      	orrs	r0, r3
   167ba:	e008      	b.n	167ce <__gedf2+0x8a>
   167bc:	2000      	movs	r0, #0
   167be:	2b00      	cmp	r3, #0
   167c0:	d105      	bne.n	167ce <__gedf2+0x8a>
   167c2:	464a      	mov	r2, r9
   167c4:	4250      	negs	r0, r2
   167c6:	4150      	adcs	r0, r2
   167c8:	4240      	negs	r0, r0
   167ca:	2301      	movs	r3, #1
   167cc:	4318      	orrs	r0, r3
   167ce:	bc3c      	pop	{r2, r3, r4, r5}
   167d0:	4690      	mov	r8, r2
   167d2:	4699      	mov	r9, r3
   167d4:	46a2      	mov	sl, r4
   167d6:	46ab      	mov	fp, r5
   167d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167da:	1c3e      	adds	r6, r7, #0
   167dc:	4306      	orrs	r6, r0
   167de:	d0c9      	beq.n	16774 <__gedf2+0x30>
   167e0:	2002      	movs	r0, #2
   167e2:	4240      	negs	r0, r0
   167e4:	e7f3      	b.n	167ce <__gedf2+0x8a>
   167e6:	465e      	mov	r6, fp
   167e8:	4316      	orrs	r6, r2
   167ea:	d0c6      	beq.n	1677a <__gedf2+0x36>
   167ec:	e7f8      	b.n	167e0 <__gedf2+0x9c>
   167ee:	42ac      	cmp	r4, r5
   167f0:	dc07      	bgt.n	16802 <__gedf2+0xbe>
   167f2:	da0b      	bge.n	1680c <__gedf2+0xc8>
   167f4:	4661      	mov	r1, ip
   167f6:	4248      	negs	r0, r1
   167f8:	4148      	adcs	r0, r1
   167fa:	4240      	negs	r0, r0
   167fc:	2301      	movs	r3, #1
   167fe:	4318      	orrs	r0, r3
   16800:	e7e5      	b.n	167ce <__gedf2+0x8a>
   16802:	4666      	mov	r6, ip
   16804:	4270      	negs	r0, r6
   16806:	2301      	movs	r3, #1
   16808:	4318      	orrs	r0, r3
   1680a:	e7e0      	b.n	167ce <__gedf2+0x8a>
   1680c:	455f      	cmp	r7, fp
   1680e:	d80a      	bhi.n	16826 <__gedf2+0xe2>
   16810:	d00e      	beq.n	16830 <__gedf2+0xec>
   16812:	2000      	movs	r0, #0
   16814:	455f      	cmp	r7, fp
   16816:	d2da      	bcs.n	167ce <__gedf2+0x8a>
   16818:	4665      	mov	r5, ip
   1681a:	4268      	negs	r0, r5
   1681c:	4168      	adcs	r0, r5
   1681e:	4240      	negs	r0, r0
   16820:	2301      	movs	r3, #1
   16822:	4318      	orrs	r0, r3
   16824:	e7d3      	b.n	167ce <__gedf2+0x8a>
   16826:	4662      	mov	r2, ip
   16828:	4250      	negs	r0, r2
   1682a:	2301      	movs	r3, #1
   1682c:	4318      	orrs	r0, r3
   1682e:	e7ce      	b.n	167ce <__gedf2+0x8a>
   16830:	45d0      	cmp	r8, sl
   16832:	d8f8      	bhi.n	16826 <__gedf2+0xe2>
   16834:	2000      	movs	r0, #0
   16836:	45d0      	cmp	r8, sl
   16838:	d3ee      	bcc.n	16818 <__gedf2+0xd4>
   1683a:	e7c8      	b.n	167ce <__gedf2+0x8a>
   1683c:	000007ff 	.word	0x000007ff

00016840 <__ledf2>:
   16840:	b5f0      	push	{r4, r5, r6, r7, lr}
   16842:	4656      	mov	r6, sl
   16844:	464d      	mov	r5, r9
   16846:	4644      	mov	r4, r8
   16848:	465f      	mov	r7, fp
   1684a:	b4f0      	push	{r4, r5, r6, r7}
   1684c:	1c0d      	adds	r5, r1, #0
   1684e:	b083      	sub	sp, #12
   16850:	1c04      	adds	r4, r0, #0
   16852:	9001      	str	r0, [sp, #4]
   16854:	0fe8      	lsrs	r0, r5, #31
   16856:	4681      	mov	r9, r0
   16858:	0318      	lsls	r0, r3, #12
   1685a:	030f      	lsls	r7, r1, #12
   1685c:	0b00      	lsrs	r0, r0, #12
   1685e:	0b3f      	lsrs	r7, r7, #12
   16860:	4684      	mov	ip, r0
   16862:	4835      	ldr	r0, [pc, #212]	; (16938 <__ledf2+0xf8>)
   16864:	9700      	str	r7, [sp, #0]
   16866:	0049      	lsls	r1, r1, #1
   16868:	005e      	lsls	r6, r3, #1
   1686a:	0fdf      	lsrs	r7, r3, #31
   1686c:	0d49      	lsrs	r1, r1, #21
   1686e:	4692      	mov	sl, r2
   16870:	0d76      	lsrs	r6, r6, #21
   16872:	46b8      	mov	r8, r7
   16874:	4281      	cmp	r1, r0
   16876:	d034      	beq.n	168e2 <__ledf2+0xa2>
   16878:	482f      	ldr	r0, [pc, #188]	; (16938 <__ledf2+0xf8>)
   1687a:	4286      	cmp	r6, r0
   1687c:	d036      	beq.n	168ec <__ledf2+0xac>
   1687e:	2900      	cmp	r1, #0
   16880:	d018      	beq.n	168b4 <__ledf2+0x74>
   16882:	2e00      	cmp	r6, #0
   16884:	d11f      	bne.n	168c6 <__ledf2+0x86>
   16886:	1c34      	adds	r4, r6, #0
   16888:	4667      	mov	r7, ip
   1688a:	433a      	orrs	r2, r7
   1688c:	4253      	negs	r3, r2
   1688e:	4153      	adcs	r3, r2
   16890:	2c00      	cmp	r4, #0
   16892:	d01f      	beq.n	168d4 <__ledf2+0x94>
   16894:	2000      	movs	r0, #0
   16896:	2b00      	cmp	r3, #0
   16898:	d105      	bne.n	168a6 <__ledf2+0x66>
   1689a:	4642      	mov	r2, r8
   1689c:	4250      	negs	r0, r2
   1689e:	4150      	adcs	r0, r2
   168a0:	4240      	negs	r0, r0
   168a2:	2301      	movs	r3, #1
   168a4:	4318      	orrs	r0, r3
   168a6:	b003      	add	sp, #12
   168a8:	bc3c      	pop	{r2, r3, r4, r5}
   168aa:	4690      	mov	r8, r2
   168ac:	4699      	mov	r9, r3
   168ae:	46a2      	mov	sl, r4
   168b0:	46ab      	mov	fp, r5
   168b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168b4:	9800      	ldr	r0, [sp, #0]
   168b6:	4304      	orrs	r4, r0
   168b8:	4260      	negs	r0, r4
   168ba:	4160      	adcs	r0, r4
   168bc:	1c04      	adds	r4, r0, #0
   168be:	2e00      	cmp	r6, #0
   168c0:	d0e2      	beq.n	16888 <__ledf2+0x48>
   168c2:	2800      	cmp	r0, #0
   168c4:	d1e9      	bne.n	1689a <__ledf2+0x5a>
   168c6:	45c1      	cmp	r9, r8
   168c8:	d015      	beq.n	168f6 <__ledf2+0xb6>
   168ca:	464f      	mov	r7, r9
   168cc:	4278      	negs	r0, r7
   168ce:	2301      	movs	r3, #1
   168d0:	4318      	orrs	r0, r3
   168d2:	e7e8      	b.n	168a6 <__ledf2+0x66>
   168d4:	2b00      	cmp	r3, #0
   168d6:	d0f6      	beq.n	168c6 <__ledf2+0x86>
   168d8:	464b      	mov	r3, r9
   168da:	4258      	negs	r0, r3
   168dc:	2301      	movs	r3, #1
   168de:	4318      	orrs	r0, r3
   168e0:	e7e1      	b.n	168a6 <__ledf2+0x66>
   168e2:	9f00      	ldr	r7, [sp, #0]
   168e4:	2002      	movs	r0, #2
   168e6:	4327      	orrs	r7, r4
   168e8:	d1dd      	bne.n	168a6 <__ledf2+0x66>
   168ea:	e7c5      	b.n	16878 <__ledf2+0x38>
   168ec:	4667      	mov	r7, ip
   168ee:	2002      	movs	r0, #2
   168f0:	4317      	orrs	r7, r2
   168f2:	d1d8      	bne.n	168a6 <__ledf2+0x66>
   168f4:	e7c3      	b.n	1687e <__ledf2+0x3e>
   168f6:	42b1      	cmp	r1, r6
   168f8:	dd04      	ble.n	16904 <__ledf2+0xc4>
   168fa:	464a      	mov	r2, r9
   168fc:	4250      	negs	r0, r2
   168fe:	2301      	movs	r3, #1
   16900:	4318      	orrs	r0, r3
   16902:	e7d0      	b.n	168a6 <__ledf2+0x66>
   16904:	42b1      	cmp	r1, r6
   16906:	db07      	blt.n	16918 <__ledf2+0xd8>
   16908:	9800      	ldr	r0, [sp, #0]
   1690a:	4560      	cmp	r0, ip
   1690c:	d8e4      	bhi.n	168d8 <__ledf2+0x98>
   1690e:	d00a      	beq.n	16926 <__ledf2+0xe6>
   16910:	9f00      	ldr	r7, [sp, #0]
   16912:	2000      	movs	r0, #0
   16914:	4567      	cmp	r7, ip
   16916:	d2c6      	bcs.n	168a6 <__ledf2+0x66>
   16918:	464f      	mov	r7, r9
   1691a:	4278      	negs	r0, r7
   1691c:	4178      	adcs	r0, r7
   1691e:	4240      	negs	r0, r0
   16920:	2301      	movs	r3, #1
   16922:	4318      	orrs	r0, r3
   16924:	e7bf      	b.n	168a6 <__ledf2+0x66>
   16926:	9a01      	ldr	r2, [sp, #4]
   16928:	4552      	cmp	r2, sl
   1692a:	d8d5      	bhi.n	168d8 <__ledf2+0x98>
   1692c:	9a01      	ldr	r2, [sp, #4]
   1692e:	2000      	movs	r0, #0
   16930:	4552      	cmp	r2, sl
   16932:	d3f1      	bcc.n	16918 <__ledf2+0xd8>
   16934:	e7b7      	b.n	168a6 <__ledf2+0x66>
   16936:	46c0      	nop			; (mov r8, r8)
   16938:	000007ff 	.word	0x000007ff

0001693c <__aeabi_dmul>:
   1693c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1693e:	4656      	mov	r6, sl
   16940:	4644      	mov	r4, r8
   16942:	465f      	mov	r7, fp
   16944:	464d      	mov	r5, r9
   16946:	b4f0      	push	{r4, r5, r6, r7}
   16948:	1c1f      	adds	r7, r3, #0
   1694a:	030b      	lsls	r3, r1, #12
   1694c:	0b1b      	lsrs	r3, r3, #12
   1694e:	469a      	mov	sl, r3
   16950:	004b      	lsls	r3, r1, #1
   16952:	b087      	sub	sp, #28
   16954:	1c04      	adds	r4, r0, #0
   16956:	4680      	mov	r8, r0
   16958:	0d5b      	lsrs	r3, r3, #21
   1695a:	0fc8      	lsrs	r0, r1, #31
   1695c:	1c16      	adds	r6, r2, #0
   1695e:	9302      	str	r3, [sp, #8]
   16960:	4681      	mov	r9, r0
   16962:	2b00      	cmp	r3, #0
   16964:	d068      	beq.n	16a38 <__aeabi_dmul+0xfc>
   16966:	4b69      	ldr	r3, [pc, #420]	; (16b0c <__aeabi_dmul+0x1d0>)
   16968:	9902      	ldr	r1, [sp, #8]
   1696a:	4299      	cmp	r1, r3
   1696c:	d032      	beq.n	169d4 <__aeabi_dmul+0x98>
   1696e:	2280      	movs	r2, #128	; 0x80
   16970:	4653      	mov	r3, sl
   16972:	0352      	lsls	r2, r2, #13
   16974:	431a      	orrs	r2, r3
   16976:	00d2      	lsls	r2, r2, #3
   16978:	0f63      	lsrs	r3, r4, #29
   1697a:	431a      	orrs	r2, r3
   1697c:	4692      	mov	sl, r2
   1697e:	4a64      	ldr	r2, [pc, #400]	; (16b10 <__aeabi_dmul+0x1d4>)
   16980:	00e0      	lsls	r0, r4, #3
   16982:	1889      	adds	r1, r1, r2
   16984:	4680      	mov	r8, r0
   16986:	9102      	str	r1, [sp, #8]
   16988:	2400      	movs	r4, #0
   1698a:	2500      	movs	r5, #0
   1698c:	033b      	lsls	r3, r7, #12
   1698e:	0b1b      	lsrs	r3, r3, #12
   16990:	469b      	mov	fp, r3
   16992:	0078      	lsls	r0, r7, #1
   16994:	0ffb      	lsrs	r3, r7, #31
   16996:	1c32      	adds	r2, r6, #0
   16998:	0d40      	lsrs	r0, r0, #21
   1699a:	9303      	str	r3, [sp, #12]
   1699c:	d100      	bne.n	169a0 <__aeabi_dmul+0x64>
   1699e:	e075      	b.n	16a8c <__aeabi_dmul+0x150>
   169a0:	4b5a      	ldr	r3, [pc, #360]	; (16b0c <__aeabi_dmul+0x1d0>)
   169a2:	4298      	cmp	r0, r3
   169a4:	d069      	beq.n	16a7a <__aeabi_dmul+0x13e>
   169a6:	2280      	movs	r2, #128	; 0x80
   169a8:	4659      	mov	r1, fp
   169aa:	0352      	lsls	r2, r2, #13
   169ac:	430a      	orrs	r2, r1
   169ae:	0f73      	lsrs	r3, r6, #29
   169b0:	00d2      	lsls	r2, r2, #3
   169b2:	431a      	orrs	r2, r3
   169b4:	4b56      	ldr	r3, [pc, #344]	; (16b10 <__aeabi_dmul+0x1d4>)
   169b6:	4693      	mov	fp, r2
   169b8:	18c0      	adds	r0, r0, r3
   169ba:	00f2      	lsls	r2, r6, #3
   169bc:	2300      	movs	r3, #0
   169be:	9903      	ldr	r1, [sp, #12]
   169c0:	464e      	mov	r6, r9
   169c2:	4071      	eors	r1, r6
   169c4:	431c      	orrs	r4, r3
   169c6:	2c0f      	cmp	r4, #15
   169c8:	d900      	bls.n	169cc <__aeabi_dmul+0x90>
   169ca:	e0a9      	b.n	16b20 <__aeabi_dmul+0x1e4>
   169cc:	4e51      	ldr	r6, [pc, #324]	; (16b14 <__aeabi_dmul+0x1d8>)
   169ce:	00a4      	lsls	r4, r4, #2
   169d0:	5934      	ldr	r4, [r6, r4]
   169d2:	46a7      	mov	pc, r4
   169d4:	4653      	mov	r3, sl
   169d6:	431c      	orrs	r4, r3
   169d8:	d000      	beq.n	169dc <__aeabi_dmul+0xa0>
   169da:	e087      	b.n	16aec <__aeabi_dmul+0x1b0>
   169dc:	2500      	movs	r5, #0
   169de:	46aa      	mov	sl, r5
   169e0:	46a8      	mov	r8, r5
   169e2:	2408      	movs	r4, #8
   169e4:	2502      	movs	r5, #2
   169e6:	e7d1      	b.n	1698c <__aeabi_dmul+0x50>
   169e8:	4649      	mov	r1, r9
   169ea:	2d02      	cmp	r5, #2
   169ec:	d06c      	beq.n	16ac8 <__aeabi_dmul+0x18c>
   169ee:	2d03      	cmp	r5, #3
   169f0:	d100      	bne.n	169f4 <__aeabi_dmul+0xb8>
   169f2:	e217      	b.n	16e24 <__aeabi_dmul+0x4e8>
   169f4:	2d01      	cmp	r5, #1
   169f6:	d000      	beq.n	169fa <__aeabi_dmul+0xbe>
   169f8:	e158      	b.n	16cac <__aeabi_dmul+0x370>
   169fa:	400d      	ands	r5, r1
   169fc:	b2ed      	uxtb	r5, r5
   169fe:	2400      	movs	r4, #0
   16a00:	46a9      	mov	r9, r5
   16a02:	2300      	movs	r3, #0
   16a04:	46a0      	mov	r8, r4
   16a06:	2000      	movs	r0, #0
   16a08:	2100      	movs	r1, #0
   16a0a:	0325      	lsls	r5, r4, #12
   16a0c:	0d0a      	lsrs	r2, r1, #20
   16a0e:	051c      	lsls	r4, r3, #20
   16a10:	0b2d      	lsrs	r5, r5, #12
   16a12:	0512      	lsls	r2, r2, #20
   16a14:	4b40      	ldr	r3, [pc, #256]	; (16b18 <__aeabi_dmul+0x1dc>)
   16a16:	432a      	orrs	r2, r5
   16a18:	4013      	ands	r3, r2
   16a1a:	4323      	orrs	r3, r4
   16a1c:	005b      	lsls	r3, r3, #1
   16a1e:	464c      	mov	r4, r9
   16a20:	085b      	lsrs	r3, r3, #1
   16a22:	07e2      	lsls	r2, r4, #31
   16a24:	1c19      	adds	r1, r3, #0
   16a26:	4640      	mov	r0, r8
   16a28:	4311      	orrs	r1, r2
   16a2a:	b007      	add	sp, #28
   16a2c:	bc3c      	pop	{r2, r3, r4, r5}
   16a2e:	4690      	mov	r8, r2
   16a30:	4699      	mov	r9, r3
   16a32:	46a2      	mov	sl, r4
   16a34:	46ab      	mov	fp, r5
   16a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a38:	4653      	mov	r3, sl
   16a3a:	4323      	orrs	r3, r4
   16a3c:	d050      	beq.n	16ae0 <__aeabi_dmul+0x1a4>
   16a3e:	4653      	mov	r3, sl
   16a40:	2b00      	cmp	r3, #0
   16a42:	d100      	bne.n	16a46 <__aeabi_dmul+0x10a>
   16a44:	e184      	b.n	16d50 <__aeabi_dmul+0x414>
   16a46:	4650      	mov	r0, sl
   16a48:	f000 fde2 	bl	17610 <__clzsi2>
   16a4c:	1e03      	subs	r3, r0, #0
   16a4e:	2b27      	cmp	r3, #39	; 0x27
   16a50:	dd00      	ble.n	16a54 <__aeabi_dmul+0x118>
   16a52:	e176      	b.n	16d42 <__aeabi_dmul+0x406>
   16a54:	2128      	movs	r1, #40	; 0x28
   16a56:	1a0d      	subs	r5, r1, r0
   16a58:	1c21      	adds	r1, r4, #0
   16a5a:	3b08      	subs	r3, #8
   16a5c:	4652      	mov	r2, sl
   16a5e:	40e9      	lsrs	r1, r5
   16a60:	409a      	lsls	r2, r3
   16a62:	1c0d      	adds	r5, r1, #0
   16a64:	4315      	orrs	r5, r2
   16a66:	1c22      	adds	r2, r4, #0
   16a68:	409a      	lsls	r2, r3
   16a6a:	46aa      	mov	sl, r5
   16a6c:	4690      	mov	r8, r2
   16a6e:	4b2b      	ldr	r3, [pc, #172]	; (16b1c <__aeabi_dmul+0x1e0>)
   16a70:	2400      	movs	r4, #0
   16a72:	1a1b      	subs	r3, r3, r0
   16a74:	9302      	str	r3, [sp, #8]
   16a76:	2500      	movs	r5, #0
   16a78:	e788      	b.n	1698c <__aeabi_dmul+0x50>
   16a7a:	465b      	mov	r3, fp
   16a7c:	431e      	orrs	r6, r3
   16a7e:	2303      	movs	r3, #3
   16a80:	2e00      	cmp	r6, #0
   16a82:	d19c      	bne.n	169be <__aeabi_dmul+0x82>
   16a84:	46b3      	mov	fp, r6
   16a86:	2200      	movs	r2, #0
   16a88:	2302      	movs	r3, #2
   16a8a:	e798      	b.n	169be <__aeabi_dmul+0x82>
   16a8c:	465b      	mov	r3, fp
   16a8e:	4333      	orrs	r3, r6
   16a90:	d021      	beq.n	16ad6 <__aeabi_dmul+0x19a>
   16a92:	4658      	mov	r0, fp
   16a94:	2800      	cmp	r0, #0
   16a96:	d100      	bne.n	16a9a <__aeabi_dmul+0x15e>
   16a98:	e14e      	b.n	16d38 <__aeabi_dmul+0x3fc>
   16a9a:	f000 fdb9 	bl	17610 <__clzsi2>
   16a9e:	2827      	cmp	r0, #39	; 0x27
   16aa0:	dd00      	ble.n	16aa4 <__aeabi_dmul+0x168>
   16aa2:	e142      	b.n	16d2a <__aeabi_dmul+0x3ee>
   16aa4:	2128      	movs	r1, #40	; 0x28
   16aa6:	1a0f      	subs	r7, r1, r0
   16aa8:	1c02      	adds	r2, r0, #0
   16aaa:	1c31      	adds	r1, r6, #0
   16aac:	3a08      	subs	r2, #8
   16aae:	465b      	mov	r3, fp
   16ab0:	40f9      	lsrs	r1, r7
   16ab2:	4093      	lsls	r3, r2
   16ab4:	1c0f      	adds	r7, r1, #0
   16ab6:	431f      	orrs	r7, r3
   16ab8:	1c33      	adds	r3, r6, #0
   16aba:	4093      	lsls	r3, r2
   16abc:	46bb      	mov	fp, r7
   16abe:	1c1a      	adds	r2, r3, #0
   16ac0:	4b16      	ldr	r3, [pc, #88]	; (16b1c <__aeabi_dmul+0x1e0>)
   16ac2:	1a18      	subs	r0, r3, r0
   16ac4:	2300      	movs	r3, #0
   16ac6:	e77a      	b.n	169be <__aeabi_dmul+0x82>
   16ac8:	2301      	movs	r3, #1
   16aca:	400b      	ands	r3, r1
   16acc:	2400      	movs	r4, #0
   16ace:	4699      	mov	r9, r3
   16ad0:	46a0      	mov	r8, r4
   16ad2:	4b0e      	ldr	r3, [pc, #56]	; (16b0c <__aeabi_dmul+0x1d0>)
   16ad4:	e797      	b.n	16a06 <__aeabi_dmul+0xca>
   16ad6:	2700      	movs	r7, #0
   16ad8:	46bb      	mov	fp, r7
   16ada:	2200      	movs	r2, #0
   16adc:	2301      	movs	r3, #1
   16ade:	e76e      	b.n	169be <__aeabi_dmul+0x82>
   16ae0:	2100      	movs	r1, #0
   16ae2:	2404      	movs	r4, #4
   16ae4:	468a      	mov	sl, r1
   16ae6:	4688      	mov	r8, r1
   16ae8:	2501      	movs	r5, #1
   16aea:	e74f      	b.n	1698c <__aeabi_dmul+0x50>
   16aec:	240c      	movs	r4, #12
   16aee:	2503      	movs	r5, #3
   16af0:	e74c      	b.n	1698c <__aeabi_dmul+0x50>
   16af2:	2500      	movs	r5, #0
   16af4:	2480      	movs	r4, #128	; 0x80
   16af6:	46a9      	mov	r9, r5
   16af8:	0324      	lsls	r4, r4, #12
   16afa:	46a8      	mov	r8, r5
   16afc:	4b03      	ldr	r3, [pc, #12]	; (16b0c <__aeabi_dmul+0x1d0>)
   16afe:	e782      	b.n	16a06 <__aeabi_dmul+0xca>
   16b00:	46da      	mov	sl, fp
   16b02:	4690      	mov	r8, r2
   16b04:	9903      	ldr	r1, [sp, #12]
   16b06:	1c1d      	adds	r5, r3, #0
   16b08:	e76f      	b.n	169ea <__aeabi_dmul+0xae>
   16b0a:	46c0      	nop			; (mov r8, r8)
   16b0c:	000007ff 	.word	0x000007ff
   16b10:	fffffc01 	.word	0xfffffc01
   16b14:	00018640 	.word	0x00018640
   16b18:	800fffff 	.word	0x800fffff
   16b1c:	fffffc0d 	.word	0xfffffc0d
   16b20:	9f02      	ldr	r7, [sp, #8]
   16b22:	0c16      	lsrs	r6, r2, #16
   16b24:	1838      	adds	r0, r7, r0
   16b26:	9004      	str	r0, [sp, #16]
   16b28:	4640      	mov	r0, r8
   16b2a:	0c07      	lsrs	r7, r0, #16
   16b2c:	0400      	lsls	r0, r0, #16
   16b2e:	0c00      	lsrs	r0, r0, #16
   16b30:	0412      	lsls	r2, r2, #16
   16b32:	0c12      	lsrs	r2, r2, #16
   16b34:	1c03      	adds	r3, r0, #0
   16b36:	4353      	muls	r3, r2
   16b38:	1c04      	adds	r4, r0, #0
   16b3a:	1c3d      	adds	r5, r7, #0
   16b3c:	4374      	muls	r4, r6
   16b3e:	4355      	muls	r5, r2
   16b40:	4698      	mov	r8, r3
   16b42:	1c3b      	adds	r3, r7, #0
   16b44:	4373      	muls	r3, r6
   16b46:	1964      	adds	r4, r4, r5
   16b48:	46a4      	mov	ip, r4
   16b4a:	4644      	mov	r4, r8
   16b4c:	9302      	str	r3, [sp, #8]
   16b4e:	0c23      	lsrs	r3, r4, #16
   16b50:	4463      	add	r3, ip
   16b52:	429d      	cmp	r5, r3
   16b54:	d904      	bls.n	16b60 <__aeabi_dmul+0x224>
   16b56:	9d02      	ldr	r5, [sp, #8]
   16b58:	2480      	movs	r4, #128	; 0x80
   16b5a:	0264      	lsls	r4, r4, #9
   16b5c:	192d      	adds	r5, r5, r4
   16b5e:	9502      	str	r5, [sp, #8]
   16b60:	0c1d      	lsrs	r5, r3, #16
   16b62:	9503      	str	r5, [sp, #12]
   16b64:	4645      	mov	r5, r8
   16b66:	042c      	lsls	r4, r5, #16
   16b68:	041b      	lsls	r3, r3, #16
   16b6a:	0c24      	lsrs	r4, r4, #16
   16b6c:	191c      	adds	r4, r3, r4
   16b6e:	9405      	str	r4, [sp, #20]
   16b70:	465c      	mov	r4, fp
   16b72:	0c23      	lsrs	r3, r4, #16
   16b74:	1c05      	adds	r5, r0, #0
   16b76:	4358      	muls	r0, r3
   16b78:	0424      	lsls	r4, r4, #16
   16b7a:	0c24      	lsrs	r4, r4, #16
   16b7c:	4684      	mov	ip, r0
   16b7e:	1c38      	adds	r0, r7, #0
   16b80:	4360      	muls	r0, r4
   16b82:	4365      	muls	r5, r4
   16b84:	435f      	muls	r7, r3
   16b86:	4681      	mov	r9, r0
   16b88:	44cc      	add	ip, r9
   16b8a:	0c28      	lsrs	r0, r5, #16
   16b8c:	4460      	add	r0, ip
   16b8e:	46bb      	mov	fp, r7
   16b90:	4581      	cmp	r9, r0
   16b92:	d902      	bls.n	16b9a <__aeabi_dmul+0x25e>
   16b94:	2780      	movs	r7, #128	; 0x80
   16b96:	027f      	lsls	r7, r7, #9
   16b98:	44bb      	add	fp, r7
   16b9a:	042d      	lsls	r5, r5, #16
   16b9c:	0c07      	lsrs	r7, r0, #16
   16b9e:	0c2d      	lsrs	r5, r5, #16
   16ba0:	0400      	lsls	r0, r0, #16
   16ba2:	1940      	adds	r0, r0, r5
   16ba4:	4655      	mov	r5, sl
   16ba6:	46bc      	mov	ip, r7
   16ba8:	042f      	lsls	r7, r5, #16
   16baa:	44e3      	add	fp, ip
   16bac:	4684      	mov	ip, r0
   16bae:	0c28      	lsrs	r0, r5, #16
   16bb0:	0c3d      	lsrs	r5, r7, #16
   16bb2:	1c2f      	adds	r7, r5, #0
   16bb4:	4357      	muls	r7, r2
   16bb6:	46b8      	mov	r8, r7
   16bb8:	1c2f      	adds	r7, r5, #0
   16bba:	4377      	muls	r7, r6
   16bbc:	4342      	muls	r2, r0
   16bbe:	46b9      	mov	r9, r7
   16bc0:	4647      	mov	r7, r8
   16bc2:	0c3f      	lsrs	r7, r7, #16
   16bc4:	4491      	add	r9, r2
   16bc6:	46ba      	mov	sl, r7
   16bc8:	44d1      	add	r9, sl
   16bca:	4346      	muls	r6, r0
   16bcc:	454a      	cmp	r2, r9
   16bce:	d902      	bls.n	16bd6 <__aeabi_dmul+0x29a>
   16bd0:	2280      	movs	r2, #128	; 0x80
   16bd2:	0252      	lsls	r2, r2, #9
   16bd4:	18b6      	adds	r6, r6, r2
   16bd6:	464f      	mov	r7, r9
   16bd8:	0c3a      	lsrs	r2, r7, #16
   16bda:	18b6      	adds	r6, r6, r2
   16bdc:	043a      	lsls	r2, r7, #16
   16bde:	4647      	mov	r7, r8
   16be0:	043f      	lsls	r7, r7, #16
   16be2:	0c3f      	lsrs	r7, r7, #16
   16be4:	46b8      	mov	r8, r7
   16be6:	1c2f      	adds	r7, r5, #0
   16be8:	4367      	muls	r7, r4
   16bea:	435d      	muls	r5, r3
   16bec:	4344      	muls	r4, r0
   16bee:	4358      	muls	r0, r3
   16bf0:	1965      	adds	r5, r4, r5
   16bf2:	9001      	str	r0, [sp, #4]
   16bf4:	0c38      	lsrs	r0, r7, #16
   16bf6:	182d      	adds	r5, r5, r0
   16bf8:	4442      	add	r2, r8
   16bfa:	46b8      	mov	r8, r7
   16bfc:	42ac      	cmp	r4, r5
   16bfe:	d904      	bls.n	16c0a <__aeabi_dmul+0x2ce>
   16c00:	9801      	ldr	r0, [sp, #4]
   16c02:	2380      	movs	r3, #128	; 0x80
   16c04:	025b      	lsls	r3, r3, #9
   16c06:	18c0      	adds	r0, r0, r3
   16c08:	9001      	str	r0, [sp, #4]
   16c0a:	9c03      	ldr	r4, [sp, #12]
   16c0c:	9f02      	ldr	r7, [sp, #8]
   16c0e:	1c20      	adds	r0, r4, #0
   16c10:	4460      	add	r0, ip
   16c12:	19c0      	adds	r0, r0, r7
   16c14:	4560      	cmp	r0, ip
   16c16:	41a4      	sbcs	r4, r4
   16c18:	4647      	mov	r7, r8
   16c1a:	4264      	negs	r4, r4
   16c1c:	46a4      	mov	ip, r4
   16c1e:	042b      	lsls	r3, r5, #16
   16c20:	043c      	lsls	r4, r7, #16
   16c22:	4699      	mov	r9, r3
   16c24:	0c24      	lsrs	r4, r4, #16
   16c26:	444c      	add	r4, r9
   16c28:	46a0      	mov	r8, r4
   16c2a:	44d8      	add	r8, fp
   16c2c:	1880      	adds	r0, r0, r2
   16c2e:	46c2      	mov	sl, r8
   16c30:	44e2      	add	sl, ip
   16c32:	4290      	cmp	r0, r2
   16c34:	4192      	sbcs	r2, r2
   16c36:	4657      	mov	r7, sl
   16c38:	4252      	negs	r2, r2
   16c3a:	4691      	mov	r9, r2
   16c3c:	19f2      	adds	r2, r6, r7
   16c3e:	45e2      	cmp	sl, ip
   16c40:	41bf      	sbcs	r7, r7
   16c42:	427f      	negs	r7, r7
   16c44:	464b      	mov	r3, r9
   16c46:	46bc      	mov	ip, r7
   16c48:	45d8      	cmp	r8, fp
   16c4a:	41bf      	sbcs	r7, r7
   16c4c:	18d4      	adds	r4, r2, r3
   16c4e:	427f      	negs	r7, r7
   16c50:	4663      	mov	r3, ip
   16c52:	431f      	orrs	r7, r3
   16c54:	0c2d      	lsrs	r5, r5, #16
   16c56:	197f      	adds	r7, r7, r5
   16c58:	42b2      	cmp	r2, r6
   16c5a:	4192      	sbcs	r2, r2
   16c5c:	454c      	cmp	r4, r9
   16c5e:	41ad      	sbcs	r5, r5
   16c60:	4252      	negs	r2, r2
   16c62:	426d      	negs	r5, r5
   16c64:	4315      	orrs	r5, r2
   16c66:	9e01      	ldr	r6, [sp, #4]
   16c68:	197d      	adds	r5, r7, r5
   16c6a:	19ab      	adds	r3, r5, r6
   16c6c:	0de2      	lsrs	r2, r4, #23
   16c6e:	025b      	lsls	r3, r3, #9
   16c70:	9f05      	ldr	r7, [sp, #20]
   16c72:	4313      	orrs	r3, r2
   16c74:	0242      	lsls	r2, r0, #9
   16c76:	433a      	orrs	r2, r7
   16c78:	469a      	mov	sl, r3
   16c7a:	1e53      	subs	r3, r2, #1
   16c7c:	419a      	sbcs	r2, r3
   16c7e:	0dc3      	lsrs	r3, r0, #23
   16c80:	1c10      	adds	r0, r2, #0
   16c82:	4318      	orrs	r0, r3
   16c84:	0264      	lsls	r4, r4, #9
   16c86:	4320      	orrs	r0, r4
   16c88:	4680      	mov	r8, r0
   16c8a:	4650      	mov	r0, sl
   16c8c:	01c0      	lsls	r0, r0, #7
   16c8e:	d50d      	bpl.n	16cac <__aeabi_dmul+0x370>
   16c90:	4645      	mov	r5, r8
   16c92:	2201      	movs	r2, #1
   16c94:	4656      	mov	r6, sl
   16c96:	9c04      	ldr	r4, [sp, #16]
   16c98:	086b      	lsrs	r3, r5, #1
   16c9a:	402a      	ands	r2, r5
   16c9c:	431a      	orrs	r2, r3
   16c9e:	07f3      	lsls	r3, r6, #31
   16ca0:	3401      	adds	r4, #1
   16ca2:	431a      	orrs	r2, r3
   16ca4:	0876      	lsrs	r6, r6, #1
   16ca6:	9404      	str	r4, [sp, #16]
   16ca8:	4690      	mov	r8, r2
   16caa:	46b2      	mov	sl, r6
   16cac:	9e04      	ldr	r6, [sp, #16]
   16cae:	4f63      	ldr	r7, [pc, #396]	; (16e3c <__aeabi_dmul+0x500>)
   16cb0:	19f3      	adds	r3, r6, r7
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	dd61      	ble.n	16d7a <__aeabi_dmul+0x43e>
   16cb6:	4640      	mov	r0, r8
   16cb8:	0740      	lsls	r0, r0, #29
   16cba:	d00b      	beq.n	16cd4 <__aeabi_dmul+0x398>
   16cbc:	220f      	movs	r2, #15
   16cbe:	4644      	mov	r4, r8
   16cc0:	4022      	ands	r2, r4
   16cc2:	2a04      	cmp	r2, #4
   16cc4:	d006      	beq.n	16cd4 <__aeabi_dmul+0x398>
   16cc6:	4642      	mov	r2, r8
   16cc8:	3204      	adds	r2, #4
   16cca:	4542      	cmp	r2, r8
   16ccc:	4180      	sbcs	r0, r0
   16cce:	4240      	negs	r0, r0
   16cd0:	4482      	add	sl, r0
   16cd2:	4690      	mov	r8, r2
   16cd4:	4655      	mov	r5, sl
   16cd6:	01ed      	lsls	r5, r5, #7
   16cd8:	d507      	bpl.n	16cea <__aeabi_dmul+0x3ae>
   16cda:	4b59      	ldr	r3, [pc, #356]	; (16e40 <__aeabi_dmul+0x504>)
   16cdc:	4656      	mov	r6, sl
   16cde:	9f04      	ldr	r7, [sp, #16]
   16ce0:	2080      	movs	r0, #128	; 0x80
   16ce2:	401e      	ands	r6, r3
   16ce4:	00c0      	lsls	r0, r0, #3
   16ce6:	46b2      	mov	sl, r6
   16ce8:	183b      	adds	r3, r7, r0
   16cea:	4a56      	ldr	r2, [pc, #344]	; (16e44 <__aeabi_dmul+0x508>)
   16cec:	4293      	cmp	r3, r2
   16cee:	dd00      	ble.n	16cf2 <__aeabi_dmul+0x3b6>
   16cf0:	e6ea      	b.n	16ac8 <__aeabi_dmul+0x18c>
   16cf2:	4644      	mov	r4, r8
   16cf4:	4655      	mov	r5, sl
   16cf6:	08e2      	lsrs	r2, r4, #3
   16cf8:	0768      	lsls	r0, r5, #29
   16cfa:	4310      	orrs	r0, r2
   16cfc:	2201      	movs	r2, #1
   16cfe:	026c      	lsls	r4, r5, #9
   16d00:	055b      	lsls	r3, r3, #21
   16d02:	400a      	ands	r2, r1
   16d04:	4680      	mov	r8, r0
   16d06:	0b24      	lsrs	r4, r4, #12
   16d08:	0d5b      	lsrs	r3, r3, #21
   16d0a:	4691      	mov	r9, r2
   16d0c:	e67b      	b.n	16a06 <__aeabi_dmul+0xca>
   16d0e:	46da      	mov	sl, fp
   16d10:	4690      	mov	r8, r2
   16d12:	1c1d      	adds	r5, r3, #0
   16d14:	e669      	b.n	169ea <__aeabi_dmul+0xae>
   16d16:	2480      	movs	r4, #128	; 0x80
   16d18:	0324      	lsls	r4, r4, #12
   16d1a:	4657      	mov	r7, sl
   16d1c:	4227      	tst	r7, r4
   16d1e:	d11c      	bne.n	16d5a <__aeabi_dmul+0x41e>
   16d20:	433c      	orrs	r4, r7
   16d22:	0324      	lsls	r4, r4, #12
   16d24:	0b24      	lsrs	r4, r4, #12
   16d26:	4b48      	ldr	r3, [pc, #288]	; (16e48 <__aeabi_dmul+0x50c>)
   16d28:	e66d      	b.n	16a06 <__aeabi_dmul+0xca>
   16d2a:	1c03      	adds	r3, r0, #0
   16d2c:	3b28      	subs	r3, #40	; 0x28
   16d2e:	1c31      	adds	r1, r6, #0
   16d30:	4099      	lsls	r1, r3
   16d32:	468b      	mov	fp, r1
   16d34:	2200      	movs	r2, #0
   16d36:	e6c3      	b.n	16ac0 <__aeabi_dmul+0x184>
   16d38:	1c30      	adds	r0, r6, #0
   16d3a:	f000 fc69 	bl	17610 <__clzsi2>
   16d3e:	3020      	adds	r0, #32
   16d40:	e6ad      	b.n	16a9e <__aeabi_dmul+0x162>
   16d42:	3b28      	subs	r3, #40	; 0x28
   16d44:	1c21      	adds	r1, r4, #0
   16d46:	4099      	lsls	r1, r3
   16d48:	2200      	movs	r2, #0
   16d4a:	468a      	mov	sl, r1
   16d4c:	4690      	mov	r8, r2
   16d4e:	e68e      	b.n	16a6e <__aeabi_dmul+0x132>
   16d50:	1c20      	adds	r0, r4, #0
   16d52:	f000 fc5d 	bl	17610 <__clzsi2>
   16d56:	3020      	adds	r0, #32
   16d58:	e678      	b.n	16a4c <__aeabi_dmul+0x110>
   16d5a:	4658      	mov	r0, fp
   16d5c:	4220      	tst	r0, r4
   16d5e:	d107      	bne.n	16d70 <__aeabi_dmul+0x434>
   16d60:	4304      	orrs	r4, r0
   16d62:	9903      	ldr	r1, [sp, #12]
   16d64:	0324      	lsls	r4, r4, #12
   16d66:	0b24      	lsrs	r4, r4, #12
   16d68:	4689      	mov	r9, r1
   16d6a:	4690      	mov	r8, r2
   16d6c:	4b36      	ldr	r3, [pc, #216]	; (16e48 <__aeabi_dmul+0x50c>)
   16d6e:	e64a      	b.n	16a06 <__aeabi_dmul+0xca>
   16d70:	433c      	orrs	r4, r7
   16d72:	0324      	lsls	r4, r4, #12
   16d74:	0b24      	lsrs	r4, r4, #12
   16d76:	4b34      	ldr	r3, [pc, #208]	; (16e48 <__aeabi_dmul+0x50c>)
   16d78:	e645      	b.n	16a06 <__aeabi_dmul+0xca>
   16d7a:	4b34      	ldr	r3, [pc, #208]	; (16e4c <__aeabi_dmul+0x510>)
   16d7c:	9e04      	ldr	r6, [sp, #16]
   16d7e:	1b9b      	subs	r3, r3, r6
   16d80:	2b38      	cmp	r3, #56	; 0x38
   16d82:	dd06      	ble.n	16d92 <__aeabi_dmul+0x456>
   16d84:	2301      	movs	r3, #1
   16d86:	400b      	ands	r3, r1
   16d88:	2400      	movs	r4, #0
   16d8a:	4699      	mov	r9, r3
   16d8c:	46a0      	mov	r8, r4
   16d8e:	2300      	movs	r3, #0
   16d90:	e639      	b.n	16a06 <__aeabi_dmul+0xca>
   16d92:	2b1f      	cmp	r3, #31
   16d94:	dc25      	bgt.n	16de2 <__aeabi_dmul+0x4a6>
   16d96:	9c04      	ldr	r4, [sp, #16]
   16d98:	4d2d      	ldr	r5, [pc, #180]	; (16e50 <__aeabi_dmul+0x514>)
   16d9a:	4646      	mov	r6, r8
   16d9c:	1960      	adds	r0, r4, r5
   16d9e:	4652      	mov	r2, sl
   16da0:	4644      	mov	r4, r8
   16da2:	4086      	lsls	r6, r0
   16da4:	40dc      	lsrs	r4, r3
   16da6:	4082      	lsls	r2, r0
   16da8:	4657      	mov	r7, sl
   16daa:	1c30      	adds	r0, r6, #0
   16dac:	4322      	orrs	r2, r4
   16dae:	40df      	lsrs	r7, r3
   16db0:	1e44      	subs	r4, r0, #1
   16db2:	41a0      	sbcs	r0, r4
   16db4:	4302      	orrs	r2, r0
   16db6:	1c3b      	adds	r3, r7, #0
   16db8:	0754      	lsls	r4, r2, #29
   16dba:	d009      	beq.n	16dd0 <__aeabi_dmul+0x494>
   16dbc:	200f      	movs	r0, #15
   16dbe:	4010      	ands	r0, r2
   16dc0:	2804      	cmp	r0, #4
   16dc2:	d005      	beq.n	16dd0 <__aeabi_dmul+0x494>
   16dc4:	1d10      	adds	r0, r2, #4
   16dc6:	4290      	cmp	r0, r2
   16dc8:	4192      	sbcs	r2, r2
   16dca:	4252      	negs	r2, r2
   16dcc:	189b      	adds	r3, r3, r2
   16dce:	1c02      	adds	r2, r0, #0
   16dd0:	021d      	lsls	r5, r3, #8
   16dd2:	d51a      	bpl.n	16e0a <__aeabi_dmul+0x4ce>
   16dd4:	2301      	movs	r3, #1
   16dd6:	400b      	ands	r3, r1
   16dd8:	2400      	movs	r4, #0
   16dda:	4699      	mov	r9, r3
   16ddc:	46a0      	mov	r8, r4
   16dde:	2301      	movs	r3, #1
   16de0:	e611      	b.n	16a06 <__aeabi_dmul+0xca>
   16de2:	481c      	ldr	r0, [pc, #112]	; (16e54 <__aeabi_dmul+0x518>)
   16de4:	9c04      	ldr	r4, [sp, #16]
   16de6:	4655      	mov	r5, sl
   16de8:	1b00      	subs	r0, r0, r4
   16dea:	40c5      	lsrs	r5, r0
   16dec:	1c28      	adds	r0, r5, #0
   16dee:	2b20      	cmp	r3, #32
   16df0:	d016      	beq.n	16e20 <__aeabi_dmul+0x4e4>
   16df2:	4e19      	ldr	r6, [pc, #100]	; (16e58 <__aeabi_dmul+0x51c>)
   16df4:	4657      	mov	r7, sl
   16df6:	19a2      	adds	r2, r4, r6
   16df8:	4097      	lsls	r7, r2
   16dfa:	1c3a      	adds	r2, r7, #0
   16dfc:	4643      	mov	r3, r8
   16dfe:	431a      	orrs	r2, r3
   16e00:	1e53      	subs	r3, r2, #1
   16e02:	419a      	sbcs	r2, r3
   16e04:	4302      	orrs	r2, r0
   16e06:	2300      	movs	r3, #0
   16e08:	e7d6      	b.n	16db8 <__aeabi_dmul+0x47c>
   16e0a:	0758      	lsls	r0, r3, #29
   16e0c:	025b      	lsls	r3, r3, #9
   16e0e:	08d2      	lsrs	r2, r2, #3
   16e10:	0b1c      	lsrs	r4, r3, #12
   16e12:	2301      	movs	r3, #1
   16e14:	400b      	ands	r3, r1
   16e16:	4310      	orrs	r0, r2
   16e18:	4699      	mov	r9, r3
   16e1a:	4680      	mov	r8, r0
   16e1c:	2300      	movs	r3, #0
   16e1e:	e5f2      	b.n	16a06 <__aeabi_dmul+0xca>
   16e20:	2200      	movs	r2, #0
   16e22:	e7eb      	b.n	16dfc <__aeabi_dmul+0x4c0>
   16e24:	2480      	movs	r4, #128	; 0x80
   16e26:	0324      	lsls	r4, r4, #12
   16e28:	4650      	mov	r0, sl
   16e2a:	2301      	movs	r3, #1
   16e2c:	4304      	orrs	r4, r0
   16e2e:	4019      	ands	r1, r3
   16e30:	0324      	lsls	r4, r4, #12
   16e32:	0b24      	lsrs	r4, r4, #12
   16e34:	4689      	mov	r9, r1
   16e36:	4b04      	ldr	r3, [pc, #16]	; (16e48 <__aeabi_dmul+0x50c>)
   16e38:	e5e5      	b.n	16a06 <__aeabi_dmul+0xca>
   16e3a:	46c0      	nop			; (mov r8, r8)
   16e3c:	000003ff 	.word	0x000003ff
   16e40:	feffffff 	.word	0xfeffffff
   16e44:	000007fe 	.word	0x000007fe
   16e48:	000007ff 	.word	0x000007ff
   16e4c:	fffffc02 	.word	0xfffffc02
   16e50:	0000041e 	.word	0x0000041e
   16e54:	fffffbe2 	.word	0xfffffbe2
   16e58:	0000043e 	.word	0x0000043e

00016e5c <__aeabi_dsub>:
   16e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e5e:	465f      	mov	r7, fp
   16e60:	4656      	mov	r6, sl
   16e62:	4644      	mov	r4, r8
   16e64:	464d      	mov	r5, r9
   16e66:	b4f0      	push	{r4, r5, r6, r7}
   16e68:	030c      	lsls	r4, r1, #12
   16e6a:	004d      	lsls	r5, r1, #1
   16e6c:	0fcf      	lsrs	r7, r1, #31
   16e6e:	0a61      	lsrs	r1, r4, #9
   16e70:	0f44      	lsrs	r4, r0, #29
   16e72:	4321      	orrs	r1, r4
   16e74:	00c4      	lsls	r4, r0, #3
   16e76:	0318      	lsls	r0, r3, #12
   16e78:	0fde      	lsrs	r6, r3, #31
   16e7a:	4680      	mov	r8, r0
   16e7c:	46b4      	mov	ip, r6
   16e7e:	4646      	mov	r6, r8
   16e80:	0058      	lsls	r0, r3, #1
   16e82:	0a76      	lsrs	r6, r6, #9
   16e84:	0f53      	lsrs	r3, r2, #29
   16e86:	4333      	orrs	r3, r6
   16e88:	00d6      	lsls	r6, r2, #3
   16e8a:	4ad1      	ldr	r2, [pc, #836]	; (171d0 <__aeabi_dsub+0x374>)
   16e8c:	0d6d      	lsrs	r5, r5, #21
   16e8e:	46ba      	mov	sl, r7
   16e90:	0d40      	lsrs	r0, r0, #21
   16e92:	46b3      	mov	fp, r6
   16e94:	4290      	cmp	r0, r2
   16e96:	d100      	bne.n	16e9a <__aeabi_dsub+0x3e>
   16e98:	e0f5      	b.n	17086 <__aeabi_dsub+0x22a>
   16e9a:	4662      	mov	r2, ip
   16e9c:	2601      	movs	r6, #1
   16e9e:	4072      	eors	r2, r6
   16ea0:	4694      	mov	ip, r2
   16ea2:	4567      	cmp	r7, ip
   16ea4:	d100      	bne.n	16ea8 <__aeabi_dsub+0x4c>
   16ea6:	e0ab      	b.n	17000 <__aeabi_dsub+0x1a4>
   16ea8:	1a2f      	subs	r7, r5, r0
   16eaa:	2f00      	cmp	r7, #0
   16eac:	dc00      	bgt.n	16eb0 <__aeabi_dsub+0x54>
   16eae:	e111      	b.n	170d4 <__aeabi_dsub+0x278>
   16eb0:	2800      	cmp	r0, #0
   16eb2:	d13e      	bne.n	16f32 <__aeabi_dsub+0xd6>
   16eb4:	4658      	mov	r0, fp
   16eb6:	4318      	orrs	r0, r3
   16eb8:	d000      	beq.n	16ebc <__aeabi_dsub+0x60>
   16eba:	e0f1      	b.n	170a0 <__aeabi_dsub+0x244>
   16ebc:	0760      	lsls	r0, r4, #29
   16ebe:	d100      	bne.n	16ec2 <__aeabi_dsub+0x66>
   16ec0:	e097      	b.n	16ff2 <__aeabi_dsub+0x196>
   16ec2:	230f      	movs	r3, #15
   16ec4:	4023      	ands	r3, r4
   16ec6:	2b04      	cmp	r3, #4
   16ec8:	d100      	bne.n	16ecc <__aeabi_dsub+0x70>
   16eca:	e122      	b.n	17112 <__aeabi_dsub+0x2b6>
   16ecc:	1d22      	adds	r2, r4, #4
   16ece:	42a2      	cmp	r2, r4
   16ed0:	41a4      	sbcs	r4, r4
   16ed2:	4264      	negs	r4, r4
   16ed4:	2380      	movs	r3, #128	; 0x80
   16ed6:	1909      	adds	r1, r1, r4
   16ed8:	041b      	lsls	r3, r3, #16
   16eda:	2701      	movs	r7, #1
   16edc:	4650      	mov	r0, sl
   16ede:	400b      	ands	r3, r1
   16ee0:	4007      	ands	r7, r0
   16ee2:	1c14      	adds	r4, r2, #0
   16ee4:	2b00      	cmp	r3, #0
   16ee6:	d100      	bne.n	16eea <__aeabi_dsub+0x8e>
   16ee8:	e079      	b.n	16fde <__aeabi_dsub+0x182>
   16eea:	4bb9      	ldr	r3, [pc, #740]	; (171d0 <__aeabi_dsub+0x374>)
   16eec:	3501      	adds	r5, #1
   16eee:	429d      	cmp	r5, r3
   16ef0:	d100      	bne.n	16ef4 <__aeabi_dsub+0x98>
   16ef2:	e10b      	b.n	1710c <__aeabi_dsub+0x2b0>
   16ef4:	4bb7      	ldr	r3, [pc, #732]	; (171d4 <__aeabi_dsub+0x378>)
   16ef6:	08e4      	lsrs	r4, r4, #3
   16ef8:	4019      	ands	r1, r3
   16efa:	0748      	lsls	r0, r1, #29
   16efc:	0249      	lsls	r1, r1, #9
   16efe:	4304      	orrs	r4, r0
   16f00:	0b0b      	lsrs	r3, r1, #12
   16f02:	2000      	movs	r0, #0
   16f04:	2100      	movs	r1, #0
   16f06:	031b      	lsls	r3, r3, #12
   16f08:	0b1a      	lsrs	r2, r3, #12
   16f0a:	0d0b      	lsrs	r3, r1, #20
   16f0c:	056d      	lsls	r5, r5, #21
   16f0e:	051b      	lsls	r3, r3, #20
   16f10:	4313      	orrs	r3, r2
   16f12:	086a      	lsrs	r2, r5, #1
   16f14:	4db0      	ldr	r5, [pc, #704]	; (171d8 <__aeabi_dsub+0x37c>)
   16f16:	07ff      	lsls	r7, r7, #31
   16f18:	401d      	ands	r5, r3
   16f1a:	4315      	orrs	r5, r2
   16f1c:	006d      	lsls	r5, r5, #1
   16f1e:	086d      	lsrs	r5, r5, #1
   16f20:	1c29      	adds	r1, r5, #0
   16f22:	4339      	orrs	r1, r7
   16f24:	1c20      	adds	r0, r4, #0
   16f26:	bc3c      	pop	{r2, r3, r4, r5}
   16f28:	4690      	mov	r8, r2
   16f2a:	4699      	mov	r9, r3
   16f2c:	46a2      	mov	sl, r4
   16f2e:	46ab      	mov	fp, r5
   16f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f32:	48a7      	ldr	r0, [pc, #668]	; (171d0 <__aeabi_dsub+0x374>)
   16f34:	4285      	cmp	r5, r0
   16f36:	d0c1      	beq.n	16ebc <__aeabi_dsub+0x60>
   16f38:	2080      	movs	r0, #128	; 0x80
   16f3a:	0400      	lsls	r0, r0, #16
   16f3c:	4303      	orrs	r3, r0
   16f3e:	2f38      	cmp	r7, #56	; 0x38
   16f40:	dd00      	ble.n	16f44 <__aeabi_dsub+0xe8>
   16f42:	e0fd      	b.n	17140 <__aeabi_dsub+0x2e4>
   16f44:	2f1f      	cmp	r7, #31
   16f46:	dd00      	ble.n	16f4a <__aeabi_dsub+0xee>
   16f48:	e131      	b.n	171ae <__aeabi_dsub+0x352>
   16f4a:	2020      	movs	r0, #32
   16f4c:	1bc0      	subs	r0, r0, r7
   16f4e:	1c1a      	adds	r2, r3, #0
   16f50:	465e      	mov	r6, fp
   16f52:	4082      	lsls	r2, r0
   16f54:	40fe      	lsrs	r6, r7
   16f56:	4332      	orrs	r2, r6
   16f58:	4694      	mov	ip, r2
   16f5a:	465a      	mov	r2, fp
   16f5c:	4082      	lsls	r2, r0
   16f5e:	1c10      	adds	r0, r2, #0
   16f60:	1e42      	subs	r2, r0, #1
   16f62:	4190      	sbcs	r0, r2
   16f64:	40fb      	lsrs	r3, r7
   16f66:	4662      	mov	r2, ip
   16f68:	4302      	orrs	r2, r0
   16f6a:	1c1f      	adds	r7, r3, #0
   16f6c:	1aa2      	subs	r2, r4, r2
   16f6e:	4294      	cmp	r4, r2
   16f70:	41a4      	sbcs	r4, r4
   16f72:	4264      	negs	r4, r4
   16f74:	1bc9      	subs	r1, r1, r7
   16f76:	1b09      	subs	r1, r1, r4
   16f78:	1c14      	adds	r4, r2, #0
   16f7a:	020a      	lsls	r2, r1, #8
   16f7c:	d59e      	bpl.n	16ebc <__aeabi_dsub+0x60>
   16f7e:	0249      	lsls	r1, r1, #9
   16f80:	0a4f      	lsrs	r7, r1, #9
   16f82:	2f00      	cmp	r7, #0
   16f84:	d100      	bne.n	16f88 <__aeabi_dsub+0x12c>
   16f86:	e0d6      	b.n	17136 <__aeabi_dsub+0x2da>
   16f88:	1c38      	adds	r0, r7, #0
   16f8a:	f000 fb41 	bl	17610 <__clzsi2>
   16f8e:	1c02      	adds	r2, r0, #0
   16f90:	3a08      	subs	r2, #8
   16f92:	2a1f      	cmp	r2, #31
   16f94:	dd00      	ble.n	16f98 <__aeabi_dsub+0x13c>
   16f96:	e0c3      	b.n	17120 <__aeabi_dsub+0x2c4>
   16f98:	2128      	movs	r1, #40	; 0x28
   16f9a:	1c23      	adds	r3, r4, #0
   16f9c:	1a09      	subs	r1, r1, r0
   16f9e:	4097      	lsls	r7, r2
   16fa0:	40cb      	lsrs	r3, r1
   16fa2:	431f      	orrs	r7, r3
   16fa4:	4094      	lsls	r4, r2
   16fa6:	4295      	cmp	r5, r2
   16fa8:	dd00      	ble.n	16fac <__aeabi_dsub+0x150>
   16faa:	e0c0      	b.n	1712e <__aeabi_dsub+0x2d2>
   16fac:	1b55      	subs	r5, r2, r5
   16fae:	1c69      	adds	r1, r5, #1
   16fb0:	291f      	cmp	r1, #31
   16fb2:	dd00      	ble.n	16fb6 <__aeabi_dsub+0x15a>
   16fb4:	e0ea      	b.n	1718c <__aeabi_dsub+0x330>
   16fb6:	221f      	movs	r2, #31
   16fb8:	1b55      	subs	r5, r2, r5
   16fba:	1c3b      	adds	r3, r7, #0
   16fbc:	1c22      	adds	r2, r4, #0
   16fbe:	40ab      	lsls	r3, r5
   16fc0:	40ca      	lsrs	r2, r1
   16fc2:	40ac      	lsls	r4, r5
   16fc4:	1e65      	subs	r5, r4, #1
   16fc6:	41ac      	sbcs	r4, r5
   16fc8:	4313      	orrs	r3, r2
   16fca:	40cf      	lsrs	r7, r1
   16fcc:	431c      	orrs	r4, r3
   16fce:	1c39      	adds	r1, r7, #0
   16fd0:	2500      	movs	r5, #0
   16fd2:	e773      	b.n	16ebc <__aeabi_dsub+0x60>
   16fd4:	2180      	movs	r1, #128	; 0x80
   16fd6:	4d7e      	ldr	r5, [pc, #504]	; (171d0 <__aeabi_dsub+0x374>)
   16fd8:	2700      	movs	r7, #0
   16fda:	03c9      	lsls	r1, r1, #15
   16fdc:	2400      	movs	r4, #0
   16fde:	4b7c      	ldr	r3, [pc, #496]	; (171d0 <__aeabi_dsub+0x374>)
   16fe0:	0748      	lsls	r0, r1, #29
   16fe2:	08e4      	lsrs	r4, r4, #3
   16fe4:	4304      	orrs	r4, r0
   16fe6:	08c9      	lsrs	r1, r1, #3
   16fe8:	429d      	cmp	r5, r3
   16fea:	d050      	beq.n	1708e <__aeabi_dsub+0x232>
   16fec:	0309      	lsls	r1, r1, #12
   16fee:	0b0b      	lsrs	r3, r1, #12
   16ff0:	e787      	b.n	16f02 <__aeabi_dsub+0xa6>
   16ff2:	2380      	movs	r3, #128	; 0x80
   16ff4:	041b      	lsls	r3, r3, #16
   16ff6:	2701      	movs	r7, #1
   16ff8:	4652      	mov	r2, sl
   16ffa:	400b      	ands	r3, r1
   16ffc:	4017      	ands	r7, r2
   16ffe:	e771      	b.n	16ee4 <__aeabi_dsub+0x88>
   17000:	1a2a      	subs	r2, r5, r0
   17002:	4694      	mov	ip, r2
   17004:	2a00      	cmp	r2, #0
   17006:	dc00      	bgt.n	1700a <__aeabi_dsub+0x1ae>
   17008:	e0a1      	b.n	1714e <__aeabi_dsub+0x2f2>
   1700a:	2800      	cmp	r0, #0
   1700c:	d054      	beq.n	170b8 <__aeabi_dsub+0x25c>
   1700e:	4870      	ldr	r0, [pc, #448]	; (171d0 <__aeabi_dsub+0x374>)
   17010:	4285      	cmp	r5, r0
   17012:	d100      	bne.n	17016 <__aeabi_dsub+0x1ba>
   17014:	e752      	b.n	16ebc <__aeabi_dsub+0x60>
   17016:	2080      	movs	r0, #128	; 0x80
   17018:	0400      	lsls	r0, r0, #16
   1701a:	4303      	orrs	r3, r0
   1701c:	4660      	mov	r0, ip
   1701e:	2838      	cmp	r0, #56	; 0x38
   17020:	dd00      	ble.n	17024 <__aeabi_dsub+0x1c8>
   17022:	e10e      	b.n	17242 <__aeabi_dsub+0x3e6>
   17024:	281f      	cmp	r0, #31
   17026:	dd00      	ble.n	1702a <__aeabi_dsub+0x1ce>
   17028:	e157      	b.n	172da <__aeabi_dsub+0x47e>
   1702a:	4662      	mov	r2, ip
   1702c:	2020      	movs	r0, #32
   1702e:	1a80      	subs	r0, r0, r2
   17030:	1c1e      	adds	r6, r3, #0
   17032:	4086      	lsls	r6, r0
   17034:	46b1      	mov	r9, r6
   17036:	465e      	mov	r6, fp
   17038:	40d6      	lsrs	r6, r2
   1703a:	464a      	mov	r2, r9
   1703c:	4332      	orrs	r2, r6
   1703e:	465e      	mov	r6, fp
   17040:	4086      	lsls	r6, r0
   17042:	4690      	mov	r8, r2
   17044:	1c30      	adds	r0, r6, #0
   17046:	1e42      	subs	r2, r0, #1
   17048:	4190      	sbcs	r0, r2
   1704a:	4642      	mov	r2, r8
   1704c:	4302      	orrs	r2, r0
   1704e:	4660      	mov	r0, ip
   17050:	40c3      	lsrs	r3, r0
   17052:	1912      	adds	r2, r2, r4
   17054:	42a2      	cmp	r2, r4
   17056:	41a4      	sbcs	r4, r4
   17058:	4264      	negs	r4, r4
   1705a:	1859      	adds	r1, r3, r1
   1705c:	1909      	adds	r1, r1, r4
   1705e:	1c14      	adds	r4, r2, #0
   17060:	0208      	lsls	r0, r1, #8
   17062:	d400      	bmi.n	17066 <__aeabi_dsub+0x20a>
   17064:	e72a      	b.n	16ebc <__aeabi_dsub+0x60>
   17066:	4b5a      	ldr	r3, [pc, #360]	; (171d0 <__aeabi_dsub+0x374>)
   17068:	3501      	adds	r5, #1
   1706a:	429d      	cmp	r5, r3
   1706c:	d100      	bne.n	17070 <__aeabi_dsub+0x214>
   1706e:	e131      	b.n	172d4 <__aeabi_dsub+0x478>
   17070:	4b58      	ldr	r3, [pc, #352]	; (171d4 <__aeabi_dsub+0x378>)
   17072:	0860      	lsrs	r0, r4, #1
   17074:	4019      	ands	r1, r3
   17076:	2301      	movs	r3, #1
   17078:	4023      	ands	r3, r4
   1707a:	1c1c      	adds	r4, r3, #0
   1707c:	4304      	orrs	r4, r0
   1707e:	07cb      	lsls	r3, r1, #31
   17080:	431c      	orrs	r4, r3
   17082:	0849      	lsrs	r1, r1, #1
   17084:	e71a      	b.n	16ebc <__aeabi_dsub+0x60>
   17086:	431e      	orrs	r6, r3
   17088:	d000      	beq.n	1708c <__aeabi_dsub+0x230>
   1708a:	e70a      	b.n	16ea2 <__aeabi_dsub+0x46>
   1708c:	e705      	b.n	16e9a <__aeabi_dsub+0x3e>
   1708e:	1c23      	adds	r3, r4, #0
   17090:	430b      	orrs	r3, r1
   17092:	d03b      	beq.n	1710c <__aeabi_dsub+0x2b0>
   17094:	2380      	movs	r3, #128	; 0x80
   17096:	031b      	lsls	r3, r3, #12
   17098:	430b      	orrs	r3, r1
   1709a:	031b      	lsls	r3, r3, #12
   1709c:	0b1b      	lsrs	r3, r3, #12
   1709e:	e730      	b.n	16f02 <__aeabi_dsub+0xa6>
   170a0:	3f01      	subs	r7, #1
   170a2:	2f00      	cmp	r7, #0
   170a4:	d16d      	bne.n	17182 <__aeabi_dsub+0x326>
   170a6:	465e      	mov	r6, fp
   170a8:	1ba2      	subs	r2, r4, r6
   170aa:	4294      	cmp	r4, r2
   170ac:	41a4      	sbcs	r4, r4
   170ae:	4264      	negs	r4, r4
   170b0:	1ac9      	subs	r1, r1, r3
   170b2:	1b09      	subs	r1, r1, r4
   170b4:	1c14      	adds	r4, r2, #0
   170b6:	e760      	b.n	16f7a <__aeabi_dsub+0x11e>
   170b8:	4658      	mov	r0, fp
   170ba:	4318      	orrs	r0, r3
   170bc:	d100      	bne.n	170c0 <__aeabi_dsub+0x264>
   170be:	e6fd      	b.n	16ebc <__aeabi_dsub+0x60>
   170c0:	2601      	movs	r6, #1
   170c2:	4276      	negs	r6, r6
   170c4:	44b4      	add	ip, r6
   170c6:	4660      	mov	r0, ip
   170c8:	2800      	cmp	r0, #0
   170ca:	d000      	beq.n	170ce <__aeabi_dsub+0x272>
   170cc:	e0d0      	b.n	17270 <__aeabi_dsub+0x414>
   170ce:	465e      	mov	r6, fp
   170d0:	1932      	adds	r2, r6, r4
   170d2:	e7bf      	b.n	17054 <__aeabi_dsub+0x1f8>
   170d4:	2f00      	cmp	r7, #0
   170d6:	d000      	beq.n	170da <__aeabi_dsub+0x27e>
   170d8:	e080      	b.n	171dc <__aeabi_dsub+0x380>
   170da:	1c68      	adds	r0, r5, #1
   170dc:	0540      	lsls	r0, r0, #21
   170de:	0d40      	lsrs	r0, r0, #21
   170e0:	2801      	cmp	r0, #1
   170e2:	dc00      	bgt.n	170e6 <__aeabi_dsub+0x28a>
   170e4:	e0e8      	b.n	172b8 <__aeabi_dsub+0x45c>
   170e6:	465a      	mov	r2, fp
   170e8:	1aa2      	subs	r2, r4, r2
   170ea:	4294      	cmp	r4, r2
   170ec:	41bf      	sbcs	r7, r7
   170ee:	1ac8      	subs	r0, r1, r3
   170f0:	427f      	negs	r7, r7
   170f2:	1bc7      	subs	r7, r0, r7
   170f4:	023e      	lsls	r6, r7, #8
   170f6:	d400      	bmi.n	170fa <__aeabi_dsub+0x29e>
   170f8:	e098      	b.n	1722c <__aeabi_dsub+0x3d0>
   170fa:	4658      	mov	r0, fp
   170fc:	1b04      	subs	r4, r0, r4
   170fe:	45a3      	cmp	fp, r4
   17100:	4192      	sbcs	r2, r2
   17102:	1a59      	subs	r1, r3, r1
   17104:	4252      	negs	r2, r2
   17106:	1a8f      	subs	r7, r1, r2
   17108:	46e2      	mov	sl, ip
   1710a:	e73a      	b.n	16f82 <__aeabi_dsub+0x126>
   1710c:	2300      	movs	r3, #0
   1710e:	2400      	movs	r4, #0
   17110:	e6f7      	b.n	16f02 <__aeabi_dsub+0xa6>
   17112:	2380      	movs	r3, #128	; 0x80
   17114:	041b      	lsls	r3, r3, #16
   17116:	2701      	movs	r7, #1
   17118:	4656      	mov	r6, sl
   1711a:	400b      	ands	r3, r1
   1711c:	4037      	ands	r7, r6
   1711e:	e6e1      	b.n	16ee4 <__aeabi_dsub+0x88>
   17120:	1c27      	adds	r7, r4, #0
   17122:	3828      	subs	r0, #40	; 0x28
   17124:	4087      	lsls	r7, r0
   17126:	2400      	movs	r4, #0
   17128:	4295      	cmp	r5, r2
   1712a:	dc00      	bgt.n	1712e <__aeabi_dsub+0x2d2>
   1712c:	e73e      	b.n	16fac <__aeabi_dsub+0x150>
   1712e:	4929      	ldr	r1, [pc, #164]	; (171d4 <__aeabi_dsub+0x378>)
   17130:	1aad      	subs	r5, r5, r2
   17132:	4039      	ands	r1, r7
   17134:	e6c2      	b.n	16ebc <__aeabi_dsub+0x60>
   17136:	1c20      	adds	r0, r4, #0
   17138:	f000 fa6a 	bl	17610 <__clzsi2>
   1713c:	3020      	adds	r0, #32
   1713e:	e726      	b.n	16f8e <__aeabi_dsub+0x132>
   17140:	465a      	mov	r2, fp
   17142:	431a      	orrs	r2, r3
   17144:	1e53      	subs	r3, r2, #1
   17146:	419a      	sbcs	r2, r3
   17148:	b2d2      	uxtb	r2, r2
   1714a:	2700      	movs	r7, #0
   1714c:	e70e      	b.n	16f6c <__aeabi_dsub+0x110>
   1714e:	2a00      	cmp	r2, #0
   17150:	d000      	beq.n	17154 <__aeabi_dsub+0x2f8>
   17152:	e0de      	b.n	17312 <__aeabi_dsub+0x4b6>
   17154:	1c68      	adds	r0, r5, #1
   17156:	0546      	lsls	r6, r0, #21
   17158:	0d76      	lsrs	r6, r6, #21
   1715a:	2e01      	cmp	r6, #1
   1715c:	dc00      	bgt.n	17160 <__aeabi_dsub+0x304>
   1715e:	e090      	b.n	17282 <__aeabi_dsub+0x426>
   17160:	4d1b      	ldr	r5, [pc, #108]	; (171d0 <__aeabi_dsub+0x374>)
   17162:	42a8      	cmp	r0, r5
   17164:	d100      	bne.n	17168 <__aeabi_dsub+0x30c>
   17166:	e0f5      	b.n	17354 <__aeabi_dsub+0x4f8>
   17168:	465e      	mov	r6, fp
   1716a:	1932      	adds	r2, r6, r4
   1716c:	42a2      	cmp	r2, r4
   1716e:	41a4      	sbcs	r4, r4
   17170:	4264      	negs	r4, r4
   17172:	1859      	adds	r1, r3, r1
   17174:	1909      	adds	r1, r1, r4
   17176:	07cc      	lsls	r4, r1, #31
   17178:	0852      	lsrs	r2, r2, #1
   1717a:	4314      	orrs	r4, r2
   1717c:	0849      	lsrs	r1, r1, #1
   1717e:	1c05      	adds	r5, r0, #0
   17180:	e69c      	b.n	16ebc <__aeabi_dsub+0x60>
   17182:	4813      	ldr	r0, [pc, #76]	; (171d0 <__aeabi_dsub+0x374>)
   17184:	4285      	cmp	r5, r0
   17186:	d000      	beq.n	1718a <__aeabi_dsub+0x32e>
   17188:	e6d9      	b.n	16f3e <__aeabi_dsub+0xe2>
   1718a:	e697      	b.n	16ebc <__aeabi_dsub+0x60>
   1718c:	1c2b      	adds	r3, r5, #0
   1718e:	3b1f      	subs	r3, #31
   17190:	1c3e      	adds	r6, r7, #0
   17192:	40de      	lsrs	r6, r3
   17194:	1c33      	adds	r3, r6, #0
   17196:	2920      	cmp	r1, #32
   17198:	d06f      	beq.n	1727a <__aeabi_dsub+0x41e>
   1719a:	223f      	movs	r2, #63	; 0x3f
   1719c:	1b55      	subs	r5, r2, r5
   1719e:	40af      	lsls	r7, r5
   171a0:	433c      	orrs	r4, r7
   171a2:	1e60      	subs	r0, r4, #1
   171a4:	4184      	sbcs	r4, r0
   171a6:	431c      	orrs	r4, r3
   171a8:	2100      	movs	r1, #0
   171aa:	2500      	movs	r5, #0
   171ac:	e686      	b.n	16ebc <__aeabi_dsub+0x60>
   171ae:	1c38      	adds	r0, r7, #0
   171b0:	3820      	subs	r0, #32
   171b2:	1c1e      	adds	r6, r3, #0
   171b4:	40c6      	lsrs	r6, r0
   171b6:	1c30      	adds	r0, r6, #0
   171b8:	2f20      	cmp	r7, #32
   171ba:	d060      	beq.n	1727e <__aeabi_dsub+0x422>
   171bc:	2240      	movs	r2, #64	; 0x40
   171be:	1bd7      	subs	r7, r2, r7
   171c0:	40bb      	lsls	r3, r7
   171c2:	465a      	mov	r2, fp
   171c4:	431a      	orrs	r2, r3
   171c6:	1e53      	subs	r3, r2, #1
   171c8:	419a      	sbcs	r2, r3
   171ca:	4302      	orrs	r2, r0
   171cc:	2700      	movs	r7, #0
   171ce:	e6cd      	b.n	16f6c <__aeabi_dsub+0x110>
   171d0:	000007ff 	.word	0x000007ff
   171d4:	ff7fffff 	.word	0xff7fffff
   171d8:	800fffff 	.word	0x800fffff
   171dc:	2d00      	cmp	r5, #0
   171de:	d037      	beq.n	17250 <__aeabi_dsub+0x3f4>
   171e0:	4db6      	ldr	r5, [pc, #728]	; (174bc <__aeabi_dsub+0x660>)
   171e2:	42a8      	cmp	r0, r5
   171e4:	d100      	bne.n	171e8 <__aeabi_dsub+0x38c>
   171e6:	e08f      	b.n	17308 <__aeabi_dsub+0x4ac>
   171e8:	2580      	movs	r5, #128	; 0x80
   171ea:	042d      	lsls	r5, r5, #16
   171ec:	427f      	negs	r7, r7
   171ee:	4329      	orrs	r1, r5
   171f0:	2f38      	cmp	r7, #56	; 0x38
   171f2:	dd00      	ble.n	171f6 <__aeabi_dsub+0x39a>
   171f4:	e0a8      	b.n	17348 <__aeabi_dsub+0x4ec>
   171f6:	2f1f      	cmp	r7, #31
   171f8:	dd00      	ble.n	171fc <__aeabi_dsub+0x3a0>
   171fa:	e124      	b.n	17446 <__aeabi_dsub+0x5ea>
   171fc:	2520      	movs	r5, #32
   171fe:	1bed      	subs	r5, r5, r7
   17200:	1c0e      	adds	r6, r1, #0
   17202:	40ae      	lsls	r6, r5
   17204:	46b0      	mov	r8, r6
   17206:	1c26      	adds	r6, r4, #0
   17208:	40fe      	lsrs	r6, r7
   1720a:	4642      	mov	r2, r8
   1720c:	40ac      	lsls	r4, r5
   1720e:	4316      	orrs	r6, r2
   17210:	1e65      	subs	r5, r4, #1
   17212:	41ac      	sbcs	r4, r5
   17214:	4334      	orrs	r4, r6
   17216:	40f9      	lsrs	r1, r7
   17218:	465a      	mov	r2, fp
   1721a:	1b14      	subs	r4, r2, r4
   1721c:	45a3      	cmp	fp, r4
   1721e:	4192      	sbcs	r2, r2
   17220:	1a5b      	subs	r3, r3, r1
   17222:	4252      	negs	r2, r2
   17224:	1a99      	subs	r1, r3, r2
   17226:	1c05      	adds	r5, r0, #0
   17228:	46e2      	mov	sl, ip
   1722a:	e6a6      	b.n	16f7a <__aeabi_dsub+0x11e>
   1722c:	1c13      	adds	r3, r2, #0
   1722e:	433b      	orrs	r3, r7
   17230:	1c14      	adds	r4, r2, #0
   17232:	2b00      	cmp	r3, #0
   17234:	d000      	beq.n	17238 <__aeabi_dsub+0x3dc>
   17236:	e6a4      	b.n	16f82 <__aeabi_dsub+0x126>
   17238:	2700      	movs	r7, #0
   1723a:	2100      	movs	r1, #0
   1723c:	2500      	movs	r5, #0
   1723e:	2400      	movs	r4, #0
   17240:	e6cd      	b.n	16fde <__aeabi_dsub+0x182>
   17242:	465a      	mov	r2, fp
   17244:	431a      	orrs	r2, r3
   17246:	1e53      	subs	r3, r2, #1
   17248:	419a      	sbcs	r2, r3
   1724a:	b2d2      	uxtb	r2, r2
   1724c:	2300      	movs	r3, #0
   1724e:	e700      	b.n	17052 <__aeabi_dsub+0x1f6>
   17250:	1c0d      	adds	r5, r1, #0
   17252:	4325      	orrs	r5, r4
   17254:	d058      	beq.n	17308 <__aeabi_dsub+0x4ac>
   17256:	43ff      	mvns	r7, r7
   17258:	2f00      	cmp	r7, #0
   1725a:	d151      	bne.n	17300 <__aeabi_dsub+0x4a4>
   1725c:	465a      	mov	r2, fp
   1725e:	1b14      	subs	r4, r2, r4
   17260:	45a3      	cmp	fp, r4
   17262:	4192      	sbcs	r2, r2
   17264:	1a59      	subs	r1, r3, r1
   17266:	4252      	negs	r2, r2
   17268:	1a89      	subs	r1, r1, r2
   1726a:	1c05      	adds	r5, r0, #0
   1726c:	46e2      	mov	sl, ip
   1726e:	e684      	b.n	16f7a <__aeabi_dsub+0x11e>
   17270:	4892      	ldr	r0, [pc, #584]	; (174bc <__aeabi_dsub+0x660>)
   17272:	4285      	cmp	r5, r0
   17274:	d000      	beq.n	17278 <__aeabi_dsub+0x41c>
   17276:	e6d1      	b.n	1701c <__aeabi_dsub+0x1c0>
   17278:	e620      	b.n	16ebc <__aeabi_dsub+0x60>
   1727a:	2700      	movs	r7, #0
   1727c:	e790      	b.n	171a0 <__aeabi_dsub+0x344>
   1727e:	2300      	movs	r3, #0
   17280:	e79f      	b.n	171c2 <__aeabi_dsub+0x366>
   17282:	1c08      	adds	r0, r1, #0
   17284:	4320      	orrs	r0, r4
   17286:	2d00      	cmp	r5, #0
   17288:	d000      	beq.n	1728c <__aeabi_dsub+0x430>
   1728a:	e0c2      	b.n	17412 <__aeabi_dsub+0x5b6>
   1728c:	2800      	cmp	r0, #0
   1728e:	d100      	bne.n	17292 <__aeabi_dsub+0x436>
   17290:	e0ef      	b.n	17472 <__aeabi_dsub+0x616>
   17292:	4658      	mov	r0, fp
   17294:	4318      	orrs	r0, r3
   17296:	d100      	bne.n	1729a <__aeabi_dsub+0x43e>
   17298:	e610      	b.n	16ebc <__aeabi_dsub+0x60>
   1729a:	4658      	mov	r0, fp
   1729c:	1902      	adds	r2, r0, r4
   1729e:	42a2      	cmp	r2, r4
   172a0:	41a4      	sbcs	r4, r4
   172a2:	4264      	negs	r4, r4
   172a4:	1859      	adds	r1, r3, r1
   172a6:	1909      	adds	r1, r1, r4
   172a8:	1c14      	adds	r4, r2, #0
   172aa:	020a      	lsls	r2, r1, #8
   172ac:	d400      	bmi.n	172b0 <__aeabi_dsub+0x454>
   172ae:	e605      	b.n	16ebc <__aeabi_dsub+0x60>
   172b0:	4b83      	ldr	r3, [pc, #524]	; (174c0 <__aeabi_dsub+0x664>)
   172b2:	2501      	movs	r5, #1
   172b4:	4019      	ands	r1, r3
   172b6:	e601      	b.n	16ebc <__aeabi_dsub+0x60>
   172b8:	1c08      	adds	r0, r1, #0
   172ba:	4320      	orrs	r0, r4
   172bc:	2d00      	cmp	r5, #0
   172be:	d138      	bne.n	17332 <__aeabi_dsub+0x4d6>
   172c0:	2800      	cmp	r0, #0
   172c2:	d16f      	bne.n	173a4 <__aeabi_dsub+0x548>
   172c4:	4659      	mov	r1, fp
   172c6:	4319      	orrs	r1, r3
   172c8:	d003      	beq.n	172d2 <__aeabi_dsub+0x476>
   172ca:	1c19      	adds	r1, r3, #0
   172cc:	465c      	mov	r4, fp
   172ce:	46e2      	mov	sl, ip
   172d0:	e5f4      	b.n	16ebc <__aeabi_dsub+0x60>
   172d2:	2700      	movs	r7, #0
   172d4:	2100      	movs	r1, #0
   172d6:	2400      	movs	r4, #0
   172d8:	e681      	b.n	16fde <__aeabi_dsub+0x182>
   172da:	4660      	mov	r0, ip
   172dc:	3820      	subs	r0, #32
   172de:	1c1a      	adds	r2, r3, #0
   172e0:	40c2      	lsrs	r2, r0
   172e2:	4666      	mov	r6, ip
   172e4:	1c10      	adds	r0, r2, #0
   172e6:	2e20      	cmp	r6, #32
   172e8:	d100      	bne.n	172ec <__aeabi_dsub+0x490>
   172ea:	e0aa      	b.n	17442 <__aeabi_dsub+0x5e6>
   172ec:	2240      	movs	r2, #64	; 0x40
   172ee:	1b92      	subs	r2, r2, r6
   172f0:	4093      	lsls	r3, r2
   172f2:	465a      	mov	r2, fp
   172f4:	431a      	orrs	r2, r3
   172f6:	1e53      	subs	r3, r2, #1
   172f8:	419a      	sbcs	r2, r3
   172fa:	4302      	orrs	r2, r0
   172fc:	2300      	movs	r3, #0
   172fe:	e6a8      	b.n	17052 <__aeabi_dsub+0x1f6>
   17300:	4d6e      	ldr	r5, [pc, #440]	; (174bc <__aeabi_dsub+0x660>)
   17302:	42a8      	cmp	r0, r5
   17304:	d000      	beq.n	17308 <__aeabi_dsub+0x4ac>
   17306:	e773      	b.n	171f0 <__aeabi_dsub+0x394>
   17308:	1c19      	adds	r1, r3, #0
   1730a:	465c      	mov	r4, fp
   1730c:	1c05      	adds	r5, r0, #0
   1730e:	46e2      	mov	sl, ip
   17310:	e5d4      	b.n	16ebc <__aeabi_dsub+0x60>
   17312:	2d00      	cmp	r5, #0
   17314:	d122      	bne.n	1735c <__aeabi_dsub+0x500>
   17316:	1c0d      	adds	r5, r1, #0
   17318:	4325      	orrs	r5, r4
   1731a:	d076      	beq.n	1740a <__aeabi_dsub+0x5ae>
   1731c:	43d5      	mvns	r5, r2
   1731e:	2d00      	cmp	r5, #0
   17320:	d170      	bne.n	17404 <__aeabi_dsub+0x5a8>
   17322:	445c      	add	r4, fp
   17324:	455c      	cmp	r4, fp
   17326:	4192      	sbcs	r2, r2
   17328:	1859      	adds	r1, r3, r1
   1732a:	4252      	negs	r2, r2
   1732c:	1889      	adds	r1, r1, r2
   1732e:	1c05      	adds	r5, r0, #0
   17330:	e696      	b.n	17060 <__aeabi_dsub+0x204>
   17332:	2800      	cmp	r0, #0
   17334:	d14c      	bne.n	173d0 <__aeabi_dsub+0x574>
   17336:	4659      	mov	r1, fp
   17338:	4319      	orrs	r1, r3
   1733a:	d100      	bne.n	1733e <__aeabi_dsub+0x4e2>
   1733c:	e64a      	b.n	16fd4 <__aeabi_dsub+0x178>
   1733e:	1c19      	adds	r1, r3, #0
   17340:	465c      	mov	r4, fp
   17342:	46e2      	mov	sl, ip
   17344:	4d5d      	ldr	r5, [pc, #372]	; (174bc <__aeabi_dsub+0x660>)
   17346:	e5b9      	b.n	16ebc <__aeabi_dsub+0x60>
   17348:	430c      	orrs	r4, r1
   1734a:	1e61      	subs	r1, r4, #1
   1734c:	418c      	sbcs	r4, r1
   1734e:	b2e4      	uxtb	r4, r4
   17350:	2100      	movs	r1, #0
   17352:	e761      	b.n	17218 <__aeabi_dsub+0x3bc>
   17354:	1c05      	adds	r5, r0, #0
   17356:	2100      	movs	r1, #0
   17358:	2400      	movs	r4, #0
   1735a:	e640      	b.n	16fde <__aeabi_dsub+0x182>
   1735c:	4d57      	ldr	r5, [pc, #348]	; (174bc <__aeabi_dsub+0x660>)
   1735e:	42a8      	cmp	r0, r5
   17360:	d053      	beq.n	1740a <__aeabi_dsub+0x5ae>
   17362:	4255      	negs	r5, r2
   17364:	2280      	movs	r2, #128	; 0x80
   17366:	0416      	lsls	r6, r2, #16
   17368:	4331      	orrs	r1, r6
   1736a:	2d38      	cmp	r5, #56	; 0x38
   1736c:	dc7b      	bgt.n	17466 <__aeabi_dsub+0x60a>
   1736e:	2d1f      	cmp	r5, #31
   17370:	dd00      	ble.n	17374 <__aeabi_dsub+0x518>
   17372:	e08c      	b.n	1748e <__aeabi_dsub+0x632>
   17374:	2220      	movs	r2, #32
   17376:	1b56      	subs	r6, r2, r5
   17378:	1c0a      	adds	r2, r1, #0
   1737a:	46b4      	mov	ip, r6
   1737c:	40b2      	lsls	r2, r6
   1737e:	1c26      	adds	r6, r4, #0
   17380:	40ee      	lsrs	r6, r5
   17382:	4332      	orrs	r2, r6
   17384:	4690      	mov	r8, r2
   17386:	4662      	mov	r2, ip
   17388:	4094      	lsls	r4, r2
   1738a:	1e66      	subs	r6, r4, #1
   1738c:	41b4      	sbcs	r4, r6
   1738e:	4642      	mov	r2, r8
   17390:	4314      	orrs	r4, r2
   17392:	40e9      	lsrs	r1, r5
   17394:	445c      	add	r4, fp
   17396:	455c      	cmp	r4, fp
   17398:	4192      	sbcs	r2, r2
   1739a:	18cb      	adds	r3, r1, r3
   1739c:	4252      	negs	r2, r2
   1739e:	1899      	adds	r1, r3, r2
   173a0:	1c05      	adds	r5, r0, #0
   173a2:	e65d      	b.n	17060 <__aeabi_dsub+0x204>
   173a4:	4658      	mov	r0, fp
   173a6:	4318      	orrs	r0, r3
   173a8:	d100      	bne.n	173ac <__aeabi_dsub+0x550>
   173aa:	e587      	b.n	16ebc <__aeabi_dsub+0x60>
   173ac:	465e      	mov	r6, fp
   173ae:	1ba7      	subs	r7, r4, r6
   173b0:	42bc      	cmp	r4, r7
   173b2:	4192      	sbcs	r2, r2
   173b4:	1ac8      	subs	r0, r1, r3
   173b6:	4252      	negs	r2, r2
   173b8:	1a80      	subs	r0, r0, r2
   173ba:	0206      	lsls	r6, r0, #8
   173bc:	d560      	bpl.n	17480 <__aeabi_dsub+0x624>
   173be:	4658      	mov	r0, fp
   173c0:	1b04      	subs	r4, r0, r4
   173c2:	45a3      	cmp	fp, r4
   173c4:	4192      	sbcs	r2, r2
   173c6:	1a59      	subs	r1, r3, r1
   173c8:	4252      	negs	r2, r2
   173ca:	1a89      	subs	r1, r1, r2
   173cc:	46e2      	mov	sl, ip
   173ce:	e575      	b.n	16ebc <__aeabi_dsub+0x60>
   173d0:	4658      	mov	r0, fp
   173d2:	4318      	orrs	r0, r3
   173d4:	d033      	beq.n	1743e <__aeabi_dsub+0x5e2>
   173d6:	0748      	lsls	r0, r1, #29
   173d8:	08e4      	lsrs	r4, r4, #3
   173da:	4304      	orrs	r4, r0
   173dc:	2080      	movs	r0, #128	; 0x80
   173de:	08c9      	lsrs	r1, r1, #3
   173e0:	0300      	lsls	r0, r0, #12
   173e2:	4201      	tst	r1, r0
   173e4:	d008      	beq.n	173f8 <__aeabi_dsub+0x59c>
   173e6:	08dd      	lsrs	r5, r3, #3
   173e8:	4205      	tst	r5, r0
   173ea:	d105      	bne.n	173f8 <__aeabi_dsub+0x59c>
   173ec:	4659      	mov	r1, fp
   173ee:	08ca      	lsrs	r2, r1, #3
   173f0:	075c      	lsls	r4, r3, #29
   173f2:	4314      	orrs	r4, r2
   173f4:	1c29      	adds	r1, r5, #0
   173f6:	46e2      	mov	sl, ip
   173f8:	0f63      	lsrs	r3, r4, #29
   173fa:	00c9      	lsls	r1, r1, #3
   173fc:	4319      	orrs	r1, r3
   173fe:	00e4      	lsls	r4, r4, #3
   17400:	4d2e      	ldr	r5, [pc, #184]	; (174bc <__aeabi_dsub+0x660>)
   17402:	e55b      	b.n	16ebc <__aeabi_dsub+0x60>
   17404:	4a2d      	ldr	r2, [pc, #180]	; (174bc <__aeabi_dsub+0x660>)
   17406:	4290      	cmp	r0, r2
   17408:	d1af      	bne.n	1736a <__aeabi_dsub+0x50e>
   1740a:	1c19      	adds	r1, r3, #0
   1740c:	465c      	mov	r4, fp
   1740e:	1c05      	adds	r5, r0, #0
   17410:	e554      	b.n	16ebc <__aeabi_dsub+0x60>
   17412:	2800      	cmp	r0, #0
   17414:	d030      	beq.n	17478 <__aeabi_dsub+0x61c>
   17416:	4658      	mov	r0, fp
   17418:	4318      	orrs	r0, r3
   1741a:	d010      	beq.n	1743e <__aeabi_dsub+0x5e2>
   1741c:	2580      	movs	r5, #128	; 0x80
   1741e:	0748      	lsls	r0, r1, #29
   17420:	08e4      	lsrs	r4, r4, #3
   17422:	08c9      	lsrs	r1, r1, #3
   17424:	032d      	lsls	r5, r5, #12
   17426:	4304      	orrs	r4, r0
   17428:	4229      	tst	r1, r5
   1742a:	d0e5      	beq.n	173f8 <__aeabi_dsub+0x59c>
   1742c:	08d8      	lsrs	r0, r3, #3
   1742e:	4228      	tst	r0, r5
   17430:	d1e2      	bne.n	173f8 <__aeabi_dsub+0x59c>
   17432:	465d      	mov	r5, fp
   17434:	08ea      	lsrs	r2, r5, #3
   17436:	075c      	lsls	r4, r3, #29
   17438:	4314      	orrs	r4, r2
   1743a:	1c01      	adds	r1, r0, #0
   1743c:	e7dc      	b.n	173f8 <__aeabi_dsub+0x59c>
   1743e:	4d1f      	ldr	r5, [pc, #124]	; (174bc <__aeabi_dsub+0x660>)
   17440:	e53c      	b.n	16ebc <__aeabi_dsub+0x60>
   17442:	2300      	movs	r3, #0
   17444:	e755      	b.n	172f2 <__aeabi_dsub+0x496>
   17446:	1c3d      	adds	r5, r7, #0
   17448:	3d20      	subs	r5, #32
   1744a:	1c0e      	adds	r6, r1, #0
   1744c:	40ee      	lsrs	r6, r5
   1744e:	1c35      	adds	r5, r6, #0
   17450:	2f20      	cmp	r7, #32
   17452:	d02e      	beq.n	174b2 <__aeabi_dsub+0x656>
   17454:	2640      	movs	r6, #64	; 0x40
   17456:	1bf7      	subs	r7, r6, r7
   17458:	40b9      	lsls	r1, r7
   1745a:	430c      	orrs	r4, r1
   1745c:	1e61      	subs	r1, r4, #1
   1745e:	418c      	sbcs	r4, r1
   17460:	432c      	orrs	r4, r5
   17462:	2100      	movs	r1, #0
   17464:	e6d8      	b.n	17218 <__aeabi_dsub+0x3bc>
   17466:	430c      	orrs	r4, r1
   17468:	1e61      	subs	r1, r4, #1
   1746a:	418c      	sbcs	r4, r1
   1746c:	b2e4      	uxtb	r4, r4
   1746e:	2100      	movs	r1, #0
   17470:	e790      	b.n	17394 <__aeabi_dsub+0x538>
   17472:	1c19      	adds	r1, r3, #0
   17474:	465c      	mov	r4, fp
   17476:	e521      	b.n	16ebc <__aeabi_dsub+0x60>
   17478:	1c19      	adds	r1, r3, #0
   1747a:	465c      	mov	r4, fp
   1747c:	4d0f      	ldr	r5, [pc, #60]	; (174bc <__aeabi_dsub+0x660>)
   1747e:	e51d      	b.n	16ebc <__aeabi_dsub+0x60>
   17480:	1c03      	adds	r3, r0, #0
   17482:	433b      	orrs	r3, r7
   17484:	d100      	bne.n	17488 <__aeabi_dsub+0x62c>
   17486:	e724      	b.n	172d2 <__aeabi_dsub+0x476>
   17488:	1c01      	adds	r1, r0, #0
   1748a:	1c3c      	adds	r4, r7, #0
   1748c:	e516      	b.n	16ebc <__aeabi_dsub+0x60>
   1748e:	2620      	movs	r6, #32
   17490:	4276      	negs	r6, r6
   17492:	1976      	adds	r6, r6, r5
   17494:	1c0a      	adds	r2, r1, #0
   17496:	40f2      	lsrs	r2, r6
   17498:	4690      	mov	r8, r2
   1749a:	2d20      	cmp	r5, #32
   1749c:	d00b      	beq.n	174b6 <__aeabi_dsub+0x65a>
   1749e:	2640      	movs	r6, #64	; 0x40
   174a0:	1b75      	subs	r5, r6, r5
   174a2:	40a9      	lsls	r1, r5
   174a4:	430c      	orrs	r4, r1
   174a6:	1e61      	subs	r1, r4, #1
   174a8:	418c      	sbcs	r4, r1
   174aa:	4645      	mov	r5, r8
   174ac:	432c      	orrs	r4, r5
   174ae:	2100      	movs	r1, #0
   174b0:	e770      	b.n	17394 <__aeabi_dsub+0x538>
   174b2:	2100      	movs	r1, #0
   174b4:	e7d1      	b.n	1745a <__aeabi_dsub+0x5fe>
   174b6:	2100      	movs	r1, #0
   174b8:	e7f4      	b.n	174a4 <__aeabi_dsub+0x648>
   174ba:	46c0      	nop			; (mov r8, r8)
   174bc:	000007ff 	.word	0x000007ff
   174c0:	ff7fffff 	.word	0xff7fffff

000174c4 <__aeabi_d2iz>:
   174c4:	b570      	push	{r4, r5, r6, lr}
   174c6:	1c0b      	adds	r3, r1, #0
   174c8:	4c12      	ldr	r4, [pc, #72]	; (17514 <__aeabi_d2iz+0x50>)
   174ca:	0309      	lsls	r1, r1, #12
   174cc:	0b0e      	lsrs	r6, r1, #12
   174ce:	0059      	lsls	r1, r3, #1
   174d0:	1c02      	adds	r2, r0, #0
   174d2:	0d49      	lsrs	r1, r1, #21
   174d4:	0fdd      	lsrs	r5, r3, #31
   174d6:	2000      	movs	r0, #0
   174d8:	42a1      	cmp	r1, r4
   174da:	dd11      	ble.n	17500 <__aeabi_d2iz+0x3c>
   174dc:	480e      	ldr	r0, [pc, #56]	; (17518 <__aeabi_d2iz+0x54>)
   174de:	4281      	cmp	r1, r0
   174e0:	dc0f      	bgt.n	17502 <__aeabi_d2iz+0x3e>
   174e2:	2080      	movs	r0, #128	; 0x80
   174e4:	0340      	lsls	r0, r0, #13
   174e6:	4306      	orrs	r6, r0
   174e8:	480c      	ldr	r0, [pc, #48]	; (1751c <__aeabi_d2iz+0x58>)
   174ea:	1a40      	subs	r0, r0, r1
   174ec:	281f      	cmp	r0, #31
   174ee:	dd0b      	ble.n	17508 <__aeabi_d2iz+0x44>
   174f0:	4a0b      	ldr	r2, [pc, #44]	; (17520 <__aeabi_d2iz+0x5c>)
   174f2:	1a52      	subs	r2, r2, r1
   174f4:	40d6      	lsrs	r6, r2
   174f6:	1c32      	adds	r2, r6, #0
   174f8:	4250      	negs	r0, r2
   174fa:	2d00      	cmp	r5, #0
   174fc:	d100      	bne.n	17500 <__aeabi_d2iz+0x3c>
   174fe:	1c10      	adds	r0, r2, #0
   17500:	bd70      	pop	{r4, r5, r6, pc}
   17502:	4b08      	ldr	r3, [pc, #32]	; (17524 <__aeabi_d2iz+0x60>)
   17504:	18e8      	adds	r0, r5, r3
   17506:	e7fb      	b.n	17500 <__aeabi_d2iz+0x3c>
   17508:	4b07      	ldr	r3, [pc, #28]	; (17528 <__aeabi_d2iz+0x64>)
   1750a:	40c2      	lsrs	r2, r0
   1750c:	18c9      	adds	r1, r1, r3
   1750e:	408e      	lsls	r6, r1
   17510:	4332      	orrs	r2, r6
   17512:	e7f1      	b.n	174f8 <__aeabi_d2iz+0x34>
   17514:	000003fe 	.word	0x000003fe
   17518:	0000041d 	.word	0x0000041d
   1751c:	00000433 	.word	0x00000433
   17520:	00000413 	.word	0x00000413
   17524:	7fffffff 	.word	0x7fffffff
   17528:	fffffbed 	.word	0xfffffbed

0001752c <__aeabi_i2d>:
   1752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1752e:	1e04      	subs	r4, r0, #0
   17530:	d031      	beq.n	17596 <__aeabi_i2d+0x6a>
   17532:	0fc7      	lsrs	r7, r0, #31
   17534:	d000      	beq.n	17538 <__aeabi_i2d+0xc>
   17536:	4244      	negs	r4, r0
   17538:	1c20      	adds	r0, r4, #0
   1753a:	f000 f869 	bl	17610 <__clzsi2>
   1753e:	4d18      	ldr	r5, [pc, #96]	; (175a0 <__aeabi_i2d+0x74>)
   17540:	1a2d      	subs	r5, r5, r0
   17542:	280a      	cmp	r0, #10
   17544:	dd19      	ble.n	1757a <__aeabi_i2d+0x4e>
   17546:	380b      	subs	r0, #11
   17548:	4084      	lsls	r4, r0
   1754a:	0324      	lsls	r4, r4, #12
   1754c:	056d      	lsls	r5, r5, #21
   1754e:	0b24      	lsrs	r4, r4, #12
   17550:	0d6d      	lsrs	r5, r5, #21
   17552:	1c3a      	adds	r2, r7, #0
   17554:	2600      	movs	r6, #0
   17556:	2000      	movs	r0, #0
   17558:	2100      	movs	r1, #0
   1755a:	0d0b      	lsrs	r3, r1, #20
   1755c:	0324      	lsls	r4, r4, #12
   1755e:	0b24      	lsrs	r4, r4, #12
   17560:	051b      	lsls	r3, r3, #20
   17562:	4323      	orrs	r3, r4
   17564:	4c0f      	ldr	r4, [pc, #60]	; (175a4 <__aeabi_i2d+0x78>)
   17566:	052d      	lsls	r5, r5, #20
   17568:	401c      	ands	r4, r3
   1756a:	432c      	orrs	r4, r5
   1756c:	0064      	lsls	r4, r4, #1
   1756e:	0864      	lsrs	r4, r4, #1
   17570:	07d3      	lsls	r3, r2, #31
   17572:	1c21      	adds	r1, r4, #0
   17574:	1c30      	adds	r0, r6, #0
   17576:	4319      	orrs	r1, r3
   17578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1757a:	1c06      	adds	r6, r0, #0
   1757c:	3615      	adds	r6, #21
   1757e:	1c23      	adds	r3, r4, #0
   17580:	40b3      	lsls	r3, r6
   17582:	1c1e      	adds	r6, r3, #0
   17584:	230b      	movs	r3, #11
   17586:	1a18      	subs	r0, r3, r0
   17588:	40c4      	lsrs	r4, r0
   1758a:	0324      	lsls	r4, r4, #12
   1758c:	056d      	lsls	r5, r5, #21
   1758e:	0b24      	lsrs	r4, r4, #12
   17590:	0d6d      	lsrs	r5, r5, #21
   17592:	1c3a      	adds	r2, r7, #0
   17594:	e7df      	b.n	17556 <__aeabi_i2d+0x2a>
   17596:	2200      	movs	r2, #0
   17598:	2500      	movs	r5, #0
   1759a:	2400      	movs	r4, #0
   1759c:	2600      	movs	r6, #0
   1759e:	e7da      	b.n	17556 <__aeabi_i2d+0x2a>
   175a0:	0000041e 	.word	0x0000041e
   175a4:	800fffff 	.word	0x800fffff

000175a8 <__aeabi_ui2d>:
   175a8:	b510      	push	{r4, lr}
   175aa:	1e04      	subs	r4, r0, #0
   175ac:	d028      	beq.n	17600 <__aeabi_ui2d+0x58>
   175ae:	f000 f82f 	bl	17610 <__clzsi2>
   175b2:	4a15      	ldr	r2, [pc, #84]	; (17608 <__aeabi_ui2d+0x60>)
   175b4:	1a12      	subs	r2, r2, r0
   175b6:	280a      	cmp	r0, #10
   175b8:	dd15      	ble.n	175e6 <__aeabi_ui2d+0x3e>
   175ba:	380b      	subs	r0, #11
   175bc:	4084      	lsls	r4, r0
   175be:	0324      	lsls	r4, r4, #12
   175c0:	0552      	lsls	r2, r2, #21
   175c2:	0b24      	lsrs	r4, r4, #12
   175c4:	0d52      	lsrs	r2, r2, #21
   175c6:	2300      	movs	r3, #0
   175c8:	2000      	movs	r0, #0
   175ca:	2100      	movs	r1, #0
   175cc:	0324      	lsls	r4, r4, #12
   175ce:	1c18      	adds	r0, r3, #0
   175d0:	0d0b      	lsrs	r3, r1, #20
   175d2:	0b24      	lsrs	r4, r4, #12
   175d4:	051b      	lsls	r3, r3, #20
   175d6:	4323      	orrs	r3, r4
   175d8:	4c0c      	ldr	r4, [pc, #48]	; (1760c <__aeabi_ui2d+0x64>)
   175da:	0512      	lsls	r2, r2, #20
   175dc:	401c      	ands	r4, r3
   175de:	4314      	orrs	r4, r2
   175e0:	0064      	lsls	r4, r4, #1
   175e2:	0861      	lsrs	r1, r4, #1
   175e4:	bd10      	pop	{r4, pc}
   175e6:	1c03      	adds	r3, r0, #0
   175e8:	3315      	adds	r3, #21
   175ea:	1c21      	adds	r1, r4, #0
   175ec:	4099      	lsls	r1, r3
   175ee:	1c0b      	adds	r3, r1, #0
   175f0:	210b      	movs	r1, #11
   175f2:	1a08      	subs	r0, r1, r0
   175f4:	40c4      	lsrs	r4, r0
   175f6:	0324      	lsls	r4, r4, #12
   175f8:	0552      	lsls	r2, r2, #21
   175fa:	0b24      	lsrs	r4, r4, #12
   175fc:	0d52      	lsrs	r2, r2, #21
   175fe:	e7e3      	b.n	175c8 <__aeabi_ui2d+0x20>
   17600:	2200      	movs	r2, #0
   17602:	2400      	movs	r4, #0
   17604:	2300      	movs	r3, #0
   17606:	e7df      	b.n	175c8 <__aeabi_ui2d+0x20>
   17608:	0000041e 	.word	0x0000041e
   1760c:	800fffff 	.word	0x800fffff

00017610 <__clzsi2>:
   17610:	211c      	movs	r1, #28
   17612:	2301      	movs	r3, #1
   17614:	041b      	lsls	r3, r3, #16
   17616:	4298      	cmp	r0, r3
   17618:	d301      	bcc.n	1761e <__clzsi2+0xe>
   1761a:	0c00      	lsrs	r0, r0, #16
   1761c:	3910      	subs	r1, #16
   1761e:	0a1b      	lsrs	r3, r3, #8
   17620:	4298      	cmp	r0, r3
   17622:	d301      	bcc.n	17628 <__clzsi2+0x18>
   17624:	0a00      	lsrs	r0, r0, #8
   17626:	3908      	subs	r1, #8
   17628:	091b      	lsrs	r3, r3, #4
   1762a:	4298      	cmp	r0, r3
   1762c:	d301      	bcc.n	17632 <__clzsi2+0x22>
   1762e:	0900      	lsrs	r0, r0, #4
   17630:	3904      	subs	r1, #4
   17632:	a202      	add	r2, pc, #8	; (adr r2, 1763c <__clzsi2+0x2c>)
   17634:	5c10      	ldrb	r0, [r2, r0]
   17636:	1840      	adds	r0, r0, r1
   17638:	4770      	bx	lr
   1763a:	46c0      	nop			; (mov r8, r8)
   1763c:	02020304 	.word	0x02020304
   17640:	01010101 	.word	0x01010101
	...

0001764c <__divdi3>:
   1764c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1764e:	4644      	mov	r4, r8
   17650:	465f      	mov	r7, fp
   17652:	4656      	mov	r6, sl
   17654:	464d      	mov	r5, r9
   17656:	b4f0      	push	{r4, r5, r6, r7}
   17658:	1c1c      	adds	r4, r3, #0
   1765a:	b085      	sub	sp, #20
   1765c:	2900      	cmp	r1, #0
   1765e:	da00      	bge.n	17662 <__divdi3+0x16>
   17660:	e0db      	b.n	1781a <__divdi3+0x1ce>
   17662:	1c0f      	adds	r7, r1, #0
   17664:	2100      	movs	r1, #0
   17666:	1c06      	adds	r6, r0, #0
   17668:	468a      	mov	sl, r1
   1766a:	1c10      	adds	r0, r2, #0
   1766c:	1c19      	adds	r1, r3, #0
   1766e:	2c00      	cmp	r4, #0
   17670:	da00      	bge.n	17674 <__divdi3+0x28>
   17672:	e0c9      	b.n	17808 <__divdi3+0x1bc>
   17674:	9601      	str	r6, [sp, #4]
   17676:	9000      	str	r0, [sp, #0]
   17678:	4689      	mov	r9, r1
   1767a:	4680      	mov	r8, r0
   1767c:	2900      	cmp	r1, #0
   1767e:	d151      	bne.n	17724 <__divdi3+0xd8>
   17680:	42b8      	cmp	r0, r7
   17682:	d800      	bhi.n	17686 <__divdi3+0x3a>
   17684:	e071      	b.n	1776a <__divdi3+0x11e>
   17686:	f7ff ffc3 	bl	17610 <__clzsi2>
   1768a:	2800      	cmp	r0, #0
   1768c:	d009      	beq.n	176a2 <__divdi3+0x56>
   1768e:	2320      	movs	r3, #32
   17690:	4645      	mov	r5, r8
   17692:	1c31      	adds	r1, r6, #0
   17694:	1a1b      	subs	r3, r3, r0
   17696:	4085      	lsls	r5, r0
   17698:	4087      	lsls	r7, r0
   1769a:	40d9      	lsrs	r1, r3
   1769c:	46a8      	mov	r8, r5
   1769e:	430f      	orrs	r7, r1
   176a0:	4086      	lsls	r6, r0
   176a2:	4642      	mov	r2, r8
   176a4:	0c15      	lsrs	r5, r2, #16
   176a6:	0413      	lsls	r3, r2, #16
   176a8:	0c1b      	lsrs	r3, r3, #16
   176aa:	1c29      	adds	r1, r5, #0
   176ac:	1c38      	adds	r0, r7, #0
   176ae:	469b      	mov	fp, r3
   176b0:	f7fe f832 	bl	15718 <__aeabi_uidiv>
   176b4:	465b      	mov	r3, fp
   176b6:	4343      	muls	r3, r0
   176b8:	1c04      	adds	r4, r0, #0
   176ba:	1c29      	adds	r1, r5, #0
   176bc:	1c38      	adds	r0, r7, #0
   176be:	4699      	mov	r9, r3
   176c0:	f7fe f86e 	bl	157a0 <__aeabi_uidivmod>
   176c4:	0c33      	lsrs	r3, r6, #16
   176c6:	0408      	lsls	r0, r1, #16
   176c8:	4318      	orrs	r0, r3
   176ca:	4581      	cmp	r9, r0
   176cc:	d909      	bls.n	176e2 <__divdi3+0x96>
   176ce:	4440      	add	r0, r8
   176d0:	1e63      	subs	r3, r4, #1
   176d2:	4580      	cmp	r8, r0
   176d4:	d900      	bls.n	176d8 <__divdi3+0x8c>
   176d6:	e178      	b.n	179ca <__divdi3+0x37e>
   176d8:	4581      	cmp	r9, r0
   176da:	d800      	bhi.n	176de <__divdi3+0x92>
   176dc:	e175      	b.n	179ca <__divdi3+0x37e>
   176de:	3c02      	subs	r4, #2
   176e0:	4440      	add	r0, r8
   176e2:	4649      	mov	r1, r9
   176e4:	1a41      	subs	r1, r0, r1
   176e6:	4689      	mov	r9, r1
   176e8:	1c08      	adds	r0, r1, #0
   176ea:	1c29      	adds	r1, r5, #0
   176ec:	f7fe f814 	bl	15718 <__aeabi_uidiv>
   176f0:	465a      	mov	r2, fp
   176f2:	4342      	muls	r2, r0
   176f4:	1c07      	adds	r7, r0, #0
   176f6:	1c29      	adds	r1, r5, #0
   176f8:	4648      	mov	r0, r9
   176fa:	4693      	mov	fp, r2
   176fc:	f7fe f850 	bl	157a0 <__aeabi_uidivmod>
   17700:	0436      	lsls	r6, r6, #16
   17702:	0409      	lsls	r1, r1, #16
   17704:	0c36      	lsrs	r6, r6, #16
   17706:	430e      	orrs	r6, r1
   17708:	45b3      	cmp	fp, r6
   1770a:	d907      	bls.n	1771c <__divdi3+0xd0>
   1770c:	4446      	add	r6, r8
   1770e:	1e7b      	subs	r3, r7, #1
   17710:	45b0      	cmp	r8, r6
   17712:	d802      	bhi.n	1771a <__divdi3+0xce>
   17714:	3f02      	subs	r7, #2
   17716:	45b3      	cmp	fp, r6
   17718:	d800      	bhi.n	1771c <__divdi3+0xd0>
   1771a:	1c1f      	adds	r7, r3, #0
   1771c:	0424      	lsls	r4, r4, #16
   1771e:	4327      	orrs	r7, r4
   17720:	2400      	movs	r4, #0
   17722:	e003      	b.n	1772c <__divdi3+0xe0>
   17724:	42b9      	cmp	r1, r7
   17726:	d911      	bls.n	1774c <__divdi3+0x100>
   17728:	2400      	movs	r4, #0
   1772a:	2700      	movs	r7, #0
   1772c:	4652      	mov	r2, sl
   1772e:	1c38      	adds	r0, r7, #0
   17730:	1c21      	adds	r1, r4, #0
   17732:	2a00      	cmp	r2, #0
   17734:	d003      	beq.n	1773e <__divdi3+0xf2>
   17736:	1c3b      	adds	r3, r7, #0
   17738:	2100      	movs	r1, #0
   1773a:	4258      	negs	r0, r3
   1773c:	41a1      	sbcs	r1, r4
   1773e:	b005      	add	sp, #20
   17740:	bc3c      	pop	{r2, r3, r4, r5}
   17742:	4690      	mov	r8, r2
   17744:	4699      	mov	r9, r3
   17746:	46a2      	mov	sl, r4
   17748:	46ab      	mov	fp, r5
   1774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1774c:	1c08      	adds	r0, r1, #0
   1774e:	f7ff ff5f 	bl	17610 <__clzsi2>
   17752:	1e04      	subs	r4, r0, #0
   17754:	d000      	beq.n	17758 <__divdi3+0x10c>
   17756:	e0bf      	b.n	178d8 <__divdi3+0x28c>
   17758:	45b9      	cmp	r9, r7
   1775a:	d200      	bcs.n	1775e <__divdi3+0x112>
   1775c:	e142      	b.n	179e4 <__divdi3+0x398>
   1775e:	9d01      	ldr	r5, [sp, #4]
   17760:	9900      	ldr	r1, [sp, #0]
   17762:	1c07      	adds	r7, r0, #0
   17764:	428d      	cmp	r5, r1
   17766:	4147      	adcs	r7, r0
   17768:	e7e0      	b.n	1772c <__divdi3+0xe0>
   1776a:	2800      	cmp	r0, #0
   1776c:	d104      	bne.n	17778 <__divdi3+0x12c>
   1776e:	2001      	movs	r0, #1
   17770:	2100      	movs	r1, #0
   17772:	f7fd ffd1 	bl	15718 <__aeabi_uidiv>
   17776:	4680      	mov	r8, r0
   17778:	4640      	mov	r0, r8
   1777a:	f7ff ff49 	bl	17610 <__clzsi2>
   1777e:	2800      	cmp	r0, #0
   17780:	d152      	bne.n	17828 <__divdi3+0x1dc>
   17782:	4641      	mov	r1, r8
   17784:	4644      	mov	r4, r8
   17786:	040b      	lsls	r3, r1, #16
   17788:	1b3c      	subs	r4, r7, r4
   1778a:	0c1b      	lsrs	r3, r3, #16
   1778c:	46a3      	mov	fp, r4
   1778e:	0c0d      	lsrs	r5, r1, #16
   17790:	9300      	str	r3, [sp, #0]
   17792:	2401      	movs	r4, #1
   17794:	1c29      	adds	r1, r5, #0
   17796:	4658      	mov	r0, fp
   17798:	f7fd ffbe 	bl	15718 <__aeabi_uidiv>
   1779c:	9f00      	ldr	r7, [sp, #0]
   1779e:	4681      	mov	r9, r0
   177a0:	4347      	muls	r7, r0
   177a2:	1c29      	adds	r1, r5, #0
   177a4:	4658      	mov	r0, fp
   177a6:	f7fd fffb 	bl	157a0 <__aeabi_uidivmod>
   177aa:	0c33      	lsrs	r3, r6, #16
   177ac:	0409      	lsls	r1, r1, #16
   177ae:	4319      	orrs	r1, r3
   177b0:	428f      	cmp	r7, r1
   177b2:	d908      	bls.n	177c6 <__divdi3+0x17a>
   177b4:	464b      	mov	r3, r9
   177b6:	4441      	add	r1, r8
   177b8:	3b01      	subs	r3, #1
   177ba:	4588      	cmp	r8, r1
   177bc:	d802      	bhi.n	177c4 <__divdi3+0x178>
   177be:	428f      	cmp	r7, r1
   177c0:	d900      	bls.n	177c4 <__divdi3+0x178>
   177c2:	e11a      	b.n	179fa <__divdi3+0x3ae>
   177c4:	4699      	mov	r9, r3
   177c6:	1bc9      	subs	r1, r1, r7
   177c8:	468b      	mov	fp, r1
   177ca:	1c08      	adds	r0, r1, #0
   177cc:	1c29      	adds	r1, r5, #0
   177ce:	f7fd ffa3 	bl	15718 <__aeabi_uidiv>
   177d2:	9b00      	ldr	r3, [sp, #0]
   177d4:	1c29      	adds	r1, r5, #0
   177d6:	4343      	muls	r3, r0
   177d8:	1c07      	adds	r7, r0, #0
   177da:	4658      	mov	r0, fp
   177dc:	9300      	str	r3, [sp, #0]
   177de:	f7fd ffdf 	bl	157a0 <__aeabi_uidivmod>
   177e2:	0436      	lsls	r6, r6, #16
   177e4:	9d00      	ldr	r5, [sp, #0]
   177e6:	0409      	lsls	r1, r1, #16
   177e8:	0c36      	lsrs	r6, r6, #16
   177ea:	430e      	orrs	r6, r1
   177ec:	42b5      	cmp	r5, r6
   177ee:	d907      	bls.n	17800 <__divdi3+0x1b4>
   177f0:	4446      	add	r6, r8
   177f2:	1e7b      	subs	r3, r7, #1
   177f4:	45b0      	cmp	r8, r6
   177f6:	d802      	bhi.n	177fe <__divdi3+0x1b2>
   177f8:	3f02      	subs	r7, #2
   177fa:	42b5      	cmp	r5, r6
   177fc:	d800      	bhi.n	17800 <__divdi3+0x1b4>
   177fe:	1c1f      	adds	r7, r3, #0
   17800:	4649      	mov	r1, r9
   17802:	040e      	lsls	r6, r1, #16
   17804:	4337      	orrs	r7, r6
   17806:	e791      	b.n	1772c <__divdi3+0xe0>
   17808:	4652      	mov	r2, sl
   1780a:	43d2      	mvns	r2, r2
   1780c:	1c03      	adds	r3, r0, #0
   1780e:	1c0c      	adds	r4, r1, #0
   17810:	4692      	mov	sl, r2
   17812:	2100      	movs	r1, #0
   17814:	4258      	negs	r0, r3
   17816:	41a1      	sbcs	r1, r4
   17818:	e72c      	b.n	17674 <__divdi3+0x28>
   1781a:	2700      	movs	r7, #0
   1781c:	4246      	negs	r6, r0
   1781e:	418f      	sbcs	r7, r1
   17820:	2101      	movs	r1, #1
   17822:	4249      	negs	r1, r1
   17824:	468a      	mov	sl, r1
   17826:	e720      	b.n	1766a <__divdi3+0x1e>
   17828:	2320      	movs	r3, #32
   1782a:	1a1b      	subs	r3, r3, r0
   1782c:	4642      	mov	r2, r8
   1782e:	1c35      	adds	r5, r6, #0
   17830:	4082      	lsls	r2, r0
   17832:	1c3c      	adds	r4, r7, #0
   17834:	40dd      	lsrs	r5, r3
   17836:	40dc      	lsrs	r4, r3
   17838:	4087      	lsls	r7, r0
   1783a:	1c2b      	adds	r3, r5, #0
   1783c:	0c15      	lsrs	r5, r2, #16
   1783e:	433b      	orrs	r3, r7
   17840:	1c29      	adds	r1, r5, #0
   17842:	4086      	lsls	r6, r0
   17844:	1c20      	adds	r0, r4, #0
   17846:	9300      	str	r3, [sp, #0]
   17848:	0417      	lsls	r7, r2, #16
   1784a:	4690      	mov	r8, r2
   1784c:	f7fd ff64 	bl	15718 <__aeabi_uidiv>
   17850:	0c3f      	lsrs	r7, r7, #16
   17852:	1c01      	adds	r1, r0, #0
   17854:	4379      	muls	r1, r7
   17856:	4681      	mov	r9, r0
   17858:	468b      	mov	fp, r1
   1785a:	1c20      	adds	r0, r4, #0
   1785c:	1c29      	adds	r1, r5, #0
   1785e:	f7fd ff9f 	bl	157a0 <__aeabi_uidivmod>
   17862:	9c00      	ldr	r4, [sp, #0]
   17864:	0409      	lsls	r1, r1, #16
   17866:	0c23      	lsrs	r3, r4, #16
   17868:	4319      	orrs	r1, r3
   1786a:	458b      	cmp	fp, r1
   1786c:	d90c      	bls.n	17888 <__divdi3+0x23c>
   1786e:	464b      	mov	r3, r9
   17870:	4441      	add	r1, r8
   17872:	3b01      	subs	r3, #1
   17874:	4588      	cmp	r8, r1
   17876:	d900      	bls.n	1787a <__divdi3+0x22e>
   17878:	e0bd      	b.n	179f6 <__divdi3+0x3aa>
   1787a:	458b      	cmp	fp, r1
   1787c:	d800      	bhi.n	17880 <__divdi3+0x234>
   1787e:	e0ba      	b.n	179f6 <__divdi3+0x3aa>
   17880:	2202      	movs	r2, #2
   17882:	4252      	negs	r2, r2
   17884:	4491      	add	r9, r2
   17886:	4441      	add	r1, r8
   17888:	465c      	mov	r4, fp
   1788a:	1b0c      	subs	r4, r1, r4
   1788c:	1c20      	adds	r0, r4, #0
   1788e:	1c29      	adds	r1, r5, #0
   17890:	9401      	str	r4, [sp, #4]
   17892:	f7fd ff41 	bl	15718 <__aeabi_uidiv>
   17896:	1c39      	adds	r1, r7, #0
   17898:	4341      	muls	r1, r0
   1789a:	1c04      	adds	r4, r0, #0
   1789c:	468b      	mov	fp, r1
   1789e:	9801      	ldr	r0, [sp, #4]
   178a0:	1c29      	adds	r1, r5, #0
   178a2:	f7fd ff7d 	bl	157a0 <__aeabi_uidivmod>
   178a6:	9a00      	ldr	r2, [sp, #0]
   178a8:	0409      	lsls	r1, r1, #16
   178aa:	0413      	lsls	r3, r2, #16
   178ac:	0c1b      	lsrs	r3, r3, #16
   178ae:	4319      	orrs	r1, r3
   178b0:	458b      	cmp	fp, r1
   178b2:	d909      	bls.n	178c8 <__divdi3+0x27c>
   178b4:	4441      	add	r1, r8
   178b6:	1e63      	subs	r3, r4, #1
   178b8:	4588      	cmp	r8, r1
   178ba:	d900      	bls.n	178be <__divdi3+0x272>
   178bc:	e097      	b.n	179ee <__divdi3+0x3a2>
   178be:	458b      	cmp	fp, r1
   178c0:	d800      	bhi.n	178c4 <__divdi3+0x278>
   178c2:	e094      	b.n	179ee <__divdi3+0x3a2>
   178c4:	3c02      	subs	r4, #2
   178c6:	4441      	add	r1, r8
   178c8:	465b      	mov	r3, fp
   178ca:	1acb      	subs	r3, r1, r3
   178cc:	4649      	mov	r1, r9
   178ce:	469b      	mov	fp, r3
   178d0:	040b      	lsls	r3, r1, #16
   178d2:	431c      	orrs	r4, r3
   178d4:	9700      	str	r7, [sp, #0]
   178d6:	e75d      	b.n	17794 <__divdi3+0x148>
   178d8:	9d00      	ldr	r5, [sp, #0]
   178da:	2320      	movs	r3, #32
   178dc:	1a1b      	subs	r3, r3, r0
   178de:	464a      	mov	r2, r9
   178e0:	4082      	lsls	r2, r0
   178e2:	40dd      	lsrs	r5, r3
   178e4:	4315      	orrs	r5, r2
   178e6:	1c39      	adds	r1, r7, #0
   178e8:	9a00      	ldr	r2, [sp, #0]
   178ea:	40d9      	lsrs	r1, r3
   178ec:	4082      	lsls	r2, r0
   178ee:	4688      	mov	r8, r1
   178f0:	1c31      	adds	r1, r6, #0
   178f2:	9200      	str	r2, [sp, #0]
   178f4:	40d9      	lsrs	r1, r3
   178f6:	1c3a      	adds	r2, r7, #0
   178f8:	4082      	lsls	r2, r0
   178fa:	1c0b      	adds	r3, r1, #0
   178fc:	4313      	orrs	r3, r2
   178fe:	9301      	str	r3, [sp, #4]
   17900:	0c2f      	lsrs	r7, r5, #16
   17902:	042b      	lsls	r3, r5, #16
   17904:	0c1b      	lsrs	r3, r3, #16
   17906:	1c39      	adds	r1, r7, #0
   17908:	4640      	mov	r0, r8
   1790a:	9302      	str	r3, [sp, #8]
   1790c:	f7fd ff04 	bl	15718 <__aeabi_uidiv>
   17910:	9a02      	ldr	r2, [sp, #8]
   17912:	4681      	mov	r9, r0
   17914:	4342      	muls	r2, r0
   17916:	1c39      	adds	r1, r7, #0
   17918:	4640      	mov	r0, r8
   1791a:	4693      	mov	fp, r2
   1791c:	f7fd ff40 	bl	157a0 <__aeabi_uidivmod>
   17920:	9a01      	ldr	r2, [sp, #4]
   17922:	0409      	lsls	r1, r1, #16
   17924:	0c13      	lsrs	r3, r2, #16
   17926:	4319      	orrs	r1, r3
   17928:	458b      	cmp	fp, r1
   1792a:	d90a      	bls.n	17942 <__divdi3+0x2f6>
   1792c:	464b      	mov	r3, r9
   1792e:	1949      	adds	r1, r1, r5
   17930:	3b01      	subs	r3, #1
   17932:	428d      	cmp	r5, r1
   17934:	d85d      	bhi.n	179f2 <__divdi3+0x3a6>
   17936:	458b      	cmp	fp, r1
   17938:	d95b      	bls.n	179f2 <__divdi3+0x3a6>
   1793a:	2302      	movs	r3, #2
   1793c:	425b      	negs	r3, r3
   1793e:	4499      	add	r9, r3
   17940:	1949      	adds	r1, r1, r5
   17942:	465a      	mov	r2, fp
   17944:	1a8a      	subs	r2, r1, r2
   17946:	1c10      	adds	r0, r2, #0
   17948:	1c39      	adds	r1, r7, #0
   1794a:	9203      	str	r2, [sp, #12]
   1794c:	f7fd fee4 	bl	15718 <__aeabi_uidiv>
   17950:	9b02      	ldr	r3, [sp, #8]
   17952:	4680      	mov	r8, r0
   17954:	4343      	muls	r3, r0
   17956:	1c39      	adds	r1, r7, #0
   17958:	9803      	ldr	r0, [sp, #12]
   1795a:	469b      	mov	fp, r3
   1795c:	f7fd ff20 	bl	157a0 <__aeabi_uidivmod>
   17960:	9a01      	ldr	r2, [sp, #4]
   17962:	0409      	lsls	r1, r1, #16
   17964:	0413      	lsls	r3, r2, #16
   17966:	0c1b      	lsrs	r3, r3, #16
   17968:	4319      	orrs	r1, r3
   1796a:	458b      	cmp	fp, r1
   1796c:	d90a      	bls.n	17984 <__divdi3+0x338>
   1796e:	4643      	mov	r3, r8
   17970:	1949      	adds	r1, r1, r5
   17972:	3b01      	subs	r3, #1
   17974:	428d      	cmp	r5, r1
   17976:	d838      	bhi.n	179ea <__divdi3+0x39e>
   17978:	458b      	cmp	fp, r1
   1797a:	d936      	bls.n	179ea <__divdi3+0x39e>
   1797c:	2302      	movs	r3, #2
   1797e:	425b      	negs	r3, r3
   17980:	4498      	add	r8, r3
   17982:	1949      	adds	r1, r1, r5
   17984:	465d      	mov	r5, fp
   17986:	1b4d      	subs	r5, r1, r5
   17988:	46ab      	mov	fp, r5
   1798a:	4649      	mov	r1, r9
   1798c:	9d00      	ldr	r5, [sp, #0]
   1798e:	040f      	lsls	r7, r1, #16
   17990:	4642      	mov	r2, r8
   17992:	4317      	orrs	r7, r2
   17994:	042a      	lsls	r2, r5, #16
   17996:	0c12      	lsrs	r2, r2, #16
   17998:	043b      	lsls	r3, r7, #16
   1799a:	0c2d      	lsrs	r5, r5, #16
   1799c:	0c1b      	lsrs	r3, r3, #16
   1799e:	0c38      	lsrs	r0, r7, #16
   179a0:	1c11      	adds	r1, r2, #0
   179a2:	4359      	muls	r1, r3
   179a4:	4342      	muls	r2, r0
   179a6:	436b      	muls	r3, r5
   179a8:	4368      	muls	r0, r5
   179aa:	18d3      	adds	r3, r2, r3
   179ac:	0c0d      	lsrs	r5, r1, #16
   179ae:	195b      	adds	r3, r3, r5
   179b0:	468c      	mov	ip, r1
   179b2:	429a      	cmp	r2, r3
   179b4:	d902      	bls.n	179bc <__divdi3+0x370>
   179b6:	2280      	movs	r2, #128	; 0x80
   179b8:	0252      	lsls	r2, r2, #9
   179ba:	1880      	adds	r0, r0, r2
   179bc:	0c1d      	lsrs	r5, r3, #16
   179be:	1940      	adds	r0, r0, r5
   179c0:	4583      	cmp	fp, r0
   179c2:	d30c      	bcc.n	179de <__divdi3+0x392>
   179c4:	d003      	beq.n	179ce <__divdi3+0x382>
   179c6:	2400      	movs	r4, #0
   179c8:	e6b0      	b.n	1772c <__divdi3+0xe0>
   179ca:	1c1c      	adds	r4, r3, #0
   179cc:	e689      	b.n	176e2 <__divdi3+0x96>
   179ce:	4665      	mov	r5, ip
   179d0:	042a      	lsls	r2, r5, #16
   179d2:	041b      	lsls	r3, r3, #16
   179d4:	0c12      	lsrs	r2, r2, #16
   179d6:	189b      	adds	r3, r3, r2
   179d8:	40a6      	lsls	r6, r4
   179da:	429e      	cmp	r6, r3
   179dc:	d2f3      	bcs.n	179c6 <__divdi3+0x37a>
   179de:	3f01      	subs	r7, #1
   179e0:	2400      	movs	r4, #0
   179e2:	e6a3      	b.n	1772c <__divdi3+0xe0>
   179e4:	2400      	movs	r4, #0
   179e6:	2701      	movs	r7, #1
   179e8:	e6a0      	b.n	1772c <__divdi3+0xe0>
   179ea:	4698      	mov	r8, r3
   179ec:	e7ca      	b.n	17984 <__divdi3+0x338>
   179ee:	1c1c      	adds	r4, r3, #0
   179f0:	e76a      	b.n	178c8 <__divdi3+0x27c>
   179f2:	4699      	mov	r9, r3
   179f4:	e7a5      	b.n	17942 <__divdi3+0x2f6>
   179f6:	4699      	mov	r9, r3
   179f8:	e746      	b.n	17888 <__divdi3+0x23c>
   179fa:	2202      	movs	r2, #2
   179fc:	4252      	negs	r2, r2
   179fe:	4491      	add	r9, r2
   17a00:	4441      	add	r1, r8
   17a02:	e6e0      	b.n	177c6 <__divdi3+0x17a>

00017a04 <__udivdi3>:
   17a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a06:	465f      	mov	r7, fp
   17a08:	4656      	mov	r6, sl
   17a0a:	464d      	mov	r5, r9
   17a0c:	4644      	mov	r4, r8
   17a0e:	b4f0      	push	{r4, r5, r6, r7}
   17a10:	1c0d      	adds	r5, r1, #0
   17a12:	b085      	sub	sp, #20
   17a14:	1c06      	adds	r6, r0, #0
   17a16:	4692      	mov	sl, r2
   17a18:	4698      	mov	r8, r3
   17a1a:	9002      	str	r0, [sp, #8]
   17a1c:	9101      	str	r1, [sp, #4]
   17a1e:	9203      	str	r2, [sp, #12]
   17a20:	1c1f      	adds	r7, r3, #0
   17a22:	1c14      	adds	r4, r2, #0
   17a24:	4683      	mov	fp, r0
   17a26:	46a9      	mov	r9, r5
   17a28:	2b00      	cmp	r3, #0
   17a2a:	d159      	bne.n	17ae0 <__udivdi3+0xdc>
   17a2c:	42aa      	cmp	r2, r5
   17a2e:	d969      	bls.n	17b04 <__udivdi3+0x100>
   17a30:	1c10      	adds	r0, r2, #0
   17a32:	f7ff fded 	bl	17610 <__clzsi2>
   17a36:	2800      	cmp	r0, #0
   17a38:	d00a      	beq.n	17a50 <__udivdi3+0x4c>
   17a3a:	2320      	movs	r3, #32
   17a3c:	1a1b      	subs	r3, r3, r0
   17a3e:	1c31      	adds	r1, r6, #0
   17a40:	40d9      	lsrs	r1, r3
   17a42:	4085      	lsls	r5, r0
   17a44:	1c0b      	adds	r3, r1, #0
   17a46:	432b      	orrs	r3, r5
   17a48:	4086      	lsls	r6, r0
   17a4a:	4084      	lsls	r4, r0
   17a4c:	4699      	mov	r9, r3
   17a4e:	46b3      	mov	fp, r6
   17a50:	0c25      	lsrs	r5, r4, #16
   17a52:	0423      	lsls	r3, r4, #16
   17a54:	0c1b      	lsrs	r3, r3, #16
   17a56:	1c29      	adds	r1, r5, #0
   17a58:	4648      	mov	r0, r9
   17a5a:	4698      	mov	r8, r3
   17a5c:	f7fd fe5c 	bl	15718 <__aeabi_uidiv>
   17a60:	4646      	mov	r6, r8
   17a62:	1c07      	adds	r7, r0, #0
   17a64:	4346      	muls	r6, r0
   17a66:	1c29      	adds	r1, r5, #0
   17a68:	4648      	mov	r0, r9
   17a6a:	f7fd fe99 	bl	157a0 <__aeabi_uidivmod>
   17a6e:	465a      	mov	r2, fp
   17a70:	0409      	lsls	r1, r1, #16
   17a72:	0c13      	lsrs	r3, r2, #16
   17a74:	4319      	orrs	r1, r3
   17a76:	428e      	cmp	r6, r1
   17a78:	d909      	bls.n	17a8e <__udivdi3+0x8a>
   17a7a:	1909      	adds	r1, r1, r4
   17a7c:	1e7b      	subs	r3, r7, #1
   17a7e:	428c      	cmp	r4, r1
   17a80:	d900      	bls.n	17a84 <__udivdi3+0x80>
   17a82:	e157      	b.n	17d34 <__udivdi3+0x330>
   17a84:	428e      	cmp	r6, r1
   17a86:	d800      	bhi.n	17a8a <__udivdi3+0x86>
   17a88:	e154      	b.n	17d34 <__udivdi3+0x330>
   17a8a:	3f02      	subs	r7, #2
   17a8c:	1909      	adds	r1, r1, r4
   17a8e:	1b89      	subs	r1, r1, r6
   17a90:	4689      	mov	r9, r1
   17a92:	1c08      	adds	r0, r1, #0
   17a94:	1c29      	adds	r1, r5, #0
   17a96:	f7fd fe3f 	bl	15718 <__aeabi_uidiv>
   17a9a:	4643      	mov	r3, r8
   17a9c:	4343      	muls	r3, r0
   17a9e:	1c06      	adds	r6, r0, #0
   17aa0:	1c29      	adds	r1, r5, #0
   17aa2:	4648      	mov	r0, r9
   17aa4:	4698      	mov	r8, r3
   17aa6:	f7fd fe7b 	bl	157a0 <__aeabi_uidivmod>
   17aaa:	465a      	mov	r2, fp
   17aac:	0413      	lsls	r3, r2, #16
   17aae:	0409      	lsls	r1, r1, #16
   17ab0:	0c1b      	lsrs	r3, r3, #16
   17ab2:	4319      	orrs	r1, r3
   17ab4:	4588      	cmp	r8, r1
   17ab6:	d908      	bls.n	17aca <__udivdi3+0xc6>
   17ab8:	1909      	adds	r1, r1, r4
   17aba:	1e73      	subs	r3, r6, #1
   17abc:	428c      	cmp	r4, r1
   17abe:	d900      	bls.n	17ac2 <__udivdi3+0xbe>
   17ac0:	e136      	b.n	17d30 <__udivdi3+0x32c>
   17ac2:	3e02      	subs	r6, #2
   17ac4:	4588      	cmp	r8, r1
   17ac6:	d800      	bhi.n	17aca <__udivdi3+0xc6>
   17ac8:	e132      	b.n	17d30 <__udivdi3+0x32c>
   17aca:	0438      	lsls	r0, r7, #16
   17acc:	4330      	orrs	r0, r6
   17ace:	2700      	movs	r7, #0
   17ad0:	1c39      	adds	r1, r7, #0
   17ad2:	b005      	add	sp, #20
   17ad4:	bc3c      	pop	{r2, r3, r4, r5}
   17ad6:	4690      	mov	r8, r2
   17ad8:	4699      	mov	r9, r3
   17ada:	46a2      	mov	sl, r4
   17adc:	46ab      	mov	fp, r5
   17ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ae0:	9a01      	ldr	r2, [sp, #4]
   17ae2:	4293      	cmp	r3, r2
   17ae4:	d862      	bhi.n	17bac <__udivdi3+0x1a8>
   17ae6:	1c18      	adds	r0, r3, #0
   17ae8:	f7ff fd92 	bl	17610 <__clzsi2>
   17aec:	1e04      	subs	r4, r0, #0
   17aee:	d160      	bne.n	17bb2 <__udivdi3+0x1ae>
   17af0:	9b01      	ldr	r3, [sp, #4]
   17af2:	429f      	cmp	r7, r3
   17af4:	d200      	bcs.n	17af8 <__udivdi3+0xf4>
   17af6:	e12c      	b.n	17d52 <__udivdi3+0x34e>
   17af8:	9f02      	ldr	r7, [sp, #8]
   17afa:	9903      	ldr	r1, [sp, #12]
   17afc:	428f      	cmp	r7, r1
   17afe:	4160      	adcs	r0, r4
   17b00:	2700      	movs	r7, #0
   17b02:	e7e5      	b.n	17ad0 <__udivdi3+0xcc>
   17b04:	2a00      	cmp	r2, #0
   17b06:	d104      	bne.n	17b12 <__udivdi3+0x10e>
   17b08:	2001      	movs	r0, #1
   17b0a:	2100      	movs	r1, #0
   17b0c:	f7fd fe04 	bl	15718 <__aeabi_uidiv>
   17b10:	1c04      	adds	r4, r0, #0
   17b12:	1c20      	adds	r0, r4, #0
   17b14:	f7ff fd7c 	bl	17610 <__clzsi2>
   17b18:	2800      	cmp	r0, #0
   17b1a:	d000      	beq.n	17b1e <__udivdi3+0x11a>
   17b1c:	e0b9      	b.n	17c92 <__udivdi3+0x28e>
   17b1e:	0423      	lsls	r3, r4, #16
   17b20:	1b2d      	subs	r5, r5, r4
   17b22:	0c1b      	lsrs	r3, r3, #16
   17b24:	46a9      	mov	r9, r5
   17b26:	0c26      	lsrs	r6, r4, #16
   17b28:	4698      	mov	r8, r3
   17b2a:	2701      	movs	r7, #1
   17b2c:	1c31      	adds	r1, r6, #0
   17b2e:	4648      	mov	r0, r9
   17b30:	f7fd fdf2 	bl	15718 <__aeabi_uidiv>
   17b34:	4641      	mov	r1, r8
   17b36:	4341      	muls	r1, r0
   17b38:	1c05      	adds	r5, r0, #0
   17b3a:	468a      	mov	sl, r1
   17b3c:	4648      	mov	r0, r9
   17b3e:	1c31      	adds	r1, r6, #0
   17b40:	f7fd fe2e 	bl	157a0 <__aeabi_uidivmod>
   17b44:	465a      	mov	r2, fp
   17b46:	0408      	lsls	r0, r1, #16
   17b48:	0c13      	lsrs	r3, r2, #16
   17b4a:	4318      	orrs	r0, r3
   17b4c:	4582      	cmp	sl, r0
   17b4e:	d907      	bls.n	17b60 <__udivdi3+0x15c>
   17b50:	1900      	adds	r0, r0, r4
   17b52:	1e6b      	subs	r3, r5, #1
   17b54:	4284      	cmp	r4, r0
   17b56:	d802      	bhi.n	17b5e <__udivdi3+0x15a>
   17b58:	4582      	cmp	sl, r0
   17b5a:	d900      	bls.n	17b5e <__udivdi3+0x15a>
   17b5c:	e110      	b.n	17d80 <__udivdi3+0x37c>
   17b5e:	1c1d      	adds	r5, r3, #0
   17b60:	4653      	mov	r3, sl
   17b62:	1ac3      	subs	r3, r0, r3
   17b64:	1c18      	adds	r0, r3, #0
   17b66:	1c31      	adds	r1, r6, #0
   17b68:	469a      	mov	sl, r3
   17b6a:	f7fd fdd5 	bl	15718 <__aeabi_uidiv>
   17b6e:	4641      	mov	r1, r8
   17b70:	4341      	muls	r1, r0
   17b72:	4681      	mov	r9, r0
   17b74:	4688      	mov	r8, r1
   17b76:	4650      	mov	r0, sl
   17b78:	1c31      	adds	r1, r6, #0
   17b7a:	f7fd fe11 	bl	157a0 <__aeabi_uidivmod>
   17b7e:	465a      	mov	r2, fp
   17b80:	0413      	lsls	r3, r2, #16
   17b82:	0409      	lsls	r1, r1, #16
   17b84:	0c1b      	lsrs	r3, r3, #16
   17b86:	4319      	orrs	r1, r3
   17b88:	4588      	cmp	r8, r1
   17b8a:	d90b      	bls.n	17ba4 <__udivdi3+0x1a0>
   17b8c:	464b      	mov	r3, r9
   17b8e:	1909      	adds	r1, r1, r4
   17b90:	3b01      	subs	r3, #1
   17b92:	428c      	cmp	r4, r1
   17b94:	d900      	bls.n	17b98 <__udivdi3+0x194>
   17b96:	e0cf      	b.n	17d38 <__udivdi3+0x334>
   17b98:	4588      	cmp	r8, r1
   17b9a:	d800      	bhi.n	17b9e <__udivdi3+0x19a>
   17b9c:	e0cc      	b.n	17d38 <__udivdi3+0x334>
   17b9e:	2302      	movs	r3, #2
   17ba0:	425b      	negs	r3, r3
   17ba2:	4499      	add	r9, r3
   17ba4:	0428      	lsls	r0, r5, #16
   17ba6:	4649      	mov	r1, r9
   17ba8:	4308      	orrs	r0, r1
   17baa:	e791      	b.n	17ad0 <__udivdi3+0xcc>
   17bac:	2700      	movs	r7, #0
   17bae:	2000      	movs	r0, #0
   17bb0:	e78e      	b.n	17ad0 <__udivdi3+0xcc>
   17bb2:	2320      	movs	r3, #32
   17bb4:	1a1b      	subs	r3, r3, r0
   17bb6:	4642      	mov	r2, r8
   17bb8:	4657      	mov	r7, sl
   17bba:	4082      	lsls	r2, r0
   17bbc:	40df      	lsrs	r7, r3
   17bbe:	4317      	orrs	r7, r2
   17bc0:	4652      	mov	r2, sl
   17bc2:	4082      	lsls	r2, r0
   17bc4:	9201      	str	r2, [sp, #4]
   17bc6:	1c32      	adds	r2, r6, #0
   17bc8:	40da      	lsrs	r2, r3
   17bca:	1c29      	adds	r1, r5, #0
   17bcc:	40d9      	lsrs	r1, r3
   17bce:	4085      	lsls	r5, r0
   17bd0:	1c13      	adds	r3, r2, #0
   17bd2:	432b      	orrs	r3, r5
   17bd4:	9302      	str	r3, [sp, #8]
   17bd6:	0c3d      	lsrs	r5, r7, #16
   17bd8:	043b      	lsls	r3, r7, #16
   17bda:	0c1b      	lsrs	r3, r3, #16
   17bdc:	4688      	mov	r8, r1
   17bde:	1c08      	adds	r0, r1, #0
   17be0:	1c29      	adds	r1, r5, #0
   17be2:	469a      	mov	sl, r3
   17be4:	f7fd fd98 	bl	15718 <__aeabi_uidiv>
   17be8:	4653      	mov	r3, sl
   17bea:	4343      	muls	r3, r0
   17bec:	4681      	mov	r9, r0
   17bee:	1c29      	adds	r1, r5, #0
   17bf0:	4640      	mov	r0, r8
   17bf2:	469b      	mov	fp, r3
   17bf4:	f7fd fdd4 	bl	157a0 <__aeabi_uidivmod>
   17bf8:	9a02      	ldr	r2, [sp, #8]
   17bfa:	0409      	lsls	r1, r1, #16
   17bfc:	0c13      	lsrs	r3, r2, #16
   17bfe:	4319      	orrs	r1, r3
   17c00:	458b      	cmp	fp, r1
   17c02:	d906      	bls.n	17c12 <__udivdi3+0x20e>
   17c04:	464b      	mov	r3, r9
   17c06:	19c9      	adds	r1, r1, r7
   17c08:	3b01      	subs	r3, #1
   17c0a:	428f      	cmp	r7, r1
   17c0c:	d800      	bhi.n	17c10 <__udivdi3+0x20c>
   17c0e:	e0ab      	b.n	17d68 <__udivdi3+0x364>
   17c10:	4699      	mov	r9, r3
   17c12:	465a      	mov	r2, fp
   17c14:	1a8a      	subs	r2, r1, r2
   17c16:	1c10      	adds	r0, r2, #0
   17c18:	1c29      	adds	r1, r5, #0
   17c1a:	4693      	mov	fp, r2
   17c1c:	f7fd fd7c 	bl	15718 <__aeabi_uidiv>
   17c20:	4653      	mov	r3, sl
   17c22:	4343      	muls	r3, r0
   17c24:	1c29      	adds	r1, r5, #0
   17c26:	4680      	mov	r8, r0
   17c28:	4658      	mov	r0, fp
   17c2a:	469a      	mov	sl, r3
   17c2c:	f7fd fdb8 	bl	157a0 <__aeabi_uidivmod>
   17c30:	9a02      	ldr	r2, [sp, #8]
   17c32:	0409      	lsls	r1, r1, #16
   17c34:	0415      	lsls	r5, r2, #16
   17c36:	0c2d      	lsrs	r5, r5, #16
   17c38:	4329      	orrs	r1, r5
   17c3a:	458a      	cmp	sl, r1
   17c3c:	d906      	bls.n	17c4c <__udivdi3+0x248>
   17c3e:	4643      	mov	r3, r8
   17c40:	19c9      	adds	r1, r1, r7
   17c42:	3b01      	subs	r3, #1
   17c44:	428f      	cmp	r7, r1
   17c46:	d800      	bhi.n	17c4a <__udivdi3+0x246>
   17c48:	e086      	b.n	17d58 <__udivdi3+0x354>
   17c4a:	4698      	mov	r8, r3
   17c4c:	4657      	mov	r7, sl
   17c4e:	1bcf      	subs	r7, r1, r7
   17c50:	46ba      	mov	sl, r7
   17c52:	4649      	mov	r1, r9
   17c54:	9f01      	ldr	r7, [sp, #4]
   17c56:	0408      	lsls	r0, r1, #16
   17c58:	4642      	mov	r2, r8
   17c5a:	4310      	orrs	r0, r2
   17c5c:	043d      	lsls	r5, r7, #16
   17c5e:	0c2d      	lsrs	r5, r5, #16
   17c60:	0403      	lsls	r3, r0, #16
   17c62:	0c3f      	lsrs	r7, r7, #16
   17c64:	0c1b      	lsrs	r3, r3, #16
   17c66:	0c02      	lsrs	r2, r0, #16
   17c68:	1c29      	adds	r1, r5, #0
   17c6a:	4359      	muls	r1, r3
   17c6c:	4355      	muls	r5, r2
   17c6e:	437b      	muls	r3, r7
   17c70:	437a      	muls	r2, r7
   17c72:	18eb      	adds	r3, r5, r3
   17c74:	0c0f      	lsrs	r7, r1, #16
   17c76:	19db      	adds	r3, r3, r7
   17c78:	468c      	mov	ip, r1
   17c7a:	429d      	cmp	r5, r3
   17c7c:	d902      	bls.n	17c84 <__udivdi3+0x280>
   17c7e:	2780      	movs	r7, #128	; 0x80
   17c80:	027f      	lsls	r7, r7, #9
   17c82:	19d2      	adds	r2, r2, r7
   17c84:	0c1d      	lsrs	r5, r3, #16
   17c86:	1952      	adds	r2, r2, r5
   17c88:	4592      	cmp	sl, r2
   17c8a:	d35f      	bcc.n	17d4c <__udivdi3+0x348>
   17c8c:	d056      	beq.n	17d3c <__udivdi3+0x338>
   17c8e:	2700      	movs	r7, #0
   17c90:	e71e      	b.n	17ad0 <__udivdi3+0xcc>
   17c92:	2320      	movs	r3, #32
   17c94:	1a1b      	subs	r3, r3, r0
   17c96:	1c31      	adds	r1, r6, #0
   17c98:	1c2f      	adds	r7, r5, #0
   17c9a:	40d9      	lsrs	r1, r3
   17c9c:	40df      	lsrs	r7, r3
   17c9e:	4085      	lsls	r5, r0
   17ca0:	1c0b      	adds	r3, r1, #0
   17ca2:	4084      	lsls	r4, r0
   17ca4:	432b      	orrs	r3, r5
   17ca6:	4086      	lsls	r6, r0
   17ca8:	9301      	str	r3, [sp, #4]
   17caa:	46b3      	mov	fp, r6
   17cac:	0423      	lsls	r3, r4, #16
   17cae:	0c26      	lsrs	r6, r4, #16
   17cb0:	0c1b      	lsrs	r3, r3, #16
   17cb2:	1c38      	adds	r0, r7, #0
   17cb4:	1c31      	adds	r1, r6, #0
   17cb6:	4698      	mov	r8, r3
   17cb8:	f7fd fd2e 	bl	15718 <__aeabi_uidiv>
   17cbc:	4642      	mov	r2, r8
   17cbe:	4342      	muls	r2, r0
   17cc0:	1c05      	adds	r5, r0, #0
   17cc2:	1c31      	adds	r1, r6, #0
   17cc4:	1c38      	adds	r0, r7, #0
   17cc6:	4691      	mov	r9, r2
   17cc8:	f7fd fd6a 	bl	157a0 <__aeabi_uidivmod>
   17ccc:	9f01      	ldr	r7, [sp, #4]
   17cce:	0409      	lsls	r1, r1, #16
   17cd0:	0c3b      	lsrs	r3, r7, #16
   17cd2:	4319      	orrs	r1, r3
   17cd4:	4589      	cmp	r9, r1
   17cd6:	d907      	bls.n	17ce8 <__udivdi3+0x2e4>
   17cd8:	1909      	adds	r1, r1, r4
   17cda:	1e6b      	subs	r3, r5, #1
   17cdc:	428c      	cmp	r4, r1
   17cde:	d84d      	bhi.n	17d7c <__udivdi3+0x378>
   17ce0:	4589      	cmp	r9, r1
   17ce2:	d94b      	bls.n	17d7c <__udivdi3+0x378>
   17ce4:	3d02      	subs	r5, #2
   17ce6:	1909      	adds	r1, r1, r4
   17ce8:	464a      	mov	r2, r9
   17cea:	1a8a      	subs	r2, r1, r2
   17cec:	1c10      	adds	r0, r2, #0
   17cee:	1c31      	adds	r1, r6, #0
   17cf0:	4692      	mov	sl, r2
   17cf2:	f7fd fd11 	bl	15718 <__aeabi_uidiv>
   17cf6:	4643      	mov	r3, r8
   17cf8:	4343      	muls	r3, r0
   17cfa:	1c07      	adds	r7, r0, #0
   17cfc:	1c31      	adds	r1, r6, #0
   17cfe:	4650      	mov	r0, sl
   17d00:	4699      	mov	r9, r3
   17d02:	f7fd fd4d 	bl	157a0 <__aeabi_uidivmod>
   17d06:	9a01      	ldr	r2, [sp, #4]
   17d08:	0409      	lsls	r1, r1, #16
   17d0a:	0413      	lsls	r3, r2, #16
   17d0c:	0c1b      	lsrs	r3, r3, #16
   17d0e:	4319      	orrs	r1, r3
   17d10:	4589      	cmp	r9, r1
   17d12:	d907      	bls.n	17d24 <__udivdi3+0x320>
   17d14:	1909      	adds	r1, r1, r4
   17d16:	1e7b      	subs	r3, r7, #1
   17d18:	428c      	cmp	r4, r1
   17d1a:	d82d      	bhi.n	17d78 <__udivdi3+0x374>
   17d1c:	4589      	cmp	r9, r1
   17d1e:	d92b      	bls.n	17d78 <__udivdi3+0x374>
   17d20:	3f02      	subs	r7, #2
   17d22:	1909      	adds	r1, r1, r4
   17d24:	464b      	mov	r3, r9
   17d26:	1acb      	subs	r3, r1, r3
   17d28:	042d      	lsls	r5, r5, #16
   17d2a:	4699      	mov	r9, r3
   17d2c:	432f      	orrs	r7, r5
   17d2e:	e6fd      	b.n	17b2c <__udivdi3+0x128>
   17d30:	1c1e      	adds	r6, r3, #0
   17d32:	e6ca      	b.n	17aca <__udivdi3+0xc6>
   17d34:	1c1f      	adds	r7, r3, #0
   17d36:	e6aa      	b.n	17a8e <__udivdi3+0x8a>
   17d38:	4699      	mov	r9, r3
   17d3a:	e733      	b.n	17ba4 <__udivdi3+0x1a0>
   17d3c:	4661      	mov	r1, ip
   17d3e:	040a      	lsls	r2, r1, #16
   17d40:	041b      	lsls	r3, r3, #16
   17d42:	0c12      	lsrs	r2, r2, #16
   17d44:	189b      	adds	r3, r3, r2
   17d46:	40a6      	lsls	r6, r4
   17d48:	429e      	cmp	r6, r3
   17d4a:	d2a0      	bcs.n	17c8e <__udivdi3+0x28a>
   17d4c:	3801      	subs	r0, #1
   17d4e:	2700      	movs	r7, #0
   17d50:	e6be      	b.n	17ad0 <__udivdi3+0xcc>
   17d52:	2700      	movs	r7, #0
   17d54:	2001      	movs	r0, #1
   17d56:	e6bb      	b.n	17ad0 <__udivdi3+0xcc>
   17d58:	458a      	cmp	sl, r1
   17d5a:	d800      	bhi.n	17d5e <__udivdi3+0x35a>
   17d5c:	e775      	b.n	17c4a <__udivdi3+0x246>
   17d5e:	2302      	movs	r3, #2
   17d60:	425b      	negs	r3, r3
   17d62:	4498      	add	r8, r3
   17d64:	19c9      	adds	r1, r1, r7
   17d66:	e771      	b.n	17c4c <__udivdi3+0x248>
   17d68:	458b      	cmp	fp, r1
   17d6a:	d800      	bhi.n	17d6e <__udivdi3+0x36a>
   17d6c:	e750      	b.n	17c10 <__udivdi3+0x20c>
   17d6e:	2302      	movs	r3, #2
   17d70:	425b      	negs	r3, r3
   17d72:	4499      	add	r9, r3
   17d74:	19c9      	adds	r1, r1, r7
   17d76:	e74c      	b.n	17c12 <__udivdi3+0x20e>
   17d78:	1c1f      	adds	r7, r3, #0
   17d7a:	e7d3      	b.n	17d24 <__udivdi3+0x320>
   17d7c:	1c1d      	adds	r5, r3, #0
   17d7e:	e7b3      	b.n	17ce8 <__udivdi3+0x2e4>
   17d80:	3d02      	subs	r5, #2
   17d82:	1900      	adds	r0, r0, r4
   17d84:	e6ec      	b.n	17b60 <__udivdi3+0x15c>
   17d86:	46c0      	nop			; (mov r8, r8)

00017d88 <__errno>:
   17d88:	4b01      	ldr	r3, [pc, #4]	; (17d90 <__errno+0x8>)
   17d8a:	6818      	ldr	r0, [r3, #0]
   17d8c:	4770      	bx	lr
   17d8e:	46c0      	nop			; (mov r8, r8)
   17d90:	20000470 	.word	0x20000470

00017d94 <__libc_init_array>:
   17d94:	b570      	push	{r4, r5, r6, lr}
   17d96:	4e0d      	ldr	r6, [pc, #52]	; (17dcc <__libc_init_array+0x38>)
   17d98:	4d0d      	ldr	r5, [pc, #52]	; (17dd0 <__libc_init_array+0x3c>)
   17d9a:	2400      	movs	r4, #0
   17d9c:	1bad      	subs	r5, r5, r6
   17d9e:	10ad      	asrs	r5, r5, #2
   17da0:	d005      	beq.n	17dae <__libc_init_array+0x1a>
   17da2:	00a3      	lsls	r3, r4, #2
   17da4:	58f3      	ldr	r3, [r6, r3]
   17da6:	3401      	adds	r4, #1
   17da8:	4798      	blx	r3
   17daa:	42a5      	cmp	r5, r4
   17dac:	d1f9      	bne.n	17da2 <__libc_init_array+0xe>
   17dae:	f000 fc6b 	bl	18688 <_init>
   17db2:	4e08      	ldr	r6, [pc, #32]	; (17dd4 <__libc_init_array+0x40>)
   17db4:	4d08      	ldr	r5, [pc, #32]	; (17dd8 <__libc_init_array+0x44>)
   17db6:	2400      	movs	r4, #0
   17db8:	1bad      	subs	r5, r5, r6
   17dba:	10ad      	asrs	r5, r5, #2
   17dbc:	d005      	beq.n	17dca <__libc_init_array+0x36>
   17dbe:	00a3      	lsls	r3, r4, #2
   17dc0:	58f3      	ldr	r3, [r6, r3]
   17dc2:	3401      	adds	r4, #1
   17dc4:	4798      	blx	r3
   17dc6:	42a5      	cmp	r5, r4
   17dc8:	d1f9      	bne.n	17dbe <__libc_init_array+0x2a>
   17dca:	bd70      	pop	{r4, r5, r6, pc}
   17dcc:	00018694 	.word	0x00018694
   17dd0:	00018694 	.word	0x00018694
   17dd4:	00018694 	.word	0x00018694
   17dd8:	0001869c 	.word	0x0001869c

00017ddc <memcpy>:
   17ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dde:	2a0f      	cmp	r2, #15
   17de0:	d935      	bls.n	17e4e <memcpy+0x72>
   17de2:	1c03      	adds	r3, r0, #0
   17de4:	430b      	orrs	r3, r1
   17de6:	079c      	lsls	r4, r3, #30
   17de8:	d135      	bne.n	17e56 <memcpy+0x7a>
   17dea:	1c16      	adds	r6, r2, #0
   17dec:	3e10      	subs	r6, #16
   17dee:	0936      	lsrs	r6, r6, #4
   17df0:	0135      	lsls	r5, r6, #4
   17df2:	1945      	adds	r5, r0, r5
   17df4:	3510      	adds	r5, #16
   17df6:	1c0c      	adds	r4, r1, #0
   17df8:	1c03      	adds	r3, r0, #0
   17dfa:	6827      	ldr	r7, [r4, #0]
   17dfc:	601f      	str	r7, [r3, #0]
   17dfe:	6867      	ldr	r7, [r4, #4]
   17e00:	605f      	str	r7, [r3, #4]
   17e02:	68a7      	ldr	r7, [r4, #8]
   17e04:	609f      	str	r7, [r3, #8]
   17e06:	68e7      	ldr	r7, [r4, #12]
   17e08:	3410      	adds	r4, #16
   17e0a:	60df      	str	r7, [r3, #12]
   17e0c:	3310      	adds	r3, #16
   17e0e:	42ab      	cmp	r3, r5
   17e10:	d1f3      	bne.n	17dfa <memcpy+0x1e>
   17e12:	1c73      	adds	r3, r6, #1
   17e14:	011b      	lsls	r3, r3, #4
   17e16:	18c5      	adds	r5, r0, r3
   17e18:	18c9      	adds	r1, r1, r3
   17e1a:	230f      	movs	r3, #15
   17e1c:	4013      	ands	r3, r2
   17e1e:	2b03      	cmp	r3, #3
   17e20:	d91b      	bls.n	17e5a <memcpy+0x7e>
   17e22:	1f1c      	subs	r4, r3, #4
   17e24:	08a4      	lsrs	r4, r4, #2
   17e26:	3401      	adds	r4, #1
   17e28:	00a4      	lsls	r4, r4, #2
   17e2a:	2300      	movs	r3, #0
   17e2c:	58ce      	ldr	r6, [r1, r3]
   17e2e:	50ee      	str	r6, [r5, r3]
   17e30:	3304      	adds	r3, #4
   17e32:	42a3      	cmp	r3, r4
   17e34:	d1fa      	bne.n	17e2c <memcpy+0x50>
   17e36:	18ed      	adds	r5, r5, r3
   17e38:	18c9      	adds	r1, r1, r3
   17e3a:	2303      	movs	r3, #3
   17e3c:	401a      	ands	r2, r3
   17e3e:	d005      	beq.n	17e4c <memcpy+0x70>
   17e40:	2300      	movs	r3, #0
   17e42:	5ccc      	ldrb	r4, [r1, r3]
   17e44:	54ec      	strb	r4, [r5, r3]
   17e46:	3301      	adds	r3, #1
   17e48:	4293      	cmp	r3, r2
   17e4a:	d1fa      	bne.n	17e42 <memcpy+0x66>
   17e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e4e:	1c05      	adds	r5, r0, #0
   17e50:	2a00      	cmp	r2, #0
   17e52:	d1f5      	bne.n	17e40 <memcpy+0x64>
   17e54:	e7fa      	b.n	17e4c <memcpy+0x70>
   17e56:	1c05      	adds	r5, r0, #0
   17e58:	e7f2      	b.n	17e40 <memcpy+0x64>
   17e5a:	1c1a      	adds	r2, r3, #0
   17e5c:	e7f8      	b.n	17e50 <memcpy+0x74>
   17e5e:	46c0      	nop			; (mov r8, r8)

00017e60 <memset>:
   17e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e62:	0783      	lsls	r3, r0, #30
   17e64:	d046      	beq.n	17ef4 <memset+0x94>
   17e66:	1e54      	subs	r4, r2, #1
   17e68:	2a00      	cmp	r2, #0
   17e6a:	d042      	beq.n	17ef2 <memset+0x92>
   17e6c:	b2ce      	uxtb	r6, r1
   17e6e:	1c03      	adds	r3, r0, #0
   17e70:	2503      	movs	r5, #3
   17e72:	e003      	b.n	17e7c <memset+0x1c>
   17e74:	1e62      	subs	r2, r4, #1
   17e76:	2c00      	cmp	r4, #0
   17e78:	d03b      	beq.n	17ef2 <memset+0x92>
   17e7a:	1c14      	adds	r4, r2, #0
   17e7c:	3301      	adds	r3, #1
   17e7e:	1e5a      	subs	r2, r3, #1
   17e80:	7016      	strb	r6, [r2, #0]
   17e82:	422b      	tst	r3, r5
   17e84:	d1f6      	bne.n	17e74 <memset+0x14>
   17e86:	2c03      	cmp	r4, #3
   17e88:	d92b      	bls.n	17ee2 <memset+0x82>
   17e8a:	25ff      	movs	r5, #255	; 0xff
   17e8c:	400d      	ands	r5, r1
   17e8e:	022a      	lsls	r2, r5, #8
   17e90:	4315      	orrs	r5, r2
   17e92:	042a      	lsls	r2, r5, #16
   17e94:	4315      	orrs	r5, r2
   17e96:	2c0f      	cmp	r4, #15
   17e98:	d915      	bls.n	17ec6 <memset+0x66>
   17e9a:	1c27      	adds	r7, r4, #0
   17e9c:	3f10      	subs	r7, #16
   17e9e:	093f      	lsrs	r7, r7, #4
   17ea0:	1c1e      	adds	r6, r3, #0
   17ea2:	013a      	lsls	r2, r7, #4
   17ea4:	3610      	adds	r6, #16
   17ea6:	18b6      	adds	r6, r6, r2
   17ea8:	1c1a      	adds	r2, r3, #0
   17eaa:	6015      	str	r5, [r2, #0]
   17eac:	6055      	str	r5, [r2, #4]
   17eae:	6095      	str	r5, [r2, #8]
   17eb0:	60d5      	str	r5, [r2, #12]
   17eb2:	3210      	adds	r2, #16
   17eb4:	42b2      	cmp	r2, r6
   17eb6:	d1f8      	bne.n	17eaa <memset+0x4a>
   17eb8:	3701      	adds	r7, #1
   17eba:	013f      	lsls	r7, r7, #4
   17ebc:	220f      	movs	r2, #15
   17ebe:	19db      	adds	r3, r3, r7
   17ec0:	4014      	ands	r4, r2
   17ec2:	2c03      	cmp	r4, #3
   17ec4:	d90d      	bls.n	17ee2 <memset+0x82>
   17ec6:	1f27      	subs	r7, r4, #4
   17ec8:	08bf      	lsrs	r7, r7, #2
   17eca:	00ba      	lsls	r2, r7, #2
   17ecc:	1d1e      	adds	r6, r3, #4
   17ece:	18b6      	adds	r6, r6, r2
   17ed0:	1c1a      	adds	r2, r3, #0
   17ed2:	c220      	stmia	r2!, {r5}
   17ed4:	42b2      	cmp	r2, r6
   17ed6:	d1fc      	bne.n	17ed2 <memset+0x72>
   17ed8:	3701      	adds	r7, #1
   17eda:	00bf      	lsls	r7, r7, #2
   17edc:	2203      	movs	r2, #3
   17ede:	19db      	adds	r3, r3, r7
   17ee0:	4014      	ands	r4, r2
   17ee2:	2c00      	cmp	r4, #0
   17ee4:	d005      	beq.n	17ef2 <memset+0x92>
   17ee6:	191c      	adds	r4, r3, r4
   17ee8:	b2c9      	uxtb	r1, r1
   17eea:	7019      	strb	r1, [r3, #0]
   17eec:	3301      	adds	r3, #1
   17eee:	42a3      	cmp	r3, r4
   17ef0:	d1fb      	bne.n	17eea <memset+0x8a>
   17ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ef4:	1c14      	adds	r4, r2, #0
   17ef6:	1c03      	adds	r3, r0, #0
   17ef8:	e7c5      	b.n	17e86 <memset+0x26>
   17efa:	46c0      	nop			; (mov r8, r8)

00017efc <register_fini>:
   17efc:	b508      	push	{r3, lr}
   17efe:	4b03      	ldr	r3, [pc, #12]	; (17f0c <register_fini+0x10>)
   17f00:	2b00      	cmp	r3, #0
   17f02:	d002      	beq.n	17f0a <register_fini+0xe>
   17f04:	4802      	ldr	r0, [pc, #8]	; (17f10 <register_fini+0x14>)
   17f06:	f000 f805 	bl	17f14 <atexit>
   17f0a:	bd08      	pop	{r3, pc}
   17f0c:	00000000 	.word	0x00000000
   17f10:	00017f25 	.word	0x00017f25

00017f14 <atexit>:
   17f14:	b508      	push	{r3, lr}
   17f16:	1c01      	adds	r1, r0, #0
   17f18:	2200      	movs	r2, #0
   17f1a:	2000      	movs	r0, #0
   17f1c:	2300      	movs	r3, #0
   17f1e:	f000 f819 	bl	17f54 <__register_exitproc>
   17f22:	bd08      	pop	{r3, pc}

00017f24 <__libc_fini_array>:
   17f24:	b538      	push	{r3, r4, r5, lr}
   17f26:	4b09      	ldr	r3, [pc, #36]	; (17f4c <__libc_fini_array+0x28>)
   17f28:	4d09      	ldr	r5, [pc, #36]	; (17f50 <__libc_fini_array+0x2c>)
   17f2a:	1aed      	subs	r5, r5, r3
   17f2c:	10ad      	asrs	r5, r5, #2
   17f2e:	d009      	beq.n	17f44 <__libc_fini_array+0x20>
   17f30:	3d01      	subs	r5, #1
   17f32:	00ac      	lsls	r4, r5, #2
   17f34:	18e4      	adds	r4, r4, r3
   17f36:	e000      	b.n	17f3a <__libc_fini_array+0x16>
   17f38:	3d01      	subs	r5, #1
   17f3a:	6823      	ldr	r3, [r4, #0]
   17f3c:	4798      	blx	r3
   17f3e:	3c04      	subs	r4, #4
   17f40:	2d00      	cmp	r5, #0
   17f42:	d1f9      	bne.n	17f38 <__libc_fini_array+0x14>
   17f44:	f000 fbaa 	bl	1869c <_fini>
   17f48:	bd38      	pop	{r3, r4, r5, pc}
   17f4a:	46c0      	nop			; (mov r8, r8)
   17f4c:	000186a8 	.word	0x000186a8
   17f50:	000186ac 	.word	0x000186ac

00017f54 <__register_exitproc>:
   17f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f56:	464f      	mov	r7, r9
   17f58:	4646      	mov	r6, r8
   17f5a:	b4c0      	push	{r6, r7}
   17f5c:	4698      	mov	r8, r3
   17f5e:	4b2b      	ldr	r3, [pc, #172]	; (1800c <__register_exitproc+0xb8>)
   17f60:	25a4      	movs	r5, #164	; 0xa4
   17f62:	681b      	ldr	r3, [r3, #0]
   17f64:	006d      	lsls	r5, r5, #1
   17f66:	595c      	ldr	r4, [r3, r5]
   17f68:	b083      	sub	sp, #12
   17f6a:	1c06      	adds	r6, r0, #0
   17f6c:	1c0f      	adds	r7, r1, #0
   17f6e:	4691      	mov	r9, r2
   17f70:	9301      	str	r3, [sp, #4]
   17f72:	2c00      	cmp	r4, #0
   17f74:	d044      	beq.n	18000 <__register_exitproc+0xac>
   17f76:	6865      	ldr	r5, [r4, #4]
   17f78:	2d1f      	cmp	r5, #31
   17f7a:	dd1a      	ble.n	17fb2 <__register_exitproc+0x5e>
   17f7c:	4b24      	ldr	r3, [pc, #144]	; (18010 <__register_exitproc+0xbc>)
   17f7e:	2b00      	cmp	r3, #0
   17f80:	d102      	bne.n	17f88 <__register_exitproc+0x34>
   17f82:	2001      	movs	r0, #1
   17f84:	4240      	negs	r0, r0
   17f86:	e01c      	b.n	17fc2 <__register_exitproc+0x6e>
   17f88:	20c8      	movs	r0, #200	; 0xc8
   17f8a:	0040      	lsls	r0, r0, #1
   17f8c:	e000      	b.n	17f90 <__register_exitproc+0x3c>
   17f8e:	bf00      	nop
   17f90:	1e04      	subs	r4, r0, #0
   17f92:	d0f6      	beq.n	17f82 <__register_exitproc+0x2e>
   17f94:	2500      	movs	r5, #0
   17f96:	6045      	str	r5, [r0, #4]
   17f98:	23a4      	movs	r3, #164	; 0xa4
   17f9a:	9801      	ldr	r0, [sp, #4]
   17f9c:	005b      	lsls	r3, r3, #1
   17f9e:	58c0      	ldr	r0, [r0, r3]
   17fa0:	9901      	ldr	r1, [sp, #4]
   17fa2:	6020      	str	r0, [r4, #0]
   17fa4:	50cc      	str	r4, [r1, r3]
   17fa6:	23c4      	movs	r3, #196	; 0xc4
   17fa8:	005b      	lsls	r3, r3, #1
   17faa:	50e5      	str	r5, [r4, r3]
   17fac:	23c6      	movs	r3, #198	; 0xc6
   17fae:	005b      	lsls	r3, r3, #1
   17fb0:	50e5      	str	r5, [r4, r3]
   17fb2:	2e00      	cmp	r6, #0
   17fb4:	d10a      	bne.n	17fcc <__register_exitproc+0x78>
   17fb6:	1c6b      	adds	r3, r5, #1
   17fb8:	3502      	adds	r5, #2
   17fba:	00ad      	lsls	r5, r5, #2
   17fbc:	6063      	str	r3, [r4, #4]
   17fbe:	2000      	movs	r0, #0
   17fc0:	512f      	str	r7, [r5, r4]
   17fc2:	b003      	add	sp, #12
   17fc4:	bc0c      	pop	{r2, r3}
   17fc6:	4690      	mov	r8, r2
   17fc8:	4699      	mov	r9, r3
   17fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fcc:	00ab      	lsls	r3, r5, #2
   17fce:	18e3      	adds	r3, r4, r3
   17fd0:	2288      	movs	r2, #136	; 0x88
   17fd2:	4648      	mov	r0, r9
   17fd4:	5098      	str	r0, [r3, r2]
   17fd6:	20c4      	movs	r0, #196	; 0xc4
   17fd8:	0040      	lsls	r0, r0, #1
   17fda:	1822      	adds	r2, r4, r0
   17fdc:	6810      	ldr	r0, [r2, #0]
   17fde:	2101      	movs	r1, #1
   17fe0:	40a9      	lsls	r1, r5
   17fe2:	4308      	orrs	r0, r1
   17fe4:	6010      	str	r0, [r2, #0]
   17fe6:	2284      	movs	r2, #132	; 0x84
   17fe8:	0052      	lsls	r2, r2, #1
   17fea:	4640      	mov	r0, r8
   17fec:	5098      	str	r0, [r3, r2]
   17fee:	2e02      	cmp	r6, #2
   17ff0:	d1e1      	bne.n	17fb6 <__register_exitproc+0x62>
   17ff2:	22c6      	movs	r2, #198	; 0xc6
   17ff4:	0052      	lsls	r2, r2, #1
   17ff6:	18a3      	adds	r3, r4, r2
   17ff8:	6818      	ldr	r0, [r3, #0]
   17ffa:	4301      	orrs	r1, r0
   17ffc:	6019      	str	r1, [r3, #0]
   17ffe:	e7da      	b.n	17fb6 <__register_exitproc+0x62>
   18000:	1c1c      	adds	r4, r3, #0
   18002:	344d      	adds	r4, #77	; 0x4d
   18004:	34ff      	adds	r4, #255	; 0xff
   18006:	515c      	str	r4, [r3, r5]
   18008:	e7b5      	b.n	17f76 <__register_exitproc+0x22>
   1800a:	46c0      	nop			; (mov r8, r8)
   1800c:	00018684 	.word	0x00018684
   18010:	00000000 	.word	0x00000000
   18014:	00000002 	.word	0x00000002
   18018:	00000003 	.word	0x00000003
   1801c:	00000028 	.word	0x00000028
   18020:	00000029 	.word	0x00000029
   18024:	00000004 	.word	0x00000004
   18028:	00000005 	.word	0x00000005
   1802c:	00000006 	.word	0x00000006
   18030:	00000007 	.word	0x00000007
   18034:	00000020 	.word	0x00000020
   18038:	00000021 	.word	0x00000021
   1803c:	00000022 	.word	0x00000022
   18040:	00000023 	.word	0x00000023
   18044:	00000024 	.word	0x00000024
   18048:	00000025 	.word	0x00000025
   1804c:	00000026 	.word	0x00000026
   18050:	00000027 	.word	0x00000027
   18054:	00000008 	.word	0x00000008
   18058:	00000009 	.word	0x00000009
   1805c:	0000000a 	.word	0x0000000a
   18060:	0000000b 	.word	0x0000000b
   18064:	00003600 	.word	0x00003600
   18068:	00003606 	.word	0x00003606
   1806c:	00003606 	.word	0x00003606
   18070:	00003606 	.word	0x00003606
   18074:	00003606 	.word	0x00003606
   18078:	00003606 	.word	0x00003606
   1807c:	00003606 	.word	0x00003606
   18080:	00003606 	.word	0x00003606
   18084:	00003606 	.word	0x00003606
   18088:	00003606 	.word	0x00003606
   1808c:	00003606 	.word	0x00003606
   18090:	00003606 	.word	0x00003606
   18094:	00003606 	.word	0x00003606
   18098:	00003606 	.word	0x00003606
   1809c:	00003606 	.word	0x00003606
   180a0:	00003606 	.word	0x00003606
   180a4:	000035ca 	.word	0x000035ca
   180a8:	00003606 	.word	0x00003606
   180ac:	00003606 	.word	0x00003606
   180b0:	00003606 	.word	0x00003606
   180b4:	00003606 	.word	0x00003606
   180b8:	00003606 	.word	0x00003606
   180bc:	00003606 	.word	0x00003606
   180c0:	00003606 	.word	0x00003606
   180c4:	00003606 	.word	0x00003606
   180c8:	00003606 	.word	0x00003606
   180cc:	00003606 	.word	0x00003606
   180d0:	00003606 	.word	0x00003606
   180d4:	00003606 	.word	0x00003606
   180d8:	00003606 	.word	0x00003606
   180dc:	00003606 	.word	0x00003606
   180e0:	00003606 	.word	0x00003606
   180e4:	000035fa 	.word	0x000035fa
   180e8:	00003606 	.word	0x00003606
   180ec:	00003606 	.word	0x00003606
   180f0:	00003606 	.word	0x00003606
   180f4:	00003606 	.word	0x00003606
   180f8:	00003606 	.word	0x00003606
   180fc:	00003606 	.word	0x00003606
   18100:	00003606 	.word	0x00003606
   18104:	00003606 	.word	0x00003606
   18108:	00003606 	.word	0x00003606
   1810c:	00003606 	.word	0x00003606
   18110:	00003606 	.word	0x00003606
   18114:	00003606 	.word	0x00003606
   18118:	00003606 	.word	0x00003606
   1811c:	00003606 	.word	0x00003606
   18120:	00003606 	.word	0x00003606
   18124:	000035f4 	.word	0x000035f4
   18128:	00003574 	.word	0x00003574
   1812c:	0000358a 	.word	0x0000358a
   18130:	000035a0 	.word	0x000035a0
   18134:	0000355a 	.word	0x0000355a
   18138:	00004556 	.word	0x00004556
   1813c:	00004556 	.word	0x00004556
   18140:	0000454a 	.word	0x0000454a
   18144:	00004556 	.word	0x00004556
   18148:	0000454a 	.word	0x0000454a
   1814c:	0000452a 	.word	0x0000452a
   18150:	0000452a 	.word	0x0000452a
   18154:	00004556 	.word	0x00004556
   18158:	00004556 	.word	0x00004556
   1815c:	00004556 	.word	0x00004556
   18160:	00004556 	.word	0x00004556
   18164:	00004556 	.word	0x00004556
   18168:	00004556 	.word	0x00004556
   1816c:	00004556 	.word	0x00004556
   18170:	00004556 	.word	0x00004556
   18174:	00004556 	.word	0x00004556
   18178:	00004556 	.word	0x00004556
   1817c:	00004556 	.word	0x00004556
   18180:	00004556 	.word	0x00004556
   18184:	00004556 	.word	0x00004556
   18188:	00004556 	.word	0x00004556
   1818c:	00004556 	.word	0x00004556
   18190:	00004556 	.word	0x00004556
   18194:	00004556 	.word	0x00004556
   18198:	00004556 	.word	0x00004556
   1819c:	00004556 	.word	0x00004556
   181a0:	00004556 	.word	0x00004556
   181a4:	00004556 	.word	0x00004556
   181a8:	00004556 	.word	0x00004556
   181ac:	00004556 	.word	0x00004556
   181b0:	00004556 	.word	0x00004556
   181b4:	00004556 	.word	0x00004556
   181b8:	00004556 	.word	0x00004556
   181bc:	00004556 	.word	0x00004556
   181c0:	00004556 	.word	0x00004556
   181c4:	00004556 	.word	0x00004556
   181c8:	00004556 	.word	0x00004556
   181cc:	00004556 	.word	0x00004556
   181d0:	00004556 	.word	0x00004556
   181d4:	00004556 	.word	0x00004556
   181d8:	00004556 	.word	0x00004556
   181dc:	00004556 	.word	0x00004556
   181e0:	00004556 	.word	0x00004556
   181e4:	00004556 	.word	0x00004556
   181e8:	00004556 	.word	0x00004556
   181ec:	00004556 	.word	0x00004556
   181f0:	00004556 	.word	0x00004556
   181f4:	00004556 	.word	0x00004556
   181f8:	00004556 	.word	0x00004556
   181fc:	00004556 	.word	0x00004556
   18200:	00004556 	.word	0x00004556
   18204:	00004556 	.word	0x00004556
   18208:	00004556 	.word	0x00004556
   1820c:	00004556 	.word	0x00004556
   18210:	00004556 	.word	0x00004556
   18214:	00004556 	.word	0x00004556
   18218:	00004556 	.word	0x00004556
   1821c:	00004556 	.word	0x00004556
   18220:	00004556 	.word	0x00004556
   18224:	00004556 	.word	0x00004556
   18228:	00004556 	.word	0x00004556
   1822c:	00004556 	.word	0x00004556
   18230:	00004556 	.word	0x00004556
   18234:	00004556 	.word	0x00004556
   18238:	0000454a 	.word	0x0000454a
   1823c:	0000454a 	.word	0x0000454a
   18240:	0000455a 	.word	0x0000455a
   18244:	0000455a 	.word	0x0000455a
   18248:	0000455a 	.word	0x0000455a
   1824c:	0000455a 	.word	0x0000455a
   18250:	42002000 	.word	0x42002000
   18254:	42002400 	.word	0x42002400
   18258:	42002800 	.word	0x42002800
   1825c:	42002c00 	.word	0x42002c00
   18260:	42003000 	.word	0x42003000
   18264:	42003400 	.word	0x42003400
   18268:	42003800 	.word	0x42003800
   1826c:	42003c00 	.word	0x42003c00
   18270:	14141313 	.word	0x14141313
   18274:	16161515 	.word	0x16161515
   18278:	02000100 	.word	0x02000100
   1827c:	08000400 	.word	0x08000400
   18280:	20001000 	.word	0x20001000
   18284:	80004000 	.word	0x80004000
   18288:	00006bb2 	.word	0x00006bb2
   1828c:	00006b9e 	.word	0x00006b9e
   18290:	00006b9e 	.word	0x00006b9e
   18294:	00006bb2 	.word	0x00006bb2
   18298:	00006c22 	.word	0x00006c22
   1829c:	00006c22 	.word	0x00006c22
   182a0:	00006b9e 	.word	0x00006b9e
   182a4:	00006bfa 	.word	0x00006bfa
   182a8:	00006c0e 	.word	0x00006c0e
   182ac:	00006c56 	.word	0x00006c56
   182b0:	00006cb8 	.word	0x00006cb8
   182b4:	00006c56 	.word	0x00006c56
   182b8:	00006cb8 	.word	0x00006cb8
   182bc:	00006cb8 	.word	0x00006cb8
   182c0:	00006cd4 	.word	0x00006cd4
   182c4:	00006cd4 	.word	0x00006cd4
   182c8:	00006cb8 	.word	0x00006cb8
   182cc:	00006cc6 	.word	0x00006cc6
   182d0:	00006cc6 	.word	0x00006cc6
   182d4:	00006cd4 	.word	0x00006cd4
   182d8:	00006cd4 	.word	0x00006cd4
   182dc:	00006cd4 	.word	0x00006cd4
   182e0:	00006cd4 	.word	0x00006cd4
   182e4:	00006cd4 	.word	0x00006cd4
   182e8:	00006bfa 	.word	0x00006bfa
   182ec:	00006bfa 	.word	0x00006bfa
   182f0:	00006cd4 	.word	0x00006cd4
   182f4:	00006b9e 	.word	0x00006b9e
   182f8:	00006bb2 	.word	0x00006bb2
   182fc:	00006bc6 	.word	0x00006bc6
   18300:	00006c56 	.word	0x00006c56
   18304:	00006bfa 	.word	0x00006bfa
   18308:	00006bfa 	.word	0x00006bfa
   1830c:	00006cd4 	.word	0x00006cd4
   18310:	00006cd4 	.word	0x00006cd4
   18314:	00006cd4 	.word	0x00006cd4
   18318:	00006bfa 	.word	0x00006bfa
   1831c:	000070b2 	.word	0x000070b2
   18320:	00008e32 	.word	0x00008e32
   18324:	00006fb0 	.word	0x00006fb0
   18328:	000072f0 	.word	0x000072f0
   1832c:	00007388 	.word	0x00007388
   18330:	000074b4 	.word	0x000074b4
   18334:	00007064 	.word	0x00007064
   18338:	0000786c 	.word	0x0000786c
   1833c:	00007a1c 	.word	0x00007a1c
   18340:	00007d58 	.word	0x00007d58
   18344:	00007ff4 	.word	0x00007ff4
   18348:	00007bfe 	.word	0x00007bfe
   1834c:	00008516 	.word	0x00008516
   18350:	00008366 	.word	0x00008366
   18354:	00007404 	.word	0x00007404
   18358:	0000745c 	.word	0x0000745c
   1835c:	000086ce 	.word	0x000086ce
   18360:	0000884a 	.word	0x0000884a
   18364:	000089e8 	.word	0x000089e8
   18368:	000086ce 	.word	0x000086ce
   1836c:	00008aee 	.word	0x00008aee
   18370:	00008d66 	.word	0x00008d66
   18374:	000086ce 	.word	0x000086ce
   18378:	000086ce 	.word	0x000086ce
   1837c:	00007a26 	.word	0x00007a26
   18380:	00007a7c 	.word	0x00007a7c
   18384:	00008e32 	.word	0x00008e32
   18388:	0000701a 	.word	0x0000701a
   1838c:	0000729c 	.word	0x0000729c
   18390:	00007388 	.word	0x00007388
   18394:	00007d58 	.word	0x00007d58
   18398:	00007922 	.word	0x00007922
   1839c:	000079b0 	.word	0x000079b0
   183a0:	00007b54 	.word	0x00007b54
   183a4:	00007b98 	.word	0x00007b98
   183a8:	00008e32 	.word	0x00008e32
   183ac:	0000782a 	.word	0x0000782a
   183b0:	00007568 	.word	0x00007568
   183b4:	000076e4 	.word	0x000076e4
   183b8:	00007568 	.word	0x00007568
   183bc:	000076e4 	.word	0x000076e4
   183c0:	00007568 	.word	0x00007568
   183c4:	000076e4 	.word	0x000076e4
   183c8:	00007568 	.word	0x00007568
   183cc:	000076e4 	.word	0x000076e4
   183d0:	00007568 	.word	0x00007568
   183d4:	000076e4 	.word	0x000076e4
   183d8:	0000b5f4 	.word	0x0000b5f4
   183dc:	0000b5fe 	.word	0x0000b5fe
   183e0:	0000b608 	.word	0x0000b608
   183e4:	0000b612 	.word	0x0000b612
   183e8:	0000b61c 	.word	0x0000b61c
   183ec:	0000b7f2 	.word	0x0000b7f2
   183f0:	0000b7fe 	.word	0x0000b7fe
   183f4:	0000b80a 	.word	0x0000b80a
   183f8:	0000b816 	.word	0x0000b816
   183fc:	0000b822 	.word	0x0000b822

00018400 <SwTaskList>:
   18400:	00005ed5 000099c5 000099f5 0000bbed     .^..............
   18410:	0000ccc9 0000b691 00006ec9 0000ebb9     .........n......
   18420:	0000cb1d 00010049 00010d7d 0000ebb9     ....I...}.......
   18430:	0000ebb9 0000f37d 0000bf25 0000ebb9     ....}...%.......
   18440:	0000fb56 0000fb92 0000fb38 0000faa6     V.......8.......
   18450:	0000faf4 0000fb92 0000fad6 0000fb92     ................
   18460:	0000fb74                                t...

00018464 <HoppingFrequencies>:
   18464:	36a0ae20 370b7de0 360817a0 36aff060      ..6.}.7...6`..6
   18474:	36aff060 362e3d40 35d2afc0 36990d00     `..6@=.6...5...6
   18484:	3663a520 3731a380 37226140 3635de60      .c6..17@a"7`.56
   18494:	366b4640 36bf32a0 36bf32a0 35cb0ea0     @Fk6.2.6.2.6...5
   184a4:	365462e0 373944a0 35cb0ea0 36f49a80     .bT6.D97...5...6
   184b4:	37131f00 35da50e0 366b4640 36f49a80     ...7.P.5@Fk6...6
   184c4:	3731a380 363d7f80 36d61600 36fc3ba0     ..17..=6...6.;.6
   184d4:	364cc1c0 36f49a80 3635de60 3731a380     ..L6...6`.56..17
   184e4:	36f49a80 36b79180 372a0260 361efb00     ...6...6`.*7...6
   184f4:	36aff060 373944a0 36269c20 36990d00     `..6.D97 .&6...6
   18504:	35f8d560 36990d00 35d2afc0 35f13440     `..5...6...5@4.5
   18514:	3689cac0 366b4640 360fb8c0 363d7f80     ...6@Fk6...6..=6
   18524:	373944a0 372a0260 364cc1c0 42000800     .D97`.*7..L6...B
   18534:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   18544:	42001c00 0a090807 00000c0b 000136ce     ...B.........6..
   18554:	00013732 00013732 000136f2 000136ec     27..27...6...6..
   18564:	000136f8 000136d4 000136fe 000138f8     .6...6...6...8..
   18574:	00013932 00013932 0001392e 000138ea     29..29...9...8..
   18584:	0001390a 000138da 0001391c 0001397e     .9...8...9..~9..
   18594:	00013994 00013994 00013990 00013978     .9...9...9..x9..
   185a4:	00013984 00013972 0001398a 00776f70     .9..r9...9..pow.
   185b4:	00000000                                ....

000185b8 <dp_h>:
	...
   185c0:	40000000 3fe2b803                       ...@...?

000185c8 <dp_l>:
	...
   185d0:	43cfd006 3e4cfdeb                       ...C..L>

000185d8 <bp>:
   185d8:	00000000 3ff00000 00000000 3ff80000     .......?.......?
	...

000185f0 <TWO52>:
   185f0:	00000000 43300000 00000000 c3300000     ......0C......0.
   18600:	00016250 000161ec 00016234 0001611a     Pb...a..4b...a..
   18610:	00016234 00016228 00016234 0001611a     4b..(b..4b...a..
   18620:	000161ec 000161ec 00016228 0001611a     .a...a..(b...a..
   18630:	00016110 00016110 00016110 00016474     .a...a...a..td..
   18640:	00016b20 00016d0e 00016d0e 00016b00      k...m...m...k..
   18650:	000169ea 000169ea 00016af2 00016b00     .i...i...j...k..
   18660:	000169ea 00016af2 000169ea 00016b00     .i...j...i...k..
   18670:	000169e8 000169e8 000169e8 00016d16     .i...i...i...m..
   18680:	00000043                                C...

00018684 <_global_impure_ptr>:
   18684:	20000048                                H.. 

00018688 <_init>:
   18688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1868a:	46c0      	nop			; (mov r8, r8)
   1868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1868e:	bc08      	pop	{r3}
   18690:	469e      	mov	lr, r3
   18692:	4770      	bx	lr

00018694 <__init_array_start>:
   18694:	00017efd 	.word	0x00017efd

00018698 <__frame_dummy_init_array_entry>:
   18698:	000031cd                                .1..

0001869c <_fini>:
   1869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1869e:	46c0      	nop			; (mov r8, r8)
   186a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   186a2:	bc08      	pop	{r3}
   186a4:	469e      	mov	lr, r3
   186a6:	4770      	bx	lr

000186a8 <__fini_array_start>:
   186a8:	000031a5 	.word	0x000031a5
